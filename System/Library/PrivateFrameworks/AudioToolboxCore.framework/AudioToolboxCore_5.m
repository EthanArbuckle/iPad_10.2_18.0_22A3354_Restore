uint64_t OggAudioStream::ParseHeaderPackets(const AudioStreamPacketDescription *this, unsigned int a2, unint64_t a3, const unsigned __int8 *a4, unsigned int a5, AudioStreamPacketDescription *a6, unsigned int *a7)
{
  return Ogg::File::ParseHeaderPackets((Ogg::File *)&this[96].mVariableFramesInPacket, a2, a3, a4, (uint64_t)a6, this + 24, a7);
}

uint64_t DSPGraph::Buffer::print(uint64_t result, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v6;

  if (a3 >= 5)
  {
    v4 = a4;
    v6 = result;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a2, a4, 1);
    v4 += 4;
    DSPGraph::printi(a2, v4, "num buffers %u\n", *(_DWORD *)(v6 + 96));
    DSPGraph::printi(a2, v4, "flags %x\n", *(_DWORD *)(v6 + 72));
    return DSPGraph::printi(a2, v4, "ABL %p\n", *(const void **)(v6 + 80));
  }
  return result;
}

__n128 DSPGraph::Buffer::copyTimeFrom(DSPGraph::Buffer *this, DSPGraph::Buffer *a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)((char *)a2 + 8);
  v3 = *(_OWORD *)((char *)a2 + 24);
  v4 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 40) = v4;
  *(_OWORD *)((char *)this + 24) = v3;
  *(__n128 *)((char *)this + 8) = result;
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  return result;
}

DSPGraph::Buffer *DSPGraph::Buffer::copyFrom(DSPGraph::Buffer *this, DSPGraph::Buffer *a2)
{
  DSPGraph::Buffer *v2;
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  void **v7;
  unsigned int *v8;
  size_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (a2 != this)
  {
    v2 = this;
    v3 = (_DWORD *)*((_QWORD *)a2 + 10);
    v4 = (_DWORD *)*((_QWORD *)this + 10);
    if (*v3 != *v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Buffer.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v12, "copyFrom");
      std::string::basic_string[abi:ne180100]<0>(&v11, "Buffer::copyFrom, fromABL->mNumberBuffers != toABL->mNumberBuffers");
      DSPGraph::ThrowException(1718444833, &v13, 63, &v12, &v11);
    }
    v5 = *((unsigned int *)this + 24);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = (void **)(v4 + 4);
      v8 = v3 + 3;
      do
      {
        v9 = *v8;
        if (v9 > *((_DWORD *)v2 + 25))
        {
          std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Buffer.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v12, "copyFrom");
          std::string::basic_string[abi:ne180100]<0>(&v11, "Buffer::copyFrom, fromABL->mBuffers[i].mDataByteSize > mByteCapacity");
          DSPGraph::ThrowException(1718444833, &v13, 68, &v12, &v11);
        }
        v10 = *(void **)(v8 + 1);
        this = (DSPGraph::Buffer *)*v7;
        if (v10 != *v7)
        {
          this = (DSPGraph::Buffer *)memcpy(this, v10, v9);
          LODWORD(v9) = *v8;
          v5 = *((unsigned int *)v2 + 24);
        }
        *((_DWORD *)v7 - 1) = v9;
        ++v6;
        v7 += 2;
        v8 += 4;
      }
      while (v6 < v5);
    }
  }
  return this;
}

void sub_18F0476C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_8426()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

unsigned int **DSPGraph::Buffer::restoreSizeToCapacity(DSPGraph::Buffer *this)
{
  return DSPGraph::Buffer::setByteSize(this, *((_DWORD *)this + 25));
}

uint64_t LoudnessInfoDictionaryForISOLoudnessBox(const __CFData *a1, const __CFDictionary **a2)
{
  unsigned int v2;
  CFTypeID v5;
  CFIndex Length;
  UInt8 *BytePtr;
  uint64_t v8;
  UInt8 *v9;
  const UInt8 *v10;
  int v11;
  char v12;
  const UInt8 *v13;
  int v14;
  const UInt8 *v15;
  int v16;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  UInt8 *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  UInt8 *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  UInt8 *v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  uint64_t v46;
  UInt8 *v47;
  int v48;
  uint64_t v49;
  UInt8 *v50;
  int v51;
  char v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v59;
  UInt8 *v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  UInt8 *v66;
  int v67;
  uint64_t *v68;
  __int16 v69;
  unsigned int v70;
  uint64_t v71;
  UInt8 *v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  uint64_t *v77;
  unsigned int v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v86;
  UInt8 *v87;
  int v88;
  _BYTE *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  UInt8 *v93;
  int v94;
  _BOOL4 CanonicalLoudness;
  _BOOL4 v96;
  const __CFDictionary *v97;
  const __CFDictionary **v99;
  __CFDictionary *v100;
  __int16 v101;
  char v102;
  float v103;
  CFTypeRef cf;
  __int16 v105;
  __CFDictionary *v106;
  __int16 v107;
  __CFDictionary *Mutable;
  __int16 v109;
  void **v110[2];
  void *__p;
  void *v112;
  uint64_t v113;
  uint64_t *v114;
  char *v115;
  void *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;

  v5 = CFGetTypeID(a1);
  if (v5 != CFDataGetTypeID())
    return 4294967246;
  Length = CFDataGetLength(a1);
  BytePtr = (UInt8 *)CFDataGetBytePtr(a1);
  v8 = 4294967246;
  if (BytePtr && Length >= 17)
  {
    v9 = BytePtr;
    v10 = &BytePtr[Length];
    if ((BytePtr & 3) != 0)
    {
      v11 = 0;
      v12 = BytePtr ^ 3;
      v13 = BytePtr + 1;
      v14 = 8 * ((BytePtr ^ 3) & 3) + 8;
      v15 = BytePtr;
      do
      {
        if (v15 >= v10)
          v16 = 255;
        else
          v16 = *v15;
        v11 = v16 | (v11 << 8);
        ++v15;
      }
      while ((v13++ & 3) != 0);
      v18 = (unsigned int *)&BytePtr[(v12 & 3) + 1];
      v19 = v11 << ((8 * (v12 & 3)) ^ 0x18);
    }
    else
    {
      v19 = 0;
      v14 = 0;
      v18 = (unsigned int *)BytePtr;
    }
    v122 = 0;
    v123 = 0;
    v124 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v20 = v10 - (const UInt8 *)v18;
    if (v14 + 8 * ((int)v10 - (int)v18) < 64)
    {
LABEL_217:
      v116 = 0;
      v117 = 0;
      v118 = 0;
      __p = 0;
      v112 = 0;
      v113 = 0;
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v109 = 257;
      v106 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v107 = 257;
      cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v105 = 257;
      CanonicalLoudness = FindCanonicalLoudness(v122, (uint64_t)v123, (uint64_t)&v114);
      v96 = FindCanonicalLoudness(v119, (uint64_t)v120, (uint64_t)v110);
      v103 = 0.0;
      v102 = 0;
      if (v96)
        ExpandLoudnessBox((CACFDictionary *)&v106, (uint64_t)v110, &v103, &v102);
      if (CanonicalLoudness)
      {
        ExpandLoudnessBox((CACFDictionary *)&Mutable, (uint64_t)&v114, &v103, &v102);
        if (CACFDictionary::Size((CACFDictionary *)&Mutable))
          CACFDictionary::AddDictionary((CACFDictionary *)&cf, CFSTR("main loudness parameters"), Mutable);
      }
      if (v96 && CACFDictionary::Size((CACFDictionary *)&v106))
        CACFDictionary::AddDictionary((CACFDictionary *)&cf, CFSTR("album loudness parameters"), v106);
      if (v102)
      {
        v100 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v101 = 257;
        CACFDictionary::AddFloat32((CACFDictionary *)&v100, CFSTR("aa itu loudness"), v103);
        CACFDictionary::AddDictionary((CACFDictionary *)&cf, CFSTR("dialogue anchor parameters"), v100);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v100);
      }
      CACFDictionary::AddData((CACFDictionary *)&cf, CFSTR("ISO loudness box"), a1);
      if (CACFDictionary::Size((CACFDictionary *)&cf) && cf)
      {
        CFRetain(cf);
        v97 = (const __CFDictionary *)cf;
      }
      else
      {
        v97 = 0;
      }
      *a2 = v97;
      CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v106);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
      if (__p)
      {
        v112 = __p;
        operator delete(__p);
      }
      if (v116)
      {
        v117 = v116;
        operator delete(v116);
      }
      v8 = 0;
      goto LABEL_237;
    }
    v99 = a2;
    while (1)
    {
      v21 = v14 - 32;
      if (v14 - 32 >= 0)
        break;
      if (v9 <= (UInt8 *)v18 && (v20 & ~(v20 >> 63) & 0xFFFFFFFC) != 0)
      {
        v23 = bswap32(*v18);
      }
      else
      {
        v24 = 0;
        v23 = v19;
        do
        {
          v25 = (UInt8 *)v18 + v24;
          v26 = 255;
          if ((char *)v18 + v24 < (char *)v10 && v25 >= v9)
            v26 = *v25;
          v23 = v26 | (v23 << 8);
          ++v24;
        }
        while ((_DWORD)v24 != 4);
      }
      ++v18;
      v19 |= v23 >> v14;
      if (v14)
      {
        LODWORD(v8) = v23 << -(char)v14;
        v22 = v14 - 32;
        v21 = v14;
LABEL_28:
        v14 = v22;
        if ((v22 & 0x80000000) == 0)
          goto LABEL_45;
        goto LABEL_31;
      }
      v21 = 0;
      LODWORD(v8) = 0;
      LOBYTE(v22) = -32;
LABEL_31:
      if ((((_DWORD)v10 - (_DWORD)v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) != 0
        && v9 <= (UInt8 *)v18)
      {
        v27 = bswap32(*v18);
      }
      else
      {
        v28 = 0;
        v27 = v8;
        do
        {
          v29 = (UInt8 *)v18 + v28;
          v30 = 255;
          if ((char *)v18 + v28 < (char *)v10 && v29 >= v9)
            v30 = *v29;
          v27 = v30 | (v27 << 8);
          ++v28;
        }
        while ((_DWORD)v28 != 4);
      }
      ++v18;
      LODWORD(v8) = (v27 >> v21) | v8;
      v31 = v27 << -(char)v22;
      if (v21)
        v2 = v31;
      else
        v2 = 0;
      if (v21)
        v14 = v21;
      else
        v14 = 0;
LABEL_45:
      if ((_DWORD)v8 != 1953263477 && (_DWORD)v8 != 1634496373)
      {
        v35 = v19 - v14;
        if (v19 > v14)
        {
          v2 = 0;
          v14 = 0;
          if (v35 < 0x20)
          {
            v19 = v35;
          }
          else
          {
            v18 = (unsigned int *)((char *)v18 + ((v35 >> 3) & 0x1FFFFFFC));
            v19 = v35 & 0x1F;
          }
        }
        if ((v19 - 33) >= 0xFFFFFFE0)
        {
          v14 -= v19;
          if (v14 < 0)
          {
            if ((((_DWORD)v10 - (_DWORD)v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) != 0
              && v9 <= (UInt8 *)v18)
            {
              v2 = bswap32(*v18);
            }
            else
            {
              v92 = 0;
              do
              {
                v93 = (UInt8 *)v18 + v92;
                v94 = 255;
                if ((char *)v18 + v92 < (char *)v10 && v93 >= v9)
                  v94 = *v93;
                v2 = v94 | (v2 << 8);
                ++v92;
              }
              while ((_DWORD)v92 != 4);
            }
            ++v18;
            if (v14 == -32)
              v2 = 0;
            else
              v2 <<= -(char)v14;
            if (v14 == -32)
              v14 = 0;
            else
              v14 += 32;
          }
          else
          {
            v2 <<= v19;
          }
        }
        goto LABEL_204;
      }
      v114 = 0;
      v115 = 0;
      v32 = HIBYTE(v2);
      v116 = 0;
      v33 = v14 - 8;
      if (v14 - 8 < 0)
      {
        if ((((_DWORD)v10 - (_DWORD)v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) != 0
          && v9 <= (UInt8 *)v18)
        {
          v2 = bswap32(*v18);
        }
        else
        {
          v36 = 0;
          do
          {
            v37 = (UInt8 *)v18 + v36;
            v38 = 255;
            if ((char *)v18 + v36 < (char *)v10 && v37 >= v9)
              v38 = *v37;
            v2 = v38 | (v2 << 8);
            ++v36;
          }
          while ((_DWORD)v36 != 4);
        }
        ++v18;
        v33 = v14 + 24;
        v32 |= v2 >> (v14 + 24);
        if (v14 == -24)
          goto LABEL_67;
        v34 = v2 << (8 - v14);
      }
      else
      {
        v34 = v2 << 8;
      }
      if (v33 > 23)
      {
        v41 = 24;
        goto LABEL_73;
      }
LABEL_67:
      v39 = 24 - v33;
      LODWORD(v40) = ((24 - v33) >> 3) & 0x1FFFFFFC;
      if (v39 >= 0x20)
        v40 = v40;
      else
        v40 = 0;
      v18 = (unsigned int *)((char *)v18 + v40);
      v41 = v39 & 0x1F;
      if ((v39 & 0x1F) == 0)
      {
        v2 = 0;
        if (!v32)
        {
          v52 = 1;
          v14 = 0;
          goto LABEL_106;
        }
        v43 = 0;
        v14 = 0;
LABEL_90:
        if ((((_DWORD)v10 - (_DWORD)v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) != 0
          && v9 <= (UInt8 *)v18)
        {
          v2 = bswap32(*v18);
        }
        else
        {
          v49 = 0;
          do
          {
            v50 = (UInt8 *)v18 + v49;
            v51 = 255;
            if ((char *)v18 + v49 < (char *)v10 && v50 >= v9)
              v51 = *v50;
            v2 = v51 | (v2 << 8);
            ++v49;
          }
          while ((_DWORD)v49 != 4);
        }
        v44 = v14 + 24;
        v43 |= v2 >> (v14 + 24);
        ++v18;
        v2 <<= 8 - v14;
        goto LABEL_99;
      }
      v33 = 0;
      v34 = 0;
LABEL_73:
      v42 = v33 - v41;
      if (v42 < 0)
      {
        if ((((_DWORD)v10 - (_DWORD)v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) == 0
          || v9 > (UInt8 *)v18)
        {
          v46 = 0;
          do
          {
            v47 = (UInt8 *)v18 + v46;
            v48 = 255;
            if ((char *)v18 + v46 < (char *)v10 && v47 >= v9)
              v48 = *v47;
            v34 = v48 | (v34 << 8);
            ++v46;
          }
          while ((_DWORD)v46 != 4);
        }
        else
        {
          v34 = bswap32(*v18);
        }
        v14 = v42 + 32;
        ++v18;
        v2 = v34 << -(char)v42;
        if (!v32)
        {
LABEL_101:
          v52 = 1;
LABEL_106:
          v53 = 1;
          goto LABEL_107;
        }
      }
      else
      {
        v2 = v34 << v41;
        v14 = v42;
        if (!v32)
          goto LABEL_101;
      }
      v43 = HIBYTE(v2);
      v44 = v14 - 8;
      if (v14 < 8)
        goto LABEL_90;
      v2 <<= 8;
LABEL_99:
      v52 = 0;
      v53 = v43 & 0x3F;
      v14 = v44;
LABEL_107:
      std::vector<ISOLoudnessInfo>::resize((char **)&v114, v53);
      v54 = v114;
      if (-858993459 * ((unint64_t)(v115 - (char *)v114) >> 3))
      {
        v55 = 0;
        while (1)
        {
          if ((v52 & 1) != 0)
          {
            v56 = 0;
          }
          else
          {
            v57 = HIBYTE(v2);
            if (v14 - 8 < 0)
            {
              if ((((_DWORD)v10 - (_DWORD)v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) == 0
                || v9 > (UInt8 *)v18)
              {
                v59 = 0;
                do
                {
                  v60 = (UInt8 *)v18 + v59;
                  v61 = 255;
                  if ((char *)v18 + v59 < (char *)v10 && v60 >= v9)
                    v61 = *v60;
                  v2 = v61 | (v2 << 8);
                  ++v59;
                }
                while ((_DWORD)v59 != 4);
              }
              else
              {
                v2 = bswap32(*v18);
              }
              ++v18;
              v57 |= v2 >> (v14 + 24);
              if (v14 == -24)
                v2 = 0;
              else
                v2 <<= 8 - v14;
              if (v14 == -24)
                v14 = 0;
              else
                v14 += 24;
            }
            else
            {
              v2 <<= 8;
              v14 -= 8;
            }
            v56 = v57 & 0x3F;
          }
          LOBYTE(v54[5 * v55]) = v56;
          v62 = v2 >> 4;
          v63 = v14 - 28;
          if (v14 - 28 < 0)
          {
            if ((((_DWORD)v10 - (_DWORD)v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) != 0
              && v9 <= (UInt8 *)v18)
            {
              v2 = bswap32(*v18);
            }
            else
            {
              v65 = 0;
              do
              {
                v66 = (UInt8 *)v18 + v65;
                v67 = 255;
                if ((char *)v18 + v65 < (char *)v10 && v66 >= v9)
                  v67 = *v66;
                v2 = v67 | (v2 << 8);
                ++v65;
              }
              while ((_DWORD)v65 != 4);
            }
            ++v18;
            v62 |= v2 >> (v14 + 4);
            v64 = v14 == -4 ? 0 : v2 << (28 - v14);
            v63 = v14 == -4 ? 0 : v14 + 4;
          }
          else
          {
            v64 = v2 << 28;
          }
          v68 = &v54[5 * v55];
          *((_BYTE *)v68 + 1) = (v62 >> 18) & 0x7F;
          *((_BYTE *)v68 + 2) = (v62 >> 12) & 0x3F;
          v69 = (v62 & 0x800) != 0 ? v62 | 0xF000 : v62 & 0xFFF;
          *((_WORD *)v68 + 2) = v69;
          v70 = v64 >> 4;
          v14 = v63 - 28;
          if (v63 - 28 < 0)
          {
            if ((((_DWORD)v10 - (_DWORD)v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) != 0
              && v9 <= (UInt8 *)v18)
            {
              v64 = bswap32(*v18);
            }
            else
            {
              v71 = 0;
              do
              {
                v72 = (UInt8 *)v18 + v71;
                v73 = 255;
                if ((char *)v18 + v71 < (char *)v10 && v72 >= v9)
                  v73 = *v72;
                v64 = v73 | (v64 << 8);
                ++v71;
              }
              while ((_DWORD)v71 != 4);
            }
            v74 = v64 << (28 - v63);
            v75 = v63 + 4;
            ++v18;
            v70 |= v64 >> v75;
            v2 = v75 ? v74 : 0;
            v14 = v75 ? v75 : 0;
          }
          else
          {
            v2 = v64 << 28;
          }
          v76 = HIWORD(v70) | 0xF000;
          if ((v70 & 0x8000000) == 0)
            LOWORD(v76) = HIWORD(v70) & 0xFFF;
          v77 = &v54[5 * v55];
          *((_WORD *)v77 + 3) = v76;
          v78 = (unsigned __int16)v70 >> 12;
          *((_BYTE *)v77 + 8) = v78;
          if (v78 > 0xB)
            break;
          BYTE1(v54[5 * v55 + 1]) = BYTE1(v70) & 0xF;
          if (((v70 >> 8) & 0xF) > 3)
            break;
          v79 = &v54[5 * v55];
          *((_BYTE *)v79 + 10) = v70;
          std::vector<LoudnessMethod>::resize((char **)v79 + 2, v70);
          v54 = v114;
          v80 = v114[5 * v55 + 2];
          v81 = v114[5 * v55 + 3] - v80;
          if ((v81 & 0x3FFFFFFFCLL) != 0)
          {
            v82 = 0;
            v83 = (v81 >> 2);
            do
            {
              v84 = v2 >> 8;
              if (v14 - 24 < 0)
              {
                if ((((_DWORD)v10 - (_DWORD)v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) == 0
                  || v9 > (UInt8 *)v18)
                {
                  v86 = 0;
                  do
                  {
                    v87 = (UInt8 *)v18 + v86;
                    v88 = 255;
                    if ((char *)v18 + v86 < (char *)v10 && v87 >= v9)
                      v88 = *v87;
                    v2 = v88 | (v2 << 8);
                    ++v86;
                  }
                  while ((_DWORD)v86 != 4);
                }
                else
                {
                  v2 = bswap32(*v18);
                }
                ++v18;
                v84 |= v2 >> (v14 + 8);
                if (v14 == -8)
                  v2 = 0;
                else
                  v2 <<= 24 - v14;
                if (v14 == -8)
                  v14 = 0;
                else
                  v14 += 8;
              }
              else
              {
                v2 <<= 24;
                v14 -= 24;
              }
              *(_BYTE *)(v80 + 4 * v82) = BYTE2(v84);
              if (BYTE2(v84) > 9u)
                goto LABEL_230;
              v89 = (_BYTE *)(v80 + 4 * v82);
              v89[1] = BYTE1(v84);
              v89[2] = v84 >> 4;
              if (v84 > 0xBFu)
                goto LABEL_230;
              v89[3] = v84 & 0xF;
              if ((v84 & 0xF) > 3)
                goto LABEL_230;
            }
            while (++v82 != v83);
          }
          if (++v55 >= (unint64_t)(-858993459 * ((unint64_t)(v115 - (char *)v54) >> 3)))
            goto LABEL_194;
        }
LABEL_230:
        v110[0] = (void **)&v114;
        std::vector<ISOLoudnessInfo>::__destroy_vector::operator()[abi:ne180100](v110);
        v8 = 4294967246;
LABEL_237:
        v114 = &v119;
        std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
        v114 = &v122;
        std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
        return v8;
      }
LABEL_194:
      if ((_DWORD)v8 == 1953263477)
      {
        v8 = (uint64_t)v123;
        a2 = v99;
        if ((unint64_t)v123 >= v124)
        {
          v90 = (_QWORD *)std::vector<ISOLoudnessInfoBox>::__emplace_back_slow_path<ISOLoudnessInfoBox&>(&v122, &v114);
        }
        else
        {
          *v123 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          std::vector<ISOLoudnessInfo>::__init_with_size[abi:ne180100]<ISOLoudnessInfo*,ISOLoudnessInfo*>(v8, v114, (uint64_t *)v115, 0xCCCCCCCCCCCCCCCDLL * ((v115 - (char *)v114) >> 3));
          v90 = (_QWORD *)(v8 + 24);
        }
        v123 = v90;
      }
      else
      {
        v8 = (uint64_t)v120;
        a2 = v99;
        if ((unint64_t)v120 >= v121)
        {
          v91 = (_QWORD *)std::vector<ISOLoudnessInfoBox>::__emplace_back_slow_path<ISOLoudnessInfoBox&>(&v119, &v114);
        }
        else
        {
          *v120 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          std::vector<ISOLoudnessInfo>::__init_with_size[abi:ne180100]<ISOLoudnessInfo*,ISOLoudnessInfo*>(v8, v114, (uint64_t *)v115, 0xCCCCCCCCCCCCCCCDLL * ((v115 - (char *)v114) >> 3));
          v91 = (_QWORD *)(v8 + 24);
        }
        v120 = v91;
      }
      v110[0] = (void **)&v114;
      std::vector<ISOLoudnessInfo>::__destroy_vector::operator()[abi:ne180100](v110);
LABEL_204:
      v20 = v10 - (const UInt8 *)v18;
      v19 = v2;
      if (v14 + 8 * ((int)v10 - (int)v18) <= 63)
        goto LABEL_217;
    }
    v22 = v14 - 64;
    goto LABEL_28;
  }
  return v8;
}

void sub_18F048378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t *a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(v29 - 128) = v28;
  a20 = &a25;
  std::vector<ISOLoudnessInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a25 = v29 - 136;
  std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v29 - 112;
  std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ISOLoudnessInfo>::__init_with_size[abi:ne180100]<ISOLoudnessInfo*,ISOLoudnessInfo*>(uint64_t result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  _QWORD v16[3];
  char v17;
  char *v18;
  char *v19;

  if (a4)
  {
    if (a4 >= 0x666666666666667)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ISOLoudnessInfo>>(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[40 * v9];
    v18 = v7;
    v19 = v7;
    v16[0] = v6 + 2;
    v16[1] = &v18;
    v16[2] = &v19;
    v17 = 0;
    if (a2 != a3)
    {
      v10 = v7;
      do
      {
        v11 = *a2;
        *(_DWORD *)(v10 + 7) = *(_DWORD *)((char *)a2 + 7);
        *((_QWORD *)v10 + 2) = 0;
        *(_QWORD *)v10 = v11;
        *((_QWORD *)v10 + 3) = 0;
        *((_QWORD *)v10 + 4) = 0;
        v13 = (_BYTE *)a2[2];
        v12 = (_BYTE *)a2[3];
        v14 = v12 - v13;
        if (v12 != v13)
        {
          std::vector<float>::__vallocate[abi:ne180100]((_QWORD *)v10 + 2, v14 >> 2);
          v15 = (char *)*((_QWORD *)v10 + 3);
          memmove(v15, v13, v14);
          *((_QWORD *)v10 + 3) = &v15[4 * (v14 >> 2)];
          v10 = v19;
        }
        v10 += 40;
        v19 = v10;
        a2 += 5;
      }
      while (a2 != a3);
      v8 = v10;
    }
    v17 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ISOLoudnessInfo>,ISOLoudnessInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
    v6[1] = v8;
  }
  return result;
}

void sub_18F048580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<ISOLoudnessInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ISOLoudnessInfoBox>::__emplace_back_slow_path<ISOLoudnessInfoBox&>(uint64_t *a1, uint64_t **a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  int64x2_t v14;
  char *v15;
  char *v17;
  int64x2_t v18;
  char *v19;
  _QWORD *v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  v19 = &v7[24 * v6];
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 0;
  std::vector<ISOLoudnessInfo>::__init_with_size[abi:ne180100]<ISOLoudnessInfo*,ISOLoudnessInfo*>((uint64_t)v8, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  v9 = v18.i64[0];
  v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  v12 = (_QWORD *)*a1;
  v11 = (_QWORD *)a1[1];
  if (v11 == (_QWORD *)*a1)
  {
    v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      v9 -= 24;
      *(_QWORD *)(v9 + 16) = 0;
      v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)v9 = v13;
      *(_QWORD *)(v9 + 16) = v11[2];
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    v14 = *(int64x2_t *)a1;
    v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  v18 = v14;
  v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  v19 = v15;
  v17 = (char *)v14.i64[0];
  std::__split_buffer<ISOLoudnessInfoBox>::~__split_buffer((uint64_t)&v17);
  return v10;
}

void sub_18F048724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ISOLoudnessInfoBox>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<ISOLoudnessInfoBox>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<ISOLoudnessInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ISOLoudnessInfo>,ISOLoudnessInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 40;
    }
  }
  return a1;
}

uint64_t ISOLoudnessBoxForLoudnessInfoDictionary(const __CFDictionary *a1, const __CFData **a2)
{
  const __CFData *Value;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  CFIndex v20;
  std::vector<char>::pointer begin;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  std::vector<char> v35;
  const __CFDictionary *v36;
  __int16 v37;
  unsigned int v38;
  CFDictionaryRef theDict;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  int v43;
  _BYTE v44[24];
  uint64_t v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  theDict = 0;
  if (!CFDictionaryContainsKey(a1, CFSTR("ISO loudness box")))
  {
    v38 = 0;
    v36 = a1;
    v37 = 0;
    memset(&v35, 0, sizeof(v35));
    v12 = LoudnessMethodsCountFromLID((const CACFDictionary *)&v36, &v38);
    v13 = v38;
    if (v38 > 0xFF)
    {
      v5 = 4294967246;
LABEL_55:
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v36);
      goto LABEL_61;
    }
    v14 = v12;
    v15 = 3 * v12;
    v16 = 3 * v12 + 21;
    if (v12)
      v17 = 3 * v12 + 21;
    else
      v17 = 0;
    v18 = 3 * v38 + 21;
    if (v38)
    {
      v19 = 3 * v38 + 9;
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    v20 = v18 + v17;
    if (!(_DWORD)v20)
    {
      v5 = 4294967246;
      goto LABEL_53;
    }
    std::vector<unsigned char>::__append(&v35, v18 + v17);
    begin = v35.__begin_;
    if (v14)
    {
      *(_QWORD *)v44 = v35.__begin_;
      *(_QWORD *)&v44[8] = v35.__begin_;
      *(_QWORD *)&v44[16] = &v35.__begin_[v15 + 9];
      v45 = 0x2000000000;
      v46 = (uint64_t)v35.__begin_ & 3;
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, v15 + 21, 0x20u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, 1953263477, 0x20u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, 1, 8u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, 0, 0x18u);
      AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)v44);
      v5 = SerializeTrackLoudnessData(a1, (unsigned __int8 *)begin + 12, v14, v15 + 9, 0);
      if ((_DWORD)v5)
      {
        v22 = CADefaultLog();
        if (v22)
        {
          v23 = v22;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v41 = "AudioFormatISOLoudnessBox.cpp";
            v42 = 1024;
            v43 = 251;
            _os_log_impl(&dword_18EE07000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioFormat: SerializeTrackLoudnessData failed for track loudness\n", buf, 0x12u);
          }
        }
        goto LABEL_53;
      }
      begin = v35.__begin_;
      LOWORD(v13) = v38;
      if (!v38)
        goto LABEL_52;
    }
    else
    {
      v16 = 0;
      if (!v13)
      {
LABEL_52:
        v5 = 0;
        *a2 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)begin, v20);
LABEL_53:
        if (v35.__begin_)
          operator delete(v35.__begin_);
        goto LABEL_55;
      }
    }
    *(_QWORD *)v44 = &begin[v16];
    *(_QWORD *)&v44[8] = *(_QWORD *)v44;
    *(_QWORD *)&v44[16] = *(_QWORD *)v44 + v19;
    v45 = 0x2000000000;
    v46 = v44[0] & 3;
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, v19 + 12, 0x20u);
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, 1634496373, 0x20u);
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, 1, 8u);
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, 0, 0x18u);
    AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)v44);
    if (SerializeTrackLoudnessData(a1, (unsigned __int8 *)&begin[v16 + 12], v13, v19, 1))
    {
      v29 = CADefaultLog();
      if (v29)
      {
        v30 = v29;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v41 = "AudioFormatISOLoudnessBox.cpp";
          v42 = 1024;
          v43 = 266;
          _os_log_impl(&dword_18EE07000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioFormat: SerializeTrackLoudnessData failed for album loudness\n", buf, 0x12u);
        }
      }
      v5 = 1;
      goto LABEL_53;
    }
    begin = v35.__begin_;
    goto LABEL_52;
  }
  Value = (const __CFData *)CFDictionaryGetValue(a1, CFSTR("ISO loudness box"));
  v5 = LoudnessInfoDictionaryForISOLoudnessBox(Value, &theDict);
  if ((_DWORD)v5)
    return v5;
  if (CFDictionaryContainsKey(a1, CFSTR("main loudness parameters")))
  {
    if (!CFDictionaryContainsKey(a1, CFSTR("main loudness parameters")))
    {
      v24 = CADefaultLog();
      if (!v24)
        goto LABEL_60;
      v25 = v24;
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        goto LABEL_60;
      *(_DWORD *)v44 = 136315394;
      *(_QWORD *)&v44[4] = "AudioFormatISOLoudnessBox.cpp";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 167;
      v26 = "%25s:%-5d AudioFormat: LID inconsistency, dictionary has kLoudnessInfoDictionary_MainLoudnessParametersKey, "
            "but not ISOLoudnessBox\n";
      goto LABEL_59;
    }
    v6 = CFDictionaryGetValue(a1, CFSTR("main loudness parameters"));
    v7 = CFDictionaryGetValue(theDict, CFSTR("main loudness parameters"));
    if (!CFEqual(v6, v7))
    {
      v27 = CADefaultLog();
      if (!v27)
        goto LABEL_60;
      v25 = v27;
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        goto LABEL_60;
      *(_DWORD *)v44 = 136315394;
      *(_QWORD *)&v44[4] = "AudioFormatISOLoudnessBox.cpp";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 174;
      v26 = "%25s:%-5d AudioFormat: LID inconsistency, main loudness parameters mismatch\n";
      goto LABEL_59;
    }
  }
  if (CFDictionaryContainsKey(a1, CFSTR("album loudness parameters")))
  {
    if (!CFDictionaryContainsKey(a1, CFSTR("album loudness parameters")))
    {
      v28 = CADefaultLog();
      if (!v28)
        goto LABEL_60;
      v25 = v28;
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        goto LABEL_60;
      *(_DWORD *)v44 = 136315394;
      *(_QWORD *)&v44[4] = "AudioFormatISOLoudnessBox.cpp";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 182;
      v26 = "%25s:%-5d AudioFormat: LID inconsistency, dictionary has kLoudnessInfoDictionary_AlbumLoudnessParametersKey,"
            " but not ISOLoudnessBox\n";
      goto LABEL_59;
    }
    v8 = CFDictionaryGetValue(a1, CFSTR("album loudness parameters"));
    v9 = CFDictionaryGetValue(theDict, CFSTR("album loudness parameters"));
    if (!CFEqual(v8, v9))
    {
      v31 = CADefaultLog();
      if (!v31)
        goto LABEL_60;
      v25 = v31;
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        goto LABEL_60;
      *(_DWORD *)v44 = 136315394;
      *(_QWORD *)&v44[4] = "AudioFormatISOLoudnessBox.cpp";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 189;
      v26 = "%25s:%-5d AudioFormat: LID inconsistency, album loudness parameters mismatch\n";
      goto LABEL_59;
    }
  }
  if (!CFDictionaryContainsKey(a1, CFSTR("dialogue anchor parameters")))
  {
LABEL_12:
    v5 = 0;
    *a2 = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Value);
    goto LABEL_61;
  }
  if (CFDictionaryContainsKey(a1, CFSTR("dialogue anchor parameters")))
  {
    v10 = CFDictionaryGetValue(a1, CFSTR("dialogue anchor parameters"));
    v11 = CFDictionaryGetValue(theDict, CFSTR("dialogue anchor parameters"));
    if (CFEqual(v10, v11))
      goto LABEL_12;
    v33 = CADefaultLog();
    if (!v33)
      goto LABEL_60;
    v25 = v33;
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      goto LABEL_60;
    *(_DWORD *)v44 = 136315394;
    *(_QWORD *)&v44[4] = "AudioFormatISOLoudnessBox.cpp";
    *(_WORD *)&v44[12] = 1024;
    *(_DWORD *)&v44[14] = 204;
    v26 = "%25s:%-5d AudioFormat: LID inconsistency, dialogue anchor parameters mismatch\n";
  }
  else
  {
    v32 = CADefaultLog();
    if (!v32)
      goto LABEL_60;
    v25 = v32;
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      goto LABEL_60;
    *(_DWORD *)v44 = 136315394;
    *(_QWORD *)&v44[4] = "AudioFormatISOLoudnessBox.cpp";
    *(_WORD *)&v44[12] = 1024;
    *(_DWORD *)&v44[14] = 197;
    v26 = "%25s:%-5d AudioFormat: LID inconsistency, dictionary has kLoudnessInfoDictionary_DialogueAnchorParametersKey, "
          "but not ISOLoudnessBox\n";
  }
LABEL_59:
  _os_log_impl(&dword_18EE07000, v25, OS_LOG_TYPE_ERROR, v26, v44, 0x12u);
LABEL_60:
  v5 = 4294967246;
LABEL_61:
  if (theDict)
    CFRelease(theDict);
  return v5;
}

void sub_18F048EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a13);
  _Unwind_Resume(a1);
}

void getValidationCapsuleVersion(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = getvalidationCapsuleVersionSymbolLoc(void)::ptr;
  v7 = getvalidationCapsuleVersionSymbolLoc(void)::ptr;
  if (!getvalidationCapsuleVersionSymbolLoc(void)::ptr)
  {
    v1 = ValidationCapsuleLibrary();
    v0 = dlsym(v1, "validationCapsuleVersion");
    v5[3] = (uint64_t)v0;
    getvalidationCapsuleVersionSymbolLoc(void)::ptr = v0;
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
  {
    ((void (*)(void))v0)();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UInt32 validation_validationCapsuleVersion()");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AudioComponentValidation.mm"), 83, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_18F048FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *ValidationCapsuleLibrary(void)
{
  uint64_t v0;
  void *v1;
  char *v2;
  void *v4;
  char *v5;

  v5 = 0;
  v0 = ValidationCapsuleLibraryCore(&v5);
  if (!v0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *ValidationCapsuleLibrary()");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AudioComponentValidation.mm"), 68, CFSTR("%s"), v5);

    __break(1u);
    goto LABEL_5;
  }
  v1 = (void *)v0;
  v2 = v5;
  if (v5)
LABEL_5:
    free(v2);
  return v1;
}

void sub_18F0490BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ValidationCapsuleLibraryCore(char **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v1 = ValidationCapsuleLibraryCore(char **)::frameworkLibrary;
  v6 = ValidationCapsuleLibraryCore(char **)::frameworkLibrary;
  if (!ValidationCapsuleLibraryCore(char **)::frameworkLibrary)
  {
    v7 = xmmword_1E2921B90;
    v1 = _sl_dlopen();
    v4[3] = v1;
    ValidationCapsuleLibraryCore(char **)::frameworkLibrary = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_18F049188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void validateComponent(__int128 *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  double v18;
  void *v19;
  void *v20;
  double v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  int v43;
  id v44;
  void *v45;
  os_log_t v46;
  _QWORD *v47;
  NSObject *v48;
  __int128 v49;
  int v50;
  _QWORD aBlock[4];
  id v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t *v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  id *v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  void (*v67)(uint64_t);
  id v68;
  _QWORD v69[5];
  id v70;
  _QWORD v71[3];
  int v72;
  _BYTE v73[32];
  uint64_t v74;
  uint8_t buf[4];
  const char *v76;
  __int16 v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = (void (**)(_QWORD, _QWORD, _QWORD))v7;
  if (*((_WORD *)a1 + 1) != 24949)
  {
    v15 = 1;
LABEL_12:
    (*((void (**)(id, uint64_t, _QWORD))v7 + 2))(v7, v15, 0);
    goto LABEL_13;
  }
  if (!*((_DWORD *)a1 + 1) || !*((_DWORD *)a1 + 2))
  {
    v15 = 0;
    goto LABEL_12;
  }
  if (a3)
  {
    v9 = (void *)objc_msgSend(a3, "mutableCopy");
    v73[4] = 0;
    *(_DWORD *)&v73[17] = 0x1000000;
    *(_QWORD *)&v73[8] = 0;
    *(_WORD *)&v73[21] = 1;
    *(_QWORD *)&v73[24] = 0;
    v74 = 0x100000000;
    v73[16] = 1;
    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("arch"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v10, "isEqualToString:", CFSTR("x86_64")))
      v11 = 16777223;
    else
      v11 = 16777228;
    *(_DWORD *)v73 = v11;

    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("ForceValidation"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v12)
    {
      v14 = objc_msgSend(v12, "BOOLValue");
      v73[4] = v14;
    }
    else
    {
      v14 = 0;
    }

    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("TimeOut"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v19;
    if (v19)
    {
      objc_msgSend(v19, "doubleValue");
      v18 = v21;
      *(double *)&v73[8] = v21;
    }
    else
    {
      v18 = 0.0;
    }

    objc_msgSend(v9, "objectForKey:", CFSTR("LoadOutOfProcess"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v22)
    {
      objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("LoadOutOfProcess"));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v23, "BOOLValue");
      LOBYTE(v74) = v16;

    }
    else
    {
      v16 = 0;
      LOBYTE(v74) = 0;
    }

    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("StressTest"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = v24;
    if (v24)
    {
      objc_msgSend(v24, "doubleValue");
      *(_QWORD *)&v73[24] = v26;
    }

    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("TerminateOnFirstError"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v27;
    if (v27)
      v73[16] = objc_msgSend(v27, "BOOLValue");

    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("TerminateOnFirstWarning"));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = v29;
    if (v29)
      v73[17] = objc_msgSend(v29, "BOOLValue");

    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("SkipUIComponentTests"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v31;
    if (v31)
      BYTE3(v74) = objc_msgSend(v31, "BOOLValue");

    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("Repeats"));
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = v33;
    if (v33)
    {
      v17 = objc_msgSend(v33, "intValue");
      HIDWORD(v74) = v17;
    }
    else
    {
      v17 = 1;
    }

  }
  else
  {
    v16 = 0;
    v14 = 0;
    v11 = 16777228;
    *(_DWORD *)v73 = 16777228;
    v73[4] = 0;
    *(_QWORD *)&v73[8] = 0;
    *(_QWORD *)&v73[13] = 0;
    v17 = 1;
    *(_WORD *)&v73[21] = 1;
    v18 = 0.0;
    *(_QWORD *)&v73[24] = 0;
    v74 = 0x100000000;
  }
  getValidationCapsuleVersion();
  v36 = v35;
  if (!v14)
  {
    getValidationResultFromCache((const AudioComponentDescription *)a1, v11, a2, v35, v16);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = v37;
    if (v37)
    {
      v39 = (void *)objc_msgSend(v37, "mutableCopy");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "setObject:forKeyedSubscript:", v40, CFSTR("WasCached"));

      objc_msgSend(v39, "objectForKeyedSubscript:", CFSTR("Result"));
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = objc_msgSend(v41, "unsignedIntValue");

      if ((_DWORD)v42)
      {
        ((void (**)(_QWORD, uint64_t, void *))v8)[2](v8, v42, v39);

        goto LABEL_13;
      }

    }
  }
  if (*((_DWORD *)a1 + 2) != 1634758764)
    LOBYTE(v74) = 1;
  if (v18 == 0.0)
  {
    *(_QWORD *)&v73[8] = 0x4082C00000000000;
    v18 = 600.0;
  }
  v71[0] = 0;
  v71[1] = v71;
  v71[2] = 0x2020000000;
  v72 = v17;
  v69[0] = 0;
  v69[1] = v69;
  v69[2] = 0x3032000000;
  v69[3] = __Block_byref_object_copy__8470;
  v69[4] = __Block_byref_object_dispose__8471;
  v70 = (id)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
  v63 = 0;
  v64 = (id *)&v63;
  v65 = 0x3042000000;
  v66 = __Block_byref_object_copy__3;
  v67 = __Block_byref_object_dispose__4;
  v68 = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___Z17validateComponent25AudioComponentDescriptionjPK14__CFDictionaryU13block_pointerFv30AudioComponentValidationResultS2_E_block_invoke;
  aBlock[3] = &unk_1E2921B70;
  v53 = v71;
  v54 = v69;
  v59 = *a1;
  v43 = *((_DWORD *)a1 + 4);
  v58 = v74;
  v56 = *(_OWORD *)v73;
  v57 = *(_OWORD *)&v73[16];
  v55 = &v63;
  v60 = v43;
  v61 = a2;
  v62 = v36;
  v44 = v8;
  v52 = v44;
  v45 = _Block_copy(aBlock);
  objc_storeWeak(v64 + 5, v45);
  if (ValidationCapsuleLibraryCore(0) && getvalidateWithParametersAsyncSymbolLoc())
  {
    v49 = *a1;
    v50 = *((_DWORD *)a1 + 4);
    validation_validateWithParametersAsync(&v49, (uint64_t)&v73[16], v45, v18);
  }
  else
  {
    if (gAudioComponentLogCategory)
    {
      v46 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v47 = (_QWORD *)operator new();
      v47[1] = 0;
      v46 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v47 = v46;
      gAudioComponentLogCategory = (uint64_t)v47;
    }
    v48 = objc_retainAutorelease(v46);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v76 = "AudioComponentValidation.mm";
      v77 = 1024;
      v78 = 237;
      _os_log_impl(&dword_18EE07000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d validateWithParametersAsync not available", buf, 0x12u);
    }
    (*((void (**)(id, _QWORD, _QWORD))v44 + 2))(v44, 0, 0);
  }
  _Block_object_dispose(&v63, 8);
  objc_destroyWeak(&v68);

  _Block_object_dispose(v69, 8);
  _Block_object_dispose(v71, 8);
LABEL_13:

}

void sub_18F04980C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41)
{
  void *v41;
  void *v42;
  id *v43;
  uint64_t v44;

  _Block_object_dispose(&a30, 8);
  objc_destroyWeak(v43);

  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v44 - 216), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8470(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8471(uint64_t a1)
{

}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void ___Z17validateComponent25AudioComponentDescriptionjPK14__CFDictionaryU13block_pointerFv30AudioComponentValidationResultS2_E_block_invoke(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t v5;
  int v6;
  os_log_t v7;
  os_log_t v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  int v14;
  void *v15;
  double v16;
  id WeakRetained;
  __int128 v18;
  int v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a2 != 3)
  {
    if (a2 == 1)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v6 = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = v6 - 1;
      if (v6 >= 2)
      {
        if (gAudioComponentLogCategory)
        {
          v7 = *(os_log_t *)gAudioComponentLogCategory;
        }
        else
        {
          v12 = (_QWORD *)operator new();
          v12[1] = 0;
          v7 = os_log_create("com.apple.coreaudio", "audiocomp");
          *v12 = v7;
          gAudioComponentLogCategory = (uint64_t)v12;
        }
        v13 = objc_retainAutorelease(v7);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
          *(_DWORD *)buf = 136315650;
          v21 = "AudioComponentValidation.mm";
          v22 = 1024;
          v23 = 204;
          v24 = 1024;
          LODWORD(v25) = v14;
          _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Repeated validations: %d", buf, 0x18u);
        }
        -[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("Output"));
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (v15)
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObject:", v15);

        v18 = *(_OWORD *)(a1 + 104);
        v19 = *(_DWORD *)(a1 + 120);
        v16 = *(double *)(a1 + 72);
        WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
        validation_validateWithParametersAsync(&v18, a1 + 80, WeakRetained, v16);

        return;
      }
    }
    writeValidationResultToCache((const AudioComponentDescription *)(a1 + 104), *(_DWORD *)(a1 + 64), *(unsigned int *)(a1 + 124), *(unsigned int *)(a1 + 128), *(unsigned __int8 *)(a1 + 96), a3);
  }
  if (*(_DWORD *)(a1 + 100) != 1 && objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "count"))
  {
    if (gAudioComponentLogCategory)
    {
      v8 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      v9[1] = 0;
      v8 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v9 = v8;
      gAudioComponentLogCategory = (uint64_t)v9;
    }
    v10 = objc_retainAutorelease(v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v11 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "count");
      *(_DWORD *)buf = 136315650;
      v21 = "AudioComponentValidation.mm";
      v22 = 1024;
      v23 = 223;
      v24 = 2048;
      v25 = v11 + 1;
      _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Done running repeated validations: %lu", buf, 0x1Cu);
    }

    -[__CFDictionary setObject:forKey:](a3, "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), CFSTR("RepeatsOutput"));
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_18F049C70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *getvalidateWithParametersAsyncSymbolLoc(void)
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getvalidateWithParametersAsyncSymbolLoc(void)::ptr;
  v6 = getvalidateWithParametersAsyncSymbolLoc(void)::ptr;
  if (!getvalidateWithParametersAsyncSymbolLoc(void)::ptr)
  {
    v1 = ValidationCapsuleLibrary();
    v0 = dlsym(v1, "validateWithParametersAsync");
    v4[3] = (uint64_t)v0;
    getvalidateWithParametersAsyncSymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_18F049D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void validation_validateWithParametersAsync(__int128 *a1, uint64_t a2, void *a3, double a4)
{
  id v7;
  void (*v8)(__int128 *, uint64_t, id, double);
  void *v9;
  void *v10;
  __int128 v11;
  int v12;

  v7 = a3;
  v8 = (void (*)(__int128 *, uint64_t, id, double))getvalidateWithParametersAsyncSymbolLoc();
  if (v8)
  {
    v11 = *a1;
    v12 = *((_DWORD *)a1 + 4);
    v8(&v11, a2, v7, a4);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "OSStatus validation_validateWithParametersAsync(const AudioComponentDescription, const ValidationCapsuleParameters &, double, void (^__strong)(AudioComponentValidationResult, CFDictionaryRef))");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("AudioComponentValidation.mm"), 81, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_18F049E0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void APAC::MetadataConfigJSON(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char *v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  char *v14;
  int v15;
  uint64_t *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t *v19;
  char *v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  char *v24;
  int v25;
  uint64_t *v26;
  unsigned int v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned __int8 *v45;
  char *v46;
  int v47;
  uint64_t *v48;
  uint64_t *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  char *v52;
  int v53;
  uint64_t *v54;
  uint64_t *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  char *v58;
  int v59;
  uint64_t *v60;
  uint64_t *v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  char *v64;
  int v65;
  uint64_t *v66;
  uint64_t *v67;
  unsigned __int8 *v68;
  char *v69;
  int v70;
  uint64_t *v71;
  uint64_t *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  char *v75;
  int v76;
  uint64_t *v77;
  uint64_t *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  char *v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  char *v87;
  uint64_t v88;
  double v89;
  unsigned __int8 *v90;
  char *v91;
  int v92;
  uint64_t *v93;
  uint64_t *v94;
  unsigned __int8 *v95;
  char *v96;
  int v97;
  uint64_t *v98;
  double v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  char *v102;
  int v103;
  uint64_t *v104;
  double v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  char *v108;
  int v109;
  uint64_t *v110;
  double v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  char *v114;
  int v115;
  uint64_t *v116;
  double v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  char *v120;
  int v121;
  double v122;
  double *v123;
  uint64_t *v124;
  unsigned __int8 *v125;
  char *v126;
  int v127;
  uint64_t *v128;
  uint64_t *v129;
  unsigned __int8 *v130;
  char *v131;
  int v132;
  uint64_t *v133;
  uint64_t *v134;
  unsigned __int8 *v135;
  char *v136;
  int v137;
  uint64_t *v138;
  unint64_t v139;
  float *v140;
  uint64_t *v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  int v145;
  uint64_t *v146;
  double v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  char *v151;
  int v152;
  uint64_t *v153;
  double v154;
  unsigned __int8 *v155;
  unsigned __int8 *v156;
  unsigned __int8 *v157;
  char *v158;
  int v159;
  uint64_t *v160;
  double v161;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  unsigned __int8 *v164;
  char *v165;
  int v166;
  uint64_t *v167;
  double v168;
  unsigned __int8 *v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  char *v172;
  int v173;
  uint64_t *v174;
  double v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  unsigned __int8 *v178;
  char *v179;
  int v180;
  uint64_t *v181;
  uint64_t *v182;
  unsigned __int8 *v183;
  char *v184;
  int v185;
  uint64_t *v186;
  unint64_t v187;
  uint64_t *v188;
  unsigned __int8 *v189;
  unsigned __int8 *v190;
  unsigned __int8 *v191;
  int v192;
  uint64_t *v193;
  uint64_t *v194;
  unsigned __int8 *v195;
  char *v196;
  int v197;
  uint64_t *v198;
  unsigned __int8 *v199;
  uint64_t *v200;
  unsigned __int8 *v201;
  char *v202;
  int v203;
  uint64_t *v204;
  uint64_t *v205;
  unsigned __int8 *v206;
  char *v207;
  int v208;
  uint64_t *v209;
  int v210;
  uint64_t *v211;
  unsigned __int8 *v212;
  char *v213;
  int v214;
  uint64_t *v215;
  uint64_t *v216;
  unsigned __int8 *v217;
  char *v218;
  int v219;
  uint64_t *v220;
  uint64_t *v221;
  unsigned __int8 *v222;
  char *v223;
  int v224;
  uint64_t *v225;
  uint64_t *v226;
  unsigned __int8 *v227;
  char *v228;
  int v229;
  uint64_t *v230;
  uint64_t v231;
  unsigned __int8 *v232;
  char *v233;
  uint64_t v234;
  uint64_t *v235;
  unsigned __int8 *v236;
  char *v237;
  int v238;
  uint64_t *v239;
  uint64_t *v240;
  unsigned __int8 *v241;
  char *v242;
  int v243;
  uint64_t *v244;
  uint64_t v245;
  unsigned __int8 *v246;
  char *v247;
  uint64_t v248;
  uint64_t *v249;
  unsigned __int8 *v250;
  char *v251;
  int v252;
  uint64_t *v253;
  uint64_t *v254;
  unsigned __int8 *v255;
  char *v256;
  int v257;
  uint64_t *v258;
  uint64_t *v259;
  unsigned __int8 *v260;
  char *v261;
  int v262;
  uint64_t *v263;
  unint64_t v264;
  uint64_t *v265;
  unsigned __int8 *v266;
  unsigned __int8 *v267;
  unsigned __int8 *v268;
  unsigned __int8 *v269;
  int v270;
  uint64_t *v271;
  uint64_t *v273;
  unsigned __int8 *v274;
  unsigned __int8 *v275;
  char *v276;
  int v277;
  uint64_t *v278;
  uint64_t *v279;
  unsigned __int8 *v280;
  unsigned __int8 *v281;
  char *v282;
  int v283;
  uint64_t *v284;
  unint64_t v285;
  uint64_t *v286;
  unsigned __int8 *v287;
  unsigned __int8 *v288;
  unsigned __int8 *v289;
  unsigned __int8 *v290;
  int v291;
  uint64_t *v292;
  double v293;
  unsigned __int8 *v294;
  unsigned __int8 *v295;
  unsigned __int8 *v296;
  unsigned __int8 *v297;
  int v298;
  uint64_t *v299;
  double v300;
  unsigned __int8 *v301;
  unsigned __int8 *v302;
  unsigned __int8 *v303;
  unsigned __int8 *v304;
  int v305;
  uint64_t *v306;
  double v307;
  unsigned __int8 *v308;
  unsigned __int8 *v309;
  unsigned __int8 *v310;
  unsigned __int8 *v311;
  int v312;
  uint64_t *v313;
  uint64_t *v314;
  unsigned __int8 *v315;
  unsigned __int8 *v316;
  unsigned __int8 *v317;
  unsigned __int8 *v318;
  int v319;
  uint64_t *v320;
  uint64_t *v321;
  unsigned __int8 *v322;
  char *v323;
  int v324;
  uint64_t *v325;
  double v326;
  unsigned __int8 *v327;
  char *v328;
  int v329;
  uint64_t *v330;
  double v331;
  unsigned __int8 *v332;
  char *v333;
  int v334;
  uint64_t *v335;
  uint64_t v336;
  unsigned __int8 *v337;
  char *v338;
  uint64_t v339;
  uint64_t *v340;
  unsigned __int8 *v341;
  char *v342;
  int v343;
  uint64_t *v344;
  unsigned __int8 *v345;
  uint64_t *v346;
  unsigned __int8 *v347;
  char *v348;
  int v349;
  uint64_t *v350;
  unint64_t i;
  double v352;
  unsigned __int8 *v353;
  unsigned __int8 *v354;
  unsigned __int8 *v355;
  int v356;
  uint64_t *v357;
  uint64_t *v358;
  unsigned __int8 *v359;
  char *v360;
  int v361;
  uint64_t *v362;
  uint64_t v363;
  unsigned __int8 *v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  uint64_t v372;
  char *v373;
  char v374;
  uint64_t v375;
  int v376;
  std::string *v377;
  int v378;
  void *v379;
  std::string *v380;
  char *v381;
  char v382;
  uint64_t *v383;
  uint64_t *v384;
  unsigned __int8 *v385;
  char *v386;
  int v387;
  uint64_t *v388;
  uint64_t *v389;
  unsigned __int8 *v390;
  char *v391;
  int v392;
  uint64_t *v393;
  uint64_t *v394;
  unsigned __int8 *v395;
  char *v396;
  int v397;
  uint64_t *v398;
  uint64_t *v399;
  unsigned __int8 *v400;
  char *v401;
  int v402;
  uint64_t *v403;
  uint64_t v404;
  unsigned __int8 *v405;
  char *v406;
  uint64_t v407;
  double v408;
  unsigned __int8 *v409;
  unsigned __int8 *v410;
  char *v411;
  int v412;
  uint64_t *v413;
  double v414;
  unsigned __int8 *v415;
  unsigned __int8 *v416;
  char *v417;
  int v418;
  uint64_t *v419;
  double v420;
  unsigned __int8 *v421;
  unsigned __int8 *v422;
  char *v423;
  int v424;
  uint64_t *v425;
  double v426;
  unsigned __int8 *v427;
  unsigned __int8 *v428;
  char *v429;
  double v430;
  uint64_t v431;
  unsigned __int8 *v432;
  char *v433;
  uint64_t v434;
  unsigned int v435;
  double v436;
  unsigned __int8 *v437;
  char *v438;
  int v439;
  uint64_t *v440;
  double v441;
  unsigned __int8 *v442;
  char *v443;
  int v444;
  uint64_t *v445;
  double v446;
  unsigned __int8 *v447;
  char *v448;
  int v449;
  uint64_t *v450;
  uint64_t *v451;
  unsigned __int8 *v452;
  char *v453;
  int v454;
  uint64_t *v455;
  unint64_t j;
  double v457;
  unsigned __int8 *v458;
  unsigned __int8 *v459;
  unsigned __int8 *v460;
  int v461;
  uint64_t *v462;
  unsigned int v463;
  uint64_t v464;
  unsigned __int8 *v465;
  unint64_t v466;
  unsigned __int8 *v467;
  unsigned __int8 *v468;
  unsigned __int8 *v469;
  uint64_t *v470;
  char *v471;
  int v472;
  uint64_t *v473;
  uint64_t v474;
  unsigned int v475;
  char *v476;
  int v477;
  uint64_t *v478;
  uint64_t v479;
  unsigned int v480;
  char *v481;
  int v482;
  uint64_t *v483;
  uint64_t *v484;
  char *v485;
  int v486;
  uint64_t *v487;
  unsigned __int8 *v488;
  unsigned int v489;
  char *v490;
  int v491;
  uint64_t *v492;
  int v493;
  uint64_t v494;
  char *v495;
  int v496;
  uint64_t v497;
  uint64_t **v498;
  uint64_t v499;
  unsigned __int16 *v500;
  unsigned int v501;
  char *v502;
  int v503;
  uint64_t *v504;
  uint64_t v505;
  unsigned int v506;
  char *v507;
  int v508;
  uint64_t *v509;
  uint64_t v510;
  char *v511;
  uint64_t v512;
  uint64_t v513;
  char *v514;
  uint64_t v515;
  uint64_t *v516;
  char *v517;
  int v518;
  uint64_t *v519;
  uint64_t v520;
  unsigned int v521;
  char *v522;
  int v523;
  uint64_t *v524;
  uint64_t v525;
  char *v526;
  uint64_t v527;
  uint64_t v528;
  unsigned __int8 *v529;
  unsigned __int8 *v530;
  unsigned __int8 *v531;
  unsigned int v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t *v536;
  uint64_t v537;
  unint64_t v538;
  unint64_t v539;
  uint64_t *v540;
  unsigned __int8 *v541;
  unsigned __int8 *v542;
  int v543;
  uint64_t *v544;
  unint64_t v545;
  unint64_t v546;
  unsigned __int8 *v547;
  unsigned __int8 *v548;
  unsigned __int8 *v549;
  unsigned __int8 *v550;
  unsigned __int8 *v551;
  float *v552;
  unsigned __int8 *v553;
  unsigned __int8 *v554;
  unsigned __int8 *v555;
  unsigned __int8 *v556;
  char v557[8];
  uint64_t *v558;
  char v559[8];
  uint64_t v560;
  char v561[8];
  unint64_t v562;
  char v563[8];
  unint64_t v564;
  char v565[8];
  uint64_t v566;
  char v567[8];
  uint64_t v568;
  char v569[8];
  unint64_t v570;
  char v571[8];
  uint64_t *v572;
  char v573[8];
  uint64_t v574;
  char v575[8];
  unint64_t v576;
  char v577[8];
  uint64_t *v578;
  char v579[8];
  unint64_t v580;
  char v581[8];
  unint64_t v582;
  char v583[8];
  uint64_t *v584;
  unsigned __int8 v585[8];
  uint64_t *v586;
  std::string v587;
  std::string v588;
  unsigned __int8 v589[8];
  uint64_t v590;
  char v591[8];
  uint64_t v592;
  char v593[8];
  uint64_t v594;
  char v595[8];
  uint64_t v596;
  char v597[8];
  uint64_t *v598;
  char v599[8];
  uint64_t *v600;
  char v601[8];
  uint64_t *v602;
  char v603[8];
  uint64_t *v604;
  char v605[8];
  uint64_t v606;
  char v607[8];
  uint64_t *v608;
  char v609[8];
  double v610;
  char v611[8];
  uint64_t *v612;
  char v613[8];
  double v614;
  char v615[8];
  double v616;
  char v617[8];
  double v618;
  char v619[8];
  double v620;
  char v621[8];
  uint64_t *v622;
  char v623[8];
  uint64_t *v624;
  char v625[8];
  uint64_t v626;
  char v627[8];
  double v628;
  char v629[8];
  double v630;
  char v631[8];
  uint64_t *v632;
  char v633[8];
  uint64_t *v634;
  char v635[8];
  double v636;
  char v637[8];
  double v638;
  char v639[8];
  double v640;
  char v641[8];
  uint64_t *v642;
  char v643[8];
  uint64_t *v644;
  char v645[8];
  uint64_t *v646;
  char v647[8];
  uint64_t *v648;
  char v649[8];
  uint64_t *v650;
  char v651[8];
  uint64_t *v652;
  char v653[8];
  uint64_t *v654;
  char v655[8];
  uint64_t v656;
  char v657[8];
  uint64_t *v658;
  char v659[8];
  uint64_t *v660;
  char v661[8];
  uint64_t v662;
  char v663[8];
  uint64_t *v664;
  char v665[8];
  uint64_t *v666;
  char v667[8];
  uint64_t *v668;
  char v669[8];
  uint64_t *v670;
  char v671[8];
  uint64_t v672;
  char v673[8];
  uint64_t *v674;
  char v675[8];
  uint64_t *v676;
  char v677[8];
  uint64_t *v678;
  char v679[8];
  uint64_t *v680;
  char v681[8];
  uint64_t *v682;
  char v683[8];
  double v684;
  char v685[8];
  double v686;
  char v687[8];
  double v688;
  char v689[8];
  double v690;
  char v691[8];
  double v692;
  char v693[8];
  uint64_t *v694;
  char v695[8];
  uint64_t *v696;
  char v697[8];
  uint64_t *v698;
  char v699[8];
  uint64_t *v700;
  char v701[8];
  double v702;
  char v703[8];
  double v704;
  char v705[8];
  double v706;
  char v707[8];
  double v708;
  char v709[8];
  double v710;
  char v711[8];
  double v712;
  char v713[8];
  double v714;
  char v715[8];
  double v716;
  char v717[8];
  uint64_t *v718;
  char v719[8];
  double v720;
  char v721[8];
  uint64_t v722;
  char v723[8];
  uint64_t *v724;
  char v725[8];
  uint64_t *v726;
  char v727[8];
  uint64_t *v728;
  char v729[8];
  uint64_t *v730;
  char v731[8];
  uint64_t *v732;
  char v733[8];
  uint64_t *v734;
  char v735[8];
  uint64_t *v736;
  char v737[8];
  uint64_t v738;
  char v739[8];
  uint64_t v740;
  char v741[8];
  uint64_t v742;
  char v743[8];
  uint64_t v744;
  char v745[8];
  uint64_t *v746;
  char v747[8];
  uint64_t *v748;
  char v749[8];
  uint64_t *v750;
  char v751[8];
  uint64_t *v752;
  char v753[8];
  uint64_t *v754;

  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  v4 = (uint64_t *)*a1;
  v753[0] = 4;
  v754 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v753);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v753);
  v551 = (unsigned __int8 *)a2;
  v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "metadataFrameCompressionEnabled");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v753);
  v6 = *v5;
  *v5 = 4;
  v753[0] = v6;
  v7 = (uint64_t *)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v4;
  v754 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v753);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v754, v6);
  v8 = (uint64_t *)a1[1];
  v751[0] = 4;
  v752 = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v751);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v751);
  v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "mRendererMetadataConfigPresent");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v751);
  v10 = *v9;
  *v9 = 4;
  v751[0] = v10;
  v11 = (uint64_t *)*((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = v8;
  v752 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v751);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v752, v10);
  if (a1[1])
  {
    v12 = (uint64_t *)*((unsigned __int16 *)a1 + 4);
    v749[0] = 5;
    v750 = v12;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v749);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v749);
    v13 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "mRendererMetadataConfig");
    v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "mGroupCount");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v749);
    v15 = *v14;
    *v14 = 5;
    v749[0] = v15;
    v16 = (uint64_t *)*((_QWORD *)v14 + 1);
    *((_QWORD *)v14 + 1) = v12;
    v750 = v16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v749);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v750, v15);
    v17 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "mRendererMetadataConfig");
    v18 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v17, "mGlobalConfig");
    v19 = (uint64_t *)a1[16];
    v747[0] = 4;
    v748 = v19;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v747);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v747);
    v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mHasData");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v747);
    v21 = *v20;
    *v20 = 4;
    v747[0] = v21;
    v22 = (uint64_t *)*((_QWORD *)v20 + 1);
    *((_QWORD *)v20 + 1) = v19;
    v748 = v22;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v747);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v748, v21);
    v554 = a1;
    if (a1[16])
    {
      v23 = (uint64_t *)*((unsigned __int16 *)a1 + 9);
      v745[0] = 5;
      v746 = v23;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v745);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v745);
      v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mNumParameters");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v745);
      v25 = *v24;
      *v24 = 5;
      v745[0] = v25;
      v26 = (uint64_t *)*((_QWORD *)v24 + 1);
      *((_QWORD *)v24 + 1) = v23;
      v746 = v26;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v745);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v746, v25);
      v27 = *((unsigned __int16 *)a1 + 9);
      if (v27 >= 0x800)
        v27 = 2048;
      if (v27)
      {
        v28 = 0;
        v29 = a1 + 4496;
        v553 = a1 + 4116;
        v547 = a1 + 4704;
        v550 = a1 + 4716;
        v556 = a1 + 4530;
        v549 = a1 + 4365;
        v552 = (float *)(a1 + 4200);
        v548 = a1 + 20;
        v555 = a1 + 4496;
        while (2)
        {
          switch(*(_WORD *)&v548[2 * v28])
          {
            case 0:
              v30 = *v553;
              v743[0] = 4;
              v744 = v30;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v743);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v743);
              v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mApplyPostProcReverb");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v743);
              v32 = *v31;
              *v31 = 4;
              v743[0] = v32;
              v33 = *((_QWORD *)v31 + 1);
              *((_QWORD *)v31 + 1) = v30;
              v744 = v33;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v743);
              v34 = (uint64_t **)&v744;
              goto LABEL_60;
            case 1:
              v35 = v553[1];
              v741[0] = 4;
              v742 = v35;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v741);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v741);
              v36 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mIs6DoF");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v741);
              v32 = *v36;
              *v36 = 4;
              v741[0] = v32;
              v37 = *((_QWORD *)v36 + 1);
              *((_QWORD *)v36 + 1) = v35;
              v742 = v37;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v741);
              v34 = (uint64_t **)&v742;
              goto LABEL_60;
            case 2:
              v38 = v553[2];
              v739[0] = 4;
              v740 = v38;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v739);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v739);
              v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mHasSceneRadiationPattern");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v739);
              v32 = *v39;
              *v39 = 4;
              v739[0] = v32;
              v40 = *((_QWORD *)v39 + 1);
              *((_QWORD *)v39 + 1) = v38;
              v740 = v40;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v739);
              v34 = (uint64_t **)&v740;
              goto LABEL_60;
            case 3:
              v41 = v553[3];
              v737[0] = 5;
              v738 = v41;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v737);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v737);
              v42 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mTargetPlaybackSystemIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v737);
              v32 = *v42;
              *v42 = 5;
              v737[0] = v32;
              v43 = *((_QWORD *)v42 + 1);
              *((_QWORD *)v42 + 1) = v41;
              v738 = v43;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v737);
              v34 = (uint64_t **)&v738;
              goto LABEL_60;
            case 4:
              v44 = (uint64_t *)v553[6];
              v735[0] = 5;
              v736 = v44;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v735);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v735);
              v45 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              v46 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v45, "mAuthoringToolNameIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v735);
              v47 = *v46;
              *v46 = 5;
              v735[0] = v47;
              v48 = (uint64_t *)*((_QWORD *)v46 + 1);
              *((_QWORD *)v46 + 1) = v44;
              v736 = v48;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v46);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v735);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v736, v47);
              v49 = (uint64_t *)v553[7];
              v733[0] = 5;
              v734 = v49;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v733);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v733);
              v50 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              v51 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v50, "mAuthoringToolVersion");
              v52 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v51, "mMajor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v733);
              v53 = *v52;
              *v52 = 5;
              v733[0] = v53;
              v54 = (uint64_t *)*((_QWORD *)v52 + 1);
              *((_QWORD *)v52 + 1) = v49;
              v734 = v54;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v52);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v733);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v734, v53);
              v55 = (uint64_t *)v553[8];
              v731[0] = 5;
              v732 = v55;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v731);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v731);
              v56 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              v57 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v56, "mAuthoringToolVersion");
              v58 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "mMinor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v731);
              v59 = *v58;
              *v58 = 5;
              v731[0] = v59;
              v60 = (uint64_t *)*((_QWORD *)v58 + 1);
              *((_QWORD *)v58 + 1) = v55;
              v732 = v60;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v58);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v731);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v732, v59);
              v61 = (uint64_t *)v553[9];
              v729[0] = 5;
              v730 = v61;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v729);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v729);
              v62 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              v63 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v62, "mAuthoringToolVersion");
              v64 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v63, "mPatch");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v729);
              v65 = *v64;
              *v64 = 5;
              v729[0] = v65;
              v66 = (uint64_t *)*((_QWORD *)v64 + 1);
              *((_QWORD *)v64 + 1) = v61;
              v730 = v66;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v64);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v729);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v730, v65);
              v67 = (uint64_t *)v553[10];
              v727[0] = 5;
              v728 = v67;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v727);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v727);
              v68 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              v69 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v68, "mRendererNameIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v727);
              v70 = *v69;
              *v69 = 5;
              v727[0] = v70;
              v71 = (uint64_t *)*((_QWORD *)v69 + 1);
              *((_QWORD *)v69 + 1) = v67;
              v728 = v71;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v69);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v727);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v728, v70);
              v72 = (uint64_t *)v553[11];
              v725[0] = 5;
              v726 = v72;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v725);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v725);
              v73 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              v74 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v73, "mRendererVersion");
              v75 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v74, "mMajor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v725);
              v76 = *v75;
              *v75 = 5;
              v725[0] = v76;
              v77 = (uint64_t *)*((_QWORD *)v75 + 1);
              *((_QWORD *)v75 + 1) = v72;
              v726 = v77;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v75);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v725);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v726, v76);
              v78 = (uint64_t *)v553[12];
              v723[0] = 5;
              v724 = v78;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v723);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v723);
              v79 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              v80 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "mRendererVersion");
              v81 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v80, "mMinor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v723);
              v82 = *v81;
              *v81 = 5;
              v723[0] = v82;
              v83 = (uint64_t *)*((_QWORD *)v81 + 1);
              *((_QWORD *)v81 + 1) = v78;
              v724 = v83;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v81);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v723);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v724, v82);
              v84 = v553[13];
              v721[0] = 5;
              v722 = v84;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v721);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v721);
              v85 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              v86 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v85, "mRendererVersion");
              v87 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v86, "mPatch");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v721);
              v32 = *v87;
              *v87 = 5;
              v721[0] = v32;
              v88 = *((_QWORD *)v87 + 1);
              *((_QWORD *)v87 + 1) = v84;
              v722 = v88;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v87);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v721);
              v34 = (uint64_t **)&v722;
              goto LABEL_60;
            case 5:
              v89 = *((float *)a1 + 1033);
              v719[0] = 7;
              v720 = v89;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v719);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v719);
              v90 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
              v91 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v90, "mAspectRatio");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v719);
              v92 = *v91;
              *v91 = 7;
              v719[0] = v92;
              v93 = *((uint64_t **)v91 + 1);
              *((double *)v91 + 1) = v89;
              v720 = *(double *)&v93;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v91);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v719);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v720, v92);
              v94 = (uint64_t *)v553[20];
              v717[0] = 4;
              v718 = v94;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v717);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v717);
              v95 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
              v96 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v95, "mIsCartesian");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v717);
              v97 = *v96;
              *v96 = 4;
              v717[0] = v97;
              v98 = (uint64_t *)*((_QWORD *)v96 + 1);
              *((_QWORD *)v96 + 1) = v94;
              v718 = v98;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v96);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v717);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v718, v97);
              if (v553[20])
              {
                v99 = *((float *)a1 + 1035);
                v715[0] = 7;
                v716 = v99;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v715);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v715);
                v100 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                v29 = v555;
                v101 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v100, "mScreenCentrePosition");
                v102 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v101, "mX");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v715);
                v103 = *v102;
                *v102 = 7;
                v715[0] = v103;
                v104 = *((uint64_t **)v102 + 1);
                *((double *)v102 + 1) = v99;
                v716 = *(double *)&v104;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v102);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v715);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v716, v103);
                v105 = *((float *)a1 + 1036);
                v713[0] = 7;
                v714 = v105;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v713);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v713);
                v106 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                v107 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v106, "mScreenCentrePosition");
                v108 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v107, "mY");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v713);
                v109 = *v108;
                *v108 = 7;
                v713[0] = v109;
                v110 = *((uint64_t **)v108 + 1);
                *((double *)v108 + 1) = v105;
                v714 = *(double *)&v110;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v108);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v713);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v714, v109);
                v111 = *((float *)a1 + 1037);
                v711[0] = 7;
                v712 = v111;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v711);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v711);
                v112 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                v113 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v112, "mScreenCentrePosition");
                v114 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v113, "mZ");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v711);
                v115 = *v114;
                *v114 = 7;
                v711[0] = v115;
                v116 = *((uint64_t **)v114 + 1);
                *((double *)v114 + 1) = v111;
                v712 = *(double *)&v116;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v114);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v711);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v712, v115);
                v117 = *((float *)a1 + 1041);
                v709[0] = 7;
                v710 = v117;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v709);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v709);
                v118 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                v119 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v118, "mScreenWidth");
                v120 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v119, "mX");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v709);
                v121 = *v120;
                *v120 = 7;
                v709[0] = v121;
                v122 = *((double *)v120 + 1);
                *((double *)v120 + 1) = v117;
                v710 = v122;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v120);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v709);
                v123 = &v710;
              }
              else
              {
                v408 = *((float *)a1 + 1038);
                v707[0] = 7;
                v708 = v408;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v707);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v707);
                v409 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                v29 = v555;
                v410 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v409, "mScreenCentrePosition");
                v411 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v410, "mAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v707);
                v412 = *v411;
                *v411 = 7;
                v707[0] = v412;
                v413 = *((uint64_t **)v411 + 1);
                *((double *)v411 + 1) = v408;
                v708 = *(double *)&v413;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v411);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v707);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v708, v412);
                v414 = *((float *)a1 + 1039);
                v705[0] = 7;
                v706 = v414;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v705);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v705);
                v415 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                v416 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v415, "mScreenCentrePosition");
                v417 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v416, "mElevation");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v705);
                v418 = *v417;
                *v417 = 7;
                v705[0] = v418;
                v419 = *((uint64_t **)v417 + 1);
                *((double *)v417 + 1) = v414;
                v706 = *(double *)&v419;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v417);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v705);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v706, v418);
                v420 = *((float *)a1 + 1040);
                v703[0] = 7;
                v704 = v420;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v703);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v703);
                v421 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                v422 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v421, "mScreenCentrePosition");
                v423 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v422, "mRadius");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v703);
                v424 = *v423;
                *v423 = 7;
                v703[0] = v424;
                v425 = *((uint64_t **)v423 + 1);
                *((double *)v423 + 1) = v420;
                v704 = *(double *)&v425;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v423);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v703);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v704, v424);
                v426 = *((float *)a1 + 1041);
                v701[0] = 7;
                v702 = v426;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v701);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v701);
                v427 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                v428 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v427, "mScreenWidth");
                v429 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v428, "mAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v701);
                v121 = *v429;
                *v429 = 7;
                v701[0] = v121;
                v430 = *((double *)v429 + 1);
                *((double *)v429 + 1) = v426;
                v702 = v430;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v429);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v701);
                v123 = &v702;
              }
              v376 = v121;
              goto LABEL_58;
            case 6:
              v124 = (uint64_t *)v553[56];
              v699[0] = 5;
              v700 = v124;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v699);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v699);
              v125 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
              v126 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v125, "mSurroundDownmix");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v699);
              v127 = *v126;
              *v126 = 5;
              v699[0] = v127;
              v128 = (uint64_t *)*((_QWORD *)v126 + 1);
              *((_QWORD *)v126 + 1) = v124;
              v700 = v128;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v126);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v699);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v700, v127);
              v129 = (uint64_t *)v553[57];
              v697[0] = 5;
              v698 = v129;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v697);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v697);
              v130 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
              v131 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v130, "mSurroundToStereoDownmix");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v697);
              v132 = *v131;
              *v131 = 5;
              v697[0] = v132;
              v133 = (uint64_t *)*((_QWORD *)v131 + 1);
              *((_QWORD *)v131 + 1) = v129;
              v698 = v133;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v697);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v698, v132);
              v134 = (uint64_t *)v553[58];
              v695[0] = 5;
              v696 = v134;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v695);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v695);
              v135 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
              v136 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v135, "mPositionAdjustment");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v695);
              v137 = *v136;
              *v136 = 5;
              v695[0] = v137;
              v138 = (uint64_t *)*((_QWORD *)v136 + 1);
              *((_QWORD *)v136 + 1) = v134;
              v696 = v138;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v136);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v695);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v696, v137);
              v139 = 0;
              v140 = v552;
              do
              {
                v141 = (uint64_t *)*((unsigned __int8 *)v552 + v139 - 25);
                v693[0] = 4;
                v694 = v141;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v693);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v693);
                v142 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                v143 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v142, "mIsAutoTrim");
                v144 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v143, v139);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v693);
                v145 = *v144;
                *v144 = 4;
                v693[0] = v145;
                v146 = (uint64_t *)*((_QWORD *)v144 + 1);
                *((_QWORD *)v144 + 1) = v141;
                v694 = v146;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v144);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v693);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v694, v145);
                a1 = v554;
                if (!*((_BYTE *)v552 + v139 - 25))
                {
                  v147 = *(v140 - 4);
                  v691[0] = 7;
                  v692 = v147;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v691);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v691);
                  v148 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                  v149 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v148, "mMixingGains");
                  v150 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v149, v139);
                  v151 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v150, "mFrontGain");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v691);
                  v152 = *v151;
                  *v151 = 7;
                  v691[0] = v152;
                  v153 = *((uint64_t **)v151 + 1);
                  *((double *)v151 + 1) = v147;
                  v692 = *(double *)&v153;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v691);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v692, v152);
                  v154 = *(v140 - 3);
                  v689[0] = 7;
                  v690 = v154;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v689);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v689);
                  v155 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                  v156 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v155, "mMixingGains");
                  v157 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v156, v139);
                  v158 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v157, "mBackGain");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v689);
                  v159 = *v158;
                  *v158 = 7;
                  v689[0] = v159;
                  v160 = *((uint64_t **)v158 + 1);
                  *((double *)v158 + 1) = v154;
                  v690 = *(double *)&v160;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v158);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v689);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v690, v159);
                  v161 = *(v140 - 2);
                  v687[0] = 7;
                  v688 = v161;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v687);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v687);
                  v162 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                  v163 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v162, "mMixingGains");
                  v164 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v163, v139);
                  v165 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v164, "mTopGain");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v687);
                  v166 = *v165;
                  *v165 = 7;
                  v687[0] = v166;
                  v167 = *((uint64_t **)v165 + 1);
                  *((double *)v165 + 1) = v161;
                  v688 = *(double *)&v167;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v165);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v687);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v688, v166);
                  v168 = *(v140 - 1);
                  v685[0] = 7;
                  v686 = v168;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v685);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v685);
                  v169 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                  v170 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v169, "mMixingGains");
                  v171 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v170, v139);
                  v172 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v171, "mEarLevelBalance");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v685);
                  v173 = *v172;
                  *v172 = 7;
                  v685[0] = v173;
                  v174 = *((uint64_t **)v172 + 1);
                  *((double *)v172 + 1) = v168;
                  v686 = *(double *)&v174;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v685);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v686, v173);
                  v175 = *v140;
                  v683[0] = 7;
                  v684 = v175;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v683);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v683);
                  v176 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                  v177 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v176, "mMixingGains");
                  v178 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v177, v139);
                  v179 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v178, "mHeightBalance");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v683);
                  v180 = *v179;
                  *v179 = 7;
                  v683[0] = v180;
                  v181 = (uint64_t *)*((_QWORD *)v179 + 1);
                  *((double *)v179 + 1) = v175;
                  v684 = *(double *)&v181;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v179);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v683);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v684, v180);
                }
                ++v139;
                v140 += 5;
              }
              while (v139 != 9);
              v182 = (uint64_t *)v553[248];
              v681[0] = 5;
              v682 = v182;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v681);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v681);
              v183 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
              v184 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v183, "mNumChannels");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v681);
              v185 = *v184;
              *v184 = 5;
              v681[0] = v185;
              v186 = (uint64_t *)*((_QWORD *)v184 + 1);
              *((_QWORD *)v184 + 1) = v182;
              v682 = v186;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v681);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v682, v185);
              v29 = v555;
              if (v553[248])
              {
                v187 = 0;
                do
                {
                  v188 = (uint64_t *)v549[v187];
                  v679[0] = 4;
                  v680 = v188;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v679);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v679);
                  v189 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                  v190 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v189, "mIsPerChTrimEnabled");
                  v191 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v190, v187);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v679);
                  v192 = *v191;
                  *v191 = 4;
                  v679[0] = v192;
                  v193 = (uint64_t *)*((_QWORD *)v191 + 1);
                  *((_QWORD *)v191 + 1) = v188;
                  v680 = v193;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v191);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v679);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v680, v192);
                  ++v187;
                  v29 = v555;
                }
                while (v187 < v553[248]);
              }
              goto LABEL_61;
            case 7:
              v194 = (uint64_t *)*v29;
              v677[0] = 4;
              v678 = v194;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v677);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v677);
              v195 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
              v196 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v195, "mIsDirectBinauralization");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v677);
              v197 = *v196;
              *v196 = 4;
              v677[0] = v197;
              v198 = (uint64_t *)*((_QWORD *)v196 + 1);
              *((_QWORD *)v196 + 1) = v194;
              v678 = v198;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v677);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v678, v197);
              v199 = v555;
              if (*v555)
              {
                v200 = (uint64_t *)*((unsigned int *)a1 + 1125);
                v675[0] = 5;
                v676 = v200;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v675);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v675);
                v201 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v202 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v201, "mChannelLayoutTag");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v675);
                v203 = *v202;
                *v202 = 5;
                v675[0] = v203;
                v204 = (uint64_t *)*((_QWORD *)v202 + 1);
                *((_QWORD *)v202 + 1) = v200;
                v676 = v204;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v202);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v675);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v676, v203);
                v199 = v555;
              }
              v205 = (uint64_t *)v199[8];
              v673[0] = 5;
              v674 = v205;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v673);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v673);
              v206 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
              v207 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v206, "mHRTFType");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v673);
              v208 = *v207;
              *v207 = 5;
              v673[0] = v208;
              v209 = (uint64_t *)*((_QWORD *)v207 + 1);
              *((_QWORD *)v207 + 1) = v205;
              v674 = v209;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v207);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v673);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v674, v208);
              v29 = v555;
              v210 = v555[8];
              if (v210 == 1)
              {
                v431 = v555[9];
                v671[0] = 5;
                v672 = v431;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v671);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v671);
                v432 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v433 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v432, "mPredefinedIR_ID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v671);
                v32 = *v433;
                *v433 = 5;
                v671[0] = v32;
                v434 = *((_QWORD *)v433 + 1);
                *((_QWORD *)v433 + 1) = v431;
                v672 = v434;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v433);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v671);
                v34 = (uint64_t **)&v672;
              }
              else
              {
                if (v210 != 2)
                  goto LABEL_61;
                v211 = (uint64_t *)v555[9];
                v669[0] = 5;
                v670 = v211;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v669);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v669);
                v212 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v213 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v212, "mPredefinedIR_ID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v669);
                v214 = *v213;
                *v213 = 5;
                v669[0] = v214;
                v215 = (uint64_t *)*((_QWORD *)v213 + 1);
                *((_QWORD *)v213 + 1) = v211;
                v670 = v215;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v213);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v669);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v670, v214);
                v216 = (uint64_t *)v555[14];
                v667[0] = 5;
                v668 = v216;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v667);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v667);
                v217 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v218 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v217, "mDataLocationIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v667);
                v219 = *v218;
                *v218 = 5;
                v667[0] = v219;
                v220 = (uint64_t *)*((_QWORD *)v218 + 1);
                *((_QWORD *)v218 + 1) = v216;
                v668 = v220;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v218);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v667);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v668, v219);
                v221 = (uint64_t *)*((unsigned __int16 *)a1 + 2253);
                v665[0] = 5;
                v666 = v221;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v665);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v665);
                v222 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v223 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v222, "mCustomData_TableID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v665);
                v224 = *v223;
                *v223 = 5;
                v665[0] = v224;
                v225 = (uint64_t *)*((_QWORD *)v223 + 1);
                *((_QWORD *)v223 + 1) = v221;
                v666 = v225;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v223);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v665);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v666, v224);
                v226 = (uint64_t *)*((unsigned __int16 *)a1 + 2254);
                v663[0] = 5;
                v664 = v226;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v663);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v663);
                v227 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v228 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v227, "mCustomData_EntryID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v663);
                v229 = *v228;
                *v228 = 5;
                v663[0] = v229;
                v230 = (uint64_t *)*((_QWORD *)v228 + 1);
                *((_QWORD *)v228 + 1) = v226;
                v664 = v230;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v228);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v663);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v664, v229);
                v231 = v555[8];
                v661[0] = 5;
                v662 = v231;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v661);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v661);
                v232 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v233 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v232, "mHRTFType");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v661);
                v32 = *v233;
                *v233 = 5;
                v661[0] = v32;
                v234 = *((_QWORD *)v233 + 1);
                *((_QWORD *)v233 + 1) = v231;
                v662 = v234;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v233);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v661);
                v34 = (uint64_t **)&v662;
              }
LABEL_60:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v34, v32);
              v29 = v555;
LABEL_61:
              ++v28;
              v435 = *((unsigned __int16 *)a1 + 9);
              if (v435 >= 0x800)
                v435 = 2048;
              if (v28 == v435)
                break;
              continue;
            case 8:
              v235 = (uint64_t *)v29[16];
              v659[0] = 5;
              v660 = v235;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v659);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v659);
              v236 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mHCFilter");
              v237 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v236, "mDataLocationIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v659);
              v238 = *v237;
              *v237 = 5;
              v659[0] = v238;
              v239 = (uint64_t *)*((_QWORD *)v237 + 1);
              *((_QWORD *)v237 + 1) = v235;
              v660 = v239;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v237);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v659);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v660, v238);
              v240 = (uint64_t *)*((unsigned __int16 *)a1 + 2257);
              v657[0] = 5;
              v658 = v240;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v657);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v657);
              v241 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mHCFilter");
              v242 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v241, "mCustomData_TableID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v657);
              v243 = *v242;
              *v242 = 5;
              v657[0] = v243;
              v244 = (uint64_t *)*((_QWORD *)v242 + 1);
              *((_QWORD *)v242 + 1) = v240;
              v658 = v244;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v242);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v657);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v658, v243);
              v245 = *((unsigned __int16 *)a1 + 2258);
              v655[0] = 5;
              v656 = v245;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v655);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v655);
              v246 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mHCFilter");
              v247 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v246, "mCustomData_EntryID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v655);
              v32 = *v247;
              *v247 = 5;
              v655[0] = v32;
              v248 = *((_QWORD *)v247 + 1);
              *((_QWORD *)v247 + 1) = v245;
              v656 = v248;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v247);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v655);
              v34 = (uint64_t **)&v656;
              goto LABEL_60;
            case 9:
              v249 = (uint64_t *)v29[24];
              v653[0] = 5;
              v654 = v249;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v653);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v653);
              v250 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
              v251 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v250, "mDataLocationIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v653);
              v252 = *v251;
              *v251 = 5;
              v653[0] = v252;
              v253 = (uint64_t *)*((_QWORD *)v251 + 1);
              *((_QWORD *)v251 + 1) = v249;
              v654 = v253;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v251);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v653);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v654, v252);
              v254 = (uint64_t *)*((unsigned __int16 *)a1 + 2261);
              v651[0] = 5;
              v652 = v254;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v651);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v651);
              v255 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
              v256 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v255, "mCustomData_TableID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v651);
              v257 = *v256;
              *v256 = 5;
              v651[0] = v257;
              v258 = (uint64_t *)*((_QWORD *)v256 + 1);
              *((_QWORD *)v256 + 1) = v254;
              v652 = v258;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v256);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v651);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v652, v257);
              v259 = (uint64_t *)*((unsigned __int16 *)a1 + 2262);
              v649[0] = 5;
              v650 = v259;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v649);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v649);
              v260 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
              v261 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v260, "mCustomData_EntryID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v649);
              v262 = *v261;
              *v261 = 5;
              v649[0] = v262;
              v263 = (uint64_t *)*((_QWORD *)v261 + 1);
              *((_QWORD *)v261 + 1) = v259;
              v650 = v263;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v649);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v650, v262);
              v264 = 0;
              do
              {
                v265 = (uint64_t *)v556[v264];
                v647[0] = 5;
                v648 = v265;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v647);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v647);
                v266 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
                v267 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v266, "mFallbackSPAD");
                v268 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v267, "mDeviceID");
                v269 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v268, v264);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v647);
                v270 = *v269;
                *v269 = 5;
                v647[0] = v270;
                v271 = (uint64_t *)*((_QWORD *)v269 + 1);
                *((_QWORD *)v269 + 1) = v265;
                v648 = v271;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v269);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v647);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v648, v270);
                if (!v556[v264])
                  break;
              }
              while (v264++ < 7);
              v273 = (uint64_t *)v555[32];
              v645[0] = 5;
              v646 = v273;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v645);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v645);
              v274 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
              v275 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v274, "mFallbackSPAD");
              v276 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v275, "mOrientation");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v645);
              v277 = *v276;
              *v276 = 5;
              v645[0] = v277;
              v278 = (uint64_t *)*((_QWORD *)v276 + 1);
              *((_QWORD *)v276 + 1) = v273;
              v646 = v278;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v645);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v646, v277);
              v279 = (uint64_t *)v555[33];
              v643[0] = 5;
              v644 = v279;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v643);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v643);
              v280 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
              v281 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v280, "mFallbackSPAD");
              v282 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v281, "mNumMicrophones");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v643);
              v283 = *v282;
              *v282 = 5;
              v643[0] = v283;
              v284 = (uint64_t *)*((_QWORD *)v282 + 1);
              *((_QWORD *)v282 + 1) = v279;
              v644 = v284;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v282);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v643);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v644, v283);
              v29 = v555;
              if (v555[33])
              {
                v285 = 0;
                do
                {
                  v286 = (uint64_t *)*(unsigned __int8 *)(*((_QWORD *)a1 + 568) + v285);
                  v641[0] = 5;
                  v642 = v286;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v641);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v641);
                  v287 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
                  v288 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v287, "mFallbackSPAD");
                  v289 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v288, "mMicType");
                  v290 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v289, v285);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v641);
                  v291 = *v290;
                  *v290 = 5;
                  v641[0] = v291;
                  v292 = (uint64_t *)*((_QWORD *)v290 + 1);
                  *((_QWORD *)v290 + 1) = v286;
                  v642 = v292;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v290);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v641);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v642, v291);
                  v293 = *(float *)(*((_QWORD *)a1 + 571) + 4 * v285);
                  v639[0] = 7;
                  v640 = v293;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v639);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v639);
                  v294 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
                  v295 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v294, "mFallbackSPAD");
                  v296 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v295, "mMicPosAzimuth");
                  v297 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v296, v285);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v639);
                  v298 = *v297;
                  *v297 = 7;
                  v639[0] = v298;
                  v299 = *((uint64_t **)v297 + 1);
                  *((double *)v297 + 1) = v293;
                  v640 = *(double *)&v299;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v297);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v639);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v640, v298);
                  v300 = *(float *)(*((_QWORD *)a1 + 574) + 4 * v285);
                  v637[0] = 7;
                  v638 = v300;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v637);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v637);
                  v301 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
                  v302 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v301, "mFallbackSPAD");
                  v303 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v302, "mMicPosElevation");
                  v304 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v303, v285);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v637);
                  v305 = *v304;
                  *v304 = 7;
                  v637[0] = v305;
                  v306 = *((uint64_t **)v304 + 1);
                  *((double *)v304 + 1) = v300;
                  v638 = *(double *)&v306;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v304);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v637);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v638, v305);
                  v307 = *(float *)(*((_QWORD *)a1 + 577) + 4 * v285);
                  v635[0] = 7;
                  v636 = v307;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v635);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v635);
                  v308 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
                  v309 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v308, "mFallbackSPAD");
                  v310 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v309, "mMicPosRadius");
                  v311 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v310, v285);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v635);
                  v312 = *v311;
                  *v311 = 7;
                  v635[0] = v312;
                  v313 = *((uint64_t **)v311 + 1);
                  *((double *)v311 + 1) = v307;
                  v636 = *(double *)&v313;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v311);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v635);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v636, v312);
                  v314 = (uint64_t *)*(unsigned __int8 *)(*((_QWORD *)a1 + 580) + v285);
                  v633[0] = 5;
                  v634 = v314;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v633);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v633);
                  v315 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
                  v316 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v315, "mFallbackSPAD");
                  v317 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v316, "mMicDirection");
                  v318 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v317, v285);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v633);
                  v319 = *v318;
                  *v318 = 5;
                  v633[0] = v319;
                  v320 = (uint64_t *)*((_QWORD *)v318 + 1);
                  *((_QWORD *)v318 + 1) = v314;
                  v634 = v320;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v318);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v633);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v634, v319);
                  ++v285;
                  v29 = v555;
                }
                while (v285 < v555[33]);
              }
              goto LABEL_61;
            case 0xA:
              v321 = (uint64_t *)v29[168];
              v631[0] = 5;
              v632 = v321;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v631);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v631);
              v322 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mDistanceAttenuation");
              v323 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v322, "mAttnLawIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v631);
              v324 = *v323;
              *v323 = 5;
              v631[0] = v324;
              v325 = (uint64_t *)*((_QWORD *)v323 + 1);
              *((_QWORD *)v323 + 1) = v321;
              v632 = v325;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v323);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v631);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v632, v324);
              v326 = *((float *)a1 + 1168);
              v629[0] = 7;
              v630 = v326;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v629);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v629);
              v327 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mDistanceAttenuation");
              v328 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v327, "mRefDistance");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v629);
              v329 = *v328;
              *v328 = 7;
              v629[0] = v329;
              v330 = *((uint64_t **)v328 + 1);
              *((double *)v328 + 1) = v326;
              v630 = *(double *)&v330;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v328);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v629);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v630, v329);
              v331 = *((float *)a1 + 1169);
              v627[0] = 7;
              v628 = v331;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v627);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v627);
              v332 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mDistanceAttenuation");
              v333 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v332, "mMaxDistance");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v627);
              v334 = *v333;
              *v333 = 7;
              v627[0] = v334;
              v335 = *((uint64_t **)v333 + 1);
              *((double *)v333 + 1) = v331;
              v628 = *(double *)&v335;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v333);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v627);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v628, v334);
              v336 = v555[184];
              v625[0] = 4;
              v626 = v336;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v625);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v625);
              v337 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mDistanceAttenuation");
              v338 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v337, "mAttnNormIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v625);
              v32 = *v338;
              *v338 = 4;
              v625[0] = v32;
              v339 = *((_QWORD *)v338 + 1);
              *((_QWORD *)v338 + 1) = v336;
              v626 = v339;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v338);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v625);
              v34 = (uint64_t **)&v626;
              goto LABEL_60;
            case 0xB:
              v340 = (uint64_t *)v29[188];
              v623[0] = 4;
              v624 = v340;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v623);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v623);
              v341 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
              v342 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v341, "mPositionPresent");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v623);
              v343 = *v342;
              *v342 = 4;
              v623[0] = v343;
              v344 = (uint64_t *)*((_QWORD *)v342 + 1);
              *((_QWORD *)v342 + 1) = v340;
              v624 = v344;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v342);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v623);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v624, v343);
              v345 = v555;
              if (v555[188])
              {
                v346 = (uint64_t *)v555[189];
                v621[0] = 4;
                v622 = v346;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v621);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v621);
                v347 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
                v348 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v347, "mIsCartesian");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v621);
                v349 = *v348;
                *v348 = 4;
                v621[0] = v349;
                v350 = (uint64_t *)*((_QWORD *)v348 + 1);
                *((_QWORD *)v348 + 1) = v346;
                v622 = v350;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v348);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v621);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v622, v349);
                v345 = v555;
                if (v555[189])
                {
                  for (i = 0; i != 3; ++i)
                  {
                    v352 = *(float *)&v547[4 * i];
                    v619[0] = 7;
                    v620 = v352;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v619);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v619);
                    v353 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
                    v354 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v353, "mCoordinate");
                    v355 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v354, i);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v619);
                    v356 = *v355;
                    *v355 = 7;
                    v619[0] = v356;
                    v357 = *((uint64_t **)v355 + 1);
                    *((double *)v355 + 1) = v352;
                    v620 = *(double *)&v357;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v355);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v619);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v620, v356);
                  }
                }
                else
                {
                  v436 = *((float *)a1 + 1172);
                  v617[0] = 7;
                  v618 = v436;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v617);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v617);
                  v437 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
                  v438 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v437, "mAzimuth");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v617);
                  v439 = *v438;
                  *v438 = 7;
                  v617[0] = v439;
                  v440 = *((uint64_t **)v438 + 1);
                  *((double *)v438 + 1) = v436;
                  v618 = *(double *)&v440;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v438);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v617);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v618, v439);
                  v441 = *((float *)a1 + 1173);
                  v615[0] = 7;
                  v616 = v441;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v615);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v615);
                  v442 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
                  v443 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v442, "mElevation");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v615);
                  v444 = *v443;
                  *v443 = 7;
                  v615[0] = v444;
                  v445 = *((uint64_t **)v443 + 1);
                  *((double *)v443 + 1) = v441;
                  v616 = *(double *)&v445;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v443);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v615);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v616, v444);
                  v446 = *((float *)a1 + 1174);
                  v613[0] = 7;
                  v614 = v446;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v613);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v613);
                  v447 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
                  v448 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v447, "mRadius");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v613);
                  v449 = *v448;
                  *v448 = 7;
                  v613[0] = v449;
                  v450 = *((uint64_t **)v448 + 1);
                  *((double *)v448 + 1) = v446;
                  v614 = *(double *)&v450;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v448);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v613);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v614, v449);
                }
              }
              v451 = (uint64_t *)v345[204];
              v611[0] = 4;
              v612 = v451;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v611);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v611);
              v452 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
              v453 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v452, "mRotationPresent");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v611);
              v454 = *v453;
              *v453 = 4;
              v611[0] = v454;
              v455 = (uint64_t *)*((_QWORD *)v453 + 1);
              *((_QWORD *)v453 + 1) = v451;
              v612 = v455;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v453);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v611);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v612, v454);
              v29 = v555;
              if (v555[204])
              {
                for (j = 0; j != 4; ++j)
                {
                  v457 = *(float *)&v550[4 * j];
                  v609[0] = 7;
                  v610 = v457;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v609);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v609);
                  v458 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
                  v459 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v458, "mQuaternion");
                  v460 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v459, j);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v609);
                  v461 = *v460;
                  *v460 = 7;
                  v609[0] = v461;
                  v462 = *((uint64_t **)v460 + 1);
                  *((double *)v460 + 1) = v457;
                  v610 = *(double *)&v462;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v460);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v609);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v610, v461);
                }
              }
              goto LABEL_61;
            case 0xC:
              v358 = (uint64_t *)v29[236];
              v607[0] = 4;
              v608 = v358;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v607);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v607);
              v359 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
              v360 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v359, "mHasPreset");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v607);
              v361 = *v360;
              *v360 = 4;
              v607[0] = v361;
              v362 = (uint64_t *)*((_QWORD *)v360 + 1);
              *((_QWORD *)v360 + 1) = v358;
              v608 = v362;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v360);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v607);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v608, v361);
              if (v555[236])
              {
                v363 = *((unsigned __int16 *)a1 + 2367);
                v605[0] = 5;
                v606 = v363;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v605);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v605);
                v364 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
                v365 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v364, "mPresetIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v605);
                v32 = *v365;
                *v365 = 5;
                v605[0] = v32;
                v366 = *((_QWORD *)v365 + 1);
                *((_QWORD *)v365 + 1) = v363;
                v606 = v366;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v365);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v605);
                v34 = (uint64_t **)&v606;
              }
              else
              {
                v384 = (uint64_t *)v555[240];
                v603[0] = 5;
                v604 = v384;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v603);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v603);
                v385 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
                v386 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v385, "mDataLocationIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v603);
                v387 = *v386;
                *v386 = 5;
                v603[0] = v387;
                v388 = (uint64_t *)*((_QWORD *)v386 + 1);
                *((_QWORD *)v386 + 1) = v384;
                v604 = v388;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v386);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v603);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v604, v387);
                v389 = (uint64_t *)*((unsigned __int16 *)a1 + 2369);
                v601[0] = 5;
                v602 = v389;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v601);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v601);
                v390 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
                v391 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v390, "mCustomData_TableID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v601);
                v392 = *v391;
                *v391 = 5;
                v601[0] = v392;
                v393 = (uint64_t *)*((_QWORD *)v391 + 1);
                *((_QWORD *)v391 + 1) = v389;
                v602 = v393;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v391);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v601);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v602, v392);
                v394 = (uint64_t *)*((unsigned __int16 *)a1 + 2370);
                v599[0] = 5;
                v600 = v394;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v599);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v599);
                v395 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
                v396 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v395, "mCustomData_EntryID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v599);
                v397 = *v396;
                *v396 = 5;
                v599[0] = v397;
                v398 = (uint64_t *)*((_QWORD *)v396 + 1);
                *((_QWORD *)v396 + 1) = v394;
                v600 = v398;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v396);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v599);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v600, v397);
                v399 = (uint64_t *)*((unsigned __int16 *)a1 + 2371);
                v597[0] = 5;
                v598 = v399;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v597);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v597);
                v400 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
                v401 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v400, "mFallbackIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v597);
                v402 = *v401;
                *v401 = 5;
                v597[0] = v402;
                v403 = (uint64_t *)*((_QWORD *)v401 + 1);
                *((_QWORD *)v401 + 1) = v399;
                v598 = v403;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v401);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v597);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v598, v402);
                v404 = *((unsigned int *)a1 + 1186);
                v595[0] = 5;
                v596 = v404;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v595);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v595);
                v405 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
                v406 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v405, "mDataByteSize");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v595);
                v32 = *v406;
                *v406 = 5;
                v595[0] = v32;
                v407 = *((_QWORD *)v406 + 1);
                *((_QWORD *)v406 + 1) = v404;
                v596 = v407;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v406);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v595);
                v34 = (uint64_t **)&v596;
              }
              goto LABEL_60;
            case 0xD:
              v367 = v553[4];
              v593[0] = 5;
              v594 = v367;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v593);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v593);
              v368 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mContentKind");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v593);
              v32 = *v368;
              *v368 = 5;
              v593[0] = v32;
              v369 = *((_QWORD *)v368 + 1);
              *((_QWORD *)v368 + 1) = v367;
              v594 = v369;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v368);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v593);
              v34 = (uint64_t **)&v594;
              goto LABEL_60;
            case 0xE:
              v370 = v553[5];
              v591[0] = 5;
              v592 = v370;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v591);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v591);
              v371 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mMaxNumBlocks");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v591);
              v32 = *v371;
              *v371 = 5;
              v591[0] = v32;
              v372 = *((_QWORD *)v371 + 1);
              *((_QWORD *)v371 + 1) = v370;
              v592 = v372;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v371);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v591);
              v34 = (uint64_t **)&v592;
              goto LABEL_60;
            case 0xF:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v589, "dump not implemented");
              v373 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mChannelBedHeadphoneMetadata");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v589);
              v374 = *v373;
              *v373 = v589[0];
              v589[0] = v374;
              v375 = *((_QWORD *)v373 + 1);
              *((_QWORD *)v373 + 1) = v590;
              v590 = v375;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v373);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v589);
              v376 = v589[0];
              v123 = (double *)&v590;
LABEL_58:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v123, v376);
              goto LABEL_61;
            default:
              std::to_string(&v587, *(unsigned __int16 *)&v548[2 * v28]);
              v377 = std::string::insert(&v587, 0, "Unknown parameter id ", 0x15uLL);
              v588 = *v377;
              v377->__r_.__value_.__l.__size_ = 0;
              v377->__r_.__value_.__r.__words[2] = 0;
              v377->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v587.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v587.__r_.__value_.__l.__data_);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v585, "not implemented");
              v378 = SHIBYTE(v588.__r_.__value_.__r.__words[2]);
              v379 = (void *)v588.__r_.__value_.__r.__words[0];
              if ((v588.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v380 = &v588;
              else
                v380 = (std::string *)v588.__r_.__value_.__r.__words[0];
              v381 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, (char *)v380);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v585);
              v382 = *v381;
              *v381 = v585[0];
              v585[0] = v382;
              v383 = (uint64_t *)*((_QWORD *)v381 + 1);
              *((_QWORD *)v381 + 1) = v586;
              v586 = v383;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v381);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v585);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v586, v585[0]);
              if (v378 < 0)
                operator delete(v379);
              goto LABEL_61;
          }
          break;
        }
      }
    }
    v463 = *((unsigned __int16 *)a1 + 4);
    v464 = *((_QWORD *)a1 + 598);
    if (-1431655765 * ((unint64_t)(*((_QWORD *)a1 + 599) - v464) >> 4) < v463)
      v463 = -1431655765 * ((unint64_t)(*((_QWORD *)a1 + 599) - v464) >> 4);
    v465 = v551;
    if (v463)
    {
      v466 = 0;
      do
      {
        v467 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v465, "mRendererMetadataConfig");
        v468 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v467, "mGroupConfig");
        v469 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v468, v466);
        v470 = (uint64_t *)*(unsigned __int16 *)(v464 + 48 * v466);
        v583[0] = 5;
        v584 = v470;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v583);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v583);
        v471 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mGroupID");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v583);
        v472 = *v471;
        *v471 = 5;
        v583[0] = v472;
        v473 = (uint64_t *)*((_QWORD *)v471 + 1);
        *((_QWORD *)v471 + 1) = v470;
        v584 = v473;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v471);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v583);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v584, v472);
        v474 = v464 + 48 * v466;
        v475 = *(unsigned __int8 *)(v474 + 2);
        v581[0] = 4;
        v582 = v475;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v581);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v581);
        v476 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mIsGlobal");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v581);
        v477 = *v476;
        *v476 = 4;
        v581[0] = v477;
        v478 = (uint64_t *)*((_QWORD *)v476 + 1);
        *((_QWORD *)v476 + 1) = v475;
        v582 = (unint64_t)v478;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v476);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v581);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v582, v477);
        if (!*(_BYTE *)(v474 + 2))
        {
          v479 = v464 + 48 * v466;
          v480 = *(unsigned __int8 *)(v479 + 3);
          v579[0] = 4;
          v580 = v480;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v579);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v579);
          v481 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mIsPerASC");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v579);
          v482 = *v481;
          *v481 = 4;
          v579[0] = v482;
          v483 = (uint64_t *)*((_QWORD *)v481 + 1);
          *((_QWORD *)v481 + 1) = v480;
          v580 = (unint64_t)v483;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v481);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v579);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v580, v482);
          if (!*(_BYTE *)(v479 + 3))
          {
            v499 = v464 + 48 * v466;
            v501 = *(unsigned __int16 *)(v499 + 18);
            v500 = (unsigned __int16 *)(v499 + 18);
            v563[0] = 5;
            v564 = v501;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v563);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v563);
            v502 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mMemberCount");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v563);
            v503 = *v502;
            *v502 = 5;
            v563[0] = v503;
            v504 = (uint64_t *)*((_QWORD *)v502 + 1);
            *((_QWORD *)v502 + 1) = v501;
            v564 = (unint64_t)v504;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v502);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v563);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v564, v503);
            v505 = v464 + 48 * v466;
            v506 = *(unsigned __int8 *)(v505 + 20);
            v561[0] = 4;
            v562 = v506;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v561);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v561);
            v507 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mHasConjunctMembers");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v561);
            v508 = *v507;
            *v507 = 4;
            v561[0] = v508;
            v509 = (uint64_t *)*((_QWORD *)v507 + 1);
            *((_QWORD *)v507 + 1) = v506;
            v562 = (unint64_t)v509;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v507);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v561);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v562, v508);
            if (!*(_BYTE *)(v505 + 20))
            {
              v534 = v464 + 48 * v466;
              v537 = *(_QWORD *)(v534 + 24);
              v536 = (uint64_t *)(v534 + 24);
              v535 = v537;
              v538 = (unint64_t)(v536[1] - v537) >> 1;
              if (v538 >= *v500)
                LODWORD(v538) = *v500;
              if ((_DWORD)v538)
              {
                v539 = 0;
                do
                {
                  v540 = (uint64_t *)*(unsigned __int16 *)(v535 + 2 * v539);
                  v557[0] = 5;
                  v558 = v540;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v557);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v557);
                  v541 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mASCIDList");
                  v542 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v541, v539);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v557);
                  v543 = *v542;
                  *v542 = 5;
                  v557[0] = v543;
                  v544 = (uint64_t *)*((_QWORD *)v542 + 1);
                  *((_QWORD *)v542 + 1) = v540;
                  v558 = v544;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v542);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v557);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v558, v543);
                  ++v539;
                  v535 = *v536;
                  v545 = (unint64_t)(v536[1] - *v536) >> 1;
                  if (v545 >= *v500)
                    v546 = *v500;
                  else
                    v546 = v545;
                }
                while (v539 < v546);
              }
              goto LABEL_86;
            }
            v510 = *(unsigned __int16 *)(v464 + 48 * v466 + 22);
            v559[0] = 5;
            v560 = v510;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v559);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v559);
            v511 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mStartASCID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v559);
            v496 = *v511;
            *v511 = 5;
            v559[0] = v496;
            v512 = *((_QWORD *)v511 + 1);
            *((_QWORD *)v511 + 1) = v510;
            v560 = v512;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v511);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v559);
            v498 = (uint64_t **)&v560;
            goto LABEL_85;
          }
          v484 = (uint64_t *)*(unsigned __int16 *)(v464 + 48 * v466 + 4);
          v577[0] = 5;
          v578 = v484;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v577);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v577);
          v485 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mASCID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v577);
          v486 = *v485;
          *v485 = 5;
          v577[0] = v486;
          v487 = (uint64_t *)*((_QWORD *)v485 + 1);
          *((_QWORD *)v485 + 1) = v484;
          v578 = v487;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v485);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v577);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v578, v486);
          v488 = (unsigned __int8 *)(v464 + 48 * v466);
          v489 = v488[6];
          v488 += 6;
          v575[0] = 5;
          v576 = v489;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v575);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v575);
          v490 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mASCType");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v575);
          v491 = *v490;
          *v490 = 5;
          v575[0] = v491;
          v492 = (uint64_t *)*((_QWORD *)v490 + 1);
          *((_QWORD *)v490 + 1) = v489;
          v576 = (unint64_t)v492;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v490);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v575);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v576, v491);
          v493 = *v488;
          if (!*v488)
          {
            v513 = *(unsigned __int16 *)(v464 + 48 * v466 + 16);
            v573[0] = 5;
            v574 = v513;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v573);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v573);
            v514 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mChBedID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v573);
            v496 = *v514;
            *v514 = 5;
            v573[0] = v496;
            v515 = *((_QWORD *)v514 + 1);
            *((_QWORD *)v514 + 1) = v513;
            v574 = v515;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v514);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v573);
            v498 = (uint64_t **)&v574;
            goto LABEL_85;
          }
          if (v493 == 1)
          {
            v516 = (uint64_t *)*(unsigned __int16 *)(v464 + 48 * v466 + 8);
            v571[0] = 5;
            v572 = v516;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v571);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v571);
            v517 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mObjectID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v571);
            v518 = *v517;
            *v517 = 5;
            v571[0] = v518;
            v519 = (uint64_t *)*((_QWORD *)v517 + 1);
            *((_QWORD *)v517 + 1) = v516;
            v572 = v519;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v517);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v571);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v572, v518);
            v520 = v464 + 48 * v466;
            v521 = *(unsigned __int8 *)(v520 + 10);
            v569[0] = 4;
            v570 = v521;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v569);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v569);
            v522 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mIsObjectInBed");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v569);
            v523 = *v522;
            *v522 = 4;
            v569[0] = v523;
            v524 = (uint64_t *)*((_QWORD *)v522 + 1);
            *((_QWORD *)v522 + 1) = v521;
            v570 = (unint64_t)v524;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v522);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v569);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v570, v523);
            if (*(_BYTE *)(v520 + 10))
            {
              v525 = *(unsigned __int16 *)(v464 + 48 * v466 + 12);
              v567[0] = 5;
              v568 = v525;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v567);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v567);
              v526 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mBedASCID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v567);
              v496 = *v526;
              *v526 = 5;
              v567[0] = v496;
              v527 = *((_QWORD *)v526 + 1);
              *((_QWORD *)v526 + 1) = v525;
              v568 = v527;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v526);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v567);
              v498 = (uint64_t **)&v568;
              goto LABEL_85;
            }
          }
          else if (v493 == 2)
          {
            v494 = *(unsigned __int16 *)(v464 + 48 * v466 + 14);
            v565[0] = 5;
            v566 = v494;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v565);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v565);
            v495 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mHOAID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v565);
            v496 = *v495;
            *v495 = 5;
            v565[0] = v496;
            v497 = *((_QWORD *)v495 + 1);
            *((_QWORD *)v495 + 1) = v494;
            v566 = v497;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v495);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v565);
            v498 = (uint64_t **)&v566;
LABEL_85:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v498, v496);
          }
        }
LABEL_86:
        v528 = *((_QWORD *)v554 + 601);
        v465 = v551;
        v529 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v551, "mRendererMetadataConfig");
        v530 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v529, "mRendererData");
        v531 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v530, v466);
        APAC::RendererDataJSON(v531, (float *)(v528 + 1248 * v466++), 1);
        v464 = *((_QWORD *)v554 + 598);
        v532 = -1431655765 * ((unint64_t)(*((_QWORD *)v554 + 599) - v464) >> 4);
        if (v532 >= *((unsigned __int16 *)v554 + 4))
          v533 = *((unsigned __int16 *)v554 + 4);
        else
          v533 = v532;
      }
      while (v466 < v533);
    }
  }
}

void sub_18F04D668(_Unwind_Exception *a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&STACK[0x4A8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)STACK[0x288]);
  _Unwind_Resume(a1);
}

void APAC::MetadataConfigJSONStr(unsigned __int8 *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _BYTE v5[8];
  uint64_t *v6;

  APAC::MetadataConfigJSON(a1, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(a3, (uint64_t)v5, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_18F04DBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

void APAC::ImmersiveRendererData_V2JSON(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned int *v4;
  uint64_t *v5;
  char *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned __int8 *v18;
  char *v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned __int8 *v23;
  char *v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  unsigned __int8 *v28;
  char *v29;
  int v30;
  uint64_t *v31;
  char v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  char *v35;
  char v36;
  uint64_t *v37;
  size_t v38;
  unsigned int *v39;
  _DWORD *ACLPointer;
  uint64_t *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  char *v45;
  int v46;
  uint64_t *v47;
  uint64_t *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  char *v52;
  int v53;
  uint64_t *v54;
  uint64_t *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  char *v59;
  int v60;
  uint64_t *v61;
  unsigned __int8 *v62;
  char *ImmersiveRendererDescriptionPointer;
  unint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  uint64_t *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  char *v72;
  int v73;
  uint64_t *v74;
  uint64_t *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  char *v80;
  int v81;
  uint64_t *v82;
  uint64_t *v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  char *v88;
  int v89;
  uint64_t *v90;
  uint64_t *v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  char *v96;
  int v97;
  uint64_t *v98;
  uint64_t *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  char *v104;
  int v105;
  uint64_t *v106;
  _QWORD *exception;
  unsigned int *__p;
  char v109[8];
  uint64_t *v110;
  char v111[8];
  uint64_t *v112;
  char v113[8];
  uint64_t *v114;
  char v115[8];
  uint64_t *v116;
  char v117[8];
  uint64_t *v118;
  char v119[8];
  uint64_t *v120;
  char v121[8];
  uint64_t *v122;
  char v123[8];
  uint64_t *v124;
  unsigned __int8 v125[8];
  uint64_t *v126;
  char v127[8];
  uint64_t *v128;
  char v129[8];
  uint64_t *v130;
  char v131[8];
  uint64_t *v132;
  char v133[8];
  uint64_t *v134;
  char v135[8];
  uint64_t *v136;
  char v137[8];
  uint64_t *v138;
  unsigned __int8 v139[8];
  __int16 v140;
  char v141;
  __int16 v142;
  int v143;
  char v144;
  char v145;
  uint64_t v146;
  int v147;
  char v148;
  __int128 v149;
  _BYTE v150[358];
  int v151;
  char v152;
  int v153;
  __int16 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _BYTE v161[25];
  _QWORD v162[2];
  __int16 v163;
  _QWORD v164[5];
  char v165;
  __int16 v166;
  char v167;
  uint64_t v168;
  __int16 v169;
  __int16 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;

  v1 = (unsigned int *)MEMORY[0x1E0C80A78](a1);
  v3 = (unsigned __int8 *)v2;
  v176 = *MEMORY[0x1E0C80C00];
  if (*v1 != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Unsupported ImmersiveRendererData version";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v4 = v1;
  *(_BYTE *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  v5 = (uint64_t *)*v4;
  v137[0] = 6;
  v138 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v137);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v137);
  v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mVersion");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v137);
  v7 = *v6;
  *v6 = 6;
  v137[0] = v7;
  v8 = (uint64_t *)*((_QWORD *)v6 + 1);
  *((_QWORD *)v6 + 1) = v5;
  v138 = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v137);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v138, v7);
  v9 = (uint64_t *)v4[1];
  v135[0] = 6;
  v136 = v9;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v135);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v135);
  v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mNumberOfSARCs");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v135);
  v11 = *v10;
  *v10 = 6;
  v135[0] = v11;
  v12 = (uint64_t *)*((_QWORD *)v10 + 1);
  *((_QWORD *)v10 + 1) = v9;
  v136 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v135);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v136, v11);
  v13 = (uint64_t *)v4[2];
  v133[0] = 6;
  v134 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v133);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v133);
  v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mDataByteSize");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v133);
  v15 = *v14;
  *v14 = 6;
  v133[0] = v15;
  v16 = (uint64_t *)*((_QWORD *)v14 + 1);
  *((_QWORD *)v14 + 1) = v13;
  v134 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v133);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v134, v15);
  v17 = (uint64_t *)v4[3];
  v131[0] = 6;
  v132 = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
  v18 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
  v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mLayoutSize");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
  v20 = *v19;
  *v19 = 6;
  v131[0] = v20;
  v21 = (uint64_t *)*((_QWORD *)v19 + 1);
  *((_QWORD *)v19 + 1) = v17;
  v132 = v21;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v132, v20);
  v22 = (uint64_t *)v4[4];
  v129[0] = 6;
  v130 = v22;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v129);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v129);
  v23 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
  v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v23, "mNumRendererDescriptions");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v129);
  v25 = *v24;
  *v24 = 6;
  v129[0] = v25;
  v26 = (uint64_t *)*((_QWORD *)v24 + 1);
  *((_QWORD *)v24 + 1) = v22;
  v130 = v26;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v129);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v130, v25);
  v27 = (uint64_t *)v4[5];
  v127[0] = 6;
  v128 = v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v127);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v127);
  v28 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
  v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v28, "mEABLConfigSize");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v127);
  v30 = *v29;
  *v29 = 6;
  v127[0] = v30;
  v31 = (uint64_t *)*((_QWORD *)v29 + 1);
  *((_QWORD *)v29 + 1) = v27;
  v128 = v31;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v127);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v128, v30);
  *(_WORD *)v139 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v144 = 0;
  v143 = 0;
  v145 = 4;
  v146 = 0;
  v147 = 1065353216;
  v148 = 0;
  memset(&v150[28], 0, 181);
  v150[340] = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v162[0] = 0;
  *(_QWORD *)((char *)v162 + 5) = 0;
  *(_QWORD *)((char *)v164 + 5) = 0;
  v163 = 0;
  v164[0] = 0;
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v149 = 0u;
  memset(v150, 0, 19);
  memset(&v150[344], 0, 13);
  memset(v161, 0, sizeof(v161));
  v160 = 0u;
  v159 = 0u;
  v158 = 0u;
  v157 = 0u;
  v156 = 0u;
  v155 = 0u;
  v174 = 0u;
  v173 = 0u;
  v172 = 0u;
  v171 = 0u;
  v175 = 0;
  APAC::ImmersiveRendererData_V2_Manager::getMetadataConfig(v4, (uint64_t)v139);
  if (!v32)
  {
    APAC::MetadataConfigJSON(v139, (uint64_t)v125);
    v33 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
    v34 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v33, "data");
    v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v34, "EABLMetadataConfig");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v125);
    v36 = *v35;
    *v35 = v125[0];
    v125[0] = v36;
    v37 = (uint64_t *)*((_QWORD *)v35 + 1);
    *((_QWORD *)v35 + 1) = v126;
    v126 = v37;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v125);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v126, v125[0]);
  }
  if (*v4 != 2)
    __assert_rtn("getACLByteSize", "APACImmersiveRendererDataV2.cpp", 50, "inIRD.mVersion == kIRDVersion");
  v38 = v4[3];
  if ((_DWORD)v38)
  {
    v39 = (unsigned int *)operator new(v4[3]);
    bzero(v39, v38);
  }
  else
  {
    v39 = 0;
  }
  ACLPointer = APAC::ImmersiveRendererData_V2_Manager::getACLPointer(v4);
  memcpy(v39, ACLPointer, v38);
  if (v39)
  {
    v41 = (uint64_t *)*v39;
    v123[0] = 6;
    v124 = v41;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v123);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v123);
    v42 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
    v43 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v42, "data");
    v44 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "GlobalChannelLayout");
    v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v44, "mChannelLayoutTag");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v123);
    v46 = *v45;
    *v45 = 6;
    v123[0] = v46;
    v47 = (uint64_t *)*((_QWORD *)v45 + 1);
    *((_QWORD *)v45 + 1) = v41;
    v124 = v47;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v123);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v124, v46);
    v48 = (uint64_t *)v39[1];
    v121[0] = 6;
    v122 = v48;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v121);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v121);
    v49 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
    v50 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v49, "data");
    v51 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v50, "GlobalChannelLayout");
    v52 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v51, "mChannelBitmap");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v121);
    v53 = *v52;
    *v52 = 6;
    v121[0] = v53;
    v54 = (uint64_t *)*((_QWORD *)v52 + 1);
    *((_QWORD *)v52 + 1) = v48;
    v122 = v54;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v52);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v121);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v122, v53);
    v55 = (uint64_t *)v39[2];
    v119[0] = 6;
    v120 = v55;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v119);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v119);
    v56 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
    v57 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v56, "data");
    v58 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "GlobalChannelLayout");
    v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v58, "mNumberChannelDescriptions");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v119);
    v60 = *v59;
    *v59 = 6;
    v119[0] = v60;
    v61 = (uint64_t *)*((_QWORD *)v59 + 1);
    *((_QWORD *)v59 + 1) = v55;
    v120 = v61;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v119);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v120, v60);
  }
  __p = v39;
  v62 = v3;
  ImmersiveRendererDescriptionPointer = APAC::ImmersiveRendererData_V2_Manager::getImmersiveRendererDescriptionPointer(v4);
  if (ImmersiveRendererDescriptionPointer && v4[4])
  {
    v64 = 0;
    v65 = (unsigned int *)(ImmersiveRendererDescriptionPointer + 8);
    do
    {
      v66 = v4;
      v67 = (uint64_t *)*(v65 - 2);
      v117[0] = 6;
      v118 = v67;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v117);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v117);
      v68 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v62, "mData");
      v69 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v68, "data");
      v70 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v69, "ImmersiveRendererDescriptions");
      v71 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v70, v64);
      v72 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v71, "mStartChannel");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v117);
      v73 = *v72;
      *v72 = 6;
      v117[0] = v73;
      v74 = (uint64_t *)*((_QWORD *)v72 + 1);
      *((_QWORD *)v72 + 1) = v67;
      v118 = v74;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v72);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v117);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v118, v73);
      v75 = (uint64_t *)*(v65 - 1);
      v115[0] = 6;
      v116 = v75;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v115);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v115);
      v76 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v62, "mData");
      v77 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v76, "data");
      v78 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v77, "ImmersiveRendererDescriptions");
      v79 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v78, v64);
      v80 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "mEndChannel");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v115);
      v81 = *v80;
      *v80 = 6;
      v115[0] = v81;
      v82 = (uint64_t *)*((_QWORD *)v80 + 1);
      *((_QWORD *)v80 + 1) = v75;
      v116 = v82;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v80);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v115);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v116, v81);
      v83 = (uint64_t *)*v65;
      v113[0] = 5;
      v114 = v83;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v113);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v113);
      v84 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v62, "mData");
      v85 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v84, "data");
      v86 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v85, "ImmersiveRendererDescriptions");
      v87 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v86, v64);
      v88 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v87, "mRendererType");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v113);
      v89 = *v88;
      *v88 = 5;
      v113[0] = v89;
      v90 = (uint64_t *)*((_QWORD *)v88 + 1);
      *((_QWORD *)v88 + 1) = v83;
      v114 = v90;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v88);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v113);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v114, v89);
      v91 = (uint64_t *)v65[1];
      v111[0] = 6;
      v112 = v91;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v111);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v111);
      v92 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v62, "mData");
      v93 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v92, "data");
      v94 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v93, "ImmersiveRendererDescriptions");
      v95 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v94, v64);
      v96 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v95, "mRendererSubType");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v111);
      v97 = *v96;
      *v96 = 6;
      v111[0] = v97;
      v98 = (uint64_t *)*((_QWORD *)v96 + 1);
      *((_QWORD *)v96 + 1) = v91;
      v112 = v98;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v96);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v111);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v112, v97);
      v99 = (uint64_t *)v65[2];
      v109[0] = 6;
      v110 = v99;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v109);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v109);
      v100 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v62, "mData");
      v101 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v100, "data");
      v102 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v101, "ImmersiveRendererDescriptions");
      v103 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v102, v64);
      v104 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v103, "mRendererVersion");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v109);
      v105 = *v104;
      *v104 = 6;
      v109[0] = v105;
      v106 = (uint64_t *)*((_QWORD *)v104 + 1);
      *((_QWORD *)v104 + 1) = v99;
      v110 = v106;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v104);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v109);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v110, v105);
      ++v64;
      v4 = v66;
      v65 += 5;
    }
    while (v64 < v66[4]);
  }
  if (__p)
    operator delete(__p);
  APAC::Metadata::RendererMetadataConfig::~RendererMetadataConfig((APAC::Metadata::RendererMetadataConfig *)&v140);
}

void sub_18F04E728(_Unwind_Exception *a1)
{
  uint64_t **v1;
  APAC::Metadata::RendererMetadataConfig *v2;

  APAC::Metadata::RendererMetadataConfig::~RendererMetadataConfig(v2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v1);
  _Unwind_Resume(a1);
}

void APAC::Metadata::RendererMetadataConfig::~RendererMetadataConfig(APAC::Metadata::RendererMetadataConfig *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v2 = (_QWORD *)*((_QWORD *)this + 600);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 601);
    v4 = (void *)*((_QWORD *)this + 600);
    if (v3 != v2)
    {
      do
      {
        v3 -= 156;
        std::__destroy_at[abi:ne180100]<APAC::Metadata::RendererData,0>(v3);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 600);
    }
    *((_QWORD *)this + 601) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 597);
  if (v5)
  {
    v6 = *((_QWORD *)this + 598);
    v7 = (void *)*((_QWORD *)this + 597);
    if (v6 != v5)
    {
      do
      {
        v8 = *(void **)(v6 - 24);
        if (v8)
        {
          *(_QWORD *)(v6 - 16) = v8;
          operator delete(v8);
        }
        v6 -= 48;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 597);
    }
    *((_QWORD *)this + 598) = v5;
    operator delete(v7);
  }
  v9 = (void *)*((_QWORD *)this + 594);
  if (v9)
  {
    *((_QWORD *)this + 595) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 579);
  if (v10)
  {
    *((_QWORD *)this + 580) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 576);
  if (v11)
  {
    *((_QWORD *)this + 577) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 573);
  if (v12)
  {
    *((_QWORD *)this + 574) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 570);
  if (v13)
  {
    *((_QWORD *)this + 571) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 567);
  if (v14)
  {
    *((_QWORD *)this + 568) = v14;
    operator delete(v14);
  }
}

void std::__destroy_at[abi:ne180100]<APAC::Metadata::RendererData,0>(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[152];
  if (v2)
  {
    a1[153] = v2;
    operator delete(v2);
  }
  APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern((APAC::Metadata::RendererData::RadiationPattern *)(a1 + 99));
}

void APAC::ImmersiveRendererData_V2JSONStr(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _BYTE v5[8];
  uint64_t *v6;

  APAC::ImmersiveRendererData_V2JSON(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(a3, (uint64_t)v5, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_18F04E9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

uint64_t GetMagicCookieSizeFromISOSampleEntry(uint64_t a1, unsigned int a2, int *a3)
{
  unsigned int v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;

  v3 = *(_DWORD *)(a1 + 4);
  if (v3 == 1936552548)
  {
    if (a2 < 0x2C)
      return 2003329396;
    v3 = *(_DWORD *)(a1 + 40);
  }
  v5 = bswap32(v3);
  if (v5 <= 1702061170)
  {
    if (v5 <= 1684103986)
    {
      if (v5 != 1633889587)
      {
        v9 = a2 - 72;
        if (a2 - 96 >= 0xFFFFFFC4)
          v10 = 0;
        else
          v10 = 48;
        if (v9 >= 0xFFFFFFDC)
          v11 = 2003329396;
        else
          v11 = 0;
        if (v9 >= 0x18)
          v12 = v10;
        else
          v12 = 24;
        if (v5 == 1634492771)
          result = v11;
        else
          result = 0;
        if (v5 == 1634492771)
          v6 = v12;
        else
          v6 = 0;
        goto LABEL_46;
      }
    }
    else if (v5 != 1684103987)
    {
      if (v5 != 1684366131)
      {
        result = 0;
        v6 = 0;
        if (v5 != 1700998451)
          goto LABEL_46;
      }
      goto LABEL_14;
    }
    v13 = a2 - 36;
    v14 = a2 - 36 > 0xB;
LABEL_40:
    if (v14)
      result = 561213539;
    else
      result = 0;
    if (v14)
      v6 = 0;
    else
      v6 = v13;
    goto LABEL_46;
  }
  if (v5 > 1836069984)
  {
    result = 0;
    if (v5 == 1935767394 || v5 == 1935764850)
    {
      v6 = 47;
      goto LABEL_46;
    }
    v6 = 0;
    v7 = 1836069985;
    goto LABEL_38;
  }
  if (v5 == 1702061171)
  {
LABEL_39:
    v13 = a2 - 48;
    v14 = a2 - 48 > 0x1000;
    goto LABEL_40;
  }
  if (v5 == 1716281667)
  {
LABEL_14:
    result = 0;
    v6 = a2 - 36;
    goto LABEL_46;
  }
  result = 0;
  v6 = 0;
  v7 = 1832149349;
LABEL_38:
  if (v5 == v7)
    goto LABEL_39;
LABEL_46:
  *a3 = v6;
  return result;
}

uint64_t GetMagicCookieFromISOSampleEntry(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  unsigned int v10;
  signed int v11;
  int v12;
  const void *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  char v18;
  uint64_t v19;
  size_t __n[2];

  v4 = 561211770;
  if (a3)
  {
    LODWORD(__n[0]) = 0;
    if (GetMagicCookieSizeFromISOSampleEntry(a1, a2, (int *)__n))
      return 2003329396;
    v9 = __n[0];
    if (*a3 < LODWORD(__n[0]))
      return v4;
    v10 = *(_DWORD *)(a1 + 4);
    if (v10 == 1936552548)
    {
      v4 = 2003329396;
      if (a2 < 0x2C)
        return v4;
      v10 = *(_DWORD *)(a1 + 40);
    }
    v11 = bswap32(v10);
    v4 = 1718449215;
    if (v11 > 1702061170)
    {
      if (v11 > 1836069984)
      {
        if (v11 == 1935767394 || v11 == 1935764850)
        {
          *(_QWORD *)a4 = 0x616D72660C000000;
          *(_DWORD *)(a4 + 8) = bswap32(v11);
          *(_QWORD *)(a4 + 12) = 0x61646E650A000000;
          *(_WORD *)(a4 + 20) = 0;
          v18 = *(_BYTE *)(a1 + 52);
          v19 = *(_QWORD *)(a1 + 44);
          *(_DWORD *)(a4 + 22) = *(_DWORD *)(a1 + 36);
          *(_DWORD *)(a4 + 26) = 1919770980;
          *(_QWORD *)(a4 + 30) = v19;
          *(_BYTE *)(a4 + 38) = v18;
          *(_QWORD *)(a4 + 39) = 0x8000000;
          goto LABEL_30;
        }
        v12 = 1836069985;
        goto LABEL_21;
      }
      if (v11 == 1702061171)
      {
LABEL_22:
        v13 = (const void *)(a1 + 48);
LABEL_29:
        memcpy((void *)a4, v13, LODWORD(__n[0]));
        goto LABEL_30;
      }
      if (v11 != 1716281667)
      {
        v12 = 1832149349;
LABEL_21:
        if (v11 != v12)
          return v4;
        goto LABEL_22;
      }
      goto LABEL_28;
    }
    if (v11 <= 1684103986)
    {
      if (v11 != 1633889587)
      {
        if (v11 != 1634492771)
          return v4;
        v14 = *(_DWORD *)a1;
        v15 = *(_OWORD *)(a1 + 48);
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 64);
        *(_OWORD *)a4 = v15;
        if (v14 == 1610612736 && *(_DWORD *)(a1 + 76) == 1851877475)
        {
          v16 = *(_OWORD *)(a1 + 72);
          *(_QWORD *)(a4 + 40) = *(_QWORD *)(a1 + 88);
          *(_OWORD *)(a4 + 24) = v16;
        }
LABEL_30:
        v4 = 0;
        *a3 = v9;
        return v4;
      }
      goto LABEL_28;
    }
    if (v11 == 1684103987 || v11 == 1684366131 || v11 == 1700998451)
    {
LABEL_28:
      v13 = (const void *)(a1 + 36);
      goto LABEL_29;
    }
  }
  return v4;
}

void DSPGraph::IsoGroup::addBefore(DSPGraph::IsoGroup *this, DSPGraph::Box *a2, DSPGraph::Box *a3)
{
  DSPGraph::Box **v6;
  DSPGraph::Box **v7;
  DSPGraph::Box **v8;
  unint64_t v9;
  DSPGraph::Box **v10;
  DSPGraph::Box **v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  DSPGraph::Box *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  DSPGraph::Box **v29;
  DSPGraph::Box **v30;
  uint64_t v31;
  DSPGraph::Box **v32;
  int64_t v33;
  void *v34;
  DSPGraph::Box *v35;

  v35 = a2;
  std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box * const&>((uint64_t)this + 16, (unint64_t)a2, (uint64_t)a2);
  *((_QWORD *)a2 + 2) = this;
  v7 = (DSPGraph::Box **)*((_QWORD *)this + 28);
  v6 = (DSPGraph::Box **)*((_QWORD *)this + 29);
  v8 = v7;
  if (v7 != v6)
  {
    while (*v8 != a3)
    {
      if (++v8 == v6)
      {
        v8 = (DSPGraph::Box **)*((_QWORD *)this + 29);
        break;
      }
    }
  }
  v9 = *((_QWORD *)this + 30);
  if ((unint64_t)v6 >= v9)
  {
    v14 = v6 - v7 + 1;
    if (v14 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = (char *)v8 - (char *)v7;
    v16 = v8 - v7;
    v17 = v9 - (_QWORD)v7;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    if (v18)
    {
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v18);
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    v22 = &v20[8 * v16];
    v23 = &v20[8 * v19];
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (v8 == v7)
          v25 = 1;
        else
          v25 = v15 >> 2;
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v25);
        v22 = &v26[8 * (v25 >> 2)];
        v23 = &v26[8 * v27];
        if (v20)
          operator delete(v20);
      }
      else
      {
        v24 = v16 + 2;
        if (v16 >= -1)
          v24 = v16 + 1;
        v22 -= 8 * (v24 >> 1);
      }
    }
    *(_QWORD *)v22 = a2;
    v28 = v22 + 8;
    v29 = (DSPGraph::Box **)*((_QWORD *)this + 28);
    if (v29 != v8)
    {
      v30 = v8;
      do
      {
        v31 = (uint64_t)*--v30;
        *((_QWORD *)v22 - 1) = v31;
        v22 -= 8;
      }
      while (v30 != v29);
    }
    v32 = (DSPGraph::Box **)*((_QWORD *)this + 29);
    v33 = (char *)v32 - (char *)v8;
    if (v32 != v8)
      memmove(v28, v8, (char *)v32 - (char *)v8);
    v34 = (void *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = v22;
    *((_QWORD *)this + 29) = &v28[v33];
    *((_QWORD *)this + 30) = v23;
    if (v34)
      operator delete(v34);
  }
  else if (v8 == v6)
  {
    *v6 = a2;
    *((_QWORD *)this + 29) = v6 + 1;
  }
  else
  {
    v10 = v8 + 1;
    v11 = v6 - 1;
    v12 = (_QWORD *)*((_QWORD *)this + 29);
    while (v11 < v6)
    {
      v13 = (uint64_t)*v11++;
      *v12++ = v13;
    }
    *((_QWORD *)this + 29) = v12;
    if (v6 != v10)
      memmove(&v6[-(v6 - v10)], v8, (char *)v6 - (char *)v10);
    v21 = v35;
    if (v8 > &v35)
      v21 = a2;
    *v8 = v21;
  }
}

void sub_18F04EFF8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_8634()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t DSPGraph::IsoGroup::uninitializeBoxes(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 224);
  v2 = *(uint64_t **)(this + 232);
  while (v1 != v2)
  {
    v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 584))(v3);
  }
  return this;
}

uint64_t DSPGraph::IsoGroup::initializePropertyTaps(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 224);
  v2 = *(uint64_t **)(this + 232);
  while (v1 != v2)
  {
    v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 608))(v3);
  }
  return this;
}

uint64_t DSPGraph::IsoGroup::uninitializePropertyTaps(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 224);
  v2 = *(uint64_t **)(this + 232);
  while (v1 != v2)
  {
    v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 616))(v3);
  }
  return this;
}

_QWORD *DSPGraph::IsoGroup::reset(_QWORD *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  this[32] = 0;
  this[36] = 0;
  v1 = (uint64_t *)this[28];
  v2 = (uint64_t *)this[29];
  while (v1 != v2)
  {
    v3 = *v1++;
    this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 632))(v3);
  }
  return this;
}

void DSPGraph::IsoGroup::sortUpstream(uint64_t a1, char **a2)
{
  _QWORD *i;

  for (i = *(_QWORD **)(a1 + 112); i; i = (_QWORD *)*i)
    DSPGraph::IsoGroup::topologicalSort(*(_QWORD *)(i[2] + 848), a2);
}

void DSPGraph::IsoGroup::addInput(DSPGraph::IsoGroup *this, DSPGraph::FCBox *a2)
{
  std::__hash_table<DSPGraph::FCBox *,std::hash<DSPGraph::FCBox *>,std::equal_to<DSPGraph::FCBox *>,std::allocator<DSPGraph::FCBox *>>::__emplace_unique_key_args<DSPGraph::FCBox *,DSPGraph::FCBox * const&>((float *)this + 24, (unint64_t)a2, (uint64_t)a2);
  *((_QWORD *)a2 + 107) = this;
}

void std::__hash_table<DSPGraph::FCBox *,std::hash<DSPGraph::FCBox *>,std::equal_to<DSPGraph::FCBox *>,std::allocator<DSPGraph::FCBox *>>::__emplace_unique_key_args<DSPGraph::FCBox *,DSPGraph::FCBox * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *v14 = *v33;
LABEL_72:
    *v33 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    v34 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_18F04F590(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void DSPGraph::IsoGroup::addOutput(DSPGraph::IsoGroup *this, DSPGraph::FCBox *a2)
{
  std::__hash_table<DSPGraph::FCBox *,std::hash<DSPGraph::FCBox *>,std::equal_to<DSPGraph::FCBox *>,std::allocator<DSPGraph::FCBox *>>::__emplace_unique_key_args<DSPGraph::FCBox *,DSPGraph::FCBox * const&>((float *)this + 34, (unint64_t)a2, (uint64_t)a2);
  *((_QWORD *)a2 + 106) = this;
}

UInt32 AudioComponentCount(const AudioComponentDescription *inDesc)
{
  const AudioComponentDescription *v1;
  AudioComponentMgr_Base *v2;
  UInt32 v3;
  std::recursive_mutex *v5[2];
  AudioComponentDescription v6;

  if (!inDesc)
    return 0;
  v6 = *inDesc;
  GlobalComponentPluginMgr((uint64_t *)v5);
  v2 = *(AudioComponentMgr_Base **)v5[1]->__m_.__opaque;
  if (v2)
  {
    v3 = 0;
    do
    {
      v3 += AudioComponentMgr_Base::match(v2, &v6, v1);
      v2 = (AudioComponentMgr_Base *)*((_QWORD *)v2 + 3);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  if (v5[0])
    std::recursive_mutex::unlock(v5[0]);
  return v3;
}

void sub_18F04F658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9)
    std::recursive_mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void AudioComponentInstantiate(AudioComponent inComponent, AudioComponentInstantiationOptions inOptions, void *inCompletionHandler)
{
  instantiate((uint64_t (***)(_QWORD))inComponent, *(uint64_t *)&inOptions, 1, (uint64_t)inCompletionHandler);
}

uint64_t AudioUnitConnectToInstance(uint64_t a1, CFTypeRef cf, void *a3, uint64_t a4)
{
  xpc_object_t v5;
  xpc_object_t v9;
  xpc_object_t v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  void *v16;
  __int128 v17;
  CFTypeRef cfa;

  if (!a1)
    return 4294956418;
  v5 = a3;
  if (!cf)
  {
    cfa = 0;
    if (a3)
      goto LABEL_4;
LABEL_7:
    v5 = xpc_null_create();
    if (!v5)
      goto LABEL_9;
    goto LABEL_8;
  }
  CFRetain(cf);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  if (!v5)
    goto LABEL_7;
LABEL_4:
  xpc_retain(v5);
LABEL_8:
  if (object_getClass(v5) == (Class)MEMORY[0x1E0C81308])
  {
    xpc_retain(v5);
    v9 = v5;
    goto LABEL_11;
  }
LABEL_9:
  v9 = xpc_null_create();
LABEL_11:
  xpc_release(v5);
  v16 = v9;
  v10 = xpc_null_create();
  v11 = cfa;
  v15 = cfa;
  cfa = 0;
  create_shared_APComponent_RemoteV2WithExistingConnection(&v17, a1, &v16, &v15);
  if (v11)
    CFRelease(v11);
  xpc_release(v9);
  v16 = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 88))(v17, 2, 1, a4);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  xpc_release(v10);
  if (cfa)
    CFRelease(cfa);
  return 0;
}

void sub_18F04F7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  xpc_release(v4);
  applesauce::CF::StringRef::~StringRef((const void **)va1);
  _Unwind_Resume(a1);
}

OSStatus AudioComponentCopyName(AudioComponent inComponent, CFStringRef *outName)
{
  return Impl_AudioGetComponentInfo(inComponent, 0, outName);
}

OSStatus AudioComponentGetVersion(AudioComponent inComponent, UInt32 *outVersion)
{
  OSStatus result;
  uint64_t (***v5)(_QWORD);
  uint64_t v6;

  result = -50;
  if (inComponent && outVersion)
  {
    v5 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(AudioComponent))inComponent)(inComponent);
    if (v5)
    {
      v6 = (**v5)(v5);
      result = 0;
      *outVersion = *(_DWORD *)(v6 + 56);
    }
    else
    {
      return -3000;
    }
  }
  return result;
}

uint64_t AudioComponentCopyTagsInfo(uint64_t (***a1)(_QWORD), _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  const void *v6;

  result = 4294967246;
  if (a1 && a2)
  {
    *a2 = 0;
    v5 = (**a1)(a1);
    if (v5)
    {
      v6 = *(const void **)(v5 + 120);
      if (v6)
      {
        CFRetain(*(CFTypeRef *)(v5 + 120));
        if (CFArrayGetCount((CFArrayRef)v6))
        {
          *a2 = v6;
          CFRetain(v6);
        }
        CFRelease(v6);
      }
      return 0;
    }
    else
    {
      return 4294964296;
    }
  }
  return result;
}

void sub_18F04F954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

OSStatus AudioComponentValidate(AudioComponent inComponent, CFDictionaryRef inValidationParameters, AudioComponentValidationResult *outValidationResult)
{
  OSStatus result;
  uint64_t v7;
  uint64_t v8;
  uint64_t (***v9)(_QWORD);
  AudioComponentValidationResult v10;
  _QWORD v11[7];
  AudioComponentDescription v12;
  AudioComponentDescription v13;
  BOOL v14;
  CFDictionaryRef v15;
  __int16 v16;
  BOOL v17;

  result = -50;
  if (inComponent && outValidationResult)
  {
    *outValidationResult = kAudioComponentValidationResult_Unknown;
    v7 = (**(uint64_t (***)(AudioComponent))inComponent)(inComponent);
    if (!v7)
      return -3000;
    v8 = v7;
    v17 = 0;
    if (!inValidationParameters)
      goto LABEL_20;
    v15 = inValidationParameters;
    v16 = 0;
    v14 = 0;
    CACFDictionary::GetBool((CACFDictionary *)&v15, CFSTR("clearInfoHelperCache"), &v14);
    if (v14)
    {
      memset(&v13, 0, sizeof(v13));
      clearConfigInfoCache(&v13, 0);
      *(_BYTE *)(v8 + 128) = 0;
      *(_DWORD *)(v8 + 132) = 1;
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v15);
      return 0;
    }
    if ((CACFDictionary::GetBool((CACFDictionary *)&v15, CFSTR("ForceValidation"), &v17) & 1) == 0)
      v17 = 0;
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v15);
    if (!v17)
    {
LABEL_20:
      if (*(_BYTE *)(v8 + 128))
      {
        *outValidationResult = *(AudioComponentValidationResult *)(v8 + 132);
        return 0;
      }
    }
    v9 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(AudioComponent))inComponent)(inComponent);
    if (v9)
      v13 = *(AudioComponentDescription *)((**v9)(v9) + 36);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = __AudioComponentValidate_block_invoke;
    v11[3] = &__block_descriptor_tmp_10;
    v12 = v13;
    v11[4] = v8;
    v11[5] = inValidationParameters;
    v11[6] = outValidationResult;
    Synchronously((uint64_t)v11);
    v10 = *outValidationResult;
    if (*outValidationResult != kAudioComponentValidationResult_TimedOut)
    {
      *(_BYTE *)(v8 + 128) = 1;
      *(_DWORD *)(v8 + 132) = v10;
    }
    return 0;
  }
  return result;
}

void sub_18F04FB0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CACFDictionary::~CACFDictionary((CACFDictionary *)(v1 - 56));
  _Unwind_Resume(a1);
}

OSStatus AudioComponentValidateWithResults(AudioComponent inComponent, CFDictionaryRef inValidationParameters, void *inCompletionHandler)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (***v9)(_QWORD);
  uint64_t v10;
  _QWORD v11[6];
  AudioComponentDescription v12;
  AudioComponentDescription v13;
  BOOL v14;
  CFDictionaryRef v15;
  __int16 v16;

  if (!inComponent)
    return -50;
  v6 = (**(uint64_t (***)(AudioComponent))inComponent)(inComponent);
  if (!v6)
    return -3000;
  v7 = v6;
  if (!inValidationParameters)
    goto LABEL_9;
  v15 = inValidationParameters;
  v16 = 0;
  v14 = 0;
  CACFDictionary::GetBool((CACFDictionary *)&v15, CFSTR("clearInfoHelperCache"), &v14);
  if (!v14)
  {
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v15);
LABEL_9:
    memset(&v13, 0, sizeof(v13));
    v9 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(AudioComponent))inComponent)(inComponent);
    if (v9)
      v13 = *(AudioComponentDescription *)((**v9)(v9) + 36);
    v12 = v13;
    v10 = *(unsigned int *)(v7 + 56);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = __AudioComponentValidateWithResults_block_invoke;
    v11[3] = &unk_1E2921C80;
    v11[4] = inCompletionHandler;
    v11[5] = v7;
    validateComponent((__int128 *)&v12, v10, inValidationParameters, v11);
    return 0;
  }
  memset(&v13, 0, sizeof(v13));
  clearConfigInfoCache(&v13, 0);
  *(_BYTE *)(v7 + 128) = 0;
  *(_DWORD *)(v7 + 132) = 1;
  (*((void (**)(void *, _QWORD, _QWORD))inCompletionHandler + 2))(inCompletionHandler, 0, 0);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v15);
  return 0;
}

void sub_18F04FD0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CACFDictionary::~CACFDictionary((CACFDictionary *)(v1 - 48));
  _Unwind_Resume(a1);
}

OSStatus AudioComponentCopyConfigurationInfo(AudioComponent inComponent, CFDictionaryRef *outConfigurationInfo)
{
  uint64_t v3;
  _QWORD v5[6];

  if (!outConfigurationInfo)
    return -50;
  *outConfigurationInfo = 0;
  if (!inComponent)
    return -3000;
  v3 = (**(uint64_t (***)(AudioComponent))inComponent)(inComponent);
  if (!v3)
    return -3000;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __AudioComponentCopyConfigurationInfo_block_invoke;
  v5[3] = &__block_descriptor_tmp_14;
  v5[4] = v3;
  v5[5] = outConfigurationInfo;
  Synchronously((uint64_t)v5);
  if (*outConfigurationInfo)
    return 0;
  else
    return 1668445032;
}

void IPCAURegistrar::~IPCAURegistrar(IPCAURegistrar *this)
{
  CADeprecated::XMachPortDeathListener *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = &off_1E2904590;
  *((_QWORD *)this + 10) = &unk_1E29045D8;
  v2 = (IPCAURegistrar *)((char *)this + 80);
  v3 = (void *)*((_QWORD *)this + 37);
  if (v3)
  {
    *((_QWORD *)this + 38) = v3;
    operator delete(v3);
  }
  OwnedPtrVector<PublishedAU_Registrar *>::~OwnedPtrVector((uint64_t)this + 256);
  v4 = (void *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 30) = v4;
    operator delete(v4);
  }
  v5 = MEMORY[0x1E0DDF098];
  *(_QWORD *)this = MEMORY[0x1E0DDF098] + 16;
  *((_QWORD *)this + 10) = v5 + 88;
  v6 = (void *)*((_QWORD *)this + 25);
  if (v6)
  {
    *((_QWORD *)this + 26) = v6;
    operator delete(v6);
  }
  CADeprecated::CAMutex::~CAMutex((IPCAURegistrar *)((char *)this + 112));
  CADeprecated::XMachPortDeathListener::~XMachPortDeathListener(v2);
  CADeprecated::XBasicMIGServer::~XBasicMIGServer(this);
}

{
  CADeprecated::XMachPortDeathListener *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = &off_1E2904590;
  *((_QWORD *)this + 10) = &unk_1E29045D8;
  v2 = (IPCAURegistrar *)((char *)this + 80);
  v3 = (void *)*((_QWORD *)this + 37);
  if (v3)
  {
    *((_QWORD *)this + 38) = v3;
    operator delete(v3);
  }
  OwnedPtrVector<PublishedAU_Registrar *>::~OwnedPtrVector((uint64_t)this + 256);
  v4 = (void *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 30) = v4;
    operator delete(v4);
  }
  v5 = MEMORY[0x1E0DDF098];
  *(_QWORD *)this = MEMORY[0x1E0DDF098] + 16;
  *((_QWORD *)this + 10) = v5 + 88;
  v6 = (void *)*((_QWORD *)this + 25);
  if (v6)
  {
    *((_QWORD *)this + 26) = v6;
    operator delete(v6);
  }
  CADeprecated::CAMutex::~CAMutex((IPCAURegistrar *)((char *)this + 112));
  CADeprecated::XMachPortDeathListener::~XMachPortDeathListener(v2);
  CADeprecated::XBasicMIGServer::~XBasicMIGServer(this);
  JUMPOUT(0x193FFE460);
}

void IPCAURegistrar::ClientDied(IPCAURegistrar *this, CADeprecated::XMachServer::Client *a2)
{
  unint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  PlatformUtilities *v9;
  NSObject *v10;
  void **v11;
  char *v12;
  unint64_t v13;
  _DWORD *v14;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  int64_t v27;
  void *__p;
  char v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  void **v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 2);
  if (*(CADeprecated::XMachServer::Client **)(v4 + 176) == a2)
  {
    *(_QWORD *)(v4 + 176) = 0;
    if (kInterAppAudioScope)
    {
      v5 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        goto LABEL_23;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      goto LABEL_23;
    *(_DWORD *)buf = 136315394;
    v31 = "IPCAURegistrar.mm";
    v32 = 1024;
    v33 = 1106;
    v6 = "%25s:%-5d server port";
    goto LABEL_22;
  }
  if (*(CADeprecated::XMachServer::Client **)(v4 + 184) != a2)
  {
    if (*(CADeprecated::XMachServer::Client **)(v4 + 192) != a2)
      goto LABEL_23;
    *(_QWORD *)(v4 + 192) = 0;
    if (kInterAppAudioScope)
    {
      v5 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        goto LABEL_23;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      goto LABEL_23;
    *(_DWORD *)buf = 136315394;
    v31 = "IPCAURegistrar.mm";
    v32 = 1024;
    v33 = 1112;
    v6 = "%25s:%-5d extension port";
LABEL_22:
    _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_DEBUG, v6, buf, 0x12u);
    goto LABEL_23;
  }
  *(_QWORD *)(v4 + 184) = 0;
  if (!kInterAppAudioScope)
  {
    v5 = MEMORY[0x1E0C81028];
    goto LABEL_17;
  }
  v5 = *(NSObject **)kInterAppAudioScope;
  if (*(_QWORD *)kInterAppAudioScope)
  {
LABEL_17:
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      goto LABEL_23;
    *(_DWORD *)buf = 136315394;
    v31 = "IPCAURegistrar.mm";
    v32 = 1024;
    v33 = 1109;
    v6 = "%25s:%-5d client port";
    goto LABEL_22;
  }
LABEL_23:
  (*(void (**)(CADeprecated::XMachServer::Client *))(*(_QWORD *)a2 + 8))(a2);
  v7 = *(_QWORD *)(v4 + 176);
  if (v7 && *(_DWORD *)(v7 + 12))
    return;
  v8 = *(_QWORD *)(v4 + 184);
  if (v8)
  {
    if (*(_DWORD *)(v8 + 12))
      return;
  }
  if (*(_QWORD *)(v4 + 192))
    return;
  v9 = (PlatformUtilities *)*(unsigned int *)(v4 + 12);
  if (!kInterAppAudioScope)
  {
    v10 = MEMORY[0x1E0C81028];
    goto LABEL_32;
  }
  v10 = *(NSObject **)kInterAppAudioScope;
  if (*(_QWORD *)kInterAppAudioScope)
  {
LABEL_32:
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      PlatformUtilities::processName(v9);
      v11 = v29 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315650;
      v31 = "IPCAURegistrar.mm";
      v32 = 1024;
      v33 = 1123;
      v34 = 2080;
      v35 = v11;
      _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d found process '%s'", buf, 0x1Cu);
      if (v29 < 0)
        operator delete(__p);
    }
  }
  v12 = (char *)*((_QWORD *)this + 38);
  if ((int)(-1431655765 * ((uint64_t)&v12[-*((_QWORD *)this + 37)] >> 3)) >= 1)
  {
    v13 = -1431655765 * ((uint64_t)&v12[-*((_QWORD *)this + 37)] >> 3) + 1;
    do
    {
      v14 = (_DWORD *)(*((_QWORD *)this + 37) + 24 * (v13 - 2));
      if (v14[5] == (_DWORD)v9 || v14[4] == (_DWORD)v9)
      {
        v16 = v12 - (char *)(v14 + 6);
        if (v12 != (char *)(v14 + 6))
          memmove((void *)(*((_QWORD *)this + 37) + 24 * (v13 - 2)), v14 + 6, v12 - (char *)(v14 + 6));
        v12 = (char *)v14 + v16;
        *((_QWORD *)this + 38) = (char *)v14 + v16;
      }
      --v13;
    }
    while (v13 > 1);
  }
  v17 = *((_QWORD *)this + 34) - *((_QWORD *)this + 33);
  if ((int)(v17 >> 3) >= 1)
  {
    v18 = (v17 >> 3);
    while (1)
    {
      v19 = *(_QWORD *)(*((_QWORD *)this + 33) + 8 * (v18 - 1));
      if (*(_QWORD *)(v19 + 64) == v4)
        break;
LABEL_52:
      if (v18-- <= 1)
        goto LABEL_65;
    }
    IPCAURegistrar::UnpublishAU(this, (PlatformUtilities *)*(unsigned int *)(v19 + 8), (const AudioComponentDescription *)(v19 + 24));
    v21 = (uint64_t **)*((_QWORD *)this + 29);
    v22 = (uint64_t **)*((_QWORD *)this + 30);
    while (1)
    {
      if (v21 == v22)
        goto LABEL_52;
      v23 = *v21;
      if (*v21 != (uint64_t *)v4)
        break;
LABEL_64:
      ++v21;
    }
    if (std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::find<RegistrarClientProcess *>(v23 + 10, v4))
    {
      std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>(v23 + 10, v4);
      v24 = v23 + 5;
      if (!std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::find<RegistrarClientProcess *>(v23 + 5, v4))goto LABEL_63;
    }
    else
    {
      v24 = v23 + 5;
      if (!std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::find<RegistrarClientProcess *>(v23 + 5, v4))goto LABEL_64;
    }
    std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>(v24, v4);
LABEL_63:
    RegistrarClientProcess::CheckProcessAssertion((RegistrarClientProcess *)v23);
    goto LABEL_64;
  }
LABEL_65:
  v26 = (char *)*((_QWORD *)this + 29);
  v25 = (char *)*((_QWORD *)this + 30);
  while (v26 != v25)
  {
    if (*(_QWORD *)v26 == v4)
    {
      v27 = v25 - (v26 + 8);
      if (v25 != v26 + 8)
        memmove(v26, v26 + 8, v25 - (v26 + 8));
      *((_QWORD *)this + 30) = &v26[v27];
      break;
    }
    v26 += 8;
  }
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t CADeprecated::XMachServer::GetDebugName(CADeprecated::XMachServer *this)
{
  return *((_QWORD *)this + 1);
}

void `non-virtual thunk to'IPCAURegistrar::~IPCAURegistrar(IPCAURegistrar *this)
{
  CADeprecated::XBasicMIGServer *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  *((_QWORD *)this - 10) = &off_1E2904590;
  v2 = (IPCAURegistrar *)((char *)this - 80);
  *(_QWORD *)this = &unk_1E29045D8;
  v3 = (void *)*((_QWORD *)this + 27);
  if (v3)
  {
    *((_QWORD *)this + 28) = v3;
    operator delete(v3);
  }
  OwnedPtrVector<PublishedAU_Registrar *>::~OwnedPtrVector((uint64_t)this + 176);
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = MEMORY[0x1E0DDF098];
  *((_QWORD *)this - 10) = MEMORY[0x1E0DDF098] + 16;
  *(_QWORD *)this = v5 + 88;
  v6 = (void *)*((_QWORD *)this + 15);
  if (v6)
  {
    *((_QWORD *)this + 16) = v6;
    operator delete(v6);
  }
  CADeprecated::CAMutex::~CAMutex((IPCAURegistrar *)((char *)this + 32));
  CADeprecated::XMachPortDeathListener::~XMachPortDeathListener(this);
  CADeprecated::XBasicMIGServer::~XBasicMIGServer(v2);
}

{
  IPCAURegistrar::~IPCAURegistrar((IPCAURegistrar *)((char *)this - 80));
}

uint64_t `non-virtual thunk to'CADeprecated::XMachServer::GetDebugName(CADeprecated::XMachServer *this)
{
  return *((_QWORD *)this - 9);
}

uint64_t OwnedPtrVector<PublishedAU_Registrar *>::~OwnedPtrVector(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E29049D0;
  OwnedPtrVector<PublishedAU_Registrar *>::erase((_QWORD *)a1, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *OwnedPtrVector<PublishedAU_Registrar *>::erase(_QWORD *result, uint64_t *__dst, uint64_t *__src)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  int64_t v8;

  if (__dst != __src)
  {
    v5 = result;
    v6 = __dst;
    do
    {
      result = (_QWORD *)*v6;
      if (*v6)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      ++v6;
    }
    while (v6 != __src);
    v7 = (uint64_t *)v5[2];
    v8 = (char *)v7 - (char *)__src;
    if (v7 != __src)
      result = memmove(__dst, __src, (char *)v7 - (char *)__src);
    v5[2] = (char *)__dst + v8;
  }
  return result;
}

void OwnedPtrVector<PublishedAU_Registrar *>::~OwnedPtrVector(uint64_t a1)
{
  OwnedPtrVector<PublishedAU_Registrar *>::~OwnedPtrVector(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t IPCAURegistrar::UnpublishAU(IPCAURegistrar *this, PlatformUtilities *a2, const AudioComponentDescription *a3)
{
  NSObject *v6;
  int v7;
  void **v8;
  void **p_p;
  uint64_t *i;
  uint64_t v11;
  NSObject *v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  void *__p;
  char v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  void **v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!kInterAppAudioScope)
  {
    v6 = MEMORY[0x1E0C81028];
LABEL_5:
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      PlatformUtilities::processName(a2);
      v7 = v20;
      v8 = (void **)__p;
      CAFormatter::CAFormatter((CAFormatter *)&v18, a3);
      p_p = &__p;
      if (v7 < 0)
        p_p = v8;
      *(_DWORD *)buf = 136315906;
      v22 = "IPCAURegistrar.mm";
      v23 = 1024;
      v24 = 761;
      v25 = 2080;
      v26 = p_p;
      v27 = 2080;
      v28 = v18;
      _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d process '%s', %s", buf, 0x26u);
      if (v18)
        free(v18);
      if (v20 < 0)
        operator delete(__p);
    }
    goto LABEL_12;
  }
  v6 = *(NSObject **)kInterAppAudioScope;
  if (*(_QWORD *)kInterAppAudioScope)
    goto LABEL_5;
LABEL_12:
  for (i = (uint64_t *)*((_QWORD *)this + 33); ; ++i)
  {
    if (i == *((uint64_t **)this + 34))
      return 4294967246;
    v11 = *i;
    if (*(_QWORD *)&a3->componentType == *(_QWORD *)(*i + 24)
      && a3->componentManufacturer == (unint64_t)*(unsigned int *)(*i + 32))
    {
      break;
    }
  }
  if (*(_DWORD *)(v11 + 8) != (_DWORD)a2)
  {
    if (kInterAppAudioScope)
    {
      v14 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        return 4294967246;
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v22 = "IPCAURegistrar.mm";
      v23 = 1024;
      v24 = 767;
      _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d error: wrong pid", buf, 0x12u);
    }
    return 4294967246;
  }
  if (!*(_BYTE *)(v11 + 60))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v15 = (uint64_t *)*((_QWORD *)this + 34);
    v16 = (char *)v15 - (char *)(i + 1);
    if (v15 != i + 1)
      memmove(i, i + 1, (char *)v15 - (char *)(i + 1));
    *((_QWORD *)this + 34) = (char *)i + v16;
    IPCAURegistrar::NotifySubscribers(this);
    return 0;
  }
  *(_DWORD *)(v11 + 8) = 0;
  *(_BYTE *)(v11 + 61) = 1;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 80) = *(_QWORD *)(v11 + 72);
  if (kInterAppAudioScope)
  {
    v13 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      return 0;
  }
  else
  {
    v13 = MEMORY[0x1E0C81028];
  }
  result = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    *(_DWORD *)buf = 136315394;
    v22 = "IPCAURegistrar.mm";
    v23 = 1024;
    v24 = 778;
    _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d checked out registration", buf, 0x12u);
    return 0;
  }
  return result;
}

void sub_18F0508A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::find<RegistrarClientProcess *>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
    v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
    v6 = (uint8x8_t)vcnt_s8(v2);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
      if (v5 >= *(_QWORD *)&v2)
        v7 = v5 % *(_QWORD *)&v2;
    }
    else
    {
      v7 = v5 & (*(_QWORD *)&v2 - 1);
    }
    v8 = *a1;
    v9 = *(uint64_t ***)(*a1 + 8 * v7);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        v11 = *(_QWORD *)&v2 - 1;
        do
        {
          v12 = v10[1];
          if (v12 == v5)
          {
            if (v10[2] == a2)
            {
              if (v6.u32[0] > 1uLL)
              {
                if (v5 >= *(_QWORD *)&v2)
                  v5 %= *(_QWORD *)&v2;
              }
              else
              {
                v5 &= v11;
              }
              v13 = *(uint64_t **)(v8 + 8 * v5);
              do
              {
                v14 = v13;
                v13 = (uint64_t *)*v13;
              }
              while (v13 != v10);
              if (v14 == a1 + 2)
                goto LABEL_36;
              v15 = v14[1];
              if (v6.u32[0] > 1uLL)
              {
                if (v15 >= *(_QWORD *)&v2)
                  v15 %= *(_QWORD *)&v2;
              }
              else
              {
                v15 &= v11;
              }
              if (v15 != v5)
              {
LABEL_36:
                if (!*v10)
                  goto LABEL_37;
                v16 = *(_QWORD *)(*v10 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v11;
                }
                if (v16 != v5)
LABEL_37:
                  *(_QWORD *)(v8 + 8 * v5) = 0;
              }
              v17 = *v10;
              if (*v10)
              {
                v18 = *(_QWORD *)(v17 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v18 >= *(_QWORD *)&v2)
                    v18 %= *(_QWORD *)&v2;
                }
                else
                {
                  v18 &= v11;
                }
                if (v18 != v5)
                {
                  *(_QWORD *)(*a1 + 8 * v18) = v14;
                  v17 = *v10;
                }
              }
              *v14 = v17;
              *v10 = 0;
              --a1[3];
              operator delete(v10);
              return;
            }
          }
          else
          {
            if (v6.u32[0] > 1uLL)
            {
              if (v12 >= *(_QWORD *)&v2)
                v12 %= *(_QWORD *)&v2;
            }
            else
            {
              v12 &= v11;
            }
            if (v12 != v7)
              return;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
}

void RegistrarClientProcess::CheckProcessAssertion(RegistrarClientProcess *this)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  dispatch_time_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  void **v16;
  int v17;
  dispatch_time_t v18;
  NSObject *v19;
  void **v20;
  _QWORD block[4];
  int v22;
  void *__p[2];
  char v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = mach_absolute_time();
  v3 = *((_QWORD *)this + 13) != 0;
  if (*((_QWORD *)this + 8))
  {
    v4 = RegistrarClientProcess::BeingDebugged((RegistrarClientProcess *)*((unsigned int *)this + 3))
       ? 14400000000
       : 1440000000;
    v6 = *((_QWORD *)this + 25);
    v5 = *((_QWORD *)this + 26);
    if (v6 != v5)
    {
      v7 = 0;
      while (1)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 8) + 24)
           + *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v6 + 8) + 96);
        v9 = *(_QWORD *)(v8 + 2168) + v4;
        if (v9 > v2)
        {
          if (v7 <= v9)
            v7 = *(_QWORD *)(v8 + 2168) + v4;
          v3 = 1;
          goto LABEL_19;
        }
        v10 = v8 + 2048;
        if (!*(_BYTE *)(v8 + 2176))
          break;
LABEL_19:
        v6 += 8;
        if (v6 == v5)
          goto LABEL_22;
      }
      if (kInterAppAudioScope)
      {
        v11 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
        {
LABEL_18:
          *(_BYTE *)(v10 + 128) = 1;
          goto LABEL_19;
        }
      }
      else
      {
        v11 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *((_DWORD *)this + 3);
        *(_DWORD *)buf = 136315650;
        v26 = "IPCAURegistrar.mm";
        v27 = 1024;
        v28 = 431;
        v29 = 1024;
        LODWORD(v30) = v12;
        _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d host has failed to render pid %d recently; dropping process assertion",
          buf,
          0x18u);
        v5 = *((_QWORD *)this + 26);
      }
      goto LABEL_18;
    }
  }
  v7 = 0;
LABEL_22:
  v13 = *((_QWORD *)this + 15);
  if (v2 >= v13)
  {
    if (v3)
      goto LABEL_27;
    if (!*((_BYTE *)this + 128))
      return;
    if (kInterAppAudioScope)
    {
      v15 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
      {
LABEL_53:
        RegistrarClientProcess::GetProcessAssertion(this);
        SBSProcessAssertionSetFlags();
        *((_BYTE *)this + 128) = 0;
        XOSTransactor::endTransaction((XOSTransactor *)((char *)this + 144));
        return;
      }
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      PlatformUtilities::processName((PlatformUtilities *)*((unsigned int *)this + 3));
      v20 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v26 = "IPCAURegistrar.mm";
      v27 = 1024;
      v28 = 459;
      v29 = 2080;
      v30 = v20;
      _os_log_impl(&dword_18EE07000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAURegistrar: releasing process assertion for process '%s'", buf, 0x1Cu);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_53;
  }
  if (v7 <= v13)
    v7 = *((_QWORD *)this + 15);
LABEL_27:
  if (*((_BYTE *)this + 128))
    goto LABEL_43;
  if (!kInterAppAudioScope)
  {
    v14 = MEMORY[0x1E0C81028];
    goto LABEL_36;
  }
  v14 = *(NSObject **)kInterAppAudioScope;
  if (*(_QWORD *)kInterAppAudioScope)
  {
LABEL_36:
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      PlatformUtilities::processName((PlatformUtilities *)*((unsigned int *)this + 3));
      v16 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v26 = "IPCAURegistrar.mm";
      v27 = 1024;
      v28 = 442;
      v29 = 2080;
      v30 = v16;
      _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAURegistrar: taking process assertion for process '%s'", buf, 0x1Cu);
      if (v24 < 0)
        operator delete(__p[0]);
    }
  }
  RegistrarClientProcess::GetProcessAssertion(this);
  SBSProcessAssertionSetFlags();
  *((_BYTE *)this + 128) = 1;
  XOSTransactor::beginTransaction((XOSTransactor *)((char *)this + 144));
LABEL_43:
  if (!*((_BYTE *)this + 129))
  {
    if (v7)
    {
      v17 = *((_DWORD *)this + 2);
      *((_BYTE *)this + 129) = 1;
      v18 = dispatch_time(v7, 0);
      v19 = *(NSObject **)(CADeprecated::TSingleton<IPCAURegistrar>::instance() + 224);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ZN22RegistrarClientProcess21CheckProcessAssertionEv_block_invoke;
      block[3] = &__block_descriptor_36_e5_v8__0l;
      v22 = v17;
      dispatch_after(v18, v19, block);
    }
  }
}

uint64_t RegistrarClientProcess::BeingDebugged(RegistrarClientProcess *this)
{
  size_t v2;
  _BYTE v3[32];
  unsigned int v4;
  int v5[2];
  int v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v5 = 0xE00000001;
  v6 = 1;
  v7 = (int)this;
  v2 = 648;
  if (sysctl(v5, 4u, v3, &v2, 0, 0) >= 0)
    return (v4 >> 11) & 1;
  else
    return 0;
}

uint64_t RegistrarClientProcess::GetProcessAssertion(RegistrarClientProcess *this)
{
  uint64_t result;
  PlatformUtilities *v3;
  void *p_p;
  CFStringRef v5;
  void *__p;
  char v7;

  result = *((_QWORD *)this + 17);
  if (!result)
  {
    v3 = (PlatformUtilities *)*((unsigned int *)this + 3);
    PlatformUtilities::processName(v3);
    if (v7 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    v5 = CFStringCreateWithFormat(0, 0, CFSTR("IPCAU process %d-'%s'"), v3, p_p);
    if (v7 < 0)
      operator delete(__p);
    *((_QWORD *)this + 17) = SBSProcessAssertionCreateForPID();
    CFRelease(v5);
    SBSProcessAssertionSetInvalidationCallBack();
    return *((_QWORD *)this + 17);
  }
  return result;
}

void sub_18F0510DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<IPCAURegistrar>::instance(void)::{lambda(void)#1} &&>>()
{
  _QWORD *v0;
  NSObject *v1;
  NSObject *v2;
  const __CFDictionary *v3;
  CFMutableDictionaryRef *v4;
  __CFNotificationCenter *LocalCenter;
  uint64_t result;

  v0 = (_QWORD *)operator new();
  CADeprecated::XMachServer::XMachServer();
  v0[10] = &unk_1E29045D8;
  *v0 = &off_1E2904590;
  v0[29] = 0;
  v0[30] = 0;
  v0[31] = 0;
  v0[34] = 0;
  v0[35] = 0;
  v0[32] = &off_1E29049D0;
  v0[33] = 0;
  *((_OWORD *)v0 + 18) = 0u;
  *((_OWORD *)v0 + 19) = 0u;
  if (initInterAppAudioLogging::once != -1)
    dispatch_once(&initInterAppAudioLogging::once, &__block_literal_global_10577);
  v1 = dispatch_queue_create("IPCAURegistrar", 0);
  v2 = v1;
  v0[28] = v1;
  if (v1)
    dispatch_retain(v1);
  CADeprecated::XBasicMIGServer::SetServerDispatchQueue();
  CADeprecated::XMachPortDeathListener::SetDeathNotificationDispatchQueue();
  if (v2)
    dispatch_release(v2);
  v3 = (const __CFDictionary *)CFPreferencesCopyAppValue(CFSTR("InterAppProcessActiveTimes"), CFSTR("com.apple.coreaudio"));
  v4 = (CFMutableDictionaryRef *)(v0 + 36);
  if (v3)
  {
    *v4 = CFDictionaryCreateMutableCopy(0, 0, v3);
    CFRelease(v3);
  }
  else
  {
    *v4 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, v0, (CFNotificationCallback)IPCAURegistrar::ApplicationStateChangedNotificationCallback, (CFStringRef)*MEMORY[0x1E0DAB0C0], 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  result = SBApplicationStateBeginGeneratingChangeNotifications();
  __dmb(0xBu);
  CADeprecated::TSingleton<IPCAURegistrar>::sInstance = (uint64_t)v0;
  return result;
}

void sub_18F0512F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  uint64_t v9;

  MEMORY[0x193FFE460](v9, 0x10F1C406A4A29DFLL);
  _Unwind_Resume(a1);
}

uint64_t GetString(const __CFDictionary *a1, const __CFString *a2, const __CFString **a3)
{
  uint64_t result;
  const __CFString *v5;
  CFTypeID v6;

  *a3 = 0;
  result = (uint64_t)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v5 = (const __CFString *)result;
    v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFStringGetTypeID())
    {
      *a3 = v5;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t IPCAURegistrar::RecordApplicationActiveTime(CFMutableDictionaryRef *this, const __CFString *a2)
{
  CFNumberRef v4;
  CFAbsoluteTime valuePtr;

  valuePtr = CFAbsoluteTimeGetCurrent();
  v4 = CFNumberCreate(0, kCFNumberFloat64Type, &valuePtr);
  CFDictionarySetValue(this[36], a2, v4);
  CFRelease(v4);
  CFPreferencesSetAppValue(CFSTR("InterAppProcessActiveTimes"), this[36], CFSTR("com.apple.coreaudio"));
  return CFPreferencesSynchronize(CFSTR("com.apple.coreaudio"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
}

uint64_t RegistrarClientProcess::ProcessAssertionInvalidated(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *p_p;
  void *__p;
  char v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (kInterAppAudioScope)
  {
    v3 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_11;
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    PlatformUtilities::processName((PlatformUtilities *)*(unsigned int *)(a2 + 12));
    if (v7 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315650;
    v9 = "IPCAURegistrar.mm";
    v10 = 1024;
    v11 = 256;
    v12 = 2080;
    v13 = p_p;
    _os_log_impl(&dword_18EE07000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAURegistrar: ProcessAssertionInvalidated: process '%s'", buf, 0x1Cu);
    if (v7 < 0)
      operator delete(__p);
  }
LABEL_11:
  *(_QWORD *)(a2 + 136) = 0;
  *(_BYTE *)(a2 + 128) = 0;
  return XOSTransactor::endTransaction((XOSTransactor *)(a2 + 144));
}

void IPCAURegistrar::NotifySubscribers(IPCAURegistrar *this)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t (*v5)(_QWORD);
  ipc_space_t *v6;
  uint64_t v7;
  uint64_t v8;
  mach_msg_header_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (kInterAppAudioScope)
  {
    v2 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_7;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v9.msgh_bits = 136315394;
    *(_QWORD *)&v9.msgh_size = "IPCAURegistrar.mm";
    LOWORD(v9.msgh_local_port) = 1024;
    *(mach_port_t *)((char *)&v9.msgh_local_port + 2) = 591;
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAURegistrar::NotifySubscribers", (uint8_t *)&v9, 0x12u);
  }
LABEL_7:
  v4 = (uint64_t *)*((_QWORD *)this + 29);
  v3 = (uint64_t *)*((_QWORD *)this + 30);
  if (v4 != v3)
  {
    v5 = MEMORY[0x1E0C85B60];
    v6 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    do
    {
      v7 = *v4;
      if (*(_BYTE *)(*v4 + 32) && !*(_BYTE *)(v7 + 33))
      {
        *(_BYTE *)(v7 + 33) = 1;
        v8 = *(_QWORD *)(v7 + 184);
        if (v8)
          LODWORD(v8) = *(_DWORD *)(v8 + 12);
        v9.msgh_local_port = 0;
        v9.msgh_size = 0;
        v9.msgh_bits = 19;
        v9.msgh_remote_port = v8;
        *(_QWORD *)&v9.msgh_voucher_port = 0x15FF400000000;
        if (v5)
          voucher_mach_msg_set(&v9);
        if (mach_msg(&v9, 17, 0x18u, 0, 0, gMediaServerTimeout, 0) == 268435460)
        {
          if ((v9.msgh_bits & 0x1F00) == 0x1100)
            mach_port_deallocate(*v6, v9.msgh_local_port);
          mach_msg_destroy(&v9);
        }
      }
      ++v4;
    }
    while (v4 != v3);
  }
}

void AURegistrationServerConnection::~AURegistrationServerConnection(AURegistrationServerConnection *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E29096E0;
  v2 = (void **)((char *)this + 168);
  MEMORY[0x193FFD7B8]((char *)this + 192);
  v3 = v2;
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  CADeprecated::XRemoteMachServer::~XRemoteMachServer(this);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E29096E0;
  v2 = (void **)((char *)this + 168);
  MEMORY[0x193FFD7B8]((char *)this + 192);
  v3 = v2;
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  CADeprecated::XRemoteMachServer::~XRemoteMachServer(this);
  JUMPOUT(0x193FFE460);
}

int *AURegistrationServerConnection::ServerPortDied(const char **this)
{
  NSObject *v2;
  int v3;
  int v4;
  int *result;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  int *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!kInterAppAudioScope)
  {
    v2 = MEMORY[0x1E0C81028];
LABEL_5:
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v9 = 136315394;
      v10 = "IPCAURegistrar.mm";
      v11 = 1024;
      v12 = 1220;
      _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AURegistrationServerConnection::ServerPortDied", (uint8_t *)&v9, 0x12u);
    }
    goto LABEL_7;
  }
  v2 = *(NSObject **)kInterAppAudioScope;
  if (*(_QWORD *)kInterAppAudioScope)
    goto LABEL_5;
LABEL_7:
  v3 = 4;
  do
  {
    v4 = v3;
    sleep(2u);
    result = (int *)AURegistrationServerConnection::Connect(this);
    if (!(_DWORD)result)
      break;
    v3 = v4 - 1;
  }
  while (v4);
  v7 = (uint64_t)this[21];
  v6 = this[22];
  while ((const char *)v7 != v6)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v9, v7);
    if (!v13)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(int *))(*(_QWORD *)v13 + 48))(v13);
    result = v13;
    if (v13 == &v9)
    {
      result = &v9;
      v8 = 4;
    }
    else
    {
      if (!v13)
        goto LABEL_18;
      v8 = 5;
    }
    result = (int *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v8))();
LABEL_18:
    v7 += 32;
  }
  return result;
}

void sub_18F0519A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v13;
  uint64_t v14;

  v13 = a12;
  if (a12 == &a9)
  {
    v14 = 4;
    v13 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t AURegistrationServerConnection::Connect(const char **this)
{
  ipc_space_t *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  mach_port_t v6;
  mach_port_name_t reply_port;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  BOOL v12;
  NSObject *v13;
  mach_port_t v15;
  mach_port_t v16;
  mach_port_t sp;
  mach_port_t special_port[14];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  sp = 0;
  special_port[0] = 0;
  v2 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  task_get_special_port(*MEMORY[0x1E0C83DA0], 4, special_port);
  v3 = bootstrap_look_up(special_port[0], this[5], &sp);
  if ((_DWORD)v3)
  {
    v4 = v3;
    if (kInterAppAudioScope)
    {
      v5 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        return v4;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      special_port[0] = 136315906;
      *(_QWORD *)&special_port[1] = "IPCAURegistrar.mm";
      LOWORD(special_port[3]) = 1024;
      *(mach_port_t *)((char *)&special_port[3] + 2) = 1204;
      HIWORD(special_port[4]) = 2080;
      *(_QWORD *)&special_port[5] = "com.apple.audio.AudioUnitServer";
      LOWORD(special_port[7]) = 1024;
      *(mach_port_t *)((char *)&special_port[7] + 2) = v4;
      v9 = "%25s:%-5d IPCAUClient: can't locate server %s (%d)";
      v10 = v5;
      v11 = 34;
LABEL_42:
      _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, v9, (uint8_t *)special_port, v11);
      return v4;
    }
    return v4;
  }
  CADeprecated::XRemoteMachServer::SetServerPort((CADeprecated::XRemoteMachServer *)this);
  v6 = *((_DWORD *)this + 12);
  memset(&special_port[1], 0, 44);
  reply_port = mig_get_reply_port();
  special_port[2] = v6;
  special_port[3] = reply_port;
  special_port[0] = 5395;
  *(_QWORD *)&special_port[4] = 0x15F9000000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)special_port);
    reply_port = special_port[3];
  }
  v8 = mach_msg((mach_msg_header_t *)special_port, 275, 0x18u, 0x30u, reply_port, gMediaServerTimeout, 0);
  v4 = v8;
  if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(special_port[3]);
    goto LABEL_26;
  }
  if (!(_DWORD)v8)
  {
    if (special_port[5] == 71)
    {
      v4 = 4294966988;
    }
    else if (special_port[5] == 90100)
    {
      if ((special_port[0] & 0x80000000) == 0)
      {
        if (special_port[1] == 40)
        {
          if (!special_port[2])
          {
            v4 = special_port[8];
            if (!special_port[8])
            {
              v15 = special_port[9];
              goto LABEL_45;
            }
            goto LABEL_34;
          }
        }
        else if (special_port[1] == 36)
        {
          if (special_port[2])
            v12 = 1;
          else
            v12 = special_port[8] == 0;
          if (v12)
            v4 = 4294966996;
          else
            v4 = special_port[8];
          goto LABEL_34;
        }
      }
      v4 = 4294966996;
    }
    else
    {
      v4 = 4294966995;
    }
LABEL_34:
    mach_msg_destroy((mach_msg_header_t *)special_port);
    goto LABEL_35;
  }
  mig_dealloc_reply_port(special_port[3]);
LABEL_26:
  if ((_DWORD)v4 != 268435460)
  {
LABEL_35:
    if ((_DWORD)v4)
      goto LABEL_36;
    v15 = 0;
LABEL_45:
    *((_DWORD *)this + 13) = v15;
    if (kInterAppAudioScope)
    {
      v4 = *(_QWORD *)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        return v4;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEBUG))
    {
      v16 = *((_DWORD *)this + 12);
      special_port[0] = 136315906;
      *(_QWORD *)&special_port[1] = "IPCAURegistrar.mm";
      LOWORD(special_port[3]) = 1024;
      *(mach_port_t *)((char *)&special_port[3] + 2) = 1214;
      HIWORD(special_port[4]) = 1024;
      special_port[5] = v16;
      LOWORD(special_port[6]) = 1024;
      *(mach_port_t *)((char *)&special_port[6] + 2) = v15;
      _os_log_impl(&dword_18EE07000, (os_log_t)v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AURegistrationServerConnection: in client, using port 0x%x in server process %d", (uint8_t *)special_port, 0x1Eu);
    }
    return 0;
  }
  if ((special_port[0] & 0x1F00) == 0x1100)
    mach_port_deallocate(*v2, special_port[3]);
  mach_msg_destroy((mach_msg_header_t *)special_port);
  v4 = 268435460;
LABEL_36:
  if (kInterAppAudioScope)
  {
    v13 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      return v4;
  }
  else
  {
    v13 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    special_port[0] = 136315650;
    *(_QWORD *)&special_port[1] = "IPCAURegistrar.mm";
    LOWORD(special_port[3]) = 1024;
    *(mach_port_t *)((char *)&special_port[3] + 2) = 1210;
    HIWORD(special_port[4]) = 1024;
    special_port[5] = v4;
    v9 = "%25s:%-5d IPCAUClient: can't connect to server (%d)";
    v10 = v13;
    v11 = 24;
    goto LABEL_42;
  }
  return v4;
}

void std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = v4 - 32;
    v7 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v7)
    {
      v7 = v4 - 32;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_8;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
    v4 = v6;
  }
  while (v6 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

void PublishedAU::~PublishedAU(CFTypeRef *this)
{
  PublishedAU::~PublishedAU(this);
  JUMPOUT(0x193FFE460);
}

{
  *this = &off_1E29010F0;
  CFRelease(this[6]);
  CFRelease(this[2]);
}

void IPCAURegistrar_InitServer()
{
  NSObject *global_queue;

  CADeprecated::TSingleton<IPCAURegistrar>::instance();
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_8716);
}

uint64_t IPCAURegistrar::FindOrCreateClientProcess(_QWORD *a1, int a2, int a3, int a4, const void *a5, uint64_t a6)
{
  uint64_t *i;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (!a3)
    return 0;
  for (i = (uint64_t *)a1[29]; i != (uint64_t *)a1[30]; ++i)
  {
    v13 = *i;
    if (*(_DWORD *)(*i + 12) == a4)
      goto LABEL_25;
  }
  v13 = operator new();
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)v13);
  *(_QWORD *)v13 = &off_1E2908A70;
  *(_DWORD *)(v13 + 12) = a4;
  *(_QWORD *)(v13 + 16) = a5;
  *(_QWORD *)(v13 + 24) = a6;
  *(_WORD *)(v13 + 32) = 0;
  *(_OWORD *)(v13 + 36) = 0u;
  *(_OWORD *)(v13 + 52) = 0u;
  *(_QWORD *)(v13 + 68) = 0x3F80000000000000;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_DWORD *)(v13 + 112) = 1065353216;
  *(_QWORD *)(v13 + 120) = 0;
  *(_WORD *)(v13 + 128) = 0;
  *(_QWORD *)(v13 + 136) = 0;
  *(_BYTE *)(v13 + 144) = 1;
  *(_QWORD *)(v13 + 152) = "InterAppAudioRegistrar";
  *(_DWORD *)(v13 + 160) = a4;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_QWORD *)(v13 + 216) = 0;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_OWORD *)(v13 + 184) = 0u;
  CFRetain(a5);
  CFRetain(*(CFTypeRef *)(v13 + 24));
  v15 = (uint64_t *)a1[30];
  v14 = a1[31];
  if ((unint64_t)v15 >= v14)
  {
    v17 = (_QWORD *)a1[29];
    v18 = v15 - v17;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v20 = v14 - (_QWORD)v17;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = (char *)operator new(8 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = (uint64_t *)&v22[8 * v18];
    *v23 = v13;
    v16 = v23 + 1;
    if (v15 != v17)
    {
      do
      {
        v24 = *--v15;
        *--v23 = v24;
      }
      while (v15 != v17);
      v15 = (uint64_t *)a1[29];
    }
    a1[29] = v23;
    a1[30] = v16;
    a1[31] = &v22[8 * v21];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v15 = v13;
    v16 = v15 + 1;
  }
  a1[30] = v16;
LABEL_25:
  if (a2)
  {
    if (a2 == 2)
    {
      if (!*(_QWORD *)(v13 + 192))
      {
        v26 = operator new();
        BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)v26);
        *(_DWORD *)(v26 + 12) = a3;
        *(_QWORD *)v26 = &off_1E2909F90;
        *(_QWORD *)(v26 + 16) = v13;
        *(_QWORD *)(v13 + 192) = v26;
        goto LABEL_36;
      }
    }
    else if (a2 == 1)
    {
      v25 = *(_QWORD *)(v13 + 176);
      if (!v25 || !*(_DWORD *)(v25 + 12))
      {
        v26 = operator new();
        BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)v26);
        *(_DWORD *)(v26 + 12) = a3;
        *(_QWORD *)v26 = &off_1E2909F90;
        *(_QWORD *)(v26 + 16) = v13;
        *(_QWORD *)(v13 + 176) = v26;
LABEL_36:
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v26);
      }
    }
  }
  else
  {
    v27 = *(_QWORD *)(v13 + 184);
    if (!v27 || !*(_DWORD *)(v27 + 12))
    {
      v26 = operator new();
      BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)v26);
      *(_DWORD *)(v26 + 12) = a3;
      *(_QWORD *)v26 = &off_1E2909F90;
      *(_QWORD *)(v26 + 16) = v13;
      *(_QWORD *)(v13 + 184) = v26;
      goto LABEL_36;
    }
  }
  return v13;
}

void sub_18F052208(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10A1C40319E9F20);
  _Unwind_Resume(a1);
}

void RegistrarClientProcess::ClientPort::~ClientPort(RegistrarClientProcess::ClientPort *this)
{
  *(_QWORD *)this = &off_1E2909DC8;
  MEMORY[0x193FFD7E8]((char *)this + 12);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

{
  *(_QWORD *)this = &off_1E2909DC8;
  MEMORY[0x193FFD7E8]((char *)this + 12);
  BaseOpaqueObject::~BaseOpaqueObject(this);
  JUMPOUT(0x193FFE460);
}

BOOL TOpaqueObject<CADeprecated::XMachServer::Client,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<CADeprecated::XMachServer::Client>::sRTTI || a2 == (void *)MEMORY[0x1E0DDEC88];
}

void CADeprecated::XMachServer::Client::~Client(CADeprecated::XMachServer::Client *this)
{
  *(_QWORD *)this = &off_1E2909DC8;
  MEMORY[0x193FFD7E8]((char *)this + 12);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

{
  *(_QWORD *)this = &off_1E2909DC8;
  MEMORY[0x193FFD7E8]((char *)this + 12);
  BaseOpaqueObject::~BaseOpaqueObject(this);
  JUMPOUT(0x193FFE460);
}

void std::vector<std::unique_ptr<RegistrarClientProcess::SharedMemoryBlock>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<RegistrarClientProcess::SharedMemoryBlock>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::unique_ptr<RegistrarClientProcess::SharedMemoryBlock>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void RegistrarClientProcess::~RegistrarClientProcess(RegistrarClientProcess *this)
{
  RegistrarClientProcess::~RegistrarClientProcess(this);
  JUMPOUT(0x193FFE460);
}

{
  const void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E2908A70;
  v2 = (const void *)*((_QWORD *)this + 17);
  if (v2)
    CFRelease(v2);
  CFRelease(*((CFTypeRef *)this + 2));
  CFRelease(*((CFTypeRef *)this + 3));
  v3 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<RegistrarClientProcess::SharedMemoryBlock>>::__destroy_vector::operator()[abi:ne180100](&v3);
  XOSTransactor::endTransaction((XOSTransactor *)((char *)this + 144));
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

BOOL TOpaqueObject<RegistrarClientProcess,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<RegistrarClientProcess>::sRTTI || a2 == (void *)MEMORY[0x1E0DDEC88];
}

void IPCAURegistrar::RegisterAUsFrom1App(IPCAURegistrar *this, CFTypeRef cf, _QWORD *a3, void *a4)
{
  CFTypeID v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  CFTypeID v12;
  NSObject *v13;
  int v14;
  objc_class *v15;
  id v16;
  int v17;
  uint64_t *i;
  uint64_t v19;
  uint64_t v20;
  int v21;
  CFTypeRef v22;
  int v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  NSObject *v35;
  const char *v36;
  NSObject *v37;
  uint32_t v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  _BYTE inDesc[24];
  CFTypeRef cfa;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  _BYTE v50[18];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v7 = CFGetTypeID(cf);
  if (v7 != CFArrayGetTypeID())
    return;
  Count = CFArrayGetCount((CFArrayRef)cf);
  if (Count < 1)
    return;
  v9 = Count;
  v10 = 0;
  v41 = *MEMORY[0x1E0CFE2D0];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v10);
    v12 = CFGetTypeID(ValueAtIndex);
    if (v12 != CFDictionaryGetTypeID())
      goto LABEL_49;
    if (kInterAppAudioScope)
    {
      v13 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        goto LABEL_11;
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v46 = "IPCAURegistrar.mm";
      v47 = 1024;
      v48 = 653;
      v49 = 2112;
      *(_QWORD *)v50 = this;
      *(_WORD *)&v50[8] = 2112;
      *(_QWORD *)&v50[10] = ValueAtIndex;
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d %@ %@", buf, 0x26u);
    }
LABEL_11:
    cfa = 0;
    memset(inDesc, 0, sizeof(inDesc));
    if (!Get4CCOrNumber((const __CFDictionary *)ValueAtIndex, CFSTR("type"), (unsigned int *)inDesc)
      || !Get4CCOrNumber((const __CFDictionary *)ValueAtIndex, CFSTR("subtype"), (unsigned int *)&inDesc[4])|| !Get4CCOrNumber((const __CFDictionary *)ValueAtIndex, CFSTR("manufacturer"), (unsigned int *)&inDesc[8])|| !GetString((const __CFDictionary *)ValueAtIndex, CFSTR("name"), (const __CFString **)&cfa)|| (GetNumber((const __CFDictionary *)ValueAtIndex, CFSTR("version"), (unsigned int *)&inDesc[20]) & 1) == 0)
    {
      if (kInterAppAudioScope)
      {
        v35 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
          return;
      }
      else
      {
        v35 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v46 = "IPCAURegistrar.mm";
        v47 = 1024;
        v48 = 666;
        v49 = 2112;
        *(_QWORD *)v50 = this;
        v36 = "%25s:%-5d Missing required key(s) in AudioComponents for %@";
        v37 = v35;
        v38 = 28;
LABEL_57:
        _os_log_impl(&dword_18EE07000, v37, OS_LOG_TYPE_ERROR, v36, buf, v38);
        return;
      }
      return;
    }
    v14 = *(_DWORD *)inDesc;
    if ((*(_DWORD *)inDesc - 1635086951) > 0x11 || ((1 << (inDesc[0] - 103)) & 0x20045) == 0)
      break;
    if (AudioComponentFindNext(0, (const AudioComponentDescription *)inDesc))
    {
      if (kInterAppAudioScope)
      {
        v39 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
          return;
      }
      else
      {
        v39 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        CAFormatter::CAFormatter((CAFormatter *)&v42, (const AudioComponentDescription *)inDesc);
        *(_DWORD *)buf = 136315906;
        v46 = "IPCAURegistrar.mm";
        v47 = 1024;
        v48 = 684;
        v49 = 2080;
        *(_QWORD *)v50 = v42;
        *(_WORD *)&v50[8] = 2112;
        *(_QWORD *)&v50[10] = this;
        _os_log_impl(&dword_18EE07000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot register duplicate AudioComponent description '%s' as requested by %@", buf, 0x26u);
        if (v42)
          free(v42);
      }
      return;
    }
    v15 = NSClassFromString(CFSTR("BKSApplicationStateMonitor"));
    if (v15)
    {
      v16 = objc_alloc_init(v15);
      v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "applicationInfoForApplication:", this), "objectForKeyedSubscript:", v41), "intValue");

      if (v17 >= 1)
      {
        for (i = (uint64_t *)a3[29]; i != (uint64_t *)a3[30]; ++i)
        {
          v19 = *i;
          if (*(_DWORD *)(*i + 12) == v17)
            goto LABEL_26;
        }
      }
    }
    v19 = 0;
LABEL_26:
    v20 = operator new();
    if (v19)
      v21 = *(_DWORD *)(v19 + 12);
    else
      v21 = 0;
    v22 = cfa;
    *(_QWORD *)v20 = &off_1E29010F0;
    *(_DWORD *)(v20 + 8) = v21;
    *(_QWORD *)(v20 + 16) = this;
    *(_OWORD *)(v20 + 24) = *(_OWORD *)inDesc;
    v23 = *(_DWORD *)&inDesc[20];
    *(_DWORD *)(v20 + 40) = *(_DWORD *)&inDesc[16];
    *(_QWORD *)(v20 + 48) = v22;
    *(_DWORD *)(v20 + 56) = v23;
    CFRetain(v22);
    CFRetain(*(CFTypeRef *)(v20 + 16));
    *(_QWORD *)v20 = &off_1E2908710;
    *(_WORD *)(v20 + 60) = 1;
    *(_QWORD *)(v20 + 64) = v19;
    *(_QWORD *)(v20 + 72) = 0;
    *(_QWORD *)(v20 + 80) = 0;
    *(_QWORD *)(v20 + 88) = 0;
    if (v19)
      ++*(_DWORD *)(v19 + 36);
    v25 = (uint64_t *)a3[34];
    v24 = a3[35];
    if ((unint64_t)v25 >= v24)
    {
      v27 = (_QWORD *)a3[33];
      v28 = v25 - v27;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v30 = v24 - (_QWORD)v27;
      if (v30 >> 2 > v29)
        v29 = v30 >> 2;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v32 = (char *)operator new(8 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = (uint64_t *)&v32[8 * v28];
      *v33 = v20;
      v26 = v33 + 1;
      if (v25 != v27)
      {
        do
        {
          v34 = *--v25;
          *--v33 = v34;
        }
        while (v25 != v27);
        v25 = (uint64_t *)a3[33];
      }
      a3[33] = v33;
      a3[34] = v26;
      a3[35] = &v32[8 * v31];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v25 = v20;
      v26 = v25 + 1;
    }
    a3[34] = v26;
LABEL_49:
    if (++v10 == v9)
      return;
  }
  if (kInterAppAudioScope)
  {
    v40 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      return;
  }
  else
  {
    v40 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    v46 = "IPCAURegistrar.mm";
    v47 = 1024;
    v48 = 677;
    v49 = 1024;
    *(_DWORD *)v50 = v14;
    *(_WORD *)&v50[4] = 2112;
    *(_QWORD *)&v50[6] = this;
    v36 = "%25s:%-5d Cannot register AudioComponent with type '%d' as requested by %@";
    v37 = v40;
    v38 = 34;
    goto LABEL_57;
  }
}

void sub_18F052B04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10E1C409F7E78A9);
  _Unwind_Resume(a1);
}

uint64_t Get4CCOrNumber(const __CFDictionary *a1, const __CFString *a2, unsigned int *a3)
{
  uint64_t result;
  const __CFString *v5;
  CFTypeID v6;
  CFTypeID v7;
  char buffer[4];

  *a3 = 0;
  result = (uint64_t)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v5 = (const __CFString *)result;
    v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFStringGetTypeID())
    {
      if (CFStringGetLength(v5) == 4)
      {
        CFStringGetCString(v5, buffer, 5, 0x600u);
        *a3 = bswap32(*(unsigned int *)buffer);
        return 1;
      }
    }
    else
    {
      v7 = CFGetTypeID(v5);
      if (v7 == CFNumberGetTypeID())
        return CFNumberGetValue((CFNumberRef)v5, kCFNumberSInt32Type, a3) != 0;
    }
    return 0;
  }
  return result;
}

void PublishedAU_Registrar::~PublishedAU_Registrar(PublishedAU_Registrar *this)
{
  PublishedAU_Registrar::~PublishedAU_Registrar(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E2908710;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    --*(_DWORD *)(v2 + 36);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  PublishedAU::~PublishedAU((CFTypeRef *)this);
}

void ___ZN14IPCAURegistrar25RegisterAUsFromAppBundlesEPK14__CFDictionary_block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  OwnedPtrVector<PublishedAU_Registrar *>::erase((_QWORD *)(v2 + 256), *(uint64_t **)(v2 + 264), *(uint64_t **)(v2 + 272));
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)IPCAURegistrar::RegisterAUsFrom1App, (void *)v2);
  IPCAURegistrar::NotifySubscribers((IPCAURegistrar *)v2);
}

void ___ZN14IPCAURegistrar19CheckLaunchAUServerEiRK25AudioComponentDescriptionjRi_block_invoke(uint64_t a1, uint64_t a2, PlatformUtilities *a3)
{
  NSObject *v5;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  mach_port_t v10;
  int v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  CFStringRef v18;
  uint64_t v19;
  NSObject *v20;
  void **v21;
  dispatch_time_t v22;
  NSObject *global_queue;
  void *__p;
  char v25;
  _BYTE buf[40];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (kInterAppAudioScope)
    {
      v5 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
      {
LABEL_13:
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 184);
        if (v9)
          v10 = *(_DWORD *)(v9 + 12);
        else
          v10 = 0;
        v11 = *(_DWORD *)(a1 + 64);
        v12 = 0;
LABEL_17:
        IPCAUCallbackSender_LaunchRequestComplete(v10, v11, v12);
        return;
      }
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 920;
      *(_WORD *)&buf[18] = 2112;
      *(_QWORD *)&buf[20] = a2;
      _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d launch failed, error %@", buf, 0x1Cu);
    }
    goto LABEL_13;
  }
  if ((int)a3 < 1)
  {
    if (kInterAppAudioScope)
    {
      v13 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
      {
LABEL_35:
        PublishedAU_Registrar::AddCheckinPing(*(PublishedAU_Registrar **)(a1 + 56), *(_DWORD *)(a1 + 68), *(unsigned int *)(a1 + 64));
        return;
      }
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 937;
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d launching, will wait for checkin", buf, 0x12u);
    }
    goto LABEL_35;
  }
  v7 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(v7 + 64))
  {
    if (kInterAppAudioScope)
    {
      v8 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
      {
LABEL_28:
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 184);
        if (v15)
          v10 = *(_DWORD *)(v15 + 12);
        else
          v10 = 0;
        v11 = *(_DWORD *)(a1 + 64);
        v12 = 1;
        goto LABEL_17;
      }
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 923;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = (_DWORD)a3;
      _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d already running[%d] and checked in", buf, 0x18u);
    }
    goto LABEL_28;
  }
  if (*(_BYTE *)(v7 + 61))
  {
    if (kInterAppAudioScope)
    {
      v14 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
      {
LABEL_42:
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -3000;
        return;
      }
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD *)(v7 + 16);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 926;
      *(_WORD *)&buf[18] = 2112;
      *(_QWORD *)&buf[20] = v17;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = (_DWORD)a3;
      _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Node app '%@' already running[%d], but has explicitly unpublished itself. Failing.", buf, 0x22u);
    }
    goto LABEL_42;
  }
  if (kInterAppAudioScope)
  {
    v16 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_46;
  }
  else
  {
    v16 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 929;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = (_DWORD)a3;
    _os_log_impl(&dword_18EE07000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d already running[%d], not checked in (server crashed?); will wake and wait for checkin",
      buf,
      0x18u);
    v7 = *(_QWORD *)(a1 + 56);
  }
LABEL_46:
  PublishedAU_Registrar::AddCheckinPing((PublishedAU_Registrar *)v7, *(_DWORD *)(a1 + 68), *(unsigned int *)(a1 + 64));
  v18 = CFStringCreateWithFormat(0, 0, CFSTR("IPCAU process %d:wake"), a3);
  v19 = SBSProcessAssertionCreateForPID();
  CFRelease(v18);
  if (!kInterAppAudioScope)
  {
    v20 = MEMORY[0x1E0C81028];
    goto LABEL_50;
  }
  v20 = *(NSObject **)kInterAppAudioScope;
  if (*(_QWORD *)kInterAppAudioScope)
  {
LABEL_50:
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      PlatformUtilities::processName(a3);
      v21 = v25 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 965;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v21;
      _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d waking sleeping node '%s'", buf, 0x1Cu);
      if (v25 < 0)
        operator delete(__p);
    }
  }
  SBSProcessAssertionSetFlags();
  v22 = dispatch_time(0, 10000000000);
  global_queue = dispatch_get_global_queue(0, 0);
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZN14IPCAURegistrar18WakeSleepingServerEi_block_invoke;
  *(_QWORD *)&buf[24] = &__block_descriptor_44_e5_v8__0l;
  *(_QWORD *)&buf[32] = v19;
  v27 = (int)a3;
  dispatch_after(v22, global_queue, buf);
}

void PublishedAU_Registrar::AddCheckinPing(PublishedAU_Registrar *this, unsigned int a2, uint64_t a3)
{
  char *v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v7 = (char *)*((_QWORD *)this + 9);
  v6 = (char *)*((_QWORD *)this + 10);
  if (v7 != v6)
  {
    while (*(_DWORD *)v7 != a2)
    {
      v7 += 8;
      if (v7 == v6)
      {
        v7 = (char *)*((_QWORD *)this + 10);
        goto LABEL_8;
      }
    }
    v8 = v6 - (v7 + 8);
    if (v6 != v7 + 8)
      memmove(v7, v7 + 8, v6 - (v7 + 8));
    v7 += v8;
    *((_QWORD *)this + 10) = v7;
  }
LABEL_8:
  v9 = *((_QWORD *)this + 11);
  if ((unint64_t)v7 >= v9)
  {
    v11 = (char *)*((_QWORD *)this + 9);
    v12 = (v7 - v11) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = (char *)operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v12];
    *(_QWORD *)v17 = a2 | (unint64_t)(a3 << 32);
    v10 = v17 + 8;
    if (v7 != v11)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v17 - 1) = v18;
        v17 -= 8;
      }
      while (v7 != v11);
      v7 = (char *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 9) = v17;
    *((_QWORD *)this + 10) = v10;
    *((_QWORD *)this + 11) = &v16[8 * v15];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v7 = a2 | (unint64_t)(a3 << 32);
    v10 = v7 + 8;
  }
  *((_QWORD *)this + 10) = v10;
}

void ___ZN14IPCAURegistrar18WakeSleepingServerEi_block_invoke(uint64_t a1)
{
  NSObject *v2;
  void *p_p;
  void *__p;
  char v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  SBSProcessAssertionSetFlags();
  CFRelease(*(CFTypeRef *)(a1 + 32));
  if (kInterAppAudioScope)
  {
    v2 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      return;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    PlatformUtilities::processName((PlatformUtilities *)*(unsigned int *)(a1 + 40));
    if (v5 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315650;
    v7 = "IPCAURegistrar.mm";
    v8 = 1024;
    v9 = 973;
    v10 = 2080;
    v11 = p_p;
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d released assertion on sleeping node '%s'", buf, 0x1Cu);
    if (v5 < 0)
      operator delete(__p);
  }
}

uint64_t IPCAURegistrar::SetProcessWakeState(IPCAURegistrar *this, int a2, RegistrarClientProcess *a3, int a4, int *a5)
{
  NSObject *v10;
  void *p_p;
  float **v12;
  float **v13;
  RegistrarClientProcess **v14;
  RegistrarClientProcess *v15;
  float *v17;
  void *__p;
  char v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (kInterAppAudioScope)
  {
    v10 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_11;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    PlatformUtilities::processName(a3);
    if (v19 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315906;
    v21 = "IPCAURegistrar.mm";
    v22 = 1024;
    v23 = 1030;
    v24 = 2080;
    v25 = p_p;
    v26 = 1024;
    v27 = a4;
    _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d process '%s', state %d", buf, 0x22u);
    if (v19 < 0)
      operator delete(__p);
  }
LABEL_11:
  v12 = (float **)*((_QWORD *)this + 29);
  v13 = (float **)*((_QWORD *)this + 30);
  if (v12 == v13)
    return 4294967246;
  v14 = (RegistrarClientProcess **)*((_QWORD *)this + 29);
  while (1)
  {
    v15 = *v14;
    if (*((_DWORD *)*v14 + 3) == a2)
      break;
    if (++v14 == (RegistrarClientProcess **)v13)
      return 4294967246;
  }
  while (1)
  {
    v17 = *v12;
    if (*((_DWORD *)*v12 + 3) == (_DWORD)a3)
      break;
    if (++v12 == v13)
      return 4294967246;
  }
  if (a4)
  {
    *a5 = 0;
    return RegistrarClientProcess::SetProcessWakeState((RegistrarClientProcess *)v17, a4, v15);
  }
  else
  {
    *a5 = RegistrarClientProcess::BeingDebugged(a3);
    std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__emplace_unique_key_args<RegistrarClientProcess *,RegistrarClientProcess * const&>(v17 + 20, (unint64_t)v15, (uint64_t)v15);
    RegistrarClientProcess::CheckProcessAssertion((RegistrarClientProcess *)v17);
    return 0;
  }
}

uint64_t RegistrarClientProcess::SetProcessWakeState(RegistrarClientProcess *this, int a2, RegistrarClientProcess *a3)
{
  float *v4;
  uint64_t result;
  uint64_t *v6;

  switch(a2)
  {
    case 0:
      v4 = (float *)((char *)this + 80);
      goto LABEL_6;
    case 1:
      v6 = (uint64_t *)((char *)this + 80);
      goto LABEL_8;
    case 2:
      v4 = (float *)((char *)this + 40);
LABEL_6:
      std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__emplace_unique_key_args<RegistrarClientProcess *,RegistrarClientProcess * const&>(v4, (unint64_t)a3, (uint64_t)a3);
      goto LABEL_9;
    case 3:
      v6 = (uint64_t *)((char *)this + 40);
LABEL_8:
      std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>(v6, (unint64_t)a3);
LABEL_9:
      RegistrarClientProcess::CheckProcessAssertion(this);
      result = 0;
      break;
    default:
      result = 4294967246;
      break;
  }
  return result;
}

void std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__emplace_unique_key_args<RegistrarClientProcess *,RegistrarClientProcess * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *v14 = *v33;
LABEL_72:
    *v33 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    v34 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_18F053A78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AURegistrationServerConnection::RegisterExtensionProcess(uint64_t this)
{
  unsigned int *v1;
  uint64_t v3;
  unsigned int v4;
  __CFBundle *MainBundle;
  __CFBundle *v6;
  int v7;
  int Length;
  const UInt8 *BytePtr;
  mach_port_name_t reply_port;
  mach_msg_return_t v11;
  mach_msg_return_t v12;
  CFDataRef theData;
  const __CFString *v14;
  CFStringRef Identifier;
  _BYTE msg[36];
  int v17;
  const UInt8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = (unsigned int *)(this + 192);
  if (!atomic_load((unsigned int *)(this + 192)))
  {
    v3 = this;
    CADeprecated::XMachReceivePort::CreateMachPort((CADeprecated::XMachReceivePort *)(this + 192));
    v4 = atomic_load(v1);
    MainBundle = CFBundleGetMainBundle();
    if (MainBundle)
    {
      v6 = MainBundle;
      Identifier = CFBundleGetIdentifier(MainBundle);
      MainBundle = (__CFBundle *)CFBundleGetValueForInfoDictionaryKey(v6, (CFStringRef)*MEMORY[0x1E0C9AAC8]);
      v14 = (const __CFString *)MainBundle;
      if (Identifier)
      {
        if (MainBundle)
          goto LABEL_5;
LABEL_10:
        v14 = &stru_1E2923288;
LABEL_5:
        CASerializer::CASerializer((CASerializer *)&theData, 0);
        operator<<();
        operator<<();
        v7 = *(_DWORD *)(v3 + 48);
        Length = (int)theData;
        if (theData)
        {
          BytePtr = CFDataGetBytePtr(theData);
          Length = (int)theData;
          if (theData)
            Length = CFDataGetLength(theData);
        }
        else
        {
          BytePtr = 0;
        }
        memset(&msg[4], 0, 32);
        *(_DWORD *)&msg[24] = 2;
        *(_DWORD *)&msg[28] = v4;
        v17 = 1245184;
        v18 = BytePtr;
        v19 = 16777472;
        v20 = Length;
        v21 = *MEMORY[0x1E0C804E8];
        v22 = Length;
        reply_port = mig_get_reply_port();
        *(_DWORD *)&msg[8] = v7;
        *(_DWORD *)&msg[12] = reply_port;
        *(_DWORD *)msg = -2147478253;
        *(_QWORD *)&msg[16] = 0x15F9100000000;
        if (MEMORY[0x1E0C85B60])
        {
          voucher_mach_msg_set((mach_msg_header_t *)msg);
          reply_port = *(_DWORD *)&msg[12];
        }
        v11 = mach_msg((mach_msg_header_t *)msg, 275, 0x44u, 0x2Cu, reply_port, gMediaServerTimeout, 0);
        v12 = v11;
        if ((v11 - 268435458) <= 0xE && ((1 << (v11 - 2)) & 0x4003) != 0)
        {
          mig_put_reply_port(*(mach_port_t *)&msg[12]);
        }
        else
        {
          if (!v11)
          {
            if (*(_DWORD *)&msg[20] == 90101
              && (*(_DWORD *)msg & 0x80000000) == 0
              && *(_DWORD *)&msg[4] == 36
              && !*(_DWORD *)&msg[8]
              && !*(_DWORD *)&msg[32])
            {
              return MEMORY[0x193FFD878](&theData);
            }
            goto LABEL_28;
          }
          mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
        }
        if (v12 != 268435460)
          return MEMORY[0x193FFD878](&theData);
        if ((*(_WORD *)msg & 0x1F00) == 0x1100)
          mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
LABEL_28:
        mach_msg_destroy((mach_msg_header_t *)msg);
        return MEMORY[0x193FFD878](&theData);
      }
    }
    else
    {
      v14 = 0;
    }
    Identifier = &stru_1E2923288;
    if (MainBundle)
      goto LABEL_5;
    goto LABEL_10;
  }
  return this;
}

void sub_18F053D04(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void AURegistrationServerConnection::WakeExtension(AURegistrationServerConnection *this, int a2, int a3)
{
  int v3;
  mach_port_name_t reply_port;
  mach_msg_return_t v5;
  mach_msg_return_t v6;
  _BYTE msg[36];
  uint64_t v9;

  v3 = (int)this;
  *(_OWORD *)&msg[20] = 0u;
  v9 = 0;
  *(_OWORD *)&msg[4] = 0u;
  *(_QWORD *)&msg[24] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&msg[32] = a2;
  LODWORD(v9) = a3;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = v3;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x15F9C00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = *(_DWORD *)&msg[12];
  }
  v5 = mach_msg((mach_msg_header_t *)msg, 275, 0x28u, 0x2Cu, reply_port, gMediaServerTimeout, 0);
  v6 = v5;
  if ((v5 - 268435458) <= 0xE && ((1 << (v5 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
LABEL_16:
    if (v6 != 268435460)
      return;
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_19;
  }
  if (v5)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
    goto LABEL_16;
  }
  if (*(_DWORD *)&msg[20] != 90112
    || (*(_DWORD *)msg & 0x80000000) != 0
    || *(_DWORD *)&msg[4] != 36
    || *(_DWORD *)&msg[8]
    || *(_DWORD *)&msg[32])
  {
LABEL_19:
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
}

uint64_t AURegistrationServerConnection_Connect()
{
  const char **v0;

  v0 = (const char **)CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
  return AURegistrationServerConnection::Connect(v0);
}

uint64_t AURegistrationServerConnection_ServerPort()
{
  return *(unsigned int *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
}

uint64_t IPCAURegServer_PublishAU(audit_token_t *a1, int a2, const AudioComponentDescription *a3, const void *a4, unsigned int a5, int a6)
{
  uint64_t v11;
  CFTypeRef v12;
  uint64_t v13;
  CFMutableDictionaryRef *v14;
  PlatformUtilities *v15;
  const __CFString *v16;
  CFTypeRef v17;
  CFTypeRef v18;
  NSObject *v19;
  int v20;
  void **v21;
  void **p_p;
  uint64_t ClientProcess;
  CFMutableDictionaryRef v24;
  CFMutableDictionaryRef v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  int *v32;
  int *v33;
  CFMutableDictionaryRef v34;
  CFMutableDictionaryRef v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  mach_port_t v39;
  NSObject *v40;
  int v41;
  int v42;
  int v44;
  CFTypeRef v45;
  vm_address_t v46;
  vm_size_t v47;
  CADeserializer v48;
  CFTypeRef v49;
  CFTypeRef v50;
  CFTypeRef cf;
  pid_t pidp;
  void *v53;
  void *__p;
  char v55;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  _BYTE v61[14];
  __int16 v62;
  _BYTE v63[10];
  CFTypeRef v64;
  __int16 v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  pidp = 0;
  v11 = 4294900548;
  if (!ClientHasInterAppAudioEntitlement(a1, &pidp))
    return 4294900548;
  v50 = 0;
  cf = 0;
  v49 = 0;
  v47 = a5;
  CADeserializer::CADeserializer(&v48, a4);
  v46 = (vm_address_t)a4;
  operator>>();
  operator>>();
  operator>>();
  v12 = cf;
  v13 = 4294967246;
  if (cf && v50 && v49)
  {
    v14 = (CFMutableDictionaryRef *)CADeprecated::TSingleton<IPCAURegistrar>::instance();
    v15 = (PlatformUtilities *)pidp;
    v17 = v49;
    v16 = (const __CFString *)v50;
    v18 = cf;
    if (kInterAppAudioScope)
    {
      v19 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
      {
LABEL_17:
        ClientProcess = IPCAURegistrar::FindOrCreateClientProcess(v14, 1, a2, (int)v15, v16, (uint64_t)v17);
        v25 = v14[33];
        v24 = v14[34];
        if (v25 != v24)
        {
          v26 = ClientProcess;
          while (1)
          {
            v27 = *(_QWORD *)v25;
            if (*(_QWORD *)&a3->componentType != *(_QWORD *)(*(_QWORD *)v25 + 24)
              || a3->componentManufacturer != (unint64_t)*(unsigned int *)(*(_QWORD *)v25 + 32))
            {
              goto LABEL_26;
            }
            if (CFEqual(v16, *(CFTypeRef *)(v27 + 16)))
              break;
            v24 = v14[34];
LABEL_26:
            v25 = (CFMutableDictionaryRef)((char *)v25 + 8);
            if (v25 == v24)
              goto LABEL_27;
          }
          *(_DWORD *)(v27 + 8) = (_DWORD)v15;
          *(_BYTE *)(v27 + 61) = 0;
          *(_QWORD *)(v27 + 64) = v26;
          if (kInterAppAudioScope)
          {
            v30 = *(NSObject **)kInterAppAudioScope;
            if (!*(_QWORD *)kInterAppAudioScope)
            {
LABEL_39:
              v32 = *(int **)(v27 + 72);
              v33 = *(int **)(v27 + 80);
              if (v32 == v33)
                goto LABEL_56;
              while (1)
              {
                v34 = v14[29];
                v35 = v14[30];
                if (v34 == v35)
                {
LABEL_43:
                  v36 = 0;
                  v37 = 0;
                }
                else
                {
                  while (1)
                  {
                    v36 = *(_QWORD *)v34;
                    if (*(_DWORD *)(*(_QWORD *)v34 + 12) == *v32)
                      break;
                    v34 = (CFMutableDictionaryRef)((char *)v34 + 8);
                    if (v34 == v35)
                      goto LABEL_43;
                  }
                  v38 = *(_QWORD *)(v36 + 184);
                  v39 = v38 ? *(_DWORD *)(v38 + 12) : 0;
                  v37 = IPCAUCallbackSender_LaunchRequestComplete(v39, v32[1], 1);
                }
                if (!kInterAppAudioScope)
                  break;
                v40 = *(NSObject **)kInterAppAudioScope;
                if (*(_QWORD *)kInterAppAudioScope)
                  goto LABEL_52;
LABEL_54:
                v32 += 2;
                if (v32 == v33)
                {
                  v32 = *(int **)(v27 + 72);
LABEL_56:
                  *(_QWORD *)(v27 + 80) = v32;
                  IPCAURegistrar::RecordApplicationActiveTime(v14, v16);
                  v11 = 0;
                  goto LABEL_57;
                }
              }
              v40 = MEMORY[0x1E0C81028];
LABEL_52:
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
              {
                v41 = *v32;
                v42 = v32[1];
                *(_DWORD *)buf = 136316418;
                v57 = "IPCAURegistrar.mm";
                v58 = 1024;
                v59 = 730;
                v60 = 1024;
                *(_DWORD *)v61 = v41;
                *(_WORD *)&v61[4] = 2048;
                *(_QWORD *)&v61[6] = v36;
                v62 = 1024;
                *(_DWORD *)v63 = v42;
                *(_WORD *)&v63[4] = 1024;
                *(_DWORD *)&v63[6] = v37;
                _os_log_impl(&dword_18EE07000, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d ping pid %d, rcp %p, token %d, ret = 0x%x", buf, 0x2Eu);
              }
              goto LABEL_54;
            }
          }
          else
          {
            v30 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            v31 = (*(_QWORD *)(v27 + 80) - *(_QWORD *)(v27 + 72)) >> 3;
            *(_DWORD *)buf = 136315650;
            v57 = "IPCAURegistrar.mm";
            v58 = 1024;
            v59 = 721;
            v60 = 1024;
            *(_DWORD *)v61 = v31;
            _os_log_impl(&dword_18EE07000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d checked in previous registration, %d pings", buf, 0x18u);
          }
          goto LABEL_39;
        }
LABEL_27:
        if (kInterAppAudioScope)
        {
          v29 = *(NSObject **)kInterAppAudioScope;
          if (!*(_QWORD *)kInterAppAudioScope)
            goto LABEL_57;
        }
        else
        {
          v29 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v57 = "IPCAURegistrar.mm";
          v58 = 1024;
          v59 = 739;
          _os_log_impl(&dword_18EE07000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d App is trying to publish an AudioComponent without an Info.plist registration.", buf, 0x12u);
        }
LABEL_57:
        v12 = cf;
        v13 = v11;
        goto LABEL_58;
      }
    }
    else
    {
      v19 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      v45 = v17;
      PlatformUtilities::processName(v15);
      v44 = (int)v15;
      v20 = v55;
      v21 = (void **)__p;
      CAFormatter::CAFormatter((CAFormatter *)&v53, a3);
      p_p = &__p;
      *(_DWORD *)buf = 136316674;
      if (v20 < 0)
        p_p = v21;
      v57 = "IPCAURegistrar.mm";
      v58 = 1024;
      v59 = 709;
      v60 = 2080;
      *(_QWORD *)v61 = p_p;
      *(_WORD *)&v61[8] = 1024;
      *(_DWORD *)&v61[10] = a2;
      v62 = 2080;
      *(_QWORD *)v63 = v53;
      *(_WORD *)&v63[8] = 2112;
      v64 = v18;
      v65 = 1024;
      v66 = a6;
      _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d process '%s', port 0x%x, %s, '%@', version %d", buf, 0x3Cu);
      if (v53)
        free(v53);
      LODWORD(v15) = v44;
      v17 = v45;
      if (v55 < 0)
        operator delete(__p);
    }
    goto LABEL_17;
  }
LABEL_58:
  if (v12)
    CFRelease(v12);
  if (v50)
    CFRelease(v50);
  if (v49)
    CFRelease(v49);
  if (!(_DWORD)v13)
    mig_deallocate(v46, v47);
  MEMORY[0x193FFD95C](&v48);
  return v13;
}

void sub_18F0543C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  MEMORY[0x193FFD95C](&a16);
  _Unwind_Resume(a1);
}

BOOL ClientHasInterAppAudioEntitlement(audit_token_t *a1, pid_t *pidp)
{
  __int128 v4;
  int *v5;
  _BOOL8 result;
  __int128 v7;
  __SecTask *v8;
  __SecTask *v9;
  CFTypeRef v10;
  const void *v11;
  CFTypeID v12;
  int Value;
  NSObject *v14;
  unsigned int v15;
  audit_token_t atoken;
  audit_token_t token;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)&a1->val[4];
  *(_OWORD *)atoken.val = *(_OWORD *)a1->val;
  *(_OWORD *)&atoken.val[4] = v4;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, pidp, 0, 0);
  if (ClientHasInterAppAudioEntitlement(audit_token_t &,int &)::bypassEntitlementCheck < 0)
  {
    ClientHasInterAppAudioEntitlement(audit_token_t &,int &)::bypassEntitlementCheck = 0;
    CASmartPreferences::Read((CASmartPreferences *)CFSTR("BypassInterAppEntitlementCheck"), CFSTR("com.apple.coreaudio"), (const __CFString *)&ClientHasInterAppAudioEntitlement(audit_token_t &,int &)::bypassEntitlementCheck, v5);
    if (!ClientHasInterAppAudioEntitlement(audit_token_t &,int &)::bypassEntitlementCheck)
      goto LABEL_6;
    return 1;
  }
  if (ClientHasInterAppAudioEntitlement(audit_token_t &,int &)::bypassEntitlementCheck)
    return 1;
LABEL_6:
  v7 = *(_OWORD *)&a1->val[4];
  *(_OWORD *)token.val = *(_OWORD *)a1->val;
  *(_OWORD *)&token.val[4] = v7;
  v8 = SecTaskCreateWithAuditToken(0, &token);
  if (!v8)
    goto LABEL_13;
  v9 = v8;
  v10 = SecTaskCopyValueForEntitlement(v8, CFSTR("inter-app-audio"), 0);
  if (!v10)
    goto LABEL_12;
  v11 = v10;
  v12 = CFGetTypeID(v10);
  if (v12 != CFBooleanGetTypeID())
  {
    CFRelease(v11);
LABEL_12:
    CFRelease(v9);
    goto LABEL_13;
  }
  Value = CFBooleanGetValue((CFBooleanRef)v11);
  CFRelease(v11);
  CFRelease(v9);
  if (Value)
    return 1;
LABEL_13:
  if (kInterAppAudioScope)
  {
    v14 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      return 0;
  }
  else
  {
    v14 = MEMORY[0x1E0C81028];
  }
  result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (!result)
    return result;
  v15 = *pidp;
  token.val[0] = 136315650;
  *(_QWORD *)&token.val[1] = "IPCAURegistrar.mm";
  LOWORD(token.val[3]) = 1024;
  *(unsigned int *)((char *)&token.val[3] + 2) = 1306;
  HIWORD(token.val[4]) = 1024;
  token.val[5] = v15;
  _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d process %d does not have the 'inter-app-audio' entitlement", (uint8_t *)&token, 0x18u);
  return 0;
}

uint64_t IPCAURegServer_CreateSharedBuffer(audit_token_t *a1, const AudioStreamBasicDescription *a2, uint64_t a3, int a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int64x2_t v39;
  uint64_t *v40;
  uint64_t *v41;
  pid_t pidp;
  _BYTE buf[12];
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  pidp = 0;
  if (ClientHasInterAppAudioEntitlement(a1, &pidp))
  {
    v11 = CADeprecated::TSingleton<IPCAURegistrar>::instance();
    v12 = *(_QWORD *)(v11 + 232);
    v13 = *(_QWORD *)(v11 + 240);
    if (v12 != v13)
    {
      while (1)
      {
        v14 = *(_QWORD **)v12;
        if (*(_DWORD *)(*(_QWORD *)v12 + 12) == pidp)
          break;
        v12 += 8;
        if (v12 == v13)
          goto LABEL_5;
      }
      v17 = operator new();
      SharableMemoryBlock::SharableMemoryBlock((SharableMemoryBlock *)v17);
      *(_DWORD *)(v18 + 56) = 0;
      *(_QWORD *)(v18 + 72) = 0;
      *(_QWORD *)(v18 + 80) = 0;
      *(_BYTE *)(v18 + 92) = 0;
      v19 = (_BYTE *)(v18 + 92);
      *(_QWORD *)(v18 + 64) = 0;
      *(_QWORD *)v18 = &off_1E2907180;
      *(_DWORD *)(v18 + 96) = 2048;
      IPCAUSharedMemoryBase::InitPhase1((IPCAUSharedMemoryBase *)v18, a2, a3, a4);
      *v19 = 1;
      inited = SharableMemoryBlock::InitServer();
      *v19 = 0;
      if (!(_DWORD)inited)
      {
        IPCAUSharedMemoryBase::InitPhase2((IPCAUSharedMemoryBase *)v17);
        v24 = *(_QWORD *)(v17 + 24);
        if (v24)
          v25 = v24 + *(unsigned int *)(v17 + 96) + 2104;
        else
          v25 = 0;
        *(_QWORD *)(v25 + 64) = mach_absolute_time();
        v26 = (_QWORD *)operator new();
        v27 = v26;
        *v26 = a5;
        v26[1] = v17;
        *(_QWORD *)buf = v26;
        v29 = (_QWORD *)v14[26];
        v28 = v14[27];
        if ((unint64_t)v29 >= v28)
        {
          v31 = (_QWORD *)v14[25];
          v32 = v29 - v31;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v34 = v28 - (_QWORD)v31;
          if (v34 >> 2 > v33)
            v33 = v34 >> 2;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            if (v35 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v36 = (char *)operator new(8 * v35);
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[8 * v32];
          *(_QWORD *)buf = 0;
          *(_QWORD *)v37 = v27;
          v30 = v37 + 8;
          if (v29 == v31)
          {
            v39 = vdupq_n_s64((unint64_t)v29);
          }
          else
          {
            do
            {
              v38 = *--v29;
              *v29 = 0;
              *((_QWORD *)v37 - 1) = v38;
              v37 -= 8;
            }
            while (v29 != v31);
            v39 = *(int64x2_t *)(v14 + 25);
          }
          v14[25] = v37;
          v14[26] = v30;
          v14[27] = &v36[8 * v35];
          v41 = (uint64_t *)v39.i64[1];
          v40 = (uint64_t *)v39.i64[0];
          while (v41 != v40)
            std::unique_ptr<RegistrarClientProcess::SharedMemoryBlock>::reset[abi:ne180100](--v41, 0);
          if (v40)
            operator delete(v40);
        }
        else
        {
          *(_QWORD *)buf = 0;
          *v29 = v26;
          v30 = v29 + 1;
        }
        v14[26] = v30;
        std::unique_ptr<RegistrarClientProcess::SharedMemoryBlock>::reset[abi:ne180100]((uint64_t *)buf, 0);
        inited = 0;
        goto LABEL_20;
      }
      v21 = *(_QWORD *)(v17 + 64);
      v20 = *(_QWORD *)(v17 + 72);
      if (v20 != v21)
      {
        do
        {
          v20 -= 56;
          std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>(v20);
        }
        while (v20 != v21);
        *(_QWORD *)(v17 + 72) = v21;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      if (kInterAppAudioScope)
      {
        v22 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
          goto LABEL_20;
      }
      else
      {
        v22 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
        v44 = 1024;
        v45 = 802;
        v46 = 1024;
        v47 = inited;
        _os_log_impl(&dword_18EE07000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d buffer creation failure (%d)", buf, 0x18u);
      }
      goto LABEL_20;
    }
LABEL_5:
    if (kInterAppAudioScope)
    {
      v15 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
      {
LABEL_19:
        inited = 4294967246;
LABEL_20:
        *a6 = 0;
        return inited;
      }
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
      v44 = 1024;
      v45 = 794;
      _os_log_impl(&dword_18EE07000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d unknown process", buf, 0x12u);
    }
    goto LABEL_19;
  }
  return 4294900548;
}

void sub_18F0549DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::unique_ptr<RegistrarClientProcess::SharedMemoryBlock>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void SharableMemoryBlock::MachServerToken::~MachServerToken(SharableMemoryBlock::MachServerToken *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t IPCAURegServer_SubscribeToAUList(audit_token_t *a1, int a2, const void *a3, unsigned int a4)
{
  CFTypeRef v7;
  BOOL v8;
  int v9;
  _QWORD *v10;
  PlatformUtilities *v11;
  CFTypeRef v12;
  CFTypeRef v13;
  NSObject *v14;
  uint64_t v15;
  void **v16;
  uint64_t ClientProcess;
  CADeserializer v19;
  CFTypeRef v20;
  CFTypeRef cf;
  pid_t pidp;
  void *__p;
  char v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  void **v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  pidp = 0;
  if (!ClientHasInterAppAudioEntitlement(a1, &pidp))
    return 4294900548;
  v20 = 0;
  cf = 0;
  CADeserializer::CADeserializer(&v19, a3);
  operator>>();
  operator>>();
  v7 = cf;
  if (cf)
    v8 = v20 == 0;
  else
    v8 = 1;
  v9 = !v8;
  if (v8)
  {
    v15 = 4294967246;
    if (!cf)
      goto LABEL_24;
    goto LABEL_23;
  }
  v10 = (_QWORD *)CADeprecated::TSingleton<IPCAURegistrar>::instance();
  v11 = (PlatformUtilities *)pidp;
  v13 = v20;
  v12 = cf;
  if (kInterAppAudioScope)
  {
    v14 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_22;
  }
  else
  {
    v14 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    PlatformUtilities::processName(v11);
    v16 = v24 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315906;
    v26 = "IPCAURegistrar.mm";
    v27 = 1024;
    v28 = 836;
    v29 = 2080;
    v30 = v16;
    v31 = 1024;
    v32 = a2;
    _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d process '%s', port 0x%x", buf, 0x22u);
    if (v24 < 0)
      operator delete(__p);
  }
LABEL_22:
  ClientProcess = IPCAURegistrar::FindOrCreateClientProcess(v10, 0, a2, (int)v11, v12, (uint64_t)v13);
  v15 = 0;
  *(_BYTE *)(ClientProcess + 32) = 1;
  v7 = cf;
  if (cf)
LABEL_23:
    CFRelease(v7);
LABEL_24:
  if (v20)
    CFRelease(v20);
  if (v9)
    mig_deallocate((vm_address_t)a3, a4);
  MEMORY[0x193FFD95C](&v19);
  return v15;
}

void sub_18F054C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MEMORY[0x193FFD95C](va);
  _Unwind_Resume(a1);
}

uint64_t MIGVariableLengthRefs::Write(MIGVariableLengthRefs *this, const void *a2, vm_size_t size)
{
  _DWORD *v6;
  vm_address_t *v7;
  uint64_t result;
  vm_address_t v9;
  void **v10;
  vm_address_t address;

  v6 = (_DWORD *)*((_QWORD *)this + 4);
  if (v6 && *((_QWORD *)this + 1) >= size)
  {
    *v6 = size;
    goto LABEL_8;
  }
  v7 = (vm_address_t *)*((_QWORD *)this + 5);
  address = 0;
  result = vm_allocate(*MEMORY[0x1E0C83DA0], &address, size, 1);
  v9 = address;
  if ((_DWORD)result)
    v9 = 0;
  *v7 = v9;
  if (!(_DWORD)result)
  {
    **((_DWORD **)this + 6) = size;
    *((_BYTE *)this + 16) = 1;
LABEL_8:
    v10 = (void **)*((_QWORD *)this + 5);
    if (!*v10)
      v10 = (void **)((char *)this + 24);
    memcpy(*v10, a2, size);
    return 0;
  }
  return result;
}

uint64_t IPCAURegServer_RegisterExtensionProcess(_OWORD *a1, int a2, const void *a3, unsigned int a4)
{
  __int128 v7;
  const void *v8;
  BOOL v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  CADeserializer v14;
  CFTypeRef cf;
  const void *v16;
  audit_token_t atoken;
  pid_t pidp;

  pidp = 0;
  v7 = a1[1];
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = v7;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  cf = 0;
  v16 = 0;
  CADeserializer::CADeserializer(&v14, a3);
  operator>>();
  operator>>();
  v8 = v16;
  if (v16)
    v9 = cf == 0;
  else
    v9 = 1;
  v10 = !v9;
  if (v9)
  {
    v12 = 4294967246;
    if (!v16)
      goto LABEL_12;
    goto LABEL_11;
  }
  v11 = (_QWORD *)CADeprecated::TSingleton<IPCAURegistrar>::instance();
  IPCAURegistrar::FindOrCreateClientProcess(v11, 2, a2, pidp, v16, (uint64_t)cf);
  v12 = 0;
  v8 = v16;
  if (v16)
LABEL_11:
    CFRelease(v8);
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (v10)
    mig_deallocate((vm_address_t)a3, a4);
  MEMORY[0x193FFD95C](&v14);
  return v12;
}

void sub_18F054E14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MEMORY[0x193FFD95C](va);
  _Unwind_Resume(a1);
}

void AudioUnitURLOpen(const __CFURL *a1)
{
  unsigned int v1;
  int v2;
  _QWORD *v3;
  unsigned int v4;
  mach_port_name_t reply_port;
  mach_msg_return_t v6;
  int v7;
  const char **v8;
  UInt8 v9[256];
  _BYTE msg[32];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = CFURLGetBytes(a1, v9, 256);
    v2 = 5;
    v3 = (_QWORD *)MEMORY[0x1E0C804E8];
    while (1)
    {
      v4 = *(_DWORD *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
      v27 = 0;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      memset(msg, 0, sizeof(msg));
      *(_QWORD *)&msg[24] = *v3;
      if (v1 > 0x100)
        return;
      __memcpy_chk();
      LODWORD(v11) = v1;
      reply_port = mig_get_reply_port();
      *(_DWORD *)msg = 5395;
      *(_QWORD *)&msg[8] = __PAIR64__(reply_port, v4);
      *(_QWORD *)&msg[16] = 0x15F9D00000000;
      if (MEMORY[0x1E0C85B60])
      {
        voucher_mach_msg_set((mach_msg_header_t *)msg);
        reply_port = *(_DWORD *)&msg[12];
      }
      v6 = mach_msg((mach_msg_header_t *)msg, 275, ((v1 + 3) & 0xFFFFFFFC) + 36, 0x2Cu, reply_port, gMediaServerTimeout, 0);
      v7 = v6;
      if ((v6 - 268435458) <= 0xE && ((1 << (v6 - 2)) & 0x4003) != 0)
      {
        mig_put_reply_port(*(mach_port_t *)&msg[12]);
      }
      else
      {
        if (!v6)
        {
          if (*(_DWORD *)&msg[20] == 71)
          {
            v7 = -308;
          }
          else if (*(_DWORD *)&msg[20] == 90113)
          {
            v7 = -300;
            if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_QWORD *)&msg[4] == 36)
            {
              v7 = v11;
              if (!(_DWORD)v11)
                return;
            }
          }
          else
          {
            v7 = -301;
          }
          goto LABEL_22;
        }
        mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
      }
      if (v7 != 268435460)
        goto LABEL_23;
      v7 = 268435460;
      if ((*(_WORD *)msg & 0x1F00) == 0x1100)
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
LABEL_23:
      if (v7 == 268435459)
      {
        sleep(1u);
        v8 = (const char **)CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
        AURegistrationServerConnection::Connect(v8);
        if (--v2)
          continue;
      }
      return;
    }
  }
}

void sub_18F055248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F055404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F0555F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F0556EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F055770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F055878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18F055964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F0559C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F055A34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F055B68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MPEGAudioFile::~MPEGAudioFile(MPEGAudioFile *this)
{
  MPEGAudioFile::~MPEGAudioFile(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  CACFDictionary *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = &off_1E2903528;
  if (*((_QWORD *)this + 20))
  {
    v2 = BaseOpaqueObject::ResolveOpaqueRef();
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = (CACFDictionary *)*((_QWORD *)this + 52);
  if (v3)
  {
    CACFDictionary::~CACFDictionary(v3);
    MEMORY[0x193FFE460]();
  }
  v4 = *((_QWORD *)this + 21);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*((_QWORD *)this + 20))
  {
    v5 = BaseOpaqueObject::ResolveOpaqueRef();
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v6 = (void *)*((_QWORD *)this + 53);
  if (v6)
    free(v6);
  AudioFileObject::~AudioFileObject(this);
}

uint64_t MPEGAudioFile::Create(MPEGAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  AudioFormatID mFormatID;
  int v4;
  BOOL v5;
  BOOL v6;

  mFormatID = a3->mFormatID;
  v4 = *((_DWORD *)this + 21);
  v5 = mFormatID != 778924083 || v4 == 1297106739;
  if (v5
    && (mFormatID == 778924082 ? (v6 = v4 == 1297106738) : (v6 = 1), v6 && (mFormatID != 778924081 || v4 == 1297106737)))
  {
    return AudioFileObject::Create(this, a2, a3);
  }
  else
  {
    return 1718449215;
  }
}

uint64_t MPEGAudioFile::OpenFromDataSource(MPEGAudioFile *this)
{
  MPEGAudioFile *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t FPosForNextMatchingSyncWordDS;
  uint64_t v6;
  DataSource *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  double v14;
  int v15;
  int64_t v16;
  int v17;
  uint64_t v18;
  int64_t v19;
  NSObject *v20;
  const char *v21;
  uint64_t i;
  unsigned int v24;
  int v25;
  size_t v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  unsigned __int32 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _BOOL4 v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  const __CFString *Value;
  const __CFString *v40;
  const __CFString *v41;
  uint64_t v42;
  MPEGAudioFile *v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  unint64_t v60;
  unint64_t v61;
  double v62;
  int v63;
  int64_t v64;
  MPEGAudioFile *v65;
  int64_t v66;
  __int16 *v67;
  unsigned int v68;
  int64_t v69;
  uint64_t v70;
  __n128 v71[4];
  int v72[4];
  __int128 v73;
  unint64_t v74;
  unsigned int v75[2];
  int64_t v76;
  uint64_t v77;
  unsigned int v78[2];
  uint64_t v79;
  _QWORD v80[2];
  uint64_t v81;
  const __CFDictionary *v82;
  unsigned int v83;
  unsigned int v84[2];
  unsigned int v85;
  uint8_t buf[80];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v1 = this;
  v90 = *MEMORY[0x1E0C80C00];
  v69 = 0;
  MPEGAudioFile::ParseID3Tags(this);
  v68 = 0;
  v65 = v1;
  if (*((_WORD *)v1 + 92) && *((_QWORD *)v1 + 20))
  {
    v84[0] = 4;
    v2 = BaseOpaqueObject::ResolveOpaqueRef();
    if (v2)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, unsigned int *))(*(_QWORD *)v2 + 32))(v2, 0, 0, 1953720698, v84, &v68);
      v3 = v68;
    }
    else
    {
      v3 = 0;
    }
    v70 = 0;
    v4 = 0;
    if (!(*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)v1 + 13) + 24))(*((_QWORD *)v1 + 13), &v70))
    {
      for (i = v3; ; i += v24)
      {
        LODWORD(v79) = 10;
        if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint8_t *, uint64_t *))(**((_QWORD **)v65 + 13) + 48))(*((_QWORD *)v65 + 13), 0, i, 10, buf, &v79)|| buf[0] != 73|| buf[1] != 68|| buf[2] != 51)
        {
          break;
        }
        v24 = ID3Size(0xAu, buf, v72);
        v4 += v24;
      }
    }
    v1 = v65;
    v64 = v3 + (unint64_t)v4;
  }
  else
  {
    v64 = 0;
  }
  FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(_QWORD, int64_t *))(**((_QWORD **)v1 + 13) + 24))(*((_QWORD *)v1 + 13), &v69);
  if ((_DWORD)FPosForNextMatchingSyncWordDS)
    goto LABEL_54;
  v63 = 0;
  v6 = 0;
  v7 = (DataSource *)*((_QWORD *)v65 + 13);
  v66 = v69;
  v67 = (__int16 *)((char *)v65 + 186);
  v79 = 0;
  v8 = 2;
  v83 = 0;
  *(_QWORD *)v78 = 0;
  while (1)
  {
    while (1)
    {
LABEL_11:
      while (v8 == 3)
      {
        v9 = v83;
        v10 = v78[1];
        v70 = v6;
        LODWORD(v77) = 0;
        LODWORD(v76) = 0;
        *(_QWORD *)v72 = 0;
        v85 = 0;
        if ((*(unsigned int (**)(DataSource *, _QWORD, uint64_t, uint64_t, uint64_t *, int64_t *))(*(_QWORD *)v7 + 48))(v7, 0, v6, 4, &v77, &v76))
        {
LABEL_13:
          v8 = 1;
          continue;
        }
        buf[0] = 0;
        memset(&buf[8], 0, 64);
        v11 = ParseMPEGSyncWord(bswap32(v77), (uint64_t)&buf[8]);
        v8 = 0;
        if (v11)
        {
          v12 = 0;
          v13 = 0;
          v84[0] = buf[12];
          LODWORD(v82) = buf[13];
          v14 = *(double *)&buf[32];
          v15 = *(_DWORD *)&buf[60];
          v75[0] = *(_DWORD *)&buf[16];
          v16 = v6 + *(unsigned int *)&buf[16];
          while (1)
          {
            v17 = 5;
LABEL_17:
            switch(v17)
            {
              case 4:
                v16 += v75[0];
                continue;
              case 5:
                if (GetFPosForNextSyncWordDS(v7, (unsigned __int16 *)v67, v16, v66, &v70, v84, (unsigned int *)&v82, v75, (double *)v72, &v85) == -39)goto LABEL_13;
                v17 = 6;
                if (v16 != v70)
                {
                  ++v12;
                  v16 = v70;
                  if (v12 >= 4)
                    goto LABEL_43;
                }
                goto LABEL_17;
              case 6:
                if (v84[0] == v9)
                  v17 = 7;
                else
                  v17 = 9;
                goto LABEL_17;
              case 7:
                if ((_DWORD)v82 == v10)
                  v17 = 8;
                else
                  v17 = 9;
                goto LABEL_17;
              case 8:
                if (v14 == *(double *)v72)
                  v17 = 11;
                else
                  v17 = 9;
                goto LABEL_17;
              case 9:
                if (++v12 > 3)
                {
LABEL_43:
                  v8 = 0;
                  goto LABEL_11;
                }
                ++v16;
                break;
              case 10:
                ++v13;
                v17 = 4;
                if (v13 == 4)
                  goto LABEL_13;
                goto LABEL_17;
              case 11:
                if (v15 == v85)
                  v17 = 10;
                else
                  v17 = 9;
                goto LABEL_17;
              default:
                goto LABEL_17;
            }
          }
        }
      }
      if (!v8)
        break;
      if (v8 == 1)
      {
        *((_QWORD *)v65 + 9) = v64;
        *(_QWORD *)v78 = 0;
        v76 = 0;
        v74 = 0;
        *(_QWORD *)v75 = 0;
        *(_OWORD *)v72 = 0u;
        v73 = 0u;
        FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(_QWORD, int64_t *))(**((_QWORD **)v65 + 13)
                                                                                            + 24))(*((_QWORD *)v65 + 13), &v76);
        if ((_DWORD)FPosForNextMatchingSyncWordDS)
          goto LABEL_51;
        v18 = *((_QWORD *)v65 + 9);
        v77 = v18;
        v19 = *((_WORD *)v65 + 93) == 1 ? v76 - 128 : v76;
        FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((_QWORD **)v65 + 13) + 48))(*((_QWORD *)v65 + 13), 0, v18, 4, &v78[1], v78);
        if ((_DWORD)FPosForNextMatchingSyncWordDS)
          goto LABEL_51;
        FPosForNextMatchingSyncWordDS = 1685348671;
        memset(v71, 0, sizeof(v71));
        v25 = ParseMPEGSyncWord(bswap32(v78[1]), (uint64_t)v71);
        LOBYTE(v70) = v25;
        if (!v25)
          goto LABEL_51;
        v26 = v71[0].n128_u32[2];
        if (!v71[0].n128_u32[2] || (v27 = v18 + v71[0].n128_u32[2], v27 > v19))
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_51;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "MP3AudioFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1377;
          v28 = MEMORY[0x1E0C81028];
          goto LABEL_68;
        }
        v29 = v71[0].n128_u8[5];
        *((_DWORD *)v65 + 36) = v71[0].n128_u8[4];
        *((_DWORD *)v65 + 37) = v29;
        v30 = v71[0].n128_u32[3] + 8;
        *((_DWORD *)v65 + 52) = v71[0].n128_u32[3] + 8;
        if (v26 > v30)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "MP3AudioFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1383;
            v28 = MEMORY[0x1E0C81028];
LABEL_68:
            _os_log_impl(&dword_18EE07000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d  Invalid Packet Size", buf, 0x12u);
          }
LABEL_51:
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "MP3AudioFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1532;
            v20 = MEMORY[0x1E0C81028];
            v21 = "%25s:%-5d  ParseFirstPacket Failed";
            goto LABEL_53;
          }
          goto LABEL_54;
        }
        v31 = MPEGAudioMaximumNumberOfDependentPackets((const AudioStreamBasicDescription *)&v71[1].n128_i8[8], v71[1].n128_u32[1]);
        (*(void (**)(MPEGAudioFile *, uint64_t))(*(_QWORD *)v65 + 680))(v65, v31);
        *(__n128 *)v72 = *(__n128 *)((char *)&v71[1] + 8);
        v73 = *(__int128 *)((char *)&v71[2] + 8);
        v74 = v71[3].n128_u64[1];
        if (v71[1].n128_f64[1] <= 0.0)
          goto LABEL_51;
        FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(MPEGAudioFile *, int *, __n128))(*(_QWORD *)v65
                                                                                                  + 176))(v65, v72, *(__n128 *)((char *)&v71[1] + 8));
        if ((_DWORD)FPosForNextMatchingSyncWordDS)
          goto LABEL_51;
        if (*((_QWORD *)v65 + 20))
        {
          v85 = 0;
          v83 = 4;
          v32 = BaseOpaqueObject::ResolveOpaqueRef();
          if (v32)
          {
            if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, unsigned int *))(*(_QWORD *)v32 + 32))(v32, 0, 0, 1717792372, &v83, &v85)&& v85)
            {
              v33 = 1;
              do
              {
                v84[0] = 1129270605;
                v84[1] = v33 - 1;
                v83 = 12;
                v34 = BaseOpaqueObject::ResolveOpaqueRef();
                if (!v34
                  || (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v34 + 32))(v34, 8, v84, 1718185574, &v83, &v79)|| (v82 = 0, v83 = 8, (v38 = BaseOpaqueObject::ResolveOpaqueRef()) == 0)|| (*(unsigned int (**)(uint64_t, uint64_t, _QWORD *, uint64_t, unsigned int *, const __CFDictionary **))(*(_QWORD *)v38 + 32))(v38, 4, v80, 1717854580, &v83, &v82))
                {
                  v35 = 0;
                }
                else
                {
                  Value = (const __CFString *)CFDictionaryGetValue(v82, CFSTR("identifier"));
                  v40 = (const __CFString *)CFDictionaryGetValue(v82, CFSTR("text"));
                  v35 = 0;
                  if (Value)
                  {
                    v41 = v40;
                    if (v40)
                    {
                      if (CFStringCompare(Value, CFSTR("iTunSMPB"), 0)
                        || (v88 = 0u,
                            v89 = 0u,
                            v87 = 0u,
                            memset(buf, 0, sizeof(buf)),
                            !CFStringGetCString(v41, (char *)buf, 128, 0x201u)))
                      {
                        v35 = 0;
                      }
                      else
                      {
                        if (!strcmp((const char *)buf, " 00000000 00000000 00000000 0000000000000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000"))break;
                        v35 = ParseiTunesSMPBData((char *)&buf[9], 119, (AudioFilePacketTableInfo *)v65 + 24) == 0;
                      }
                    }
                  }
                  CFRelease(v82);
                }
                v36 = v33++ >= v85;
                v37 = !v36 && !v35;
              }
              while (v37);
            }
          }
        }
        CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)v75, v26, 0);
        v42 = *(_QWORD *)v75;
        FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, size_t, _QWORD, unsigned int *))(**((_QWORD **)v65 + 13) + 48))(*((_QWORD *)v65 + 13), 0, v18, v26, *(_QWORD *)v75, v78);
        if ((_DWORD)FPosForNextMatchingSyncWordDS)
        {
LABEL_136:
          if (!v42)
            goto LABEL_138;
          goto LABEL_137;
        }
        v43 = v65;
        if (GetMetaHeader((uint64_t)v65 + 232, (unsigned __int8 *)v42, v26))
        {
          v44 = *((_DWORD *)v65 + 60);
          if ((v44 & 2) != 0)
          {
            v45 = *((_DWORD *)v65 + 62);
            v36 = v45 >= v26;
            v46 = v45 - v26;
            if (!v36)
              v46 = 0;
            *((_DWORD *)v65 + 56) = v46;
          }
          if ((v44 & 1) != 0)
          {
            v54 = *((unsigned int *)v65 + 61);
            *((_QWORD *)v65 + 27) = v54;
            v55 = v44 & 1;
            v56 = (double)v54;
            *((double *)v65 + 24) = (double)gaSamplesPerFrame[3 * (*((_DWORD *)v65 + 36) - 1)
                                                            + *((_DWORD *)v65 + 37)
                                                            - 1]
                                  / (double)*(double *)v72
                                  * (double)v54;
LABEL_127:
            if (*((_QWORD *)v43 + 48) == -1 && (v44 & 0x20) != 0)
            {
              v57 = *((unsigned __int16 *)v43 + 186);
              *((_DWORD *)v43 + 98) = v57;
              v58 = *((unsigned __int16 *)v43 + 187);
              *((_DWORD *)v43 + 99) = v58;
              if (v55)
              {
                *((_QWORD *)v43 + 48) = *((_QWORD *)v43 + 27) * *((unsigned int *)v43 + 11) - (v58 + v57);
                goto LABEL_133;
              }
LABEL_135:
              v77 = v27;
              FPosForNextMatchingSyncWordDS = GetFPosForNextMatchingSyncWordDS(*((DataSource **)v43 + 13), (unsigned __int16 *)v67, *((double *)v43 + 3), *((_DWORD *)v43 + 13), *((_DWORD *)v43 + 36), *((_DWORD *)v43 + 37), v27, v76, &v77);
              *((_QWORD *)v65 + 9) = v77;
              goto LABEL_136;
            }
            if (!v55)
              goto LABEL_135;
LABEL_133:
            v59 = *((double *)v43 + 24);
            if (v59 > 0.0)
            {
              LODWORD(v56) = *((_DWORD *)v43 + 56);
              *((_DWORD *)v43 + 57) = ((double)*(unint64_t *)&v56 * 8.0 / v59);
            }
            goto LABEL_135;
          }
          if ((v44 & 0x10) == 0)
          {
            if (*((_QWORD *)v65 + 48) == -1 && (v44 & 0x20) != 0)
            {
              *((_DWORD *)v65 + 98) = *((unsigned __int16 *)v65 + 186);
              *((_DWORD *)v65 + 99) = *((unsigned __int16 *)v65 + 187);
            }
            goto LABEL_135;
          }
          v79 = v18 + v26;
          FPosForNextMatchingSyncWordDS = GetFPosForNextMatchingSyncWordDS(*((DataSource **)v65 + 13), (unsigned __int16 *)v67, *((double *)v65 + 3), *((_DWORD *)v65 + 13), *((_DWORD *)v65 + 36), *((_DWORD *)v65 + 37), v18 + v26, v76, &v79);
          if (!(_DWORD)FPosForNextMatchingSyncWordDS)
          {
            FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((_QWORD **)v65 + 13) + 48))(*((_QWORD *)v65 + 13), 0, v79, 4, &v78[1], v78);
            if (!(_DWORD)FPosForNextMatchingSyncWordDS)
            {
              buf[0] = 0;
              memset(&buf[8], 0, 64);
              if (ParseMPEGSyncWord(bswap32(v78[1]), (uint64_t)&buf[8]))
              {
                v44 = *((_DWORD *)v65 + 60);
                if ((v44 & 2) != 0)
                {
                  LODWORD(v60) = *((_DWORD *)v65 + 56);
                  LODWORD(v56) = *(_DWORD *)&buf[24];
                  v61 = 0.125;
                  v62 = (double)v60 / ((double)*(unint64_t *)&v56 * 0.125);
                  *((double *)v65 + 24) = v62;
                  LODWORD(v61) = DWORD1(v73);
                  v56 = *(double *)v72 / (double)v61;
                  *((_QWORD *)v65 + 27) = vcvtpd_u64_f64(v62 * v56);
                  v55 = 1;
                }
                else
                {
                  v55 = 0;
                }
                v43 = v65;
                goto LABEL_127;
              }
              FPosForNextMatchingSyncWordDS = 1685348671;
            }
          }
          if (!v42)
          {
LABEL_138:
            if (!(_DWORD)FPosForNextMatchingSyncWordDS)
              return FPosForNextMatchingSyncWordDS;
            goto LABEL_51;
          }
        }
        else
        {
          v79 = v42;
          v80[0] = v42;
          v80[1] = v42 + v26;
          v81 = 0;
          if ((v42 & 3) != 0)
          {
            v47 = 0;
            v48 = v42 + 1;
            v49 = (unsigned __int8 *)v42;
            do
            {
              if ((unint64_t)v49 >= v42 + v26)
                v50 = 255;
              else
                v50 = *v49;
              v47 = v50 | (v47 << 8);
              ++v49;
              v37 = (v48++ & 3) == 0;
            }
            while (!v37);
            v79 = v42 + ((v42 ^ 3) & 3) + 1;
            HIDWORD(v81) = 8 * ((v42 ^ 3) & 3) + 8;
            LODWORD(v81) = v47 << ((8 * ((v42 ^ 3) & 3)) ^ 0x18);
          }
          buf[0] = 0;
          memset(&buf[24], 0, 24);
          *(_OWORD *)&buf[2] = 0uLL;
          v51 = VBRIHeader::Deserialize((uint64_t)buf, (uint64_t)&v79, 0);
          if (!v51)
          {
            v52 = *(unsigned __int16 *)&buf[2];
            v53 = *(unsigned int *)&buf[8];
            *((_DWORD *)v65 + 56) = *(_DWORD *)&buf[4];
            *((_DWORD *)v65 + 57) = v52;
            *((_QWORD *)v65 + 27) = v53;
          }
          if (*(_QWORD *)&buf[24])
            operator delete(*(void **)&buf[24]);
          if (!v51)
          {
            *((_DWORD *)v65 + 56) -= v26;
            v56 = *((double *)v65 + 3);
            *((double *)v65 + 24) = (double)(*((_QWORD *)v65 + 27) * (unint64_t)*((unsigned int *)v65 + 11))
                                  / v56;
            goto LABEL_133;
          }
          FPosForNextMatchingSyncWordDS = 0;
          if (!v42)
            goto LABEL_138;
        }
LABEL_137:
        free((void *)v42);
        goto LABEL_138;
      }
      if (GetFPosForNextSyncWordDS(v7, (unsigned __int16 *)v67, v64, v66, &v79, &v83, &v78[1], v78, 0, 0))goto LABEL_69;
      v8 = 3;
      v6 = v79;
      v64 = v79;
    }
    if (++v63 > 9)
      break;
    ++v64;
    v8 = 2;
  }
LABEL_69:
  FPosForNextMatchingSyncWordDS = 1685348671;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "MP3AudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1526;
    v20 = MEMORY[0x1E0C81028];
    v21 = "%25s:%-5d  Problem scanning for packets";
LABEL_53:
    _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0x12u);
  }
LABEL_54:
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "MP3AudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1065;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MPEGAudioFile::OpenFromDataSource failed", buf, 0x12u);
  }
  return FPosForNextMatchingSyncWordDS;
}

void sub_18F056950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;

  if (v34)
    free(v34);
  _Unwind_Resume(exception_object);
}

uint64_t MPEGAudioFile::InitializeDataSource(MPEGAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t result;
  AudioFormatID mFormatID;
  int v5;

  result = 1718449215;
  mFormatID = a2->mFormatID;
  v5 = *((_DWORD *)this + 21);
  if ((mFormatID != 778924083 || v5 == 1297106739) && (mFormatID != 778924082 || v5 == 1297106738))
  {
    if (mFormatID != 778924081 || v5 == 1297106737)
      return 0;
    else
      return 1718449215;
  }
  return result;
}

uint64_t MPEGAudioFile::Close(MPEGAudioFile *this)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  _DWORD v9[4];

  if ((*((_BYTE *)this + 100) & 2) == 0 || *((_BYTE *)this + 409))
    return 0;
  v8 = 0;
  v3 = *(_QWORD *)this;
  if (*((_BYTE *)this + 408))
  {
    v4 = 0;
    v5 = 1231971951;
    v6 = 0x2000000;
  }
  else
  {
    v4 = (*(uint64_t (**)(MPEGAudioFile *))(v3 + 240))(this);
    v3 = *(_QWORD *)this;
    v5 = 1483304551;
    v6 = 50331648;
  }
  v7 = (*(uint64_t (**)(MPEGAudioFile *))(v3 + 224))(this);
  v9[0] = bswap32(v5);
  v9[1] = v6;
  v9[2] = bswap32(v4);
  v9[3] = bswap32(v7);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _DWORD *, int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, (*((_DWORD *)this + 101) + *((_DWORD *)this + 100)), 16, v9, &v8);
}

uint64_t MPEGAudioFile::ReadPackets(MPEGAudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  char *v7;
  unsigned int *v8;
  uint64_t v9;
  BOOL v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  AudioStreamPacketDescription *v33;
  unsigned int *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  UInt32 *p_mDataByteSize;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  int v55;
  unsigned int v56;
  _BYTE buf[12];
  _DWORD v58[3];
  uint64_t v59;

  v7 = a7;
  v8 = a6;
  v9 = a5;
  v59 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 10))
    return AudioFileObject::ReadPackets(this, a2, a3, a4, a5, a6, a7);
  if (a4)
    v14 = a7 == 0;
  else
    v14 = 0;
  v15 = v14;
  v55 = v15;
  if (!a6 || (v16 = *a6, !(_DWORD)v16))
  {
    v18 = 2003334207;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "MP3AudioFile.cpp";
      LOWORD(v58[0]) = 1024;
      *(_DWORD *)((char *)v58 + 2) = 835;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid num packets parameter", buf, 0x12u);
    }
    return v18;
  }
  v17 = (*(uint64_t (**)(MPEGAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, v16 + a5, 0, 1);
  if (v17)
  {
    if (v17 == -39)
      return 0;
    else
      return v17;
  }
  v19 = (uint64_t *)*((_QWORD *)this + 15);
  if (v19)
  {
    v20 = v19[3];
    if (v20 <= v9)
    {
      if (a3)
        *a3 = 0;
      v18 = 0;
      *v8 = 0;
      return v18;
    }
    v52 = *v8;
    if (v52 + v9 > v20)
    {
      LODWORD(v52) = v20 - v9;
      *v8 = v20 - v9;
    }
    v46 = a3;
    v47 = v9;
    if ((v55 & 1) != 0)
    {
      v51 = 0;
    }
    else
    {
      v49 = v19;
      v56 = 0;
      v21 = v52;
      if ((_DWORD)v52)
      {
        v51 = 0;
        v22 = 0;
        v48 = v8;
        while (1)
        {
          v23 = (uint64_t *)*((_QWORD *)this + 15);
          v24 = v23[3];
          v53 = v21;
          v25 = v9 + (unint64_t)v21 >= v24 ? v24 - v9 : v21;
          v50 = v22;
          if (v24 <= v9)
          {
            v26 = 0;
            LODWORD(v28) = 0;
          }
          else
          {
            CompressedPacketTable::operator[]((uint64_t)buf, v23, v9);
            v26 = v58[0];
            if (v25 < 2)
            {
              LODWORD(v28) = 1;
            }
            else
            {
              v27 = *(_QWORD *)buf;
              v28 = 1;
              v29 = v58[0];
              do
              {
                CompressedPacketTable::operator[]((uint64_t)buf, v23, v28 + v9);
                v30 = v27 + v29;
                v27 = *(_QWORD *)buf;
                if (v30 < *(uint64_t *)buf)
                  break;
                v29 = v58[0];
                v28 = (v28 + 1);
                v26 += v58[0];
              }
              while (v25 > v28);
            }
          }
          CompressedPacketTable::operator[]((uint64_t)buf, v49, v9);
          v56 = v26;
          v31 = (*(uint64_t (**)(MPEGAudioFile *, uint64_t, _QWORD, unsigned int *, char *))(*(_QWORD *)this + 72))(this, a2, *(_QWORD *)buf, &v56, v7);
          v18 = v31;
          if ((_DWORD)v31 != -39 && (_DWORD)v31 != 0)
            return v18;
          v21 = v53 - v28;
          v22 = v28 + v50;
          v7 += v56;
          v51 += v56;
          v9 += v28;
          v8 = v48;
          v33 = a4;
          if ((int)v28 + v50 >= *v48)
            goto LABEL_49;
        }
      }
      v22 = 0;
      v51 = 0;
      v33 = a4;
LABEL_49:
      LODWORD(v52) = v22;
      v19 = v49;
      if (!v33)
        goto LABEL_64;
    }
    v34 = v8;
    v35 = v19;
    CompressedPacketTable::operator[]((uint64_t)buf, v19, v47);
    if ((_DWORD)v52)
    {
      v36 = 0;
      v37 = *(_QWORD *)buf;
      v38 = v58[0];
      p_mDataByteSize = &a4->mDataByteSize;
      v40 = *(_QWORD *)buf;
      do
      {
        if (v55)
          v41 = 0;
        else
          v41 = v37;
        *(_QWORD *)(p_mDataByteSize - 3) = v40 - v41;
        *(p_mDataByteSize - 1) = 0;
        *p_mDataByteSize = v38;
        v42 = v36 + 1;
        if (v36 + 1 < (unint64_t)v52)
        {
          CompressedPacketTable::operator[]((uint64_t)buf, v35, v47 + 1 + v36);
          v43 = v40 + v38;
          v40 = *(_QWORD *)buf;
          v38 = v58[0];
          v44 = __OFSUB__(*(_QWORD *)buf, v43);
          v45 = *(_QWORD *)buf - v43;
          if ((v45 < 0) ^ v44 | (v45 == 0))
            v45 = 0;
          v37 += v45;
        }
        p_mDataByteSize += 4;
        v36 = v42;
      }
      while (v52 != v42);
    }
    else
    {
      LODWORD(v52) = 0;
    }
    v8 = v34;
LABEL_64:
    if (v46)
      *v46 = v51;
    v18 = 0;
    *v8 = v52;
    return v18;
  }
  return 1685348671;
}

uint64_t MPEGAudioFile::WritePackets(MPEGAudioFile *this, uint64_t a2, uint64_t a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, unsigned int *a7)
{
  const AudioStreamPacketDescription *v10;
  UInt32 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  UInt32 mDataByteSize;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  const char *v24;
  int v25;
  size_t v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  char *v31;
  const AudioStreamPacketDescription *v33;
  unint64_t v34;
  UInt32 v35;
  UInt32 *p_mDataByteSize;
  uint64_t v37;
  UInt32 v38;
  BOOL v39;
  const AudioStreamPacketDescription *v40;
  unsigned int v41;
  size_t v42;
  void *v43;
  int v44;
  _BYTE v45[18];
  _BYTE buf[12];
  _DWORD v47[17];
  uint64_t v48;

  v10 = a4;
  v48 = *MEMORY[0x1E0C80C00];
  v14 = *((_DWORD *)this + 10);
  v15 = *((_QWORD *)this + 9);
  v44 = 0;
  if (a5)
    goto LABEL_2;
  v17 = *((_QWORD *)this + 15);
  if (v17)
  {
    if (*(_QWORD *)(v17 + 24))
      goto LABEL_2;
  }
  if (*((_BYTE *)this + 409))
    goto LABEL_2;
  MPEGPacketParser::MPEGPacketParser((MPEGPacketParser *)buf, a7, a3);
  if (!buf[0])
    goto LABEL_2;
  *((_DWORD *)this + 100) = v15;
  if (v14)
  {
    v41 = 1231971951;
    mDataByteSize = v14;
  }
  else
  {
    mDataByteSize = v10->mDataByteSize;
    v41 = 1483304551;
  }
  v26 = mDataByteSize;
  CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v43, mDataByteSize, 1);
  v40 = v10;
  v27 = v47[12];
  v42 = v26;
  bzero(v43, v26);
  *(_QWORD *)v43 = *(_QWORD *)a7;
  v28 = bswap32(v41);
  *((_DWORD *)this + 101) = 4;
  if (LOBYTE(v47[0]) != 1)
    goto LABEL_36;
  if (v27 == 2)
  {
    v29 = 36;
    v30 = 36;
  }
  else
  {
LABEL_36:
    v30 = 21;
    if (LOBYTE(v47[0]) != 1 && v27 == 1)
      v29 = 13;
    else
      v29 = 21;
    if (LOBYTE(v47[0]) != 1 && v27 == 1)
      v30 = 13;
  }
  *((_DWORD *)this + 101) = v29;
  v31 = (char *)v43 + v30;
  *(_DWORD *)v31 = v28;
  *((_DWORD *)v31 + 1) = 0;
  *((_QWORD *)v31 + 1) = 0;
  v10 = v40;
  v16 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, size_t, void *, int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v15, v26, v43, &v44);
  if ((_DWORD)v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v45 = 136315394;
      *(_QWORD *)&v45[4] = "MP3AudioFile.cpp";
      *(_WORD *)&v45[12] = 1024;
      *(_DWORD *)&v45[14] = 990;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  WritePackets: Failed to Write Xing Packet", v45, 0x12u);
    }
  }
  else
  {
    v15 += v42;
    *((_QWORD *)this + 9) = v15;
  }
  if (v43)
    free(v43);
  if (!(_DWORD)v16)
  {
LABEL_2:
    if (v14)
      return AudioFileObject::WritePackets(this, a2, a3, a4, a5, a6, a7);
    if (a6)
    {
      if (*a6)
      {
        *(_QWORD *)v45 = 0;
        *(_QWORD *)&v45[8] = 0;
        (*(void (**)(MPEGAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1);
        v19 = *((_QWORD *)this + 15);
        if (v19)
        {
          if (*(_QWORD *)(v19 + 24) == a5)
          {
            if (v10)
            {
LABEL_15:
              v20 = *(_QWORD *)(v19 + 24);
              if (v20)
              {
                CompressedPacketTable::operator[]((uint64_t)buf, (uint64_t *)v19, v20 - 1);
                v15 += *(_QWORD *)buf + v47[0];
              }
              v16 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v15, a3, a7, &v44);
              if ((_DWORD)v16)
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  return v16;
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "MP3AudioFile.cpp";
                LOWORD(v47[0]) = 1024;
                *(_DWORD *)((char *)v47 + 2) = 1030;
                v21 = MEMORY[0x1E0C81028];
                v22 = "%25s:%-5d  GetDataSource()->WriteBytes Failed";
LABEL_30:
                _os_log_impl(&dword_18EE07000, v21, OS_LOG_TYPE_ERROR, v22, buf, 0x12u);
                return v16;
              }
              v33 = v10;
              if (a5)
              {
                CompressedPacketTable::operator[]((uint64_t)buf, (uint64_t *)v19, 0);
                v33 = (const AudioStreamPacketDescription *)buf;
              }
              if (*a6)
              {
                v34 = 0;
                v35 = v33->mDataByteSize;
                p_mDataByteSize = &v10->mDataByteSize;
                do
                {
                  v37 = *((_QWORD *)this + 15);
                  if (v37)
                  {
                    v37 = *(_QWORD *)(v37 + 24);
                    if (v37)
                    {
                      CompressedPacketTable::operator[]((uint64_t)buf, (uint64_t *)v19, v37 - 1);
                      v37 = *(_QWORD *)buf + v47[0];
                    }
                  }
                  *(_QWORD *)v45 = v37;
                  v38 = *p_mDataByteSize;
                  *(_DWORD *)&v45[8] = 0;
                  *(_DWORD *)&v45[12] = v38;
                  AudioFileObject::AppendPacket(this, (const AudioStreamPacketDescription *)v45);
                  if (*((_BYTE *)this + 408))
                    v39 = v38 == v35;
                  else
                    v39 = 1;
                  if (!v39)
                    *((_BYTE *)this + 408) = 0;
                  ++v34;
                  p_mDataByteSize += 4;
                }
                while (v34 < *a6);
              }
              return 0;
            }
LABEL_28:
            v16 = 1885563711;
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              return v16;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "MP3AudioFile.cpp";
            LOWORD(v47[0]) = 1024;
            *(_DWORD *)((char *)v47 + 2) = 1020;
            v21 = MEMORY[0x1E0C81028];
            v22 = "%25s:%-5d  Packet Descriptions were not provided";
            goto LABEL_30;
          }
        }
        else if (!a5)
        {
          v19 = operator new();
          v25 = *((_DWORD *)this + 11);
          *(_OWORD *)v19 = 0u;
          *(_OWORD *)(v19 + 16) = 0u;
          *(_DWORD *)(v19 + 32) = v25;
          *((_QWORD *)this + 15) = v19;
          if (v10)
            goto LABEL_15;
          goto LABEL_28;
        }
        return 1885563711;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "MP3AudioFile.cpp";
      LOWORD(v47[0]) = 1024;
      *(_DWORD *)((char *)v47 + 2) = 1007;
      v23 = MEMORY[0x1E0C81028];
      v24 = "%25s:%-5d  WritePackets Failed - *ioNumPackets == 0";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "MP3AudioFile.cpp";
      LOWORD(v47[0]) = 1024;
      *(_DWORD *)((char *)v47 + 2) = 1006;
      v23 = MEMORY[0x1E0C81028];
      v24 = "%25s:%-5d  WritePackets Failed - ioNumPackets == NULL";
    }
    _os_log_impl(&dword_18EE07000, v23, OS_LOG_TYPE_ERROR, v24, buf, 0x12u);
    return 0;
  }
  return v16;
}

void sub_18F057460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a13)
    free(a13);
  _Unwind_Resume(exception_object);
}

uint64_t MPEGAudioFile::GetPropertyInfo(MPEGAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (a2 <= 1835296111)
  {
    if (a2 == 1768174447)
    {
      if (!a3)
        goto LABEL_26;
      v7 = 8;
LABEL_25:
      *a3 = v7;
LABEL_26:
      if (a4)
      {
        v8 = 0;
        *a4 = 0;
        return v8;
      }
      return 0;
    }
    if (a2 == 1768174452)
    {
      if (a4)
      {
        v11 = 0;
        (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v11);
        *a4 = (v11 == 0) & (*((unsigned __int8 *)this + 100) >> 1);
      }
      if (a3)
      {
        if (*((_QWORD *)this + 20))
        {
          v8 = 2003334207;
          LODWORD(v11) = 4;
          v9 = BaseOpaqueObject::ResolveOpaqueRef();
          if (v9)
          {
            if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t *, unsigned int *))(*(_QWORD *)v9 + 32))(v9, 0, 0, 1953720698, &v11, a3))
            {
              return 2003334207;
            }
            else
            {
              return 0;
            }
          }
        }
        else
        {
          v8 = 0;
          if (*((_WORD *)this + 93))
            *a3 = 128;
          else
            *a3 = 0;
        }
        return v8;
      }
      return 0;
    }
  }
  else
  {
    switch(a2)
    {
      case 1835296112:
        if (!a3)
          goto LABEL_26;
        v7 = 4;
        goto LABEL_25;
      case 1936158068:
        if (a3)
          *a3 = 4;
        if (a4)
        {
          v11 = 0;
          (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v11);
          v8 = 0;
          *a4 = (v11 == 0) & (*((unsigned __int8 *)this + 100) >> 1);
          return v8;
        }
        return 0;
      case 1886283375:
        if (!a3)
          goto LABEL_26;
        v7 = 16;
        goto LABEL_25;
    }
  }
  return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
}

uint64_t MPEGAudioFile::GetProperty(MPEGAudioFile *this, int a2, unsigned int *a3, char *a4)
{
  MPEGAudioFile *v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;

  v6 = this;
  if (a2 <= 1835296111)
  {
    if (a2 != 1651663220)
    {
      if (a2 == 1768174447)
      {
        result = 1886681407;
        if (*((_WORD *)v6 + 92) != 1 && *((_WORD *)v6 + 93) != 1 || (*((_BYTE *)v6 + 100) & 2) != 0)
          return result;
        if (*a3 >= 8)
        {
          result = 0;
          *(_QWORD *)a4 = *((_QWORD *)v6 + 19);
          v8 = 8;
          goto LABEL_33;
        }
      }
      else
      {
        if (a2 != 1768174452)
          return AudioFileObject::GetProperty(this, a2, a3, a4);
        if (*((_QWORD *)this + 20))
        {
          v11 = 4;
          v12 = 0;
          v9 = BaseOpaqueObject::ResolveOpaqueRef();
          if (v9)
          {
            (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, int *, unsigned int *))(*(_QWORD *)v9 + 32))(v9, 0, 0, 1953720698, &v11, &v12);
            if (v12)
            {
              if (*a3 >= v12)
                return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v6 + 13) + 48))(*((_QWORD *)v6 + 13), 0, *((_QWORD *)v6 + 19));
            }
          }
        }
        else
        {
          if (!*((_WORD *)this + 93))
            return 2003334207;
          if (*a3 >= 0x80)
            return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 2, -128, 128, a4, a3);
        }
      }
      return 561211770;
    }
    if (*a3 != 4)
      return 561211770;
    LODWORD(v10) = *((_DWORD *)this + 57);
    if (!(_DWORD)v10 || *((_BYTE *)this + 140))
    {
      (*(void (**)(MPEGAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, 10, 0, 1);
      v10 = *((_QWORD *)v6 + 15);
      if (v10)
      {
        v10 = *(_QWORD *)(v10 + 24);
        if (v10 < 1)
          LODWORD(v10) = 0;
        else
          LODWORD(v10) = 1000 * (*((_QWORD *)v6 + 25) / (unint64_t)v10);
      }
    }
    goto LABEL_47;
  }
  if (a2 > 1886616164)
  {
    if (a2 == 1886616165)
    {
      if (*a3 != 4)
        return 561211770;
      if (!*((_DWORD *)this + 10) && !*((_BYTE *)this + 140))
        (*(void (**)(MPEGAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1);
      this = v6;
      a2 = 1886616165;
      return AudioFileObject::GetProperty(this, a2, a3, a4);
    }
    if (a2 != 1936158068)
      return AudioFileObject::GetProperty(this, a2, a3, a4);
    if (*a3 != 4)
      return 561211770;
    result = 0;
    LODWORD(v10) = *((unsigned __int8 *)v6 + 409);
LABEL_48:
    *(_DWORD *)a4 = v10;
    return result;
  }
  if (a2 == 1835296112)
  {
    if (*a3 != 4)
      return 561211770;
    LODWORD(v10) = (*(uint64_t (**)(MPEGAudioFile *))(*(_QWORD *)this + 672))(this);
LABEL_47:
    result = 0;
    goto LABEL_48;
  }
  if (a2 != 1886283375)
    return AudioFileObject::GetProperty(this, a2, a3, a4);
  if (*a3 < 0x10)
    return 561211770;
  if (*((_QWORD *)this + 48) != -1)
  {
    result = 0;
    *(_OWORD *)a4 = *((_OWORD *)v6 + 24);
    v8 = 16;
LABEL_33:
    *a3 = v8;
    return result;
  }
  return 1667787583;
}

uint64_t MPEGAudioFile::SetProperty(MPEGAudioFile *this, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  size_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  const __CFString *Value;
  std::bad_alloc *exception;
  std::bad_alloc *v44;
  const __CFString *theString;
  void (**v46)(ID3TagBase *__hidden);
  char v47;
  uint64_t v48;
  __int16 v49;
  _QWORD v50[3];
  char v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  _BYTE v55[4];
  int v56;
  int v57;
  _DWORD v58[2];
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  const __CFDictionary *v63;
  int v64;
  _DWORD v65[2];
  unsigned int v66;
  int v67;
  _DWORD v68[3];

  if (a2 == 1936158068)
  {
    v8 = 1869627199;
    if ((*((_BYTE *)this + 100) & 2) != 0)
    {
      v9 = *((_QWORD *)this + 15);
      if (!v9 || !*(_QWORD *)(v9 + 24))
      {
        if ((_DWORD)a3 == 4)
        {
          v8 = 0;
          *((_BYTE *)this + 409) = *(_DWORD *)a4 != 0;
        }
        else
        {
          return 561211770;
        }
      }
    }
    return v8;
  }
  if (a2 != 1768174452)
    return AudioFileObject::SetProperty(this, a2, a3, a4);
  v7 = *((_QWORD *)this + 15);
  if (!v7)
  {
    if ((*((_BYTE *)this + 100) & 2) == 0)
      return 1886547263;
    v11 = 0;
LABEL_18:
    v8 = 2003334207;
    if (a3 < 0xA || v11 > 0)
      return v8;
    v46 = &off_1E2900F48;
    v47 = 0;
    v50[0] = v50;
    v50[1] = v50;
    v50[2] = 0;
    v51 = 0;
    v53 = 0;
    v52 = 0;
    v54 = 0;
    v48 = *a4;
    v49 = *((_WORD *)a4 + 4);
    if ((ID3TagBase::Init((ID3TagBase *)&v46) & 1) == 0)
      goto LABEL_65;
    v12 = *((_QWORD *)this + 21);
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *((_QWORD *)this + 21) = 0;
    }
    v13 = operator new();
    *(_QWORD *)v13 = &off_1E2900F28;
    *(_BYTE *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_DWORD *)(v13 + 24) = a3;
    *(_QWORD *)(v13 + 28) = 0;
    *(_QWORD *)(v13 + 44) = 0;
    *(_QWORD *)(v13 + 36) = 0;
    v14 = malloc_type_malloc(a3, 0x7C51E058uLL);
    if (!v14)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v44 = std::bad_alloc::bad_alloc(exception);
    }
    *(_QWORD *)(v13 + 16) = v14;
    memcpy(v14, a4, *(unsigned int *)(v13 + 24));
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 16) + 3);
    if (v15 >= 3)
      v16 = 10;
    else
      v16 = 6;
    *(_DWORD *)(v13 + 28) = v15;
    *(_DWORD *)(v13 + 32) = v16;
    v60 = 0;
    v61 = 0;
    v59 = 0;
    if (!ID3ParserOpen(v13, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, unsigned __int8 **, unsigned int *))ID3CreatorCallbackProc, &v59))
    {
      v62 = 4;
      v19 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v19)
      {
        if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)v19 + 32))(v19, 0, 0, 1953720698, &v62, &v61))
        {
          v62 = 4;
          v36 = BaseOpaqueObject::ResolveOpaqueRef();
          if (v36)
          {
            if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)v36 + 32))(v36, 0, 0, 1717792372, &v62, &v60))
            {
              v58[0] = 0;
              v58[1] = v60 - 1;
              v62 = 12;
              v37 = BaseOpaqueObject::ResolveOpaqueRef();
              if (v37)
              {
                if (!(*(unsigned int (**)(uint64_t, uint64_t, _DWORD *, uint64_t, int *, _BYTE *))(*(_QWORD *)v37 + 32))(v37, 8, v58, 1718185574, &v62, v55))
                {
                  *(_DWORD *)(v13 + 36) = v61 - (v57 + v56);
                  GetSoundCheckDictionaryFromID3(v59, 0, (_DWORD *)(v13 + 40));
                  v68[0] = 0;
                  v64 = 4;
                  v38 = BaseOpaqueObject::ResolveOpaqueRef();
                  if (v38)
                  {
                    if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, int *, _DWORD *))(*(_QWORD *)v38 + 32))(v38, 0, 0, 1717792372, &v64, v68)&& v68[0])
                    {
                      v39 = 0;
                      do
                      {
                        v65[0] = 1129270605;
                        v65[1] = v39;
                        v64 = 12;
                        v40 = BaseOpaqueObject::ResolveOpaqueRef();
                        if (v40)
                        {
                          if (!(*(unsigned int (**)(uint64_t, uint64_t, _DWORD *, uint64_t, int *, unsigned int *))(*(_QWORD *)v40 + 32))(v40, 8, v65, 1718185574, &v64, &v66))
                          {
                            v63 = 0;
                            v64 = 8;
                            v41 = BaseOpaqueObject::ResolveOpaqueRef();
                            if (v41)
                            {
                              if (!(*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t, int *, const __CFDictionary **))(*(_QWORD *)v41 + 32))(v41, 4, &v67, 1717854580, &v64, &v63))
                              {
                                Value = (const __CFString *)CFDictionaryGetValue(v63, CFSTR("identifier"));
                                theString = (const __CFString *)CFDictionaryGetValue(v63, CFSTR("text"));
                                if (Value
                                  && theString
                                  && CFStringCompare(Value, CFSTR("iTunLOUD"), 0) == kCFCompareEqualTo)
                                {
                                  *(_DWORD *)(v13 + 44) = v67;
                                  *(_DWORD *)(v13 + 48) = CFStringGetLength(theString) + 1;
                                }
                                CFRelease(v63);
                              }
                            }
                          }
                        }
                        ++v39;
                      }
                      while (v39 < v68[0]);
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (v59)
      {
        v20 = BaseOpaqueObject::ResolveOpaqueRef();
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      }
    }
    *(_BYTE *)(v13 + 8) = 1;
    *((_QWORD *)this + 21) = v13;
    if (*((_QWORD *)this + 20))
    {
      v17 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      *((_QWORD *)this + 20) = 0;
    }
    v18 = *((_QWORD *)this + 53);
    if (*((_QWORD *)this + 52))
    {
      if (!v18)
      {
LABEL_45:
        if (*((_QWORD *)this + 52))
        {
          if (*(_DWORD *)(*((_QWORD *)this + 21) + 40))
          {
            v23 = (45 * *((_DWORD *)this + 13));
            CA_calloc(v23);
            v25 = v24;
            MPEGAudioFile::GetSCString(this, v24);
            v26 = *((_QWORD *)this + 21);
            v27 = *(unsigned int *)(v26 + 40);
            if ((_DWORD)v27)
            {
              v28 = *(_QWORD *)(v26 + 16) + v27;
              v29 = *(_DWORD *)(v26 + 32);
              if (*(_DWORD *)(v26 + 28) <= 2u)
                v30 = 19;
              else
                v30 = 23;
              memcpy((void *)(v28 + (v29 + v30)), v25, v23);
            }
            free(v25);
          }
          else
          {
            MPEGAudioFile::AddSoundCheckToID3Tag(this);
          }
        }
        v8 = MPEGAudioFile::SerializeID3TagToFile(this);
        if ((_DWORD)v8)
          goto LABEL_65;
        goto LABEL_63;
      }
    }
    else if (!v18)
    {
      v66 = 0;
      v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                 + 56))(*((_QWORD *)this + 13), 0, 0, a3, a4, &v66);
      if (!(_DWORD)v8)
      {
        *((_QWORD *)this + 9) = *(unsigned int *)(*((_QWORD *)this + 21) + 24);
LABEL_63:
        MPEGAudioFile::ParseID3Tags(this);
        v8 = 0;
        goto LABEL_65;
      }
      goto LABEL_65;
    }
    if (!*(_DWORD *)(*((_QWORD *)this + 21) + 44))
    {
      MPEGAudioFile::AddLoudnessInfoToID3Tag(this);
      goto LABEL_45;
    }
    v66 = 2 * (*((_DWORD *)this + 108) + *(unsigned __int8 *)(v18 + 3)) + 3;
    CA_calloc(v66);
    v22 = v21;
    if (!MPEGAudioFile::CreateLoudnessInfoString(this, v21, &v66))
    {
      v31 = *((_QWORD *)this + 21);
      v32 = *(unsigned int *)(v31 + 44);
      if (!(_DWORD)v32 || *(_DWORD *)(v31 + 48) != v66)
      {
        free(v22);
        goto LABEL_65;
      }
      v33 = *(_QWORD *)(v31 + 16) + v32;
      v34 = *(_DWORD *)(v31 + 32);
      if (*(_DWORD *)(v31 + 28) <= 2u)
        v35 = 19;
      else
        v35 = 23;
      memcpy((void *)(v33 + (v34 + v35)), v22, v66);
      free(v22);
      goto LABEL_45;
    }
    free(v22);
    v8 = 0xFFFFFFFFLL;
LABEL_65:
    v46 = &off_1E2900F48;
    std::__list_imp<ID3FrameInfo>::clear(v50);
    return v8;
  }
  if (*(uint64_t *)(v7 + 24) <= 0)
  {
    if ((*((_BYTE *)this + 100) & 2) == 0)
      return 1886547263;
    v11 = *(_QWORD *)(v7 + 24);
    goto LABEL_18;
  }
  return 1869640813;
}

void sub_18F0580B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x193FFE460](v2, 0x1081C40866342B4);
  std::__list_imp<ID3FrameInfo>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t MPEGAudioFile::UpdateSize(MPEGAudioFile *this)
{
  return 0;
}

uint64_t MPEGAudioFile::GetNumBytes(MPEGAudioFile *this)
{
  int v2;
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  v2 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v4);
  result = v4;
  if (!v2)
  {
    if (*((_WORD *)this + 93) == 1)
      return v4 - *((_QWORD *)this + 9) - 128;
    else
      return v4 - *((_QWORD *)this + 9);
  }
  return result;
}

uint64_t MPEGAudioFile::GetNumPackets(MPEGAudioFile *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *((unsigned int *)this + 10);
  if ((_DWORD)v2)
    return (*(uint64_t (**)(MPEGAudioFile *))(*(_QWORD *)this + 224))(this) / v2;
  result = *((_QWORD *)this + 27);
  if (result)
  {
    if (!*((_BYTE *)this + 140))
      return result;
  }
  else if (!*((_BYTE *)this + 140))
  {
    (*(void (**)(MPEGAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1);
  }
  v4 = *((_QWORD *)this + 15);
  if (v4)
    return *(_QWORD *)(v4 + 24);
  else
    return 0;
}

uint64_t MPEGAudioFile::PacketToDependencyInfo(MPEGAudioFile *this, AudioPacketDependencyInfoTranslation *a2)
{
  unsigned int v3;
  SInt64 mPacket;

  v3 = (*(uint64_t (**)(MPEGAudioFile *))(*(_QWORD *)this + 672))(this);
  mPacket = a2->mPacket;
  if (a2->mPacket >= v3)
    LODWORD(mPacket) = v3;
  a2->mIsIndependentlyDecodable = 1;
  a2->mNumberPrerollPackets = mPacket;
  return 0;
}

uint64_t MPEGAudioFile::GetInfoDictionary(MPEGAudioFile *this, CACFDictionary *a2)
{
  AudioFileObject *v4;
  double v6;

  if (*((_QWORD *)this + 20))
    FillInfoDictionaryFromID3Parser(a2);
  v6 = 0.0;
  v4 = (AudioFileObject *)(*(uint64_t (**)(MPEGAudioFile *, double *))(*(_QWORD *)this + 544))(this, &v6);
  if (!(_DWORD)v4)
    AudioFileObject::AddDurationToInfoDictionary(v4, a2, &v6);
  return 0;
}

uint64_t MPEGAudioFile::GetSoundCheckDictionarySize(MPEGAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a2)
    *a2 = 8;
  if (a3)
    *a3 = *((_BYTE *)this + 100) & 2;
  return 0;
}

uint64_t MPEGAudioFile::GetSoundCheckDictionary(MPEGAudioFile *this, CACFDictionary *a2)
{
  return GetSoundCheckDictionaryFromID3(*((_QWORD *)this + 20), a2, 0);
}

uint64_t MPEGAudioFile::SetSoundCheckDictionary(MPEGAudioFile *this, CACFDictionary *a2)
{
  uint64_t v4;
  uint64_t v5;
  CACFDictionary *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  ID3Creator *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::bad_alloc *exception;
  std::bad_alloc *v24;

  if (*((_QWORD *)this + 53) && *((_QWORD *)this + 52))
    return 2003334207;
  v5 = *((_QWORD *)this + 21);
  if (v5)
  {
    if (!*(_DWORD *)(v5 + 40))
    {
      v20 = *((_QWORD *)this + 15);
      if (v20)
      {
        if (*(uint64_t *)(v20 + 24) > 0)
          return 1869640813;
      }
    }
  }
  v6 = (CACFDictionary *)*((_QWORD *)this + 52);
  if (v6)
  {
    CACFDictionary::~CACFDictionary(v6);
    MEMORY[0x193FFE460]();
    *((_QWORD *)this + 52) = 0;
  }
  else
  {
    v17 = *((_QWORD *)this + 15);
    if (v17 && *(uint64_t *)(v17 + 24) > 0)
      return 1869640813;
  }
  v7 = operator new();
  *(_QWORD *)v7 = *(_QWORD *)a2;
  *(_WORD *)(v7 + 8) = 0;
  *((_QWORD *)this + 52) = v7;
  v8 = *((_QWORD *)this + 21);
  if (v8)
  {
    if (*(_DWORD *)(v8 + 40))
    {
      v9 = *((_DWORD *)this + 13);
      v10 = (char *)malloc_type_malloc((45 * v9), 0x2C8E6D5CuLL);
      v11 = v10;
      if (v9 && !v10)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v24 = std::bad_alloc::bad_alloc(exception);
      }
      bzero(v10, (45 * v9));
      MPEGAudioFile::GetSCString(this, v11);
      v12 = *((_QWORD *)this + 21);
      v13 = *(unsigned int *)(v12 + 40);
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)(v12 + 16) + v13;
        v15 = *(_DWORD *)(v12 + 32);
        if (*(_DWORD *)(v12 + 28) <= 2u)
          v16 = 19;
        else
          v16 = 23;
        memcpy((void *)(v14 + (v15 + v16)), v11, (45 * v9));
        v4 = 0;
      }
      else
      {
        v4 = 0xFFFFFFFFLL;
      }
      free(v11);
    }
    else
    {
      if (*((_QWORD *)this + 20))
      {
        v21 = BaseOpaqueObject::ResolveOpaqueRef();
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        *((_QWORD *)this + 20) = 0;
      }
      v4 = 2003334207;
      if (!MPEGAudioFile::AddSoundCheckToID3Tag(this)
        && !MPEGAudioFile::SerializeID3TagToFile(this))
      {
        MPEGAudioFile::ParseID3Tags(this);
        return 0;
      }
    }
  }
  else
  {
    v18 = (ID3Creator *)operator new();
    ID3Creator::ID3Creator(v18);
    v4 = 2003334207;
    *((_QWORD *)this + 21) = v18;
    if (!MPEGAudioFile::AddSoundCheckToID3Tag(this)
      && !MPEGAudioFile::SerializeID3TagToFile(this))
    {
      MPEGAudioFile::ParseID3Tags(this);
      v4 = 0;
    }
    MPEGAudioFile::AddLoudnessInfoToID3Tag(this);
    v19 = *((_QWORD *)this + 21);
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    *((_QWORD *)this + 21) = 0;
  }
  return v4;
}

void sub_18F058534(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x1081C40866342B4);
  _Unwind_Resume(a1);
}

uint64_t MPEGAudioFile::GetLoudnessInfo(MPEGAudioFile *this, CACFDictionary *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v10;
  const __CFString *Value;
  const __CFString *v12;
  const __CFString *v13;
  CACFDictionary *v14;
  unsigned int i;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  const __CFString *v19;
  uint64_t v20;
  CFDictionaryRef theDict;
  __CFDictionary *Mutable;
  __int16 v24;
  int v25;
  int v26;
  unsigned int v27;
  char v28[8];
  _BYTE v29[4];
  unsigned int v30;
  char buffer[8];
  __int16 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 20);
  v30 = 0;
  v25 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v24 = 257;
  if (!GetSoundCheckDictionaryFromID3(v3, (CACFDictionary *)&Mutable, 0))
    CACFDictionary::AddDictionary(a2, CFSTR("sound check info"), Mutable);
  v25 = 4;
  v4 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v4
    && !(*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, int *, unsigned int *))(*(_QWORD *)v4 + 32))(v4, 0, 0, 1717792372, &v25, &v30))
  {
    v25 = 12;
    if (v30)
    {
      v5 = 1;
      do
      {
        v26 = 1129270605;
        v27 = v5 - 1;
        v25 = 12;
        v6 = BaseOpaqueObject::ResolveOpaqueRef();
        if (!v6
          || (*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t, int *, char *))(*(_QWORD *)v6 + 32))(v6, 8, &v26, 1718185574, &v25, v28)|| (theDict = 0, v25 = 8, (v10 = BaseOpaqueObject::ResolveOpaqueRef()) == 0)|| (*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFDictionaryRef *))(*(_QWORD *)v10 + 32))(v10, 4, v29, 1717854580, &v25, &theDict))
        {
          v7 = 0;
        }
        else
        {
          Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("identifier"));
          v12 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("text"));
          v7 = 0;
          if (Value)
          {
            v13 = v12;
            if (v12)
            {
              if (CFStringCompare(Value, CFSTR("iTunLOUD"), 0))
              {
                v7 = 0;
              }
              else
              {
                if (CFStringGetCString(v13, buffer, 128, 0x201u))
                  ParseiTunesLOUDData(buffer, a2, v14);
                v7 = 1;
              }
            }
          }
          CFRelease(theDict);
        }
      }
      while (v5++ < v30 && v7 == 0);
    }
    *(_QWORD *)buffer = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v32 = 257;
    if (v30)
    {
      for (i = 0; i < v30; ++i)
      {
        if (CACFDictionary::Size((CACFDictionary *)buffer) > 3)
          break;
        v26 = 1415075928;
        v27 = i;
        v25 = 12;
        v16 = BaseOpaqueObject::ResolveOpaqueRef();
        if (v16)
        {
          if (!(*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t, int *, char *))(*(_QWORD *)v16 + 32))(v16, 8, &v26, 1718185574, &v25, v28))
          {
            theDict = 0;
            v25 = 8;
            v17 = BaseOpaqueObject::ResolveOpaqueRef();
            if (v17)
            {
              if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFDictionaryRef *))(*(_QWORD *)v17 + 32))(v17, 4, v29, 1717854580, &v25, &theDict))
              {
                v18 = CFDictionaryGetValue(theDict, CFSTR("identifier"));
                v19 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("text"));
                if (v18 && v19)
                  AddTextToReplayGainDict((uint64_t)v18, v19, (CACFDictionary *)buffer);
                CFRelease(theDict);
              }
            }
          }
        }
      }
    }
    if (CACFDictionary::Size((CACFDictionary *)buffer))
      CACFDictionary::AddDictionary(a2, CFSTR("REPLAYGAIN"), *(const __CFDictionary **)buffer);
    CACFDictionary::~CACFDictionary((CACFDictionary *)buffer);
  }
  if (CACFDictionary::Size(a2))
    v20 = 0;
  else
    v20 = 2003334207;
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v20;
}

void sub_18F058954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t MPEGAudioFile::SetLoudnessInfo(MPEGAudioFile *this, CACFDictionary *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  void *v8;
  char *v9;
  _BYTE *v10;
  unsigned int v11;
  float v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  float v17;
  int v18;
  float v19;
  int v20;
  float v21;
  int v22;
  float v23;
  int v24;
  int v25;
  uint64_t v26;
  CACFDictionary *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  int v33;
  int v34;
  ID3Creator *v35;
  uint64_t v36;
  int v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  std::bad_alloc *exception;
  std::bad_alloc *v47;
  uint64_t v48;
  __CFDictionary *Mutable;
  __int16 v50;
  float v51;

  v4 = *((_QWORD *)this + 21);
  if (v4)
  {
    if (!*(_DWORD *)(v4 + 44))
    {
      v15 = *((_QWORD *)this + 15);
      if (v15)
      {
        if (*(uint64_t *)(v15 + 24) > 0)
          return 1869640813;
      }
    }
  }
  if (!*((_QWORD *)this + 53))
  {
    v14 = *((_QWORD *)this + 15);
    if (v14)
    {
      if (*(uint64_t *)(v14 + 24) > 0)
        return 1869640813;
    }
  }
  v48 = 0;
  v5 = LoudnessMethodsCountFromLID(a2, (unsigned int *)&v48);
  v6 = v5;
  v7 = 4 * v5 + 4;
  v8 = (void *)*((_QWORD *)this + 53);
  if (v8)
  {
    if (v7 != *((_DWORD *)this + 108))
      return 2003334207;
    free(v8);
    *((_QWORD *)this + 53) = 0;
  }
  *((_DWORD *)this + 108) = v7;
  v9 = (char *)malloc_type_malloc(0, 0x2C8E6D5CuLL);
  *((_QWORD *)this + 53) = v9;
  v9[3] = v6;
  v10 = v9 + 4;
  v51 = 0.0;
  v11 = 0;
  if (CACFDictionary::HasKey(a2, CFSTR("dialogue anchor parameters")))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v50 = 257;
    CACFDictionary::GetCACFDictionary(a2, CFSTR("dialogue anchor parameters"), (CACFDictionary *)&Mutable);
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa itu loudness")))
    {
      CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, CFSTR("aa itu loudness"), &v51);
      *v10 = 5;
      v12 = v51 + -6.0;
      if ((float)(v51 + -6.0) <= -63.75)
      {
        LOBYTE(v13) = -1;
      }
      else if (v12 <= 0.0)
      {
        v13 = (int)(float)((float)((float)-v12 * 4.0) + 0.5);
      }
      else
      {
        LOBYTE(v13) = 0;
      }
      v9[5] = v13;
      v11 = 1;
    }
    else
    {
      v11 = 0;
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  if (CACFDictionary::HasKey(a2, CFSTR("main loudness parameters")))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v50 = 257;
    CACFDictionary::GetCACFDictionary(a2, CFSTR("main loudness parameters"), (CACFDictionary *)&Mutable);
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa itu loudness")))
    {
      v10[2 * v11] = 4;
      CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, CFSTR("aa itu loudness"), &v51);
      v17 = v51 + -6.0;
      if ((float)(v51 + -6.0) <= -63.75)
      {
        LOBYTE(v18) = -1;
      }
      else if (v17 <= 0.0)
      {
        v18 = (int)(float)((float)((float)-v17 * 4.0) + 0.5);
      }
      else
      {
        LOBYTE(v18) = 0;
      }
      v10[2 * v11++ + 1] = v18;
    }
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa ebu loudness range")))
    {
      v10[2 * v11] = 6;
      CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, CFSTR("aa ebu loudness range"), &v51);
      v10[2 * v11++ + 1] = CompressLoudnessRange(v51);
    }
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa ebu top of loudness range")))
    {
      v10[2 * v11] = 1;
      CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, CFSTR("aa ebu top of loudness range"), &v51);
      v19 = v51 + -6.0;
      if ((float)(v51 + -6.0) <= -63.75)
      {
        LOBYTE(v20) = -1;
      }
      else if (v19 <= 0.0)
      {
        v20 = (int)(float)((float)((float)-v19 * 4.0) + 0.5);
      }
      else
      {
        LOBYTE(v20) = 0;
      }
      v10[2 * v11++ + 1] = v20;
    }
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa ebu max momentary loudness")))
    {
      v10[2 * v11] = 2;
      CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, CFSTR("aa ebu max momentary loudness"), &v51);
      v21 = v51 + -6.0;
      if ((float)(v51 + -6.0) <= -63.75)
      {
        LOBYTE(v22) = -1;
      }
      else if (v21 <= 0.0)
      {
        v22 = (int)(float)((float)((float)-v21 * 4.0) + 0.5);
      }
      else
      {
        LOBYTE(v22) = 0;
      }
      v10[2 * v11++ + 1] = v22;
    }
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa ebu max short-term loudness")))
    {
      v10[2 * v11] = 3;
      CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, CFSTR("aa ebu max short-term loudness"), &v51);
      v23 = v51 + -6.0;
      if ((float)(v51 + -6.0) <= -63.75)
      {
        LOBYTE(v24) = -1;
      }
      else if (v23 <= 0.0)
      {
        v24 = (int)(float)((float)((float)-v23 * 4.0) + 0.5);
      }
      else
      {
        LOBYTE(v24) = 0;
      }
      v10[2 * v11 + 1] = v24;
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  HIDWORD(v48) = 0;
  if (!CACFDictionary::HasKey(a2, CFSTR("main loudness parameters")))
    goto LABEL_61;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v50 = 257;
  CACFDictionary::GetCACFDictionary(a2, CFSTR("main loudness parameters"), (CACFDictionary *)&Mutable);
  if (!CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa itu true peak")))
  {
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
LABEL_61:
    LOWORD(v25) = -1;
    goto LABEL_62;
  }
  CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, CFSTR("aa itu true peak"), (float *)&v48 + 1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  if (*((float *)&v48 + 1) >= 128.0)
  {
    LOWORD(v25) = 0x7FFF;
  }
  else if (*((float *)&v48 + 1) <= -127.99)
  {
    LOWORD(v25) = -2;
  }
  else
  {
    v25 = (int)(float)((float)(fabsf(*((float *)&v48 + 1)) * 256.0) + 0.5);
  }
  if (*((float *)&v48 + 1) < 0.0)
    LOWORD(v25) = v25 ^ 0x8000;
LABEL_62:
  v26 = *((_QWORD *)this + 53);
  *(_WORD *)v26 = v25;
  *(_BYTE *)(v26 + 2) = 0;
  if (CACFDictionary::HasKey(a2, CFSTR("media kind")))
    *(_BYTE *)(*((_QWORD *)this + 53) + 2) = GetStoreItemKindFromLID(a2);
  if (CACFDictionary::HasKey(a2, CFSTR("sound check info")))
  {
    v27 = (CACFDictionary *)*((_QWORD *)this + 52);
    if (v27)
    {
      CACFDictionary::~CACFDictionary(v27);
      MEMORY[0x193FFE460]();
      *((_QWORD *)this + 52) = 0;
    }
    Mutable = 0;
    CACFDictionary::GetDictionary(a2, CFSTR("sound check info"), &Mutable);
    v28 = operator new();
    *(_QWORD *)v28 = Mutable;
    *(_WORD *)(v28 + 8) = 0;
    *((_QWORD *)this + 52) = v28;
  }
  v29 = *((_QWORD *)this + 21);
  if (!v29)
  {
    v35 = (ID3Creator *)operator new();
    ID3Creator::ID3Creator(v35);
    *((_QWORD *)this + 21) = v35;
    if (!MPEGAudioFile::AddLoudnessInfoToID3Tag(this))
    {
      result = MPEGAudioFile::AddSoundCheckToID3Tag(this);
      if (!(_DWORD)result)
      {
        result = MPEGAudioFile::SerializeID3TagToFile(this);
        if (!(_DWORD)result)
        {
          v36 = *((_QWORD *)this + 21);
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          result = 0;
          *((_QWORD *)this + 21) = 0;
        }
      }
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  v30 = *(unsigned int *)(v29 + 44);
  if ((_DWORD)v30)
  {
    v31 = *((unsigned int *)this + 108);
    if (*(_DWORD *)(v29 + 48) == (_DWORD)v31)
    {
      v32 = *(_QWORD *)(v29 + 16) + v30;
      v33 = *(_DWORD *)(v29 + 32);
      if (*(_DWORD *)(v29 + 28) <= 2u)
        v34 = 19;
      else
        v34 = 23;
      memcpy((void *)(v32 + (v33 + v34)), *((const void **)this + 53), v31);
      goto LABEL_84;
    }
    return 2003334207;
  }
  if (MPEGAudioFile::AddLoudnessInfoToID3Tag(this))
    return 0xFFFFFFFFLL;
LABEL_84:
  if (!*(_DWORD *)(*((_QWORD *)this + 21) + 40))
  {
    result = MPEGAudioFile::AddSoundCheckToID3Tag(this);
    if ((_DWORD)result)
      return result;
    goto LABEL_97;
  }
  v37 = *((_DWORD *)this + 13);
  v38 = (char *)malloc_type_malloc((45 * v37), 0x2C8E6D5CuLL);
  v39 = v38;
  if (v37 && !v38)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v47 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v38, (45 * v37));
  MPEGAudioFile::GetSCString(this, v39);
  v40 = *((_QWORD *)this + 21);
  v41 = *(unsigned int *)(v40 + 40);
  if ((_DWORD)v41)
  {
    v42 = *(_QWORD *)(v40 + 16) + v41;
    v43 = *(_DWORD *)(v40 + 32);
    if (*(_DWORD *)(v40 + 28) <= 2u)
      v44 = 19;
    else
      v44 = 23;
    memcpy((void *)(v42 + (v43 + v44)), v39, (45 * v37));
    result = 0;
  }
  else
  {
    result = 0xFFFFFFFFLL;
  }
  if (!(result | v30))
  {
LABEL_97:
    if (*((_QWORD *)this + 20))
    {
      v45 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      *((_QWORD *)this + 20) = 0;
    }
    result = MPEGAudioFile::SerializeID3TagToFile(this);
    if (!(_DWORD)result)
    {
      MPEGAudioFile::ParseID3Tags(this);
      return 0;
    }
  }
  return result;
}

void sub_18F0591D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x1081C40866342B4);
  _Unwind_Resume(a1);
}

uint64_t MPEGAudioFile::GetEstimatedDuration(MPEGAudioFile *this, double *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t *v8;
  uint64_t v9;
  double v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  int v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  double v22;
  _QWORD v23[3];
  uint64_t v24;

  if (!*((_BYTE *)this + 140))
  {
    if (*((_QWORD *)this + 27))
      goto LABEL_5;
    (*(void (**)(MPEGAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, 10, 0, 1);
    *((_QWORD *)this + 24) = 0;
    v8 = (uint64_t *)*((_QWORD *)this + 15);
    if (!v8)
      goto LABEL_5;
    if (v8[3] < 1)
      goto LABEL_5;
    v24 = 0;
    v9 = *((_QWORD *)this + 9);
    CompressedPacketTable::operator[]((uint64_t)v23, v8, 0);
    if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *, char *))(**((_QWORD **)this + 13)
                                                                                             + 48))(*((_QWORD *)this + 13), 0, v23[0] + v9, 4, &v24, (char *)&v24 + 4))
    {
      goto LABEL_5;
    }
    v10 = *((double *)this + 3);
    v11 = gaSamplesPerFrame[3 * (*((_DWORD *)this + 36) - 1) + *((_DWORD *)this + 37) - 1];
    v12 = (*(uint64_t (**)(MPEGAudioFile *))(*(_QWORD *)this + 224))(this);
    if (!v12)
      goto LABEL_5;
    v13 = *((_QWORD *)this + 15);
    if (v13)
      v13 = *(_QWORD *)(v13 + 24);
    v14 = (double)v10;
    v15 = *((_DWORD *)this + 37);
    v16 = *((_QWORD *)this + 25) / v13;
    if (v15 == 3)
    {
      v20 = (double)v16;
      if (*((_DWORD *)this + 36) == 1)
        v21 = 144000;
      else
        v21 = 72000;
      v22 = (double)v21 * v20;
    }
    else
    {
      if (v15 == 2)
      {
        v18 = (double)v16;
        v19 = 144000.0;
      }
      else
      {
        v17 = 1.0;
        if (v15 != 1)
          goto LABEL_25;
        v18 = (double)v16;
        v19 = 48000.0;
      }
      v22 = v18 * v19;
    }
    v17 = v22 / v14;
    if (v17 <= 0.0)
    {
LABEL_5:
      v6 = *((double *)this + 24);
      goto LABEL_7;
    }
LABEL_25:
    *((double *)this + 24) = (double)v11 / v14 * ((double)v12 / v17);
    goto LABEL_5;
  }
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v5 = *((double *)this + 3);
    v6 = (double)((*(uint64_t (**)(MPEGAudioFile *))(*(_QWORD *)this + 240))(this) * v4) / v5;
  }
  else
  {
    v6 = 0.0;
  }
LABEL_7:
  *a2 = v6;
  return 0;
}

uint64_t MPEGAudioFile::GetLyrics(MPEGAudioFile *this, const __CFString **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *Value;
  CFDictionaryRef theDict;
  int v9;
  uint64_t v10;
  _BYTE v11[8];
  int v12;

  if (!a2)
    return 2003334207;
  v3 = 1667787583;
  *a2 = 0;
  v9 = 12;
  v10 = 1431522388;
  v4 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v4)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v4 + 32))(v4, 8, &v10, 1718185574, &v9, v11))
    {
      theDict = 0;
      v9 = 8;
      v5 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v5)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t, int *, CFDictionaryRef *))(*(_QWORD *)v5 + 32))(v5, 4, &v12, 1717854580, &v9, &theDict))
        {
          Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("text"));
          *a2 = Value;
          if (Value)
            CFRetain(Value);
          CFRelease(theDict);
          return 0;
        }
      }
    }
  }
  return v3;
}

BOOL MPEGAudioFile::IsDataFormatSupported(MPEGAudioFile *this, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID;

  mFormatID = a2->mFormatID;
  return mFormatID - 778924081 < 3 || mFormatID == 1836253269;
}

uint64_t MPEGAudioFile::GetPacketSizeUpperBound(MPEGAudioFile *this)
{
  return *((unsigned int *)this + 52);
}

uint64_t MPEGAudioFile::ScanForPackets(MPEGAudioFile *this, uint64_t a2, DataSource *a3, char a4)
{
  DataSource *v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t FPosForNextMatchingSyncWordDS;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  AudioStreamPacketDescription v35;

  v5 = a3;
  v35.mStartOffset = 0;
  *(_QWORD *)&v35.mVariableFramesInPacket = 0;
  v31 = 0;
  v32 = 0;
  if (!a3)
    v5 = (DataSource *)*((_QWORD *)this + 13);
  if (!*((_BYTE *)this + 140))
  {
    v8 = *((_QWORD *)this + 15);
    if (!v8)
    {
      v8 = operator new();
      v9 = *((_DWORD *)this + 11);
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_DWORD *)(v8 + 32) = v9;
      *((_QWORD *)this + 15) = v8;
    }
    v10 = *(_QWORD *)(v8 + 24);
    if (a2 == -1 || v10 < a2)
    {
      v34 = 0;
      v33 = 0;
      FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(DataSource *, uint64_t *))(*(_QWORD *)v5 + 24))(v5, &v31);
      if ((_DWORD)FPosForNextMatchingSyncWordDS)
        return FPosForNextMatchingSyncWordDS;
      if (*((_WORD *)this + 93) == 1)
        v13 = v31 - 128;
      else
        v13 = v31;
      v25 = v13;
      v14 = *((_QWORD *)this + 9);
      v15 = *((_QWORD *)this + 15);
      if (v15 && (v16 = *(_QWORD *)(v15 + 24)) != 0)
      {
        CompressedPacketTable::operator[]((uint64_t)&v26, (uint64_t *)v8, v16 - 1);
        FPosForNextMatchingSyncWordDS = GetFPosForNextMatchingSyncWordDS(v5, (unsigned __int16 *)this + 93, *((double *)this + 3), *((_DWORD *)this + 13), *((_DWORD *)this + 36), *((_DWORD *)this + 37), v26 + DWORD1(v27) + v14, v31, &v32);
        if ((_DWORD)FPosForNextMatchingSyncWordDS)
          goto LABEL_44;
      }
      else
      {
        (*(void (**)(MPEGAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, 0);
        v32 = v14;
      }
      if (a2 == -1)
      {
        v18 = -1;
      }
      else
      {
        v17 = *((_QWORD *)this + 15);
        if (v17)
          v17 = *(_QWORD *)(v17 + 24);
        v18 = a2 - v17;
      }
      while (1)
      {
        v19 = v32;
        v35.mStartOffset = v32 - v14;
        v20 = (*(uint64_t (**)(DataSource *, _QWORD, uint64_t, uint64_t, unsigned int *, int *))(*(_QWORD *)v5 + 48))(v5, 0, v32, 4, &v34, &v33);
        if ((_DWORD)v20)
        {
          FPosForNextMatchingSyncWordDS = v20;
          goto LABEL_44;
        }
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        if ((ParseMPEGSyncWord(bswap32(v34), (uint64_t)&v27) & 1) == 0)
          return 1685348671;
        v21 = DWORD2(v27);
        v35.mDataByteSize = DWORD2(v27);
        if (v21 > (*(unsigned int (**)(MPEGAudioFile *))(*(_QWORD *)this + 632))(this))
          (*(void (**)(MPEGAudioFile *, uint64_t))(*(_QWORD *)this + 648))(this, v21);
        if (v19 + v21 > v25)
          break;
        v32 = v19 + v21;
        v22 = GetFPosForNextMatchingSyncWordDS(v5, (unsigned __int16 *)this + 93, *((double *)this + 3), *((_DWORD *)this + 13), *((_DWORD *)this + 36), *((_DWORD *)this + 37), v19 + v21, v31, &v32);
        if ((_DWORD)v22 == -39 || (FPosForNextMatchingSyncWordDS = v22, (_DWORD)v22) && v10 >= 10)
        {
          v23 = 0;
          *((_BYTE *)this + 140) = a4;
        }
        else
        {
          if ((_DWORD)v22)
            goto LABEL_44;
          v23 = 1;
        }
        *((_QWORD *)this + 25) += DWORD1(v28);
        AudioFileObject::AppendPacket(this, &v35);
        FPosForNextMatchingSyncWordDS = 0;
        if (v18 == -1)
          v18 = -1;
        else
          --v18;
        if (v18)
        {
          ++v10;
          if ((v23 & 1) != 0)
            continue;
        }
        return FPosForNextMatchingSyncWordDS;
      }
      FPosForNextMatchingSyncWordDS = 0;
      *((_BYTE *)this + 140) = a4;
LABEL_44:
      if ((_DWORD)FPosForNextMatchingSyncWordDS != -39 && (_DWORD)FPosForNextMatchingSyncWordDS != 0)
      {
        AudioFileObject::DeletePacketTable(this);
        return FPosForNextMatchingSyncWordDS;
      }
    }
  }
  return 0;
}

uint64_t MPEGAudioFile::CreatePacketTable(MPEGAudioFile *this)
{
  return (*(uint64_t (**)(MPEGAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1);
}

uint64_t GetFPosForNextMatchingSyncWordDS(DataSource *a1, unsigned __int16 *a2, double a3, int a4, int a5, int a6, int64_t a7, int64_t a8, uint64_t *a9)
{
  int v18;
  uint64_t result;
  unsigned int v22;
  double v23;
  unsigned int v24[2];

  v23 = 0.0;
  *(_QWORD *)v24 = 0;
  v22 = 0;
  v18 = 10;
  while (1)
  {
    result = GetFPosForNextSyncWordDS(a1, a2, a7, a8, a9, &v24[1], v24, 0, &v23, &v22);
    if ((_DWORD)result)
      break;
    if (v24[1] == a5 && v24[0] == a6 && v23 == a3 && v22 == a4)
      return 0;
    a7 = *a9 + 1;
    if (!--v18)
      return 1685348671;
  }
  return result;
}

uint64_t GetFPosForNextSyncWordDS(DataSource *a1, unsigned __int16 *a2, int64_t a3, int64_t a4, uint64_t *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, double *a9, unsigned int *a10)
{
  unsigned __int8 *v18;
  int64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint8_t buf[4];
  _BYTE v42[20];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v39, 0x403uLL, 1);
  v18 = v39;
  if (v39)
  {
    if (a3 < a4)
    {
      v36 = a6;
      v37 = a7;
      v38 = a8;
      v35 = a5;
      v19 = a4 - 128;
      while (1)
      {
        v20 = *a2;
        v21 = v20 != 1 || a3 < v19;
        if (!v21
          || (a3 + 1027 <= a4 ? (v22 = 1027) : (v22 = (a4 - a3)), v40 = v22, v22 < 4))
        {
LABEL_31:
          v24 = 4294967257;
LABEL_32:
          if (v18)
            goto LABEL_50;
          return v24;
        }
        if (a3 + v22 > v19 && v20 == 0xFFFF)
        {
          *a2 = ID3v1TagExistsDS(a1);
          v22 = v40;
        }
        v24 = (*(uint64_t (**)(DataSource *, _QWORD, int64_t, uint64_t, unsigned __int8 *, unsigned int *))(*(_QWORD *)a1 + 48))(a1, 0, a3, v22, v18, &v40);
        if ((_DWORD)v24)
          goto LABEL_32;
        if (!v40)
          goto LABEL_31;
        v25 = (__int16 *)a2;
        if (v40 >= 4)
          break;
        LODWORD(v26) = 0;
LABEL_30:
        a3 += v26;
        a2 = (unsigned __int16 *)v25;
        v19 = a4 - 128;
        if (a3 >= a4)
          goto LABEL_31;
      }
      v26 = 0;
      v27 = v40 - 3;
      v28 = v40 - 1;
      while (1)
      {
        v44 = 0u;
        v45 = 0u;
        *(_OWORD *)&v42[4] = 0u;
        v43 = 0u;
        v29 = v18[v26];
        v30 = ParseMPEGSyncWord(_byteswap_ulong(*(_DWORD *)&v18[v26]), (uint64_t)&v42[4]);
        if (v29 == 255 && v30 != 0)
        {
          v32 = v42[9];
          if (v42[9] - 1 <= 2)
            break;
        }
        ++v26;
        v40 = v28--;
        if (v27 == v26)
          goto LABEL_30;
      }
      if (v36)
        *v36 = v42[8];
      if (v37)
        *v37 = v32;
      if (v38)
        *v38 = *(_DWORD *)&v42[12];
      if (a9)
        *a9 = *((double *)&v43 + 1);
      if (a10)
        *a10 = DWORD1(v45);
      v33 = a3 + v26;
      if (!*v25 || v33 + *(unsigned int *)&v42[12] <= a4 - 128)
      {
        v24 = 0;
        *v35 = v33;
        goto LABEL_50;
      }
    }
    v24 = 4294967257;
LABEL_50:
    free(v18);
  }
  else
  {
    v24 = 1685348671;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v42 = "MP3AudioFile.cpp";
      *(_WORD *)&v42[8] = 1024;
      *(_DWORD *)&v42[10] = 156;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  could not make space", buf, 0x12u);
    }
  }
  return v24;
}

void sub_18F059C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (a17)
    free(a17);
  _Unwind_Resume(exception_object);
}

BOOL ID3v1TagExistsDS(DataSource *a1)
{
  _BOOL8 result;
  int v3;
  _BYTE v4[4];
  uint64_t v5;

  v5 = 0;
  (*(void (**)(DataSource *, uint64_t *))(*(_QWORD *)a1 + 24))(a1, &v5);
  result = 0;
  if (v5 >= 128)
  {
    v3 = 0;
    if (!(*(unsigned int (**)(DataSource *, uint64_t, uint64_t, uint64_t, _BYTE *, int *))(*(_QWORD *)a1 + 48))(a1, 2, -128, 4, v4, &v3)&& v4[0] == 84&& v4[1] == 65&& v4[2] == 71)
    {
      return 1;
    }
  }
  return result;
}

uint64_t MPEGAudioFile::AddLoudnessInfoToID3Tag(MPEGAudioFile *this)
{
  uint64_t v1;
  int v3;
  size_t v4;
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  size_t __n;

  v1 = *((_QWORD *)this + 53);
  if (!v1)
    return 0;
  if (!*((_QWORD *)this + 21))
    return 0xFFFFFFFFLL;
  v3 = 2 * (*((_DWORD *)this + 108) + *(unsigned __int8 *)(v1 + 3));
  v4 = (v3 + 3);
  LODWORD(__n) = v3 + 3;
  v5 = malloc_type_malloc(v4, 0x2C8E6D5CuLL);
  if (!v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
  }
  v6 = v5;
  bzero(v5, v4);
  if (MPEGAudioFile::CreateLoudnessInfoString(this, (char *)v6, (unsigned int *)&__n))
    v8 = 0xFFFFFFFFLL;
  else
    v8 = ID3Creator::AddCommentFrame(*((ID3Creator **)this + 21), v6, __n, "iTunLOUD", v7);
  free(v6);
  return v8;
}

uint64_t MPEGAudioFile::AddSoundCheckToID3Tag(MPEGAudioFile *this)
{
  size_t v2;
  char *v3;
  BOOL v4;
  char *v5;
  const char *v6;
  uint64_t v7;
  std::bad_alloc *exception;
  std::bad_alloc *v10;

  if (!*((_QWORD *)this + 52))
    return 0;
  if (!*((_QWORD *)this + 21))
    return 2003334207;
  v2 = (45 * *((_DWORD *)this + 13) + 1);
  v3 = (char *)malloc_type_malloc(v2, 0x2C8E6D5CuLL);
  if (v3)
    v4 = 1;
  else
    v4 = (_DWORD)v2 == 0;
  if (!v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_alloc::bad_alloc(exception);
  }
  v5 = v3;
  bzero(v3, v2);
  MPEGAudioFile::GetSCString(this, v5);
  v7 = ID3Creator::AddCommentFrame(*((ID3Creator **)this + 21), v5, v2, "iTunNORM", v6);
  free(v5);
  return v7;
}

uint64_t MPEGAudioFile::SerializeID3TagToFile(MPEGAudioFile *this)
{
  size_t v2;
  void *v3;
  BOOL v4;
  void *v5;
  uint64_t result;
  uint64_t v7;
  size_t v8;
  std::bad_alloc *exception;
  std::bad_alloc *v10;
  int v11;

  v2 = *(unsigned int *)(*((_QWORD *)this + 21) + 24);
  v3 = malloc_type_malloc(v2, 0x7C51E058uLL);
  if ((_DWORD)v2)
    v4 = v3 == 0;
  else
    v4 = 0;
  if (v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_alloc::bad_alloc(exception);
  }
  v5 = v3;
  result = 2003334207;
  v7 = *((_QWORD *)this + 21);
  if (*(_BYTE *)(v7 + 8))
  {
    v8 = *(unsigned int *)(v7 + 24);
    if (v8 <= v2)
    {
      memcpy(v5, *(const void **)(v7 + 16), v8);
      v11 = 0;
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, size_t, void *, int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, 0, v2, v5, &v11);
      *((_QWORD *)this + 9) = v2;
    }
  }
  return result;
}

void MPEGAudioFile::GetSCString(MPEGAudioFile *this, char *a2)
{
  unsigned int v4;
  int *v5;
  BOOL v6;
  int *v7;
  std::bad_alloc *exception;
  std::bad_alloc *v9;

  v4 = *((_DWORD *)this + 13);
  v5 = (int *)malloc_type_malloc(20 * v4, 0x2C8E6D5CuLL);
  if (20 * v4)
    v6 = v5 == 0;
  else
    v6 = 0;
  if (v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_alloc::bad_alloc(exception);
  }
  v7 = v5;
  bzero(v5, 20 * v4);
  if (!GetSCFields(*((CACFDictionary **)this + 52), (unsigned int *)v7, v4))
    FillSCString(v7, v4, a2);
  free(v7);
}

uint64_t MPEGAudioFile::ParseID3Tags(MPEGAudioFile *this)
{
  uint64_t result;
  uint64_t v3;

  v3 = 0;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v3);
  *((_WORD *)this + 93) = ID3v1TagExistsDS(*((DataSource **)this + 13));
  result = ID3ParserOpen((uint64_t)this, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, unsigned __int8 **, unsigned int *))MP3ID3CallbackProc, (_QWORD *)this + 20);
  if ((_DWORD)result && *((_WORD *)this + 93))
  {
    *((_QWORD *)this + 19) = v3 - 128;
    result = ID3ParserOpen((uint64_t)this, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, unsigned __int8 **, unsigned int *))MP3ID3CallbackProc, (_QWORD *)this + 20);
    if ((_DWORD)result)
      *((_QWORD *)this + 19) = 0;
  }
  else
  {
    *((_WORD *)this + 92) = 1;
  }
  return result;
}

uint64_t MP3ID3CallbackProc(_QWORD *a1, int a2, unsigned int a3, int a4, void **a5, unsigned int *a6)
{
  size_t v9;
  uint64_t v11;
  int64_t v12;
  uint64_t result;
  void *v14;
  uint64_t v15;
  int64_t v16;
  unsigned int v17;
  void *v18;
  BOOL v19;
  void *v20;
  std::bad_alloc *exception;
  std::bad_alloc *v22;
  int v23;
  unsigned int v24;
  int64_t v25;

  if (a2 == 1)
  {
    v14 = (void *)a1[22];
    if (v14)
      free(v14);
    result = 0;
    a1[22] = 0;
  }
  else
  {
    if (a2)
      return 0;
    LODWORD(v9) = a4;
    v25 = 0;
    (*(void (**)(_QWORD, int64_t *))(*(_QWORD *)a1[13] + 24))(a1[13], &v25);
    v11 = a1[19];
    v12 = v25;
    if ((uint64_t)(v9 + (unint64_t)a3 + v11) > v25)
      return 4294967272;
    if (v9 <= 0x400)
      LODWORD(v9) = 1024;
    if (!a1[20])
      goto LABEL_19;
    v23 = 4;
    v24 = 0;
    v15 = BaseOpaqueObject::ResolveOpaqueRef();
    if (!v15)
      return 2003334207;
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, int *, unsigned int *))(*(_QWORD *)v15 + 32))(v15, 0, 0, 1953720698, &v23, &v24);
    if (!(_DWORD)result)
    {
      if (v24 <= a3)
        return 4294967272;
      if (v9 >= v24 - a3)
        LODWORD(v9) = v24 - a3;
      v11 = a1[19];
      v12 = v25;
LABEL_19:
      v16 = v11 + v9;
      v17 = v12 - v11;
      if (v16 <= v12)
        v9 = v9;
      else
        v9 = v17;
      v18 = malloc_type_malloc(v9, 0x2C8E6D5CuLL);
      if (v18)
        v19 = 1;
      else
        v19 = (_DWORD)v9 == 0;
      if (!v19)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v22 = std::bad_alloc::bad_alloc(exception);
      }
      v20 = v18;
      bzero(v18, v9);
      a1[22] = v20;
      v24 = 0;
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, size_t, void *, unsigned int *))(*(_QWORD *)a1[13]
                                                                                                 + 48))(a1[13], 0, a1[19] + a3, v9, v20, &v24);
      if (!(_DWORD)result)
      {
        *a5 = (void *)a1[22];
        *a6 = v24;
      }
    }
  }
  return result;
}

uint64_t MPEGAudioFile::CreateLoudnessInfoString(MPEGAudioFile *this, char *a2, unsigned int *a3)
{
  __int16 *v3;
  unsigned int v5;
  uint64_t result;
  int v8;
  size_t v9;
  int v10;
  size_t v11;
  int v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  size_t v20;
  int v21;
  size_t v22;
  uint64_t v23;
  char __str[32];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = (__int16 *)*((_QWORD *)this + 53);
  if (!v3)
    return 0xFFFFFFFFLL;
  if (!*((_QWORD *)this + 21))
    return 0xFFFFFFFFLL;
  v5 = 2 * (*((_DWORD *)this + 108) + *((unsigned __int8 *)v3 + 3)) + 3;
  if (*a3 < v5)
    return 0xFFFFFFFFLL;
  *a3 = v5;
  v8 = *v3;
  *(_DWORD *)a2 = 808464432;
  snprintf(__str, 0x20uLL, "%X", v8);
  v9 = strlen(__str);
  memcpy(&a2[-v9 + 4], __str, v9);
  a2[4] = 32;
  v10 = *(unsigned __int8 *)(*((_QWORD *)this + 53) + 2);
  *(_WORD *)(a2 + 5) = 12336;
  snprintf(__str, 0x20uLL, "%X", v10);
  v11 = strlen(__str);
  memcpy(&a2[-v11 + 7], __str, v11);
  a2[7] = 32;
  v12 = *(unsigned __int8 *)(*((_QWORD *)this + 53) + 3);
  *((_WORD *)a2 + 4) = 12336;
  snprintf(__str, 0x20uLL, "%X", v12);
  v13 = strlen(__str);
  memcpy(&a2[-v13 + 10], __str, v13);
  a2[10] = 32;
  v14 = *((_QWORD *)this + 53);
  if (*(_BYTE *)(v14 + 3))
  {
    v15 = 0;
    v16 = 0;
    v17 = 10;
    do
    {
      v18 = &a2[v17];
      v19 = *(unsigned __int8 *)(v14 + v15 + 4);
      *(_WORD *)&a2[v17 + 1] = 12336;
      snprintf(__str, 0x20uLL, "%X", v19);
      v20 = strlen(__str);
      memcpy(&a2[v17 - v20 + 3], __str, v20);
      v18[3] = 32;
      v21 = *(unsigned __int8 *)(*((_QWORD *)this + 53) + v15 + 5);
      *((_WORD *)v18 + 2) = 12336;
      snprintf(__str, 0x20uLL, "%X", v21);
      v22 = strlen(__str);
      memcpy(&a2[v17 - v22 + 6], __str, v22);
      v18[6] = 32;
      ++v16;
      v14 = *((_QWORD *)this + 53);
      v17 += 6;
      v15 += 2;
    }
    while (v16 < *(unsigned __int8 *)(v14 + 3));
    v23 = v17;
  }
  else
  {
    v23 = 10;
  }
  result = 0;
  a2[v23] = 0;
  return result;
}

void MPEGAudioFormat::~MPEGAudioFormat(MPEGAudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL MPEGAudioFormat::ExtensionIsThisFormat(MPEGAudioFormat *this, CFStringRef theString1)
{
  int v3;
  const __CFString *v4;
  const __CFString *v5;
  uint64_t v6;

  v3 = *((_DWORD *)this + 2);
  if (v3 == 1297106738)
    v4 = CFSTR("mp2");
  else
    v4 = CFSTR("mp3");
  if (v3 == 1297106737)
    v5 = CFSTR("mp1");
  else
    v5 = v4;
  v6 = 1;
  if (CFStringCompare(theString1, v5, 1uLL))
  {
    v6 = 1;
    if (CFStringCompare(theString1, CFSTR("mpeg"), 1uLL))
    {
      v6 = 1;
      if (CFStringCompare(theString1, CFSTR("mpa"), 1uLL))
      {
        v6 = 1;
        if (CFStringCompare(theString1, CFSTR("m1a"), 1uLL))
          return CFStringCompare(theString1, CFSTR("m2a"), 1uLL) == kCFCompareEqualTo;
      }
    }
  }
  return v6;
}

uint64_t MPEGAudioFormat::FileDataIsThisFormat(MPEGAudioFormat *this, unsigned int a2, unsigned int *a3)
{
  int v4;
  int v5;
  int v6;
  BOOL v7;
  _BYTE v9[13];
  unsigned __int8 v10;

  MPEGPacketParser::MPEGPacketParser((MPEGPacketParser *)v9, a3, a2);
  if (v9[0]
    && ((v4 = *((_DWORD *)this + 2), v4 == 1297106738) ? (v5 = 778924082) : (v5 = 778924083),
        v4 != 1297106737 ? (v6 = v5) : (v6 = 778924081),
        v10 - 1 <= 2 ? (v7 = (v10 - 1) + 778924081 == v6) : (v7 = 0),
        v7))
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

const __CFArray *MPEGAudioFormat::GetExtensions(MPEGAudioFormat *this, const __CFArray **a2)
{
  int v3;
  const __CFString *v4;
  const __CFArray *result;
  const void *v6[6];

  v6[5] = *(const void **)MEMORY[0x1E0C80C00];
  v6[0] = 0;
  v3 = *((_DWORD *)this + 2);
  switch(v3)
  {
    case 1297106739:
      v4 = CFSTR("mp3");
      goto LABEL_7;
    case 1297106738:
      v4 = CFSTR("mp2");
      goto LABEL_7;
    case 1297106737:
      v4 = CFSTR("mp1");
LABEL_7:
      v6[0] = v4;
      break;
  }
  v6[1] = CFSTR("mpeg");
  v6[2] = CFSTR("mpa");
  v6[3] = CFSTR("m1a");
  v6[4] = CFSTR("m2a");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, 5, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *MPEGAudioFormat::GetUTIs(MPEGAudioFormat *this, const __CFArray **a2)
{
  int v3;
  const __CFString *v4;
  const __CFArray *result;
  const void *v6[2];

  v6[1] = *(const void **)MEMORY[0x1E0C80C00];
  v6[0] = 0;
  v3 = *((_DWORD *)this + 2);
  switch(v3)
  {
    case 1297106739:
      v4 = CFSTR("public.mp3");
      goto LABEL_7;
    case 1297106738:
      v4 = CFSTR("public.mp2");
      goto LABEL_7;
    case 1297106737:
      v4 = CFSTR("public.mp1");
LABEL_7:
      v6[0] = v4;
      break;
  }
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

CFArrayRef MPEGAudioFormat::GetMIMETypes(CFArrayRef this, const __CFArray **a2)
{
  int v3;
  const __CFAllocator *v4;
  const CFArrayCallBacks *v5;
  CFIndex v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 2);
  if ((v3 - 1297106737) >= 2)
  {
    if (v3 != 1297106739)
      return this;
    v7 = CFSTR("audio/mp3");
    v8 = CFSTR("audio/x-mp3");
    v9 = CFSTR("audio/x-mpeg3");
    v10 = CFSTR("audio/x-mpeg");
    v11 = CFSTR("audio/mpeg");
    v12 = CFSTR("audio/mpeg3");
    v13 = CFSTR("audio/mpg");
    v14 = CFSTR("audio/x-mpg");
    v15 = CFSTR("audio/mpa");
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v6 = 9;
  }
  else
  {
    v7 = CFSTR("audio/mpeg");
    v8 = CFSTR("audio/x-mpeg");
    v9 = CFSTR("audio/mpg");
    v10 = CFSTR("audio/x-mpg");
    v11 = CFSTR("audio/mpa");
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v6 = 5;
  }
  this = CFArrayCreate(v4, (const void **)&v7, v6, v5);
  *a2 = this;
  return this;
}

void MPEGAudioFormat::GetFileTypeName(MPEGAudioFormat *this, const __CFString **a2)
{
  __CFBundle *v4;
  unsigned int v5;
  const __CFString *v6;
  char v7;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v7);
  v4 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle != -1)
  {
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_6:
    v6 = (const __CFString *)CFRetain(CFSTR("MPEG"));
    goto LABEL_7;
  }
  pthread_once(&sOnce, InitGetAudioToolboxBundle);
  v4 = (__CFBundle *)sAudioToolboxBundle;
  if (!sAudioToolboxBundle)
    goto LABEL_6;
LABEL_3:
  v5 = *((_DWORD *)this + 2) - 1297106737;
  if (v5 < 3)
  {
    v6 = CFBundleCopyLocalizedString(v4, *(&off_1E2921DB8 + v5), *(&off_1E2921DB8 + v5), CFSTR("FileTypeNames"));
LABEL_7:
    *a2 = v6;
  }
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v7);
}

void sub_18F05AB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t MPEGAudioFormat::GetAvailableFormatIDs(MPEGAudioFormat *this, unsigned int *a2, void *__dst)
{
  int v3;
  int v4;
  int v5;
  size_t v6;
  int __src;

  v3 = *((_DWORD *)this + 2);
  if (v3 == 1297106738)
    v4 = 778924082;
  else
    v4 = 778924083;
  if (v3 == 1297106737)
    v5 = 778924081;
  else
    v5 = v4;
  __src = v5;
  if (*a2 >= 4)
    v6 = 4;
  else
    v6 = *a2 & 0xFFFFFFFC;
  *a2 = v6;
  if (__dst)
    memcpy(__dst, &__src, v6);
  return 0;
}

uint64_t MPEGAudioFormat::GetAvailableStreamDescriptions(MPEGAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  int v4;
  int v5;
  int v6;
  size_t v7;
  _OWORD v9[2];
  uint64_t v10;

  v4 = *((_DWORD *)this + 2);
  if (v4 == 1297106738)
    v5 = 778924082;
  else
    v5 = 778924083;
  if (v4 == 1297106737)
    v6 = 778924081;
  else
    v6 = v5;
  if (v6 == a2)
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    DWORD2(v9[0]) = 778924083;
    if (*a3 >= 0x28)
      v7 = 40;
    else
      v7 = 0;
    *a3 = v7;
    if (__dst)
      memcpy(__dst, v9, v7);
    return 0;
  }
  else
  {
    *a3 = 0;
    return 1718449215;
  }
}

uint64_t MPEGAudioFormat::GetHFSCodes(MPEGAudioFormat *this, unsigned int *a2, void *a3)
{
  int v3;
  _DWORD *v4;
  void *v5;
  char *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  _BYTE v14[32];
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 2);
  if ((v3 - 1297106737) >= 2 && v3 == 1297106739)
  {
    MEMORY[0x1E0C80A78](this);
    v6 = v14;
    qmemcpy(v14, " 3pM3GPM!3pm!3PM3gpm 3PM", 24);
    v7 = 6;
    goto LABEL_9;
  }
  MEMORY[0x1E0C80A78](this);
  v6 = (char *)v15 - v9;
  if (v8 == 1297106738)
  {
    v10 = 0x4D5047324D703220;
  }
  else
  {
    if (v8 != 1297106737)
      goto LABEL_9;
    v10 = 0x4D5047314D703120;
  }
  *(_QWORD *)v6 = v10;
LABEL_9:
  v11 = *v4 >> 2;
  if (v11 >= v7)
    v11 = v7;
  v12 = 4 * v11;
  *v4 = v12;
  if (v5)
    memcpy(v5, v6, v12);
  return 0;
}

double MPEGAudioFormat::New(MPEGAudioFormat *this)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  double result;

  v2 = operator new();
  v3 = *((_DWORD *)this + 2);
  *(_DWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  if (v3 == 1297106738)
    v4 = 778924082;
  else
    v4 = 778924083;
  *(_QWORD *)(v2 + 16) = 0;
  if (v3 == 1297106737)
    v5 = 778924081;
  else
    v5 = v4;
  *(_DWORD *)(v2 + 80) = 1;
  *(_DWORD *)(v2 + 84) = v3;
  *(_QWORD *)(v2 + 88) = 0;
  *(_DWORD *)(v2 + 96) = -1;
  *(_WORD *)(v2 + 100) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_DWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0x100000000;
  result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)v2 = &off_1E2903528;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 140) = 0;
  *(_DWORD *)(v2 + 144) = 0;
  *(_DWORD *)(v2 + 148) = v5;
  *(_DWORD *)(v2 + 184) = -65536;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_DWORD *)(v2 + 208) = 1448;
  *(_QWORD *)(v2 + 400) = 0;
  *(_WORD *)(v2 + 408) = 1;
  *(_DWORD *)(v2 + 432) = 0;
  *(_QWORD *)(v2 + 416) = 0;
  *(_QWORD *)(v2 + 424) = 0;
  *(_OWORD *)(v2 + 384) = xmmword_18F1173E0;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 376) = 0;
  *(_DWORD *)(v2 + 136) = 16843008;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  return result;
}

uint64_t MPEGAudioFormat::NewStream(MPEGAudioFormat *this)
{
  uint64_t v1;

  v1 = operator new();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = -1;
  *(_QWORD *)(v1 + 96) = -1;
  *(_QWORD *)(v1 + 104) = -1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_OWORD *)(v1 + 240) = xmmword_18F116F80;
  *(_DWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 300) = 0;
  *(_QWORD *)(v1 + 284) = 0;
  *(_QWORD *)(v1 + 292) = 0;
  *(_DWORD *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)v1 = &off_1E2904638;
  *(_BYTE *)(v1 + 356) = 0;
  *(_DWORD *)(v1 + 360) = 0;
  *(_BYTE *)(v1 + 364) = 0;
  *(_QWORD *)(v1 + 368) = 0;
  *(_BYTE *)(v1 + 380) = 0;
  *(_QWORD *)(v1 + 384) = 0;
  *(_QWORD *)(v1 + 336) = 0;
  *(_QWORD *)(v1 + 344) = 0;
  *(_WORD *)(v1 + 408) = 255;
  *(_DWORD *)(v1 + 432) = 0;
  *(_QWORD *)(v1 + 440) = 0;
  *(_BYTE *)(v1 + 448) = 0;
  bzero((void *)(v1 + 416), 0x10uLL);
  return v1;
}

UIImage *__cdecl AudioComponentGetIcon(AudioComponent comp, float desiredPointSize)
{
  UIImage *v3;
  std::recursive_mutex *v5;
  uint64_t v6;
  float v7;
  id v8;

  v7 = desiredPointSize;
  v8 = 0;
  GlobalComponentPluginMgr((uint64_t *)&v5);
  (*(void (**)(uint64_t, AudioComponent, float *))(*(_QWORD *)v6 + 48))(v6, comp, &v7);
  if (v5)
    std::recursive_mutex::unlock(v5);
  v3 = (UIImage *)v8;

  return v3;
}

void sub_18F05B008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a9)
    std::recursive_mutex::unlock(a9);

  _Unwind_Resume(a1);
}

UIImage *__cdecl AudioComponentCopyIcon(AudioComponent comp)
{
  UIImage *v2;
  std::recursive_mutex *v4;
  uint64_t v5;
  int v6;
  id v7;

  v6 = 0;
  v7 = 0;
  GlobalComponentPluginMgr((uint64_t *)&v4);
  (*(void (**)(uint64_t, AudioComponent, int *))(*(_QWORD *)v5 + 48))(v5, comp, &v6);
  if (v4)
    std::recursive_mutex::unlock(v4);
  v2 = (UIImage *)v7;

  return v2;
}

void sub_18F05B0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

uint64_t AudioAnalyzerNew(CFArrayRef theArray, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  CFIndex v8;
  const __CFString *ValueAtIndex;
  uint64_t result;
  uint64_t v11;

  if (!a2)
    return 4294967246;
  if (!theArray)
    return 4294963435;
  if (!a4)
    return 4294967246;
  v8 = 0;
  while (v8 < CFArrayGetCount(theArray))
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v8++);
    if (!KeyIsValid(ValueAtIndex))
      return 4294963435;
  }
  v11 = operator new();
  AAAudioAnalyzer::AAAudioAnalyzer(v11, theArray, a2, a3, 0);
  result = 0;
  *a4 = *(unsigned int *)(v11 + 8);
  return result;
}

void sub_18F05B18C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F1C4082C3477ALL);
  _Unwind_Resume(a1);
}

uint64_t AudioAnalyzerNewWithBlock(CFArrayRef theArray, uint64_t a2, _QWORD *a3)
{
  CFIndex v6;
  const __CFString *ValueAtIndex;
  uint64_t result;
  uint64_t v9;

  if (!a2)
    return 4294967246;
  if (!theArray)
    return 4294963435;
  if (!a3)
    return 4294967246;
  v6 = 0;
  while (v6 < CFArrayGetCount(theArray))
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v6++);
    if (!KeyIsValid(ValueAtIndex))
      return 4294963435;
  }
  v9 = operator new();
  AAAudioAnalyzer::AAAudioAnalyzer(v9, theArray, 0, 0, a2);
  result = 0;
  *a3 = *(unsigned int *)(v9 + 8);
  return result;
}

void sub_18F05B260(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F1C4082C3477ALL);
  _Unwind_Resume(a1);
}

uint64_t AudioAnalyzerDispose()
{
  uint64_t v0;

  v0 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v0)
    return 4294967246;
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  return 0;
}

uint64_t AudioAnalyzerPrepare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  if (a2 && (a6 & 0x8000000000000000) == 0 && (v11 = BaseOpaqueObject::ResolveOpaqueRef()) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, a2, a3, a4, a5, a6);
  else
    return 4294967246;
}

uint64_t AudioAnalyzerPrepareWithFileStream(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v3)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2);
  else
    return 4294967246;
}

uint64_t AudioAnalyzerPrepareWithFile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2, a3);
  else
    return 4294967246;
}

uint64_t AudioAnalyzerPushAudio(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v7;

  if (!a3)
    return 4294967246;
  v7 = (_BYTE *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!v7)
    return 4294967246;
  if (v7[12])
    return (*(uint64_t (**)(_BYTE *, _QWORD, _QWORD))(*(_QWORD *)v7 + 64))(v7, *(unsigned int *)(a3 + 12), *(_QWORD *)(a3 + 16));
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 56))(v7, a2, a3, a4);
}

uint64_t AudioAnalyzerCompleteAnalysis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 72))(v5, a2, a3, 0);
  else
    return 4294967246;
}

uint64_t AudioAnalyzerCompleteAnalysisWithBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v3)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v3 + 72))(v3, 0, 0, a2);
  else
    return 4294967246;
}

void auoop::WorkgroupPropagator::propagate(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ipc_space_t *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  uint64_t *v23;
  int64_t v24;
  OS_os_workgroup *WeakRetained;
  OS_os_workgroup *v26;
  int v27;
  NSObject *v28;
  id v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  id v33;
  xpc_object_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  void *v61;
  xpc_object_t v62;
  Class Class;
  objc_class *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  id v68;
  void *v69;
  id v70;
  void *v71;
  id v72;
  mach_port_t mach_port_out[2];
  void *v74;
  xpc_object_t xarray;
  _BYTE buf[18];
  __int16 v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  applesauce::xpc::array::create((applesauce::xpc::array *)&xarray);
  applesauce::xpc::array::create((applesauce::xpc::array *)&v74);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v5 = *(uint64_t **)(a1 + 48);
  if (v4 > (uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)v5) >> 3)
  {
    if (v4 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v6 = *(_QWORD *)(a1 + 56);
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v4);
    v8 = (uint64_t *)&v7[(v6 - (_QWORD)v5) & 0xFFFFFFFFFFFFFFF8];
    v10 = &v7[8 * v9];
    v11 = *(char **)(a1 + 48);
    v12 = *(char **)(a1 + 56);
    v5 = v8;
    if (v12 != v11)
    {
      v5 = v8;
      do
      {
        v13 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *--v5 = v13;
      }
      while (v12 != v11);
    }
    *(_QWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v10;
    if (v11)
    {
      operator delete(v11);
      v5 = *(uint64_t **)(a1 + 48);
    }
  }
  v15 = *a2;
  v14 = a2[1];
  v16 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
LABEL_9:
  v17 = v74;
  v18 = *(uint64_t **)(a1 + 56);
  while (v5 != v18)
  {
    v19 = *v5;
    if (v15 != v14)
    {
      v20 = *(_QWORD *)(v15 + 8);
      if (v20 < v19)
      {
LABEL_20:
        WeakRetained = (OS_os_workgroup *)objc_loadWeakRetained((id *)(v15 + 16));
        v26 = WeakRetained;
        if (WeakRetained)
        {
          mach_port_out[0] = 0;
          v27 = os_workgroup_copy_port(WeakRetained, mach_port_out);
          if (!v27)
            goto LABEL_30;
          if (kAUExtensionScope)
          {
            v28 = *(id *)kAUExtensionScope;
            if (!v28)
              goto LABEL_30;
          }
          else
          {
            v28 = MEMORY[0x1E0C81028];
            v29 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUOOPWorkgroups.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 317;
            v77 = 1024;
            v78 = v27;
            _os_log_impl(&dword_18EE07000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Copying workgroup port failed (%d)", buf, 0x18u);
          }

LABEL_30:
          *(_QWORD *)buf = *(_QWORD *)(v15 + 8);
          v30 = xpc_uint64_create(*(uint64_t *)buf);
          v31 = v30;
          if (!v30)
            v31 = xpc_null_create();

          v32 = xarray;
          xpc_array_append_value(xarray, v31);

          v33 = (id)xpc_mach_send_create();
          v34 = v33;
          if (!v33)
            v34 = xpc_null_create();

          xpc_array_append_value(v32, v34);
          mach_port_deallocate(*v16, mach_port_out[0]);
          v35 = *(uint64_t **)(a1 + 56);
          v36 = *(_QWORD *)(a1 + 64);
          if ((unint64_t)v35 >= v36)
          {
            v40 = *(uint64_t **)(a1 + 48);
            v41 = v35 - v40 + 1;
            if (v41 >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v42 = v36 - (_QWORD)v40;
            if (v42 >> 2 > v41)
              v41 = v42 >> 2;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
              v43 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v43 = v41;
            if (v43)
            {
              v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v43);
            }
            else
            {
              v45 = 0;
              v44 = 0;
            }
            v47 = (char *)v5 - (char *)v40;
            v48 = v5 - v40;
            v49 = (uint64_t *)&v45[8 * v48];
            v50 = &v45[8 * v44];
            if (v48 == v44)
            {
              if (v47 < 1)
              {
                if (v40 == v5)
                  v52 = 1;
                else
                  v52 = v47 >> 2;
                v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v52);
                v49 = (uint64_t *)&v53[8 * (v52 >> 2)];
                v50 = &v53[8 * v54];
                if (v45)
                  operator delete(v45);
              }
              else
              {
                if (v48 >= -1)
                  v51 = v48 + 1;
                else
                  v51 = v48 + 2;
                v49 -= v51 >> 1;
              }
            }
            *v49 = *(_QWORD *)buf;
            v55 = *(uint64_t **)(a1 + 48);
            v56 = v49;
            if (v55 != v5)
            {
              v57 = v5;
              v56 = v49;
              do
              {
                v58 = *--v57;
                *--v56 = v58;
              }
              while (v57 != v55);
            }
            v59 = *(uint64_t **)(a1 + 56);
            v60 = (char *)v59 - (char *)v5;
            if (v59 != v5)
              memmove(v49 + 1, v5, (char *)v59 - (char *)v5);
            v61 = *(void **)(a1 + 48);
            *(_QWORD *)(a1 + 48) = v56;
            *(_QWORD *)(a1 + 56) = (char *)v49 + v60 + 8;
            *(_QWORD *)(a1 + 64) = v50;
            if (v61)
              operator delete(v61);
            v5 = v49;
            v16 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
          }
          else if (v5 == v35)
          {
            *v5 = *(_QWORD *)buf;
            *(_QWORD *)(a1 + 56) = v5 + 1;
          }
          else
          {
            v37 = v35 - 1;
            v38 = *(_QWORD **)(a1 + 56);
            while (v37 < v35)
            {
              v39 = *v37++;
              *v38++ = v39;
            }
            *(_QWORD *)(a1 + 56) = v38;
            if (v35 != v5 + 1)
              memmove(&v35[-(v35 - (v5 + 1))], v5, (char *)v35 - (char *)(v5 + 1));
            v46 = buf;
            if (v5 <= (uint64_t *)buf)
              v46 = &buf[8 * (*(_QWORD *)(a1 + 56) > (unint64_t)buf)];
            *v5 = *(_QWORD *)v46;
          }
          ++v5;
        }

        goto LABEL_75;
      }
      if (v19 >= v20)
      {
        ++v5;
LABEL_75:
        v15 += 24;
        goto LABEL_9;
      }
    }
    v21 = xpc_uint64_create(v19);
    v22 = v21;
    if (!v21)
      v22 = xpc_null_create();

    xpc_array_append_value(v17, v22);
    v23 = *(uint64_t **)(a1 + 56);
    v24 = (char *)v23 - (char *)(v5 + 1);
    if (v23 != v5 + 1)
      memmove(v5, v5 + 1, (char *)v23 - (char *)(v5 + 1));
    v18 = (uint64_t *)((char *)v5 + v24);
    *(_QWORD *)(a1 + 56) = (char *)v5 + v24;
  }
  if (v15 != v14)
    goto LABEL_20;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  v62 = xarray;
  Class = object_getClass(xarray);
  v64 = (objc_class *)MEMORY[0x1E0C812C8];
  if (Class == (Class)MEMORY[0x1E0C812C8] && xpc_array_get_count(v62)
    || object_getClass(v17) == v64 && xpc_array_get_count(v17))
  {
    applesauce::xpc::dict::create((applesauce::xpc::dict *)mach_port_out);
    applesauce::xpc::object::object(&v71, v62);
    *(_QWORD *)buf = mach_port_out;
    *(_QWORD *)&buf[8] = "add";
    applesauce::xpc::dict::object_proxy::operator=(&v72, (uint64_t)buf, &v71);

    v65 = v71;
    v71 = 0;

    applesauce::xpc::object::object(&v69, v17);
    *(_QWORD *)buf = mach_port_out;
    *(_QWORD *)&buf[8] = "remove";
    applesauce::xpc::dict::object_proxy::operator=(&v70, (uint64_t)buf, &v69);

    v66 = v69;
    v69 = 0;

    v67 = *(_QWORD *)(a1 + 32);
    if (!v67)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, mach_port_t *))(*(_QWORD *)v67 + 48))(v67, mach_port_out);
    v68 = *(id *)mach_port_out;
    *(_QWORD *)mach_port_out = 0;

  }
}

void sub_18F05BB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void std::vector<auoop::TrackedWorkgroup>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;
        objc_destroyWeak(v4 - 1);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void applesauce::xpc::array::create(applesauce::xpc::array *this)
{
  xpc_object_t v2;
  id v3;
  void *v4;
  id v5;

  v2 = xpc_array_create(0, 0);
  v5 = v2;
  if (!v2)
    v2 = xpc_null_create();

  v3 = v2;
  v4 = v3;
  *(_QWORD *)this = v3;
  if (!v3 || object_getClass(v3) != (Class)MEMORY[0x1E0C812C8])
  {
    *(_QWORD *)this = xpc_null_create();

  }
}

void std::vector<auoop::TrackedWorkgroup>::__init_with_size[abi:ne180100]<auoop::TrackedWorkgroup*,auoop::TrackedWorkgroup*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;

  if (a4)
  {
    std::vector<auoop::TrackedWorkgroup>::__vallocate[abi:ne180100](a1, a4);
    v7 = a1[1];
    while (a2 != a3)
    {
      *(_OWORD *)v7 = *(_OWORD *)a2;
      objc_copyWeak((id *)(v7 + 16), (id *)(a2 + 16));
      v7 += 24;
      a2 += 24;
    }
    a1[1] = v7;
  }
}

void sub_18F05BE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<auoop::TrackedWorkgroup>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<auoop::TrackedWorkgroup>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id WeakRetained;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      WeakRetained = objc_loadWeakRetained((id *)(v5 + 16));
      objc_storeWeak((id *)(a3 + 16), WeakRetained);

      a3 += 24;
      v5 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::__function::__func<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0,std::allocator<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

__n128 std::__function::__func<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0,std::allocator<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2915F90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0,std::allocator<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2915F90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0,std::allocator<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::operator()(uint64_t a1, auoop::WorkgroupManager_Base::State *a2)
{
  int v3;
  void *v4;

  v3 = **(_DWORD **)(a1 + 8);
  v4 = *(void **)(*(_QWORD *)(a1 + 16) + 8);
  applesauce::dispatch::v1::source::operator*(v4);
  objc_claimAutoreleasedReturnValue();
  auoop::WorkgroupManager_Base::State::addWorkgroup(a2, v3, v4);

  return 1;
}

void sub_18F05C008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AUOOPWorkgroupManager_RemoveRemoteIOWorkgroup(auoop *a1)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  mach_port_name_t *v5;
  mach_port_name_t v6;
  int v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v1 = (int)a1;
  v11 = *MEMORY[0x1E0C80C00];
  v2 = auoop::gWorkgroupManager(a1);
  v8 = v1;
  v9[0] = &off_1E2915FD8;
  v9[1] = &v8;
  v10 = v9;
  auoop::WorkgroupManager_Base::mutateWorkgroups(v2, (uint64_t)v9);
  v3 = v10;
  if (v10 == v9)
  {
    v4 = 4;
    v3 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (mach_port_name_t *)auoop::tlsWorkgroupPort();
  v6 = *v5;
  *v5 = 0;
  return mach_port_deallocate(*MEMORY[0x1E0C83DA0], v6);
}

void sub_18F05C0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0,std::allocator<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0,std::allocator<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915FD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0,std::allocator<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915FD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0,std::allocator<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (v4 != (_DWORD *)v3)
  {
    while (*v4 != **(_DWORD **)(a1 + 8))
    {
      v4 += 6;
      if (v4 == (_DWORD *)v3)
        return 1;
    }
  }
  if (v4 != (_DWORD *)v3)
  {
    v5 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *>((uint64_t)(v4 + 6), v3, (uint64_t)v4);
    v6 = *(_QWORD *)(a2 + 8);
    if (v6 != v5)
    {
      do
      {
        v7 = v6 - 24;
        objc_destroyWeak((id *)(v6 - 8));
        v6 = v7;
      }
      while (v7 != v5);
    }
    *(_QWORD *)(a2 + 8) = v5;
  }
  return 1;
}

void std::__function::__func<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0,std::allocator<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0,std::allocator<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916020;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0,std::allocator<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916020;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0,std::allocator<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::operator()(uint64_t a1, auoop::WorkgroupManager_Base::State *a2)
{
  void *v3;

  v3 = *(void **)(*(_QWORD *)(a1 + 8) + 8);
  applesauce::dispatch::v1::source::operator*(v3);
  objc_claimAutoreleasedReturnValue();
  auoop::WorkgroupManager_Base::State::addWorkgroup(a2, 0, v3);

  return 1;
}

void sub_18F05C2D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void auoop::WorkgroupMirror::update(auoop::WorkgroupMirror *this, const applesauce::xpc::dict *a2)
{
  xpc_object_t v4;
  void *v5;
  caulk::mach::details *count;
  id v7;
  void *v8;
  caulk::mach::details *v9;
  NSObject *v10;
  id v11;
  id v12;
  BOOL v13;
  void *v14;
  uint64_t value;
  unint64_t v16;
  unint64_t SlotForKey;
  unsigned int *v18;
  unsigned int *v19;
  int v20;
  int v21;
  int v24;
  unsigned int v25;
  unsigned int v26;
  NSObject *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  size_t v32;
  size_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t *v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  caulk::mach::details *v52;
  void *v53;
  __int128 v54;
  NSObject *v55;
  uint64_t v56;
  id v57;
  id v58;
  unint64_t v59;
  id v60;
  unint64_t v61;
  void *v62;
  mach_port_name_t name;
  uint64_t v64;
  id xarray;
  xpc_object_t v66;
  void *v67;
  caulk::mach::details *v68;
  __int128 v69;
  _OWORD v70[2];
  void **v71;
  id v72;
  __int128 v73;
  _OWORD v74[2];
  void *v75;
  caulk::mach::details *v76;
  __int128 v77;
  _OWORD v78[2];
  void *v79;
  caulk::mach::details *v80;
  __int128 v81;
  _OWORD v82[2];
  _BYTE v83[57];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)this);
  *(_QWORD *)v83 = a2;
  *(_QWORD *)&v83[8] = "remove";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::array(&v66, (uint64_t)v83);
  *(_QWORD *)v83 = a2;
  *(_QWORD *)&v83[8] = "add";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::array(&xarray, (uint64_t)v83);
  v4 = v66;
  applesauce::xpc::object::object((void **)v83, v66);
  applesauce::xpc::object::object(&v79, *(void **)v83);
  v80 = 0;
  v5 = *(void **)v83;
  *(_QWORD *)v83 = 0;

  applesauce::xpc::object::object((void **)v83, v4);
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C812C8])
  {
    v7 = v4;
    count = (caulk::mach::details *)xpc_array_get_count(v7);

  }
  else
  {
    count = 0;
  }
  applesauce::xpc::object::object(&v75, *(void **)v83);
  v76 = count;
  v8 = *(void **)v83;
  *(_QWORD *)v83 = 0;

  v9 = v80;
  v10 = MEMORY[0x1E0C81028];
  while (v9 != v76)
  {
LABEL_8:
    v71 = &v79;
    v72 = v9;
    applesauce::xpc::array::object_proxy::operator*((uint64_t)&v71);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    value = xpc_uint64_get_value(v14);

    *(_QWORD *)v83 = (char *)this + 88;
    v83[8] = 1;
    std::mutex::lock((std::mutex *)((char *)this + 88));
    v16 = atomic_load((unint64_t *)this + 6);
    if (v16)
    {
      SlotForKey = caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey((uint64_t *)v16, value);
      if ((SlotForKey & 1) != 0)
      {
        v19 = v18;
        atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)(v16 + 8 * HIDWORD(SlotForKey) + 16));
        if (v18)
        {
          v20 = atomic_load((unsigned int *)this + 14);
          if (v20 >= 1)
          {
            do
            {
              std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000000l>>(50);
              v21 = atomic_load((unsigned int *)this + 14);
            }
            while (v21 > 0);
          }
          if ((unsigned __int16)atomic_load(v19))
          {
            std::unique_lock<std::mutex>::unlock((std::unique_lock<std::mutex> *)v83);
            while ((unsigned __int16)atomic_load(v19))
              std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000000l>>(500);
            std::unique_lock<std::mutex>::lock((std::unique_lock<std::mutex> *)v83);
            v16 = atomic_load((unint64_t *)this + 6);
          }
          caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::element_t::release(v19);
          v24 = *((_DWORD *)this + 10) - 1;
          *((_DWORD *)this + 10) = v24;
          if (v16)
          {
            v25 = 16 * v24;
            v26 = *(_DWORD *)(v16 + 8);
            if (v25 / v26 <= 2 && v26 >= 9)
              caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::rehash((unint64_t *)this + 1, v26 >> 1);
          }
        }
      }
    }
    caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::emptyReleasePool((uint64_t)this + 8);
    if (v83[8])
      std::mutex::unlock(*(std::mutex **)v83);
    if (kAUExtensionScope)
    {
      v28 = *(id *)kAUExtensionScope;
      if (!v28)
        goto LABEL_34;
    }
    else
    {
      v29 = v10;
      v28 = v10;
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v83 = 136315650;
      *(_QWORD *)&v83[4] = "AUOOPWorkgroups.mm";
      *(_WORD *)&v83[12] = 1024;
      *(_DWORD *)&v83[14] = 354;
      *(_WORD *)&v83[18] = 2048;
      *(_QWORD *)&v83[20] = value;
      _os_log_impl(&dword_18EE07000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d wg mirror remove %p", v83, 0x1Cu);
    }

LABEL_34:
    v9 = (caulk::mach::details *)((char *)v80 + 1);
    v80 = (caulk::mach::details *)((char *)v80 + 1);
  }
  v11 = v79;
  v12 = v75;
  v13 = v11 == v12;

  if (!v13)
  {
    v9 = v80;
    goto LABEL_8;
  }
  v30 = v75;
  v75 = 0;

  v31 = v79;
  v79 = 0;

  if (object_getClass(xarray) == (Class)MEMORY[0x1E0C812C8])
  {
    v32 = xpc_array_get_count(xarray);
    v33 = v32;
    if (v32)
    {
      v34 = v32 - 1;
      v35 = 1;
      v62 = (void *)(MEMORY[0x1E0DDB760] + 16);
      v61 = v32 - 1;
      do
      {
        *(_QWORD *)v83 = &xarray;
        *(_QWORD *)&v83[8] = v35 - 1;
        applesauce::xpc::array::object_proxy::operator*((uint64_t)v83);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = xpc_uint64_get_value(v36);

        if (v35 - 1 >= v34 || !v37)
          goto LABEL_58;
        *(_QWORD *)v83 = &xarray;
        *(_QWORD *)&v83[8] = v35;
        applesauce::xpc::array::object_proxy::operator*((uint64_t)v83);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        name = xpc_mach_send_copy_right();

        std::string::basic_string[abi:ne180100]<0>(v83, "");
        caulk::mach::os_workgroup_managed::make();
        if ((v83[23] & 0x80000000) != 0)
          operator delete(*(void **)v83);
        v64 = v37;
        v67 = v62;
        v68 = (caulk::mach::details *)caulk::mach::details::retain_os_object((caulk::mach::details *)v72, v39);
        v69 = v73;
        v70[0] = v74[0];
        *(_OWORD *)((char *)v70 + 9) = *(_OWORD *)((char *)v74 + 9);
        v75 = v62;
        v76 = (caulk::mach::details *)caulk::mach::details::retain_os_object(v68, v40);
        v77 = v69;
        v78[0] = v70[0];
        *(_OWORD *)((char *)v78 + 9) = *(_OWORD *)((char *)v70 + 9);
        std::mutex::lock((std::mutex *)((char *)this + 88));
        v42 = (uint64_t *)atomic_load((unint64_t *)this + 6);
        v43 = *((_DWORD *)this + 10) + 1;
        *((_DWORD *)this + 10) = v43;
        if (v42)
        {
          v44 = 16 * v43;
          v45 = *((_DWORD *)v42 + 2);
          if (v44 / v45 < 0xB)
            goto LABEL_47;
          v46 = 2 * v45;
        }
        else
        {
          v46 = 8;
        }
        v42 = (uint64_t *)caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::rehash((unint64_t *)this + 1, v46);
LABEL_47:
        v47 = v33;
        v79 = (void *)(MEMORY[0x1E0DDB760] + 16);
        v80 = (caulk::mach::details *)caulk::mach::details::retain_os_object(v76, v41);
        v81 = v77;
        v82[0] = v78[0];
        *(_OWORD *)((char *)v82 + 9) = *(_OWORD *)((char *)v78 + 9);
        v48 = caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey(v42, v64);
        if ((v48 & 1) != 0)
        {
          caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v79);
          --*((_DWORD *)this + 10);
        }
        else
        {
          v49 = operator new();
          v50 = MEMORY[0x1E0DDB760] + 16;
          *(_QWORD *)v83 = MEMORY[0x1E0DDB760] + 16;
          v52 = (caulk::mach::details *)caulk::mach::details::retain_os_object(v80, v51);
          *(_QWORD *)&v83[8] = v52;
          *(_OWORD *)&v83[16] = v81;
          *(_OWORD *)&v83[32] = v82[0];
          *(_OWORD *)&v83[41] = *(_OWORD *)((char *)v82 + 9);
          *(_DWORD *)v49 = 0x10000;
          *(_QWORD *)(v49 + 8) = v64;
          *(_QWORD *)(v49 + 16) = v50;
          *(_QWORD *)(v49 + 24) = caulk::mach::details::retain_os_object(v52, v53);
          v54 = *(_OWORD *)&v83[32];
          *(_OWORD *)(v49 + 32) = *(_OWORD *)&v83[16];
          *(_OWORD *)(v49 + 48) = v54;
          *(_OWORD *)(v49 + 57) = *(_OWORD *)&v83[41];
          caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)v83);
          atomic_store(v49, (unint64_t *)&v42[HIDWORD(v48) + 2]);
          caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v79);
          caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::emptyReleasePool((uint64_t)this + 8);
        }
        std::mutex::unlock((std::mutex *)((char *)this + 88));
        caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v75);
        caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v67);
        v33 = v47;
        if (!kAUExtensionScope)
        {
          v55 = MEMORY[0x1E0C81028];
          v57 = MEMORY[0x1E0C81028];
          v34 = v61;
          v56 = v64;
LABEL_54:
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
          {
            v58 = objc_retainAutorelease(v72);
            *(_DWORD *)v83 = 136315906;
            *(_QWORD *)&v83[4] = "AUOOPWorkgroups.mm";
            *(_WORD *)&v83[12] = 1024;
            *(_DWORD *)&v83[14] = 367;
            *(_WORD *)&v83[18] = 2048;
            *(_QWORD *)&v83[20] = v56;
            *(_WORD *)&v83[28] = 2048;
            *(_QWORD *)&v83[30] = v58;
            _os_log_impl(&dword_18EE07000, v55, OS_LOG_TYPE_DEBUG, "%25s:%-5d wg mirror add %p -> %p", v83, 0x26u);
          }

          goto LABEL_57;
        }
        v55 = *(id *)kAUExtensionScope;
        v34 = v61;
        v56 = v64;
        if (v55)
          goto LABEL_54;
LABEL_57:
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], name);
        caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v71);
LABEL_58:
        v59 = v35 + 1;
        v35 += 2;
      }
      while (v59 < v33);
    }
  }
  v60 = xarray;
  xarray = 0;

  os_unfair_lock_unlock((os_unfair_lock_t)this);
}

void sub_18F05CA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  os_unfair_lock_s *v22;

  os_unfair_lock_unlock(v22);
  _Unwind_Resume(a1);
}

void applesauce::xpc::dict::object_proxy::operator applesauce::xpc::array(xpc_object_t *a1, uint64_t a2)
{
  xpc_object_t v3;
  id v4;
  void *v5;
  id v6;

  applesauce::xpc::dict::object_proxy::operator*(a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v6 = v3;
  if (!v3)
    v3 = xpc_null_create();

  v4 = v3;
  v5 = v4;
  *a1 = v4;
  if (!v4 || object_getClass(v4) != (Class)MEMORY[0x1E0C812C8])
  {
    *a1 = xpc_null_create();

  }
}

id applesauce::xpc::array::object_proxy::operator*(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = **(void ***)a1;
  applesauce::dispatch::v1::source::operator*(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_array_get_value(v3, *(_QWORD *)(a1 + 8));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_18F05CC78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_DWORD *caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::rehash(unint64_t *a1, unsigned int a2)
{
  unint64_t *v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  unint64_t SlotForKey;
  unsigned int v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t *v25;

  v4 = a1 + 5;
  v5 = atomic_load(a1 + 5);
  v6 = operator new(8 * (a2 - 1) + 24);
  *(_QWORD *)v6 = a1;
  v6[2] = a2;
  *((_QWORD *)v6 + 2) = 0;
  bzero(v6 + 4, 8 * a2);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 + 8);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(_QWORD *)(v5 + 8 * i + 16);
        if (v9 + 1 >= 2)
        {
          SlotForKey = caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey((uint64_t *)v6, *(_QWORD *)(v9 + 8));
          if ((SlotForKey & 1) == 0)
          {
            do
              v11 = __ldaxr((unsigned int *)v9);
            while (__stlxr(v11 + 0x10000, (unsigned int *)v9));
            atomic_store(v9, (unint64_t *)&v6[2 * HIDWORD(SlotForKey) + 4]);
          }
        }
      }
    }
    atomic_store((unint64_t)v6, a1 + 5);
    v13 = (unint64_t *)a1[8];
    v12 = a1[9];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (_QWORD *)a1[7];
      v16 = v13 - v15;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v20 = (char *)operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = (unint64_t *)&v20[8 * v16];
      *v21 = v5;
      v14 = v21 + 1;
      while (v13 != v15)
      {
        v22 = *--v13;
        *v13 = 0;
        *--v21 = v22;
      }
      v23 = *(_OWORD *)(a1 + 7);
      a1[7] = (unint64_t)v21;
      a1[8] = (unint64_t)v14;
      a1[9] = (unint64_t)&v20[8 * v19];
      v24 = (uint64_t *)*((_QWORD *)&v23 + 1);
      v25 = (uint64_t *)v23;
      while (v24 != v25)
        std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl>>::reset[abi:ne180100](--v24);
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v13 = v5;
      v14 = v13 + 1;
    }
    a1[8] = (unint64_t)v14;
  }
  else
  {
    atomic_store((unint64_t)v6, v4);
  }
  return v6;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::emptyReleasePool(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t *v4;

  v1 = atomic_load((unsigned int *)(result + 48));
  if (v1 <= 0)
  {
    v2 = result;
    v4 = *(uint64_t **)(result + 56);
    for (i = *(uint64_t **)(result + 64);
          i != v4;
          result = std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl>>::reset[abi:ne180100](i))
    {
      --i;
    }
    *(_QWORD *)(v2 + 64) = v4;
  }
  return result;
}

uint64_t audioipc::priority_propagator_impl::apply_priority(uint64_t this, int a2)
{
  uint64_t v3;

  if (*(_DWORD *)(this + 16) != a2)
  {
    v3 = this;
    this = caulk::mach::this_thread::set_priority();
    *(_DWORD *)(v3 + 16) = a2;
  }
  return this;
}

audioipc::eventlink_primitive *audioipc::eventlink_primitive::eventlink_primitive(audioipc::eventlink_primitive *this, id a2)
{
  mach_port_name_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  applesauce::dispatch::v1::source::operator*(a2);
  objc_claimAutoreleasedReturnValue();
  v4 = xpc_dictionary_copy_mach_send();

  v5 = os_eventlink_create_with_port();
  v6 = *(void **)this;
  *(_QWORD *)this = v5;

  mach_port_deallocate(*MEMORY[0x1E0C83DA0], v4);
  return this;
}

void sub_18F05CF90(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void audioipc::eventlink_primitive::~eventlink_primitive(audioipc::eventlink_primitive *this)
{
  mach_port_name_t v2;

  v2 = *((_DWORD *)this + 2);
  if (v2)
  {
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], v2);
    *((_DWORD *)this + 2) = 0;
  }

}

void MP4BoxParser_MediaHeader::~MP4BoxParser_MediaHeader(MP4BoxParser_MediaHeader *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_MediaHeader::Init(MP4BoxParser **this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) != 1835296868)
      return 4294967294;
    if (*((_BYTE *)this + 56))
    {
      if (*((_BYTE *)this + 56) != 1)
        return 0xFFFFFFFFLL;
      v3 = 16;
    }
    else
    {
      v3 = 8;
    }
    v4 = v3 + (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this);
    v5 = (unsigned int *)this + 15;
    result = MP4BoxParser::ReadDataSourceBytes(this[1], v4, 4uLL, (char *)this + 60);
    if (!(_DWORD)result)
    {
      v6 = *v5;
      *v5 = bswap32(*v5);
      if (v6)
        return 0;
      else
        return 1717660012;
    }
  }
  return result;
}

CASerializer *operator<<(CASerializer *a1, uint64_t a2)
{
  CASerializer::Write(a1, (const void *)a2);
  CASerializer::Write(a1, (const void *)(a2 + 4));
  CASerializer::Write(a1, (const void *)(a2 + 8));
  CASerializer::Write(a1, (const void *)(a2 + 12));
  return a1;
}

{
  CASerializer::Write(a1, (const void *)a2);
  CASerializer::Write(a1, (const void *)(a2 + 4));
  CASerializer::Write(a1, (const void *)(a2 + 8));
  CASerializer::Write(a1, (const void *)(a2 + 12));
  CASerializer::Write(a1, (const void *)(a2 + 16));
  return a1;
}

CADeserializer *operator>>(CADeserializer *a1, uint64_t a2)
{
  CADeserializer::Read(a1, (void *)a2);
  CADeserializer::Read(a1, (void *)(a2 + 4));
  CADeserializer::Read(a1, (void *)(a2 + 8));
  CADeserializer::Read(a1, (void *)(a2 + 12));
  return a1;
}

uint64_t getBufferPtrFromDeserializer<void const>(CADeserializer *a1, _QWORD *a2, int a3)
{
  uint64_t result;

  if (*a2)
    return CADeserializer::GetAndAdvanceReadPtr(a1);
  if (a3)
    result = CADeserializer::GetAndAdvanceReadPtr(a1);
  else
    result = 0;
  *a2 = result;
  return result;
}

CASerializer *operator<<(CASerializer *a1, const void **a2)
{
  unint64_t v4;
  const void **v5;

  CASerializer::Write(a1, a2);
  if (*(_DWORD *)a2)
  {
    v4 = 0;
    v5 = a2 + 1;
    do
    {
      CASerializer::Write(a1, v5);
      CASerializer::Write(a1, (char *)v5 + 4);
      CASerializer::Write(a1, v5[1]);
      ++v4;
      v5 += 2;
    }
    while (v4 < *(unsigned int *)a2);
  }
  return a1;
}

CADeserializer *operator>>(CADeserializer *a1, _DWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  size_t v6;
  void *v7;
  const void *Ptr;

  CADeserializer::Read(a1, a2);
  if (*a2)
  {
    v4 = 0;
    v5 = a2 + 2;
    do
    {
      CADeserializer::Read(a1, v5);
      CADeserializer::Read(a1, (char *)v5 + 4);
      v6 = *((unsigned int *)v5 + 1);
      if ((_DWORD)v6)
      {
        v7 = (void *)v5[1];
        Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(a1);
        if (v7)
          memcpy(v7, Ptr, v6);
        else
          v5[1] = Ptr;
      }
      else
      {
        v5[1] = 0;
      }
      ++v4;
      v5 += 2;
    }
    while (v4 < *a2);
  }
  return a1;
}

void FigCPECryptorMarshaller::~FigCPECryptorMarshaller(FigCPECryptorMarshaller *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x193FFE460);
}

uint64_t FigCPECryptorMarshaller::Serialize(FigCPECryptorMarshaller *this, CASerializer *a2, CFTypeRef *a3, int a4)
{
  CFTypeRef v6;
  uint64_t (*VTableSymbolLoc)(CFTypeRef);
  unsigned int (*v8)(CFTypeRef, void **);
  void *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a4 != 8)
    return 0;
  v10 = 0;
  v6 = *a3;
  if (!CoreMediaLibraryCore(char **)::frameworkLibrary)
  {
    v11 = xmmword_1E2921DF0;
    v12 = 0;
    CoreMediaLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  getCMBaseObjectGetVTableSymbolLoc();
  VTableSymbolLoc = (uint64_t (*)(CFTypeRef))getCMBaseObjectGetVTableSymbolLoc();
  if (!VTableSymbolLoc)
  {
    dlerror();
    abort_report_np();
  }
  v8 = *(unsigned int (**)(CFTypeRef, void **))(*(_QWORD *)(VTableSymbolLoc(v6) + 16) + 264);
  if (!v8 || v8(v6, &v10))
    return 0;
  if (*a3)
  {
    if (*((_BYTE *)this + 32))
      CFRelease(*a3);
  }
  Marshaller::AddCreatedCFObject(this, v10);
  operator<<();
  return 1;
}

uint64_t FigCPECryptorMarshaller::Deserialize(FigCPECryptorMarshaller *this, CADeserializer *a2, void **a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int (*CryptorFromSerializedRecipeSymbolLoc)(_QWORD, _QWORD, void **);
  void *v8;
  CFTypeRef cf;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*a4 - 1 < 7)
    return 0;
  Marshaller::CheckDest(this, a3, a4, 8uLL);
  cf = 0;
  operator>>();
  v8 = 0;
  if (!MediaToolboxLibraryCore(char **)::frameworkLibrary)
  {
    v10 = xmmword_1E2921E30;
    v11 = 0;
    MediaToolboxLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  if (!MediaToolboxLibraryCore(char **)::frameworkLibrary)
    return 0;
  result = getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc();
  if (!result)
    return result;
  CryptorFromSerializedRecipeSymbolLoc = (unsigned int (*)(_QWORD, _QWORD, void **))getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc();
  if (!CryptorFromSerializedRecipeSymbolLoc)
  {
    dlerror();
    abort_report_np();
  }
  if (CryptorFromSerializedRecipeSymbolLoc(*MEMORY[0x1E0C9AE00], 0, &v8))
    return 0;
  if (cf)
  {
    if (*((_BYTE *)this + 32))
      CFRelease(cf);
  }
  Marshaller::AddCreatedCFObject(this, v8);
  *(_QWORD *)*a3 = v8;
  return 1;
}

uint64_t getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v0 = getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr;
  v6 = getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr;
  if (!getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = ___ZL58getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLocv_block_invoke_9090;
    v2[3] = &unk_1E2921E50;
    v2[4] = &v3;
    ___ZL58getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLocv_block_invoke_9090((uint64_t)v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_18F05D784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getCMBaseObjectGetVTableSymbolLoc(void)
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v0 = getCMBaseObjectGetVTableSymbolLoc(void)::ptr;
  v6 = getCMBaseObjectGetVTableSymbolLoc(void)::ptr;
  if (!getCMBaseObjectGetVTableSymbolLoc(void)::ptr)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = ___ZL33getCMBaseObjectGetVTableSymbolLocv_block_invoke;
    v2[3] = &unk_1E2921E10;
    v2[4] = &v3;
    ___ZL33getCMBaseObjectGetVTableSymbolLocv_block_invoke((uint64_t)v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_18F05D924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void TArrayMarshaller<OriginInfo>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t TArrayMarshaller<OriginInfo>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7;
  const void *Ptr;

  v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, ((_DWORD)v7 + 18 * ((v7 & 0xFFFFFFFE) / 0x12) - (v7 & 0xFFFFFFFE)) & 0xFFFFFFFE);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void ImmersiveRendererDataMarshaller::~ImmersiveRendererDataMarshaller(ImmersiveRendererDataMarshaller *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x193FFE460);
}

uint64_t ImmersiveRendererDataMarshaller::Serialize(ImmersiveRendererDataMarshaller *this, CASerializer *a2, char *a3)
{
  int v5;
  unsigned int *v6;
  unint64_t v7;
  char *v8;
  int v10;

  v5 = *(_DWORD *)a3;
  CASerializer::Write(a2, a3);
  if (v5 == 2)
  {
    CASerializer::Write(a2, a3 + 4);
    CASerializer::Write(a2, a3 + 8);
    CASerializer::Write(a2, a3 + 12);
  }
  else
  {
    v6 = (unsigned int *)(a3 + 4);
    CASerializer::Write(a2, a3 + 4);
    if (*((_DWORD *)a3 + 1))
    {
      v7 = 0;
      v8 = a3 + 24;
      do
      {
        CASerializer::Write(a2, v8 - 16);
        CASerializer::Write(a2, v8 - 12);
        v10 = *((_DWORD *)v8 - 2);
        CASerializer::Write(a2, &v10);
        CASerializer::Write(a2, v8 - 4);
        CASerializer::Write(a2, v8);
        ++v7;
        v8 += 20;
      }
      while (v7 < *v6);
    }
  }
  return 1;
}

uint64_t ImmersiveRendererDataMarshaller::Deserialize(ImmersiveRendererDataMarshaller *this, CADeserializer *a2, void **a3, unsigned int *a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  char *v9;
  const void *Ptr;
  unint64_t v11;
  char *v12;
  int v14;

  v4 = a2->var3 - a2->var2;
  if (*a4)
    v5 = v4 > *a4;
  else
    v5 = 0;
  v6 = !v5;
  if ((_DWORD)v6 == 1)
  {
    Marshaller::CheckDest(this, a3, a4, v4);
    v14 = 0;
    CADeserializer::Read(a2, &v14);
    v9 = (char *)*a3;
    if (v14 == 2)
    {
      CADeserializer::Read(a2, v9 + 4);
      CADeserializer::Read(a2, v9 + 8);
      Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(a2);
      memcpy(v9 + 12, Ptr, *((unsigned int *)v9 + 2));
    }
    else
    {
      CADeserializer::Read(a2, v9 + 4);
      if (*((_DWORD *)v9 + 1))
      {
        v11 = 0;
        v12 = v9 + 24;
        do
        {
          CADeserializer::Read(a2, v12 - 16);
          CADeserializer::Read(a2, v12 - 12);
          CADeserializer::Read(a2, v12 - 8);
          CADeserializer::Read(a2, v12 - 4);
          CADeserializer::Read(a2, v12);
          ++v11;
          v12 += 20;
        }
        while (v11 < *((unsigned int *)v9 + 1));
      }
    }
    *(_DWORD *)v9 = v14;
  }
  return v6;
}

void TSimpleMarshaller<DRCTypeFromPacket>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<DRCTypeFromPacket>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 16)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 16;
}

BOOL TMarshaller<DRCTypeFromPacket>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x10) != 0x10)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0x10uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<DRCTypeFromPacket>::SerializeT(int a1, CASerializer *this, const void ***a3)
{
  const void **v5;

  CASerializer::Write(this, a3 + 1);
  v5 = *a3;
  operator<<();
  CASerializer::Write(this, v5 + 5);
  CASerializer::Write(this, v5[6]);
  CASerializer::Write(this, v5 + 7);
  return CASerializer::Write(this, v5[8]);
}

void *TSimpleMarshaller<DRCTypeFromPacket>::DeserializeT(int a1, CADeserializer *this, _QWORD *a3)
{
  _QWORD *v5;
  size_t v6;
  void *v7;
  const void *Ptr;
  void *result;
  size_t v10;
  void *v11;

  if (*((_DWORD *)a3 + 2))
    CADeserializer::GetAndAdvanceReadPtr(this);
  else
    CADeserializer::Read(this, a3 + 1);
  v5 = (_QWORD *)*a3;
  operator>>();
  CADeserializer::Read(this, v5 + 5);
  v6 = *((unsigned int *)v5 + 10);
  if ((_DWORD)v6)
  {
    v7 = (void *)v5[6];
    Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
    if (v7)
      memcpy(v7, Ptr, v6);
    else
      v5[6] = Ptr;
  }
  else
  {
    v5[6] = 0;
  }
  result = (void *)CADeserializer::Read(this, v5 + 7);
  v10 = *((unsigned int *)v5 + 14);
  if ((_DWORD)v10)
  {
    v11 = (void *)v5[8];
    result = (void *)CADeserializer::GetAndAdvanceReadPtr(this);
    if (v11)
      return memcpy(v11, result, v10);
    else
      v5[8] = result;
  }
  else
  {
    v5[8] = 0;
  }
  return result;
}

void TSimpleMarshaller<PrePostDataForGapless>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<PrePostDataForGapless>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 16)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 16;
}

BOOL TMarshaller<PrePostDataForGapless>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x10) != 0x10)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0x10uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

CASerializer *TSimpleMarshaller<PrePostDataForGapless>::SerializeT(uint64_t a1, CASerializer *a2, const void ***a3)
{
  CASerializer *v4;

  v4 = operator<<(a2, *a3);
  return operator<<(v4, a3[1]);
}

CADeserializer *TSimpleMarshaller<PrePostDataForGapless>::DeserializeT(uint64_t a1, CADeserializer *a2, _DWORD **a3)
{
  CADeserializer *v4;

  v4 = operator>>(a2, *a3);
  return operator>>(v4, a3[1]);
}

void TSimpleMarshaller<AudioFormatInfo>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<AudioFormatInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 56)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 56;
}

BOOL TMarshaller<AudioFormatInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if (*a4 != 56 && *a4 != 0)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0x38uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<AudioFormatInfo>::SerializeT(uint64_t a1, CASerializer *a2, uint64_t a3)
{
  operator<<();
  CASerializer::Write(a2, (const void *)(a3 + 48));
  return CASerializer::Write(a2, *(const void **)(a3 + 40));
}

uint64_t TSimpleMarshaller<AudioFormatInfo>::DeserializeT(uint64_t a1, CADeserializer *a2, uint64_t a3)
{
  operator>>();
  CADeserializer::Read(a2, (void *)(a3 + 48));
  return getBufferPtrFromDeserializer<void const>(a2, (_QWORD *)(a3 + 40), *(_DWORD *)(a3 + 48));
}

void TSimpleMarshaller<VorbisCodecModeInfo>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<VorbisCodecModeInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 32)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 32;
}

BOOL TMarshaller<VorbisCodecModeInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x20) != 0x20)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0x20uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<VorbisCodecModeInfo>::SerializeT(int a1, CASerializer *this, const void **a3)
{
  CASerializer::Write(this, a3 + 1);
  CASerializer::Write(this, *a3);
  CASerializer::Write(this, (char *)a3 + 12);
  CASerializer::Write(this, a3 + 2);
  CASerializer::Write(this, (char *)a3 + 20);
  return CASerializer::Write(this, a3 + 3);
}

uint64_t TSimpleMarshaller<VorbisCodecModeInfo>::DeserializeT(int a1, CADeserializer *this, _QWORD *a3)
{
  CADeserializer::Read(this, a3 + 1);
  getBufferPtrFromDeserializer<void const>(this, a3, *((_DWORD *)a3 + 2));
  CADeserializer::Read(this, (char *)a3 + 12);
  CADeserializer::Read(this, a3 + 2);
  CADeserializer::Read(this, (char *)a3 + 20);
  return CADeserializer::Read(this, a3 + 3);
}

void TSimpleMarshaller<AudioCodecMagicCookieInfo>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<AudioCodecMagicCookieInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 16)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 16;
}

BOOL TMarshaller<AudioCodecMagicCookieInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x10) != 0x10)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0x10uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<AudioCodecMagicCookieInfo>::SerializeT(int a1, CASerializer *this, const void **a3)
{
  CASerializer::Write(this, a3);
  return CASerializer::Write(this, a3[1]);
}

uint64_t TSimpleMarshaller<AudioCodecMagicCookieInfo>::DeserializeT(int a1, CADeserializer *this, _DWORD *a3)
{
  CADeserializer::Read(this, a3);
  return getBufferPtrFromDeserializer<void const>(this, (_QWORD *)a3 + 1, *a3);
}

void TArrayMarshaller<ProfileLevelInfo>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t TArrayMarshaller<ProfileLevelInfo>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7;
  const void *Ptr;

  v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFF8);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TSimpleMarshaller<ESDSFromADTSPacket>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<ESDSFromADTSPacket>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 32)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 32;
}

BOOL TMarshaller<ESDSFromADTSPacket>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x20) != 0x20)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0x20uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<ESDSFromADTSPacket>::SerializeT(int a1, CASerializer *this, const void **a3)
{
  CASerializer::Write(this, a3);
  CASerializer::Write(this, a3[1]);
  CASerializer::Write(this, a3 + 2);
  return CASerializer::Write(this, a3[3]);
}

void *TSimpleMarshaller<ESDSFromADTSPacket>::DeserializeT(int a1, CADeserializer *this, char *a3)
{
  size_t v5;
  void *v6;
  const void *Ptr;
  void *result;
  size_t v9;
  void *v10;

  CADeserializer::Read(this, a3);
  v5 = *(unsigned int *)a3;
  if ((_DWORD)v5)
  {
    v6 = (void *)*((_QWORD *)a3 + 1);
    Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
    if (v6)
      memcpy(v6, Ptr, v5);
    else
      *((_QWORD *)a3 + 1) = Ptr;
  }
  else
  {
    *((_QWORD *)a3 + 1) = 0;
  }
  result = (void *)CADeserializer::Read(this, a3 + 16);
  v9 = *((unsigned int *)a3 + 4);
  if ((_DWORD)v9)
  {
    v10 = (void *)*((_QWORD *)a3 + 3);
    result = (void *)CADeserializer::GetAndAdvanceReadPtr(this);
    if (v10)
      return memcpy(v10, result, v9);
    else
      *((_QWORD *)a3 + 3) = result;
  }
  else
  {
    *((_QWORD *)a3 + 3) = 0;
  }
  return result;
}

void TSimpleMarshaller<AudibleAAXCodecAuthorizationInfo>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<AudibleAAXCodecAuthorizationInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 64)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 64;
}

BOOL TMarshaller<AudibleAAXCodecAuthorizationInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x40) != 0x40)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0x40uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<AudibleAAXCodecAuthorizationInfo>::SerializeT(uint64_t a1, CASerializer *a2, const void **a3)
{
  operator<<();
  CASerializer::Write(a2, a3 + 6);
  CASerializer::Write(a2, a3[5]);
  CASerializer::Write(a2, (char *)a3 + 52);
  return CASerializer::Write(a2, a3 + 7);
}

uint64_t TSimpleMarshaller<AudibleAAXCodecAuthorizationInfo>::DeserializeT(uint64_t a1, CADeserializer *a2, _QWORD *a3)
{
  operator>>();
  CADeserializer::Read(a2, a3 + 6);
  getBufferPtrFromDeserializer<void const>(a2, a3 + 5, *((_DWORD *)a3 + 12));
  CADeserializer::Read(a2, (char *)a3 + 52);
  return CADeserializer::Read(a2, a3 + 7);
}

void TArrayMarshaller<AudioStreamPacketDependencyInfo>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t TArrayMarshaller<AudioStreamPacketDependencyInfo>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7;
  const void *Ptr;

  v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFF0);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TSimpleMarshaller<SpeechCodecBundleData>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<SpeechCodecBundleData>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 336)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 336;
}

BOOL TMarshaller<SpeechCodecBundleData>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if (*a4 != 336 && *a4 != 0)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0x150uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

CASerializer *TSimpleMarshaller<SpeechCodecBundleData>::SerializeT(int a1, CASerializer *this, const void **a3)
{
  CASerializer *v5;
  unsigned int *v6;
  unint64_t v7;
  _QWORD *v8;
  CASerializer *v9;
  _QWORD *v10;
  CASerializer *result;
  _QWORD v12[2];
  int v13;

  CASerializer::Write(this, a3 + 1);
  CASerializer::Write(this, *a3);
  CASerializer::Write(this, (char *)a3 + 12);
  v5 = operator<<(this, (uint64_t)(a3 + 2));
  v6 = (unsigned int *)(a3 + 4);
  CASerializer::Write(v5, a3 + 4);
  v7 = 0;
  v8 = (const void **)((char *)a3 + 36);
  do
  {
    if (v7 >= *v6)
    {
      v12[0] = 0;
      v12[1] = 0;
      v13 = 0;
      v10 = v12;
      v9 = this;
    }
    else
    {
      v9 = this;
      v10 = v8;
    }
    result = operator<<(v9, (uint64_t)v10);
    ++v7;
    v8 = (_QWORD *)((char *)v8 + 20);
  }
  while (v7 != 15);
  return result;
}

uint64_t TSimpleMarshaller<SpeechCodecBundleData>::DeserializeT(int a1, CADeserializer *this, void **a3)
{
  size_t v5;
  void *v6;
  BOOL v7;
  void *Ptr;
  CADeserializer *v9;
  uint64_t v10;
  uint64_t result;

  CADeserializer::Read(this, a3 + 1);
  v5 = *((unsigned int *)a3 + 2);
  v6 = *a3;
  if ((_DWORD)v5)
    v7 = 0;
  else
    v7 = v6 == 0;
  if (v7)
  {
    *a3 = (void *)3735928559;
  }
  else if ((_DWORD)v5)
  {
    Ptr = (void *)CADeserializer::GetAndAdvanceReadPtr(this);
    if (v6)
      memcpy(v6, Ptr, v5);
    else
      *a3 = Ptr;
  }
  else
  {
    *a3 = 0;
  }
  CADeserializer::Read(this, (char *)a3 + 12);
  v9 = operator>>(this, (uint64_t)(a3 + 2));
  CADeserializer::Read(v9, a3 + 4);
  v10 = -300;
  do
  {
    CADeserializer::Read(this, (char *)a3 + v10 + 336);
    CADeserializer::Read(this, (char *)a3 + v10 + 340);
    CADeserializer::Read(this, (char *)a3 + v10 + 344);
    CADeserializer::Read(this, (char *)a3 + v10 + 348);
    result = CADeserializer::Read(this, (char *)a3 + v10 + 352);
    v10 += 20;
  }
  while (v10);
  return result;
}

void TSimpleMarshaller<EVSRFParams>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<EVSRFParams>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 8;
}

BOOL TMarshaller<EVSRFParams>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<EVSRFParams>::SerializeT(int a1, CASerializer *this, char *a3)
{
  CASerializer::Write(this, a3);
  return CASerializer::Write(this, a3 + 4);
}

uint64_t TSimpleMarshaller<EVSRFParams>::DeserializeT(int a1, CADeserializer *this, char *a3)
{
  CADeserializer::Read(this, a3);
  return CADeserializer::Read(this, a3 + 4);
}

void TSimpleMarshaller<CMRData>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<CMRData>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 16)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 16;
}

BOOL TMarshaller<CMRData>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x10) != 0x10)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0x10uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

CASerializer *TSimpleMarshaller<CMRData>::SerializeT(uint64_t a1, CASerializer *a2, uint64_t a3)
{
  return operator<<(a2, a3);
}

CADeserializer *TSimpleMarshaller<CMRData>::DeserializeT(uint64_t a1, CADeserializer *a2, uint64_t a3)
{
  return operator>>(a2, a3);
}

void TSimpleMarshaller<EVSRFDecodeData>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<EVSRFDecodeData>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 8;
}

BOOL TMarshaller<EVSRFDecodeData>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<EVSRFDecodeData>::SerializeT(int a1, CASerializer *this, char *a3)
{
  const void *v4;
  char v6;

  v4 = a3 + 4;
  v6 = *a3;
  CASerializer::Write(this, &v6);
  return CASerializer::Write(this, v4);
}

uint64_t TSimpleMarshaller<EVSRFDecodeData>::DeserializeT(int a1, CADeserializer *this, char *a3)
{
  CADeserializer::Read(this, a3);
  return CADeserializer::Read(this, a3 + 4);
}

void TArrayMarshaller<AudioStreamBasicDescription>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t TArrayMarshaller<AudioStreamBasicDescription>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7;
  const void *Ptr;

  v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, ((_DWORD)v7 + 40 * ((v7 & 0xFFFFFFF8) / 0x28) - (v7 & 0xFFFFFFF8)) & 0xFFFFFFF8);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<AudioFormatListItem>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t TArrayMarshaller<AudioFormatListItem>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7;
  const void *Ptr;

  v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, ((_DWORD)v7 + 48 * ((v7 & 0xFFFFFFF0) / 0x30) - (v7 & 0xFFFFFFF0)) & 0xFFFFFFF0);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<AudioValueRange>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t TArrayMarshaller<AudioValueRange>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7;
  const void *Ptr;

  v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFF0);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<int>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t TArrayMarshaller<int>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7;
  const void *Ptr;

  v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFFC);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TPODMarshaller<AudioConverterPrimeInfo>::~TPODMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<AudioConverterPrimeInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 8;
}

BOOL TMarshaller<AudioConverterPrimeInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TPODMarshaller<AudioConverterPrimeInfo>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

uint64_t TPODMarshaller<AudioConverterPrimeInfo>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

void TSimpleMarshaller<unsigned char>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<unsigned char>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 1;
}

BOOL TMarshaller<unsigned char>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if (*a4 > 1)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 1uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<unsigned char>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

uint64_t TSimpleMarshaller<unsigned char>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

void TSimpleMarshaller<int>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<int>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 4)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 4;
}

BOOL TMarshaller<int>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 4) != 4)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 4uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<int>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

uint64_t TSimpleMarshaller<int>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

void TCFMarshaller<__CFData const*>::~TCFMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<__CFData const*>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 8;
}

BOOL TMarshaller<__CFData const*>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

void TCFMarshaller<__CFData const*>::SerializeT(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  operator<<();
  if (*a3)
  {
    if (*(_BYTE *)(a1 + 32))
      CFRelease(*a3);
  }
}

void TCFMarshaller<__CFData const*>::DeserializeT(Marshaller *a1, uint64_t a2, const void **a3)
{
  operator>>();
  Marshaller::AddCreatedCFObject(a1, *a3);
}

const char *DSPGraph::Analyzer::ClassName(DSPGraph::Analyzer *this)
{
  return "Analyzer";
}

uint64_t DSPGraph::Analyzer::print(uint64_t result, _QWORD *a2, int a3, uint64_t a4)
{
  int v4;
  uint64_t v6;

  if (a3 >= 5)
  {
    v4 = a4;
    v6 = result;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a2, a4, 1);
    return DSPGraph::printi(a2, v4 + 4, "analysis %p\n", *(const void **)(v6 + 8));
  }
  return result;
}

_QWORD *DSPGraph::Analyzer::printShort(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  return DSPGraph::printACD(a2, (unsigned int *)(a1 + 32), a4);
}

uint64_t DSPGraph::Analyzer::isAU(DSPGraph::Analyzer *this)
{
  return 0;
}

uint64_t DSPGraph::Analyzer::asAUAnalyzer(DSPGraph::Analyzer *this)
{
  return 0;
}

void DSPGraph::Analyzer::getFormatFromUnit(DSPGraph::Analyzer *this)
{
  const char *v2;
  size_t v3;
  std::string *v4;
  std::string v5;
  std::string v6;
  __int128 v7;
  __int128 v8;

  std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v7, "getFormatFromUnit");
  std::string::basic_string[abi:ne180100]<0>(&v5, "Analyzer::getFormatFromUnit ");
  v2 = (const char *)(*(uint64_t (**)(DSPGraph::Analyzer *))(*(_QWORD *)this + 16))(this);
  v3 = strlen(v2);
  v4 = std::string::append(&v5, v2, v3);
  v6 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  DSPGraph::ThrowException(1869640255, &v8, 115, &v7, (__int128 *)&v6);
}

void sub_18F05FA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 17) < 0)
    operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::AUAnalyzer::~AUAnalyzer(void **this)
{
  *this = off_1E2912CA8;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
}

{
  *this = off_1E2912CA8;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  JUMPOUT(0x193FFE460);
}

{
  *this = off_1E2912CA8;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
}

const char *DSPGraph::AUAnalyzer::ClassName(DSPGraph::AUAnalyzer *this)
{
  return "AUAnalyzer";
}

uint64_t DSPGraph::AUAnalyzer::isAU(DSPGraph::AUAnalyzer *this)
{
  return 1;
}

uint64_t DSPGraph::AUAnalyzer::resetAnalysis(AudioUnit *this)
{
  uint64_t result;
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  result = AudioUnitReset(this[13], 0, 0);
  if ((_DWORD)result)
  {
    v2 = result;
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "resetAnalysis");
    std::string::basic_string[abi:ne180100]<0>(&v3, "AudioUnitReset");
    DSPGraph::ThrowException(v2, &v5, 253, &v4, &v3);
  }
  return result;
}

void sub_18F05FC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUAnalyzer::processBuffer(DSPGraph::AUAnalyzer *this, DSPGraph::Buffer *a2, UInt32 inNumberFrames)
{
  uint64_t result;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *((_QWORD *)a2 + 1) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 16)
                                                          + 8)
                                              + 16)
                                  + 256);
  result = AudioUnitProcess(*((AudioUnit *)this + 13), (AudioUnitRenderActionFlags *)a2 + 18, (const AudioTimeStamp *)((char *)a2 + 8), inNumberFrames, *((AudioBufferList **)a2 + 10));
  if ((_DWORD)result)
  {
    v4 = result;
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "processBuffer");
    std::string::basic_string[abi:ne180100]<0>(&v5, "AudioUnitProcess");
    DSPGraph::ThrowException(v4, &v7, 245, &v6, &v5);
  }
  return result;
}

void sub_18F05FD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

AudioUnitParameterValue DSPGraph::AUAnalyzer::getParameter(AudioUnit *this, AudioUnitParameterID a2, AudioUnitScope a3, AudioUnitElement a4)
{
  OSStatus Parameter;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  AudioUnitParameterValue outValue;

  outValue = 0.0;
  Parameter = AudioUnitGetParameter(this[13], a2, a3, a4, &outValue);
  if (Parameter)
  {
    v6 = Parameter;
    std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v7, "AudioUnitGetParameter");
    DSPGraph::ThrowException(v6, &v9, 163, &v8, &v7);
  }
  return outValue;
}

void sub_18F05FDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUAnalyzer::getParameterInfo@<X0>(DSPGraph::AUAnalyzer *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v10 = 104;
  result = (*(uint64_t (**)(DSPGraph::AUAnalyzer *, uint64_t, uint64_t, uint64_t, int *, __int128 *))(*(_QWORD *)this + 96))(this, 4, a2, a3, &v10, &v11);
  if ((_DWORD)result)
  {
    v6 = 0;
    *(_DWORD *)a4 = result;
  }
  else
  {
    v7 = v16;
    *(_OWORD *)(a4 + 64) = v15;
    *(_OWORD *)(a4 + 80) = v7;
    *(_QWORD *)(a4 + 96) = v17;
    v8 = v12;
    *(_OWORD *)a4 = v11;
    *(_OWORD *)(a4 + 16) = v8;
    v9 = v14;
    v6 = 1;
    *(_OWORD *)(a4 + 32) = v13;
    *(_OWORD *)(a4 + 48) = v9;
  }
  *(_BYTE *)(a4 + 104) = v6;
  return result;
}

void sub_18F05FEF0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t DSPGraph::AUAnalyzer::setParameter(AudioUnit *this, AudioUnitParameterID a2, AudioUnitScope a3, AudioUnitElement a4, AudioUnitParameterValue a5, UInt32 a6)
{
  uint64_t result;
  int v11;
  AudioUnitEvent v12;
  __int128 v13;
  __int128 v14;

  result = AudioUnitSetParameter(this[13], a2, a3, a4, a5, a6);
  if ((_DWORD)result)
  {
    v11 = result;
    std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v13, "AudioUnitSetParameter");
    DSPGraph::ThrowException(v11, (__int128 *)&v12, 144, &v14, &v13);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[1] + 1) + 8) + 8) + 767))
  {
    v12.mEventType = kAudioUnitEvent_ParameterValueChange;
    v12.mArgument.mParameter.mAudioUnit = this[13];
    *(_QWORD *)&v12.mArgument.mProperty.mPropertyID = __PAIR64__(a3, a2);
    v12.mArgument.mParameter.mElement = a4;
    return AUEventListenerNotify(0, 0, &v12);
  }
  return result;
}

void sub_18F05FFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUAnalyzer::getProperty(AudioUnit *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4, unsigned int *a5, void *outData)
{
  uint64_t result;
  UInt32 ioDataSize;

  ioDataSize = *a5;
  result = AudioUnitGetProperty(this[13], a2, a3, a4, outData, &ioDataSize);
  *a5 = ioDataSize;
  return result;
}

unint64_t DSPGraph::AUAnalyzer::getPropertyInfo(AudioUnit *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4)
{
  unsigned int PropertyInfo;
  unint64_t v5;
  uint64_t v6;
  Boolean outWritable;
  UInt32 outDataSize;

  outDataSize = 0;
  outWritable = 0;
  PropertyInfo = AudioUnitGetPropertyInfo(this[13], a2, a3, a4, &outDataSize, &outWritable);
  v5 = (unint64_t)(outWritable != 0) << 32;
  if (PropertyInfo)
    v6 = PropertyInfo;
  else
    v6 = outDataSize;
  if (PropertyInfo)
    v5 = 0;
  return v5 | v6;
}

uint64_t DSPGraph::AUAnalyzer::setProperty(AudioUnit *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4, UInt32 inDataSize, const void *inData)
{
  return AudioUnitSetProperty(this[13], a2, a3, a4, inData, inDataSize);
}

double DSPGraph::AUAnalyzer::getParameterList@<D0>(DSPGraph::AUAnalyzer *this@<X0>, uint64_t a2@<X1>, std::vector<unsigned int> *a3@<X8>)
{
  unsigned int v6;
  double result;
  unsigned int v8;
  char v9;
  BOOL v10;
  unsigned int v11;
  std::vector<unsigned int> v12;

  v6 = (*(uint64_t (**)(DSPGraph::AUAnalyzer *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 104))(this, 3, a2, 0);
  v8 = v6;
  if (v9)
    v10 = v6 > 3;
  else
    v10 = 0;
  if (v10)
  {
    std::vector<unsigned int>::vector(&v12, v6 >> 2);
    v11 = v8 & 0xFFFFFFFC;
    if ((*(unsigned int (**)(DSPGraph::AUAnalyzer *, uint64_t, uint64_t, _QWORD, unsigned int *, std::vector<unsigned int>::pointer))(*(_QWORD *)this + 96))(this, 3, a2, 0, &v11, v12.__begin_))
    {
      a3->__begin_ = 0;
      a3->__end_ = 0;
      a3->__end_cap_.__value_ = 0;
      if (v12.__begin_)
      {
        v12.__end_ = v12.__begin_;
        operator delete(v12.__begin_);
      }
    }
    else
    {
      result = *(double *)&v12.__begin_;
      *a3 = v12;
    }
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
  }
  return result;
}

void sub_18F0601AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DSPGraph::AUAnalyzer::open(DSPGraph::AUAnalyzer *this)
{
  AudioComponentInstance *v1;
  OpaqueAudioComponent *Next;
  OSStatus v4;
  char **v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  OSStatus v10;
  int v11;
  CFTypeRef v12;
  CFTypeRef cf;
  __int128 v14;
  __int128 v15;
  __int128 inData;

  v1 = (AudioComponentInstance *)((char *)this + 104);
  if (!*((_QWORD *)this + 13))
  {
    Next = AudioComponentFindNext(0, (const AudioComponentDescription *)((char *)this + 32));
    if (!Next)
    {
      std::string::basic_string[abi:ne180100]<0>(&inData, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v15, "open");
      std::string::basic_string[abi:ne180100]<0>(&v14, "AudioComponentFindNext");
      DSPGraph::ThrowException(1633906209, &inData, 264, &v15, &v14);
    }
    v4 = AudioComponentInstanceNew(Next, v1);
    if (v4)
    {
      v11 = v4;
      std::string::basic_string[abi:ne180100]<0>(&inData, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v15, "open");
      std::string::basic_string[abi:ne180100]<0>(&v14, "AudioComponentInstanceNew");
      DSPGraph::ThrowException(v11, &inData, 269, &v15, &v14);
    }
    if (!*v1)
    {
      std::string::basic_string[abi:ne180100]<0>(&inData, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v15, "open");
      std::string::basic_string[abi:ne180100]<0>(&v14, "AudioComponentInstanceNew");
      DSPGraph::ThrowException(1633906209, &inData, 272, &v15, &v14);
    }
    v5 = (char **)((char *)this + 56);
    v6 = (char *)this + 56;
    if (*((char *)this + 79) < 0)
      v6 = *v5;
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v6);
    v12 = cf;
    (*(void (**)(DSPGraph::AUAnalyzer *, uint64_t, _QWORD, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)this
                                                                                                  + 112))(this, 54, 0, 0, 8, &v12);
    if (*v1)
    {
      (*(void (**)(DSPGraph::AUAnalyzer *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)this + 136))(this, *(_QWORD *)(*((_QWORD *)this + 1) + 120), 2, 0);
      (*(void (**)(DSPGraph::AUAnalyzer *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)this + 136))(this, *(_QWORD *)(*((_QWORD *)this + 1) + 120), 1, 0);
      v7 = *((_QWORD *)this + 2);
      if (!v7)
      {
        std::string::basic_string[abi:ne180100]<0>(&inData, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v15, "open");
        std::string::basic_string[abi:ne180100]<0>(&v14, "DSPGraph::AUAnalyzer Box is null");
        DSPGraph::ThrowException(0, &inData, 289, &v15, &v14);
      }
      v8 = *(_QWORD *)(v7 + 16);
      v9 = *(_DWORD *)(v8 + 268);
      if (v9 == 1)
        v9 = *(_DWORD *)(v8 + 272);
      LODWORD(inData) = v9;
      AudioUnitSetProperty(*v1, 0xEu, 0, 0, &inData, 4u);
      v10 = AudioUnitInitialize(*v1);
      if (v10)
      {
        std::string::basic_string[abi:ne180100]<0>(&inData, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v15, "open");
        if (*((char *)this + 79) < 0)
          v5 = (char **)*v5;
        DSPGraph::strprintf((DSPGraph *)"AudioUnitInitialize %s", &v14, v5);
        DSPGraph::ThrowException(v10, &inData, 293, &v15, &v14);
      }
    }
    if (cf)
      CFRelease(cf);
  }
}

void sub_18F06049C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  applesauce::CF::StringRef::~StringRef(&a11);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::AUAnalyzer::setFormatOnUnit(AudioUnit *this, const AudioStreamBasicDescription *inData, AudioUnitScope a3, AudioUnitElement a4)
{
  uint64_t result;
  NSObject *v7;
  int16x8_t v8;
  void **v9;
  char *v10;
  char *v11;
  int v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  void *__p[2];
  char v18;
  uint8_t buf[16];
  int16x8_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  result = AudioUnitSetProperty(this[13], 8u, a3, a4, inData, 0x28u);
  if ((_DWORD)result)
  {
    v12 = result;
    if (DSPGraph::getLog(void)::onceToken != -1)
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_9110);
    v7 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(int16x8_t *)&inData->mBytesPerPacket;
      *(_OWORD *)buf = *(_OWORD *)&inData->mSampleRate;
      v20 = v8;
      v21 = *(_QWORD *)&inData->mBitsPerChannel;
      CA::StreamDescription::AsString((CA::StreamDescription *)__p, buf, *(double *)buf, v8);
      v9 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v9;
      _os_log_debug_impl(&dword_18EE07000, v7, OS_LOG_TYPE_DEBUG, "AudioStreamBasicDescription: %s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(__p, "setFormatOnUnit");
    std::string::basic_string[abi:ne180100]<0>(&v13, "AUAnalyzer::setFormatOnUnit ");
    v10 = (char *)(*((uint64_t (**)(AudioUnit *))*this + 2))(this);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, &v13, v10);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v15, &v14, " ");
    v11 = (char *)(this + 7);
    if (*((char *)this + 79) < 0)
      v11 = *(char **)v11;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v16, &v15, v11);
    DSPGraph::ThrowException(v12, (__int128 *)buf, 305, (__int128 *)__p, (__int128 *)&v16);
  }
  return result;
}

void sub_18F06073C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a33 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v39 - 57) < 0)
    operator delete(*(void **)(v39 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUAnalyzer::getFormatFromUnit@<X0>(AudioUnit *this@<X0>, AudioUnitScope inScope@<W1>, AudioUnitElement inElement@<W2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  int v6;
  char *v7;
  char *v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  __int128 v13;
  __int128 v14;
  UInt32 ioDataSize;

  a4[4] = 0;
  *(_OWORD *)a4 = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  ioDataSize = 40;
  result = AudioUnitGetProperty(this[13], 8u, inScope, inElement, a4, &ioDataSize);
  if ((_DWORD)result)
  {
    v6 = result;
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "getFormatFromUnit");
    std::string::basic_string[abi:ne180100]<0>(&v9, "AUAnalyzer::getFormatFromUnit ");
    v7 = (char *)(*((uint64_t (**)(AudioUnit *))*this + 2))(this);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v10, &v9, v7);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v11, &v10, " ");
    v8 = (char *)(this + 7);
    if (*((char *)this + 79) < 0)
      v8 = *(char **)v8;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v12, &v11, v8);
    DSPGraph::ThrowException(v6, &v14, 315, &v13, (__int128 *)&v12);
  }
  return result;
}

void sub_18F0608D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a33 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v33 - 49) < 0)
    operator delete(*(void **)(v33 - 72));
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  _Unwind_Resume(exception_object);
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_9113()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

void DSPGraph::TestAnalyzer::~TestAnalyzer(void **this)
{
  *this = off_1E2912CA8;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
}

{
  *this = off_1E2912CA8;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  JUMPOUT(0x193FFE460);
}

{
  *this = off_1E2912CA8;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
}

const char *DSPGraph::TestAnalyzer::ClassName(DSPGraph::TestAnalyzer *this)
{
  return "TestAnalyzer";
}

uint64_t DSPGraph::TestAnalyzer::isAU(DSPGraph::TestAnalyzer *this)
{
  return 0;
}

float DSPGraph::TestAnalyzer::getParameter(DSPGraph::TestAnalyzer *this)
{
  return 0.0;
}

double DSPGraph::TestAnalyzer::getParameterInfo@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 104) = 1;
  return result;
}

uint64_t DSPGraph::TestAnalyzer::getProperty(DSPGraph::TestAnalyzer *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, void *a6)
{
  *a5 = 0;
  return 0;
}

uint64_t DSPGraph::TestAnalyzer::getPropertyInfo(DSPGraph::TestAnalyzer *this)
{
  return 0;
}

uint64_t DSPGraph::TestAnalyzer::setProperty(DSPGraph::TestAnalyzer *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, const void *a6)
{
  return 0;
}

void DSPGraph::TestAnalyzer::getParameterList(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

double DSPGraph::TestAnalyzer::getFormatFromUnit@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void DSPGraph::AnalyzerBuilder::~AnalyzerBuilder(DSPGraph::AnalyzerBuilder *this)
{
  *(_QWORD *)this = &off_1E290D5B8;
  std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E290D5B8;
  std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::AnalyzerBuilder::ClassName(DSPGraph::AnalyzerBuilder *this)
{
  return "AnalyzerBuilder";
}

uint64_t DSPGraph::AnalyzerBuilder::print(uint64_t result, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t *v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *__p[2];
  char v13;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  v4 = *(uint64_t **)(result + 24);
  if (v4)
  {
    v6 = a4 + 4;
    v7 = *MEMORY[0x1E0DE4F50];
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v10 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
      DSPGraph::print4cc(&v15, *((_DWORD *)v4 + 13));
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v16);
      v11 = __p;
      if (v13 < 0)
        v11 = (void **)__p[0];
      DSPGraph::printi(a2, v6, "%s\n", (const char *)v11);
      if (v13 < 0)
        operator delete(__p[0]);
      v14[0] = v7;
      *(_QWORD *)((char *)v14 + *(_QWORD *)(v7 - 24)) = v8;
      v15 = v9;
      v16[0] = v10;
      if (v17 < 0)
        operator delete((void *)v16[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      result = MEMORY[0x193FFE3A0](&v18);
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  return result;
}

void sub_18F060C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,DSPGraph::AnalyzerBuilder::Info>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t DSPGraph::Analyzer::Analyzer(uint64_t a1, int a2, __int128 *a3, __int128 *a4)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E2912CA8;
  *(_DWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 28) = 0;
  v5 = *a3;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = (std::string *)(a1 + 56);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v7 = *a4;
    v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

void DSPGraph::Analyzer::~Analyzer(void **this)
{
  *this = off_1E2912CA8;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
}

uint64_t DSPGraph::Analyzer::setWire(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t DSPGraph::Analyzer::setBox(uint64_t this, DSPGraph::Box *a2)
{
  *(_QWORD *)(this + 16) = a2;
  return this;
}

uint64_t DSPGraph::Analyzer::setSerialNo(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 88) = a2;
  return this;
}

uint64_t DSPGraph::Analyzer::setBoxOutputPort(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

void DSPGraph::Analyzer::initialize(DSPGraph::Analyzer *this)
{
  NSObject *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (DSPGraph::getLog(void)::onceToken != -1)
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_9110);
  v2 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v3 = (_QWORD *)((char *)this + 56);
    if (*((char *)this + 79) < 0)
      v3 = (_QWORD *)*v3;
    v4 = 136315138;
    v5 = v3;
    _os_log_debug_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "Analyzer::initialize %s", (uint8_t *)&v4, 0xCu);
  }
}

void DSPGraph::Analyzer::uninitialize(DSPGraph::Analyzer *this)
{
  NSObject *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (DSPGraph::getLog(void)::onceToken != -1)
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_9110);
  v2 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v3 = (_QWORD *)((char *)this + 56);
    if (*((char *)this + 79) < 0)
      v3 = (_QWORD *)*v3;
    v4 = 136315138;
    v5 = v3;
    _os_log_debug_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "Analyzer::uninitialize %s", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t DSPGraph::Analyzer::analyze(uint64_t this, uint64_t a2)
{
  if (*(_BYTE *)(this + 28))
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 64))(this, *(_QWORD *)(*(_QWORD *)(this + 8) + 56), a2);
  return this;
}

uint64_t DSPGraph::AUAnalyzer::AUAnalyzer(uint64_t a1, int a2, __int128 *a3, __int128 *a4)
{
  uint64_t result;

  result = DSPGraph::Analyzer::Analyzer(a1, a2, a3, a4);
  *(_QWORD *)result = off_1E290B518;
  *(_BYTE *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  return result;
}

{
  uint64_t result;

  result = DSPGraph::Analyzer::Analyzer(a1, a2, a3, a4);
  *(_QWORD *)result = off_1E290B518;
  *(_BYTE *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  return result;
}

_QWORD *DSPGraph::TestAnalyzer::TestAnalyzer(uint64_t a1, int a2, __int128 *a3)
{
  _QWORD *result;
  __int128 v4;
  int v5;

  v4 = xmmword_18F117190;
  v5 = 0;
  result = (_QWORD *)DSPGraph::Analyzer::Analyzer(a1, a2, &v4, a3);
  *result = off_1E290C9F0;
  return result;
}

{
  _QWORD *result;
  __int128 v4;
  int v5;

  v4 = xmmword_18F117190;
  v5 = 0;
  result = (_QWORD *)DSPGraph::Analyzer::Analyzer(a1, a2, &v4, a3);
  *result = off_1E290C9F0;
  return result;
}

_QWORD *DSPGraph::AnalyzerBuilder::decompileAnalysis(_QWORD *result, _QWORD *a2)
{
  uint64_t *i;
  void *p_p;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *__p;
  uint64_t v9;
  unsigned __int8 v10;

  for (i = (uint64_t *)result[3]; i; i = (uint64_t *)*i)
  {
    DSPGraph::strprintf((DSPGraph *)"analysisDefine ", &__p);
    if ((v10 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v10 & 0x80u) == 0)
      v5 = v10;
    else
      v5 = v9;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)p_p, v5);
    if ((char)v10 < 0)
      operator delete(__p);
    DSPGraph::print4cc(a2, *((_DWORD *)i + 4));
    std::operator+<char>();
    if ((v10 & 0x80u) == 0)
      v6 = &__p;
    else
      v6 = __p;
    if ((v10 & 0x80u) == 0)
      v7 = v10;
    else
      v7 = v9;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v6, v7);
    if ((char)v10 < 0)
      operator delete(__p);
    result = DSPGraph::printACD(a2, (unsigned int *)i + 12, 1);
  }
  return result;
}

void sub_18F0611B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MP4BoxParser_SampleToGroupRunLength::~MP4BoxParser_SampleToGroupRunLength(MP4BoxParser_SampleToGroupRunLength *this)
{
  MP4BoxParser_SampleToGroupRunLength::~MP4BoxParser_SampleToGroupRunLength(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2909CC8;
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t MP4BoxParser_SampleToGroupRunLength::Init(MP4BoxParser **this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v9;
  uint64_t DataSourceBytes;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  NSObject *v17;
  const char *v18;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  unsigned int v24[3];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if ((_DWORD)v2)
    return v2;
  if (*((_DWORD *)this + 5) != 1935828848)
    return 4294967294;
  v3 = (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this);
  if (*((_BYTE *)this + 56))
    v4 = 12;
  else
    v4 = 8;
  v5 = (unint64_t)this[3];
  v6 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
  v7 = (unint64_t)this[3];
  if (v5 <= v6 || v7 < v4)
  {
    if (v7 > (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this) && (unint64_t)this[3] >= 4)
    {
      DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, v24);
      if ((_DWORD)DataSourceBytes)
      {
        v2 = DataSourceBytes;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v20 = 136315394;
          v21 = "MP4_BoxParser_SampleToGroupRunLength.cpp";
          v22 = 1024;
          v23 = 116;
          v11 = MEMORY[0x1E0C81028];
          v12 = "%25s:%-5d  couldn't read grouping type";
LABEL_19:
          _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v20, 0x12u);
          return v2;
        }
        return v2;
      }
      v9 = v24[0];
    }
    *((_DWORD *)this + 16) = bswap32(v9);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_30:
      v2 = 0;
      *((_BYTE *)this + 60) = 0;
      return v2;
    }
    v20 = 136315394;
    v21 = "MP4_BoxParser_SampleToGroupRunLength.cpp";
    v22 = 1024;
    v23 = 120;
    v17 = MEMORY[0x1E0C81028];
    v18 = "%25s:%-5d  'sbgp' box is too small for its basic contents";
LABEL_29:
    _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v20, 0x12u);
    goto LABEL_30;
  }
  v13 = MP4BoxParser::ReadDataSourceBytes(this[1], v3, v4, v24);
  if (!(_DWORD)v13)
  {
    *((_DWORD *)this + 16) = bswap32(v24[0]);
    v14 = 1;
    if (*((_BYTE *)this + 56))
    {
      *((_BYTE *)this + 68) = 1;
      *((_DWORD *)this + 18) = bswap32(v24[1]);
      v14 = 2;
    }
    v15 = bswap32(v24[v14]);
    *((_DWORD *)this + 20) = v15;
    this[11] = (MP4BoxParser *)v4;
    v16 = (unint64_t)this[3];
    if (v16 > (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this)
      && (unint64_t)this[3] >= v4 + 8 * v15)
    {
      v2 = 0;
      *((_BYTE *)this + 60) = 1;
      return v2;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    v20 = 136315394;
    v21 = "MP4_BoxParser_SampleToGroupRunLength.cpp";
    v22 = 1024;
    v23 = 141;
    v17 = MEMORY[0x1E0C81028];
    v18 = "%25s:%-5d  'sbgp' box is too small for its sample to group entries";
    goto LABEL_29;
  }
  v2 = v13;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v20 = 136315394;
    v21 = "MP4_BoxParser_SampleToGroupRunLength.cpp";
    v22 = 1024;
    v23 = 124;
    v11 = MEMORY[0x1E0C81028];
    v12 = "%25s:%-5d  Couldn't read box fields";
    goto LABEL_19;
  }
  return v2;
}

uint64_t MP4BoxParser_SampleToGroupRunLength::GetSampleToGroupTable(uint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t DataSourceBytes;
  _BYTE *v8;
  char *v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  size_t v31;
  unint64_t v32;
  char *v33;
  void *v34;
  char *v35;
  char v36;
  unsigned int v37;
  char *v38;
  uint64_t i;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char **v58;
  int v59;
  uint64_t v60;
  void *__p;
  char *v62;
  uint64_t v63;
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 60)
    || (v4 = *(_QWORD *)(a1 + 96), v5 = (*(_QWORD *)(a1 + 104) - v4) >> 3, v6 = *(unsigned int *)(a1 + 80), v5 == v6))
  {
    DataSourceBytes = 0;
    goto LABEL_4;
  }
  __p = 0;
  v62 = 0;
  v63 = 0;
  if (v6 >= 0x1000)
    LODWORD(v19) = 4096;
  else
    LODWORD(v19) = v6;
  v60 = *(_QWORD *)(a1 + 88);
  if (v6 > (*(_QWORD *)(a1 + 112) - v4) >> 3)
  {
    v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v6);
    v21 = &v20[8 * v5];
    v23 = &v20[8 * v22];
    v25 = *(char **)(a1 + 96);
    v24 = *(char **)(a1 + 104);
    v26 = v21;
    if (v24 != v25)
    {
      do
      {
        v27 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *((_QWORD *)v26 - 1) = v27;
        v26 -= 8;
      }
      while (v24 != v25);
      v24 = *(char **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 96) = v26;
    *(_QWORD *)(a1 + 104) = v21;
    *(_QWORD *)(a1 + 112) = v23;
    if (v24)
      operator delete(v24);
  }
  buf[0] = 0;
  if ((_DWORD)v19)
  {
    std::vector<unsigned char>::__append(&__p, (8 * v19), buf);
    v28 = (char *)__p;
  }
  else
  {
    v28 = 0;
  }
  v36 = 1;
  if ((_DWORD)v6)
  {
    v58 = a2;
    v59 = v19;
    while (1)
    {
      v19 = v19 >= v6 ? v6 : v19;
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v38 = (char *)__p;
      DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*(MP4BoxParser **)(a1 + 8), v60 + v37, (8 * v19), __p);
      if ((_DWORD)DataSourceBytes)
        break;
      if ((_DWORD)v19)
      {
        for (i = 0; i != v19; ++i)
        {
          v40 = &v28[8 * i];
          v42 = *(unsigned int *)v40;
          v41 = *((unsigned int *)v40 + 1);
          v43 = bswap32(v41);
          if ((_WORD)v43)
          {
            if ((v43 & 0x10000) != 0)
              *(_BYTE *)(a1 + 77) = 1;
            else
              *(_BYTE *)(a1 + 76) = 1;
          }
          v45 = *(_QWORD **)(a1 + 104);
          v44 = *(_QWORD *)(a1 + 112);
          if ((unint64_t)v45 >= v44)
          {
            v47 = *(_QWORD *)(a1 + 96);
            v48 = ((uint64_t)v45 - v47) >> 3;
            if ((unint64_t)(v48 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v49 = v44 - v47;
            v50 = v49 >> 2;
            if (v49 >> 2 <= (unint64_t)(v48 + 1))
              v50 = v48 + 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v51 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            if (v51)
              v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v51);
            else
              v52 = 0;
            v53 = (_QWORD *)(v51 + 8 * v48);
            *v53 = bswap64(v41 | (v42 << 32));
            v46 = v53 + 1;
            v55 = *(char **)(a1 + 96);
            v54 = *(char **)(a1 + 104);
            if (v54 != v55)
            {
              do
              {
                v56 = *((_QWORD *)v54 - 1);
                v54 -= 8;
                *--v53 = v56;
              }
              while (v54 != v55);
              v54 = *(char **)(a1 + 96);
            }
            *(_QWORD *)(a1 + 96) = v53;
            *(_QWORD *)(a1 + 104) = v46;
            *(_QWORD *)(a1 + 112) = v51 + 8 * v52;
            if (v54)
              operator delete(v54);
          }
          else
          {
            *v45 = bswap64(v41 | (v42 << 32));
            v46 = v45 + 1;
          }
          *(_QWORD *)(a1 + 104) = v46;
        }
      }
      v60 += (8 * v19);
      LODWORD(v6) = v6 - v19;
      LODWORD(v19) = v59;
      if (!(_DWORD)v6)
      {
        DataSourceBytes = 0;
        v36 = 1;
        v28 = (char *)__p;
        goto LABEL_75;
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v65 = "MP4_BoxParser_SampleToGroupRunLength.cpp";
      v66 = 1024;
      v67 = 69;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Couldn't read sample to group entries starting", buf, 0x12u);
    }
    v36 = 0;
    v28 = v38;
LABEL_75:
    a2 = v58;
    if (v28)
      goto LABEL_76;
  }
  else
  {
    DataSourceBytes = 0;
    if (v28)
    {
LABEL_76:
      v62 = v28;
      operator delete(v28);
    }
  }
  if ((v36 & 1) == 0)
    return DataSourceBytes;
LABEL_4:
  if ((char **)(a1 + 96) != a2)
  {
    v9 = *(char **)(a1 + 96);
    v8 = *(_BYTE **)(a1 + 104);
    v10 = v8 - v9;
    v11 = (v8 - v9) >> 3;
    v12 = (uint64_t)a2[2];
    v13 = *a2;
    if (v11 > (v12 - (uint64_t)*a2) >> 3)
    {
      if (v13)
      {
        a2[1] = v13;
        operator delete(v13);
        v12 = 0;
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      if ((v10 & 0x8000000000000000) != 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v14 = v12 >> 2;
      if (v12 >> 2 <= v11)
        v14 = (v8 - v9) >> 3;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15 >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v15);
      v13 = v16;
      *a2 = v16;
      a2[1] = v16;
      a2[2] = &v16[8 * v17];
      if (v8 != v9)
        memmove(v16, v9, v8 - v9);
      v18 = a2 + 1;
      goto LABEL_37;
    }
    v30 = a2[1];
    v18 = a2 + 1;
    v29 = v30;
    v31 = v30 - v13;
    v32 = (v30 - v13) >> 3;
    if (v32 >= v11)
    {
      if (v8 == v9)
      {
LABEL_37:
        *v18 = &v13[v10];
        return DataSourceBytes;
      }
      v34 = v13;
      v35 = v9;
    }
    else
    {
      v33 = &v9[8 * v32];
      if (v29 != v13)
      {
        memmove(v13, v9, v31);
        v13 = *v18;
      }
      v10 = v8 - v33;
      if (v8 == v33)
        goto LABEL_37;
      v34 = v13;
      v35 = v33;
    }
    memmove(v34, v35, v10);
    goto LABEL_37;
  }
  return DataSourceBytes;
}

void sub_18F06198C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NextAudioStream::~NextAudioStream(NextAudioStream *this)
{
  AudioFileStreamObject::~AudioFileStreamObject(this);
  JUMPOUT(0x193FFE460);
}

uint64_t NextAudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  void (*v6)(_QWORD, _QWORD, uint64_t, unsigned int *);
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  int v11;
  int8x16_t v12;
  int8x8_t v13;
  uint64_t result;
  const AudioStreamBasicDescription *v15;
  uint64_t v16;
  void (*v17)(_QWORD, _QWORD, uint64_t, int *);
  void (*v18)(_QWORD, _QWORD, uint64_t, int *);
  void (*v19)(_QWORD, _QWORD, uint64_t, int *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v25;
  void (*v26)(_QWORD, _QWORD, uint64_t, unsigned int *);
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33[4];
  unsigned int v34;
  int v35;

  v4 = *(_DWORD *)(a1 + 236);
  if (v4 > 58)
  {
    if (v4 == 92)
    {
      v16 = *(_QWORD *)(a1 + 8);
      v20 = *(_QWORD *)(v16 + 96);
      goto LABEL_25;
    }
    if (v4 == 59)
    {
      v7 = *(_DWORD *)(a1 + 256);
      v8 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_11;
    }
LABEL_34:
    result = 0;
    goto LABEL_53;
  }
  if (v4 == -1)
    return 0;
  if (v4)
    goto LABEL_34;
  v5 = *(_QWORD *)(a1 + 8);
  v33[0] = 1;
  if (!*(_BYTE *)(v5 + 104))
  {
    *(_BYTE *)(v5 + 104) = 1;
    v6 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v5 + 24);
    if (v6)
      v6(*(_QWORD *)(v5 + 40), *(unsigned int *)(v5 + 8), 1717988724, v33);
  }
  v7 = 28;
  *(_DWORD *)(a1 + 256) = 28;
  v8 = (unsigned __int8 *)(a1 + 332);
  *(_QWORD *)(a1 + 264) = a1 + 332;
LABEL_11:
  v33[0] = v7;
  StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), v33, v8);
  v9 = v33[0];
  v10 = *(_DWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 264) += v33[0];
  v11 = v10 - v9;
  *(_DWORD *)(a1 + 256) = v11;
  if (v11)
  {
    result = 0;
    v25 = 59;
    goto LABEL_54;
  }
  v12 = vrev32q_s8(*(int8x16_t *)(a1 + 332));
  *(int8x16_t *)(a1 + 332) = v12;
  v13 = vrev32_s8(*(int8x8_t *)(a1 + 348));
  *(int8x8_t *)(a1 + 348) = v13;
  if (v13.i32[0] >= 0xFFFF0000)
    *(_DWORD *)(a1 + 348) = v13.u16[0];
  *(_QWORD *)(a1 + 104) = v12.u32[1];
  result = ASBDfromSNDSoundStruct((_DWORD *)(a1 + 332), (uint64_t)v33);
  if ((_DWORD)result == 1685348671)
    goto LABEL_52;
  if ((_DWORD)result)
  {
LABEL_53:
    v25 = -1;
    goto LABEL_54;
  }
  if (!AudioFileObject::IsDataFormatValid((AudioFileObject *)v33, v15))
  {
LABEL_52:
    *(_BYTE *)(a1 + 177) = 1;
    result = 1685348671;
    goto LABEL_53;
  }
  *(_DWORD *)(a1 + 16) = 1315264596;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 56))(a1, v33);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(a1, *(unsigned int *)(a1 + 340));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, *(_DWORD *)(a1 + 340) / v34);
  *(_DWORD *)(a1 + 112) = v34;
  v16 = *(_QWORD *)(a1 + 8);
  v35 = 1;
  if (!*(_BYTE *)(v16 + 105))
  {
    *(_BYTE *)(v16 + 105) = 1;
    v17 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v16 + 24);
    if (v17)
    {
      v17(*(_QWORD *)(v16 + 40), *(unsigned int *)(v16 + 8), 1684434292, &v35);
      v16 = *(_QWORD *)(a1 + 8);
    }
  }
  v35 = 1;
  v18 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v16 + 24);
  if (v18)
  {
    v18(*(_QWORD *)(v16 + 40), *(unsigned int *)(v16 + 8), 1650683508, &v35);
    v16 = *(_QWORD *)(a1 + 8);
    v19 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v16 + 24);
    v35 = 1;
    if (v19)
    {
      v19(*(_QWORD *)(v16 + 40), *(unsigned int *)(v16 + 8), 1685022310, &v35);
      v16 = *(_QWORD *)(a1 + 8);
    }
  }
  else
  {
    v35 = 1;
  }
  v20 = *(unsigned int *)(a1 + 336);
  *(_QWORD *)(v16 + 96) = v20;
LABEL_25:
  v21 = *(_QWORD *)(v16 + 88);
  v22 = v21 + *(unsigned int *)(v16 + 80);
  if (v20 < v21 || v22 <= v20 || (_DWORD)v22 - (_DWORD)v20 == 0)
  {
    result = 0;
    v25 = 92;
LABEL_54:
    *(_DWORD *)(a1 + 236) = v25;
    return result;
  }
  v33[0] = 1;
  if (!*(_DWORD *)(v16 + 112))
  {
    *(_DWORD *)(v16 + 112) = 1;
    v26 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v16 + 24);
    if (v26)
    {
      v26(*(_QWORD *)(v16 + 40), *(unsigned int *)(v16 + 8), 1919247481, v33);
      v16 = *(_QWORD *)(a1 + 8);
      v21 = *(_QWORD *)(v16 + 88);
      v22 = v21 + *(unsigned int *)(v16 + 80);
    }
  }
  v27 = 0;
  *(_QWORD *)a2 = a1;
  *(_OWORD *)(a2 + 8) = xmmword_18F116F70;
  v28 = *(_QWORD *)(v16 + 96);
  v29 = v28 < v21 || v22 <= v28;
  v30 = v29;
  v31 = v22 - v28;
  if (!v29 && v31)
    v27 = *(_QWORD *)(v16 + 72) + (v28 - v21);
  result = 0;
  *(_QWORD *)(a2 + 32) = v27;
  if (v30)
    v32 = 0;
  else
    v32 = v31;
  *(_DWORD *)(a2 + 24) = v32;
  return result;
}

void acv2::RamstadSRCWrapper::~RamstadSRCWrapper(acv2::RamstadSRCWrapper *this)
{
  acv2::RamstadSRCWrapper::~RamstadSRCWrapper(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E290A8F0;
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)this + 12, 0);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)this + 11, 0);
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  std::unique_ptr<RamstadSRC>::reset[abi:ne180100]((uint64_t *)this + 3, 0);
}

uint64_t acv2::RamstadSRCWrapper::ProduceOutput(acv2::RamstadSRCWrapper *this, ACAudioSpan *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  const ACAudioSpan *v9;
  unsigned int v10;
  AudioConverterCapturer *v11;
  unsigned int v12;
  unsigned int v13;
  acv2::AudioConverterBase *v14;
  const float *v15;
  signed int v16;
  int v17;
  const float *v18;
  const float *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  signed int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  float *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  const ACAudioSpan *v41;
  acv2::AudioConverterBase *v42;
  char v43;
  BOOL v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  AudioConverterCapturer *v56;
  int v57[2];
  unsigned int v58;

  v3 = *((_DWORD *)this + 20);
  v4 = *((_QWORD *)this + 1);
  LOBYTE(v55) = 0;
  BYTE4(v55) = 1;
  if (*(_DWORD *)a2 < *((_DWORD *)a2 + 1))
  {
    v6 = (unsigned int *)(v4 + 168);
    while (1)
    {
      ACBaseAudioSpan::setAfter(v4 + 168, (unsigned int *)a2);
      ACBaseAudioSpan::copyEmptyMetadataEventsFrom((uint64_t *)(v4 + 168), a2);
      v7 = *(_DWORD *)(v4 + 172);
      v8 = (*(uint64_t (**)(acv2::RamstadSRCWrapper *, _QWORD))(*(_QWORD *)this + 80))(this, v7);
      acv2::AudioConverterChain::ObtainInput((acv2::AudioConverterChain *)&v56, *(acv2::AudioConverterBase **)(*((_QWORD *)this + 1) + 8), *((_QWORD *)this + 1), v8);
      v10 = v58;
      if (v58)
        break;
      v11 = v56;
      v12 = *(_DWORD *)v56;
      v13 = v7;
      if (*(_DWORD *)v56 < v8)
        v13 = (*(uint64_t (**)(acv2::RamstadSRCWrapper *, _QWORD))(*(_QWORD *)this + 88))(this, *(unsigned int *)v56);
      if (v12 | v13)
      {
        v14 = (acv2::AudioConverterBase *)*((_QWORD *)this + 11);
        if (v14)
          acv2::AudioConverterBase::writeCapture(v14, v11, v9);
        if (v7 >= v13)
          v7 = v13;
        if (v3 == 1)
        {
          v15 = v12 ? *(const float **)(*((_QWORD *)v11 + 2) + 16) : 0;
          v23 = RamstadSRC::processMono(*((RamstadSRC **)this + 3), v15, *(float **)(*(_QWORD *)(v4 + 184) + 16));
        }
        else
        {
          v17 = *(_DWORD *)(v4 + 28);
          if (v3 == 2)
          {
            if ((v17 & 0x20) != 0)
            {
              if (v12)
              {
                v24 = *((_QWORD *)v11 + 2);
                v18 = *(const float **)(v24 + 16);
                v19 = *(const float **)(v24 + 32);
              }
              else
              {
                v18 = 0;
                v19 = 0;
              }
              v28 = 1;
            }
            else
            {
              if (v12)
              {
                v18 = *(const float **)(*((_QWORD *)v11 + 2) + 16);
                v19 = v18 + 1;
              }
              else
              {
                v18 = 0;
                v19 = 0;
              }
              v28 = 2;
            }
            v30 = *(_QWORD *)(v4 + 184);
            v31 = *(float **)(v30 + 16);
            if ((*(_BYTE *)(v4 + 68) & 0x20) != 0)
            {
              v32 = *(float **)(v30 + 32);
              v33 = 1;
            }
            else
            {
              v32 = v31 + 1;
              v33 = 2;
            }
            v34 = v12 >= v8 ? v8 : v12;
            v23 = RamstadSRC::processStereo(*((RamstadSRC **)this + 3), v18, v19, v31, v32, v34, v7, v28, v33);
          }
          else
          {
            if ((v17 & 0x20) != 0)
            {
              v25 = *((unsigned int *)this + 20);
              if (v12)
              {
                if ((int)v25 >= 1)
                {
                  v26 = 0;
                  v27 = 16;
                  do
                  {
                    *(_QWORD *)(*((_QWORD *)this + 4) + v26) = *(_QWORD *)(*((_QWORD *)v11 + 2) + v27);
                    v26 += 8;
                    v27 += 16;
                  }
                  while (8 * v25 != v26);
                }
              }
              else if ((int)v25 >= 1)
              {
                v35 = 0;
                do
                {
                  *(_QWORD *)(*((_QWORD *)this + 4) + v35) = 0;
                  v35 += 8;
                }
                while (8 * v25 != v35);
              }
            }
            else
            {
              v20 = *((unsigned int *)this + 20);
              if (v12)
              {
                if ((int)v20 >= 1)
                {
                  v21 = 0;
                  v22 = *(_QWORD *)(*((_QWORD *)v11 + 2) + 16);
                  do
                  {
                    *(_QWORD *)(*((_QWORD *)this + 4) + v21) = v22;
                    v21 += 8;
                    v22 += 4;
                  }
                  while (8 * v20 != v21);
                }
              }
              else if ((int)v20 >= 1)
              {
                v29 = 0;
                do
                {
                  *(_QWORD *)(*((_QWORD *)this + 4) + v29) = 0;
                  v29 += 8;
                }
                while (8 * v20 != v29);
              }
              LODWORD(v25) = v20;
            }
            if ((*(_BYTE *)(v4 + 68) & 0x20) != 0)
            {
              if ((int)v25 >= 1)
              {
                v38 = 0;
                v39 = 16;
                do
                {
                  *(_QWORD *)(*((_QWORD *)this + 7) + v38) = *(_QWORD *)(*(_QWORD *)(v4 + 184) + v39);
                  v38 += 8;
                  v39 += 16;
                }
                while (8 * v25 != v38);
              }
            }
            else if ((int)v25 >= 1)
            {
              v36 = 0;
              v37 = *(_QWORD *)(*(_QWORD *)(v4 + 184) + 16);
              do
              {
                *(_QWORD *)(*((_QWORD *)this + 7) + v36) = v37;
                v36 += 8;
                v37 += 4;
              }
              while (8 * v25 != v36);
            }
            v23 = RamstadSRC::processMulti(*((RamstadSRC **)this + 3), *((const float *const **)this + 4), *((float *const **)this + 7));
          }
        }
        v16 = v23;
      }
      else
      {
        v16 = 0;
        v7 = 0;
      }
      v40 = *(_DWORD *)(*((_QWORD *)this + 1) + 72);
      *(_DWORD *)(v4 + 168) = v7;
      *(_DWORD *)(v4 + 176) = ACBaseAudioSpan::sizeOfFirstPackets((ACBaseAudioSpan *)(v4 + 168), v7, v40);
      v42 = (acv2::AudioConverterBase *)*((_QWORD *)this + 12);
      if (v42)
        acv2::AudioConverterBase::writeCapture(v42, (AudioConverterCapturer *)(v4 + 168), v41);
      v10 = acv2::AudioConverterChain::ConsumedInput(*(_QWORD **)(*((_QWORD *)this + 1) + 8), *(_DWORD *)v11, *(uint64_t *)v57, v16);
      if (v10)
        break;
      v54 = (v16 > 0) | 0x100000000;
      caulk::expected<BOOL,int>::value((uint64_t)&v54);
      if ((_BYTE)v54)
      {
        v52 = 1;
      }
      else
      {
        caulk::expected<BOOL,int>::value((uint64_t)&v55);
        v52 = (_BYTE)v55 != 0;
      }
      LOBYTE(v55) = v52;
      if (!BYTE4(v55))
      {
        v43 = 1;
LABEL_67:
        BYTE4(v55) = v43;
      }
LABEL_68:
      if (BYTE4(v54))
      {
        caulk::expected<BOOL,int>::value((uint64_t)&v54);
        v44 = (_BYTE)v54 != 0;
      }
      else
      {
        v44 = 0;
      }
      v45 = *v6;
      if (v44 || v45)
      {
        v46 = *(_DWORD *)(v4 + 176);
        v47 = *(_DWORD *)a2;
        v48 = *((unsigned int *)a2 + 2);
        if (v45)
        {
          v49 = *((_QWORD *)a2 + 4);
          if (v49)
          {
            v50 = *(_DWORD *)a2;
            v51 = *v6;
            do
            {
              *(_QWORD *)(v49 + 16 * v50++) += v48;
              --v51;
            }
            while (v51);
          }
        }
        *(_DWORD *)a2 = v47 + v45;
        *((_DWORD *)a2 + 2) = v48 + v46;
        ACBaseAudioSpan::copyFilledMetadataEventsFrom((uint64_t)a2, v4 + 168, 0);
        if (BYTE4(v55))
        {
          if (*(_DWORD *)a2 < *((_DWORD *)a2 + 1))
            continue;
        }
      }
      goto LABEL_85;
    }
    v54 = v10;
    LODWORD(v55) = v10;
    if (!BYTE4(v55))
      goto LABEL_68;
    v43 = 0;
    goto LABEL_67;
  }
LABEL_85:
  ACBaseAudioSpan::completeMetadataFrame((uint64_t *)a2);
  return v55;
}

uint64_t acv2::RamstadSRCWrapper::PrimeMethodWritable(acv2::RamstadSRCWrapper *this)
{
  return 0;
}

uint64_t acv2::RamstadSRCWrapper::GetPrimeMethod(acv2::RamstadSRCWrapper *this)
{
  return 2;
}

double acv2::RamstadSRCWrapper::GetInitialPhase(acv2::RamstadSRCWrapper *this)
{
  return 0.0;
}

uint64_t acv2::RamstadSRCWrapper::GetMinimumPhase(acv2::RamstadSRCWrapper *this)
{
  return 1;
}

uint64_t acv2::RamstadSRCWrapper::GetNumberOfSourceFrames(RamstadSRC **this)
{
  return RamstadSRC::inputSamplesForOutputSamples(this[3]);
}

uint64_t acv2::RamstadSRCWrapper::GetNumberOfOutputFrames(RamstadSRC **this, uint64_t a2)
{
  int v3;

  v3 = 0;
  return RamstadSRC::outputSamplesForInputSamples(this[3], a2, &v3);
}

uint64_t acv2::RamstadSRCWrapper::Reset(RamstadSRC **this)
{
  RamstadSRC::reset(this[3]);
  return 0;
}

const char *acv2::RamstadSRCWrapper::KernelName(acv2::RamstadSRCWrapper *this)
{
  return "RamstadSRCWrapper";
}

_QWORD *std::vector<float *>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v7];
    v8 = &v6[a2];
    v9 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v9 -= 8;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_18F0623C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::print(uint64_t result, _QWORD *a2, int a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  if (a3 >= 2)
  {
    v4 = a4;
    v7 = result;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a2, a4, 1);
    DSPGraph::printi(a2, v4 + 4, "graph %p\n", *(const void **)(v7 + 8));
    DSPGraph::printi(a2, v4 + 4, "num inputs %u\n", (*(_QWORD *)(v7 + 72) - *(_QWORD *)(v7 + 64)) >> 5);
    result = DSPGraph::printi(a2, v4 + 4, "num outputs %u\n", (*(_QWORD *)(v7 + 96) - *(_QWORD *)(v7 + 88)) >> 5);
    if (a3 != 2)
    {
      v8 = *(uint64_t **)(v7 + 72);
      if (*(uint64_t **)(v7 + 64) != v8)
      {
        v9 = *(uint64_t **)(v7 + 64);
        do
        {
          v10 = *v9;
          v9 += 4;
          (*(void (**)(void))(v10 + 24))();
        }
        while (v9 != v8);
      }
      result = *(_QWORD *)(v7 + 88);
      v11 = *(uint64_t **)(v7 + 96);
      if ((uint64_t *)result != v11)
      {
        v12 = (uint64_t *)result;
        do
        {
          v13 = *v12;
          v12 += 4;
          (*(void (**)(void))(v13 + 24))();
          result = (uint64_t)v12;
        }
        while (v12 != v11);
      }
    }
  }
  return result;
}

_QWORD *DSPGraph::Box::printShort(const char *a1, _QWORD *a2, unsigned int a3, int a4)
{
  const char *v8;
  const char *v9;
  _QWORD *result;
  char v11;

  v8 = (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)a1 + 16))(a1);
  v9 = a1 + 32;
  if (a1[55] < 0)
    v9 = *(const char **)v9;
  result = (_QWORD *)DSPGraph::printi(a2, a3, "%s '%s' %qu %p ", v8, v9, *((_QWORD *)a1 + 7), a1);
  if (a4)
  {
    v11 = 10;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v11, 1);
  }
  return result;
}

void DSPGraph::Box::setParameter(DSPGraph::Box *this, float a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  std::string::basic_string[abi:ne180100]<0>(&v4, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v3, "setParameter");
  std::string::basic_string[abi:ne180100]<0>(&v2, "Box::setParameter");
  DSPGraph::ThrowException(1869640255, &v4, 794, &v3, &v2);
}

void sub_18F062620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::getParameter(DSPGraph::Box *this)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;

  std::string::basic_string[abi:ne180100]<0>(&v3, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v2, "getParameter");
  std::string::basic_string[abi:ne180100]<0>(&v1, "Box::getParameter");
  DSPGraph::ThrowException(1869640255, &v3, 784, &v2, &v1);
}

void sub_18F0626CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::getParameterList(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void DSPGraph::Box::getParameterInfo(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1869640255;
  *(_BYTE *)(a1 + 104) = 0;
}

void DSPGraph::Box::inject(int64x2_t *this, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  int64x2_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  int64x2_t *v32;
  int64x2_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v8 = this[5].i64[1];
  v9 = this[6].i64[0] - v8;
  if ((v9 & 0x1FFFFFFFE0) != 0)
  {
    if (a3 >= (unint64_t)(v9 >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v35, "out");
      v32 = this + 2;
      if (this[3].i8[7] < 0)
        v32 = (int64x2_t *)v32->i64[0];
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v34, v32, (this[6].i64[0] - this[5].i64[1]) >> 5, a3);
      DSPGraph::ThrowException(1919837985, &v36, 1418, &v35, &v34);
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 32 * a3) + 40))(v8 + 32 * a3);
    v11 = operator new();
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)v11 = off_1E290C6A0;
    *(_QWORD *)(v11 + 8) = v10;
    *(_BYTE *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_DWORD *)(v11 + 40) = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v11 + 48), a2);
    *(_BYTE *)(v11 + 72) = a4;
    *(_QWORD *)(v11 + 88) = 0;
    *(_QWORD *)(v11 + 96) = 0;
    *(_QWORD *)(v11 + 80) = 0;
    v13 = (uint64_t *)this[14].i64[1];
    v12 = this[15].u64[0];
    if ((unint64_t)v13 >= v12)
    {
      v17 = (_QWORD *)this[14].i64[0];
      v18 = v13 - v17;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v20 = v12 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v22 = (char *)operator new(8 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = (uint64_t *)&v22[8 * v18];
      *v23 = v11;
      v14 = v23 + 1;
      if (v13 == v17)
      {
        v25 = vdupq_n_s64((unint64_t)v13);
      }
      else
      {
        do
        {
          v24 = *--v13;
          *v13 = 0;
          *--v23 = v24;
        }
        while (v13 != v17);
        v25 = this[14];
      }
      this[14].i64[0] = (uint64_t)v23;
      this[14].i64[1] = (uint64_t)v14;
      this[15].i64[0] = (uint64_t)&v22[8 * v21];
      v27 = (_QWORD *)v25.i64[1];
      v26 = (_QWORD *)v25.i64[0];
      while (v27 != v26)
      {
        v29 = *--v27;
        v28 = v29;
        *v27 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      }
      if (v26)
        operator delete(v26);
    }
    else
    {
      *v13 = v11;
      v14 = v13 + 1;
    }
    this[14].i64[1] = (uint64_t)v14;
    v30 = (unsigned int *)&this[48];
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  else
  {
    v15 = this[4].i64[0];
    if (a3 >= (unint64_t)((this[4].i64[1] - v15) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v35, "in");
      v33 = this + 2;
      if (this[3].i8[7] < 0)
        v33 = (int64x2_t *)v33->i64[0];
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v34, v33, (this[4].i64[1] - this[4].i64[0]) >> 5, a3);
      DSPGraph::ThrowException(1919837985, &v36, 1410, &v35, &v34);
    }
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 + 32 * a3) + 40))(v15 + 32 * a3);
    (*(void (**)(_QWORD, char *, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 8) + 8) + 136))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8), a2, *(unsigned int *)(*(_QWORD *)(v16 + 8) + 24), a4);
  }
}

void sub_18F062A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::stopInjecting(DSPGraph::Box *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = *((_QWORD *)this + 11);
  v4 = *((_QWORD *)this + 12) - v3;
  if ((v4 & 0x1FFFFFFFE0) != 0)
  {
    if (a2 >= (unint64_t)(v4 >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v22, "out");
      v6 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v6 = (_QWORD *)*v6;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v21, v6, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, a2);
      DSPGraph::ThrowException(1919837985, &v23, 1418, &v22, &v21);
    }
  }
  else
  {
    v3 = *((_QWORD *)this + 8);
    if (a2 >= (unint64_t)((*((_QWORD *)this + 9) - v3) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v22, "in");
      v20 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v20 = (_QWORD *)*v20;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v21, v20, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, a2);
      DSPGraph::ThrowException(1919837985, &v23, 1410, &v22, &v21);
    }
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 32 * a2) + 40))(v3 + 32 * a2);
  v8 = (uint64_t *)*((_QWORD *)this + 28);
  v9 = (uint64_t *)*((_QWORD *)this + 29);
  if (v8 == v9)
  {
LABEL_11:
    v11 = (uint64_t *)*((_QWORD *)this + 29);
  }
  else
  {
    v10 = result;
    while (*(_QWORD *)(*v8 + 8) != result)
    {
      if (++v8 == v9)
        goto LABEL_11;
    }
    v14 = (unsigned int *)((char *)this + 768);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    v11 = v9;
    if (v8 != v9)
    {
      v16 = v8 + 1;
      v11 = v8;
      while (v16 != v9)
      {
        v17 = *v16;
        if (*(_QWORD *)(*v16 + 8) == v10)
        {
          do
            v18 = __ldaxr(v14);
          while (__stlxr(v18 - 1, v14));
        }
        else
        {
          *v16 = 0;
          result = *v11;
          *v11 = v17;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++v11;
        }
        ++v16;
      }
    }
  }
  v12 = (uint64_t *)*((_QWORD *)this + 29);
  if (v11 != v12)
  {
    while (v12 != v11)
    {
      v13 = *--v12;
      result = v13;
      *v12 = 0;
      if (v13)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *((_QWORD *)this + 29) = v11;
  }
  return result;
}

void sub_18F062D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::record(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  int64x2_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96) - v12;
  if ((v13 & 0x1FFFFFFFE0) != 0)
  {
    if (a3 >= (unint64_t)(v13 >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v39, "out");
      v36 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v36 = (_QWORD *)*v36;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v38, v36, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, a3);
      DSPGraph::ThrowException(1919837985, &v40, 1418, &v39, &v38);
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 32 * a3) + 40))(v12 + 32 * a3);
    v15 = operator new();
    *(_QWORD *)v15 = off_1E290C6D8;
    *(_QWORD *)(v15 + 8) = v14;
    *(_QWORD *)(v15 + 16) = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v15 + 24), a2);
    *(_BYTE *)(v15 + 80) = 0;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 64) = 0u;
    *(_BYTE *)(v15 + 88) = a4;
    *(_BYTE *)(v15 + 89) = a5;
    *(_QWORD *)(v15 + 96) = a6;
    v17 = *(uint64_t **)(a1 + 208);
    v16 = *(_QWORD *)(a1 + 216);
    if ((unint64_t)v17 >= v16)
    {
      v21 = *(_QWORD **)(a1 + 200);
      v22 = v17 - v21;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v24 = v16 - (_QWORD)v21;
      if (v24 >> 2 > v23)
        v23 = v24 >> 2;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v26 = (char *)operator new(8 * v25);
      }
      else
      {
        v26 = 0;
      }
      v27 = (uint64_t *)&v26[8 * v22];
      *v27 = v15;
      v18 = v27 + 1;
      if (v17 == v21)
      {
        v29 = vdupq_n_s64((unint64_t)v17);
      }
      else
      {
        do
        {
          v28 = *--v17;
          *v17 = 0;
          *--v27 = v28;
        }
        while (v17 != v21);
        v29 = *(int64x2_t *)(a1 + 200);
      }
      *(_QWORD *)(a1 + 200) = v27;
      *(_QWORD *)(a1 + 208) = v18;
      *(_QWORD *)(a1 + 216) = &v26[8 * v25];
      v31 = (_QWORD *)v29.i64[1];
      v30 = (_QWORD *)v29.i64[0];
      while (v31 != v30)
      {
        v33 = *--v31;
        v32 = v33;
        *v31 = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      }
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v17 = v15;
      v18 = v17 + 1;
    }
    *(_QWORD *)(a1 + 208) = v18;
    v34 = (unsigned int *)(a1 + 768);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 64);
    if (a3 >= (unint64_t)((*(_QWORD *)(a1 + 72) - v19) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v39, "in");
      v37 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v37 = (_QWORD *)*v37;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v38, v37, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, a3);
      DSPGraph::ThrowException(1919837985, &v40, 1410, &v39, &v38);
    }
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v19 + 32 * a3) + 40))(v19 + 32 * a3);
    (*(void (**)(_QWORD, char *, _QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v20 + 8) + 8)
                                                                              + 152))(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), a2, *(unsigned int *)(*(_QWORD *)(v20 + 8) + 24), a4, a5, a6);
  }
}

void sub_18F0630E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::stopRecording(DSPGraph::Box *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = *((_QWORD *)this + 11);
  v4 = *((_QWORD *)this + 12) - v3;
  if ((v4 & 0x1FFFFFFFE0) != 0)
  {
    if (a2 >= (unint64_t)(v4 >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v22, "out");
      v6 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v6 = (_QWORD *)*v6;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v21, v6, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, a2);
      DSPGraph::ThrowException(1919837985, &v23, 1418, &v22, &v21);
    }
  }
  else
  {
    v3 = *((_QWORD *)this + 8);
    if (a2 >= (unint64_t)((*((_QWORD *)this + 9) - v3) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v22, "in");
      v20 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v20 = (_QWORD *)*v20;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v21, v20, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, a2);
      DSPGraph::ThrowException(1919837985, &v23, 1410, &v22, &v21);
    }
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 32 * a2) + 40))(v3 + 32 * a2);
  v8 = (uint64_t *)*((_QWORD *)this + 25);
  v9 = (uint64_t *)*((_QWORD *)this + 26);
  if (v8 == v9)
  {
LABEL_11:
    v11 = (uint64_t *)*((_QWORD *)this + 26);
  }
  else
  {
    v10 = result;
    while (*(_QWORD *)(*v8 + 8) != result)
    {
      if (++v8 == v9)
        goto LABEL_11;
    }
    v14 = (unsigned int *)((char *)this + 768);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    v11 = v9;
    if (v8 != v9)
    {
      v16 = v8 + 1;
      v11 = v8;
      while (v16 != v9)
      {
        v17 = *v16;
        if (*(_QWORD *)(*v16 + 8) == v10)
        {
          do
            v18 = __ldaxr(v14);
          while (__stlxr(v18 - 1, v14));
        }
        else
        {
          *v16 = 0;
          result = *v11;
          *v11 = v17;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++v11;
        }
        ++v16;
      }
    }
  }
  v12 = (uint64_t *)*((_QWORD *)this + 26);
  if (v11 != v12)
  {
    while (v12 != v11)
    {
      v13 = *--v12;
      result = v13;
      *v12 = 0;
      if (v13)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *((_QWORD *)this + 26) = v11;
  }
  return result;
}

void sub_18F063418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::recordEnable(DSPGraph::Box *this, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v5 = *((_QWORD *)this + 11);
  v6 = *((_QWORD *)this + 12) - v5;
  if ((v6 & 0x1FFFFFFFE0) != 0)
  {
    if (a2 >= (unint64_t)(v6 >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v17, "out");
      v13 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v13 = (_QWORD *)*v13;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v16, v13, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, a2);
      DSPGraph::ThrowException(1919837985, &v18, 1418, &v17, &v16);
    }
    v7 = v5 + 32 * a2;
  }
  else
  {
    v8 = *((_QWORD *)this + 8);
    if (a2 >= (unint64_t)((*((_QWORD *)this + 9) - v8) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v17, "in");
      v15 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v15 = (_QWORD *)*v15;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v16, v15, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, a2);
      DSPGraph::ThrowException(1919837985, &v18, 1410, &v17, &v16);
    }
    v7 = v8 + 32 * a2;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v10 = *((_QWORD *)this + 25);
  v11 = *((_QWORD *)this + 26);
  if (v10 != v11)
  {
    while (*(_QWORD *)(*(_QWORD *)v10 + 8) != result)
    {
      v10 += 8;
      if (v10 == v11)
        return result;
    }
  }
  if (v10 != v11)
    *(_BYTE *)(*(_QWORD *)v10 + 88) = a3;
  return result;
}

void sub_18F063610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::stopAnalyzing(DSPGraph::Box *this, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = (std::mutex *)((char *)this + 248);
  std::mutex::lock((std::mutex *)((char *)this + 248));
  v5 = *((_QWORD *)this + 11);
  v6 = *((_QWORD *)this + 12) - v5;
  if ((v6 & 0x1FFFFFFFE0) != 0)
  {
    if (a2 >= (unint64_t)(v6 >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v23, "out");
      v21 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v21 = (_QWORD *)*v21;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v22, v21, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, a2);
      DSPGraph::ThrowException(1919837985, &v24, 1418, &v23, &v22);
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 32 * a2) + 40))(v5 + 32 * a2);
    if (v7)
    {
      v9 = (uint64_t *)*((_QWORD *)this + 39);
      v8 = (uint64_t *)*((_QWORD *)this + 40);
      if (v9 == v8)
      {
LABEL_8:
        v11 = (uint64_t *)*((_QWORD *)this + 40);
      }
      else
      {
        v10 = v7;
        while (*(_QWORD *)(*v9 + 8) != v7)
        {
          if (++v9 == v8)
            goto LABEL_8;
        }
        caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::remove((uint64_t)this + 336, *(_DWORD *)(*v9 + 24));
        v15 = (unsigned int *)((char *)this + 768);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        v11 = v8;
        if (v9 != v8)
        {
          v17 = v9 + 1;
          v11 = v9;
          while (v17 != v8)
          {
            v18 = *v17;
            if (*(_QWORD *)(*v17 + 8) == v10)
            {
              caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::remove((uint64_t)this + 336, *(_DWORD *)(v18 + 24));
              do
                v20 = __ldaxr(v15);
              while (__stlxr(v20 - 1, v15));
            }
            else
            {
              *v17 = 0;
              v19 = *v11;
              *v11 = v18;
              if (v19)
                (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
              ++v11;
            }
            ++v17;
          }
        }
      }
      v12 = (uint64_t *)*((_QWORD *)this + 40);
      if (v11 != v12)
      {
        while (v12 != v11)
        {
          v14 = *--v12;
          v13 = v14;
          *v12 = 0;
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        *((_QWORD *)this + 40) = v11;
      }
    }
  }
  std::mutex::unlock(v4);
}

void sub_18F0638A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::mutex *v29;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  std::mutex::unlock(v29);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Box::analyzeEnable(uint64_t this, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v3 = *(_QWORD *)(this + 88);
  v4 = *(_QWORD *)(this + 96) - v3;
  if ((v4 & 0x1FFFFFFFE0) != 0)
  {
    v5 = this;
    if (a2 >= (unint64_t)(v4 >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v12, "out");
      v10 = (_QWORD *)(v5 + 32);
      if (*(char *)(v5 + 55) < 0)
        v10 = (_QWORD *)*v10;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v11, v10, (uint64_t)(*(_QWORD *)(v5 + 96) - *(_QWORD *)(v5 + 88)) >> 5, a2);
      DSPGraph::ThrowException(1919837985, &v13, 1418, &v12, &v11);
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 32 * a2) + 40))(v3 + 32 * a2);
    if (this)
    {
      v7 = *(_QWORD *)(v5 + 312);
      v8 = *(_QWORD *)(v5 + 320);
      if (v7 != v8)
      {
        while (*(_QWORD *)(*(_QWORD *)v7 + 8) != this)
        {
          v7 += 8;
          if (v7 == v8)
            return this;
        }
      }
      if (v7 != v8)
        *(_BYTE *)(*(_QWORD *)v7 + 28) = a3;
    }
  }
  return this;
}

void sub_18F063A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::getAnalysisList(DSPGraph::Box *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v4 = *((_QWORD *)this + 11);
  v5 = *((_QWORD *)this + 12) - v4;
  if ((v5 & 0x1FFFFFFFE0) == 0)
    goto LABEL_27;
  if (a2 >= (unint64_t)(v5 >> 5))
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v25, "out");
    v23 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v23 = (_QWORD *)*v23;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v24, v23, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, a2);
    DSPGraph::ThrowException(1919837985, &v26, 1434, &v25, &v24);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 32 * a2) + 40))(v4 + 32 * a2);
  if (v8)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v9 = *((_QWORD *)this + 39);
    v10 = *((_QWORD *)this + 40);
    if (v9 != v10)
    {
      v11 = v8;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 8) == v11)
        {
          v15 = *(_DWORD *)(*(_QWORD *)v9 + 24);
          if ((unint64_t)v14 >= v13)
          {
            v17 = (v14 - v12) >> 2;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v13 - (_QWORD)v12) >> 1 > v18)
              v18 = (uint64_t)(v13 - (_QWORD)v12) >> 1;
            if (v13 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
              v19 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            if (v19)
              v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v19);
            else
              v20 = 0;
            v21 = (char *)(v19 + 4 * v17);
            *(_DWORD *)v21 = v15;
            v16 = v21 + 4;
            while (v14 != v12)
            {
              v22 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *((_DWORD *)v21 - 1) = v22;
              v21 -= 4;
            }
            v13 = v19 + 4 * v20;
            *a3 = v21;
            a3[1] = v16;
            a3[2] = (char *)v13;
            if (v12)
              operator delete(v12);
            v12 = v21;
          }
          else
          {
            *(_DWORD *)v14 = v15;
            v16 = v14 + 4;
          }
          a3[1] = v16;
          v14 = v16;
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
  }
  else
  {
LABEL_27:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_18F063C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::getAnalyzer(DSPGraph::Box *this, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = *((_QWORD *)this + 11);
  v4 = *((_QWORD *)this + 12) - v3;
  if ((v4 & 0x1FFFFFFFE0) == 0)
    return 0;
  if (a2 >= (unint64_t)(v4 >> 5))
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v13, "out");
    v11 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v11 = (_QWORD *)*v11;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v12, v11, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, a2);
    DSPGraph::ThrowException(1919837985, &v14, 1418, &v13, &v12);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 32 * a2) + 40))(v3 + 32 * a2);
  if (result)
  {
    v8 = *((_QWORD *)this + 39);
    v9 = *((_QWORD *)this + 40);
    if (v8 != v9)
    {
      while (*(_QWORD *)(*(_QWORD *)v8 + 8) != result || *(_DWORD *)(*(_QWORD *)v8 + 24) != a3)
      {
        v8 += 8;
        if (v8 == v9)
          return 0;
      }
    }
    if (v8 != v9)
      return *(_QWORD *)v8;
    return 0;
  }
  return result;
}

void sub_18F063DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::getPropertyInfo(DSPGraph::Box *this, int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  void *v10;
  void *v11;

  v3 = 0;
  v4 = 8;
  switch(a2)
  {
    case 0:
    case 2:
      return v3 | v4;
    case 1:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      goto LABEL_8;
    case 3:
      (*(void (**)(void **__return_ptr, DSPGraph::Box *, uint64_t))(*(_QWORD *)this + 96))(&v10, this, a3);
      v5 = (_DWORD)v11 - (_DWORD)v10;
      if (v10)
      {
        v11 = v10;
        operator delete(v10);
      }
      v3 = 0;
      v4 = v5 & 0xFFFFFFFC;
      return v3 | v4;
    case 4:
      v3 = 0;
      v4 = 104;
      return v3 | v4;
    case 8:
      v3 = 0;
      v4 = 40;
      return v3 | v4;
    case 11:
      v3 = 0;
      goto LABEL_20;
    case 12:
    case 20:
      goto LABEL_7;
    case 21:
      if ((_DWORD)a3)
      {
        v3 = 0;
        v4 = -10866;
      }
      else
      {
        v8 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 40))(this);
        v3 = 0x100000000;
        if (!v8)
          v3 = 0;
LABEL_20:
        v4 = 4;
      }
      return v3 | v4;
    default:
      if (a2 == 29)
      {
        v3 = 0;
        v6 = (_DWORD)a3 == 0;
        v7 = 4;
      }
      else
      {
        if (a2 != 54)
        {
LABEL_8:
          v3 = 0;
          v4 = -10879;
          return v3 | v4;
        }
LABEL_7:
        v3 = 0;
        v6 = (_DWORD)a3 == 0;
        v7 = 8;
      }
      if (v6)
        v4 = v7;
      else
        v4 = -10866;
      return v3 | v4;
  }
}

uint64_t DSPGraph::Box::getProperty(DSPGraph::Box *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  uint64_t result;
  const __CFString *v11;
  const char *v12;
  CFStringRef v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  int v18;
  unsigned int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41[6];
  const __CFString *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  result = 4294956417;
  switch(a2)
  {
    case 0:
      if (*a5 != 8)
        return 561211770;
      if ((_DWORD)a3)
        return 4294956430;
      (*(void (**)(__int128 *__return_ptr, DSPGraph::Box *))(*(_QWORD *)this + 360))(v41, this);
      v11 = *(const __CFString **)&v41[0];
      *(_QWORD *)&v41[0] = 0;
      *a6 = v11;
      applesauce::CF::DictionaryRef::~DictionaryRef((const void **)v41);
      return 0;
    case 1:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return result;
    case 2:
      if (*a5 != 8)
        return 561211770;
      if (!a6)
        return 4294967246;
      if ((_DWORD)a3 == 2)
      {
        v24 = a4;
        v25 = *((_QWORD *)this + 11);
        if (a4 >= (unint64_t)((*((_QWORD *)this + 12) - v25) >> 5))
        {
          std::string::basic_string[abi:ne180100]<0>(v41, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v40, "out");
          v38 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v38 = (_QWORD *)*v38;
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v39, v38, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, a4);
          DSPGraph::ThrowException(1919837985, v41, 1418, &v40, &v39);
        }
      }
      else
      {
        if ((_DWORD)a3 != 1)
          return 4294956430;
        v24 = a4;
        v25 = *((_QWORD *)this + 8);
        if (a4 >= (unint64_t)((*((_QWORD *)this + 9) - v25) >> 5))
        {
          std::string::basic_string[abi:ne180100]<0>(v41, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v40, "in");
          v26 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v26 = (_QWORD *)*v26;
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v39, v26, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, a4);
          DSPGraph::ThrowException(1919837985, v41, 1410, &v40, &v39);
        }
      }
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v25 + 32 * v24) + 40))(v25 + 32 * v24);
      result = 0;
      v28 = (double)**(double **)(v36 + 120);
LABEL_69:
      *(double *)a6 = v28;
      return result;
    case 3:
      (*(void (**)(__int128 *__return_ptr, DSPGraph::Box *, uint64_t))(*(_QWORD *)this + 96))(v41, this, a3);
      v17 = *(void **)&v41[0];
      v18 = DWORD2(v41[0]) - LODWORD(v41[0]);
      v19 = (DWORD2(v41[0]) - LODWORD(v41[0])) & 0xFFFFFFFC;
      if (*a5 < v19)
      {
        if (*(_QWORD *)&v41[0])
        {
          *((_QWORD *)&v41[0] + 1) = *(_QWORD *)&v41[0];
          operator delete(*(void **)&v41[0]);
        }
        return 561211770;
      }
      *a5 = v19;
      memcpy(a6, v17, v18 & 0xFFFFFFFC);
      if (v17)
      {
        *((_QWORD *)&v41[0] + 1) = v17;
        operator delete(v17);
      }
      return 0;
    case 4:
      if (*a5 != 104)
        return 561211770;
      if (!a6)
        return 4294967246;
      (*(void (**)(__int128 *__return_ptr, DSPGraph::Box *, uint64_t, uint64_t))(*(_QWORD *)this + 104))(v41, this, a3, a4);
      if (!v43)
        return LODWORD(v41[0]);
      result = 0;
      a6[12] = v42;
      v21 = v41[5];
      *((_OWORD *)a6 + 4) = v41[4];
      *((_OWORD *)a6 + 5) = v21;
      v22 = v41[1];
      *(_OWORD *)a6 = v41[0];
      *((_OWORD *)a6 + 1) = v22;
      v23 = v41[3];
      *((_OWORD *)a6 + 2) = v41[2];
      *((_OWORD *)a6 + 3) = v23;
      return result;
    case 8:
      if (*a5 != 40)
        return 561211770;
      if (!a6)
        return 4294967246;
      if ((_DWORD)a3 == 2)
      {
        v14 = a4;
        v15 = *((_QWORD *)this + 11);
        if (a4 >= (unint64_t)((*((_QWORD *)this + 12) - v15) >> 5))
        {
          std::string::basic_string[abi:ne180100]<0>(v41, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v40, "out");
          v37 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v37 = (_QWORD *)*v37;
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v39, v37, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, a4);
          DSPGraph::ThrowException(1919837985, v41, 1418, &v40, &v39);
        }
      }
      else
      {
        if ((_DWORD)a3 != 1)
          return 4294956430;
        v14 = a4;
        v15 = *((_QWORD *)this + 8);
        if (a4 >= (unint64_t)((*((_QWORD *)this + 9) - v15) >> 5))
        {
          std::string::basic_string[abi:ne180100]<0>(v41, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v40, "in");
          v16 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v16 = (_QWORD *)*v16;
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v39, v16, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, a4);
          DSPGraph::ThrowException(1919837985, v41, 1410, &v40, &v39);
        }
      }
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 + 32 * v14) + 40))(v15 + 32 * v14);
      result = 0;
      v33 = *(__int128 **)(v32 + 120);
      v34 = *v33;
      v35 = v33[1];
      a6[4] = (CFStringRef)*((_QWORD *)v33 + 4);
      *(_OWORD *)a6 = v34;
      *((_OWORD *)a6 + 1) = v35;
      return result;
    case 11:
      if (*a5 != 4)
        return 561211770;
      switch((_DWORD)a3)
      {
        case 0:
          result = 0;
          v31 = 1;
          goto LABEL_63;
        case 2:
          result = 0;
          v30 = *((_QWORD *)this + 11);
          v29 = *((_QWORD *)this + 12);
          break;
        case 1:
          result = 0;
          v30 = *((_QWORD *)this + 8);
          v29 = *((_QWORD *)this + 9);
          break;
        default:
          return 4294956430;
      }
      *(_DWORD *)a6 = (unint64_t)(v29 - v30) >> 5;
      return result;
    case 12:
      if (*a5 != 8)
        return 561211770;
      if ((_DWORD)a3)
        return 4294956430;
      v27 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 72))(this);
      result = 0;
      v28 = (double)v27 / (double)*(unint64_t *)(*((_QWORD *)this + 1) + 696);
      goto LABEL_69;
    case 20:
      if (*a5 != 8)
        return 561211770;
      if ((_DWORD)a3)
        return 4294956430;
      result = 0;
      *a6 = 0;
      return result;
    case 21:
      if (*a5 != 4)
        return 561211770;
      if ((_DWORD)a3)
        return 4294956430;
      v20 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 48))(this);
      goto LABEL_59;
    default:
      if (a2 != 29)
      {
        if (a2 != 54)
          return result;
        if (*a5 == 8)
        {
          if (!(_DWORD)a3)
          {
            v12 = (char *)this + 32;
            if (*((char *)this + 55) < 0)
              v12 = *(const char **)v12;
            v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12, 0x8000100u);
            result = 0;
            *a6 = v13;
            return result;
          }
          return 4294956430;
        }
        return 561211770;
      }
      if (*a5 != 4)
        return 561211770;
      if ((_DWORD)a3)
        return 4294956430;
      v20 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 64))(this);
LABEL_59:
      v31 = v20;
      result = 0;
LABEL_63:
      *(_DWORD *)a6 = v31;
      return result;
  }
}

void sub_18F064544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::setProperty(DSPGraph::Box *this, int a2, int a3, unsigned int a4, int a5, _QWORD *a6)
{
  if (a2)
  {
    if (a2 != 21)
      return 4294956417;
    if (a5 == 4)
    {
      if (!a3)
      {
        (*(void (**)(DSPGraph::Box *, BOOL))(*(_QWORD *)this + 56))(this, *(_DWORD *)a6 != 0);
        return 0;
      }
      return 4294956430;
    }
    return 561211770;
  }
  if (a5 != 8)
    return 561211770;
  if (a3)
    return 4294956430;
  return (*(uint64_t (**)(DSPGraph::Box *, _QWORD))(*(_QWORD *)this + 352))(this, *a6);
}

uint64_t DSPGraph::Box::getElementCount(DSPGraph::Box *this, int a2)
{
  switch(a2)
  {
    case 0:
      return 1;
    case 2:
      return (*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5;
    case 1:
      return (*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5;
  }
  return 0;
}

uint64_t DSPGraph::Box::setPreset(DSPGraph::Box *this, CFTypeRef cf)
{
  const __CFNumber *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  unsigned __int8 v8;
  size_t v9;
  void **v10;
  const void *v12;
  const void *v13;
  CFTypeID v14;
  unsigned int *BytePtr;
  CFIndex Length;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  std::runtime_error *exception;
  std::runtime_error *v24;
  std::runtime_error *v25;
  CFDataRef theData;
  char v27;
  void *__p[2];
  unsigned __int8 v29;
  CFTypeRef cfa;

  if (cf)
    CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cfa, cf);
  if (!cfa)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_45;
  }
  v4 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>((CFDictionaryRef)cfa, CFSTR("version"));
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not find item");
LABEL_45:
  }
  if (applesauce::CF::convert_to<int,0>(v4))
  {
    v5 = 4294956445;
    goto LABEL_18;
  }
  if (!cfa)
  {
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "Could not construct");
  }
  applesauce::CF::details::find_at_key<std::string,__CFString const* const&>((uint64_t)__p, (CFDictionaryRef)cfa, CFSTR("classname"));
  v6 = (const char *)(*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 16))(this);
  v7 = v6;
  v8 = v29;
  if ((v29 & 0x80u) == 0)
    v9 = v29;
  else
    v9 = (size_t)__p[1];
  if (v9 != strlen(v6) || ((v29 & 0x80u) == 0 ? (v10 = __p) : (v10 = (void **)__p[0]), memcmp(v10, v7, v9)))
  {
    v5 = 4294956445;
    if ((v8 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (!cfa)
  {
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
  }
  v12 = applesauce::CF::details::at_key<__CFString const* const&>((CFDictionaryRef)cfa, CFSTR("data"));
  if (!v12)
    goto LABEL_40;
  v13 = v12;
  CFRetain(v12);
  v14 = CFGetTypeID(v13);
  if (v14 != CFDataGetTypeID())
  {
    CFRelease(v13);
LABEL_40:
    LOBYTE(theData) = 0;
    v27 = 0;
    goto LABEL_41;
  }
  theData = (CFDataRef)v13;
  v27 = 1;
  BytePtr = (unsigned int *)CFDataGetBytePtr((CFDataRef)v13);
  Length = CFDataGetLength(theData);
  if (Length >= 1)
  {
    v17 = (unint64_t)BytePtr + Length;
    do
    {
      if ((unint64_t)(BytePtr + 1) > v17)
        break;
      if ((unint64_t)(BytePtr + 2) > v17)
        break;
      v18 = BytePtr + 3;
      if ((unint64_t)(BytePtr + 3) > v17)
        break;
      v19 = BytePtr[2];
      if (v19)
      {
        v20 = bswap32(*BytePtr);
        v21 = bswap32(BytePtr[1]);
        v22 = bswap32(v19);
        while ((unint64_t)(v18 + 1) <= v17)
        {
          BytePtr = v18 + 2;
          if ((unint64_t)(v18 + 2) > v17)
          {
            BytePtr = v18 + 1;
            goto LABEL_37;
          }
          (*(void (**)(DSPGraph::Box *, _QWORD, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)this + 80))(this, bswap32(*v18), v20, v21, 0, COERCE_FLOAT(bswap32(v18[1])));
          v18 = BytePtr;
          if (!--v22)
            goto LABEL_37;
        }
      }
      BytePtr = v18;
LABEL_37:
      ;
    }
    while ((unint64_t)BytePtr < v17);
  }
LABEL_41:
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theData);
  v5 = 0;
  if ((v29 & 0x80) != 0)
LABEL_17:
    operator delete(__p[0]);
LABEL_18:
  if (cfa)
    CFRelease(cfa);
  return v5;
}

void sub_18F064A08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17)
{
  void *v17;

  __cxa_free_exception(v17);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a17);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F0647B4);
}

void DSPGraph::Box::getPreset(DSPGraph::Box *this@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  const __CFAllocator *v3;
  __CFData *Mutable;
  int *v5;
  uint64_t v6;
  int v7;
  const __CFNumber *v8;
  CFNumberRef v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  const __CFNumber *v14;
  CFDictionaryRef CFDictionaryRef;
  uint64_t v16;
  const void *v17;
  const void *v18;
  __CFDictionary *MutableCopy;
  std::runtime_error *exception;
  char *v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef valuePtr;
  CFTypeRef cf;
  UInt8 v28[8];
  uint64_t v29;
  CFDictionaryRef v30;
  UInt8 bytes[8];
  uint64_t v32;
  int v33;
  __CFData *v34;
  const __CFNumber *v35;
  CFNumberRef v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];

  v40[2] = *MEMORY[0x1E0C80C00];
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v34 = Mutable;
  v5 = &_ZGRN8DSPGraphL22kPresetParameterScopesE_;
  do
  {
    v6 = *v5;
    v7 = (*(uint64_t (**)(DSPGraph::Box *, uint64_t))(*(_QWORD *)this + 320))(this, v6);
    if (v7)
    {
      (*(void (**)(const __CFNumber **__return_ptr, DSPGraph::Box *, uint64_t))(*(_QWORD *)this + 96))(&v35, this, v6);
      v8 = v35;
      v9 = v36;
      if (v35 != v36)
      {
        v10 = 0;
        v11 = bswap32(v6);
        do
        {
          *(_DWORD *)bytes = v11;
          *(_DWORD *)&bytes[4] = bswap32(v10);
          LODWORD(v32) = bswap32((unint64_t)(v9 - v8) >> 2);
          CFDataAppendBytes(Mutable, bytes, 12);
          v8 = v36;
          if (v36 == v35)
          {
            v9 = v36;
          }
          else
          {
            v12 = 0;
            v8 = v35;
            do
            {
              *(float *)&v13 = (*(float (**)(DSPGraph::Box *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                  + 88))(this, *((unsigned int *)v8 + v12), v6, v10);
              *(_QWORD *)v28 = 0;
              *(_DWORD *)v28 = bswap32(*((_DWORD *)v35 + v12));
              *(_DWORD *)&v28[4] = bswap32(v13);
              CFDataAppendBytes(Mutable, v28, 8);
              ++v12;
              v8 = v35;
              v9 = v36;
            }
            while (v12 < (v36 - v35) >> 2);
          }
          v10 = (v10 + 1);
        }
        while ((_DWORD)v10 != v7);
      }
      if (v8)
      {
        v36 = v8;
        operator delete(v8);
      }
    }
    ++v5;
  }
  while (v5 != kFLACChannelConfigToLayoutTag);
  *(_QWORD *)bytes = 0;
  v32 = 0;
  v33 = 0;
  (*(void (**)(UInt8 *__return_ptr, DSPGraph::Box *))(*(_QWORD *)this + 208))(bytes, this);
  CFRetain(CFSTR("version"));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, CFSTR("version"));
  v14 = (const __CFNumber *)cf;
  if (cf)
    CFRetain(cf);
  v35 = v14;
  LODWORD(valuePtr) = 0;
  v36 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v36)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFRetain(CFSTR("type"));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, CFSTR("type"));
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int const&>(&v37, valuePtr, (int *)bytes);
  CFRetain(CFSTR("subtype"));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v25, CFSTR("subtype"));
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int const&>(&v38, v25, (int *)&bytes[4]);
  CFRetain(CFSTR("manufacturer"));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v24, CFSTR("manufacturer"));
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int const&>(&v39, v24, (int *)&v32);
  CFRetain(CFSTR("classname"));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v23, CFSTR("classname"));
  v22 = (char *)(*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 16))(this);
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,char const*>(v40, v23, &v22);
  *(_QWORD *)v28 = &v35;
  v29 = 5;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v28);
  v16 = 0;
  v30 = CFDictionaryRef;
  do
  {
    v17 = (const void *)v40[v16 + 1];
    if (v17)
      CFRelease(v17);
    v18 = (const void *)v40[v16];
    if (v18)
      CFRelease(v18);
    v16 -= 2;
  }
  while (v16 != -10);
  if (v23)
    CFRelease(v23);
  if (v24)
    CFRelease(v24);
  if (v25)
    CFRelease(v25);
  if (valuePtr)
    CFRelease(valuePtr);
  if (cf)
    CFRelease(cf);
  if (CFDataGetLength(Mutable) < 1)
  {
    CFRetain(CFDictionaryRef);
    *(_QWORD *)a2 = CFDictionaryRef;
  }
  else
  {
    MutableCopy = CFDictionaryCreateMutableCopy(v3, 0, CFDictionaryRef);
    CFDictionaryAddValue(MutableCopy, CFSTR("data"), Mutable);
    applesauce::CF::DictionaryRef::DictionaryRef(a2, MutableCopy);
  }
  CFRelease(CFDictionaryRef);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_18F064EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,void *__p,CFTypeRef cf)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::insertLatencyDelayBoxes(DSPGraph::Box *this)
{
  unint64_t v1;
  uint64_t v2;
  char **v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  uint64_t v17;
  std::string *p_p;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  DSPGraph::Wire *v25;
  DSPGraph::OutputPort *v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  std::string __p;
  std::string v35;
  std::string v36;
  std::string v37;

  v1 = *((_QWORD *)this + 8);
  v2 = *((_QWORD *)this + 9);
  if (((v2 - v1) & 0x1FFFFFFFC0) != 0 && v1 != v2)
  {
    v5 = (char **)((char *)this + 32);
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v1 + 40))(v1) + 8) + 8);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 392))(v6);
      v8 = *(_DWORD *)(v1 + 28);
      if (v7)
      {
        DSPGraph::DelayBox::setDelayFrames(v6, v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 576))(v6);
      }
      else if (v8)
      {
        if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v1 + 40))(v1) + 120)
                       + 8) == 1718773105)
        {
          std::string::basic_string[abi:ne180100]<0>(&v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v36, "insertLatencyDelayBoxes");
          std::string::basic_string[abi:ne180100]<0>(&v35, "Latency Boxes cannot be inserted at frequency-domain wires");
          DSPGraph::ThrowException(1869640255, (__int128 *)&v37, 772, (__int128 *)&v36, (__int128 *)&v35);
        }
        v9 = operator new();
        v10 = *(_DWORD *)(v1 + 28);
        DSPGraph::Box::Box((DSPGraph::Box *)v9, 1u, 1u);
        *(_QWORD *)v9 = &off_1E2912D80;
        *(_QWORD *)(v9 + 776) = 0;
        *(_BYTE *)(v9 + 784) = 0;
        *(_DWORD *)(v9 + 792) = v10;
        *(_DWORD *)(v9 + 796) = v10;
        *(_OWORD *)(v9 + 800) = 0u;
        v11 = (char *)v5;
        if (*((char *)this + 55) < 0)
          v11 = *v5;
        std::string::basic_string[abi:ne180100]<0>(&v36, v11);
        v12 = std::string::append(&v36, "-latency-delay-", 0xFuLL);
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        v37.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v35, *(_DWORD *)(v1 + 24));
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v35;
        else
          v14 = (std::string *)v35.__r_.__value_.__r.__words[0];
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        else
          size = v35.__r_.__value_.__l.__size_;
        v16 = std::string::append(&v37, (const std::string::value_type *)v14, size);
        __p = *v16;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        v17 = *((_QWORD *)this + 1);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v37, (char *)p_p);
        DSPGraph::Graph::addBox(v17, v9, &v37, 0, 0);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        if (((*(_QWORD *)(v9 + 72) - *(_QWORD *)(v9 + 64)) & 0x1FFFFFFFE0) != 0x20
          || ((*(_QWORD *)(v9 + 96) - *(_QWORD *)(v9 + 88)) & 0x1FFFFFFFE0) != 0x20)
        {
          std::string::basic_string[abi:ne180100]<0>(&v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v36, "splice");
          std::string::basic_string[abi:ne180100]<0>(&v35, "splice only works for 1 in, 1 out");
          DSPGraph::ThrowException(1953460257, (__int128 *)&v37, 242, (__int128 *)&v36, (__int128 *)&v35);
        }
        v19 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v1 + 40))(v1);
        v20 = *(_QWORD *)(v9 + 64);
        if (*(_QWORD *)(v9 + 72) == v20)
        {
          std::string::basic_string[abi:ne180100]<0>(&v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v36, "in");
          v32 = (_QWORD *)(v9 + 32);
          if (*(char *)(v9 + 55) < 0)
            v32 = (_QWORD *)*v32;
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v35, v32, (uint64_t)(*(_QWORD *)(v9 + 72) - *(_QWORD *)(v9 + 64)) >> 5, 0);
          DSPGraph::ThrowException(1919837985, (__int128 *)&v37, 1410, (__int128 *)&v36, (__int128 *)&v35);
        }
        v21 = v19;
        v22 = (uint64_t *)(v19 + 16);
        std::__hash_table<DSPGraph::InputPort *,std::hash<DSPGraph::InputPort *>,std::equal_to<DSPGraph::InputPort *>,std::allocator<DSPGraph::InputPort *>>::__emplace_unique_key_args<DSPGraph::InputPort *,DSPGraph::InputPort * const&>((float *)(v19 + 16), *(_QWORD *)(v9 + 64), *(_QWORD *)(v9 + 64));
        *(_QWORD *)(v20 + 16) = v21;
        std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>(v22, v1);
        *(_QWORD *)(v1 + 16) = 0;
        v23 = *(_QWORD *)(v9 + 88);
        if (*(_QWORD *)(v9 + 96) == v23)
        {
          std::string::basic_string[abi:ne180100]<0>(&v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v36, "out");
          v31 = (_QWORD *)(v9 + 32);
          if (*(char *)(v9 + 55) < 0)
            v31 = (_QWORD *)*v31;
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v35, v31, (uint64_t)(*(_QWORD *)(v9 + 96) - *(_QWORD *)(v9 + 88)) >> 5, 0);
          DSPGraph::ThrowException(1919837985, (__int128 *)&v37, 1418, (__int128 *)&v36, (__int128 *)&v35);
        }
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
        if (!v24)
        {
          v25 = (DSPGraph::Wire *)operator new();
          v24 = (uint64_t)v25;
          v26 = *(DSPGraph::OutputPort **)(v9 + 88);
          if (*(DSPGraph::OutputPort **)(v9 + 96) == v26)
          {
            std::string::basic_string[abi:ne180100]<0>(&v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
            std::string::basic_string[abi:ne180100]<0>(&v36, "out");
            v33 = (_QWORD *)(v9 + 32);
            if (*(char *)(v9 + 55) < 0)
              v33 = (_QWORD *)*v33;
            DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v35, v33, (uint64_t)(*(_QWORD *)(v9 + 96) - *(_QWORD *)(v9 + 88)) >> 5, 0);
            DSPGraph::ThrowException(1919837985, (__int128 *)&v37, 1418, (__int128 *)&v36, (__int128 *)&v35);
          }
          DSPGraph::Wire::Wire(v25, v26);
          std::__hash_table<DSPGraph::Wire *,std::hash<DSPGraph::Wire *>,std::equal_to<DSPGraph::Wire *>,std::allocator<DSPGraph::Wire *>>::__emplace_unique_key_args<DSPGraph::Wire *,DSPGraph::Wire * const&>((float *)(*(_QWORD *)(v9 + 8) + 48), v24, v24);
        }
        std::__hash_table<DSPGraph::InputPort *,std::hash<DSPGraph::InputPort *>,std::equal_to<DSPGraph::InputPort *>,std::allocator<DSPGraph::InputPort *>>::__emplace_unique_key_args<DSPGraph::InputPort *,DSPGraph::InputPort * const&>((float *)(v24 + 16), v1, v1);
        *(_QWORD *)(v1 + 16) = v24;
        *(_BYTE *)(v24 + 64) = *(_BYTE *)(v21 + 64);
        v27 = *(__int128 **)(v21 + 120);
        if (v27 == (__int128 *)(v21 + 72))
        {
          v28 = *v27;
          v29 = v27[1];
          v30 = *(__int128 *)((char *)v27 + 28);
          v27 = (__int128 *)(v24 + 72);
          *(_OWORD *)(v24 + 100) = v30;
          *(_OWORD *)(v24 + 88) = v29;
          *(_OWORD *)(v24 + 72) = v28;
        }
        *(_QWORD *)(v24 + 120) = v27;
        DSPGraph::IsoGroup::addBefore(*((DSPGraph::IsoGroup **)this + 2), (DSPGraph::Box *)v9, this);
        (*(void (**)(unint64_t))(*(_QWORD *)v9 + 576))(v9);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void sub_18F065604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  char v38;

  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  MEMORY[0x193FFE460](v37, 0x10A1C40B6F5AC58);
  if (v38 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

void DSPGraph::Box::calculateLatencyDelays(DSPGraph::Box *this)
{
  unint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  DSPGraph::Box *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  _QWORD *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (((*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) & 0x1FFFFFFFC0) != 0)
  {
    v2 = DSPGraph::Box::upstreamLatencyInTicks(this);
    v3 = (_DWORD *)*((_QWORD *)this + 8);
    v4 = (_DWORD *)*((_QWORD *)this + 9);
    if (v3 != v4)
    {
      v5 = v2;
      do
      {
        v3[7] = 0;
        v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 40))(v3);
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 8) + 8) + 392))(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 8)) & 1) == 0)
        {
          v7 = *(DSPGraph::Box **)(*(_QWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 40))(v3) + 8)
                                 + 8);
          v8 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)v7 + 72))(v7);
          v9 = DSPGraph::Box::upstreamLatencyInTicks(v7);
          if (v5 <= v9 + v8)
          {
            if (v3[7])
            {
LABEL_9:
              if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 40))(v3) + 120) + 8) == 1718773105)
              {
                if (DSPGraph::getLog(void)::onceToken != -1)
                  dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_9307);
                v11 = DSPGraph::getLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
                {
                  v12 = v3[7];
                  v13 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 40))(v3) + 8)
                                  + 8);
                  v14 = (_QWORD *)(v13 + 32);
                  if (*(char *)(v13 + 55) < 0)
                    v14 = (_QWORD *)*v14;
                  v15 = (char *)this + 32;
                  if (*((char *)this + 55) < 0)
                    v15 = (char *)*((_QWORD *)this + 4);
                  *(_DWORD *)buf = 67109634;
                  v17 = v12;
                  v18 = 2080;
                  v19 = v14;
                  v20 = 2080;
                  v21 = v15;
                  _os_log_debug_impl(&dword_18EE07000, v11, OS_LOG_TYPE_DEBUG, "Latency compensation of %u samples required at frequency-domain wire : %s -> %s", buf, 0x1Cu);
                }
              }
            }
          }
          else
          {
            v10 = (v5 - (v9 + v8))
                * **(double **)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 40))(v3) + 120)
                / *(_QWORD *)(*((_QWORD *)this + 1) + 696);
            v3[7] = v10;
            if ((_DWORD)v10)
              goto LABEL_9;
          }
        }
        v3 += 8;
      }
      while (v3 != v4);
    }
  }
}

void DSPGraph::Box::getFormatFromUnit(DSPGraph::Box *this)
{
  const char *v2;
  size_t v3;
  std::string *v4;
  std::string v5;
  std::string v6;
  __int128 v7;
  __int128 v8;

  std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v7, "getFormatFromUnit");
  std::string::basic_string[abi:ne180100]<0>(&v5, "Box::getFormatFromUnit ");
  v2 = (const char *)(*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 16))(this);
  v3 = strlen(v2);
  v4 = std::string::append(&v5, v2, v3);
  v6 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  DSPGraph::ThrowException(1869640255, &v8, 857, &v7, (__int128 *)&v6);
}

void sub_18F065A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 17) < 0)
    operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::writeDotAttributes(DSPGraph::Box *a1, _QWORD *a2)
{
  _QWORD *v4;
  void *p_p;
  uint64_t v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *__p;
  uint64_t v15;
  unsigned __int8 v16;

  v4 = (_QWORD *)((char *)a1 + 32);
  if (*((char *)a1 + 55) < 0)
    v4 = (_QWORD *)*v4;
  DSPGraph::strprintf((DSPGraph *)"B%qu [shape=box, label=\"%s\\n", &__p, *((_QWORD *)a1 + 7), v4);
  if ((v16 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v16 & 0x80u) == 0)
    v6 = v16;
  else
    v6 = v15;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)p_p, v6);
  if ((char)v16 < 0)
    operator delete(__p);
  (*(void (**)(DSPGraph::Box *, _QWORD *, _QWORD))(*(_QWORD *)a1 + 512))(a1, a2, 0);
  v7 = (double)(unint64_t)(*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)a1 + 72))(a1)
     / (double)*(unint64_t *)(*((_QWORD *)a1 + 1) + 696);
  v8 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)a1 + 72))(a1);
  v9 = DSPGraph::Box::upstreamLatencyInTicks(a1);
  DSPGraph::strprintf((DSPGraph *)"latency %f (%f)", &__p, *(_QWORD *)&v7, (double)(v9 + v8) / (double)*(unint64_t *)(*((_QWORD *)a1 + 1) + 696));
  if ((v16 & 0x80u) == 0)
    v10 = &__p;
  else
    v10 = __p;
  if ((v16 & 0x80u) == 0)
    v11 = v16;
  else
    v11 = v15;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v10, v11);
  if ((char)v16 < 0)
    operator delete(__p);
  DSPGraph::strprintf((DSPGraph *)"\"];\n", &__p);
  if ((v16 & 0x80u) == 0)
    v12 = &__p;
  else
    v12 = __p;
  if ((v16 & 0x80u) == 0)
    v13 = v16;
  else
    v13 = v15;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v12, v13);
  if ((char)v16 < 0)
    operator delete(__p);
}

void sub_18F065C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *DSPGraph::Box::writeDotEdges(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  __int128 v17;
  uint64_t v18;

  v2 = result[11];
  v13 = result[12];
  if (v2 != v13)
  {
    v4 = result;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
      v5 = (_QWORD *)result[4];
      if (v5)
      {
        v6 = result;
        do
        {
          DSPGraph::strprintf((DSPGraph *)"B%qu -> B%qu", __p, v4[7], *(_QWORD *)(*(_QWORD *)(v5[2] + 8) + 56));
          if ((SBYTE7(v17) & 0x80u) == 0)
            v7 = __p;
          else
            v7 = (void **)__p[0];
          if ((SBYTE7(v17) & 0x80u) == 0)
            v8 = BYTE7(v17);
          else
            v8 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v7, v8);
          if (SBYTE7(v17) < 0)
            operator delete(__p[0]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [label=\"", 9);
          v9 = v6[15];
          *(_OWORD *)__p = *(_OWORD *)v9;
          v17 = *(_OWORD *)(v9 + 16);
          v18 = *(_QWORD *)(v9 + 32);
          CA::StreamDescription::AsString((CA::StreamDescription *)v14, __p, *(double *)&v17, v10);
          if ((v15 & 0x80u) == 0)
            v11 = v14;
          else
            v11 = (void **)v14[0];
          if ((v15 & 0x80u) == 0)
            v12 = v15;
          else
            v12 = (uint64_t)v14[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v11, v12);
          if ((char)v15 < 0)
            operator delete(v14[0]);
          result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\"];\n", 4);
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      v2 += 32;
    }
    while (v2 != v13);
  }
  return result;
}

void sub_18F065E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::decompileBox(uint64_t a1, _QWORD *a2, char a3)
{
  char *v5;
  std::string *v6;
  void *p_p;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  std::string *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string::size_type size;
  std::string v25;
  void *v26[2];
  char v27;
  void *__p;
  uint64_t v29;
  unsigned __int8 v30;
  char v31;
  std::string v32;
  std::string v33;

  if ((a3 & 1) == 0)
  {
    v5 = (char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v5 = *(char **)v5;
    std::string::basic_string[abi:ne180100]<0>(&v32, v5);
    DSPGraph::asDecompileString((uint64_t)&v32, &v33);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v33;
    else
      v6 = (std::string *)v33.__r_.__value_.__r.__words[0];
    DSPGraph::strprintf((DSPGraph *)"box %s ", &__p, v6);
    if ((v30 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v30 & 0x80u) == 0)
      v8 = v30;
    else
      v8 = v29;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)p_p, v8);
    if ((char)v30 < 0)
      operator delete(__p);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&__p, a1);
    DSPGraph::printACD(a2, (unsigned int *)&__p, 0);
    DSPGraph::strprintf((DSPGraph *)" %u %u\n", &__p, (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, (*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5);
    if ((v30 & 0x80u) == 0)
      v9 = &__p;
    else
      v9 = __p;
    if ((v30 & 0x80u) == 0)
      v10 = v30;
    else
      v10 = v29;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v9, v10);
LABEL_74:
    if ((char)v30 < 0)
      operator delete(__p);
    return;
  }
  v11 = (char *)(a1 + 32);
  v12 = (char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v12 = *(char **)v11;
  v13 = *(_QWORD *)(a1 + 56);
  std::string::basic_string[abi:ne180100]<0>(&v32, v12);
  DSPGraph::asDecompileString((uint64_t)&v32, &v33);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v33;
  else
    v14 = (std::string *)v33.__r_.__value_.__r.__words[0];
  DSPGraph::strprintf((DSPGraph *)"box %qu %s ", &__p, v13, v14);
  if ((v30 & 0x80u) == 0)
    v15 = &__p;
  else
    v15 = __p;
  if ((v30 & 0x80u) == 0)
    v16 = v30;
  else
    v16 = v29;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v15, v16);
  if ((char)v30 < 0)
    operator delete(__p);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&__p, a1);
  DSPGraph::printACD(a2, (unsigned int *)&__p, 0);
  DSPGraph::strprintf((DSPGraph *)" %u %u\n", &__p, (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, (*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5);
  if ((v30 & 0x80u) == 0)
    v17 = &__p;
  else
    v17 = __p;
  if ((v30 & 0x80u) == 0)
    v18 = v30;
  else
    v18 = v29;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v17, v18);
  if ((char)v30 < 0)
    operator delete(__p);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 368))(&__p, a1);
  if (v31)
  {
    if (*(char *)(a1 + 55) < 0)
      v11 = *(char **)v11;
    std::string::basic_string[abi:ne180100]<0>(v26, v11);
    DSPGraph::asDecompileString((uint64_t)v26, &v32);
    v19 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
    v20 = v32.__r_.__value_.__r.__words[0];
    DSPGraph::asDecompileString((uint64_t)&__p, &v25);
    v21 = &v32;
    if (v19 < 0)
      v21 = (std::string *)v20;
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v25;
    else
      v22 = (std::string *)v25.__r_.__value_.__r.__words[0];
    DSPGraph::strprintf((DSPGraph *)"componentName %s %s\n", &v33, v21, v22);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v33;
    else
      v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    else
      size = v33.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v23, size);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (v27 < 0)
      operator delete(v26[0]);
    if (v31)
      goto LABEL_74;
  }
}

void sub_18F0661D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));
  if (a16 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a22 < 0)
    operator delete(a17);
  if (a29)
  {
    if (a28 < 0)
      operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::decompileWires(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  char **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *p_p;
  uint64_t v12;
  char *v13;
  std::string *v14;
  void *v15;
  uint64_t v16;
  char *v17;
  std::string *v18;
  char *v19;
  std::string *v20;
  void *v21;
  uint64_t v22;
  std::string *v23;
  void *v24;
  std::string *v25;
  std::string::size_type size;
  unsigned int *v27;
  void *v28[2];
  char v29;
  std::string v30;
  void *__p;
  uint64_t v32;
  unsigned __int8 v33;

  v2 = *(unsigned int **)(a1 + 88);
  v27 = *(unsigned int **)(a1 + 96);
  if (v2 != v27)
  {
    v5 = (char **)(a1 + 32);
    do
    {
      v6 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 40))(v2);
      v7 = *(_QWORD **)(v6 + 32);
      if (v7)
      {
        v8 = v6;
        do
        {
          v9 = v7[2];
          v10 = *(_QWORD *)(v9 + 8);
          DSPGraph::strprintf((DSPGraph *)"wire ", &__p);
          if ((v33 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          if ((v33 & 0x80u) == 0)
            v12 = v33;
          else
            v12 = v32;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)p_p, v12);
          if ((char)v33 < 0)
            operator delete(__p);
          if (v2[6])
          {
            v13 = (char *)v5;
            if (*(char *)(a1 + 55) < 0)
              v13 = *v5;
            std::string::basic_string[abi:ne180100]<0>(v28, v13);
            DSPGraph::asDecompileString((uint64_t)v28, &v30);
            if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v14 = &v30;
            else
              v14 = (std::string *)v30.__r_.__value_.__r.__words[0];
            DSPGraph::strprintf((DSPGraph *)"(%s %u) ", &__p, v14, v2[6]);
            if ((v33 & 0x80u) == 0)
              v15 = &__p;
            else
              v15 = __p;
            if ((v33 & 0x80u) == 0)
              v16 = v33;
            else
              v16 = v32;
          }
          else
          {
            v17 = (char *)v5;
            if (*(char *)(a1 + 55) < 0)
              v17 = *v5;
            std::string::basic_string[abi:ne180100]<0>(v28, v17);
            DSPGraph::asDecompileString((uint64_t)v28, &v30);
            if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = &v30;
            else
              v18 = (std::string *)v30.__r_.__value_.__r.__words[0];
            DSPGraph::strprintf((DSPGraph *)"%s ", &__p, v18);
            if ((v33 & 0x80u) == 0)
              v15 = &__p;
            else
              v15 = __p;
            if ((v33 & 0x80u) == 0)
              v16 = v33;
            else
              v16 = v32;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v15, v16);
          if ((char)v33 < 0)
            operator delete(__p);
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v30.__r_.__value_.__l.__data_);
          if (v29 < 0)
            operator delete(v28[0]);
          v19 = (char *)(v10 + 32);
          if (*(_DWORD *)(v9 + 24))
          {
            if (*(char *)(v10 + 55) < 0)
              v19 = *(char **)v19;
            std::string::basic_string[abi:ne180100]<0>(v28, v19);
            DSPGraph::asDecompileString((uint64_t)v28, &v30);
            if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v20 = &v30;
            else
              v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
            DSPGraph::strprintf((DSPGraph *)"(%s %u) ", &__p, v20, *(unsigned int *)(v9 + 24));
            if ((v33 & 0x80u) == 0)
              v21 = &__p;
            else
              v21 = __p;
            if ((v33 & 0x80u) == 0)
              v22 = v33;
            else
              v22 = v32;
          }
          else
          {
            if (*(char *)(v10 + 55) < 0)
              v19 = *(char **)v19;
            std::string::basic_string[abi:ne180100]<0>(v28, v19);
            DSPGraph::asDecompileString((uint64_t)v28, &v30);
            if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v23 = &v30;
            else
              v23 = (std::string *)v30.__r_.__value_.__r.__words[0];
            DSPGraph::strprintf((DSPGraph *)"%s ", &__p, v23);
            if ((v33 & 0x80u) == 0)
              v21 = &__p;
            else
              v21 = __p;
            if ((v33 & 0x80u) == 0)
              v22 = v33;
            else
              v22 = v32;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v21, v22);
          if ((char)v33 < 0)
            operator delete(__p);
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v30.__r_.__value_.__l.__data_);
          if (v29 < 0)
            operator delete(v28[0]);
          DSPGraph::decompileFormat(*(DSPGraph **)(v8 + 120), (const AudioStreamBasicDescription *)*(unsigned int *)(*(_QWORD *)(v8 + 120) + 40), (uint64_t)&__p);
          if ((v33 & 0x80u) == 0)
            v24 = &__p;
          else
            v24 = __p;
          DSPGraph::strprintf((DSPGraph *)"%s\n", &v30, v24);
          if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &v30;
          else
            v25 = (std::string *)v30.__r_.__value_.__r.__words[0];
          if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
          else
            size = v30.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v25, size);
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v30.__r_.__value_.__l.__data_);
          if ((char)v33 < 0)
            operator delete(__p);
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      v2 += 8;
    }
    while (v2 != v27);
  }
}

void sub_18F066620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::decompileParameterTaps(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char **v6;
  char *v7;
  std::string *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *p_p;
  const char *v14;
  void **v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  std::string __p;
  void *v20[2];
  char v21;
  std::string v22;
  void *v23[2];
  unsigned __int8 v24;

  v2 = *(_QWORD *)(a1 + 152);
  v3 = *(_QWORD *)(a1 + 160);
  if (v2 != v3)
  {
    v6 = (char **)(a1 + 32);
    do
    {
      v7 = (char *)(*(_QWORD *)v2 + 32);
      if (*(char *)(*(_QWORD *)v2 + 55) < 0)
        v7 = *(char **)v7;
      std::string::basic_string[abi:ne180100]<0>(v20, v7);
      DSPGraph::asDecompileString((uint64_t)v20, &v22);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v22;
      else
        v8 = (std::string *)v22.__r_.__value_.__r.__words[0];
      v9 = (char *)v6;
      if (*(char *)(a1 + 55) < 0)
        v9 = *v6;
      v10 = *(unsigned int *)(v2 + 8);
      v11 = *(unsigned int *)(v2 + 12);
      v12 = *(unsigned int *)(v2 + 16);
      std::string::basic_string[abi:ne180100]<0>(v17, v9);
      DSPGraph::asDecompileString((uint64_t)v17, &__p);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v14 = "true";
      if (!*(_BYTE *)(v2 + 36))
        v14 = "";
      DSPGraph::strprintf((DSPGraph *)"wireParam (%s %u %u %u) (%s %u %u %u) %s\n", v23, v8, v10, v11, v12, p_p, *(unsigned int *)(v2 + 24), *(unsigned int *)(v2 + 28), *(unsigned int *)(v2 + 32), v14);
      if ((v24 & 0x80u) == 0)
        v15 = v23;
      else
        v15 = (void **)v23[0];
      if ((v24 & 0x80u) == 0)
        v16 = v24;
      else
        v16 = (uint64_t)v23[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v15, v16);
      if ((char)v24 < 0)
        operator delete(v23[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v18 < 0)
        operator delete(v17[0]);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (v21 < 0)
        operator delete(v20[0]);
      v2 += 40;
    }
    while (v2 != v3);
  }
}

void sub_18F066860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  if (a30 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v36 - 113) < 0)
    operator delete(*(void **)(v36 - 136));
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::decompilePropertyTaps(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char **v6;
  char *v7;
  std::string *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *p_p;
  const char *v14;
  void **v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  std::string __p;
  void *v20[2];
  char v21;
  std::string v22;
  void *v23[2];
  unsigned __int8 v24;

  v2 = *(_QWORD *)(a1 + 176);
  v3 = *(_QWORD *)(a1 + 184);
  if (v2 != v3)
  {
    v6 = (char **)(a1 + 32);
    do
    {
      v7 = (char *)(*(_QWORD *)v2 + 32);
      if (*(char *)(*(_QWORD *)v2 + 55) < 0)
        v7 = *(char **)v7;
      std::string::basic_string[abi:ne180100]<0>(v20, v7);
      DSPGraph::asDecompileString((uint64_t)v20, &v22);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v22;
      else
        v8 = (std::string *)v22.__r_.__value_.__r.__words[0];
      v9 = (char *)v6;
      if (*(char *)(a1 + 55) < 0)
        v9 = *v6;
      v10 = *(unsigned int *)(v2 + 8);
      v11 = *(unsigned int *)(v2 + 12);
      v12 = *(unsigned int *)(v2 + 16);
      std::string::basic_string[abi:ne180100]<0>(v17, v9);
      DSPGraph::asDecompileString((uint64_t)v17, &__p);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v14 = "true";
      if (!*(_BYTE *)(v2 + 36))
        v14 = "";
      DSPGraph::strprintf((DSPGraph *)"wireProperty (%s %u %u %u) (%s %u %u %u) %s\n", v23, v8, v10, v11, v12, p_p, *(unsigned int *)(v2 + 24), *(unsigned int *)(v2 + 28), *(unsigned int *)(v2 + 32), v14);
      if ((v24 & 0x80u) == 0)
        v15 = v23;
      else
        v15 = (void **)v23[0];
      if ((v24 & 0x80u) == 0)
        v16 = v24;
      else
        v16 = (uint64_t)v23[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v15, v16);
      if ((char)v24 < 0)
        operator delete(v23[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v18 < 0)
        operator delete(v17[0]);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (v21 < 0)
        operator delete(v20[0]);
      v2 += 64;
    }
    while (v2 != v3);
  }
}

void sub_18F066A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  if (a30 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v36 - 113) < 0)
    operator delete(*(void **)(v36 - 136));
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::decompileAntecedents(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  char **v5;
  uint64_t v6;
  char *v7;
  std::string *v8;
  char *v9;
  std::string *p_p;
  void **v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string __p;
  void *v16[2];
  char v17;
  std::string v18;
  void *v19[2];
  unsigned __int8 v20;

  v2 = *(_QWORD **)(a1 + 128);
  if (v2)
  {
    v5 = (char **)(a1 + 32);
    do
    {
      v6 = v2[2];
      v7 = (char *)(v6 + 32);
      if (*(char *)(v6 + 55) < 0)
        v7 = *(char **)v7;
      std::string::basic_string[abi:ne180100]<0>(v16, v7);
      DSPGraph::asDecompileString((uint64_t)v16, &v18);
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v18;
      else
        v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
      v9 = (char *)v5;
      if (*(char *)(a1 + 55) < 0)
        v9 = *v5;
      std::string::basic_string[abi:ne180100]<0>(v13, v9);
      DSPGraph::asDecompileString((uint64_t)v13, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      DSPGraph::strprintf((DSPGraph *)"order %s %s\n", v19, v8, p_p);
      if ((v20 & 0x80u) == 0)
        v11 = v19;
      else
        v11 = (void **)v19[0];
      if ((v20 & 0x80u) == 0)
        v12 = v20;
      else
        v12 = (uint64_t)v19[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v11, v12);
      if ((char)v20 < 0)
        operator delete(v19[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v14 < 0)
        operator delete(v13[0]);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      if (v17 < 0)
        operator delete(v16[0]);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
}

void sub_18F066C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 81) < 0)
    operator delete(*(void **)(v35 - 104));
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a35 < 0)
    operator delete(a30);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

_QWORD *DSPGraph::Box::decompileAnalyzers(_QWORD *result, _QWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  char **v8;
  void **v9;
  uint64_t v10;
  char *v11;
  std::string *v12;
  void **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  void *v23[2];
  char v24;
  std::string v25;
  void *__p[2];
  int64_t v27;

  v4 = (_QWORD *)result[39];
  v3 = (_QWORD *)result[40];
  if (v4 != v3)
  {
    v7 = result;
    v8 = (char **)(result + 4);
    do
    {
      if ((a3 & 1) != 0)
      {
        DSPGraph::strprintf((DSPGraph *)"analysis %qu", __p, *(_QWORD *)(*v4 + 88));
        if (v27 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        if (v27 >= 0)
          v16 = HIBYTE(v27);
        else
          v16 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v15, v16);
        if (SHIBYTE(v27) < 0)
          operator delete(__p[0]);
        std::operator+<char>();
        v17 = std::string::append(&v25, " ", 1uLL);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v27 = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if (v27 >= 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        if (v27 >= 0)
          v20 = HIBYTE(v27);
        else
          v20 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v19, v20);
        if (SHIBYTE(v27) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
        DSPGraph::print4cc(a2, *(_DWORD *)(*v4 + 24));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v4 + 40))(*v4))
          DSPGraph::printACD(a2, (unsigned int *)(*v4 + 32), 0);
        v21 = (char *)v8;
        if (*((char *)v7 + 55) < 0)
          v21 = *v8;
        std::string::basic_string[abi:ne180100]<0>(v23, v21);
        DSPGraph::asDecompileString((uint64_t)v23, &v25);
        if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v25;
        else
          v22 = (std::string *)v25.__r_.__value_.__r.__words[0];
        DSPGraph::strprintf((DSPGraph *)"(%s %u)", __p, v22, *(unsigned int *)(*v4 + 80));
        if (v27 >= 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        if (v27 >= 0)
          v14 = HIBYTE(v27);
        else
          v14 = (uint64_t)__p[1];
      }
      else
      {
        DSPGraph::strprintf((DSPGraph *)"analysis ", __p);
        if (v27 >= 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        if (v27 >= 0)
          v10 = HIBYTE(v27);
        else
          v10 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v9, v10);
        if (SHIBYTE(v27) < 0)
          operator delete(__p[0]);
        DSPGraph::print4cc(a2, *(_DWORD *)(*v4 + 24));
        v11 = (char *)v8;
        if (*((char *)v7 + 55) < 0)
          v11 = *v8;
        std::string::basic_string[abi:ne180100]<0>(v23, v11);
        DSPGraph::asDecompileString((uint64_t)v23, &v25);
        if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &v25;
        else
          v12 = (std::string *)v25.__r_.__value_.__r.__words[0];
        DSPGraph::strprintf((DSPGraph *)" (%s %u)", __p, v12, *(unsigned int *)(*v4 + 80));
        if (v27 >= 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        if (v27 >= 0)
          v14 = HIBYTE(v27);
        else
          v14 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v13, v14);
      if (SHIBYTE(v27) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (v24 < 0)
        operator delete(v23[0]);
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
      ++v4;
    }
    while (v4 != v3);
  }
  return result;
}

void sub_18F066FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DSPGraph::PropertyTap::initialize(DSPGraph::PropertyTap *this)
{
  unsigned int v2;
  char v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)this + 296))(*(_QWORD *)this, *((unsigned int *)this + 2), *((unsigned int *)this + 3), *((unsigned int *)this + 4));
  if (!v3)
  {
    v12 = v2;
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v13, "getPropertyInfo failed");
    DSPGraph::ThrowException(v12, &v15, 809, &v14, &v13);
  }
  v4 = (_BYTE *)*((_QWORD *)this + 5);
  if (*((_QWORD *)this + 6) - (_QWORD)v4 != v2)
  {
    *((_QWORD *)this + 6) = v4;
    v5 = v2;
    if (v2)
    {
      v6 = *((_QWORD *)this + 7) - (_QWORD)v4;
      if (v6 >= v2)
      {
        v11 = &v4[v2];
        do
        {
          *v4++ = 0;
          --v5;
        }
        while (v5);
        *((_QWORD *)this + 6) = v11;
      }
      else
      {
        v7 = 2 * v6;
        if (2 * v6 <= v2)
          v7 = v2;
        if (v6 >= 0x3FFFFFFFFFFFFFFFLL)
          v8 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v8 = v7;
        v9 = operator new(v8);
        v10 = 0;
        do
          v9[v10++] = 0;
        while (v5 != v10);
        *((_QWORD *)this + 5) = v9;
        *((_QWORD *)this + 6) = &v9[v5];
        *((_QWORD *)this + 7) = &v9[v8];
        if (v4)
          operator delete(v4);
      }
    }
  }
}

void sub_18F0671B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

unsigned __int128 *caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::remove(uint64_t a1, int a2)
{
  unsigned __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;

  v4 = (unsigned __int128 *)(a1 + 224);
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal((unsigned __int128 *)(a1 + 224));
  v17 = a2;
  v5 = -1;
  v6 = 40;
  do
  {
    v7 = atomic_load((unint64_t *)(a1 + v6));
    ++v5;
    v6 += 16;
  }
  while (*(_BYTE *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 14) != 2);
  v8 = a1;
  if (v5)
  {
    v8 = a1;
    do
      v8 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(a1, v5--, v8, &v17);
    while (v5);
  }
  v9 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(a1, 0, v8, &v17);
  if (*(_DWORD *)(v10 + 8) == a2)
  {
    v11 = v10;
    v12 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, 0, v9, v10);
    v14 = v13;
    if (!(_DWORD)v13)
      caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, 0, v12, v11);
    if ((v14 & 0xFF00000000) != 0 && v11)
    {
      v16 = a2;
      caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le>(a1, &v16, 0);
    }
  }
  return caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v4);
}

unint64_t caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le>(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v6 = -1;
  v7 = 40;
  do
  {
    do
    {
      ++v6;
      v8 = atomic_load((unint64_t *)(a1 + v7));
      v7 += 16;
    }
    while (v6 < a3);
  }
  while (*(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 14) != 2);
  v9 = a1;
  if (v6 > a3)
  {
    v9 = a1;
    do
      v9 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le &>(a1, v6--, v9, a2);
    while (v6 > a3);
  }
  return caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le &>(a1, a3, v9, a2);
}

caulk::alloc::base_allocator *caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::free_node_chain_now(caulk::alloc::base_allocator *result, unint64_t a2)
{
  unint64_t v2;
  caulk::alloc::base_allocator *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (char *)result + 40;
    do
    {
      v5 = atomic_load((unint64_t *)(v2 + 16));
      v6 = *((_QWORD *)v3 + 4);
      if (*(_BYTE *)(v6 + 32))
      {
        if (!*(_BYTE *)(v2 + 14))
          (*(void (**)(char *, unint64_t))v6)(v4, v2);
      }
      result = caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::deallocate(*((caulk::alloc::base_allocator **)v3 + 2), (unint64_t *)v2, *(_QWORD *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * *(unsigned __int8 *)(v2 + 12) - 8]);
      v2 = v5;
    }
    while (v5);
  }
  return result;
}

caulk::alloc::base_allocator *caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::deallocate(caulk::alloc::base_allocator *result, unint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  unsigned __int128 *v4;
  unsigned __int128 v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int128 v8;
  int v9;
  unsigned __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v3 = 0;
  while (*(_QWORD *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * v3] < a3)
  {
    if (++v3 == 10)
      caulk::alloc::base_allocator::bad_dealloc(result);
  }
  v4 = (unsigned __int128 *)((char *)result + 32 * v3 + 64);
  do
    v5 = __ldaxp(v4);
  while (__stlxp(v5, v4));
  atomic_store(v5, a2);
  do
  {
    while (1)
    {
      v8 = __ldaxp(v4);
      v7 = *((_QWORD *)&v8 + 1);
      v6 = v8;
      v9 = (_QWORD)v8 != (_QWORD)v5;
      if (*((_QWORD *)&v8 + 1) != *((_QWORD *)&v5 + 1))
        ++v9;
      if (!v9)
        break;
      if (!__stlxp(v8, v4))
        goto LABEL_14;
    }
  }
  while (__stlxp(__PAIR128__(*((_QWORD *)&v5 + 1) + 1, (unint64_t)a2), v4));
LABEL_14:
  if ((_QWORD)v8 != (_QWORD)v5 || *((_QWORD *)&v8 + 1) != *((_QWORD *)&v5 + 1))
  {
    do
    {
      atomic_store(v6, a2);
      do
      {
        while (1)
        {
          v11 = __ldaxp(v4);
          v12 = (_QWORD)v11 != v6;
          if (*((_QWORD *)&v11 + 1) != v7)
            ++v12;
          if (!v12)
            break;
          if (!__stlxp(v11, v4))
            goto LABEL_25;
        }
      }
      while (__stlxp(__PAIR128__(v7 + 1, (unint64_t)a2), v4));
LABEL_25:
      v13 = *((_QWORD *)&v11 + 1) ^ v7;
      v14 = v11 ^ v6;
      v7 = v11 >> 64;
      v6 = v11;
    }
    while (v14 | v13);
  }
  v15 = (unint64_t *)((char *)result + 32 * v3 + 80);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  return result;
}

unint64_t caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le &>(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v10;
  int v11;
  unint64_t v12;

  v4 = a3;
  v5 = atomic_load((unint64_t *)(a3 + 16 * a2 + 24));
  v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  if (*a4 >= *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFFCLL) + 8))
  {
    do
    {
      v10 = atomic_load((unint64_t *)(v6 + 24));
      if ((v10 & 1) != 0)
      {
        v4 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, v4, v6);
        if (!v11)
          caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, v4, v6);
      }
      else
      {
        v4 = v6;
      }
      v12 = atomic_load((unint64_t *)(v4 + 16 * a2 + 24));
      v6 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (*a4 >= *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 8));
  }
  return v4;
}

unint64_t caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  int v18;

  v8 = a4 | 2;
  do
  {
    v9 = (unint64_t *)(a3 + 16 * a2 + 24);
    v10 = atomic_load(v9);
    if (v10 == v8)
      break;
    v11 = __ldaxr(v9);
    if (v11 == a4)
    {
      if (!__stlxr(v8, v9))
        return a3;
    }
    else
    {
      __clrex();
    }
    if (v11 == v8)
      break;
    v12 = atomic_load(v9);
    if ((v12 & 1) != 0)
    {
      do
      {
        a3 = atomic_load((unint64_t *)(a3 + 16 * a2 + 32));
        v13 = atomic_load((unint64_t *)(a3 + 16 * a2 + 24));
      }
      while ((v13 & 1) != 0);
    }
    v14 = *(_DWORD *)(a4 + 8);
    while (1)
    {
      v15 = atomic_load((unint64_t *)(a3 + 16 * a2 + 24));
      v16 = v15 & 0xFFFFFFFFFFFFFFFCLL;
      if (v14 <= *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFFCLL) + 8))
        break;
      v17 = atomic_load((unint64_t *)(v16 + 24));
      if ((v17 & 1) != 0)
      {
        a3 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, a3, v16);
        if (!v18)
          caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, a3, v16);
      }
      else
      {
        a3 = v16;
      }
    }
  }
  while (v16 == a4);
  return a3;
}

uint64_t caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int128 *v19;
  unsigned __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int128 v23;
  int v24;
  unsigned __int128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v7 = result;
  v8 = a4 + 16 * a2;
  v9 = (unint64_t *)(v8 + 24);
  atomic_store(a3, (unint64_t *)(v8 + 32));
  while (1)
  {
    v10 = atomic_load(v9);
    if ((v10 & 1) != 0)
      break;
    v11 = atomic_load(v9);
    v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = __ldaxr(v9);
    if (v13 == v12)
    {
      __stlxr(v12 | 1, v9);
      if ((v13 & 2) != 0)
LABEL_7:
        result = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged(v7, a2, a4, v13 & 0xFFFFFFFFFFFFFFFCLL);
    }
    else
    {
      __clrex();
      if ((v13 & 2) != 0)
        goto LABEL_7;
    }
  }
  v14 = atomic_load(v9);
  v15 = (unint64_t *)(a3 + 16 * a2 + 24);
  v16 = __ldaxr(v15);
  if (v16 == (a4 | 2))
  {
    if (!__stlxr(v14 & 0xFFFFFFFFFFFFFFFCLL, v15))
    {
      v17 = (unsigned __int8 *)(a4 + 15);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (v18 == 1)
      {
        v19 = (unsigned __int128 *)(v7 + 224);
        do
          v20 = __ldaxp(v19);
        while (__stlxp(v20, v19));
        atomic_store(v20, (unint64_t *)(a4 + 16));
        do
        {
          while (1)
          {
            v23 = __ldaxp(v19);
            v22 = *((_QWORD *)&v23 + 1);
            v21 = v23;
            v24 = (_QWORD)v23 != (_QWORD)v20;
            if (*((_QWORD *)&v23 + 1) != *((_QWORD *)&v20 + 1))
              ++v24;
            if (!v24)
              break;
            if (!__stlxp(v23, v19))
              goto LABEL_22;
          }
        }
        while (__stlxp(__PAIR128__(DWORD2(v20), a4), v19));
LABEL_22:
        if ((_QWORD)v23 != (_QWORD)v20 || *((_QWORD *)&v23 + 1) != *((_QWORD *)&v20 + 1))
        {
          do
          {
            atomic_store(v21, (unint64_t *)(a4 + 16));
            do
            {
              while (1)
              {
                v26 = __ldaxp(v19);
                v27 = (_QWORD)v26 != v21;
                if (*((_QWORD *)&v26 + 1) != v22)
                  ++v27;
                if (!v27)
                  break;
                if (!__stlxp(v26, v19))
                  goto LABEL_33;
              }
            }
            while (__stlxp(__PAIR128__(v22, a4), v19));
LABEL_33:
            v28 = *((_QWORD *)&v26 + 1) ^ v22;
            v29 = v26 ^ v21;
            v22 = *((_QWORD *)&v26 + 1);
            v21 = v26;
          }
          while (v29 | v28);
        }
      }
    }
  }
  else
  {
    __clrex();
  }
  return result;
}

unint64_t caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v10;
  int v11;
  unint64_t v12;

  v4 = a3;
  v5 = atomic_load((unint64_t *)(a3 + 16 * a2 + 24));
  v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  if (*a4 > *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFFCLL) + 8))
  {
    do
    {
      v10 = atomic_load((unint64_t *)(v6 + 24));
      if ((v10 & 1) != 0)
      {
        v4 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, v4, v6);
        if (!v11)
          caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, v4, v6);
      }
      else
      {
        v4 = v6;
      }
      v12 = atomic_load((unint64_t *)(v4 + 16 * a2 + 24));
      v6 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (*a4 > *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 8));
  }
  return v4;
}

uint64_t DSPGraph::ParameterTap::process(DSPGraph::ParameterTap *this, DSPGraph::Box *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this, *((unsigned int *)this + 2), *((unsigned int *)this + 3), *((unsigned int *)this + 4));
  return (*(uint64_t (**)(DSPGraph::Box *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 80))(a2, *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 8), 0);
}

uint64_t DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::GetCurrentTimeInNanos()
{
  mach_absolute_time();
  return __udivti3();
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_9309()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t DSPGraph::DelayBox::setDelayFrames(uint64_t this, unsigned int a2)
{
  unsigned int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(*(_QWORD *)(this + 8) + 762))
  {
    if (*(_DWORD *)(this + 792) < a2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v4, "setDelayFrames");
      std::string::basic_string[abi:ne180100]<0>(&v3, "delay value exceeds current maximum");
      DSPGraph::ThrowException(1919837985, &v5, 3220, &v4, &v3);
    }
  }
  else
  {
    v2 = *(_DWORD *)(this + 792);
    if (v2 <= a2)
      v2 = a2;
    *(_DWORD *)(this + 792) = v2;
  }
  *(_DWORD *)(this + 796) = a2;
  return this;
}

void sub_18F067ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

double DSPGraph::DelayBox::DelayBox(DSPGraph::DelayBox *this, int a2)
{
  DSPGraph::Box *v3;
  double result;

  v3 = DSPGraph::Box::Box(this, 1u, 1u);
  *(_QWORD *)v3 = &off_1E2912D80;
  *((_QWORD *)v3 + 97) = 0;
  *((_BYTE *)v3 + 784) = 0;
  *((_DWORD *)v3 + 198) = a2;
  *((_DWORD *)v3 + 199) = a2;
  result = 0.0;
  *((_OWORD *)v3 + 50) = 0u;
  return result;
}

{
  DSPGraph::Box *v3;
  double result;

  v3 = DSPGraph::Box::Box(this, 1u, 1u);
  *(_QWORD *)v3 = &off_1E2912D80;
  *((_QWORD *)v3 + 97) = 0;
  *((_BYTE *)v3 + 784) = 0;
  *((_DWORD *)v3 + 198) = a2;
  *((_DWORD *)v3 + 199) = a2;
  result = 0.0;
  *((_OWORD *)v3 + 50) = 0u;
  return result;
}

void DSPGraph::Box::~Box(DSPGraph::Box *this)
{
  DSPGraph::Box *v2;
  uint64_t v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = off_1E2911370;
  std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Box>>::reset[abi:ne180100]((uint64_t *)this + 92, 0);
  std::mutex::~mutex((std::mutex *)((char *)this + 672));
  v2 = (DSPGraph::Box *)*((_QWORD *)this + 83);
  if (v2 == (DSPGraph::Box *)((char *)this + 640))
  {
    v3 = 4;
    v2 = (DSPGraph::Box *)((char *)this + 640);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::clear((uint64_t)this + 336);
  caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::~node_allocator((uint64_t)this + 560);
  v5 = (void **)((char *)this + 312);
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::mutex::~mutex((std::mutex *)((char *)this + 248));
  v5 = (void **)((char *)this + 224);
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 176);
  std::vector<DSPGraph::PropertyTap>::__destroy_vector::operator()[abi:ne180100](&v5);
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = (void **)((char *)this + 88);
  std::vector<DSPGraph::OutputPort>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 64);
  std::vector<DSPGraph::OutputPort>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

uint64_t *std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Box>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::~lf_read_synchronized_write(v2 + 64);
    caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::~lf_read_synchronized_write(v2);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

unsigned __int128 *caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::clear(uint64_t a1)
{
  unsigned __int128 *v2;
  unint64_t i;
  unint64_t v4;
  char v5;

  v2 = (unsigned __int128 *)(a1 + 224);
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal((unsigned __int128 *)(a1 + 224));
  for (i = atomic_load((unint64_t *)(a1 + 24)); ; i = atomic_load((unint64_t *)(v4 + 24)))
  {
    v4 = i & 0xFFFFFFFFFFFFFFFCLL;
    if (a1 + 184 == (i & 0xFFFFFFFFFFFFFFFCLL))
      break;
    if (*(_BYTE *)(v4 + 14) != 2)
    {
      v5 = atomic_load((unint64_t *)(v4 + 24));
      if ((v5 & 1) == 0)
        caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::remove(a1, *(_DWORD *)(v4 + 8));
    }
  }
  return caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v2);
}

uint64_t caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::~node_allocator(uint64_t a1)
{
  unsigned __int128 v2;

  do
    v2 = __ldaxp((unsigned __int128 *)a1);
  while (__stlxp(v2, (unsigned __int128 *)a1));
  if ((_QWORD)v2)
    caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::free_node_chain_now((caulk::alloc::base_allocator *)a1, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 24))(a1 + 40);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 16);
  return a1;
}

void std::vector<DSPGraph::PropertyTap>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 64;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<DSPGraph::OutputPort>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 32;
      v7 = v4 - 32;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 32;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::~lf_read_synchronized_write(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void **)(a1 + 16);
    std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (*(_BYTE *)(a1 + 9))
  {
    v3 = (void **)(a1 + 40);
    std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

void std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = (char *)*((_QWORD *)v4 - 2);
    if (v4 - 40 == v6)
    {
      v6 = v4 - 40;
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_8;
      v7 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_8:
    v4 -= 48;
  }
  while (v4 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

void DSPGraph::DelayBox::~DelayBox(DSPGraph::DelayBox *this)
{
  *(_QWORD *)this = &off_1E2912D80;
  DSPGraph::SimpleABL::free((DSPGraph::DelayBox *)((char *)this + 776));
  DSPGraph::Box::~Box(this);
}

{
  *(_QWORD *)this = &off_1E2912D80;
  DSPGraph::SimpleABL::free((DSPGraph::DelayBox *)((char *)this + 776));
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::DelayBox::ClassName(DSPGraph::DelayBox *this)
{
  return "DelayBox";
}

BOOL DSPGraph::DelayBox::canProcessInPlace(DSPGraph::DelayBox *this)
{
  return *((_DWORD *)this + 198) == 0;
}

unint64_t DSPGraph::DelayBox::selfLatencyInTicks(DSPGraph::DelayBox *this)
{
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v9, "out");
    v7 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v7 = (_QWORD *)*v7;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v8, v7, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v10, 1418, &v9, &v8);
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 696);
  v5 = *((unsigned int *)this + 199);
  return v4 / **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) * v5;
}

void sub_18F068104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::DelayBox::setParameter(DSPGraph::DelayBox *this, int a2, int a3, float a4)
{
  unint64_t v4;
  std::runtime_error *exception;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a3 | a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v7, "");
    DSPGraph::ThrowException(-10878, &v9, 3283, &v8, &v7);
  }
  v4 = llroundf(a4);
  if (HIDWORD(v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "numerical cast overflow: could not retain value in conversion type");
  }
  return DSPGraph::DelayBox::setDelayFrames((uint64_t)this, v4);
}

void sub_18F068200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

float DSPGraph::DelayBox::getParameter(DSPGraph::DelayBox *this, int a2, int a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (a3 | a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v4, "");
    DSPGraph::ThrowException(-10878, &v6, 3296, &v5, &v4);
  }
  return (float)*((unsigned int *)this + 199);
}

void sub_18F0682D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::DelayBox::getParameterList(int a1@<W1>, _QWORD *a2@<X8>)
{
  _DWORD *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    v4 = operator new(4uLL);
    *a2 = v4;
    *v4++ = 0;
    a2[1] = v4;
    a2[2] = v4;
  }
}

__n128 DSPGraph::DelayBox::getParameterInfo@<Q0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  int v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = -10866;
  }
  else
  {
    if (!a2)
    {
      v15 = 0;
      v13 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v14.n128_u64[0] = 5;
      v14.n128_u64[1] = 0x3F80000049742400;
      strlcpy((char *)&v9, "delay samples", 0x34uLL);
      *((_QWORD *)&v13 + 1) = CFSTR("delay samples");
      LODWORD(v15) = v15 | 0xC8000000;
      v6 = v10;
      *(_OWORD *)a3 = v9;
      *(_OWORD *)(a3 + 16) = v6;
      v7 = v12;
      *(_OWORD *)(a3 + 32) = v11;
      *(_OWORD *)(a3 + 48) = v7;
      result = v14;
      *(_OWORD *)(a3 + 64) = v13;
      *(__n128 *)(a3 + 80) = result;
      *(_QWORD *)(a3 + 96) = v15;
      *(_BYTE *)(a3 + 104) = 1;
      return result;
    }
    v5 = -10878;
  }
  *(_DWORD *)a3 = v5;
  *(_BYTE *)(a3 + 104) = 0;
  return result;
}

void sub_18F068450(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

double DSPGraph::DelayBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 4.23899122e175;
  *(_OWORD *)a1 = xmmword_18F1172F0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::DelayBox::getPropertyInfo(DSPGraph::DelayBox *this, int a2, uint64_t a3, int a4)
{
  if (a2 != 64000 || (a4 | a3) != 0)
    return DSPGraph::Box::getPropertyInfo(this, a2, a3);
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 762))
    return 4;
  return 0x100000004;
}

uint64_t DSPGraph::DelayBox::getProperty(DSPGraph::DelayBox *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  uint64_t result;

  if (a2 != 64000 || (a4 | a3) != 0)
    return DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
  if (*a5 != 4)
    return 561211770;
  if (!a6)
    return 4294967246;
  result = 0;
  *(_DWORD *)a6 = *((_DWORD *)this + 198);
  return result;
}

uint64_t DSPGraph::DelayBox::setProperty(DSPGraph::DelayBox *this, int a2, int a3, unsigned int a4, int a5, unsigned int *a6)
{
  uint64_t result;
  unsigned int v9;

  if (a2 != 64000 || (a4 | a3) != 0)
    return DSPGraph::Box::setProperty(this, a2, a3, a4, a5, a6);
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 762))
    return 4294956447;
  if (a5 != 4)
    return 4294956445;
  if (!a6)
    return 4294967246;
  result = 0;
  v9 = *a6;
  *((_DWORD *)this + 198) = *a6;
  if (v9 >= *((_DWORD *)this + 199))
    v9 = *((_DWORD *)this + 199);
  *((_DWORD *)this + 199) = v9;
  return result;
}

uint64_t DSPGraph::DelayBox::isLatencyDelay(DSPGraph::DelayBox *this)
{
  return 1;
}

uint64_t DSPGraph::DelayBox::isFrequencySafe(DSPGraph::DelayBox *this)
{
  return 0;
}

_QWORD *DSPGraph::DelayBox::process(DSPGraph::DelayBox *this, int a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  DSPGraph::SimpleABL *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  DSPGraph::Buffer *v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *result;
  _QWORD *v33;
  _OWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v3 = *((_DWORD *)this + 199);
  v6 = (char *)this + 88;
  v4 = *((_QWORD *)this + 11);
  v5 = *((_QWORD *)v6 + 1);
  if (v3)
  {
    if (v5 == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "out");
      v42 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v42 = (_QWORD *)*v42;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v47, v42, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1418, &v48, &v47);
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v9 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v9)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "in");
      v43 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v43 = (_QWORD *)*v43;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v43, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
    }
    v10 = *(_QWORD *)(v8 + 120);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    v12 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v12)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "out");
      v44 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v44 = (_QWORD *)*v44;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v47, v44, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1418, &v48, &v47);
    }
    v13 = (unsigned int **)(*(_QWORD *)(v11 + 56) + 80);
    v14 = (DSPGraph::SimpleABL *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) + 56)
                                + 80);
    v16 = *(_DWORD *)(v10 + 24);
    v15 = *(unsigned int *)(v10 + 28);
    v17 = *((_DWORD *)this + 202);
    if (v3 != *((_DWORD *)this + 200))
    {
      if (v17 >= v3)
        v18 = 0;
      else
        v18 = *((_DWORD *)this + 201);
      *((_DWORD *)this + 203) = v17 - v3 + v18;
    }
    DSPGraph::SimpleABL::dstWrapCopy(v13, (DSPGraph::DelayBox *)((char *)this + 776), 0, v17 * v16, (v16 * a2));
    DSPGraph::SimpleABL::srcWrapCopy((unsigned int **)this + 97, v14, (*((_DWORD *)this + 203) * v16), 0, (v16 * a2), 0);
    if ((_DWORD)v15)
    {
      v23 = (_DWORD *)(*(_QWORD *)v14 + 12);
      do
      {
        *v23 = v16 * a2;
        v23 += 4;
        --v15;
      }
      while (v15);
    }
    v24 = *((_DWORD *)this + 202) + a2;
    *((_DWORD *)this + 202) = v24;
    v25 = *((_DWORD *)this + 203) + a2;
    *((_DWORD *)this + 203) = v25;
    v26 = *((_DWORD *)this + 201);
    v27 = v24 >= v26;
    v28 = v24 - v26;
    if (v27)
      *((_DWORD *)this + 202) = v28;
    v27 = v25 >= v26;
    v29 = v25 - v26;
    if (v27)
      *((_DWORD *)this + 203) = v29;
  }
  else
  {
    if (v5 == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "out");
      v45 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v45 = (_QWORD *)*v45;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v47, v45, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1418, &v48, &v47);
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v20 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v20)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "in");
      v46 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v46 = (_QWORD *)*v46;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v46, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
    }
    v21 = *(DSPGraph::Buffer **)(v19 + 56);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    DSPGraph::Buffer::copyFrom(v21, *(DSPGraph::Buffer **)(v22 + 56));
  }
  v30 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v30)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v41 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v41 = (_QWORD *)*v41;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v41, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
  result = (_QWORD *)*((_QWORD *)this + 11);
  v33 = (_QWORD *)*((_QWORD *)this + 12);
  if (result != v33)
  {
    v34 = (_OWORD *)(*(_QWORD *)(v31 + 56) + 8);
    v35 = (_QWORD *)*((_QWORD *)this + 11);
    do
    {
      v36 = *v35;
      v35 += 4;
      v37 = *(_QWORD *)((*(uint64_t (**)(void))(v36 + 40))() + 56);
      v39 = v34[2];
      v38 = v34[3];
      v40 = v34[1];
      *(_OWORD *)(v37 + 8) = *v34;
      *(_OWORD *)(v37 + 24) = v40;
      *(_OWORD *)(v37 + 40) = v39;
      *(_OWORD *)(v37 + 56) = v38;
      *(_DWORD *)(v37 + 72) = 0;
      result = v35;
    }
    while (v35 != v33);
  }
  *((_DWORD *)this + 200) = v3;
  return result;
}

void sub_18F068A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void DSPGraph::DelayBox::initialize(DSPGraph::DelayBox *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  DSPGraph::Box::initialize(this);
  if (*((_DWORD *)this + 198))
  {
    v2 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v13, "out");
      v11 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v11 = (_QWORD *)*v11;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v12, v11, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v14, 1418, &v13, &v12);
    }
    v3 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
    v4 = *((_DWORD *)this + 198) + 2 * *(_DWORD *)(*((_QWORD *)this + 2) + 272);
    *((_DWORD *)this + 201) = v4;
    v5 = (*(_DWORD *)(v3 + 12) & 0x20) == 0;
    v8 = v3 + 24;
    v6 = *(_DWORD *)(v3 + 24);
    v7 = *(_DWORD *)(v8 + 4);
    if (v5)
      v9 = 1;
    else
      v9 = v7;
    DSPGraph::SimpleABL::alloc((DSPGraph::DelayBox *)((char *)this + 776), v9, v6 * v4, 0);
  }
  else
  {
    *((_DWORD *)this + 201) = 0;
  }
  v10 = *((_DWORD *)this + 199);
  *((_DWORD *)this + 200) = v10;
  *((_QWORD *)this + 101) = v10;
}

void sub_18F068C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::DelayBox::uninitialize(DSPGraph::DelayBox *this)
{
  DSPGraph::Box::uninitialize(this);
  DSPGraph::SimpleABL::free((DSPGraph::DelayBox *)((char *)this + 776));
}

void DSPGraph::DelayBox::reset(DSPGraph::DelayBox *this)
{
  _DWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;

  v2 = (_DWORD *)*((_QWORD *)this + 97);
  if (v2 && *v2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      bzero(*(void **)&v2[v3 + 4], v2[v3 + 3]);
      ++v4;
      v2 = (_DWORD *)*((_QWORD *)this + 97);
      v3 += 4;
    }
    while (v4 < *v2);
  }
  v5 = *((_DWORD *)this + 199);
  *((_DWORD *)this + 200) = v5;
  *((_QWORD *)this + 101) = v5;
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::lf_read_synchronized_write(caulk::concurrent::details::lf_read_sync_write_impl *a1)
{
  uint64_t result;

  result = caulk::concurrent::details::lf_read_sync_write_impl::lf_read_sync_write_impl(a1);
  *(_WORD *)(result + 8) = 1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void caulk::inplace_function_detail::vtable<void,caulk::concurrent::details::skiplist_node<unsigned int,DSPGraph::Analyzer *>::layout_vk const&>::vtable(void)::{lambda(void *,caulk::concurrent::details::skiplist_node<unsigned int,DSPGraph::Analyzer *>::layout_vk const&)#1}::__invoke()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;

  v1 = 0;
  v2 = (_QWORD *)(a1 + 32);
  v3 = a1 + 96;
  do
  {
    v4 = *(_QWORD *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * v1];
    v5 = (unint64_t *)(v3 + 32 * v1 + 16);
    while (1)
    {
      v6 = caulk::concurrent::stack<caulk::alloc::free_block,caulk::concurrent::intrusive_single_link_node<caulk::alloc::free_block>>::pop((unsigned __int128 *)(v3 + 32 * v1));
      if (!v6)
        break;
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
      caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::deallocate(v2, (unint64_t)v6, v4);
    }
    ++v1;
  }
  while (v1 != 10);
  return caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::self_deallocate_all((uint64_t)v2);
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int const&>(_QWORD *a1, CFTypeRef cf, int *a3)
{
  CFNumberRef v6;
  std::runtime_error *exception;
  int valuePtr;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  valuePtr = *a3;
  v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_18F068ECC(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,char const*>(_QWORD *a1, CFTypeRef cf, char **a3)
{
  if (cf)
    CFRetain(cf);
  *a1 = cf;
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)(a1 + 1), *a3);
  return a1;
}

void sub_18F068F5C(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::TypeRef::~TypeRef(v1);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<__CFData *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

void DSPGraph::AUBox::~AUBox(DSPGraph::AUBox *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E29116C0;
  v2 = (void *)*((_QWORD *)this + 100);
  if (v2)
  {
    *((_QWORD *)this + 101) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 97);
  if (v3)
  {
    *((_QWORD *)this + 98) = v3;
    operator delete(v3);
  }
  DSPGraph::Box::~Box(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E29116C0;
  v2 = (void *)*((_QWORD *)this + 100);
  if (v2)
  {
    *((_QWORD *)this + 101) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 97);
  if (v3)
  {
    *((_QWORD *)this + 98) = v3;
    operator delete(v3);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::AUBox::ClassName(DSPGraph::AUBox *this)
{
  return "AUBox";
}

uint64_t DSPGraph::AUBox::print(uint64_t result, _QWORD *a2, int a3, uint64_t a4)
{
  int v4;
  uint64_t v6;
  const void **v7;
  const void **v8;
  unsigned int v9;

  if (a3 >= 2)
  {
    v4 = a4;
    v6 = result;
    DSPGraph::Box::print(result, a2, a3, a4);
    DSPGraph::printi(a2, v4 + 4, "enabled %d\n", *(unsigned __int8 *)(v6 + 744));
    DSPGraph::printi(a2, v4 + 4, "AU %p\n", *(const void **)(v6 + 848));
    DSPGraph::printi(a2, v4 + 4, "can process in place %d\n", *(unsigned __int8 *)(v6 + 856));
    result = DSPGraph::printi(a2, v4 + 4, "num param taps %zu\n", 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v6 + 160) - *(_QWORD *)(v6 + 152)) >> 3));
    v8 = *(const void ***)(v6 + 152);
    v7 = *(const void ***)(v6 + 160);
    if (v8 != v7)
    {
      v9 = v4 + 8;
      do
      {
        result = DSPGraph::ParameterTap::print(v8, a2, v9);
        v8 += 5;
      }
      while (v8 != v7);
    }
  }
  return result;
}

_QWORD *DSPGraph::AUBox::printShort(uint64_t a1, _QWORD *a2, unsigned int a3, int a4)
{
  DSPGraph::Box::printShort((const char *)a1, a2, a3, 0);
  return DSPGraph::printACD(a2, (unsigned int *)(a1 + 824), a4);
}

BOOL DSPGraph::AUBox::canBypass(DSPGraph::AUBox *this)
{
  char v1;

  return ((*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 296))(this, 21, 0, 0) & 0xFF00000000) != 0&& v1 != 0;
}

BOOL DSPGraph::AUBox::isBypassed(DSPGraph::AUBox *this)
{
  BOOL v1;
  int v3;
  int v4;

  v4 = 0;
  v3 = 4;
  if ((*(unsigned int (**)(DSPGraph::AUBox *, uint64_t, _QWORD, _QWORD, int *, int *))(*(_QWORD *)this + 304))(this, 21, 0, 0, &v3, &v4))
  {
    v1 = 1;
  }
  else
  {
    v1 = v4 == 0;
  }
  return !v1;
}

double DSPGraph::AUBox::getParameterList@<D0>(DSPGraph::AUBox *this@<X0>, uint64_t a2@<X1>, std::vector<unsigned int> *a3@<X8>)
{
  unsigned int v6;
  double result;
  unsigned int v8;
  char v9;
  BOOL v10;
  unsigned int v11;
  std::vector<unsigned int> v12;

  v6 = (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 296))(this, 3, a2, 0);
  v8 = v6;
  if (v9)
    v10 = v6 > 3;
  else
    v10 = 0;
  if (v10)
  {
    std::vector<unsigned int>::vector(&v12, v6 >> 2);
    v11 = v8 & 0xFFFFFFFC;
    if ((*(unsigned int (**)(DSPGraph::AUBox *, uint64_t, uint64_t, _QWORD, unsigned int *, std::vector<unsigned int>::pointer))(*(_QWORD *)this + 304))(this, 3, a2, 0, &v11, v12.__begin_))
    {
      a3->__begin_ = 0;
      a3->__end_ = 0;
      a3->__end_cap_.__value_ = 0;
      if (v12.__begin_)
      {
        v12.__end_ = v12.__begin_;
        operator delete(v12.__begin_);
      }
    }
    else
    {
      result = *(double *)&v12.__begin_;
      *a3 = v12;
    }
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
  }
  return result;
}

void sub_18F069324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUBox::getParameterInfo@<X0>(DSPGraph::AUBox *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v10 = 104;
  result = (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, uint64_t, uint64_t, int *, __int128 *))(*(_QWORD *)this + 304))(this, 4, a2, a3, &v10, &v11);
  if ((_DWORD)result)
  {
    v6 = 0;
    *(_DWORD *)a4 = result;
  }
  else
  {
    v7 = v16;
    *(_OWORD *)(a4 + 64) = v15;
    *(_OWORD *)(a4 + 80) = v7;
    *(_QWORD *)(a4 + 96) = v17;
    v8 = v12;
    *(_OWORD *)a4 = v11;
    *(_OWORD *)(a4 + 16) = v8;
    v9 = v14;
    v6 = 1;
    *(_OWORD *)(a4 + 32) = v13;
    *(_OWORD *)(a4 + 48) = v9;
  }
  *(_BYTE *)(a4 + 104) = v6;
  return result;
}

void sub_18F069404(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t DSPGraph::AUBox::setUsesFixedBlockSize(DSPGraph::AUBox *this, int a2)
{
  uint64_t result;
  char v5;
  BOOL v6;
  int v7;

  result = (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 296))(this, 3700, 0, 0);
  if (v5)
    v6 = (result & 0xFF00000000) == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = a2;
    return (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, _QWORD, _QWORD, uint64_t, int *))(*(_QWORD *)this
                                                                                                 + 312))(this, 3700, 0, 0, 4, &v7);
  }
  return result;
}

BOOL DSPGraph::AUBox::usesFixedBlockSize(DSPGraph::AUBox *this)
{
  int v2;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;

  v8 = 4;
  v9 = 0;
  (*(void (**)(DSPGraph::AUBox *, uint64_t, _QWORD, _QWORD, int *, int *))(*(_QWORD *)this + 304))(this, 3700, 0, 0, &v8, &v9);
  v2 = (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, _QWORD, _QWORD, int *, int *))(*(_QWORD *)this + 304))(this, 3700, 0, 0, &v8, &v9);
  if (v2)
  {
    v4 = v2;
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "usesFixedBlockSize");
    std::string::basic_string[abi:ne180100]<0>(&v5, "getProperty failed");
    DSPGraph::ThrowException(v4, &v7, 2035, &v6, &v5);
  }
  return v9 != 0;
}

void sub_18F06955C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

applesauce::CF::DictionaryRef *DSPGraph::AUBox::getPreset@<X0>(DSPGraph::AUBox *this@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  int v3;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  CFTypeRef v10;

  v10 = 0;
  v9 = 8;
  v3 = (*(uint64_t (**)(DSPGraph::AUBox *, _QWORD, _QWORD, _QWORD, int *, CFTypeRef *))(*(_QWORD *)this + 304))(this, 0, 0, 0, &v9, &v10);
  if (v3)
  {
    v5 = v3;
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getPreset");
    std::string::basic_string[abi:ne180100]<0>(&v6, "AudioUnitGetProperty ClassInfo");
    DSPGraph::ThrowException(v5, &v8, 1810, &v7, &v6);
  }
  return applesauce::CF::DictionaryRef::DictionaryRef(a2, v10);
}

void sub_18F069658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void DSPGraph::AUBox::getComponentName(DSPGraph::AUBox *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)(_QWORD);
  OpaqueAudioComponent *v5;
  const __CFString *v6;
  std::runtime_error *exception;
  __int128 v8;
  uint64_t v9;
  const __CFString *v10;
  __CFString *v11;

  v3 = *((_QWORD *)this + 106);
  if (v3
    && (v4 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3)) != 0
    && (v5 = (OpaqueAudioComponent *)(**v4)(v4)) != 0
    && (v11 = 0, !Impl_AudioGetComponentInfo(v5, 0, (const __CFString **)&v11)))
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v10, v11);
    if (!v10)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)&v8, v10);
    *(_OWORD *)a2 = v8;
    v6 = v10;
    *(_QWORD *)(a2 + 16) = v9;
    *(_BYTE *)(a2 + 24) = 1;
    if (v6)
      CFRelease(v6);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
}

void sub_18F069780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13)
{
  void *v13;

  __cxa_free_exception(v13);
  applesauce::CF::StringRef::~StringRef(&a13);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::AUBox::getFormatFromUnit@<X0>(AudioUnit *this@<X0>, AudioUnitScope inScope@<W1>, AudioUnitElement inElement@<W2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  int v6;
  char *v7;
  char *v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  __int128 v13;
  __int128 v14;
  UInt32 ioDataSize;

  a4[4] = 0;
  *(_OWORD *)a4 = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  ioDataSize = 40;
  result = AudioUnitGetProperty(this[106], 8u, inScope, inElement, a4, &ioDataSize);
  if ((_DWORD)result)
  {
    v6 = result;
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "getFormatFromUnit");
    std::string::basic_string[abi:ne180100]<0>(&v9, "AUBox::getFormatFromUnit ");
    v7 = (char *)(*((uint64_t (**)(AudioUnit *))*this + 2))(this);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v10, &v9, v7);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v11, &v10, " ");
    v8 = (char *)(this + 4);
    if (*((char *)this + 55) < 0)
      v8 = *(char **)v8;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v12, &v11, v8);
    DSPGraph::ThrowException(v6, &v14, 2055, &v13, (__int128 *)&v12);
  }
  return result;
}

void sub_18F0698A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a33 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v33 - 49) < 0)
    operator delete(*(void **)(v33 - 72));
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  _Unwind_Resume(exception_object);
}

void DSPGraph::AUBox::decompileBox(uint64_t a1, _QWORD *a2, char a3)
{
  char *v5;
  std::string *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  std::string *p_p;
  void **v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string __p;
  void **v16;
  uint64_t v17;
  unsigned __int8 v18;

  v5 = (char *)(a1 + 32);
  if ((a3 & 1) != 0)
  {
    if (*(char *)(a1 + 55) < 0)
      v5 = *(char **)v5;
    v9 = *(_QWORD *)(a1 + 56);
    std::string::basic_string[abi:ne180100]<0>(v13, v5);
    DSPGraph::asDecompileString((uint64_t)v13, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    DSPGraph::strprintf((DSPGraph *)"box %qu %s ", &v16, v9, p_p);
    if ((v18 & 0x80u) == 0)
      v7 = (void **)&v16;
    else
      v7 = v16;
    if ((v18 & 0x80u) == 0)
      v8 = v18;
    else
      v8 = v17;
  }
  else
  {
    if (*(char *)(a1 + 55) < 0)
      v5 = *(char **)v5;
    std::string::basic_string[abi:ne180100]<0>(v13, v5);
    DSPGraph::asDecompileString((uint64_t)v13, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &__p;
    else
      v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    DSPGraph::strprintf((DSPGraph *)"box %s ", &v16, v6);
    if ((v18 & 0x80u) == 0)
      v7 = (void **)&v16;
    else
      v7 = v16;
    if ((v18 & 0x80u) == 0)
      v8 = v18;
    else
      v8 = v17;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v7, v8);
  if ((char)v18 < 0)
    operator delete(v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v14 < 0)
    operator delete(v13[0]);
  DSPGraph::printACD(a2, (unsigned int *)(a1 + 824), 0);
  DSPGraph::strprintf((DSPGraph *)" %u %u\n", &v16, (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, (*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5);
  if ((v18 & 0x80u) == 0)
    v11 = (void **)&v16;
  else
    v11 = v16;
  if ((v18 & 0x80u) == 0)
    v12 = v18;
  else
    v12 = v17;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v11, v12);
  if ((char)v18 < 0)
    operator delete(v16);
}

void sub_18F069AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

OpaqueAudioComponentInstance *DSPGraph::AUBox::close(DSPGraph::AUBox *this)
{
  OpaqueAudioComponentInstance *result;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  result = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 106);
  if (result)
  {
    result = (OpaqueAudioComponentInstance *)AudioComponentInstanceDispose(result);
    *((_QWORD *)this + 106) = 0;
    if ((_DWORD)result)
    {
      v3 = (int)result;
      std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v5, "close");
      std::operator+<char>();
      DSPGraph::ThrowException(v3, &v6, 1973, &v5, &v4);
    }
  }
  return result;
}

void sub_18F069BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ParameterTap::print(const void **a1, _QWORD *a2, unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  DSPGraph::printi(a2, a3, "ParameterTap\n");
  v3 += 4;
  DSPGraph::printi(a2, v3, "source %p\n", *a1);
  DSPGraph::printi(a2, v3, "source      %p scope %u   element %u   ID %u\n", a1, *((_DWORD *)a1 + 3), *((_DWORD *)a1 + 4), *((_DWORD *)a1 + 2));
  return DSPGraph::printi(a2, v3, "destination %p scope %u   element %u   ID %u\n", a1, *((_DWORD *)a1 + 7), *((_DWORD *)a1 + 8), *((_DWORD *)a1 + 6));
}

void DSPGraph::TestBox::~TestBox(DSPGraph::TestBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::TestBox::ClassName(DSPGraph::TestBox *this)
{
  return "test";
}

uint64_t DSPGraph::TestBox::canProcessInPlace(DSPGraph::TestBox *this)
{
  return *((unsigned __int8 *)this + 772);
}

double DSPGraph::TestBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 4.91466378e252;
  *(_OWORD *)a1 = xmmword_18F117280;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

char *DSPGraph::TestBox::process(DSPGraph::TestBox *this)
{
  char *result;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  _OWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v4 = (char *)this + 64;
  result = (char *)*((_QWORD *)this + 8);
  v3 = (char *)*((_QWORD *)v4 + 1);
  if (((v3 - result) & 0x1FFFFFFFE0) != 0)
  {
    if (v3 == result)
    {
      std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v20, "in");
      v17 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v17 = (_QWORD *)*v17;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v19, v17, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v21, 1410, &v20, &v19);
    }
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)result + 40))(result);
    v6 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v6)
    {
      std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v20, "in");
      v18 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v18 = (_QWORD *)*v18;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v19, v18, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v21, 1410, &v20, &v19);
    }
    v7 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 72);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    result = (char *)*((_QWORD *)this + 11);
    v9 = (char *)*((_QWORD *)this + 12);
    if (result != v9)
    {
      v10 = (_OWORD *)(*(_QWORD *)(v8 + 56) + 8);
      v11 = result;
      do
      {
        v12 = *(_QWORD *)v11;
        v11 += 32;
        v13 = *(_QWORD *)((*(uint64_t (**)(void))(v12 + 40))() + 56);
        v15 = v10[2];
        v14 = v10[3];
        v16 = v10[1];
        *(_OWORD *)(v13 + 8) = *v10;
        *(_OWORD *)(v13 + 24) = v16;
        *(_OWORD *)(v13 + 40) = v15;
        *(_OWORD *)(v13 + 56) = v14;
        *(_DWORD *)(v13 + 72) = v7;
        result = v11;
      }
      while (v11 != v9);
    }
  }
  return result;
}

void sub_18F069EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

void DSPGraph::CopyBox::~CopyBox(DSPGraph::CopyBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::CopyBox::ClassName(DSPGraph::CopyBox *this)
{
  return "copy";
}

double DSPGraph::CopyBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 9.49207469e170;
  *(_OWORD *)a1 = xmmword_18F117240;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::CopyBox::hasPresetData(DSPGraph::CopyBox *this)
{
  return 0;
}

_QWORD *DSPGraph::CopyBox::process(DSPGraph::CopyBox *this, int a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  DSPGraph::SimpleABL *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *result;
  _QWORD *v19;
  _OWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v4 = (char *)this + 64;
  v3 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v33, "in");
    v27 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v27 = (_QWORD *)*v27;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v32, v27, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v34, 1410, &v33, &v32);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v33, "out");
    v28 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v28 = (_QWORD *)*v28;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v32, v28, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v34, 1418, &v33, &v32);
  }
  v8 = *(_QWORD *)(v6 + 56);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v10 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v33, "in");
    v29 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v29 = (_QWORD *)*v29;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v32, v29, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v34, 1410, &v33, &v32);
  }
  v11 = (DSPGraph::SimpleABL *)(*(_QWORD *)(v9 + 56) + 80);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  DSPGraph::SimpleABL::copy((unsigned int **)(v8 + 80), v11, 0, 0, (*(_DWORD *)(*(_QWORD *)(v12 + 120) + 24) * a2), 1);
  v13 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v33, "in");
    v30 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v30 = (_QWORD *)*v30;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v32, v30, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v34, 1410, &v33, &v32);
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  v15 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v15)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v33, "in");
    v31 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v31 = (_QWORD *)*v31;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v32, v31, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v34, 1410, &v33, &v32);
  }
  v16 = *(_DWORD *)(*(_QWORD *)(v14 + 56) + 72);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  result = (_QWORD *)*((_QWORD *)this + 11);
  v19 = (_QWORD *)*((_QWORD *)this + 12);
  if (result != v19)
  {
    v20 = (_OWORD *)(*(_QWORD *)(v17 + 56) + 8);
    v21 = result;
    do
    {
      v22 = *v21;
      v21 += 4;
      v23 = *(_QWORD *)((*(uint64_t (**)(void))(v22 + 40))() + 56);
      v25 = v20[2];
      v24 = v20[3];
      v26 = v20[1];
      *(_OWORD *)(v23 + 8) = *v20;
      *(_OWORD *)(v23 + 24) = v26;
      *(_OWORD *)(v23 + 40) = v25;
      *(_OWORD *)(v23 + 56) = v24;
      *(_DWORD *)(v23 + 72) = v16;
      result = v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_18F06A314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::CopyBox::initialize(DSPGraph::CopyBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  DSPGraph::Box::initialize(this);
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v11, "in");
    v8 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v8 = (_QWORD *)*v8;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v10, v8, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v12, 1410, &v11, &v10);
  }
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v11, "out");
    v9 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v9 = (_QWORD *)*v9;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v10, v9, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v12, 1418, &v11, &v10);
  }
  v5 = *(const void **)(v3 + 120);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  result = memcmp(v5, *(const void **)(v6 + 120), 0x28uLL);
  if ((_DWORD)result)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v11, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v10, "CopyBox input and output format mismatch");
    DSPGraph::ThrowException(1718444833, &v12, 2150, &v11, &v10);
  }
  return result;
}

void sub_18F06A53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::ArithmeticAbsBox::~ArithmeticAbsBox(DSPGraph::ArithmeticAbsBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::ArithmeticAbsBox::ClassName(DSPGraph::ArithmeticAbsBox *this)
{
  return "aabs";
}

double DSPGraph::ArithmeticAbsBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.22205774e161;
  *(_OWORD *)a1 = xmmword_18F117210;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

_QWORD *DSPGraph::ArithmeticAbsBox::process(DSPGraph::ArithmeticAbsBox *this, unsigned int a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  char v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *result;
  _QWORD *v28;
  _OWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  DSPSplitComplex __A;

  v4 = (char *)this + 64;
  v3 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v51, "in");
    v36 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v36 = (_QWORD *)*v36;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v50, v36, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, (__int128 *)&__A, 1410, &v51, &v50);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v51, "out");
    v37 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v37 = (_QWORD *)*v37;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v50, v37, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, (__int128 *)&__A, 1418, &v51, &v50);
  }
  v8 = *(_DWORD **)(*(_QWORD *)(v6 + 56) + 80);
  v9 = *(unsigned int **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) + 56) + 80);
  if (*v8 != *v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v48, "process");
    v38 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v38)
    {
      std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v51, "in");
      v39 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v39 = (_QWORD *)*v39;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v50, v39, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, (__int128 *)&__A, 1410, &v51, &v50);
    }
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
    v44 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v44)
    {
      std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v51, "out");
      v45 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v45 = (_QWORD *)*v45;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v50, v45, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, (__int128 *)&__A, 1418, &v51, &v50);
    }
    v46 = *(unsigned int *)(*(_QWORD *)(v43 + 120) + 28);
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
    DSPGraph::strprintf((DSPGraph *)"The input and output must have the same channel count, but have %u and %u.", &__A, v46, *(unsigned int *)(*(_QWORD *)(v47 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v49, 2369, &v48, (__int128 *)&__A);
  }
  v10 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v51, "in");
    v40 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v40 = (_QWORD *)*v40;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v50, v40, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, (__int128 *)&__A, 1410, &v51, &v50);
  }
  v11 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) + 120) + 8);
  v12 = 2;
  if (v11 == 1718773105)
    v12 = 3;
  v13 = (unint64_t)a2 << v12;
  if (v13 > v8[3])
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v51, "process");
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", &v50, v13, v8[3]);
    DSPGraph::ThrowException(1718449215, (__int128 *)&__A, 2381, &v51, &v50);
  }
  v14 = 4 * a2;
  if (4 * (unint64_t)a2 > v9[3])
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v51, "process");
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for output 0 should be at least %u bytes, but is %u.", &v50, 4 * a2, v9[3]);
    DSPGraph::ThrowException(1718449215, (__int128 *)&__A, 2388, &v51, &v50);
  }
  v15 = *v9;
  if (v11 == 1718773105)
  {
    if (v15)
    {
      v16 = 0;
      v17 = 0;
      v18 = v8 + 4;
      do
      {
        __A.realp = 0;
        __A.imagp = 0;
        __A.realp = *(float **)&v18[v16];
        __A.imagp = &__A.realp[a2];
        vDSP_zvabs(&__A, 1, *(float **)&v9[v16 + 4], 1, a2);
        v9[v16 + 3] = v14;
        ++v17;
        v16 += 4;
      }
      while (v17 < *v9);
    }
  }
  else if (v15)
  {
    v19 = 0;
    v20 = 0;
    v21 = v8 + 4;
    do
    {
      vDSP_vabs(*(const float **)&v21[v19], 1, *(float **)&v9[v19 + 4], 1, a2);
      v9[v19 + 3] = v14;
      ++v20;
      v19 += 4;
    }
    while (v20 < *v9);
  }
  v22 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v22)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v51, "in");
    v41 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v41 = (_QWORD *)*v41;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v50, v41, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, (__int128 *)&__A, 1410, &v51, &v50);
  }
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
  v24 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v24)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v51, "in");
    v42 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v42 = (_QWORD *)*v42;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v50, v42, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, (__int128 *)&__A, 1410, &v51, &v50);
  }
  v25 = *(_DWORD *)(*(_QWORD *)(v23 + 56) + 72);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
  result = (_QWORD *)*((_QWORD *)this + 11);
  v28 = (_QWORD *)*((_QWORD *)this + 12);
  if (result != v28)
  {
    v29 = (_OWORD *)(*(_QWORD *)(v26 + 56) + 8);
    v30 = result;
    do
    {
      v31 = *v30;
      v30 += 4;
      v32 = *(_QWORD *)((*(uint64_t (**)(void))(v31 + 40))() + 56);
      v34 = v29[2];
      v33 = v29[3];
      v35 = v29[1];
      *(_OWORD *)(v32 + 8) = *v29;
      *(_OWORD *)(v32 + 24) = v35;
      *(_OWORD *)(v32 + 40) = v34;
      *(_OWORD *)(v32 + 56) = v33;
      *(_DWORD *)(v32 + 72) = v25;
      result = v30;
    }
    while (v30 != v28);
  }
  return result;
}

void sub_18F06AC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 65) < 0)
    operator delete(*(void **)(v35 - 88));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ArithmeticAbsBox::initialize(DSPGraph::ArithmeticAbsBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::string v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  DSPGraph::Box::initialize(this);
  v2 = *((_QWORD *)this + 8);
  v3 = *((_QWORD *)this + 9);
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0x20
    || ((*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) & 0x1FFFFFFFE0) != 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v24, "initialize");
    DSPGraph::strprintf((DSPGraph *)"There must be one input and one output, instead of %u and %u.", &v23, (*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, (*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5);
    DSPGraph::ThrowException(1701602593, &v25, 2346, &v24, &v23);
  }
  if (v3 == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v24, "in");
    v10 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v10 = (_QWORD *)*v10;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v23, v10, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v25, 1410, &v24, &v23);
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v5 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v24, "out");
    v11 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v11 = (_QWORD *)*v11;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v23, v11, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v25, 1418, &v24, &v23);
  }
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 120) + 28);
  if (v6 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 120) + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v21, "initialize");
    v12 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v12)
    {
      std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v24, "in");
      v13 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v13 = (_QWORD *)*v13;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v23, v13, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v25, 1410, &v24, &v23);
    }
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    v17 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v17)
    {
      std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v24, "out");
      v18 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v18 = (_QWORD *)*v18;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v23, v18, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v25, 1418, &v24, &v23);
    }
    v19 = *(unsigned int *)(*(_QWORD *)(v16 + 120) + 28);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
    DSPGraph::strprintf((DSPGraph *)"The input and output must have the same channel count, but have %u and %u.", &v25, v19, *(unsigned int *)(*(_QWORD *)(v20 + 120) + 28));
    DSPGraph::ThrowException(1667788321, (__int128 *)&v22, 2350, &v21, &v25);
  }
  v7 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v24, "out");
    v14 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v14 = (_QWORD *)*v14;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v23, v14, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v25, 1418, &v24, &v23);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v9 = *(_DWORD *)(*(_QWORD *)(result + 120) + 8);
  if (v9 != 1819304813)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v24, "initialize");
    caulk::string_from_4cc(&v22, v9);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v22;
    else
      v15 = (std::string *)v22.__r_.__value_.__r.__words[0];
    DSPGraph::strprintf((DSPGraph *)"The output must have 'lpcm' format, but has %s instead.", &v23, v15);
    DSPGraph::ThrowException(1667788321, &v25, 2356, &v24, &v23);
  }
  return result;
}

void sub_18F06B224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 41) < 0)
    operator delete(*(void **)(v29 - 64));
  if (*(char *)(v29 - 17) < 0)
    operator delete(*(void **)(v29 - 40));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

std::string *caulk::string_from_4cc(std::string *retstr, unsigned int __val)
{
  int v2;
  char v4;
  int v5;
  __int16 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = bswap32(__val);
  v5 = v2;
  if (((char)v2 - 32) > 0x5E
    || (((__int16)v2 >> 8) - 32) > 0x5E
    || ((v2 << 8 >> 24) - 32) > 0x5E
    || ((v2 >> 24) - 32) > 0x5E)
  {
    return std::to_string(retstr, __val);
  }
  v6 = 39;
  v4 = 39;
  return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, &v4);
}

void sub_18F06B3F8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void DSPGraph::VectorGainBox::~VectorGainBox(DSPGraph::VectorGainBox *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E290CD68;
  v3 = (void **)((char *)this + 808);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 98);
  if (v2)
  {
    *((_QWORD *)this + 99) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E290CD68;
  v3 = (void **)((char *)this + 808);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 98);
  if (v2)
  {
    *((_QWORD *)this + 99) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::VectorGainBox::ClassName(DSPGraph::VectorGainBox *this)
{
  return "VectorGainBox";
}

uint64_t DSPGraph::VectorGainBox::canProcessInPlace(DSPGraph::VectorGainBox *this)
{
  return 1;
}

double DSPGraph::VectorGainBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.90940534e262;
  *(_OWORD *)a1 = xmmword_18F117220;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::VectorGainBox::getPropertyInfo(DSPGraph::VectorGainBox *this, int a2, uint64_t a3, int a4)
{
  if (a4 | a3 | (a2 - 100))
  {
    if (a2 == 100 || a4 | a3 || (a2 - 100) > *((_DWORD *)this + 194))
      return DSPGraph::Box::getPropertyInfo(this, a2, a3);
    else
      return (4 * *((_DWORD *)this + 193)) | 0x100000000;
  }
  else if (*(_BYTE *)(*((_QWORD *)this + 1) + 762))
  {
    return 4;
  }
  else
  {
    return 0x100000004;
  }
}

uint64_t DSPGraph::VectorGainBox::getProperty(DSPGraph::VectorGainBox *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *__dst)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;

  if (a4 | a3 | (a2 - 100))
  {
    if (a2 == 100 || a4 | a3 || (a2 - 100) > *((_DWORD *)this + 194))
      return DSPGraph::Box::getProperty(this, a2, a3, a4, a5, __dst);
    if (*a5 == 4 * *((unsigned int *)this + 193))
    {
      if (__dst)
      {
        v8 = *((_QWORD *)this + 101) + 24 * (a2 - 101);
        v9 = *(_BYTE **)v8;
        v10 = *(_BYTE **)(v8 + 8);
        if (v10 != v9)
          memmove(__dst, v9, v10 - v9);
        return 0;
      }
      return 4294967246;
    }
    return 561211770;
  }
  if (*a5 != 4)
    return 561211770;
  if (!__dst)
    return 4294967246;
  v7 = 0;
  *(_DWORD *)__dst = *((_DWORD *)this + 194);
  return v7;
}

uint64_t DSPGraph::VectorGainBox::setProperty(DSPGraph::VectorGainBox *this, int a2, int a3, unsigned int a4, unsigned int a5, char *a6)
{
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  char *v19;
  size_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  size_t v26;
  unint64_t v27;

  if (a4 | a3 | (a2 - 100))
  {
    if (a2 == 100 || a4 | a3 || (a2 - 100) > *((_DWORD *)this + 194))
      return DSPGraph::Box::setProperty(this, a2, a3, a4, a5, a6);
    v9 = a5 >> 2;
    if ((_DWORD)v9 == *((_DWORD *)this + 193))
    {
      v10 = a2 - 101;
      v11 = *((_QWORD *)this + 101);
      v12 = (void **)(v11 + 24 * (a2 - 101));
      v13 = (uint64_t)v12[2];
      v14 = (char *)*v12;
      if (v9 <= (v13 - (uint64_t)*v12) >> 2)
      {
        v23 = v11 + 24 * v10;
        v25 = *(char **)(v23 + 8);
        v18 = (void **)(v23 + 8);
        v24 = v25;
        v26 = v25 - v14;
        v27 = (v25 - v14) >> 2;
        if (v27 < v9)
        {
          if (v24 != v14)
          {
            memmove(*v12, a6, v26);
            v14 = (char *)*v18;
          }
          v20 = 4 * v9 - 4 * v27;
          if (v27 == v9)
            goto LABEL_20;
          v21 = v14;
          v22 = &a6[4 * v27];
          goto LABEL_19;
        }
        v20 = 4 * v9;
        if (a5 < 4)
          goto LABEL_20;
      }
      else
      {
        if (v14)
        {
          *(_QWORD *)(v11 + 24 * v10 + 8) = v14;
          operator delete(v14);
          v13 = 0;
          *v12 = 0;
          v12[1] = 0;
          v12[2] = 0;
        }
        v15 = v13 >> 1;
        if (v13 >> 1 <= v9)
          v15 = v9;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        std::vector<float>::__vallocate[abi:ne180100]((_QWORD *)(v11 + 24 * v10), v16);
        v17 = v11 + 24 * v10;
        v19 = *(char **)(v17 + 8);
        v18 = (void **)(v17 + 8);
        v14 = v19;
        v20 = 4 * v9;
      }
      v21 = v14;
      v22 = a6;
LABEL_19:
      memmove(v21, v22, v20);
LABEL_20:
      v8 = 0;
      *v18 = &v14[v20];
      return v8;
    }
    return 4294956445;
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 1) + 762))
  {
    if (a5 == 4)
    {
      v8 = 0;
      *((_DWORD *)this + 194) = *(_DWORD *)a6;
      return v8;
    }
    return 4294956445;
  }
  return 4294956447;
}

uint64_t DSPGraph::VectorGainBox::hasPresetData(DSPGraph::VectorGainBox *this)
{
  return 0;
}

uint64_t DSPGraph::VectorGainBox::process(DSPGraph::VectorGainBox *this, int a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  const float **v11;
  const float **v12;
  const float *v13;
  float **v14;
  float **v15;
  float *v16;
  float *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t result;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  __int128 v38;
  DSPSplitComplex __C;
  DSPSplitComplex __A;

  v4 = (char *)this + 64;
  v3 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__C, "in");
    v32 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v32 = (_QWORD *)*v32;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v38, v32, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, (__int128 *)&__A, 1410, (__int128 *)&__C, &v38);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__C, "out");
    v33 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v33 = (_QWORD *)*v33;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v38, v33, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, (__int128 *)&__A, 1418, (__int128 *)&__C, &v38);
  }
  v8 = *(unsigned int **)(*(_QWORD *)(v6 + 56) + 80);
  v9 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) + 56) + 80);
  v10 = *v8;
  LODWORD(__A.realp) = 1065353216;
  vDSP_vfill((const float *)&__A, *((float **)this + 98), 1, (uint64_t)(*((_QWORD *)this + 99) - *((_QWORD *)this + 98)) >> 2);
  v11 = (const float **)*((_QWORD *)this + 101);
  v12 = (const float **)*((_QWORD *)this + 102);
  while (v11 != v12)
  {
    v13 = *v11;
    v11 += 3;
    vDSP_vmin(*((const float **)this + 98), 1, v13, 1, *((float **)this + 98), 1, (uint64_t)(*((_QWORD *)this + 99) - *((_QWORD *)this + 98)) >> 2);
  }
  if ((_DWORD)v10)
  {
    v14 = (float **)(v9 + 16);
    v15 = (float **)(v8 + 4);
    do
    {
      v16 = *v15;
      v15 += 2;
      v17 = *v14;
      __A.realp = v16;
      __A.imagp = &v16[a2];
      __C.realp = v17;
      __C.imagp = &v17[a2];
      v18 = *(_DWORD *)__A.imagp;
      vDSP_zrvmul(&__A, 1, *((const float **)this + 98), 1, &__C, 1, (uint64_t)(*((_QWORD *)this + 99) - *((_QWORD *)this + 98)) >> 2);
      *(_DWORD *)__C.imagp = v18;
      *((_DWORD *)v14 - 1) = 8 * a2;
      v14 += 2;
      --v10;
    }
    while (v10);
  }
  v19 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v19)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__C, "in");
    v34 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v34 = (_QWORD *)*v34;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v38, v34, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, (__int128 *)&__A, 1410, (__int128 *)&__C, &v38);
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
  v21 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v21)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__C, "out");
    v35 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v35 = (_QWORD *)*v35;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v38, v35, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, (__int128 *)&__A, 1418, (__int128 *)&__C, &v38);
  }
  v22 = *(_QWORD *)(v20 + 56);
  v23 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21) + 56);
  v24 = *(_OWORD *)(v22 + 8);
  v25 = *(_OWORD *)(v22 + 24);
  v26 = *(_OWORD *)(v22 + 40);
  *(_OWORD *)(v23 + 56) = *(_OWORD *)(v22 + 56);
  *(_OWORD *)(v23 + 40) = v26;
  *(_OWORD *)(v23 + 24) = v25;
  *(_OWORD *)(v23 + 8) = v24;
  v27 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__C, "in");
    v36 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v36 = (_QWORD *)*v36;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v38, v36, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, (__int128 *)&__A, 1410, (__int128 *)&__C, &v38);
  }
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
  v29 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v29)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__C, "out");
    v37 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v37 = (_QWORD *)*v37;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v38, v37, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, (__int128 *)&__A, 1418, (__int128 *)&__C, &v38);
  }
  v30 = *(_DWORD *)(*(_QWORD *)(v28 + 56) + 72);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  *(_DWORD *)(*(_QWORD *)(result + 56) + 72) = v30;
  return result;
}

void sub_18F06BC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void DSPGraph::VectorGainBox::initialize(char **this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  int v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void *__p[3];
  __int128 v57;
  char *v58;
  char *v59;
  char *v60;

  DSPGraph::Box::initialize((DSPGraph::Box *)this);
  v2 = this[8];
  v3 = this[9];
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0x20 || ((this[12] - this[11]) & 0x1FFFFFFFE0) != 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(__p, "initialize");
    DSPGraph::strprintf((DSPGraph *)"There must be one input and output, instead of %u and %u.", &v55, (unint64_t)(this[9] - this[8]) >> 5, (unint64_t)(this[12] - this[11]) >> 5);
    DSPGraph::ThrowException(1667788321, &v57, 2437, (__int128 *)__p, &v55);
  }
  if (v3 == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(__p, "in");
    v36 = this + 4;
    if (*((char *)this + 55) < 0)
      v36 = (_QWORD *)*v36;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v55, v36, (this[9] - this[8]) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v57, 1410, (__int128 *)__p, &v55);
  }
  v4 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 40))(v2);
  v5 = this[11];
  if (this[12] == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(__p, "out");
    v37 = this + 4;
    if (*((char *)this + 55) < 0)
      v37 = (_QWORD *)*v37;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v55, v37, (this[12] - this[11]) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v57, 1418, (__int128 *)__p, &v55);
  }
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 120) + 28);
  if (v6 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v5 + 40))(v5) + 120) + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v53, "initialize");
    v38 = this[8];
    if (this[9] == v38)
    {
      std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(__p, "in");
      v39 = this + 4;
      if (*((char *)this + 55) < 0)
        v39 = (_QWORD *)*v39;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v55, v39, (this[9] - this[8]) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v57, 1410, (__int128 *)__p, &v55);
    }
    v46 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 40))(v38);
    v47 = this[11];
    if (this[12] == v47)
    {
      std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(__p, "out");
      v48 = this + 4;
      if (*((char *)this + 55) < 0)
        v48 = (_QWORD *)*v48;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v55, v48, (this[12] - this[11]) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v57, 1418, (__int128 *)__p, &v55);
    }
    v51 = *(unsigned int *)(*(_QWORD *)(v46 + 120) + 28);
    v52 = (*(uint64_t (**)(char *))(*(_QWORD *)v47 + 40))(v47);
    DSPGraph::strprintf((DSPGraph *)"The input and output ports must have the same number of channels, but have %u and %u.", &v57, v51, *(unsigned int *)(*(_QWORD *)(v52 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v54, 2440, &v53, &v57);
  }
  v7 = this[8];
  if (this[9] == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(__p, "in");
    v40 = this + 4;
    if (*((char *)this + 55) < 0)
      v40 = (_QWORD *)*v40;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v55, v40, (this[9] - this[8]) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v57, 1410, (__int128 *)__p, &v55);
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v7 + 40))(v7) + 120) + 8) != 1718773105)
    goto LABEL_35;
  v8 = this[11];
  if (this[12] == v8)
  {
    std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(__p, "out");
    v41 = this + 4;
    if (*((char *)this + 55) < 0)
      v41 = (_QWORD *)*v41;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v55, v41, (this[12] - this[11]) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v57, 1418, (__int128 *)__p, &v55);
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v8 + 40))(v8) + 120) + 8) != 1718773105)
  {
LABEL_35:
    std::string::basic_string[abi:ne180100]<0>(&v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v53, "initialize");
    v34 = this[8];
    if (this[9] == v34)
    {
      std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(__p, "in");
      v35 = this + 4;
      if (*((char *)this + 55) < 0)
        v35 = (_QWORD *)*v35;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v55, v35, (this[9] - this[8]) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v57, 1410, (__int128 *)__p, &v55);
    }
    v43 = (*(uint64_t (**)(char *))(*(_QWORD *)v34 + 40))(v34);
    v44 = this[11];
    if (this[12] == v44)
    {
      std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(__p, "out");
      v45 = this + 4;
      if (*((char *)this + 55) < 0)
        v45 = (_QWORD *)*v45;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v55, v45, (this[12] - this[11]) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v57, 1418, (__int128 *)__p, &v55);
    }
    if (*(_DWORD *)(*(_QWORD *)(v43 + 120) + 8) == 1718773105)
      v49 = "freq";
    else
      v49 = "time";
    if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v44 + 40))(v44) + 120) + 8) == 1718773105)
      v50 = "freq";
    else
      v50 = "time";
    DSPGraph::strprintf((DSPGraph *)"The input and output must both be frequency-domain, but are '%s' and '%s'", &v57, v49, v50);
    DSPGraph::ThrowException(1718449215, &v54, 2452, &v53, &v57);
  }
  v9 = this[8];
  if (this[9] == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(__p, "in");
    v42 = this + 4;
    if (*((char *)this + 55) < 0)
      v42 = (_QWORD *)*v42;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v55, v42, (this[9] - this[8]) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v57, 1410, (__int128 *)__p, &v55);
  }
  v10 = *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v9 + 40))(v9) + 120) + 40);
  *((_DWORD *)this + 193) = v10;
  v11 = *((unsigned int *)this + 194);
  LODWORD(v55) = 1065353216;
  std::vector<float>::vector(__p, v10, &v55);
  v12 = this[102];
  v13 = this[101];
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3);
  v15 = v11 - v14;
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      v27 = &v13[24 * v11];
      if (v12 != v27)
      {
        v28 = this[102];
        do
        {
          v30 = (void *)*((_QWORD *)v28 - 3);
          v28 -= 24;
          v29 = v30;
          if (v30)
          {
            *((_QWORD *)v12 - 2) = v29;
            operator delete(v29);
          }
          v12 = v28;
        }
        while (v28 != v27);
      }
      this[102] = v27;
    }
  }
  else
  {
    v16 = this[103];
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v12) >> 3) >= v15)
    {
      v31 = &v12[24 * v15];
      v32 = 24 * v11 - 8 * ((v12 - v13) >> 3);
      do
      {
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *((_QWORD *)v12 + 2) = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v12, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
        v12 += 24;
        v32 -= 24;
      }
      while (v32);
      this[102] = v31;
    }
    else
    {
      v60 = (char *)(this + 103);
      v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v13) >> 3);
      v18 = 2 * v17;
      if (2 * v17 <= v11)
        v18 = v11;
      if (v17 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v19);
      v21 = 3 * v14;
      v22 = &v20[24 * v14];
      *(_QWORD *)&v57 = v20;
      *((_QWORD *)&v57 + 1) = v22;
      v58 = v22;
      v59 = &v20[24 * v23];
      v24 = 3 * v11;
      v25 = &v20[24 * v11];
      v26 = 8 * v24 - 8 * v21;
      do
      {
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
        *((_QWORD *)v22 + 2) = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v22, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
        v22 += 24;
        v26 -= 24;
      }
      while (v26);
      v58 = v25;
      std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(this + 101, &v57);
      std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)&v57);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v33 = *((unsigned int *)this + 193);
  LODWORD(v57) = 1065353216;
  std::vector<float>::resize(this + 98, v33, &v57);
}

void sub_18F06C5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 65) < 0)
    operator delete(*(void **)(v35 - 88));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void DSPGraph::SumBox::~SumBox(DSPGraph::SumBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::SumBox::ClassName(DSPGraph::SumBox *this)
{
  return "sum";
}

double DSPGraph::SumBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.49819016e248;
  *(_OWORD *)a1 = xmmword_18F117250;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

_QWORD *DSPGraph::SumBox::process(DSPGraph::SumBox *this, unsigned int a2)
{
  DSPGraph::SumBox *v2;
  uint64_t v3;
  char *v4;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  const void *v23;
  void *v24;
  const float **v25;
  float **v26;
  const float *v27;
  float *v28;
  void **v29;
  void *v30;
  int v31;
  uint64_t v32;
  _QWORD *result;
  _QWORD *v34;
  _OWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unsigned int *v46;
  DSPGraph::SumBox *v47;
  uint64_t v48;
  void **v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v2 = this;
  v4 = (char *)this + 88;
  v3 = *((_QWORD *)this + 11);
  v47 = v2;
  if (*((_QWORD *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v51, "out");
    v44 = (_QWORD *)((char *)v2 + 32);
    if (*((char *)v2 + 55) < 0)
      v44 = (_QWORD *)*v44;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v50, v44, (uint64_t)(*((_QWORD *)v2 + 12) - *((_QWORD *)v2 + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v52, 1418, &v51, &v50);
  }
  v6 = *(unsigned int **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) + 56) + 80);
  v7 = *v6;
  v8 = *((_QWORD *)v2 + 8);
  v9 = *((_QWORD *)v2 + 9);
  v10 = 4 * a2;
  if (((v9 - v8) & 0x1FFFFFFFE0) != 0)
  {
    v11 = 0;
    v13 = ((v9 - v8) & 0x1FFFFFFFE0) != 0x20 || (_DWORD)v7 != 1;
    v14 = (v9 - v8) >> 5;
    v46 = v6;
    v48 = *v6;
    v49 = (void **)(v6 + 4);
    LOBYTE(v15) = 1;
    do
    {
      if (v14 <= v11)
      {
        std::string::basic_string[abi:ne180100]<0>(&v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v51, "in");
        v43 = (_QWORD *)((char *)v47 + 32);
        if (*((char *)v47 + 55) < 0)
          v43 = (_QWORD *)*v43;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v50, v43, (uint64_t)(*((_QWORD *)v47 + 9) - *((_QWORD *)v47 + 8)) >> 5, v11);
        DSPGraph::ThrowException(1919837985, &v52, 1410, &v51, &v50);
      }
      v16 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v8 + 32 * v11) + 40))(v8 + 32 * v11);
      v17 = *((_QWORD *)v2 + 8);
      if (v11 >= (*((_QWORD *)v2 + 9) - v17) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(&v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v51, "in");
        v42 = (_QWORD *)((char *)v47 + 32);
        if (*((char *)v47 + 55) < 0)
          v42 = (_QWORD *)*v42;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v50, v42, (uint64_t)(*((_QWORD *)v47 + 9) - *((_QWORD *)v47 + 8)) >> 5, v11);
        DSPGraph::ThrowException(1919837985, &v52, 1410, &v51, &v50);
      }
      v18 = *(_DWORD **)(*(_QWORD *)(v16 + 56) + 80);
      if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v17 + 32 * v11) + 40))(v17 + 32 * v11)
                                 + 56)
                     + 72) & 0x10) == 0)
      {
        if ((v15 & 1) != 0)
        {
          if (*v18)
          {
            v19 = 0;
            v20 = 0;
            v21 = v49;
            v22 = 4;
            do
            {
              v23 = *(const void **)&v18[v22];
              v24 = *v21;
              *((_DWORD *)v21 - 1) = v10;
              if (v20 == v19)
              {
                if (v23 != v24)
                  memcpy(v24, v23, 4 * a2);
              }
              else
              {
                vDSP_vadd((const float *)v23, 1, (const float *)v24, 1, (float *)v24, 1, a2);
              }
              ++v19;
              v20 += v13;
              v22 += 4;
              v21 += 2 * v13;
            }
            while (v19 < *v18);
            LOBYTE(v15) = 0;
            v2 = v47;
          }
          else
          {
            LOBYTE(v15) = 0;
          }
        }
        else
        {
          v15 = v48;
          if ((_DWORD)v48)
          {
            v25 = (const float **)(v18 + 4);
            v26 = (float **)v49;
            do
            {
              v27 = *v25;
              v25 += 2;
              v28 = *v26;
              *((_DWORD *)v26 - 1) = v10;
              vDSP_vadd(v27, 1, v28, 1, v28, 1, a2);
              v26 += 2;
              --v15;
            }
            while (v15);
          }
        }
      }
      ++v11;
      v8 = *((_QWORD *)v2 + 8);
      v9 = *((_QWORD *)v2 + 9);
      v14 = (v9 - v8) >> 5;
    }
    while (v11 < v14);
    if ((v15 & 1) == 0)
    {
      v31 = 0;
      goto LABEL_36;
    }
    v7 = v48;
    v6 = v46;
  }
  if ((_DWORD)v7)
  {
    v29 = (void **)(v6 + 4);
    do
    {
      v30 = *v29;
      *((_DWORD *)v29 - 1) = v10;
      bzero(v30, 4 * a2);
      v29 += 2;
      --v7;
    }
    while (v7);
    v8 = *((_QWORD *)v2 + 8);
    v9 = *((_QWORD *)v2 + 9);
  }
  v31 = 16;
LABEL_36:
  if (v9 == v8)
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v51, "in");
    v45 = (_QWORD *)((char *)v47 + 32);
    if (*((char *)v47 + 55) < 0)
      v45 = (_QWORD *)*v45;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v50, v45, (uint64_t)(*((_QWORD *)v47 + 9) - *((_QWORD *)v47 + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v52, 1410, &v51, &v50);
  }
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  result = (_QWORD *)*((_QWORD *)v2 + 11);
  v34 = (_QWORD *)*((_QWORD *)v2 + 12);
  if (result != v34)
  {
    v35 = (_OWORD *)(*(_QWORD *)(v32 + 56) + 8);
    v36 = (_QWORD *)*((_QWORD *)v2 + 11);
    do
    {
      v37 = *v36;
      v36 += 4;
      v38 = *(_QWORD *)((*(uint64_t (**)(void))(v37 + 40))() + 56);
      v40 = v35[2];
      v39 = v35[3];
      v41 = v35[1];
      *(_OWORD *)(v38 + 8) = *v35;
      *(_OWORD *)(v38 + 24) = v41;
      *(_OWORD *)(v38 + 40) = v40;
      *(_OWORD *)(v38 + 56) = v39;
      *(_DWORD *)(v38 + 72) = v31;
      result = v36;
    }
    while (v36 != v34);
  }
  return result;
}

void sub_18F06CBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::SumBox::initialize(DSPGraph::SumBox *this)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (((*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) & 0x1FFFFFFFE0) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v16, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v15, "SumBox has no inputs");
    DSPGraph::ThrowException(1970168609, &v17, 2938, &v16, &v15);
  }
  DSPGraph::Box::initialize(this);
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v16, "out");
    v14 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v14 = (_QWORD *)*v14;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v15, v14, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v17, 1418, &v16, &v15);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v4 = *(_DWORD **)(result + 120);
  v5 = v4[2];
  if (v5 == 1819304813)
  {
    v6 = v4[3];
    if ((v6 & 1) == 0 || v4[8] != 32)
      goto LABEL_29;
  }
  else
  {
    if (v5 != 1718773105 || v4[8] != 64)
    {
LABEL_29:
      std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v16, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v15, "SumBox output format must be non-interleaved float");
      DSPGraph::ThrowException(1718449215, &v17, 2946, &v16, &v15);
    }
    v6 = v4[3];
  }
  if ((v6 & 0x20) == 0)
    goto LABEL_29;
  v7 = *((_QWORD *)this + 8);
  v8 = *((_QWORD *)this + 9);
  while (v7 != v8)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    v9 = *(_DWORD **)(result + 120);
    v10 = v9[2];
    if (v10 == 1819304813)
    {
      v11 = v9[3];
      if ((v11 & 1) == 0 || v9[8] != 32)
        goto LABEL_26;
    }
    else
    {
      if (v10 != 1718773105 || v9[8] != 64)
      {
LABEL_26:
        std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v16, "initialize");
        std::string::basic_string[abi:ne180100]<0>(&v15, "SumBox input format must be non-interleaved float");
        DSPGraph::ThrowException(1718449215, &v17, 2951, &v16, &v15);
      }
      v11 = v9[3];
    }
    if ((v11 & 0x20) == 0)
      goto LABEL_26;
    v12 = v9[7];
    v13 = v4[7];
    if (v12 != v13)
    {
      if (((*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) & 0x1FFFFFFFE0) != 0x20)
      {
        std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v16, "initialize");
        std::string::basic_string[abi:ne180100]<0>(&v15, "SumBox channel mismatch");
        DSPGraph::ThrowException(1718449215, &v17, 2958, &v16, &v15);
      }
      if (v13 != 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v16, "initialize");
        std::string::basic_string[abi:ne180100]<0>(&v15, "SumBox output channel count must be mono or matched when input is single-bus");
        DSPGraph::ThrowException(1718449215, &v17, 2956, &v16, &v15);
      }
    }
    v7 += 32;
  }
  return result;
}

void sub_18F06CFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void DSPGraph::MixBox::~MixBox(DSPGraph::MixBox *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2911CF8;
  v2 = (void *)*((_QWORD *)this + 100);
  if (v2)
  {
    *((_QWORD *)this + 101) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 97);
  if (v3)
  {
    *((_QWORD *)this + 98) = v3;
    operator delete(v3);
  }
  DSPGraph::Box::~Box(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2911CF8;
  v2 = (void *)*((_QWORD *)this + 100);
  if (v2)
  {
    *((_QWORD *)this + 101) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 97);
  if (v3)
  {
    *((_QWORD *)this + 98) = v3;
    operator delete(v3);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::MixBox::ClassName(DSPGraph::MixBox *this)
{
  return "mix";
}

_QWORD *DSPGraph::MixBox::setParameter(_QWORD *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v5 = this[97];
  if (a4 >= (unint64_t)((this[98] - v5) >> 2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "MixBox::setParameter");
    DSPGraph::ThrowException(1919837985, &v8, 3057, &v7, &v6);
  }
  *(float *)(v5 + 4 * a4) = a5;
  if (!*(_BYTE *)(this[1] + 762))
    *(float *)(this[100] + 4 * a4) = a5;
  return this;
}

void sub_18F06D180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

float DSPGraph::MixBox::getParameter(DSPGraph::MixBox *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *((_QWORD *)this + 97);
  if (a4 >= (unint64_t)((*((_QWORD *)this + 98) - v4) >> 2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "MixBox::getParameter");
    DSPGraph::ThrowException(1919837985, &v8, 3074, &v7, &v6);
  }
  return *(float *)(v4 + 4 * a4);
}

void sub_18F06D258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::MixBox::getParameterList(int a1@<W1>, _QWORD *a2@<X8>)
{
  _DWORD *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 == 1)
  {
    v4 = operator new(4uLL);
    *a2 = v4;
    *v4++ = 0;
    a2[1] = v4;
    a2[2] = v4;
  }
}

__n128 DSPGraph::MixBox::getParameterInfo@<Q0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  int v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1 == 1)
  {
    if (!a2)
    {
      v15 = 0;
      v13 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v14.n128_u32[0] = 14;
      *(unint64_t *)((char *)v14.n128_u64 + 4) = 0x40000000C0000000;
      v14.n128_u32[3] = 1065353216;
      strlcpy((char *)&v9, "gain", 0x34uLL);
      *((_QWORD *)&v13 + 1) = CFSTR("gain");
      LODWORD(v15) = v15 | 0xC8000000;
      v6 = v10;
      *(_OWORD *)a3 = v9;
      *(_OWORD *)(a3 + 16) = v6;
      v7 = v12;
      *(_OWORD *)(a3 + 32) = v11;
      *(_OWORD *)(a3 + 48) = v7;
      result = v14;
      *(_OWORD *)(a3 + 64) = v13;
      *(__n128 *)(a3 + 80) = result;
      *(_QWORD *)(a3 + 96) = v15;
      *(_BYTE *)(a3 + 104) = 1;
      return result;
    }
    v5 = -10878;
  }
  else
  {
    v5 = -10866;
  }
  *(_DWORD *)a3 = v5;
  *(_BYTE *)(a3 + 104) = 0;
  return result;
}

void sub_18F06D3E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

double DSPGraph::MixBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.1238952e219;
  *(_OWORD *)a1 = xmmword_18F117260;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

_QWORD *DSPGraph::MixBox::process(DSPGraph::MixBox *this, unsigned int a2)
{
  uint64_t v3;
  char *v4;
  unsigned int *v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const float **v19;
  float **v20;
  uint64_t v21;
  const float *v22;
  float *v23;
  const float **v24;
  float **v25;
  uint64_t v26;
  const float *v27;
  float *v28;
  const float **v29;
  float **v30;
  uint64_t v31;
  const float *v32;
  float *v33;
  const float **v34;
  float **v35;
  uint64_t v36;
  const float *v37;
  float *v38;
  void **v39;
  void *v40;
  int v41;
  uint64_t v42;
  _QWORD *result;
  _QWORD *v44;
  _OWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  float __Start;
  float __B;
  __int128 v58;
  __int128 v59;
  __int128 __Step;

  v4 = (char *)this + 88;
  v3 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Step, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v59, "out");
    v54 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v54 = (_QWORD *)*v54;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v58, v54, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Step, 1418, &v59, &v58);
  }
  v6 = *(unsigned int **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) + 56) + 80);
  v7 = *v6;
  v8 = 4 * a2;
  v9 = *((_QWORD *)this + 8);
  v10 = *((_QWORD *)this + 9);
  if (((v10 - v9) & 0x1FFFFFFFE0) == 0)
    goto LABEL_29;
  v11 = 0;
  v12 = (v10 - v9) >> 5;
  v13 = (float)a2;
  v14 = 1;
  do
  {
    if (v12 <= v11)
    {
      std::string::basic_string[abi:ne180100]<0>(&__Step, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v59, "in");
      v53 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v53 = (_QWORD *)*v53;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v58, v53, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, v11);
      DSPGraph::ThrowException(1919837985, &__Step, 1410, &v59, &v58);
    }
    v15 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v9 + 32 * v11) + 40))(v9 + 32 * v11);
    __B = 0.0;
    v16 = *(_QWORD *)(v15 + 56);
    __B = *(float *)(*((_QWORD *)this + 97) + 4 * v11);
    __Start = 0.0;
    v17 = *(_QWORD *)(v16 + 80);
    __Start = *(float *)(*((_QWORD *)this + 100) + 4 * v11);
    v18 = *((_QWORD *)this + 8);
    if (v11 >= (*((_QWORD *)this + 9) - v18) >> 5)
    {
      std::string::basic_string[abi:ne180100]<0>(&__Step, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v59, "in");
      v52 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v52 = (_QWORD *)*v52;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v58, v52, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, v11);
      DSPGraph::ThrowException(1919837985, &__Step, 1410, &v59, &v58);
    }
    if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v18 + 32 * v11) + 40))(v18 + 32 * v11)
                               + 56)
                   + 72) & 0x10) == 0
      && __B != 0.0)
    {
      if ((v14 & 1) != 0)
      {
        if (__B == __Start)
        {
          if ((_DWORD)v7)
          {
            v19 = (const float **)(v17 + 16);
            v20 = (float **)(v6 + 4);
            v21 = v7;
            do
            {
              v22 = *v19;
              v19 += 2;
              v23 = *v20;
              *((_DWORD *)v20 - 1) = v8;
              vDSP_vsmul(v22, 1, &__B, v23, 1, a2);
              v20 += 2;
              --v21;
            }
            while (v21);
          }
        }
        else
        {
          *(float *)&__Step = (float)(__B - __Start) / v13;
          if ((_DWORD)v7)
          {
            v29 = (const float **)(v17 + 16);
            v30 = (float **)(v6 + 4);
            v31 = v7;
            do
            {
              v32 = *v29;
              v29 += 2;
              v33 = *v30;
              *((_DWORD *)v30 - 1) = v8;
              vDSP_vrampmul(v32, 1, &__Start, (const float *)&__Step, v33, 1, a2);
              v30 += 2;
              --v31;
            }
            while (v31);
          }
        }
      }
      else if (__B == __Start)
      {
        if ((_DWORD)v7)
        {
          v24 = (const float **)(v17 + 16);
          v25 = (float **)(v6 + 4);
          v26 = v7;
          do
          {
            v27 = *v24;
            v24 += 2;
            v28 = *v25;
            *((_DWORD *)v25 - 1) = v8;
            vDSP_vsma(v27, 1, &__B, v28, 1, v28, 1, a2);
            v25 += 2;
            --v26;
          }
          while (v26);
        }
      }
      else
      {
        *(float *)&__Step = (float)(__B - __Start) / v13;
        if ((_DWORD)v7)
        {
          v34 = (const float **)(v17 + 16);
          v35 = (float **)(v6 + 4);
          v36 = v7;
          do
          {
            v37 = *v34;
            v34 += 2;
            v38 = *v35;
            *((_DWORD *)v35 - 1) = v8;
            vDSP_vrampmuladd(v37, 1, &__Start, (const float *)&__Step, v38, 1, a2);
            v35 += 2;
            --v36;
          }
          while (v36);
        }
      }
      v14 = 0;
    }
    *(float *)(*((_QWORD *)this + 100) + 4 * v11++) = __B;
    v9 = *((_QWORD *)this + 8);
    v10 = *((_QWORD *)this + 9);
    v12 = (v10 - v9) >> 5;
  }
  while (v11 < v12);
  if ((v14 & 1) == 0)
  {
    v41 = 0;
  }
  else
  {
LABEL_29:
    if ((_DWORD)v7)
    {
      v39 = (void **)(v6 + 4);
      do
      {
        v40 = *v39;
        *((_DWORD *)v39 - 1) = v8;
        bzero(v40, v8);
        v39 += 2;
        --v7;
      }
      while (v7);
      v9 = *((_QWORD *)this + 8);
      v10 = *((_QWORD *)this + 9);
    }
    v41 = 16;
  }
  if (v10 == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Step, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v59, "in");
    v55 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v55 = (_QWORD *)*v55;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v58, v55, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Step, 1410, &v59, &v58);
  }
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  result = (_QWORD *)*((_QWORD *)this + 11);
  v44 = (_QWORD *)*((_QWORD *)this + 12);
  if (result != v44)
  {
    v45 = (_OWORD *)(*(_QWORD *)(v42 + 56) + 8);
    v46 = result;
    do
    {
      v47 = *v46;
      v46 += 4;
      v48 = *(_QWORD *)((*(uint64_t (**)(void))(v47 + 40))() + 56);
      v50 = v45[2];
      v49 = v45[3];
      v51 = v45[1];
      *(_OWORD *)(v48 + 8) = *v45;
      *(_OWORD *)(v48 + 24) = v51;
      *(_OWORD *)(v48 + 40) = v50;
      *(_OWORD *)(v48 + 56) = v49;
      *(_DWORD *)(v48 + 72) = v41;
      result = v46;
    }
    while (v46 != v44);
  }
  return result;
}

void sub_18F06D8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::MixBox::initialize(DSPGraph::MixBox *this)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  BOOL v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (((*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) & 0x1FFFFFFFE0) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v11, "MixBox has no inputs");
    DSPGraph::ThrowException(1970168609, &v13, 3024, &v12, &v11);
  }
  DSPGraph::Box::initialize(this);
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v12, "out");
    v10 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v10 = (_QWORD *)*v10;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v11, v10, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v13, 1418, &v12, &v11);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v4 = *(_DWORD **)(result + 120);
  if (v4[2] != 1819304813 || (v4[3] & 1) == 0 || (v4[8] == 32 ? (v5 = (v4[3] & 0x20) == 0) : (v5 = 1), v5))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v11, "MixBox output format must be non-interleaved float");
    DSPGraph::ThrowException(1718449215, &v13, 3033, &v12, &v11);
  }
  v7 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  while (v7 != v6)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    v8 = *(_DWORD **)(result + 120);
    if (v8[2] != 1819304813 || (v8[3] & 1) == 0 || (v8[8] == 32 ? (v9 = (v8[3] & 0x20) == 0) : (v9 = 1), v9))
    {
      std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v11, "MixBox input format must be non-interleaved float");
      DSPGraph::ThrowException(1718449215, &v13, 3039, &v12, &v11);
    }
    if (v8[7] != v4[7])
    {
      std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v11, "MixBox channel mismatch");
      DSPGraph::ThrowException(1718449215, &v13, 3043, &v12, &v11);
    }
    v7 += 32;
  }
  return result;
}

void sub_18F06DBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

char *DSPGraph::MixBox::reset(DSPGraph::MixBox *this)
{
  return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 800, *((char **)this + 97), *((_QWORD *)this + 98), (uint64_t)(*((_QWORD *)this + 98) - *((_QWORD *)this + 97)) >> 2);
}

void DSPGraph::ChannelJoinerBox::~ChannelJoinerBox(DSPGraph::ChannelJoinerBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::ChannelJoinerBox::ClassName(DSPGraph::ChannelJoinerBox *this)
{
  return "ChannelJoiner";
}

double DSPGraph::ChannelJoinerBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 7.37152887e170;
  *(_OWORD *)a1 = xmmword_18F1172C0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::ChannelJoinerBox::hasPresetData(DSPGraph::ChannelJoinerBox *this)
{
  return 0;
}

uint64_t DSPGraph::ChannelJoinerBox::initialize(DSPGraph::ChannelJoinerBox *this)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  DSPGraph::Box::initialize(this);
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v19, "out");
    v17 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v17 = (_QWORD *)*v17;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v18, v17, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v20, 1418, &v19, &v18);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v4 = *(_DWORD **)(result + 120);
  v5 = v4[3];
  if ((v5 & 0x20) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v19, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v18, "ChannelJoinerBox output format must be de-interleaved");
    DSPGraph::ThrowException(1718449215, &v20, 3392, &v19, &v18);
  }
  v6 = v4[2];
  if (v6 == 1819304813)
  {
    if ((v5 & 1) == 0 || v4[8] != 32)
      goto LABEL_38;
  }
  else if (v6 != 1718773105 || v4[8] != 64)
  {
LABEL_38:
    std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v19, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v18, "ChannelJoinerBox output format must be 32-bit floating-point PCM or 'freq'");
    DSPGraph::ThrowException(1718449215, &v20, 3395, &v19, &v18);
  }
  v7 = *((_QWORD *)this + 8);
  v8 = *((_QWORD *)this + 9) - v7;
  if ((v8 & 0x1FFFFFFFE0) != 0)
  {
    v9 = 0;
    v10 = 0;
    LODWORD(v11) = 0;
    v12 = v8 >> 5;
    while (1)
    {
      if (v12 <= v10)
      {
        std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v19, "in");
        v16 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v16 = (_QWORD *)*v16;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v18, v16, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, v10);
        DSPGraph::ThrowException(1919837985, &v20, 1410, &v19, &v18);
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + v9) + 40))(v7 + v9);
      v13 = *(_DWORD **)(result + 120);
      v14 = v13[3];
      if ((v14 & 0x20) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v19, "initialize");
        std::string::basic_string[abi:ne180100]<0>(&v18, "ChannelJoinerBox input format must be de-interleaved");
        DSPGraph::ThrowException(1718449215, &v20, 3403, &v19, &v18);
      }
      v15 = v13[2];
      if (v15 == 1819304813)
      {
        if ((v14 & 1) == 0 || v13[8] != 32)
          goto LABEL_30;
        if (v4[2] == 1718773105 && v4[8] == 64)
          goto LABEL_29;
      }
      else
      {
        if (v15 != 1718773105 || v13[8] != 64)
        {
LABEL_30:
          std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v19, "initialize");
          std::string::basic_string[abi:ne180100]<0>(&v18, "ChannelJoinerBox input format must be 32-bit floating-point PCM or 'freq'");
          DSPGraph::ThrowException(1718449215, &v20, 3406, &v19, &v18);
        }
        if (v4[2] != 1718773105 || v4[8] != 64)
        {
LABEL_29:
          std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v19, "initialize");
          std::string::basic_string[abi:ne180100]<0>(&v18, "ChannelJoinerBox input and output formats must be compatible");
          DSPGraph::ThrowException(1718449215, &v20, 3410, &v19, &v18);
        }
      }
      v11 = (v13[7] + v11);
      ++v10;
      v7 = *((_QWORD *)this + 8);
      v12 = (*((_QWORD *)this + 9) - v7) >> 5;
      v9 += 32;
      if (v10 >= v12)
        goto LABEL_26;
    }
  }
  v11 = 0;
LABEL_26:
  if (v4[7] != (_DWORD)v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v19, "initialize");
    DSPGraph::strprintf((DSPGraph *)"ChannelJoinerBox channel mismatch: can't join %u input channels into %u output channels", &v18, v11, v4[7]);
    DSPGraph::ThrowException(1718449215, &v20, 3417, &v19, &v18);
  }
  return result;
}

void sub_18F06E138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void DSPGraph::ChannelSplitterBox::~ChannelSplitterBox(DSPGraph::ChannelSplitterBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::ChannelSplitterBox::ClassName(DSPGraph::ChannelSplitterBox *this)
{
  return "ChannelSplitter";
}

double DSPGraph::ChannelSplitterBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 7.38215236e170;
  *(_OWORD *)a1 = xmmword_18F1172D0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::ChannelSplitterBox::hasPresetData(DSPGraph::ChannelSplitterBox *this)
{
  return 0;
}

uint64_t DSPGraph::ChannelSplitterBox::initialize(DSPGraph::ChannelSplitterBox *this)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  DSPGraph::Box::initialize(this);
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v41, "in");
    v38 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v38 = (_QWORD *)*v38;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v40, v38, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v42, 1410, &v41, &v40);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v4 = *(_DWORD **)(result + 120);
  v5 = v4[7];
  v6 = *((_QWORD *)this + 11);
  v7 = *((_QWORD *)this + 12);
  if (((v7 - v6) & 0x1FFFFFFFE0) != 0)
  {
    v8 = 0;
    v9 = 0;
    LODWORD(v10) = 0;
    v11 = (v7 - v6) >> 5;
    do
    {
      if (v11 <= v9)
      {
        std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v41, "out");
        v32 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v32 = (_QWORD *)*v32;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v40, v32, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, v9);
        DSPGraph::ThrowException(1919837985, &v42, 1418, &v41, &v40);
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + v8) + 40))(v6 + v8);
      v10 = (*(_DWORD *)(*(_QWORD *)(result + 120) + 28) + v10);
      ++v9;
      v6 = *((_QWORD *)this + 11);
      v7 = *((_QWORD *)this + 12);
      v11 = (v7 - v6) >> 5;
      v8 += 32;
    }
    while (v9 < v11);
  }
  else
  {
    v10 = 0;
  }
  v12 = v4[2];
  if (v12 == 1819304813)
  {
    v13 = v4[3];
    if ((v13 & 1) == 0)
      goto LABEL_67;
    v14 = v4[8];
    if (v14 != 32)
      goto LABEL_67;
  }
  else
  {
    if (v12 != 1718773105 || (v14 = v4[8], v14 != 64))
    {
LABEL_67:
      std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v41, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v40, "ChannelSplitterBox input format must be non-interleaved float");
      DSPGraph::ThrowException(1718449215, &v42, 3483, &v41, &v40);
    }
    v13 = v4[3];
  }
  if ((v13 & 0x20) == 0)
    goto LABEL_67;
  if ((_DWORD)v5 != (_DWORD)v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v41, "initialize");
    v39 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v39 = (_QWORD *)*v39;
    DSPGraph::strprintf((DSPGraph *)"ChannelSplitterBox %s input has %u channels but output has %u channels", &v40, v39, v5, v10);
    DSPGraph::ThrowException(1718449215, &v42, 3487, &v41, &v40);
  }
  v15 = v7 - v6;
  v16 = v15 & 0x1FFFFFFFE0;
  if ((v15 & 0x1FFFFFFFE0) != 0)
  {
    v17 = 0;
    v18 = 0;
    v19 = v15 >> 5;
    do
    {
      if (v19 <= v18)
      {
        std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v41, "out");
        v33 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v33 = (_QWORD *)*v33;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v40, v33, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, v18);
        DSPGraph::ThrowException(1919837985, &v42, 1418, &v41, &v40);
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + v17) + 40))(v6 + v17);
      v20 = *(_DWORD **)(result + 120);
      v21 = v20[2];
      if (v21 == 1819304813)
      {
        v22 = v20[3];
        if ((v22 & 1) == 0 || v20[8] != 32)
          goto LABEL_46;
      }
      else
      {
        if (v21 != 1718773105 || v20[8] != 64)
        {
LABEL_46:
          std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v41, "initialize");
          v31 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v31 = (_QWORD *)*v31;
          DSPGraph::strprintf((DSPGraph *)"ChannelSplitterBox %s output format must be non-interleaved float in time- of frequency-domain", &v40, v31);
          DSPGraph::ThrowException(1718449215, &v42, 3494, &v41, &v40);
        }
        v22 = v20[3];
      }
      if ((v22 & 0x20) == 0)
        goto LABEL_46;
      ++v18;
      v6 = *((_QWORD *)this + 11);
      v15 = *((_QWORD *)this + 12) - v6;
      v19 = v15 >> 5;
      v17 += 32;
    }
    while (v18 < (v15 >> 5));
    v12 = v4[2];
    v14 = v4[8];
    v16 = v15 & 0x1FFFFFFFE0;
  }
  if (v12 == 1718773105 && v14 == 64)
  {
    if (v16)
    {
      v23 = 0;
      v24 = 0;
      v25 = v15 >> 5;
      do
      {
        if (v25 <= v24)
        {
          std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v41, "out");
          v37 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v37 = (_QWORD *)*v37;
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v40, v37, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, v24);
          DSPGraph::ThrowException(1919837985, &v42, 1418, &v41, &v40);
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + v23) + 40))(v6 + v23);
        v26 = *(_QWORD *)(result + 120);
        if (*(_DWORD *)(v26 + 8) != 1718773105 || *(_DWORD *)(v26 + 32) != 64)
        {
          std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v41, "initialize");
          v35 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v35 = (_QWORD *)*v35;
          DSPGraph::strprintf((DSPGraph *)"ChannelSplitterBox %s output is in time-domain but input is in frequency-domain", &v40, v35);
          DSPGraph::ThrowException(1718449215, &v42, 3503, &v41, &v40);
        }
        ++v24;
        v6 = *((_QWORD *)this + 11);
        v25 = (*((_QWORD *)this + 12) - v6) >> 5;
        v23 += 32;
      }
      while (v24 < v25);
    }
  }
  else if (v16)
  {
    v27 = 0;
    v28 = 0;
    v29 = v15 >> 5;
    do
    {
      if (v29 <= v28)
      {
        std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v41, "out");
        v36 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v36 = (_QWORD *)*v36;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v40, v36, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, v28);
        DSPGraph::ThrowException(1919837985, &v42, 1418, &v41, &v40);
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + v27) + 40))(v6 + v27);
      v30 = *(_QWORD *)(result + 120);
      if (*(_DWORD *)(v30 + 8) == 1718773105 && *(_DWORD *)(v30 + 32) == 64)
      {
        std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v41, "initialize");
        v34 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v34 = (_QWORD *)*v34;
        DSPGraph::strprintf((DSPGraph *)"ChannelSplitterBox %s output is in frequency-domain but input is in time-domain", &v40, v34);
        DSPGraph::ThrowException(1718449215, &v42, 3511, &v41, &v40);
      }
      ++v28;
      v6 = *((_QWORD *)this + 11);
      v29 = (*((_QWORD *)this + 12) - v6) >> 5;
      v27 += 32;
    }
    while (v28 < v29);
  }
  return result;
}

void sub_18F06E8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void DSPGraph::ChannelCopierBox::~ChannelCopierBox(DSPGraph::ChannelCopierBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::ChannelCopierBox::ClassName(DSPGraph::ChannelCopierBox *this)
{
  return "ChannelCopier";
}

double DSPGraph::ChannelCopierBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 7.36328254e170;
  *(_OWORD *)a1 = xmmword_18F1172E0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::ChannelCopierBox::hasPresetData(DSPGraph::ChannelCopierBox *this)
{
  return 0;
}

uint64_t DSPGraph::ChannelCopierBox::process(DSPGraph::ChannelCopierBox *this, int a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  char v13;
  size_t v14;
  void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t result;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = (char *)this + 64;
  v3 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "in");
    v30 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v30 = (_QWORD *)*v30;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v37, v30, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v39, 1410, &v38, &v37);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "out");
    v31 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v31 = (_QWORD *)*v31;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v37, v31, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v39, 1418, &v38, &v37);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v10 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "in");
    v32 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v32 = (_QWORD *)*v32;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v37, v32, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v39, 1410, &v38, &v37);
  }
  v11 = *(unsigned int **)(*(_QWORD *)(v9 + 56) + 80);
  v12 = *v11;
  v13 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) + 120) + 8) == 1718773105;
  if ((_DWORD)v12)
  {
    v14 = ((4 * a2) << v13);
    v15 = (void **)(v11 + 4);
    do
    {
      *((_DWORD *)v15 - 1) = v14;
      v16 = *(void **)(v8 + 16);
      if (v16 != *v15)
        memcpy(*v15, v16, v14);
      v15 += 2;
      --v12;
    }
    while (v12);
  }
  v17 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v17)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "in");
    v33 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v33 = (_QWORD *)*v33;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v37, v33, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v39, 1410, &v38, &v37);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  v19 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v19)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "out");
    v34 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v34 = (_QWORD *)*v34;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v37, v34, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v39, 1418, &v38, &v37);
  }
  v20 = *(_QWORD *)(v18 + 56);
  v21 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19) + 56);
  v22 = *(_OWORD *)(v20 + 8);
  v23 = *(_OWORD *)(v20 + 24);
  v24 = *(_OWORD *)(v20 + 40);
  *(_OWORD *)(v21 + 56) = *(_OWORD *)(v20 + 56);
  *(_OWORD *)(v21 + 40) = v24;
  *(_OWORD *)(v21 + 24) = v23;
  *(_OWORD *)(v21 + 8) = v22;
  v25 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "in");
    v35 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v35 = (_QWORD *)*v35;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v37, v35, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v39, 1410, &v38, &v37);
  }
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
  v27 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v27)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "out");
    v36 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v36 = (_QWORD *)*v36;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v37, v36, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v39, 1418, &v38, &v37);
  }
  v28 = *(_DWORD *)(*(_QWORD *)(v26 + 56) + 72);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
  *(_DWORD *)(*(_QWORD *)(result + 56) + 72) = v28;
  return result;
}

void sub_18F06EEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ChannelCopierBox::initialize(DSPGraph::ChannelCopierBox *this)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  _DWORD *v8;
  int v9;
  int v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string v14;
  std::string v15;
  __int128 v16;
  __int128 v17;

  DSPGraph::Box::initialize(this);
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v16, "in");
    v12 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v12 = (_QWORD *)*v12;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v15, v12, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v17, 1410, &v16, (__int128 *)&v15);
  }
  v3 = *(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
  v4 = v3[2];
  if (v4 == 1819304813)
  {
    v5 = v3[3];
    if ((v5 & 1) == 0 || v3[8] != 32)
      goto LABEL_21;
  }
  else
  {
    if (v4 != 1718773105 || v3[8] != 64)
    {
LABEL_21:
      std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v16, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v15, "ChannelCopierBox input format must be mono, non-interleaved float");
      DSPGraph::ThrowException(1718449215, &v17, 3556, &v16, (__int128 *)&v15);
    }
    v5 = v3[3];
  }
  if ((v5 & 0x20) == 0 || v3[7] != 1)
    goto LABEL_21;
  v6 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v16, "out");
    v13 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v13 = (_QWORD *)*v13;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v15, v13, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v17, 1418, &v16, (__int128 *)&v15);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  v8 = *(_DWORD **)(result + 120);
  v9 = v8[2];
  if (v9 == 1819304813)
  {
    v10 = v8[3];
    if ((v10 & 1) == 0 || v8[8] != 32)
      goto LABEL_22;
  }
  else
  {
    if (v9 != 1718773105 || v8[8] != 64)
      goto LABEL_22;
    v10 = v8[3];
  }
  if ((v10 & 0x20) == 0)
  {
LABEL_22:
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v16, "initialize");
    v11 = (char *)this + 32;
    if (*((char *)this + 55) < 0)
      v11 = *(char **)v11;
    std::string::basic_string[abi:ne180100]<0>(&v14, v11);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v15, "ChannelCopierBox output format must be non-interleaved float ", &v14);
    DSPGraph::ThrowException(1718449215, &v17, 3561, &v16, (__int128 *)&v15);
  }
  return result;
}

void sub_18F06F1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (*(char *)(v24 - 41) < 0)
    operator delete(*(void **)(v24 - 64));
  if (*(char *)(v24 - 17) < 0)
    operator delete(*(void **)(v24 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::DeadEndBox::~DeadEndBox(DSPGraph::DeadEndBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::DeadEndBox::ClassName(DSPGraph::DeadEndBox *this)
{
  return "DeadEndBox";
}

double DSPGraph::DeadEndBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 4.23042584e175;
  *(_OWORD *)a1 = xmmword_18F117300;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::DeadEndBox::hasPresetData(DSPGraph::DeadEndBox *this)
{
  return 0;
}

void DSPGraph::ConstantSourceBox::~ConstantSourceBox(DSPGraph::ConstantSourceBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::ConstantSourceBox::ClassName(DSPGraph::ConstantSourceBox *this)
{
  return "ConstantSourceBox";
}

uint64_t DSPGraph::ConstantSourceBox::setParameter(uint64_t this, int a2, int a3, float a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v5, "setParameter");
      std::string::basic_string[abi:ne180100]<0>(&v4, "");
      DSPGraph::ThrowException(-10878, &v6, 3663, &v5, &v4);
    }
    *(float *)(this + 776) = a4;
  }
  else
  {
    *(float *)(this + 772) = a4;
  }
  return this;
}

void sub_18F06F390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

float DSPGraph::ConstantSourceBox::getParameter(DSPGraph::ConstantSourceBox *this, int a2, int a3)
{
  char *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v6, "getParameter");
      std::string::basic_string[abi:ne180100]<0>(&v5, "");
      DSPGraph::ThrowException(-10878, &v7, 3678, &v6, &v5);
    }
    v3 = (char *)this + 776;
  }
  else
  {
    v3 = (char *)this + 772;
  }
  return *(float *)v3;
}

void sub_18F06F46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::ConstantSourceBox::getParameterList(int a1@<W1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    v4 = operator new(8uLL);
    *a2 = v4;
    *v4++ = 0x100000000;
    a2[1] = v4;
    a2[2] = v4;
  }
}

__n128 DSPGraph::ConstantSourceBox::getParameterInfo@<Q0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  int v5;
  const __CFString *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = -10866;
LABEL_7:
    *(_DWORD *)a3 = v5;
    *(_BYTE *)(a3 + 104) = 0;
    return result;
  }
  if (a2 > 1)
  {
    v5 = -10878;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  *(unint64_t *)((char *)v15.n128_u64 + 4) = 0x41A00000C1A00000;
  if (a2)
  {
    strlcpy((char *)&v10, "imag value (freq domain only)", 0x34uLL);
    v6 = CFSTR("imag value (freq domain only)");
  }
  else
  {
    strlcpy((char *)&v10, "real value", 0x34uLL);
    v6 = CFSTR("real value");
  }
  *((_QWORD *)&v14 + 1) = v6;
  LODWORD(v16) = v16 | 0xC8000000;
  v7 = v11;
  *(_OWORD *)a3 = v10;
  *(_OWORD *)(a3 + 16) = v7;
  v8 = v13;
  *(_OWORD *)(a3 + 32) = v12;
  *(_OWORD *)(a3 + 48) = v8;
  result = v15;
  *(_OWORD *)(a3 + 64) = v14;
  *(__n128 *)(a3 + 80) = result;
  *(_QWORD *)(a3 + 96) = v16;
  *(_BYTE *)(a3 + 104) = 1;
  return result;
}

void sub_18F06F608(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

double DSPGraph::ConstantSourceBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 9.19367275e170;
  *(_OWORD *)a1 = xmmword_18F117310;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double DSPGraph::ConstantSourceBox::process(DSPGraph::ConstantSourceBox *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  vDSP_Length v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  float **v11;
  uint64_t v12;
  int v13;
  float *v14;
  const float *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  __int128 *v29;
  vDSP_Length __N;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v3 = *((_QWORD *)this + 11);
  v4 = *((_QWORD *)this + 12) - v3;
  if ((v4 & 0x1FFFFFFFE0) != 0)
  {
    v5 = 0;
    v6 = v4 >> 5;
    v31 = 4 * a2;
    __N = a2 + 1;
    v7 = a2 - 1;
    v8 = 8 * a2;
    v29 = (__int128 *)((char *)this + 784);
    do
    {
      if (v6 <= v5)
      {
        std::string::basic_string[abi:ne180100]<0>(&v34, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v33, "out");
        v25 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v25 = (_QWORD *)*v25;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v32, v25, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, v5);
        DSPGraph::ThrowException(1919837985, &v34, 1418, &v33, &v32);
      }
      v9 = *(unsigned int **)(*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v3 + 32 * v5) + 40))(v3 + 32 * v5)
                                        + 56)
                            + 80);
      v10 = *v9;
      if ((_DWORD)v10)
      {
        v11 = (float **)(v9 + 4);
        do
        {
          v12 = *((_QWORD *)this + 11);
          if (v5 >= (*((_QWORD *)this + 12) - v12) >> 5)
          {
            std::string::basic_string[abi:ne180100]<0>(&v34, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
            std::string::basic_string[abi:ne180100]<0>(&v33, "out");
            v24 = (_QWORD *)((char *)this + 32);
            if (*((char *)this + 55) < 0)
              v24 = (_QWORD *)*v24;
            DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v32, v24, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, v5);
            DSPGraph::ThrowException(1919837985, &v34, 1418, &v33, &v32);
          }
          v13 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v12 + 32 * v5) + 40))(v12 + 32 * v5)
                                      + 120)
                          + 8);
          v14 = *v11;
          v15 = (const float *)((char *)this + 772);
          if (v13 == 1718773105)
          {
            vDSP_vfill(v15, v14, 1, __N);
            vDSP_vfill((const float *)this + 194, &(*v11)[a2 + 1], 1, v7);
            v16 = v8;
          }
          else
          {
            vDSP_vfill(v15, v14, 1, a2);
            v16 = v31;
          }
          *((_DWORD *)v11 - 1) = v16;
          v11 += 2;
          --v10;
        }
        while (v10);
      }
      v17 = *((_QWORD *)this + 11);
      if (v5 >= (*((_QWORD *)this + 12) - v17) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(&v34, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v33, "out");
        v27 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v27 = (_QWORD *)*v27;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v32, v27, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, v5);
        DSPGraph::ThrowException(1919837985, &v34, 1418, &v33, &v32);
      }
      *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v17 + 32 * v5) + 40))(v17 + 32 * v5)
                            + 56)
                + 72) = 512;
      v18 = *((_QWORD *)this + 11);
      if (v5 >= (*((_QWORD *)this + 12) - v18) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(&v34, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v33, "out");
        v26 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v26 = (_QWORD *)*v26;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v32, v26, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, v5);
        DSPGraph::ThrowException(1919837985, &v34, 1418, &v33, &v32);
      }
      v19 = *(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v18 + 32 * v5) + 40))(v18 + 32 * v5)
                      + 56);
      v20 = *v29;
      v21 = v29[1];
      v22 = v29[2];
      *(_OWORD *)(v19 + 56) = v29[3];
      *(_OWORD *)(v19 + 40) = v22;
      *(_OWORD *)(v19 + 24) = v21;
      *(_OWORD *)(v19 + 8) = v20;
      ++v5;
      v3 = *((_QWORD *)this + 11);
      v6 = (*((_QWORD *)this + 12) - v3) >> 5;
    }
    while (v5 < v6);
  }
  result = *((double *)this + 98) + (double)a2;
  *((double *)this + 98) = result;
  return result;
}

void sub_18F06F9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

double DSPGraph::ConstantSourceBox::initialize(DSPGraph::ConstantSourceBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  double result;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  DSPGraph::Box::initialize(this);
  v2 = *((_QWORD *)this + 11);
  v3 = *((_QWORD *)this + 12) - v2;
  if ((v3 & 0x1FFFFFFFE0) != 0)
  {
    v4 = 0;
    v5 = 0;
    v6 = v3 >> 5;
    do
    {
      if (v6 <= v5)
      {
        std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v13, "out");
        v11 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v11 = (_QWORD *)*v11;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v12, v11, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, v5);
        DSPGraph::ThrowException(1919837985, &v14, 1418, &v13, &v12);
      }
      v7 = *(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + v4) + 40))(v2 + v4) + 120);
      v8 = v7[2];
      if (v8 == 1819304813)
      {
        v9 = v7[3];
        if ((v9 & 1) == 0 || v7[8] != 32)
          goto LABEL_14;
      }
      else
      {
        if (v8 != 1718773105 || v7[8] != 64)
        {
LABEL_14:
          std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v13, "initialize");
          std::string::basic_string[abi:ne180100]<0>(&v12, "ConstantSourceBox output format must be non-interleaved float or 'freq'");
          DSPGraph::ThrowException(1718449215, &v14, 3612, &v13, &v12);
        }
        v9 = v7[3];
      }
      if ((v9 & 0x20) == 0)
        goto LABEL_14;
      ++v5;
      v2 = *((_QWORD *)this + 11);
      v6 = (*((_QWORD *)this + 12) - v2) >> 5;
      v4 += 32;
    }
    while (v5 < v6);
  }
  *((_OWORD *)this + 49) = 0u;
  *((_QWORD *)this + 100) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_QWORD *)&result = 1;
  *((_QWORD *)this + 105) = 1;
  return result;
}

void sub_18F06FC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void DSPGraph::DecibelControlBox::~DecibelControlBox(DSPGraph::DecibelControlBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::DecibelControlBox::ClassName(DSPGraph::DecibelControlBox *this)
{
  return "DecibelControlBox";
}

uint64_t DSPGraph::DecibelControlBox::canProcessInPlace(DSPGraph::DecibelControlBox *this)
{
  return 1;
}

void DSPGraph::DecibelControlBox::setParameter(DSPGraph::DecibelControlBox *this, int a2, int a3, float a4)
{
  float v4;
  float v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = a4;
  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v8, "setParameter");
      std::string::basic_string[abi:ne180100]<0>(&v7, "");
      DSPGraph::ThrowException(-10878, &v9, 3736, &v8, &v7);
    }
    *((float *)this + 193) = __exp10f(a4 * 0.05);
  }
  else
  {
    if (a4 < 0.0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v8, "setParameter");
      std::string::basic_string[abi:ne180100]<0>(&v7, "Parameter out of range");
      DSPGraph::ThrowException(1919837985, &v9, 3728, &v8, &v7);
    }
    *((float *)this + 193) = a4;
    v6 = 1.1755e-38;
    if (v4 >= 1.1755e-38)
      v6 = v4;
    v4 = log10f(v6) * 20.0;
  }
  *((float *)this + 194) = v4;
}

void sub_18F06FDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

float DSPGraph::DecibelControlBox::getParameter(DSPGraph::DecibelControlBox *this, int a2, int a3)
{
  char *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v6, "getParameter");
      std::string::basic_string[abi:ne180100]<0>(&v5, "");
      DSPGraph::ThrowException(-10878, &v7, 3751, &v6, &v5);
    }
    v3 = (char *)this + 776;
  }
  else
  {
    v3 = (char *)this + 772;
  }
  return *(float *)v3;
}

void sub_18F06FEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::DecibelControlBox::getParameterList(int a1@<W1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    v4 = operator new(8uLL);
    *a2 = v4;
    *v4++ = 0x100000000;
    a2[1] = v4;
    a2[2] = v4;
  }
}

__n128 DSPGraph::DecibelControlBox::getParameterInfo@<Q0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  int v5;
  const __CFString *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[24];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = -10866;
LABEL_3:
    *(_DWORD *)a3 = v5;
    *(_BYTE *)(a3 + 104) = 0;
    return result;
  }
  if (a2 == 1)
  {
    *(_DWORD *)&v15[20] = 0;
    v14 = 0u;
    *(_QWORD *)&v15[12] = 0;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    *(_DWORD *)v15 = 13;
    *(_QWORD *)&v15[4] = 0x7F800000FF800000;
    strlcpy((char *)&v10, "DBValue", 0x34uLL);
    v6 = CFSTR("DBValue");
  }
  else
  {
    if (a2)
    {
      v5 = -10878;
      goto LABEL_3;
    }
    *(_QWORD *)&v15[16] = 0;
    v14 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    *(_QWORD *)v15 = 14;
    *(_QWORD *)&v15[8] = 0x3F8000007F800000;
    strlcpy((char *)&v10, "LinearValue", 0x34uLL);
    v6 = CFSTR("LinearValue");
  }
  *((_QWORD *)&v14 + 1) = v6;
  *(_DWORD *)&v15[16] |= 0xC8000000;
  v7 = v11;
  *(_OWORD *)a3 = v10;
  *(_OWORD *)(a3 + 16) = v7;
  v8 = v13;
  *(_OWORD *)(a3 + 32) = v12;
  *(_OWORD *)(a3 + 48) = v8;
  result = *(__n128 *)v15;
  *(_OWORD *)(a3 + 64) = v14;
  *(__n128 *)(a3 + 80) = result;
  *(_QWORD *)(a3 + 96) = *(_QWORD *)&v15[16];
  *(_BYTE *)(a3 + 104) = 1;
  return result;
}

void sub_18F070080(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

double DSPGraph::DecibelControlBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 3.63842702e175;
  *(_OWORD *)a1 = xmmword_18F117320;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void DSPGraph::SingleRateLPCMConverterBox::~SingleRateLPCMConverterBox(DSPGraph::SingleRateLPCMConverterBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::SingleRateLPCMConverterBox::ClassName(DSPGraph::SingleRateLPCMConverterBox *this)
{
  return "SingleRateLPCMConverterBox";
}

double DSPGraph::SingleRateLPCMConverterBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.28814877e248;
  *(_OWORD *)a1 = xmmword_18F117350;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::SingleRateLPCMConverterBox::initialize(DSPGraph::SingleRateLPCMConverterBox *this)
{
  uint64_t v2;
  uint64_t v3;
  AudioStreamBasicDescription *v4;
  uint64_t v5;
  const AudioStreamBasicDescription *v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  DSPGraph::Box::initialize(this);
  v2 = *((_QWORD *)this + 8);
  v3 = *((_QWORD *)this + 9);
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0x20
    || ((*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) & 0x1FFFFFFFE0) != 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v11, "SingleRateLPCMConverterBox only supports 1 bus in 1 bus out");
    DSPGraph::ThrowException(1718449215, &v13, 3803, &v12, &v11);
  }
  if (v3 == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v12, "in");
    v8 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v8 = (_QWORD *)*v8;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v11, v8, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v13, 1410, &v12, &v11);
  }
  v4 = *(AudioStreamBasicDescription **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
  if (v4->mFormatID != 1819304813)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v11, "SingleRateLPCMConverterBox input format must be LPCM");
    DSPGraph::ThrowException(1718449215, &v13, 3809, &v12, &v11);
  }
  if (!v4->mChannelsPerFrame)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v11, "SingleRateLPCMConverterBox input must have a non-zero number of channels");
    DSPGraph::ThrowException(1718449215, &v13, 3813, &v12, &v11);
  }
  v5 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v12, "out");
    v9 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v9 = (_QWORD *)*v9;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v11, v9, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v13, 1418, &v12, &v11);
  }
  v6 = *(const AudioStreamBasicDescription **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 120);
  if (v6->mFormatID != 1819304813)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v11, "SingleRateLPCMConverterBox output format must be non-interleaved float");
    DSPGraph::ThrowException(1718449215, &v13, 3819, &v12, &v11);
  }
  if (!v6->mChannelsPerFrame)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v11, "SingleRateLPCMConverterBox output must have a non-zero number of channels");
    DSPGraph::ThrowException(1718449215, &v13, 3823, &v12, &v11);
  }
  if (v4->mSampleRate != v6->mSampleRate)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v11, "SingleRateLPCMConverterBox input and output sample rates must match");
    DSPGraph::ThrowException(1718449215, &v13, 3827, &v12, &v11);
  }
  result = AudioConverterNewWithOptions(v4, v6, 0, (_QWORD *)this + 97);
  if ((_DWORD)result)
  {
    v10 = result;
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v11, "Error in AudioConverterNew");
    DSPGraph::ThrowException(v10, &v13, 3834, &v12, &v11);
  }
  return result;
}

void sub_18F0704E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::SingleRateLPCMConverterBox::uninitialize(DSPGraph::SingleRateLPCMConverterBox *this)
{
  OpaqueAudioConverter *v2;

  v2 = (OpaqueAudioConverter *)*((_QWORD *)this + 97);
  if (v2)
    AudioConverterDispose(v2);
  return DSPGraph::Box::uninitialize(this);
}

uint64_t DSPGraph::PropertyTap::uninitialize(uint64_t this)
{
  *(_QWORD *)(this + 48) = *(_QWORD *)(this + 40);
  return this;
}

uint64_t DSPGraph::Box::clearCachedLatency(uint64_t this)
{
  if (*(_BYTE *)(this + 760))
    *(_BYTE *)(this + 760) = 0;
  return this;
}

uint64_t DSPGraph::Box::initialized(DSPGraph::Box *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 762);
}

void DSPGraph::Box::setSubset(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 != a2)
  {
    if (v2)
      std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>((uint64_t *)(v2 + 24), a1);
    *(_QWORD *)(a1 + 24) = a2;
    if (a2)
      std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box * const&>(a2 + 24, a1, a1);
  }
}

void DSPGraph::Box::addAnalysis(DSPGraph::Box *this, unsigned int a2, int a3)
{
  std::mutex *v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t v9;
  DSPGraph::Graph *v10;
  DSPGraph::Analyzer *v11;
  unint64_t v12;
  DSPGraph::Analyzer **v13;
  DSPGraph::Analyzer *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  DSPGraph::Analyzer **v22;
  DSPGraph::Analyzer *v23;
  DSPGraph::Analyzer *v24;
  int64x2_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  DSPGraph::Analyzer *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  DSPGraph::Analyzer *v36;

  v6 = (std::mutex *)((char *)this + 248);
  std::mutex::lock((std::mutex *)((char *)this + 248));
  for (i = *((_QWORD *)this + 39); i != *((_QWORD *)this + 40); i += 8)
  {
    if (*(_DWORD *)(*(_QWORD *)i + 24) == a2 && *(_DWORD *)(*(_QWORD *)i + 80) == a3)
      goto LABEL_35;
  }
  v8 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((_QWORD *)(*((_QWORD *)this + 1) + 952), a2);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = v8[12];
  if (!v9)
    std::__throw_bad_function_call[abi:ne180100]();
  v10 = (DSPGraph::Graph *)(*(_QWORD *(**)(DSPGraph::Analyzer **__return_ptr))(*(_QWORD *)v9 + 48))(&v36);
  v11 = v36;
  if (!v36)
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v34, "addAnalysis");
    std::string::basic_string[abi:ne180100]<0>(&v33, "Box::addAnalysis, Analyzer Not Supported.");
    DSPGraph::ThrowException(1852204065, &v35, 355, &v34, &v33);
  }
  *((_DWORD *)v36 + 20) = a3;
  *((_QWORD *)v11 + 11) = DSPGraph::Graph::generateSerialNumber(v10);
  DSPGraph::Graph::addAnalyzer(*((std::mutex **)this + 1), (unint64_t)v36);
  v13 = (DSPGraph::Analyzer **)*((_QWORD *)this + 40);
  v12 = *((_QWORD *)this + 41);
  if ((unint64_t)v13 >= v12)
  {
    v16 = (_QWORD *)*((_QWORD *)this + 39);
    v17 = v13 - (DSPGraph::Analyzer **)v16;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v19 = v12 - (_QWORD)v16;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v21 = (char *)operator new(8 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = (DSPGraph::Analyzer **)&v21[8 * v17];
    v23 = v36;
    v36 = 0;
    *v22 = v23;
    v15 = v22 + 1;
    if (v13 == v16)
    {
      v25 = vdupq_n_s64((unint64_t)v13);
    }
    else
    {
      do
      {
        v24 = *--v13;
        *v13 = 0;
        *--v22 = v24;
      }
      while (v13 != v16);
      v25 = *(int64x2_t *)((char *)this + 312);
    }
    *((_QWORD *)this + 39) = v22;
    *((_QWORD *)this + 40) = v15;
    *((_QWORD *)this + 41) = &v21[8 * v20];
    v27 = (_QWORD *)v25.i64[1];
    v26 = (_QWORD *)v25.i64[0];
    while (v27 != v26)
    {
      v29 = *--v27;
      v28 = v29;
      *v27 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
    if (v26)
      operator delete(v26);
  }
  else
  {
    v14 = v36;
    v36 = 0;
    *v13 = v14;
    v15 = v13 + 1;
  }
  *((_QWORD *)this + 40) = v15;
  v30 = (unsigned int *)((char *)this + 768);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  v32 = v36;
  v36 = 0;
  if (v32)
    (*(void (**)(DSPGraph::Analyzer *))(*(_QWORD *)v32 + 8))(v32);
LABEL_35:
  std::mutex::unlock(v6);
}

void sub_18F0708B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27)
{
  std::mutex *v27;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 8))(a27);
  std::mutex::unlock(v27);
  _Unwind_Resume(a1);
}

void DSPGraph::Box::removeAnalysis(DSPGraph::Box *this, int a2, int a3)
{
  std::mutex *v6;
  DSPGraph::Analyzer **v7;
  DSPGraph::Analyzer **v8;
  DSPGraph::Analyzer **v9;
  DSPGraph::Analyzer **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  v6 = (std::mutex *)((char *)this + 248);
  std::mutex::lock((std::mutex *)((char *)this + 248));
  v8 = (DSPGraph::Analyzer **)*((_QWORD *)this + 39);
  v7 = (DSPGraph::Analyzer **)*((_QWORD *)this + 40);
  if (v8 != v7)
  {
    while (*((_DWORD *)*v8 + 6) != a2 || *((_DWORD *)*v8 + 20) != a3)
    {
      if (++v8 == v7)
        goto LABEL_17;
    }
  }
  if (v8 != v7)
  {
    caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::remove((uint64_t)this + 336, a2);
    DSPGraph::Graph::removeAnalyzer(*((std::mutex **)this + 1), *v8);
    v9 = v8 + 1;
    v10 = (DSPGraph::Analyzer **)*((_QWORD *)this + 40);
    if (v8 + 1 != v10)
    {
      do
      {
        v8 = v9;
        v11 = (uint64_t)*(v9 - 1);
        *(v9 - 1) = *v9;
        *v9 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        ++v9;
      }
      while (v8 + 1 != v10);
      v9 = (DSPGraph::Analyzer **)*((_QWORD *)this + 40);
    }
    while (v9 != v8)
    {
      v13 = (uint64_t)*--v9;
      v12 = v13;
      *v9 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    *((_QWORD *)this + 40) = v8;
    v14 = (unsigned int *)((char *)this + 768);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
  }
LABEL_17:
  std::mutex::unlock(v6);
}

void sub_18F070A44(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Box::hasAnalysis(DSPGraph::Box *this, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = *((_QWORD *)this + 11);
  v4 = *((_QWORD *)this + 12) - v3;
  if ((v4 & 0x1FFFFFFFE0) == 0)
    goto LABEL_12;
  if (a3 >= (unint64_t)(v4 >> 5))
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v13, "out");
    v11 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v11 = (_QWORD *)*v11;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v12, v11, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, a3);
    DSPGraph::ThrowException(1919837985, &v14, 1434, &v13, &v12);
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 32 * a3) + 40))(v3 + 32 * a3);
  if (!v7)
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "hasAnalysis");
    std::string::basic_string[abi:ne180100]<0>(&v12, "Box::hasAnalysis, Port Not Connected to Box.");
    DSPGraph::ThrowException(1970168609, &v14, 429, &v13, &v12);
  }
  for (i = *((_QWORD *)this + 39); ; i += 8)
  {
    if (i == *((_QWORD *)this + 40))
      return 0;
    if (*(_QWORD *)(*(_QWORD *)i + 8) == v7 && *(_DWORD *)(*(_QWORD *)i + 24) == a2)
      break;
  }
  return 1;
}

void sub_18F070BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::getAnalysisCount(DSPGraph::Box *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = *((_QWORD *)this + 11);
  v3 = *((_QWORD *)this + 12) - v2;
  if ((v3 & 0x1FFFFFFFE0) == 0)
    return 0;
  if (a2 >= (unint64_t)(v3 >> 5))
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v14, "out");
    v11 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v11 = (_QWORD *)*v11;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v13, v11, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, a2);
    DSPGraph::ThrowException(1919837985, &v15, 1434, &v14, &v13);
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 32 * a2) + 40))(v2 + 32 * a2);
  if (!v5)
    return 0;
  v6 = (uint64_t *)*((_QWORD *)this + 39);
  v7 = (uint64_t *)*((_QWORD *)this + 40);
  if (v6 == v7)
    return 0;
  LODWORD(v8) = 0;
  do
  {
    v9 = *v6++;
    if (*(_QWORD *)(v9 + 8) == v5)
      v8 = (v8 + 1);
    else
      v8 = v8;
  }
  while (v6 != v7);
  return v8;
}

void sub_18F070D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v25 - 17) < 0)
    operator delete(*(void **)(v25 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::addRenderCallback(uint64_t a1, uint64_t a2, unsigned int a3, signed int a4)
{
  std::mutex *v8;
  os_unfair_lock_s *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64x2_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  std::mutex *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[3];
  char v88;
  int v89;
  _BOOL4 v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[3];
  _QWORD *v94;
  _QWORD v95[3];
  _QWORD *v96;
  unsigned int v97;
  _BYTE v98[24];
  _BYTE *v99;
  unint64_t v100;
  unint64_t v101;
  __int128 v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  int64x2_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v8 = (std::mutex *)(a1 + 672);
  std::mutex::lock((std::mutex *)(a1 + 672));
  v86 = a1;
  v9 = *(os_unfair_lock_s **)(a1 + 736);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v93, a2);
  do
  {
    v10 = __ldaxr((unsigned int *)&DSPGraph::RenderObserverList<DSPGraph::Box>::add(std::function<void ()(DSPGraph::Box*,unsigned int)>,DSPGraph::RenderCallbackType,DSPGraph::RenderCallbackOrder)::sToken);
    v11 = v10 + 1;
  }
  while (__stlxr(v10 + 1, (unsigned int *)&DSPGraph::RenderObserverList<DSPGraph::Box>::add(std::function<void ()(DSPGraph::Box*,unsigned int)>,DSPGraph::RenderCallbackType,DSPGraph::RenderCallbackOrder)::sToken));
  if (!v94)
  {
    v96 = 0;
    v97 = v10 + 1;
LABEL_11:
    v99 = 0;
    v100 = __PAIR64__(a4, a3);
    goto LABEL_18;
  }
  if (v94 == v93)
  {
    v96 = v95;
    (*(void (**)(_QWORD *, _QWORD *))(v93[0] + 24))(v93, v95);
    v12 = v96;
  }
  else
  {
    v12 = (_QWORD *)(*(uint64_t (**)(void))(*v94 + 16))();
    v96 = v12;
  }
  v97 = v11;
  if (!v12)
    goto LABEL_11;
  if (v12 == v95)
  {
    v99 = v98;
    (*(void (**)(_QWORD *, _BYTE *))(v95[0] + 24))(v95, v98);
  }
  else
  {
    v99 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
  }
  v13 = v96;
  v100 = __PAIR64__(a4, a3);
  if (v96 == v95)
  {
    v14 = 4;
    v13 = v95;
  }
  else
  {
    if (!v96)
      goto LABEL_18;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_18:
  if (a3)
    v15 = v9 + 16;
  else
    v15 = v9;
  v87[0] = (uint64_t)v15;
  v87[1] = 0;
  v87[2] = (uint64_t)&v15[1];
  v88 = 1;
  os_unfair_lock_lock(v15 + 1);
  v89 = caulk::concurrent::details::lf_read_sync_write_impl::begin_mutate((caulk::concurrent::details::lf_read_sync_write_impl *)v15);
  v90 = v89 == 0;
  v16 = caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::copy_previous(v87);
  v17 = v16;
  v18 = *v16;
  v19 = (char *)v16[1];
  v20 = (uint64_t)&v19[-*v16];
  if (v19 == (char *)*v16)
  {
    v22 = v16[1];
  }
  else
  {
    v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 4);
    v22 = *v16;
    do
    {
      v23 = v21 >> 1;
      v24 = v22 + 48 * (v21 >> 1);
      v25 = *(_DWORD *)(v24 + 44);
      v26 = v24 + 48;
      v21 += ~(v21 >> 1);
      if (v25 > a4)
        v21 = v23;
      else
        v22 = v26;
    }
    while (v21);
  }
  v27 = (v22 - v18) / 48;
  v28 = (char *)(v18 + 48 * v27);
  v29 = v16[2];
  if ((unint64_t)v19 < v29)
  {
    if (v28 == v19)
    {
      *(_DWORD *)v19 = v97;
      v38 = v98;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v18 + 48 * v27 + 8, (uint64_t)v98);
      *(_QWORD *)(v18 + 48 * v27 + 40) = v100;
      v17[1] = (uint64_t)(v19 + 48);
LABEL_95:
      v69 = v86;
      goto LABEL_96;
    }
    v83 = v8;
    v84 = (v22 - v18) / 48;
    v30 = v19 - 48;
    if ((unint64_t)v19 < 0x30)
    {
      v33 = v16[1];
    }
    else
    {
      v31 = 48 * v27 + 16 * ((v19 - (v28 + 48)) >> 4) + v18 + 8;
      v32 = v19 - 48;
      v33 = v16[1];
      do
      {
        *(_DWORD *)v33 = *(_DWORD *)(v31 - 8);
        std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100](v33 + 8, v31);
        *(_QWORD *)(v33 + 40) = *((_QWORD *)v32 + 5);
        v32 += 48;
        v33 += 48;
        v31 += 48;
      }
      while (v32 < v19);
    }
    v17[1] = v33;
    if (v19 != v28 + 48)
    {
      v42 = 0;
      do
      {
        *(_DWORD *)&v19[v42 - 48] = *(_DWORD *)&v30[v42 - 48];
        std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](&v19[v42 - 40], (uint64_t)&v30[v42 - 40]);
        *(_QWORD *)&v19[v42 - 8] = *(_QWORD *)(v18 + 16 * ((v19 - (v28 + 48)) >> 4) + 48 * v84 + v42 - 8);
        v42 -= 48;
      }
      while (-16 * ((v19 - (v28 + 48)) >> 4) != v42);
    }
    v44 = v28 <= (char *)&v97 && v17[1] > (unint64_t)&v97;
    *(_DWORD *)v28 = v97;
    v45 = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v105, (uint64_t)&v98[48 * v44]);
    v8 = v83;
    v46 = (_QWORD *)(v18 + 48 * v84 + 8);
    v38 = v98;
    if (v46 != &v105)
    {
      v47 = v107;
      v48 = *(_QWORD **)(v18 + 48 * v84 + 32);
      if (v107 == &v105)
      {
        if (v48 == v46)
        {
          ((void (*)(uint64_t, unint64_t *))v105[3])(v45, &v101);
          (*(void (**)(_QWORD *))(*v107 + 32))(v107);
          v107 = 0;
          (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v18 + 48 * v84 + 32) + 24))(*(_QWORD *)(v18 + 48 * v84 + 32), &v105);
          (*(void (**)(_QWORD))(**(_QWORD **)(v18 + 48 * v84 + 32) + 32))(*(_QWORD *)(v18 + 48 * v84 + 32));
          *(_QWORD *)(v18 + 48 * v84 + 32) = 0;
          v107 = &v105;
          (*(void (**)(unint64_t *, _QWORD *))(v101 + 24))(&v101, v46);
          (*(void (**)(unint64_t *))(v101 + 32))(&v101);
        }
        else
        {
          ((void (*)(uint64_t, uint64_t))v105[3])(v45, v18 + 48 * v84 + 8);
          (*(void (**)(_QWORD *))(*v107 + 32))(v107);
          v107 = *(_QWORD **)(v18 + 48 * v84 + 32);
        }
        *(_QWORD *)(v18 + 48 * v84 + 32) = v18 + 48 * v84 + 8;
      }
      else
      {
        if (v48 != v46)
        {
          v107 = *(_QWORD **)(v18 + 48 * v84 + 32);
          *(_QWORD *)(v18 + 48 * v84 + 32) = v47;
          goto LABEL_89;
        }
        (*(void (**)(uint64_t, _QWORD **))(*v46 + 24))(v18 + 48 * v84 + 8, &v105);
        (*(void (**)(_QWORD))(**(_QWORD **)(v18 + 48 * v84 + 32) + 32))(*(_QWORD *)(v18 + 48 * v84 + 32));
        *(_QWORD *)(v18 + 48 * v84 + 32) = v107;
        v107 = &v105;
      }
      v38 = v98;
    }
LABEL_89:
    v74 = v107;
    if (v107 == &v105)
    {
      v75 = 4;
      v74 = &v105;
    }
    else
    {
      if (!v107)
      {
LABEL_94:
        *(_QWORD *)(v18 + 48 * v84 + 40) = v100;
        goto LABEL_95;
      }
      v75 = 5;
    }
    (*(void (**)(void))(*v74 + 8 * v75))();
    goto LABEL_94;
  }
  v34 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 4) + 1;
  if (v34 > 0x555555555555555)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v18) >> 4);
  if (2 * v35 > v34)
    v34 = 2 * v35;
  if (v35 >= 0x2AAAAAAAAAAAAAALL)
    v36 = 0x555555555555555;
  else
    v36 = v34;
  v104 = v17 + 2;
  if (v36)
    v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v36);
  else
    v37 = 0;
  v39 = v36 + 48 * v27;
  v101 = v36;
  *(_QWORD *)&v102 = v39;
  *((_QWORD *)&v102 + 1) = v39;
  v103 = v36 + 48 * v37;
  v85 = (v22 - v18) / 48;
  if (v27 == v37)
  {
    if (v22 - v18 < 1)
    {
      if (v22 == v18)
        v49 = 1;
      else
        v49 = 2 * v27;
      v108 = v17 + 2;
      v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v49);
      v51 = v50;
      v52 = &v50[48 * (v49 >> 2)];
      v54 = &v50[48 * v53];
      if (*((_QWORD *)&v102 + 1) == (_QWORD)v102)
      {
        v60 = vdupq_n_s64(v102);
        v55 = &v50[48 * (v49 >> 2)];
      }
      else
      {
        v55 = &v52[*((_QWORD *)&v102 + 1) - v102];
        v56 = (uint64_t)&v50[48 * (v49 >> 2) + 8];
        v57 = v102 + 8;
        do
        {
          *(_DWORD *)(v56 - 8) = *(_DWORD *)(v57 - 8);
          v58 = std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100](v56, v57);
          *(_QWORD *)(v58 + 32) = *(_QWORD *)(v57 + 32);
          v59 = v58 + 40;
          v56 = v58 + 48;
          v57 += 48;
        }
        while ((char *)v59 != v55);
        v60 = (int64x2_t)v102;
      }
      v61 = (_QWORD *)v101;
      v62 = (_QWORD *)v103;
      v101 = (unint64_t)v51;
      *(_QWORD *)&v102 = v52;
      v106 = v60;
      *((_QWORD *)&v102 + 1) = v55;
      v103 = (unint64_t)v54;
      v105 = v61;
      v107 = v62;
      std::__split_buffer<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver> &>::~__split_buffer((uint64_t)&v105);
      v39 = *((_QWORD *)&v102 + 1);
    }
    else
    {
      v40 = v27 + 2;
      if (v27 >= -1)
        v40 = v27 + 1;
      v41 = -3 * (v40 >> 1);
      v39 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *>(v36 + 48 * v27, v39, v39 - 48 * (v40 >> 1));
      *(_QWORD *)&v102 = v102 + 16 * v41;
      *((_QWORD *)&v102 + 1) = v39;
    }
  }
  *(_DWORD *)v39 = v97;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v39 + 8, (uint64_t)v98);
  *(_QWORD *)(v39 + 40) = v100;
  v63 = v102;
  v64 = *((_QWORD *)&v102 + 1) + 48;
  *((_QWORD *)&v102 + 1) += 48;
  v65 = (char *)*v17;
  if (v28 != (char *)*v17)
  {
    v66 = 0;
    do
    {
      *(_DWORD *)(v63 + v66 - 48) = *(_DWORD *)&v28[v66 - 48];
      std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100](v63 + v66 - 40, (uint64_t)&v28[v66 - 40]);
      *(_QWORD *)(v63 + v66 - 8) = *(_QWORD *)&v28[v66 - 8];
      v66 -= 48;
    }
    while (&v28[v66] != v65);
    v63 += v66;
    v64 = *((_QWORD *)&v102 + 1);
  }
  *(_QWORD *)&v102 = v63;
  v67 = (char *)v17[1];
  v91 = v64;
  v92 = v64;
  v105 = v17 + 2;
  v106.i64[0] = (uint64_t)&v91;
  v106.i64[1] = (uint64_t)&v92;
  LOBYTE(v107) = 0;
  if (v28 == v67)
  {
    v69 = v86;
  }
  else
  {
    v68 = v18 + 48 * v85 + 8;
    v69 = v86;
    do
    {
      *(_DWORD *)v64 = *(_DWORD *)(v68 - 8);
      std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100](v64 + 8, v68);
      *(_QWORD *)(v64 + 40) = *(_QWORD *)(v68 + 32);
      v64 = v92 + 48;
      v92 += 48;
      v70 = v68 + 40;
      v68 += 48;
    }
    while ((char *)v70 != v67);
  }
  LOBYTE(v107) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v105);
  v71 = *v17;
  *v17 = v102;
  v101 = v71;
  *(_QWORD *)&v102 = v71;
  v72 = v17[1];
  v17[1] = v64;
  *((_QWORD *)&v102 + 1) = v72;
  v73 = v17[2];
  v17[2] = v103;
  v103 = v73;
  std::__split_buffer<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver> &>::~__split_buffer((uint64_t)&v101);
  v38 = v98;
LABEL_96:
  caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::~mutator((uint64_t)v87);
  v76 = v97;
  if (v99 == v98)
  {
    v77 = 4;
  }
  else
  {
    if (!v99)
      goto LABEL_101;
    v77 = 5;
    v38 = v99;
  }
  (*(void (**)(_QWORD *))(*v38 + 8 * v77))(v38);
LABEL_101:
  v78 = v94;
  if (v94 == v93)
  {
    v79 = 4;
    v78 = v93;
    goto LABEL_105;
  }
  if (v94)
  {
    v79 = 5;
LABEL_105:
    (*(void (**)(void))(*v78 + 8 * v79))();
  }
  v80 = (unsigned int *)(v69 + 768);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 + 1, v80));
  std::mutex::unlock(v8);
  return v76;
}

void sub_18F0715E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::copy_previous(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  _QWORD v15[3];
  char v16;
  void **v17[3];
  char v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *result;
  v2 = *((unsigned int *)result + 8);
  if (*(_BYTE *)(*result + v2 + 8))
  {
    v3 = result;
    v4 = v1 + 24 * v2;
    v14 = 0uLL;
    v15[0] = 0;
    v5 = *(_QWORD *)(v4 + 16);
    v6 = *(_QWORD *)(v4 + 24);
    v15[2] = &v14;
    v16 = 0;
    if (v6 != v5)
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 4);
      if (v7 >= 0x555555555555556)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      *(_QWORD *)&v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v7);
      *((_QWORD *)&v14 + 1) = v14;
      v15[0] = v14 + 48 * v8;
      v19 = v14;
      v20 = v14;
      v17[0] = (void **)v15;
      v17[1] = (void **)&v19;
      v17[2] = (void **)&v20;
      v18 = 0;
      v9 = v5 + 8;
      v10 = v14;
      do
      {
        v11 = v9 - 8;
        *(_DWORD *)v10 = *(_DWORD *)(v9 - 8);
        std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v10 + 8, v9);
        *(_QWORD *)(v10 + 40) = *(_QWORD *)(v9 + 32);
        v10 = v20 + 48;
        v20 += 48;
        v9 += 48;
      }
      while (v11 + 48 != v6);
      v18 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v17);
      *((_QWORD *)&v14 + 1) = v10;
      v1 = *v3;
    }
    v12 = *((unsigned int *)v3 + 9);
    v13 = (_QWORD *)(v1 + 24 * v12 + 16);
    if (*(_BYTE *)(v1 + 8 + v12))
    {
      v17[0] = (void **)(v1 + 24 * v12 + 16);
      std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](v17);
    }
    else
    {
      *(_BYTE *)(v1 + 8 + v12) = 1;
    }
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    *(_OWORD *)v13 = v14;
    v13[2] = v15[0];
    v14 = 0uLL;
    v15[0] = 0;
    v3[1] = (uint64_t)v13;
    v17[0] = (void **)&v14;
    std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](v17);
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_18F071840(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  __clang_call_terminate(a1);
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::~mutator(uint64_t a1)
{
  caulk::concurrent::details::lf_read_sync_write_impl *v2;
  caulk::concurrent::details::lf_read_sync_write_impl *v3;
  uint64_t v4;
  void **v6;

  v2 = *(caulk::concurrent::details::lf_read_sync_write_impl **)a1;
  if (v2 && *(_QWORD *)(a1 + 8))
  {
    caulk::concurrent::details::lf_read_sync_write_impl::end_mutate(v2);
    v3 = *(caulk::concurrent::details::lf_read_sync_write_impl **)a1;
    v4 = *(unsigned int *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)a1 + v4 + 8) = 0;
    v6 = (void **)((char *)v3 + 24 * v4 + 16);
    std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_BYTE *)(a1 + 24))
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 16));
  return a1;
}

uint64_t std::__split_buffer<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 48;
    v4 = *(_QWORD **)(v2 - 16);
    if (v4 == (_QWORD *)(v2 - 40))
    {
      v4 = (_QWORD *)(v2 - 40);
      v5 = 4;
LABEL_7:
      (*(void (**)(void))(*v4 + 8 * v5))();
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      if (v4)
      {
        v5 = 5;
        goto LABEL_7;
      }
      v2 -= 48;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (1)
    {
      if (v3 == v4)
        return a1;
      v5 = *(_QWORD **)(v3 - 16);
      if ((_QWORD *)(v3 - 40) == v5)
      {
        v5 = (_QWORD *)(v3 - 40);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_10;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
      v3 -= 48;
    }
  }
  return a1;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1 + 8;
    do
    {
      v6 = v5 - 8;
      *(_DWORD *)a3 = *(_DWORD *)(v5 - 8);
      std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((_QWORD *)(a3 + 8), v5);
      *(_QWORD *)(a3 + 40) = *(_QWORD *)(v5 + 32);
      a3 += 48;
      v5 += 48;
    }
    while (v6 + 48 != a2);
  }
  return a3;
}

void DSPGraph::Box::removeRenderCallback(DSPGraph::Box *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  std::mutex *v26;
  DSPGraph::Box *v27;
  uint64_t v28;
  uint64_t v29[3];
  char v30;
  int v31;
  _BOOL4 v32;
  _QWORD v33[2];
  int v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;
  int v38;
  _BYTE v39[24];
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v26 = (std::mutex *)((char *)this + 672);
  std::mutex::lock((std::mutex *)((char *)this + 672));
  v4 = 0;
  v27 = this;
  v5 = *((_QWORD *)this + 92) + 64;
  v33[0] = *((_QWORD *)this + 92);
  v33[1] = v5;
  do
  {
    v6 = (os_unfair_lock_s *)v33[v4];
    v29[0] = (uint64_t)v6;
    v29[1] = 0;
    v29[2] = (uint64_t)&v6[1];
    v30 = 1;
    os_unfair_lock_lock(v6 + 1);
    v31 = caulk::concurrent::details::lf_read_sync_write_impl::begin_mutate((caulk::concurrent::details::lf_read_sync_write_impl *)v6);
    v32 = v31 == 0;
    v7 = caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::copy_previous(v29);
    v8 = v7[1];
    v9 = *v7;
    v28 = *v7;
    if (*v7 == v8)
    {
LABEL_10:
      v13 = v8;
      goto LABEL_11;
    }
    while (1)
    {
      v38 = *(_DWORD *)v9;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v39, v9 + 8);
      v41 = *(_QWORD *)(v9 + 40);
      v10 = v38;
      v11 = v40;
      if (v40 == v39)
      {
        v11 = v39;
        v12 = 4;
      }
      else
      {
        if (!v40)
          goto LABEL_8;
        v12 = 5;
      }
      (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
LABEL_8:
      if (v10 == a2)
        break;
      v9 += 48;
      if (v9 == v8)
        goto LABEL_10;
    }
    v13 = v8;
    if (v9 != v8)
    {
      v19 = v9 + 48;
      v13 = v9;
      while (v19 != v8)
      {
        v34 = *(_DWORD *)v19;
        std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v35, v19 + 8);
        v37 = *(_QWORD *)(v19 + 40);
        v20 = v34;
        v21 = v36;
        if (v36 == v35)
        {
          v21 = v35;
          v22 = 4;
        }
        else
        {
          if (!v36)
            goto LABEL_30;
          v22 = 5;
        }
        (*(void (**)(_QWORD *))(*v21 + 8 * v22))(v21);
LABEL_30:
        if (v20 != a2)
        {
          *(_DWORD *)v13 = *(_DWORD *)v19;
          std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((_QWORD *)(v13 + 8), v19 + 8);
          *(_QWORD *)(v13 + 40) = *(_QWORD *)(v19 + 40);
          v13 += 48;
        }
        v19 += 48;
      }
    }
LABEL_11:
    v14 = v7[1];
    if (v13 != v14)
    {
      v13 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *>(v14, v7[1], v13);
      v15 = v7[1];
      if (v15 != v13)
      {
        while (1)
        {
          v16 = *(_QWORD **)(v15 - 16);
          if ((_QWORD *)(v15 - 40) == v16)
            break;
          if (v16)
          {
            v17 = 5;
LABEL_17:
            (*(void (**)(_QWORD *))(*v16 + 8 * v17))(v16);
          }
          v15 -= 48;
          if (v15 == v13)
            goto LABEL_19;
        }
        v16 = (_QWORD *)(v15 - 40);
        v17 = 4;
        goto LABEL_17;
      }
LABEL_19:
      v7[1] = v13;
    }
    v18 = *v7;
    caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::~mutator((uint64_t)v29);
    ++v4;
  }
  while (v4 != 2);
  if (v13 - v18 != v8 - v28)
  {
    v23 = (unsigned int *)((char *)v27 + 768);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
  }
  std::mutex::unlock(v26);
  do
    v25 = atomic_load((unsigned int *)v27 + 192);
  while ((v25 & 0x80000000) != 0);
}

void sub_18F071D6C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Box::sampleRate(DSPGraph::Box *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  v3 = *((_QWORD *)v4 + 1);
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0)
  {
    if (v3 == v2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v10, "out");
      v5 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v5 = (_QWORD *)*v5;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v9, v5, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v11, 1434, &v10, &v9);
    }
  }
  else
  {
    v2 = *((_QWORD *)this + 8);
    v6 = *((_QWORD *)this + 9);
    if (((v6 - v2) & 0x1FFFFFFFE0) == 0)
      return 1;
    if (v6 == v2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v10, "in");
      v8 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v8 = (_QWORD *)*v8;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v9, v8, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v11, 1426, &v10, &v9);
    }
  }
  return **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
}

void sub_18F071EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

double DSPGraph::Box::selfLatencyInSeconds(DSPGraph::Box *this)
{
  return (double)(unint64_t)(*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 72))(this)
       / (double)*(unint64_t *)(*((_QWORD *)this + 1) + 696);
}

double DSPGraph::Box::upstreamLatencyInSeconds(DSPGraph::Box *this)
{
  return (double)DSPGraph::Box::upstreamLatencyInTicks(this)
       / (double)*(unint64_t *)(*((_QWORD *)this + 1) + 696);
}

unint64_t DSPGraph::Box::totalLatencyInTicks(DSPGraph::Box *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 72))(this);
  return DSPGraph::Box::upstreamLatencyInTicks(this) + v2;
}

uint64_t DSPGraph::Box::totalLatencyInSamples(DSPGraph::Box *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 72))(this);
  v3 = DSPGraph::Box::upstreamLatencyInTicks(this) + v2;
  v4 = v3 * DSPGraph::Box::sampleRate(this);
  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 696);
  v6 = v4 / v5;
  LOBYTE(v7) = 0;
  if (v4 / v5 < 0x100000000)
    v7 = v4 / v5;
  v8 = HIDWORD(v6);
  v9 = v6 & 0xFFFFFF00 | v7;
  if (v5 > v4)
    v10 = 0;
  else
    v10 = -1;
  if (v8)
    return v10;
  else
    return v9;
}

_QWORD *DSPGraph::Box::propagateFlagsAndTimeStamp(DSPGraph::Box *this, int a2, const AudioTimeStamp *a3)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  result = (_QWORD *)*((_QWORD *)this + 11);
  v5 = (_QWORD *)*((_QWORD *)this + 12);
  if (result != v5)
  {
    v8 = result;
    do
    {
      v9 = *v8;
      v8 += 4;
      v10 = *(_QWORD *)((*(uint64_t (**)(void))(v9 + 40))() + 56);
      v12 = *(_OWORD *)&a3->mSMPTETime.mSubframes;
      v11 = *(_OWORD *)&a3->mSMPTETime.mHours;
      v13 = *(_OWORD *)&a3->mRateScalar;
      *(_OWORD *)(v10 + 8) = *(_OWORD *)&a3->mSampleTime;
      *(_OWORD *)(v10 + 24) = v13;
      *(_OWORD *)(v10 + 40) = v12;
      *(_OWORD *)(v10 + 56) = v11;
      *(_DWORD *)(v10 + 72) = a2;
      result = v8;
    }
    while (v8 != v5);
  }
  return result;
}

void DSPGraph::Box::addParameterTap(DSPGraph::Box *this, const DSPGraph::ParameterTap *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned int *v18;
  unsigned int v19;

  v5 = (char *)*((_QWORD *)this + 20);
  v4 = *((_QWORD *)this + 21);
  if ((unint64_t)v5 >= v4)
  {
    v9 = (char *)*((_QWORD *)this + 19);
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v9) >> 3) + 1;
    if (v10 > 0x666666666666666)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (_QWORD)v9) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(40 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * ((v5 - v9) >> 3)];
    v15 = *((_OWORD *)a2 + 1);
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_OWORD *)v14 + 1) = v15;
    *((_QWORD *)v14 + 4) = *((_QWORD *)a2 + 4);
    v8 = v14 + 40;
    if (v5 != v9)
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 40);
        v17 = *(_OWORD *)(v5 - 24);
        *(_QWORD *)(v14 - 11) = *(_QWORD *)(v5 - 11);
        *(_OWORD *)(v14 - 24) = v17;
        *(_OWORD *)(v14 - 40) = v16;
        v14 -= 40;
        v5 -= 40;
      }
      while (v5 != v9);
      v5 = (char *)*((_QWORD *)this + 19);
    }
    *((_QWORD *)this + 19) = v14;
    *((_QWORD *)this + 20) = v8;
    *((_QWORD *)this + 21) = &v13[40 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = *(_OWORD *)a2;
    v7 = *((_OWORD *)a2 + 1);
    *((_QWORD *)v5 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    v8 = v5 + 40;
  }
  *((_QWORD *)this + 20) = v8;
  v18 = (unsigned int *)((char *)this + 768);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
}

uint64_t DSPGraph::Box::addPropertyTap(int64x2_t *this, const DSPGraph::PropertyTap *a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  char *v29;
  int64x2_t v30;
  char *v31;
  int64x2_t *v32;

  v4 = this[12].u64[0];
  v5 = this[11].u64[1];
  if (v5 >= v4)
  {
    v10 = this[11].i64[0];
    v11 = (uint64_t)(v5 - v10) >> 6;
    if ((unint64_t)(v11 + 1) >> 58)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v4 - v10;
    v13 = v12 >> 5;
    if (v12 >> 5 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0)
      v14 = 0x3FFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v32 = this + 12;
    if (v14)
    {
      if (v14 >> 58)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(v14 << 6);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[64 * v11];
    v29 = v15;
    v30.i64[0] = (uint64_t)v16;
    v30.i64[1] = (uint64_t)v16;
    v31 = &v15[64 * v14];
    v17 = *((_OWORD *)a2 + 1);
    *(_OWORD *)v16 = *(_OWORD *)a2;
    *((_OWORD *)v16 + 1) = v17;
    *(_QWORD *)(v16 + 29) = *(_QWORD *)((char *)a2 + 29);
    *((_QWORD *)v16 + 6) = 0;
    *((_QWORD *)v16 + 7) = 0;
    v18 = (const void *)*((_QWORD *)a2 + 5);
    v19 = *((_QWORD *)a2 + 6);
    *((_QWORD *)v16 + 5) = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)v16 + 5, v18, v19, v19 - (_QWORD)v18);
    v20 = v30.i64[0];
    v9 = v30.i64[1] + 64;
    v30.i64[1] += 64;
    v22 = this[11].i64[0];
    v21 = this[11].u64[1];
    if (v21 == v22)
    {
      v25 = vdupq_n_s64(v21);
    }
    else
    {
      do
      {
        v23 = *(_OWORD *)(v21 - 64);
        v24 = *(_OWORD *)(v21 - 48);
        *(_QWORD *)(v20 - 35) = *(_QWORD *)(v21 - 35);
        *(_OWORD *)(v20 - 64) = v23;
        *(_OWORD *)(v20 - 48) = v24;
        *(_QWORD *)(v20 - 16) = 0;
        *(_QWORD *)(v20 - 8) = 0;
        *(_QWORD *)(v20 - 24) = 0;
        *(_OWORD *)(v20 - 24) = *(_OWORD *)(v21 - 24);
        *(_QWORD *)(v20 - 8) = *(_QWORD *)(v21 - 8);
        v20 -= 64;
        *(_QWORD *)(v21 - 24) = 0;
        *(_QWORD *)(v21 - 16) = 0;
        *(_QWORD *)(v21 - 8) = 0;
        v21 -= 64;
      }
      while (v21 != v22);
      v25 = this[11];
      v9 = v30.i64[1];
    }
    this[11].i64[0] = v20;
    this[11].i64[1] = v9;
    v30 = v25;
    v26 = (char *)this[12].i64[0];
    this[12].i64[0] = (uint64_t)v31;
    v31 = v26;
    v29 = (char *)v25.i64[0];
    result = std::__split_buffer<DSPGraph::PropertyTap>::~__split_buffer((uint64_t)&v29);
  }
  else
  {
    v6 = *(_OWORD *)a2;
    v7 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(v5 + 29) = *(_QWORD *)((char *)a2 + 29);
    *(_OWORD *)v5 = v6;
    *(_OWORD *)(v5 + 16) = v7;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    result = (uint64_t)std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v5 + 40), *((const void **)a2 + 5), *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5));
    v9 = v5 + 64;
    this[11].i64[1] = v5 + 64;
  }
  this[11].i64[1] = v9;
  v27 = (unsigned int *)&this[48];
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  return result;
}

void sub_18F072428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DSPGraph::PropertyTap>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<DSPGraph::PropertyTap>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 64;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t DSPGraph::ParameterEndpoint::print(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  DSPGraph::printi(a2, a3, "ParameterEndpoint\n");
  v3 += 4;
  DSPGraph::printi(a2, v3, "box %p\n", *(const void **)a1);
  DSPGraph::printi(a2, v3, "parameterID %u\n", *(_DWORD *)(a1 + 8));
  DSPGraph::printi(a2, v3, "scope %u\n", *(_DWORD *)(a1 + 12));
  return DSPGraph::printi(a2, v3, "element %u\n", *(_DWORD *)(a1 + 16));
}

uint64_t DSPGraph::PropertyEndpoint::print(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  DSPGraph::printi(a2, a3, "PropertyEndpoint\n");
  v3 += 4;
  DSPGraph::printi(a2, v3, "box %p\n", *(const void **)a1);
  DSPGraph::printi(a2, v3, "propertyID %u\n", *(_DWORD *)(a1 + 8));
  DSPGraph::printi(a2, v3, "scope %u\n", *(_DWORD *)(a1 + 12));
  return DSPGraph::printi(a2, v3, "element %u\n", *(_DWORD *)(a1 + 16));
}

uint64_t DSPGraph::PropertyTap::print(const void **a1, _QWORD *a2, unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  DSPGraph::printi(a2, a3, "PropertyTap\n");
  v3 += 4;
  DSPGraph::printi(a2, v3, "source %p\n", *a1);
  DSPGraph::printi(a2, v3, "source      %p scope %u   element %u   ID %u\n", a1, *((_DWORD *)a1 + 3), *((_DWORD *)a1 + 4), *((_DWORD *)a1 + 2));
  return DSPGraph::printi(a2, v3, "destination %p scope %u   element %u   ID %u\n", a1, *((_DWORD *)a1 + 7), *((_DWORD *)a1 + 8), *((_DWORD *)a1 + 6));
}

DSPGraph::AUBox *DSPGraph::AUBox::AUBox(DSPGraph::AUBox *this, OpaqueAudioComponentInstance *a2, unsigned int a3, unsigned int a4)
{
  DSPGraph::Box *v6;
  uint64_t (***v7)(_QWORD);
  uint64_t (***v8)(_QWORD);
  uint64_t (***v9)(_QWORD);
  uint64_t v10;
  __int128 v11;

  v6 = DSPGraph::Box::Box(this, a3, a4);
  *(_QWORD *)v6 = &off_1E29116C0;
  *(_OWORD *)((char *)v6 + 776) = 0u;
  *(_OWORD *)((char *)v6 + 792) = 0u;
  *(_OWORD *)((char *)v6 + 808) = 0u;
  *(_OWORD *)((char *)v6 + 824) = 0u;
  *((_DWORD *)v6 + 210) = 0;
  *((_QWORD *)v6 + 106) = a2;
  if (a2)
  {
    v7 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(OpaqueAudioComponentInstance *))(*(_QWORD *)a2 + 8))(a2);
    if (v7)
    {
      v8 = (uint64_t (***)(_QWORD))(**v7)(v7);
      if (v8)
      {
        v9 = (uint64_t (***)(_QWORD))(**v8)(v8);
        if (v9)
        {
          v10 = (**v9)(v9);
          v11 = *(_OWORD *)(v10 + 36);
          *((_DWORD *)this + 210) = *(_DWORD *)(v10 + 52);
          *(_OWORD *)((char *)this + 824) = v11;
        }
      }
    }
  }
  return this;
}

void sub_18F072784(_Unwind_Exception *a1)
{
  DSPGraph::Box *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)*((_QWORD *)v1 + 100);
  if (v4)
  {
    *((_QWORD *)v1 + 101) = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 98) = v5;
    operator delete(v5);
  }
  DSPGraph::Box::~Box(v1);
  _Unwind_Resume(a1);
}

void DSPGraph::ArithmeticMinBox::f(DSPGraph::ArithmeticMinBox *this, const float *__B, float *__C, vDSP_Length __N)
{
  vDSP_vmin((const float *)this, 1, __B, 1, __C, 1, __N);
}

uint64_t DSPGraph::ArithmeticMinBox::calculateFlags(DSPGraph::ArithmeticMinBox *this, char a2)
{
  return (a2 | 0xFFFFFFEF) & this;
}

void DSPGraph::ArithmeticMaxBox::f(DSPGraph::ArithmeticMaxBox *this, const float *__B, float *__C, vDSP_Length __N)
{
  vDSP_vmax((const float *)this, 1, __B, 1, __C, 1, __N);
}

uint64_t DSPGraph::ArithmeticMaxBox::calculateFlags(DSPGraph::ArithmeticMaxBox *this, char a2)
{
  return (a2 | 0xFFFFFFEF) & this;
}

void DSPGraph::ArithmeticMultBox::f(DSPGraph::ArithmeticMultBox *this, const float *__B, float *__C, vDSP_Length __N)
{
  vDSP_vmul((const float *)this, 1, __B, 1, __C, 1, __N);
}

void DSPGraph::ArithmeticMultBox::f(const DSPSplitComplex *a1, const float *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
  vDSP_zrvmul(a1, 1, __B, 1, __C, 1, __N);
}

void DSPGraph::ArithmeticMultBox::f(const float *__B, DSPSplitComplex *__A, DSPSplitComplex *__C, vDSP_Length __N)
{
  vDSP_zrvmul(__A, 1, __B, 1, __C, 1, __N);
}

void DSPGraph::ArithmeticMultBox::f(const DSPSplitComplex *a1, DSPSplitComplex *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
  vDSP_zvmul(a1, 1, __B, 1, __C, 1, __N, 1);
}

uint64_t DSPGraph::ArithmeticMultBox::calculateFlags(DSPGraph::ArithmeticMultBox *this, char a2)
{
  return a2 & 0x10 | this;
}

void DSPGraph::ArithmeticDivBox::f(DSPGraph::ArithmeticDivBox *this, const float *__B, float *__C, vDSP_Length __N)
{
  vDSP_vdiv(__B, 1, (const float *)this, 1, __C, 1, __N);
}

void DSPGraph::ArithmeticDivBox::f(const DSPSplitComplex *a1, const float *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
  vDSP_zrvdiv(a1, 1, __B, 1, __C, 1, __N);
}

void DSPGraph::ArithmeticDivBox::f(float *a1, const DSPSplitComplex *a2, const DSPSplitComplex *a3, vDSP_Length __N)
{
  float *imagp;
  vDSP_Length v7;
  DSPSplitComplex v8;
  float __A;

  __A = 0.0;
  imagp = a3->imagp;
  v8.realp = a1;
  v8.imagp = imagp;
  v7 = __N;
  vDSP_vfill(&__A, imagp, 1, __N);
  vDSP_zvdiv(a2, 1, &v8, 1, a3, 1, v7);
}

void DSPGraph::ArithmeticDivBox::f(DSPSplitComplex *__A, DSPSplitComplex *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
  vDSP_zvdiv(__B, 1, __A, 1, __C, 1, __N);
}

void DSPGraph::ArithmeticDiffBox::f(DSPGraph::ArithmeticDiffBox *this, const float *__B, float *__C, vDSP_Length __N)
{
  vDSP_vsub(__B, 1, (const float *)this, 1, __C, 1, __N);
}

void DSPGraph::ArithmeticDiffBox::f(const DSPSplitComplex *a1, const float *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
  vDSP_zrvsub(a1, 1, __B, 1, __C, 1, __N);
}

void DSPGraph::ArithmeticDiffBox::f(const float *__B, DSPSplitComplex *__A, DSPSplitComplex *__C, vDSP_Length __N)
{
  vDSP_Length v5;

  v5 = __N;
  vDSP_zrvsub(__A, 1, __B, 1, __C, 1, __N);
  vDSP_zvneg(__C, 1, __C, 1, v5);
}

void DSPGraph::ArithmeticDiffBox::f(const DSPSplitComplex *a1, DSPSplitComplex *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
  vDSP_zvsub(a1, 1, __B, 1, __C, 1, __N);
}

uint64_t DSPGraph::ArithmeticDiffBox::calculateFlags(DSPGraph::ArithmeticDiffBox *this, char a2)
{
  return (a2 | 0xFFFFFFEF) & this;
}

void DSPGraph::ArithmeticSumBox::f(DSPGraph::ArithmeticSumBox *this, const float *__B, float *__C, vDSP_Length __N)
{
  vDSP_vadd((const float *)this, 1, __B, 1, __C, 1, __N);
}

void DSPGraph::ArithmeticSumBox::f(const DSPSplitComplex *a1, const float *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
  vDSP_zrvadd(a1, 1, __B, 1, __C, 1, __N);
}

void DSPGraph::ArithmeticSumBox::f(const float *__B, DSPSplitComplex *__A, DSPSplitComplex *__C, vDSP_Length __N)
{
  vDSP_zrvadd(__A, 1, __B, 1, __C, 1, __N);
}

void DSPGraph::ArithmeticSumBox::f(const DSPSplitComplex *a1, DSPSplitComplex *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
  vDSP_zvadd(a1, 1, __B, 1, __C, 1, __N);
}

uint64_t DSPGraph::ArithmeticSumBox::calculateFlags(DSPGraph::ArithmeticSumBox *this, char a2)
{
  return (a2 | 0xFFFFFFEF) & this;
}

size_t DSPGraph::LinearGainPolicy::getGainParameterInfo@<X0>(uint64_t a1@<X8>)
{
  size_t result;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 84) = 0x40000000C0000000;
  *(_DWORD *)(a1 + 92) = 1065353216;
  *(_DWORD *)(a1 + 80) = 14;
  result = strlcpy((char *)a1, "gain", 0x34uLL);
  *(_QWORD *)(a1 + 72) = CFSTR("gain");
  *(_DWORD *)(a1 + 96) |= 0xC8000000;
  return result;
}

size_t DSPGraph::DecibelGainPolicy::getGainParameterInfo@<X0>(uint64_t a1@<X8>)
{
  size_t result;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 84) = 0x41C00000C3480000;
  *(_DWORD *)(a1 + 80) = 13;
  result = strlcpy((char *)a1, "dbgain", 0x34uLL);
  *(_QWORD *)(a1 + 72) = CFSTR("dbgain");
  *(_DWORD *)(a1 + 96) |= 0xC8000000;
  return result;
}

float DSPGraph::DecibelGainPolicy::linearGainToPolicyGain(DSPGraph::DecibelGainPolicy *this, float a2)
{
  if (a2 < 1.0e-10)
    a2 = 1.0e-10;
  return log10f(a2) * 20.0;
}

float DSPGraph::DecibelGainPolicy::policyGainToLinearGain(DSPGraph::DecibelGainPolicy *this, float a2)
{
  return __exp10f(a2 / 20.0);
}

double DSPGraph::GainBox::GainBox(DSPGraph::GainBox *this)
{
  DSPGraph::Box *v1;
  double result;

  v1 = DSPGraph::Box::Box(this, 1u, 1u);
  *((_DWORD *)v1 + 194) = 1065353216;
  *((_BYTE *)v1 + 780) = 0;
  *((_OWORD *)v1 + 49) = xmmword_18F117370;
  result = 0.0078125;
  *((_QWORD *)v1 + 100) = 0x3F80000000000000;
  *((_DWORD *)v1 + 202) = 0;
  *((_WORD *)v1 + 406) = 257;
  *(_QWORD *)v1 = &off_1E2912788;
  return result;
}

{
  DSPGraph::Box *v1;
  double result;

  v1 = DSPGraph::Box::Box(this, 1u, 1u);
  *((_DWORD *)v1 + 194) = 1065353216;
  *((_BYTE *)v1 + 780) = 0;
  *((_OWORD *)v1 + 49) = xmmword_18F117370;
  result = 0.0078125;
  *((_QWORD *)v1 + 100) = 0x3F80000000000000;
  *((_DWORD *)v1 + 202) = 0;
  *((_WORD *)v1 + 406) = 257;
  *(_QWORD *)v1 = &off_1E2912788;
  return result;
}

void DSPGraph::GainBox::~GainBox(DSPGraph::GainBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::ClassName()
{
  return "gain";
}

uint64_t DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::canProcessInPlace()
{
  return 1;
}

float DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::setParameter(uint64_t a1, int a2, int a3, float result)
{
  float v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v6, "setParameter");
      std::string::basic_string[abi:ne180100]<0>(&v5, "");
      DSPGraph::ThrowException(-10878, &v7, 2748, &v6, &v5);
    }
    *(_BYTE *)(a1 + 780) = result != 0.0;
  }
  else
  {
    *(float *)(a1 + 776) = result;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 762) || *(_BYTE *)(a1 + 812))
  {
    v4 = 0.0;
    if (!*(_BYTE *)(a1 + 780))
      v4 = 1.0;
    result = *(float *)(a1 + 776) * v4;
    *(float *)(a1 + 804) = result;
    *(float *)(a1 + 808) = result;
  }
  return result;
}

void sub_18F072D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

float DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::getParameter(uint64_t a1, int a2, int a3)
{
  float result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (!(a3 | a2))
    return *(float *)(a1 + 776);
  if (a2 != 1 || a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v4, "");
    DSPGraph::ThrowException(-10878, &v6, 2769, &v5, &v4);
  }
  result = 1.0;
  if (!*(_BYTE *)(a1 + 780))
    return 0.0;
  return result;
}

void sub_18F072E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::getParameterList(int a1@<W1>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    v3 = operator new(8uLL);
    *a2 = v3;
    *v3++ = 0x100000000;
    a2[1] = v3;
    a2[2] = v3;
  }
}

size_t DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::getParameterInfo@<X0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  int v4;
  size_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = -10866;
LABEL_3:
    *(_DWORD *)a3 = v4;
    *(_BYTE *)(a3 + 104) = 0;
    return result;
  }
  if (a2 == 1)
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    DWORD2(v14) = 1065353216;
    LODWORD(v14) = 2;
    result = strlcpy((char *)&v9, "mute", 0x34uLL);
    *((_QWORD *)&v13 + 1) = CFSTR("mute");
    LODWORD(v15) = v15 | 0xC8000000;
    v6 = v10;
    *(_OWORD *)a3 = v9;
    *(_OWORD *)(a3 + 16) = v6;
    v7 = v12;
    *(_OWORD *)(a3 + 32) = v11;
    *(_OWORD *)(a3 + 48) = v7;
    v8 = v14;
    *(_OWORD *)(a3 + 64) = v13;
    *(_OWORD *)(a3 + 80) = v8;
    *(_QWORD *)(a3 + 96) = v15;
  }
  else
  {
    if (a2)
    {
      v4 = -10878;
      goto LABEL_3;
    }
    result = DSPGraph::LinearGainPolicy::getGainParameterInfo(a3);
  }
  *(_BYTE *)(a3 + 104) = 1;
  return result;
}

void sub_18F072FA4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

double DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 9.69732525e189;
  *(_OWORD *)a1 = xmmword_18F1171A0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

unint64_t DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::getPropertyInfo(DSPGraph::Box *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t PropertyInfo;

  if (a2 == 3098)
  {
    v3 = 8;
    if ((_DWORD)a3)
    {
      v3 = 4294956430;
      v4 = 0;
    }
    else
    {
      v4 = 0x100000000;
    }
  }
  else
  {
    PropertyInfo = DSPGraph::Box::getPropertyInfo(a1, a2, a3);
    v4 = PropertyInfo & 0xFFFFFFFF00000000;
    v3 = PropertyInfo;
  }
  return v4 | v3;
}

double DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::getProperty(DSPGraph::Box *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  double result;

  if (a2 == 3098)
  {
    if (*a5 == 8 && a6 && !(_DWORD)a3)
    {
      result = *((double *)this + 98);
      *(double *)a6 = result;
    }
  }
  else
  {
    DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::setProperty(double *a1, int a2, int a3, unsigned int a4, int a5, double *a6)
{
  uint64_t v6;
  double v8;
  double v9;

  if (a2 != 3098)
    return DSPGraph::Box::setProperty((DSPGraph::Box *)a1, a2, a3, a4, a5, a6);
  if (a5 != 8)
    return 561211770;
  if (a3)
    return 4294956430;
  v8 = *a6;
  a1[98] = *a6;
  v9 = a1[99];
  v6 = 0;
  if (v8 < v9)
    a1[98] = v9;
  return v6;
}

_QWORD *DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::process(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  size_t v15;
  vDSP_Length v16;
  float v17;
  const float *v18;
  float v19;
  float **v20;
  const float **v21;
  const float *v22;
  float *v23;
  void **v24;
  double v25;
  float v26;
  const float *v27;
  float v28;
  float v29;
  vDSP_Length v30;
  float **v31;
  const float **v32;
  const float *v33;
  float *v34;
  float **v35;
  const float **v36;
  const float *v37;
  float *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD *result;
  _QWORD *v46;
  int v47;
  _OWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  vDSP_Length __N;
  const float *v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  __int128 v66;
  __int128 __Start;

  v2 = a1;
  v4 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  v63 = v2;
  if (*(_QWORD *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v55 = (_QWORD *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0)
      v55 = (_QWORD *)*v55;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v55, (uint64_t)(*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Start, 1410, &v66, &v65);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *(_QWORD *)(v2 + 88);
  if (*(_QWORD *)(v2 + 96) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v56 = (_QWORD *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0)
      v56 = (_QWORD *)*v56;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v56, (uint64_t)(*(_QWORD *)(v2 + 96) - *(_QWORD *)(v2 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Start, 1418, &v66, &v65);
  }
  v8 = *(unsigned int **)(*(_QWORD *)(v6 + 56) + 80);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v10 = *(_QWORD *)(v2 + 88);
  if (*(_QWORD *)(v2 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v57 = (_QWORD *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0)
      v57 = (_QWORD *)*v57;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v57, (uint64_t)(*(_QWORD *)(v2 + 96) - *(_QWORD *)(v2 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Start, 1418, &v66, &v65);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 80);
  v64 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) + 120) + 8);
  v12 = *v8;
  if (*(_BYTE *)(v2 + 812))
    *(_BYTE *)(v2 + 812) = 0;
  if (*(_BYTE *)(v2 + 813))
  {
    v13 = 0.0;
    if (!*(_BYTE *)(v2 + 780))
      v13 = 1.0;
    *(float *)(v2 + 808) = *(float *)(v2 + 776) * v13;
  }
  v14 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v2 + 72) == v14)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v58 = (_QWORD *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0)
      v58 = (_QWORD *)*v58;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v58, (uint64_t)(*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Start, 1410, &v66, &v65);
  }
  v15 = (4 * a2) << (v64 == 1718773105);
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14) + 56) + 72) & 0x10) != 0)
  {
    if ((_DWORD)v12)
    {
      v24 = (void **)(v11 + 16);
      do
      {
        bzero(*v24, v15);
        *((_DWORD *)v24 - 1) = v15;
        v24 += 2;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    v16 = a2;
    v17 = *(float *)(v2 + 804);
    v18 = (const float *)(v2 + 808);
    v19 = *(float *)(v2 + 808);
    if (v17 == v19)
    {
      if ((_DWORD)v12)
      {
        v20 = (float **)(v11 + 16);
        v21 = (const float **)(v8 + 4);
        do
        {
          v22 = *v21;
          v23 = *v20;
          vDSP_vsmul(*v21, 1, (const float *)(v2 + 808), *v20, 1, v16);
          if (v64 == 1718773105)
            vDSP_vsmul(&v22[v16], 1, (const float *)(v2 + 808), &v23[v16], 1, v16);
          *((_DWORD *)v20 - 1) = v15;
          v20 += 2;
          v21 += 2;
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      if (*(_BYTE *)(v2 + 813))
      {
        v25 = *(double *)(v2 + 784);
        v26 = (float)(v19 - v17)
            / (float)(v25 * (double)DSPGraph::Box::sampleRate((DSPGraph::Box *)v2));
        *(float *)(v2 + 800) = v26;
        v17 = *(float *)(v2 + 804);
      }
      else
      {
        v26 = *(float *)(v2 + 800);
      }
      *(_BYTE *)(v2 + 813) = 0;
      v27 = (const float *)(v2 + 800);
      v28 = v17 + (float)(v26 * (float)a2);
      if ((v26 <= 0.0 || (v29 = *v18, v28 <= *v18)) && (v26 >= 0.0 || (v29 = *v18, v28 >= *v18)))
      {
        if ((_DWORD)v12)
        {
          v35 = (float **)(v11 + 16);
          v36 = (const float **)(v8 + 4);
          do
          {
            v37 = *v36;
            v38 = *v35;
            LODWORD(__Start) = *(_DWORD *)(v2 + 804);
            vDSP_vrampmul(v37, 1, (float *)&__Start, (const float *)(v2 + 800), v38, 1, v16);
            if (v64 == 1718773105)
            {
              LODWORD(__Start) = *(_DWORD *)(v2 + 804);
              vDSP_vrampmul(&v37[v16], 1, (float *)&__Start, (const float *)(v2 + 800), &v38[v16], 1, v16);
            }
            v35 += 2;
            v36 += 2;
            --v12;
          }
          while (v12);
        }
      }
      else if ((_DWORD)v12)
      {
        v30 = fabsf((float)(v29 - v17) / v26);
        __N = a2 - v30;
        v62 = (const float *)(v2 + 800);
        v31 = (float **)(v11 + 16);
        v32 = (const float **)(v8 + 4);
        do
        {
          v33 = *v32;
          v34 = *v31;
          LODWORD(__Start) = *(_DWORD *)(v2 + 804);
          vDSP_vrampmul(v33, 1, (float *)&__Start, v27, v34, 1, v30);
          vDSP_vsmul(&v33[v30], 1, v18, &v34[v30], 1, __N);
          if (v64 == 1718773105)
          {
            LODWORD(__Start) = *(_DWORD *)(v63 + 804);
            vDSP_vrampmul(&v33[v16], 1, (float *)&__Start, v62, &v34[v16], 1, v30);
            vDSP_vsmul(&v33[v30 + v16], 1, v18, &v34[v30 + v16], 1, __N);
          }
          v31 += 2;
          v32 += 2;
          --v12;
          v27 = v62;
          v2 = v63;
        }
        while (v12);
        v28 = *v18;
      }
      else
      {
        v28 = v29;
      }
      *(float *)(v2 + 804) = v28;
    }
  }
  if (*(_BYTE *)(v2 + 813))
    v39 = 16 * (*(float *)(v2 + 808) == 0.0);
  else
    v39 = 0;
  v40 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v2 + 72) == v40)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v59 = (_QWORD *)(v63 + 32);
    if (*(char *)(v63 + 55) < 0)
      v59 = (_QWORD *)*v59;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v59, (uint64_t)(*(_QWORD *)(v63 + 72) - *(_QWORD *)(v63 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Start, 1410, &v66, &v65);
  }
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  v42 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v2 + 72) == v42)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v60 = (_QWORD *)(v63 + 32);
    if (*(char *)(v63 + 55) < 0)
      v60 = (_QWORD *)*v60;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v60, (uint64_t)(*(_QWORD *)(v63 + 72) - *(_QWORD *)(v63 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Start, 1410, &v66, &v65);
  }
  v43 = *(_DWORD *)(*(_QWORD *)(v41 + 56) + 72);
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
  result = *(_QWORD **)(v2 + 88);
  v46 = *(_QWORD **)(v2 + 96);
  if (result != v46)
  {
    v47 = v43 | v39;
    v48 = (_OWORD *)(*(_QWORD *)(v44 + 56) + 8);
    v49 = *(_QWORD **)(v2 + 88);
    do
    {
      v50 = *v49;
      v49 += 4;
      v51 = *(_QWORD *)((*(uint64_t (**)(void))(v50 + 40))() + 56);
      v53 = v48[2];
      v52 = v48[3];
      v54 = v48[1];
      *(_OWORD *)(v51 + 8) = *v48;
      *(_OWORD *)(v51 + 24) = v54;
      *(_OWORD *)(v51 + 40) = v53;
      *(_OWORD *)(v51 + 56) = v52;
      *(_DWORD *)(v51 + 72) = v47;
      result = v49;
    }
    while (v49 != v46);
  }
  if (*(float *)(v2 + 804) == *(float *)(v2 + 808))
    *(_BYTE *)(v2 + 813) = 1;
  return result;
}

void sub_18F073858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::initialize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v17;
  int v18;
  int v20;
  int v21;
  int v23;
  int v24;
  _BOOL8 result;
  double v28;
  int16x8_t v29;
  double v30;
  int16x8_t v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD v38[2];
  unsigned __int8 v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  __int128 v45;
  __int128 v46;

  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  v2 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v45, "in");
    v36 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v36 = (_QWORD *)*v36;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v44, v36, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v46, 1410, &v45, (__int128 *)&v44);
  }
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v4 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v45, "out");
    v37 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v37 = (_QWORD *)*v37;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v44, v37, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v46, 1418, &v45, (__int128 *)&v44);
  }
  v5 = *(_QWORD *)(v3 + 120);
  v6 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) + 120);
  *(_BYTE *)(a1 + 813) = 1;
  v7 = *(_DWORD *)(v5 + 8);
  if (v7 == 1819304813)
  {
    v8 = *(_DWORD *)(v5 + 12);
    if ((v8 & 1) == 0)
      goto LABEL_62;
    v9 = *(_DWORD *)(v5 + 32);
    if (v9 != 32)
      goto LABEL_62;
  }
  else
  {
    if (v7 != 1718773105 || (v9 = *(_DWORD *)(v5 + 32), v9 != 64))
    {
LABEL_62:
      std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v44, "GainBox input format must be non-interleaved float or 'freq'");
      DSPGraph::ThrowException(1718449215, &v46, 2630, &v45, (__int128 *)&v44);
    }
    v8 = *(_DWORD *)(v5 + 12);
  }
  if ((v8 & 0x20) == 0)
    goto LABEL_62;
  v10 = *(_DWORD *)(v6 + 8);
  if (v10 == 1819304813)
  {
    v11 = *(_DWORD *)(v6 + 12);
    if ((v11 & 1) == 0)
      goto LABEL_63;
    v12 = *(_DWORD *)(v6 + 32);
    if (v12 != 32)
      goto LABEL_63;
  }
  else
  {
    if (v10 != 1718773105 || (v12 = *(_DWORD *)(v6 + 32), v12 != 64))
    {
LABEL_63:
      std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v44, "GainBox output format must be non-interleaved float or 'freq'");
      DSPGraph::ThrowException(1718449215, &v46, 2633, &v45, (__int128 *)&v44);
    }
    v11 = *(_DWORD *)(v6 + 12);
  }
  if ((v11 & 0x20) == 0)
    goto LABEL_63;
  if (*(double *)v5 == 0.0)
  {
    if (v7 != v10)
      goto LABEL_55;
  }
  else
  {
    v13 = *(double *)v6 == 0.0;
    if (*(double *)v5 == *(double *)v6)
      v13 = 1;
    if (v7 != v10 || !v13)
    {
LABEL_55:
      std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
      CA::StreamDescription::AsString((CA::StreamDescription *)&v40, (_QWORD *)v5, v28, v29);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v41, "GainBox input and output formats don't match (", &v40);
      *(_QWORD *)&v30 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v42, &v41, " != ").n128_u64[0];
      CA::StreamDescription::AsString((CA::StreamDescription *)v38, (_QWORD *)v6, v30, v31);
      if ((v39 & 0x80u) == 0)
        v32 = (const std::string::value_type *)v38;
      else
        v32 = (const std::string::value_type *)v38[0];
      if ((v39 & 0x80u) == 0)
        v33 = v39;
      else
        v33 = v38[1];
      v34 = std::string::append(&v42, v32, v33);
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v44, &v43, ")");
      DSPGraph::ThrowException(1718449215, &v46, 2638, &v45, (__int128 *)&v44);
    }
  }
  v14 = *(_DWORD *)(v5 + 16);
  if (v14)
  {
    v15 = *(_DWORD *)(v6 + 16);
    if (v15 && v14 != v15)
      goto LABEL_55;
  }
  v17 = *(_DWORD *)(v5 + 20);
  if (v17)
  {
    v18 = *(_DWORD *)(v6 + 20);
    if (v18 && v17 != v18)
      goto LABEL_55;
  }
  v20 = *(_DWORD *)(v5 + 24);
  if (v20)
  {
    v21 = *(_DWORD *)(v6 + 24);
    if (v21 && v20 != v21)
      goto LABEL_55;
  }
  v23 = *(_DWORD *)(v5 + 28);
  if (v23)
  {
    v24 = *(_DWORD *)(v6 + 28);
    if (v23 != v24 && v24 != 0 || v9 != v12)
      goto LABEL_55;
  }
  else if (v9 != v12)
  {
    goto LABEL_55;
  }
  result = CA::Implementation::EquivalentFormatFlags((CA::Implementation *)v5, (const AudioStreamBasicDescription *)v6, (const AudioStreamBasicDescription *)1, 1);
  if (!result)
    goto LABEL_55;
  return result;
}

void sub_18F073D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 97) < 0)
    operator delete(*(void **)(v42 - 120));
  if (a42 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a36 < 0)
    operator delete(a31);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  if (*(char *)(v42 - 49) < 0)
    operator delete(*(void **)(v42 - 72));
  _Unwind_Resume(exception_object);
}

float DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::reset(uint64_t a1)
{
  float v1;
  float result;

  v1 = 0.0;
  if (!*(_BYTE *)(a1 + 780))
    v1 = 1.0;
  result = *(float *)(a1 + 776) * v1;
  *(float *)(a1 + 804) = result;
  *(_WORD *)(a1 + 812) = 257;
  return result;
}

double DSPGraph::DBGainBox::DBGainBox(DSPGraph::DBGainBox *this)
{
  DSPGraph::Box *v1;
  double result;

  v1 = DSPGraph::Box::Box(this, 1u, 1u);
  *((_DWORD *)v1 + 194) = 1065353216;
  *((_BYTE *)v1 + 780) = 0;
  *((_OWORD *)v1 + 49) = xmmword_18F117370;
  result = 0.0078125;
  *((_QWORD *)v1 + 100) = 0x3F80000000000000;
  *((_DWORD *)v1 + 202) = 0;
  *((_WORD *)v1 + 406) = 257;
  *(_QWORD *)v1 = &off_1E2913048;
  return result;
}

{
  DSPGraph::Box *v1;
  double result;

  v1 = DSPGraph::Box::Box(this, 1u, 1u);
  *((_DWORD *)v1 + 194) = 1065353216;
  *((_BYTE *)v1 + 780) = 0;
  *((_OWORD *)v1 + 49) = xmmword_18F117370;
  result = 0.0078125;
  *((_QWORD *)v1 + 100) = 0x3F80000000000000;
  *((_DWORD *)v1 + 202) = 0;
  *((_WORD *)v1 + 406) = 257;
  *(_QWORD *)v1 = &off_1E2913048;
  return result;
}

void DSPGraph::DBGainBox::~DBGainBox(DSPGraph::DBGainBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::ClassName()
{
  return "dbgain";
}

uint64_t DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::canProcessInPlace()
{
  return 1;
}

float DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::setParameter(uint64_t a1, int a2, int a3, float result)
{
  float v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v7, "setParameter");
      std::string::basic_string[abi:ne180100]<0>(&v6, "");
      DSPGraph::ThrowException(-10878, &v8, 2748, &v7, &v6);
    }
    *(_BYTE *)(a1 + 780) = result != 0.0;
  }
  else
  {
    result = __exp10f(result / 20.0);
    *(float *)(a1 + 776) = result;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 762) || *(_BYTE *)(a1 + 812))
  {
    v5 = 0.0;
    if (!*(_BYTE *)(a1 + 780))
      v5 = 1.0;
    result = *(float *)(a1 + 776) * v5;
    *(float *)(a1 + 804) = result;
    *(float *)(a1 + 808) = result;
  }
  return result;
}

void sub_18F073FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

float DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::getParameter(uint64_t a1, int a2, int a3)
{
  float result;
  float v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v6, "getParameter");
      std::string::basic_string[abi:ne180100]<0>(&v5, "");
      DSPGraph::ThrowException(-10878, &v7, 2769, &v6, &v5);
    }
    result = 1.0;
    if (!*(_BYTE *)(a1 + 780))
      return 0.0;
  }
  else
  {
    v4 = *(float *)(a1 + 776);
    if (v4 < 1.0e-10)
      v4 = 1.0e-10;
    return log10f(v4) * 20.0;
  }
  return result;
}

void sub_18F0740FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::getParameterList(int a1@<W1>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    v3 = operator new(8uLL);
    *a2 = v3;
    *v3++ = 0x100000000;
    a2[1] = v3;
    a2[2] = v3;
  }
}

size_t DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::getParameterInfo@<X0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  int v4;
  size_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = -10866;
LABEL_3:
    *(_DWORD *)a3 = v4;
    *(_BYTE *)(a3 + 104) = 0;
    return result;
  }
  if (a2 == 1)
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    DWORD2(v14) = 1065353216;
    LODWORD(v14) = 2;
    result = strlcpy((char *)&v9, "mute", 0x34uLL);
    *((_QWORD *)&v13 + 1) = CFSTR("mute");
    LODWORD(v15) = v15 | 0xC8000000;
    v6 = v10;
    *(_OWORD *)a3 = v9;
    *(_OWORD *)(a3 + 16) = v6;
    v7 = v12;
    *(_OWORD *)(a3 + 32) = v11;
    *(_OWORD *)(a3 + 48) = v7;
    v8 = v14;
    *(_OWORD *)(a3 + 64) = v13;
    *(_OWORD *)(a3 + 80) = v8;
    *(_QWORD *)(a3 + 96) = v15;
  }
  else
  {
    if (a2)
    {
      v4 = -10878;
      goto LABEL_3;
    }
    result = DSPGraph::DecibelGainPolicy::getGainParameterInfo(a3);
  }
  *(_BYTE *)(a3 + 104) = 1;
  return result;
}

void sub_18F074288(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

double DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 3.64150051e175;
  *(_OWORD *)a1 = xmmword_18F117230;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

unint64_t DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::getPropertyInfo(DSPGraph::Box *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t PropertyInfo;

  if (a2 == 3098)
  {
    v3 = 8;
    if ((_DWORD)a3)
    {
      v3 = 4294956430;
      v4 = 0;
    }
    else
    {
      v4 = 0x100000000;
    }
  }
  else
  {
    PropertyInfo = DSPGraph::Box::getPropertyInfo(a1, a2, a3);
    v4 = PropertyInfo & 0xFFFFFFFF00000000;
    v3 = PropertyInfo;
  }
  return v4 | v3;
}

double DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::getProperty(DSPGraph::Box *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  double result;

  if (a2 == 3098)
  {
    if (*a5 == 8 && a6 && !(_DWORD)a3)
    {
      result = *((double *)this + 98);
      *(double *)a6 = result;
    }
  }
  else
  {
    DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::setProperty(double *a1, int a2, int a3, unsigned int a4, int a5, double *a6)
{
  uint64_t v6;
  double v8;
  double v9;

  if (a2 != 3098)
    return DSPGraph::Box::setProperty((DSPGraph::Box *)a1, a2, a3, a4, a5, a6);
  if (a5 != 8)
    return 561211770;
  if (a3)
    return 4294956430;
  v8 = *a6;
  a1[98] = *a6;
  v9 = a1[99];
  v6 = 0;
  if (v8 < v9)
    a1[98] = v9;
  return v6;
}

_QWORD *DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::process(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  size_t v15;
  vDSP_Length v16;
  float v17;
  const float *v18;
  float v19;
  float **v20;
  const float **v21;
  const float *v22;
  float *v23;
  void **v24;
  double v25;
  float v26;
  const float *v27;
  float v28;
  float v29;
  vDSP_Length v30;
  float **v31;
  const float **v32;
  const float *v33;
  float *v34;
  float **v35;
  const float **v36;
  const float *v37;
  float *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD *result;
  _QWORD *v46;
  int v47;
  _OWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  vDSP_Length __N;
  const float *v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  __int128 v66;
  __int128 __Start;

  v2 = a1;
  v4 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  v63 = v2;
  if (*(_QWORD *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v55 = (_QWORD *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0)
      v55 = (_QWORD *)*v55;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v55, (uint64_t)(*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Start, 1410, &v66, &v65);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *(_QWORD *)(v2 + 88);
  if (*(_QWORD *)(v2 + 96) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v56 = (_QWORD *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0)
      v56 = (_QWORD *)*v56;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v56, (uint64_t)(*(_QWORD *)(v2 + 96) - *(_QWORD *)(v2 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Start, 1418, &v66, &v65);
  }
  v8 = *(unsigned int **)(*(_QWORD *)(v6 + 56) + 80);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v10 = *(_QWORD *)(v2 + 88);
  if (*(_QWORD *)(v2 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v57 = (_QWORD *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0)
      v57 = (_QWORD *)*v57;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v57, (uint64_t)(*(_QWORD *)(v2 + 96) - *(_QWORD *)(v2 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Start, 1418, &v66, &v65);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 80);
  v64 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) + 120) + 8);
  v12 = *v8;
  if (*(_BYTE *)(v2 + 812))
    *(_BYTE *)(v2 + 812) = 0;
  if (*(_BYTE *)(v2 + 813))
  {
    v13 = 0.0;
    if (!*(_BYTE *)(v2 + 780))
      v13 = 1.0;
    *(float *)(v2 + 808) = *(float *)(v2 + 776) * v13;
  }
  v14 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v2 + 72) == v14)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v58 = (_QWORD *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0)
      v58 = (_QWORD *)*v58;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v58, (uint64_t)(*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Start, 1410, &v66, &v65);
  }
  v15 = (4 * a2) << (v64 == 1718773105);
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14) + 56) + 72) & 0x10) != 0)
  {
    if ((_DWORD)v12)
    {
      v24 = (void **)(v11 + 16);
      do
      {
        bzero(*v24, v15);
        *((_DWORD *)v24 - 1) = v15;
        v24 += 2;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    v16 = a2;
    v17 = *(float *)(v2 + 804);
    v18 = (const float *)(v2 + 808);
    v19 = *(float *)(v2 + 808);
    if (v17 == v19)
    {
      if ((_DWORD)v12)
      {
        v20 = (float **)(v11 + 16);
        v21 = (const float **)(v8 + 4);
        do
        {
          v22 = *v21;
          v23 = *v20;
          vDSP_vsmul(*v21, 1, (const float *)(v2 + 808), *v20, 1, v16);
          if (v64 == 1718773105)
            vDSP_vsmul(&v22[v16], 1, (const float *)(v2 + 808), &v23[v16], 1, v16);
          *((_DWORD *)v20 - 1) = v15;
          v20 += 2;
          v21 += 2;
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      if (*(_BYTE *)(v2 + 813))
      {
        v25 = *(double *)(v2 + 784);
        v26 = (float)(v19 - v17)
            / (float)(v25 * (double)DSPGraph::Box::sampleRate((DSPGraph::Box *)v2));
        *(float *)(v2 + 800) = v26;
        v17 = *(float *)(v2 + 804);
      }
      else
      {
        v26 = *(float *)(v2 + 800);
      }
      *(_BYTE *)(v2 + 813) = 0;
      v27 = (const float *)(v2 + 800);
      v28 = v17 + (float)(v26 * (float)a2);
      if ((v26 <= 0.0 || (v29 = *v18, v28 <= *v18)) && (v26 >= 0.0 || (v29 = *v18, v28 >= *v18)))
      {
        if ((_DWORD)v12)
        {
          v35 = (float **)(v11 + 16);
          v36 = (const float **)(v8 + 4);
          do
          {
            v37 = *v36;
            v38 = *v35;
            LODWORD(__Start) = *(_DWORD *)(v2 + 804);
            vDSP_vrampmul(v37, 1, (float *)&__Start, (const float *)(v2 + 800), v38, 1, v16);
            if (v64 == 1718773105)
            {
              LODWORD(__Start) = *(_DWORD *)(v2 + 804);
              vDSP_vrampmul(&v37[v16], 1, (float *)&__Start, (const float *)(v2 + 800), &v38[v16], 1, v16);
            }
            v35 += 2;
            v36 += 2;
            --v12;
          }
          while (v12);
        }
      }
      else if ((_DWORD)v12)
      {
        v30 = fabsf((float)(v29 - v17) / v26);
        __N = a2 - v30;
        v62 = (const float *)(v2 + 800);
        v31 = (float **)(v11 + 16);
        v32 = (const float **)(v8 + 4);
        do
        {
          v33 = *v32;
          v34 = *v31;
          LODWORD(__Start) = *(_DWORD *)(v2 + 804);
          vDSP_vrampmul(v33, 1, (float *)&__Start, v27, v34, 1, v30);
          vDSP_vsmul(&v33[v30], 1, v18, &v34[v30], 1, __N);
          if (v64 == 1718773105)
          {
            LODWORD(__Start) = *(_DWORD *)(v63 + 804);
            vDSP_vrampmul(&v33[v16], 1, (float *)&__Start, v62, &v34[v16], 1, v30);
            vDSP_vsmul(&v33[v30 + v16], 1, v18, &v34[v30 + v16], 1, __N);
          }
          v31 += 2;
          v32 += 2;
          --v12;
          v27 = v62;
          v2 = v63;
        }
        while (v12);
        v28 = *v18;
      }
      else
      {
        v28 = v29;
      }
      *(float *)(v2 + 804) = v28;
    }
  }
  if (*(_BYTE *)(v2 + 813))
    v39 = 16 * (*(float *)(v2 + 808) == 0.0);
  else
    v39 = 0;
  v40 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v2 + 72) == v40)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v59 = (_QWORD *)(v63 + 32);
    if (*(char *)(v63 + 55) < 0)
      v59 = (_QWORD *)*v59;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v59, (uint64_t)(*(_QWORD *)(v63 + 72) - *(_QWORD *)(v63 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Start, 1410, &v66, &v65);
  }
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  v42 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v2 + 72) == v42)
  {
    std::string::basic_string[abi:ne180100]<0>(&__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v60 = (_QWORD *)(v63 + 32);
    if (*(char *)(v63 + 55) < 0)
      v60 = (_QWORD *)*v60;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v60, (uint64_t)(*(_QWORD *)(v63 + 72) - *(_QWORD *)(v63 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__Start, 1410, &v66, &v65);
  }
  v43 = *(_DWORD *)(*(_QWORD *)(v41 + 56) + 72);
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
  result = *(_QWORD **)(v2 + 88);
  v46 = *(_QWORD **)(v2 + 96);
  if (result != v46)
  {
    v47 = v43 | v39;
    v48 = (_OWORD *)(*(_QWORD *)(v44 + 56) + 8);
    v49 = *(_QWORD **)(v2 + 88);
    do
    {
      v50 = *v49;
      v49 += 4;
      v51 = *(_QWORD *)((*(uint64_t (**)(void))(v50 + 40))() + 56);
      v53 = v48[2];
      v52 = v48[3];
      v54 = v48[1];
      *(_OWORD *)(v51 + 8) = *v48;
      *(_OWORD *)(v51 + 24) = v54;
      *(_OWORD *)(v51 + 40) = v53;
      *(_OWORD *)(v51 + 56) = v52;
      *(_DWORD *)(v51 + 72) = v47;
      result = v49;
    }
    while (v49 != v46);
  }
  if (*(float *)(v2 + 804) == *(float *)(v2 + 808))
    *(_BYTE *)(v2 + 813) = 1;
  return result;
}

void sub_18F074B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::initialize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v17;
  int v18;
  int v20;
  int v21;
  int v23;
  int v24;
  _BOOL8 result;
  double v28;
  int16x8_t v29;
  double v30;
  int16x8_t v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD v38[2];
  unsigned __int8 v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  __int128 v45;
  __int128 v46;

  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  v2 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v45, "in");
    v36 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v36 = (_QWORD *)*v36;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v44, v36, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v46, 1410, &v45, (__int128 *)&v44);
  }
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v4 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v45, "out");
    v37 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v37 = (_QWORD *)*v37;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v44, v37, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v46, 1418, &v45, (__int128 *)&v44);
  }
  v5 = *(_QWORD *)(v3 + 120);
  v6 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) + 120);
  *(_BYTE *)(a1 + 813) = 1;
  v7 = *(_DWORD *)(v5 + 8);
  if (v7 == 1819304813)
  {
    v8 = *(_DWORD *)(v5 + 12);
    if ((v8 & 1) == 0)
      goto LABEL_62;
    v9 = *(_DWORD *)(v5 + 32);
    if (v9 != 32)
      goto LABEL_62;
  }
  else
  {
    if (v7 != 1718773105 || (v9 = *(_DWORD *)(v5 + 32), v9 != 64))
    {
LABEL_62:
      std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v44, "GainBox input format must be non-interleaved float or 'freq'");
      DSPGraph::ThrowException(1718449215, &v46, 2630, &v45, (__int128 *)&v44);
    }
    v8 = *(_DWORD *)(v5 + 12);
  }
  if ((v8 & 0x20) == 0)
    goto LABEL_62;
  v10 = *(_DWORD *)(v6 + 8);
  if (v10 == 1819304813)
  {
    v11 = *(_DWORD *)(v6 + 12);
    if ((v11 & 1) == 0)
      goto LABEL_63;
    v12 = *(_DWORD *)(v6 + 32);
    if (v12 != 32)
      goto LABEL_63;
  }
  else
  {
    if (v10 != 1718773105 || (v12 = *(_DWORD *)(v6 + 32), v12 != 64))
    {
LABEL_63:
      std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v44, "GainBox output format must be non-interleaved float or 'freq'");
      DSPGraph::ThrowException(1718449215, &v46, 2633, &v45, (__int128 *)&v44);
    }
    v11 = *(_DWORD *)(v6 + 12);
  }
  if ((v11 & 0x20) == 0)
    goto LABEL_63;
  if (*(double *)v5 == 0.0)
  {
    if (v7 != v10)
      goto LABEL_55;
  }
  else
  {
    v13 = *(double *)v6 == 0.0;
    if (*(double *)v5 == *(double *)v6)
      v13 = 1;
    if (v7 != v10 || !v13)
    {
LABEL_55:
      std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
      CA::StreamDescription::AsString((CA::StreamDescription *)&v40, (_QWORD *)v5, v28, v29);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v41, "GainBox input and output formats don't match (", &v40);
      *(_QWORD *)&v30 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v42, &v41, " != ").n128_u64[0];
      CA::StreamDescription::AsString((CA::StreamDescription *)v38, (_QWORD *)v6, v30, v31);
      if ((v39 & 0x80u) == 0)
        v32 = (const std::string::value_type *)v38;
      else
        v32 = (const std::string::value_type *)v38[0];
      if ((v39 & 0x80u) == 0)
        v33 = v39;
      else
        v33 = v38[1];
      v34 = std::string::append(&v42, v32, v33);
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v44, &v43, ")");
      DSPGraph::ThrowException(1718449215, &v46, 2638, &v45, (__int128 *)&v44);
    }
  }
  v14 = *(_DWORD *)(v5 + 16);
  if (v14)
  {
    v15 = *(_DWORD *)(v6 + 16);
    if (v15 && v14 != v15)
      goto LABEL_55;
  }
  v17 = *(_DWORD *)(v5 + 20);
  if (v17)
  {
    v18 = *(_DWORD *)(v6 + 20);
    if (v18 && v17 != v18)
      goto LABEL_55;
  }
  v20 = *(_DWORD *)(v5 + 24);
  if (v20)
  {
    v21 = *(_DWORD *)(v6 + 24);
    if (v21 && v20 != v21)
      goto LABEL_55;
  }
  v23 = *(_DWORD *)(v5 + 28);
  if (v23)
  {
    v24 = *(_DWORD *)(v6 + 28);
    if (v23 != v24 && v24 != 0 || v9 != v12)
      goto LABEL_55;
  }
  else if (v9 != v12)
  {
    goto LABEL_55;
  }
  result = CA::Implementation::EquivalentFormatFlags((CA::Implementation *)v5, (const AudioStreamBasicDescription *)v6, (const AudioStreamBasicDescription *)1, 1);
  if (!result)
    goto LABEL_55;
  return result;
}

void sub_18F074FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 97) < 0)
    operator delete(*(void **)(v42 - 120));
  if (a42 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a36 < 0)
    operator delete(a31);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  if (*(char *)(v42 - 49) < 0)
    operator delete(*(void **)(v42 - 72));
  _Unwind_Resume(exception_object);
}

float DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::reset(uint64_t a1)
{
  float v1;
  float result;

  v1 = 0.0;
  if (!*(_BYTE *)(a1 + 780))
    v1 = 1.0;
  result = *(float *)(a1 + 776) * v1;
  *(float *)(a1 + 804) = result;
  *(_WORD *)(a1 + 812) = 257;
  return result;
}

void sub_18F075430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18F075568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18F075AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18F075D58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F075E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  a9.super_class = (Class)AUHostingService;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18F076210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&AUHostingService_exit_handler(void)::handler);
  if (a10)
    free(a10);
  _Unwind_Resume(a1);
}

void std::__function::__func<AUHostingService_exit_handler(void)::$_0,std::allocator<AUHostingService_exit_handler(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AUHostingService_exit_handler(void)::$_0,std::allocator<AUHostingService_exit_handler(void)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913908;
  return result;
}

void std::__function::__func<AUHostingService_exit_handler(void)::$_0,std::allocator<AUHostingService_exit_handler(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913908;
}

void std::__function::__func<AUHostingService_exit_handler(void)::$_0,std::allocator<AUHostingService_exit_handler(void)::$_0>,void ()(void)>::operator()()
{
  exit(0);
}

void sub_18F076334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F0764C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void FLACAudioStream::~FLACAudioStream(FLACAudioStream *this)
{
  FLACAudioStream::~FLACAudioStream(this);
  JUMPOUT(0x193FFE460);
}

{
  const void *v2;
  const void *v3;
  const void *v4;
  void **v5;

  *(_QWORD *)this = &off_1E2905720;
  v2 = (const void *)*((_QWORD *)this + 65);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 74);
  if (v3)
    CFRelease(v3);
  v5 = (void **)((char *)this + 568);
  std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v4 = (const void *)*((_QWORD *)this + 70);
  if (v4)
    CFRelease(v4);
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

uint64_t FLACAudioStream::Flush(FLACAudioStream *this)
{
  FLACAudioStream::FlushPacketBuffer((uint64_t)this);
  return 0;
}

uint64_t FLACAudioStream::GetPropertyInfo(FLACAudioStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if (a2 <= 1819243875)
  {
    if (a2 != 1633776244 && a2 != 1768842863)
      return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
LABEL_10:
    if (a3)
    {
      v6 = 8;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  if (a2 == 1819243876)
    goto LABEL_10;
  if (a2 != 1986225779)
    return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
  if (a3)
  {
    if (*((_QWORD *)this + 70))
    {
      v4 = *((_QWORD *)this + 72);
      v5 = *((_QWORD *)this + 71);
    }
    else
    {
      v4 = *((_QWORD *)this + 72);
      v5 = *((_QWORD *)this + 71);
      if (v4 == v5)
      {
        v6 = 0;
        goto LABEL_15;
      }
    }
    v6 = 24 * ((unint64_t)(v4 - v5) >> 4) + 16;
LABEL_15:
    *a3 = v6;
  }
LABEL_16:
  if (a4)
    *a4 = 0;
  return 0;
}

uint64_t FLACAudioStream::GetProperty(const void **this, int a2, unsigned int *a3, _QWORD *__dst)
{
  CFTypeRef v7;
  const void *v9;
  uint64_t v10;
  int v11;
  CFTypeRef v12;
  CFTypeRef cf;
  __int16 v14;

  if (a2 > 1819243875)
  {
    if (a2 == 1819243876)
    {
      if (*a3 >= 8)
      {
        cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v14 = 257;
        v11 = VorbisComment::FillLoudnessInfoDictionary((VorbisComment *)(this + 70), (CACFDictionary *)&cf);
        v10 = 1886681407;
        if (!v11 && CACFDictionary::Size((CACFDictionary *)&cf))
        {
          if (cf)
          {
            CFRetain(cf);
            v12 = cf;
          }
          else
          {
            v12 = 0;
          }
          v10 = 0;
          *__dst = v12;
        }
        CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
        return v10;
      }
      return 561211770;
    }
    if (a2 == 1986225779)
      return VorbisComment::GetVorbisCommentFieldList(this + 70, a3, (uint64_t)__dst);
    return AudioFileStreamObject::GetProperty((AudioFileStreamObject *)this, a2, a3, __dst);
  }
  if (a2 == 1633776244)
  {
    if (*a3 >= 8)
    {
      v9 = this[74];
      if (v9)
      {
        CFRetain(v9);
        *__dst = this[74];
      }
      v10 = 0;
      *a3 = 8;
      return v10;
    }
    return 561211770;
  }
  if (a2 != 1768842863)
    return AudioFileStreamObject::GetProperty((AudioFileStreamObject *)this, a2, a3, __dst);
  if (*a3 >= 8)
  {
    cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v14 = 257;
    VorbisComment::FillInfoDictionary((const __CFString **)this + 70, (CACFDictionary *)&cf);
    if (cf)
    {
      CFRetain(cf);
      v7 = cf;
    }
    else
    {
      v7 = 0;
    }
    *__dst = v7;
    CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
    return 0;
  }
  return 561211770;
}

void sub_18F0767F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t FLACAudioStream::ParseHeader(FLACAudioStream *this, uint64_t a2)
{
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  size_t v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int location;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  void (*v35)(_QWORD, _QWORD, uint64_t, CFRange *);
  int v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  CFIndex v49;
  int v50;
  __CFData *v51;
  CFIndex v52;
  UInt8 *v53;
  int v54;
  int v55;
  int v56;
  CFStringRef v57;
  const __CFString *v58;
  const __CFCharacterSet *v59;
  CFIndex v60;
  CFStringRef v61;
  const __CFString *v62;
  CFIndex v63;
  CFIndex Length;
  CFStringRef v65;
  CFTypeRef v66;
  uint64_t v67;
  void (*v68)(_QWORD, _QWORD, uint64_t, CFRange *);
  void (*v69)(_QWORD, _QWORD, uint64_t, CFRange *);
  void (*v70)(_QWORD, _QWORD, uint64_t, CFRange *);
  int v71;
  int v72;
  int v73;
  CFIndex v74;
  int v75;
  __CFData *Mutable;
  CFIndex v77;
  UInt8 *MutableBytePtr;
  int v79;
  int v80;
  int v81;
  CFStringRef v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  char *v102;
  unsigned __int8 *v103;
  int v104;
  int v105;
  unint64_t v106;
  int v107;
  int v108;
  unsigned int v109;
  unint64_t v110;
  uint64_t v111;
  void (*v112)(_QWORD, _QWORD, uint64_t, CFRange *);
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  void (*v117)(_QWORD, _QWORD, uint64_t, CFRange *);
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  void (*v122)(_QWORD, _QWORD, uint64_t, CFRange *);
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(_QWORD, _QWORD, uint64_t, CFRange *);
  _DWORD *v139;
  uint64_t v140;
  void (*v141)(_QWORD, _QWORD, uint64_t, CFRange *);
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  size_t v147;
  uint64_t v148;
  void (*v149)(_QWORD, _QWORD, uint64_t, CFRange *);
  void (*v150)(_QWORD, _QWORD, uint64_t, CFRange *);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unsigned int v157;
  int v158;
  void (*v160)(_QWORD, _QWORD, uint64_t, CFRange *);
  void **v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unsigned int v166;
  int v167;
  void (*v169)(_QWORD, _QWORD, uint64_t, CFRange *);
  unint64_t v170;
  unsigned int v171;
  int v172;
  void (*v174)(_QWORD, _QWORD, uint64_t, CFRange *);
  unint64_t v175;
  unint64_t v176;
  unsigned int v177;
  int v178;
  void (*v180)(_QWORD, _QWORD, uint64_t, CFRange *);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  size_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  BOOL v192;
  _BOOL4 v193;
  unsigned int v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  BOOL v201;
  int v202;
  int v203;
  int v204;
  int v205;
  char *v206;
  size_t v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v213;
  size_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v226;
  uint64_t v227;
  BOOL v228;
  unsigned int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  unsigned int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v243;
  uint64_t v244;
  BOOL v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v254;
  uint64_t v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v267;
  uint64_t v268;
  BOOL v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v278;
  uint64_t v279;
  BOOL v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int v296;
  uint64_t v299;
  uint64_t v300;
  BOOL v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int v307;
  uint64_t v310;
  uint64_t v311;
  BOOL v312;
  unsigned int v313;
  int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v320;
  uint64_t v323;
  uint64_t v324;
  BOOL v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  CFIndex v331;
  int v332;
  int v333;
  int v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unsigned int v341;
  int v342;
  __CFData *v344;
  CFIndex v345;
  UInt8 *v346;
  int v347;
  int v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  void (*v352)(_QWORD, _QWORD, uint64_t, CFRange *);
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unsigned int v357;
  uint64_t v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unsigned int v367;
  BOOL v368;
  uint64_t v370;
  uint64_t v371;
  BOOL v372;
  int v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  uint64_t v384;
  uint64_t v385;
  BOOL v386;
  unsigned int v387;
  CFTypeRef v388;
  CFRange result;
  char *v390;
  uint64_t v391;
  CFTypeRef cf;
  CFTypeRef v393;
  CFStringRef theString;
  CFRange v395;
  CFRange v396;
  CFRange v397;

  v4 = *((_DWORD *)this + 59);
  if (v4 > 349)
  {
    if (v4 <= 383)
    {
      if (v4 <= 366)
      {
        switch(v4)
        {
          case 350:
            goto LABEL_397;
          case 357:
            v36 = *((_DWORD *)this + 64);
            v37 = (unsigned __int8 *)*((_QWORD *)this + 33);
            goto LABEL_134;
          case 362:
            v11 = *((_DWORD *)this + 64);
            v12 = (unsigned __int8 *)*((_QWORD *)this + 33);
            goto LABEL_137;
        }
      }
      else if (v4 > 375)
      {
        if (v4 == 376)
          goto LABEL_442;
        if (v4 == 380)
          goto LABEL_460;
      }
      else
      {
        if (v4 == 367)
          goto LABEL_327;
        if (v4 == 371)
        {
          v7 = *((_DWORD *)this + 64);
          v8 = (unsigned __int8 *)*((_QWORD *)this + 33);
          goto LABEL_343;
        }
      }
    }
    else if (v4 > 428)
    {
      if (v4 > 507)
      {
        if (v4 == 508)
          goto LABEL_267;
        if (v4 == 514)
        {
          v21 = *((_QWORD *)this + 1);
          LODWORD(v22) = *(_DWORD *)(v21 + 116);
          goto LABEL_313;
        }
      }
      else
      {
        if (v4 == 429)
          goto LABEL_535;
        if (v4 == 433)
          goto LABEL_178;
      }
    }
    else if (v4 > 407)
    {
      if (v4 == 408)
        goto LABEL_515;
      if (v4 == 413)
      {
        v15 = *((_DWORD *)this + 64);
        v16 = (unsigned __int8 *)*((_QWORD *)this + 33);
        goto LABEL_494;
      }
    }
    else
    {
      if (v4 == 384)
      {
        v23 = *((_DWORD *)this + 64);
        v24 = (unsigned __int8 *)*((_QWORD *)this + 33);
        goto LABEL_476;
      }
      if (v4 == 401)
        goto LABEL_502;
    }
    goto LABEL_70;
  }
  if (v4 <= 280)
  {
    if (v4 <= 174)
    {
      if (v4 == -1)
        return 0;
      if (v4)
      {
        if (v4 != 165)
          goto LABEL_70;
        v9 = *((_DWORD *)this + 64);
        v10 = (unsigned __int8 *)*((_QWORD *)this + 33);
      }
      else
      {
        v9 = 4;
        *((_DWORD *)this + 64) = 4;
        v10 = (unsigned __int8 *)this + 332;
        *((_QWORD *)this + 33) = (char *)this + 332;
      }
      LODWORD(result.location) = v9;
      StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)&result, v10);
      location = result.location;
      v31 = *((_DWORD *)this + 64);
      *((_QWORD *)this + 33) += LODWORD(result.location);
      v32 = v31 - location;
      *((_DWORD *)this + 64) = v32;
      if (v32)
      {
        v29 = 0;
        v40 = 165;
        goto LABEL_177;
      }
      v33 = *((_DWORD *)this + 83);
      *((_DWORD *)this + 83) = bswap32(v33);
      if (v33 == 1130450022)
      {
        *((_QWORD *)this + 37) += 4;
        v34 = *((_QWORD *)this + 1);
        LODWORD(result.location) = 1;
        if (!*(_BYTE *)(v34 + 104))
        {
          *(_BYTE *)(v34 + 104) = 1;
          v35 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v34 + 24);
          if (v35)
            v35(*(_QWORD *)(v34 + 40), *(unsigned int *)(v34 + 8), 1717988724, &result);
        }
        goto LABEL_174;
      }
LABEL_169:
      v29 = 1685348671;
      *((_BYTE *)this + 177) = 1;
      goto LABEL_72;
    }
    if (v4 <= 263)
    {
      if (v4 == 175)
      {
        v25 = *((_DWORD *)this + 64);
        v26 = (unsigned __int8 *)*((_QWORD *)this + 33);
        goto LABEL_123;
      }
      if (v4 == 188)
      {
        v5 = *((_DWORD *)this + 64);
        v6 = (unsigned __int8 *)*((_QWORD *)this + 33);
        goto LABEL_142;
      }
      goto LABEL_70;
    }
    if (v4 == 264)
      goto LABEL_349;
    if (v4 != 273)
    {
LABEL_70:
      v29 = 0;
LABEL_72:
      v40 = -1;
      goto LABEL_177;
    }
    v17 = *((_DWORD *)this + 64);
    v18 = (unsigned __int8 *)*((_QWORD *)this + 33);
LABEL_110:
    LODWORD(result.location) = v17;
    StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)&result, v18);
    v71 = result.location;
    v72 = *((_DWORD *)this + 64);
    *((_QWORD *)this + 33) += LODWORD(result.location);
    v73 = v72 - v71;
    *((_DWORD *)this + 64) = v73;
    if (v73)
    {
      v29 = 0;
      v40 = 273;
      goto LABEL_177;
    }
    v74 = *((unsigned int *)this + 129);
    v75 = *((_DWORD *)this + 128) + 4;
    *((_DWORD *)this + 128) = v75;
    if (*((_DWORD *)this + 127) - v75 <= v74)
      goto LABEL_376;
    Mutable = CFDataCreateMutable(0, v74);
    *((_QWORD *)this + 65) = Mutable;
    v77 = *((unsigned int *)this + 129);
    if (!Mutable)
    {
      while (1)
      {
        *((_DWORD *)this + 64) = v77;
        if (!(_DWORD)v77)
          goto LABEL_376;
LABEL_365:
        v247 = *((_QWORD *)this + 1);
        v249 = *(_QWORD *)(v247 + 88);
        v248 = *(_QWORD *)(v247 + 96);
        v250 = v249 + *(unsigned int *)(v247 + 80);
        v251 = v250 - v248;
        if (v248 < v249 || v250 <= v248 || (_DWORD)v250 == (_DWORD)v248)
        {
          v29 = 0;
          v40 = 281;
          goto LABEL_177;
        }
        v254 = *((unsigned int *)this + 64);
        v255 = v248 + v254;
        v134 = v254 >= v251;
        v256 = v254 - v251;
        if (v134)
        {
          LODWORD(v77) = v256;
        }
        else
        {
          v250 = v255;
          LODWORD(v77) = 0;
        }
        *(_QWORD *)(v247 + 96) = v250;
      }
    }
    CFDataSetLength(Mutable, v77);
    MutableBytePtr = CFDataGetMutableBytePtr(*((CFMutableDataRef *)this + 65));
    *((_QWORD *)this + 66) = MutableBytePtr;
    v38 = *((_DWORD *)this + 129);
    *((_DWORD *)this + 64) = v38;
    if (!MutableBytePtr)
      goto LABEL_380;
    v39 = MutableBytePtr;
    *((_QWORD *)this + 33) = MutableBytePtr;
  }
  else
  {
    if (v4 > 312)
    {
      if (v4 > 328)
      {
        if (v4 == 329)
          goto LABEL_426;
        if (v4 == 332)
        {
          v19 = *((_DWORD *)this + 64);
          v20 = (unsigned __int8 *)*((_QWORD *)this + 33);
          goto LABEL_84;
        }
      }
      else
      {
        if (v4 == 313)
        {
          v27 = *((_DWORD *)this + 64);
          v28 = (unsigned __int8 *)*((_QWORD *)this + 33);
          goto LABEL_79;
        }
        if (v4 == 321)
          goto LABEL_413;
      }
      goto LABEL_70;
    }
    if (v4 <= 291)
    {
      if (v4 == 281)
        goto LABEL_365;
      if (v4 != 289)
        goto LABEL_70;
      do
      {
        v260 = *((_QWORD *)this + 1);
        v262 = *(_QWORD *)(v260 + 88);
        v261 = *(_QWORD *)(v260 + 96);
        v263 = v262 + *(unsigned int *)(v260 + 80);
        v264 = v263 - v261;
        if (v261 < v262 || v263 <= v261 || (_DWORD)v263 == (_DWORD)v261)
        {
          v29 = 0;
          v40 = 289;
          goto LABEL_177;
        }
        v267 = *((unsigned int *)this + 64);
        v268 = v261 + v267;
        v269 = v267 >= v264;
        v270 = v267 - v264;
        if (v269)
          v268 = v263;
        if (v269)
          v38 = v270;
        else
          v38 = 0;
        *(_QWORD *)(v260 + 96) = v268;
        *((_DWORD *)this + 64) = v38;
LABEL_380:
        ;
      }
      while (v38);
      goto LABEL_175;
    }
    if (v4 != 292)
    {
      if (v4 == 305)
      {
        v13 = *((_DWORD *)this + 64);
        v14 = (unsigned __int8 *)*((_QWORD *)this + 33);
LABEL_73:
        LODWORD(result.location) = v13;
        StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)&result, v14);
        v41 = result.location;
        v42 = *((_DWORD *)this + 64);
        *((_QWORD *)this + 33) += LODWORD(result.location);
        v43 = v42 - v41;
        *((_DWORD *)this + 64) = v43;
        if (v43)
        {
          v29 = 0;
          v40 = 305;
          goto LABEL_177;
        }
        v44 = *((unsigned int *)this + 136);
        *((_DWORD *)this + 128) += 4;
        std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::reserve((_QWORD *)this + 71, v44);
        v45 = 0;
        for (*((_DWORD *)this + 137) = 0; ; *((_DWORD *)this + 137) = v45)
        {
          if (v45 >= *((_DWORD *)this + 136))
          {
            v67 = *((_QWORD *)this + 1);
            LODWORD(result.location) = 1;
            v68 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v67 + 24);
            if (v68)
            {
              v68(*(_QWORD *)(v67 + 40), *(unsigned int *)(v67 + 8), 1986225779, &result);
              v67 = *((_QWORD *)this + 1);
              v69 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v67 + 24);
              LODWORD(result.location) = 1;
              if (v69)
              {
                v69(*(_QWORD *)(v67 + 40), *(unsigned int *)(v67 + 8), 1768842863, &result);
                v67 = *((_QWORD *)this + 1);
              }
            }
            else
            {
              LODWORD(result.location) = 1;
            }
            LODWORD(result.location) = 1;
            if (!*(_BYTE *)(v67 + 110))
            {
              *(_BYTE *)(v67 + 110) = 1;
              v70 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v67 + 24);
              if (v70)
                v70(*(_QWORD *)(v67 + 40), *(unsigned int *)(v67 + 8), 1819243876, &result);
            }
            goto LABEL_376;
          }
          if ((*((_DWORD *)this + 127) - *((_DWORD *)this + 128)) >= 5)
          {
            v27 = 4;
            *((_DWORD *)this + 64) = 4;
            v28 = (unsigned __int8 *)this + 516;
            *((_QWORD *)this + 33) = (char *)this + 516;
LABEL_79:
            LODWORD(result.location) = v27;
            StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)&result, v28);
            v46 = result.location;
            v47 = *((_DWORD *)this + 64);
            *((_QWORD *)this + 33) += LODWORD(result.location);
            v48 = v47 - v46;
            *((_DWORD *)this + 64) = v48;
            if (v48)
            {
              v29 = 0;
              v40 = 313;
              goto LABEL_177;
            }
            v49 = *((unsigned int *)this + 129);
            v50 = *((_DWORD *)this + 128) + 4;
            *((_DWORD *)this + 128) = v50;
            if (*((_DWORD *)this + 127) - v50 >= v49)
            {
              v51 = CFDataCreateMutable(0, v49);
              *((_QWORD *)this + 65) = v51;
              v52 = *((unsigned int *)this + 129);
              if (v51)
              {
                CFDataSetLength(v51, v52);
                v53 = CFDataGetMutableBytePtr(*((CFMutableDataRef *)this + 65));
                *((_QWORD *)this + 66) = v53;
                v19 = *((_DWORD *)this + 129);
                *((_DWORD *)this + 64) = v19;
                if (v53)
                {
                  v20 = v53;
                  *((_QWORD *)this + 33) = v53;
LABEL_84:
                  LODWORD(result.location) = v19;
                  StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)&result, v20);
                  v54 = result.location;
                  v55 = *((_DWORD *)this + 64);
                  *((_QWORD *)this + 33) += LODWORD(result.location);
                  v56 = v55 - v54;
                  *((_DWORD *)this + 64) = v56;
                  if (v56)
                  {
                    v29 = 0;
                    v40 = 332;
                    goto LABEL_177;
                  }
                  v57 = CFStringCreateFromExternalRepresentation(0, *((CFDataRef *)this + 65), 0x8000100u);
                  if (v57)
                  {
                    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&theString, v57);
                    v58 = theString;
                    if (theString)
                    {
                      if (sCreateEqualCharSetOnce != -1)
                        dispatch_once_f(&sCreateEqualCharSetOnce, 0, (dispatch_function_t)CreateEqualCharSet);
                      v59 = (const __CFCharacterSet *)sEqualCharSet;
                      v395.length = CFStringGetLength(theString);
                      v395.location = 0;
                      if (CFStringFindCharacterFromSet(v58, v59, v395, 0, &result))
                      {
                        v60 = result.location;
                        if (result.location >= 1 && v60 < CFStringGetLength(theString) - 1)
                        {
                          v396.length = result.location;
                          v396.location = 0;
                          v61 = CFStringCreateWithSubstring(0, theString, v396);
                          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v393, v61);
                          v62 = theString;
                          v63 = result.location;
                          Length = CFStringGetLength(theString);
                          v397.location = v63 + 1;
                          v397.length = Length - (result.location + result.length);
                          v65 = CFStringCreateWithSubstring(0, v62, v397);
                          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v65);
                          v66 = v393;
                          if (!v393)
                            goto LABEL_95;
                          if (!cf)
                            goto LABEL_98;
                          VorbisComment::AddUserComment((_QWORD *)this + 70, v393, &cf);
LABEL_95:
                          if (cf)
                            CFRelease(cf);
                          v66 = v393;
                          if (v393)
LABEL_98:
                            CFRelease(v66);
                        }
                      }
                      if (theString)
                        CFRelease(theString);
                    }
                  }
                }
                else
                {
                  while (v19)
                  {
LABEL_426:
                    v292 = *((_QWORD *)this + 1);
                    v294 = *(_QWORD *)(v292 + 88);
                    v293 = *(_QWORD *)(v292 + 96);
                    v295 = v294 + *(unsigned int *)(v292 + 80);
                    v296 = v295 - v293;
                    if (v293 < v294 || v295 <= v293 || (_DWORD)v295 == (_DWORD)v293)
                    {
                      v29 = 0;
                      v40 = 329;
                      goto LABEL_177;
                    }
                    v299 = *((unsigned int *)this + 64);
                    v300 = v293 + v299;
                    v301 = v299 >= v296;
                    v302 = v299 - v296;
                    if (v301)
                      v300 = v295;
                    if (v301)
                      v19 = v302;
                    else
                      v19 = 0;
                    *(_QWORD *)(v292 + 96) = v300;
                    *((_DWORD *)this + 64) = v19;
                  }
                }
                *((_DWORD *)this + 128) += *((_DWORD *)this + 129);
                CFRelease(*((CFTypeRef *)this + 65));
                *((_QWORD *)this + 65) = 0;
                goto LABEL_122;
              }
              while (1)
              {
                *((_DWORD *)this + 64) = v52;
                if (!(_DWORD)v52)
                  break;
LABEL_413:
                v282 = *((_QWORD *)this + 1);
                v284 = *(_QWORD *)(v282 + 88);
                v283 = *(_QWORD *)(v282 + 96);
                v285 = v284 + *(unsigned int *)(v282 + 80);
                v286 = v285 - v283;
                if (v283 < v284 || v285 <= v283 || (_DWORD)v285 == (_DWORD)v283)
                {
                  v29 = 0;
                  v40 = 321;
                  goto LABEL_177;
                }
                v289 = *((unsigned int *)this + 64);
                v290 = v283 + v289;
                v134 = v289 >= v286;
                v291 = v289 - v286;
                if (v134)
                {
                  LODWORD(v52) = v291;
                }
                else
                {
                  v285 = v290;
                  LODWORD(v52) = 0;
                }
                *(_QWORD *)(v282 + 96) = v285;
              }
            }
          }
LABEL_122:
          v45 = *((_DWORD *)this + 137) + 1;
        }
      }
      goto LABEL_70;
    }
    v38 = *((_DWORD *)this + 64);
    v39 = (unsigned __int8 *)*((_QWORD *)this + 33);
  }
  LODWORD(result.location) = v38;
  StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)&result, v39);
  v79 = result.location;
  v80 = *((_DWORD *)this + 64);
  *((_QWORD *)this + 33) += LODWORD(result.location);
  v81 = v80 - v79;
  *((_DWORD *)this + 64) = v81;
  if (v81)
  {
    v29 = 0;
    v40 = 292;
    goto LABEL_177;
  }
  v82 = CFStringCreateFromExternalRepresentation(0, *((CFDataRef *)this + 65), 0x8000100u);
  *((_QWORD *)this + 67) = v82;
  if (v82)
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v388, v82);
    VorbisComment::SetVendorString((const void **)this + 70, v388);
    if (v388)
      CFRelease(v388);
  }
LABEL_175:
  *((_DWORD *)this + 128) += *((_DWORD *)this + 129);
  CFRelease(*((CFTypeRef *)this + 65));
  *((_QWORD *)this + 65) = 0;
  if ((*((_DWORD *)this + 127) - *((_DWORD *)this + 128)) >= 5)
  {
    v13 = 4;
    *((_DWORD *)this + 64) = 4;
    v14 = (unsigned __int8 *)this + 544;
    *((_QWORD *)this + 33) = (char *)this + 544;
    goto LABEL_73;
  }
LABEL_376:
  v257 = *((_DWORD *)this + 127);
  v258 = *((_DWORD *)this + 128);
  v134 = v257 >= v258;
  v259 = v257 - v258;
  if (v259 != 0 && v134)
  {
    while (1)
    {
      *((_DWORD *)this + 64) = v259;
      if (!v259)
        goto LABEL_195;
LABEL_397:
      v271 = *((_QWORD *)this + 1);
      v273 = *(_QWORD *)(v271 + 88);
      v272 = *(_QWORD *)(v271 + 96);
      v274 = v273 + *(unsigned int *)(v271 + 80);
      v275 = v274 - v272;
      if (v272 < v273 || v274 <= v272 || (_DWORD)v274 == (_DWORD)v272)
      {
        v29 = 0;
        v40 = 350;
        goto LABEL_177;
      }
      v278 = *((unsigned int *)this + 64);
      v279 = v272 + v278;
      v280 = v278 >= v275;
      v281 = v278 - v275;
      if (v280)
        v279 = v274;
      if (v280)
        v259 = v281;
      else
        v259 = 0;
      *(_QWORD *)(v271 + 96) = v279;
    }
  }
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_195:
        v136 = *((_QWORD *)this + 37) + *((unsigned int *)this + 127);
        *((_QWORD *)this + 37) = v136;
        if ((*((_DWORD *)this + 84) & 0x80000000) != 0)
        {
          *((_QWORD *)this + 13) = v136;
          v137 = *((_QWORD *)this + 1);
          LODWORD(result.location) = 1;
          v138 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v137 + 24);
          if (v138)
            v138(*(_QWORD *)(v137 + 40), *(unsigned int *)(v137 + 8), 1685022310, &result);
          if (VorbisComment::GetWAVEChannelMask(*((VorbisComment **)this + 71), *((VorbisComment **)this + 72), (_DWORD *)this + 97))
          {
LABEL_202:
            v140 = *((_QWORD *)this + 1);
            LODWORD(result.location) = 1;
            if (!*(_BYTE *)(v140 + 109))
            {
              *(_BYTE *)(v140 + 109) = 1;
              v141 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v140 + 24);
              if (v141)
                v141(*(_QWORD *)(v140 + 40), *(unsigned int *)(v140 + 8), 1668112752, &result);
            }
            if (!*((_QWORD *)this + 70) && *((_QWORD *)this + 72) == *((_QWORD *)this + 71))
            {
              v162 = *((_QWORD *)this + 1);
              v163 = *(_QWORD *)(v162 + 48);
              v164 = *(_QWORD *)(v162 + 56);
              if (v164 != v163)
              {
                v165 = 0;
                v166 = 1;
                do
                {
                  v167 = *(_DWORD *)(v163 + 4 * v165);
                  v165 = v166++;
                }
                while (v167 != 1986225779 && (v164 - v163) >> 2 > v165);
                if (v167 == 1986225779)
                {
                  LODWORD(result.location) = 1;
                  v169 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v162 + 24);
                  if (v169)
                  {
                    v169(*(_QWORD *)(v162 + 40), *(unsigned int *)(v162 + 8), 1986225779, &result);
                    v162 = *((_QWORD *)this + 1);
                    v163 = *(_QWORD *)(v162 + 48);
                    v164 = *(_QWORD *)(v162 + 56);
                  }
                }
                if (v164 != v163)
                {
                  v170 = 0;
                  v171 = 1;
                  do
                  {
                    v172 = *(_DWORD *)(v163 + 4 * v170);
                    v170 = v171++;
                  }
                  while (v172 != 1768842863 && (v164 - v163) >> 2 > v170);
                  if (v172 == 1768842863)
                  {
                    LODWORD(result.location) = 1;
                    v174 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v162 + 24);
                    if (v174)
                    {
                      v174(*(_QWORD *)(v162 + 40), *(unsigned int *)(v162 + 8), 1768842863, &result);
                      v162 = *((_QWORD *)this + 1);
                      v163 = *(_QWORD *)(v162 + 48);
                      v164 = *(_QWORD *)(v162 + 56);
                    }
                  }
                  if (v164 != v163)
                  {
                    v175 = 0;
                    v176 = (v164 - v163) >> 2;
                    v177 = 1;
                    do
                    {
                      v178 = *(_DWORD *)(v163 + 4 * v175);
                      v175 = v177++;
                    }
                    while (v178 != 1819243876 && v176 > v175);
                    if (v178 == 1819243876)
                    {
                      LODWORD(result.location) = 1;
                      if (!*(_BYTE *)(v162 + 110))
                      {
                        *(_BYTE *)(v162 + 110) = 1;
                        v180 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v162 + 24);
                        if (v180)
                          v180(*(_QWORD *)(v162 + 40), *(unsigned int *)(v162 + 8), 1819243876, &result);
                      }
                    }
                  }
                }
              }
            }
            if (!*((_QWORD *)this + 74))
            {
              v151 = *((_QWORD *)this + 1);
              v152 = *(_QWORD *)(v151 + 48);
              v153 = *(_QWORD *)(v151 + 56);
              v154 = v153 - v152;
              if (v153 != v152)
              {
                v155 = 0;
                v156 = v154 >> 2;
                v157 = 1;
                do
                {
                  v158 = *(_DWORD *)(v152 + 4 * v155);
                  v155 = v157++;
                }
                while (v158 != 1633776244 && v156 > v155);
                if (v158 == 1633776244)
                {
                  LODWORD(result.location) = 1;
                  v160 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v151 + 24);
                  if (v160)
                    v160(*(_QWORD *)(v151 + 40), *(unsigned int *)(v151 + 8), 1633776244, &result);
                }
              }
            }
            v142 = *((_DWORD *)this + 124);
            if (!v142)
            {
              v143 = *((_DWORD *)this + 93);
              v144 = *((_DWORD *)this + 82);
              if (v144 == 20)
                v145 = ((double)((v144 >> 3) * v143 * *((_DWORD *)this + 91)) * 1.5);
              else
                v145 = (v144 >> 3) * v143 * *((_DWORD *)this + 91);
              if (!v145)
                v145 = 0x100000;
              if (v143)
                v146 = 8 * v143 + 18;
              else
                v146 = 82;
              v142 = v145 + v146;
              *((_DWORD *)this + 124) = v142;
            }
            v147 = (v142 + 1);
            if (*((_DWORD *)this + 71) < v147)
            {
              *((_DWORD *)this + 71) = v147;
              CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 36, v147, 0);
              v142 = *((_DWORD *)this + 124);
            }
            *((_DWORD *)this + 28) = v142;
            v148 = *((_QWORD *)this + 1);
            LODWORD(result.location) = 1;
            v149 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v148 + 24);
            if (v149)
            {
              v149(*(_QWORD *)(v148 + 40), *(unsigned int *)(v148 + 8), 1886616165, &result);
              v148 = *((_QWORD *)this + 1);
            }
            LODWORD(result.location) = 1;
            if (!*(_DWORD *)(v148 + 112))
            {
              *(_DWORD *)(v148 + 112) = 1;
              v150 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v148 + 24);
              if (v150)
                v150(*(_QWORD *)(v148 + 40), *(unsigned int *)(v148 + 8), 1919247481, &result);
            }
            while (1)
            {
LABEL_267:
              v181 = *((_QWORD *)this + 1);
              v182 = *(unsigned int *)(v181 + 80);
              v184 = *(_QWORD *)(v181 + 88);
              v183 = *(_QWORD *)(v181 + 96);
              v185 = v184 + v182;
              if (v183 < v184 || v185 <= v183 || (_DWORD)v185 - (_DWORD)v183 == 0)
              {
                v29 = 0;
                v40 = 508;
                goto LABEL_177;
              }
              if (FLACAudioStream::Resync(this))
                break;
              v188 = *((unsigned int *)this + 122);
              if ((_DWORD)v188)
              {
                *((_DWORD *)this + 64) = v188;
                v21 = *((_QWORD *)this + 1);
                v189 = *(_QWORD *)(v21 + 88);
                v190 = *(_QWORD *)(v21 + 96);
                v191 = v189 + *(unsigned int *)(v21 + 80);
                v192 = v190 < v189 || v191 <= v190;
                v193 = v192;
                v194 = v191 - v190;
                v22 = v193 ? 0 : v194;
                if (v22 < v188)
                {
                  *((_QWORD *)this + 34) = v190;
                  v195 = *(char **)(v21 + 72);
                  if (v195 == *(char **)(v21 + 128))
                  {
                    if (v194)
                      v205 = v193;
                    else
                      v205 = 1;
                    if (v205)
                      v206 = 0;
                    else
                      v206 = &v195[(v190 - v189)];
                    memmove(v195, v206, v22);
                    v207 = *((unsigned int *)this + 122);
                    v21 = *((_QWORD *)this + 1);
                    if (*(_DWORD *)(v21 + 120) < v207)
                    {
                      *(_DWORD *)(v21 + 120) = v207;
                      CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v21 + 128), v207);
                      v21 = *((_QWORD *)this + 1);
                    }
                    *(_DWORD *)(v21 + 116) = v22;
                    *(_QWORD *)(v21 + 96) = *(_QWORD *)(v21 + 88) + *(unsigned int *)(v21 + 80);
                  }
                  else
                  {
                    if (*(_DWORD *)(v21 + 120) < v188)
                    {
                      *(_DWORD *)(v21 + 120) = v188;
                      CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v21 + 128), v188);
                      v21 = *((_QWORD *)this + 1);
                    }
                    LODWORD(v22) = 0;
                    *(_DWORD *)(v21 + 116) = 0;
                  }
LABEL_313:
                  v208 = *((_DWORD *)this + 64) - v22;
                  v209 = *(_QWORD *)(v21 + 88);
                  v210 = *(_QWORD *)(v21 + 96);
                  v211 = v209 + *(unsigned int *)(v21 + 80);
                  if (v211 <= v210 || v210 < v209)
                    v213 = 0;
                  else
                    v213 = v211 - v210;
                  if (v208 <= v213)
                    v208 = v213;
                  LODWORD(result.location) = v208;
                  v214 = v208 + v22;
                  if (*(_DWORD *)(v21 + 120) < v214)
                  {
                    *(_DWORD *)(v21 + 120) = v214;
                    CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v21 + 128), v214);
                    v21 = *((_QWORD *)this + 1);
                  }
                  StreamBuffer::Copy((_QWORD *)(v21 + 72), (unsigned int *)&result, (unsigned __int8 *)(*(_QWORD *)(v21 + 128) + *(unsigned int *)(v21 + 116)));
                  v215 = *((_QWORD *)this + 1);
                  v216 = *(_DWORD *)(v215 + 116) + LODWORD(result.location);
                  *(_DWORD *)(v215 + 116) = v216;
                  if (v216 < *((_DWORD *)this + 64))
                  {
                    v29 = 0;
                    v40 = 514;
                    goto LABEL_177;
                  }
                  v217 = *((_QWORD *)this + 34);
                  v218 = *(_QWORD *)(v215 + 128);
                  *(_QWORD *)(v215 + 88) = v217;
                  *(_QWORD *)(v215 + 96) = v217;
                  *(_QWORD *)(v215 + 72) = v218;
                  *(_DWORD *)(v215 + 80) = v216;
                }
              }
            }
            v196 = 0;
            *(_QWORD *)a2 = this;
            *(_OWORD *)(a2 + 8) = xmmword_18F116F70;
            v197 = *((_QWORD *)this + 1);
            v198 = *(_QWORD *)(v197 + 88);
            v199 = *(_QWORD *)(v197 + 96);
            v200 = v198 + *(unsigned int *)(v197 + 80);
            v201 = v199 < v198 || v200 <= v199;
            v202 = v201;
            v203 = v200 - v199;
            if (!v201 && v203)
              v196 = *(_QWORD *)(v197 + 72) + (v199 - v198);
            v29 = 0;
            *(_QWORD *)(a2 + 32) = v196;
            if (v202)
              v204 = 0;
            else
              v204 = v203;
            *(_DWORD *)(a2 + 24) = v204;
            return v29;
          }
          *((_DWORD *)this + 98) = *((_DWORD *)this + 93);
          v139 = (_DWORD *)((char *)this + 144);
          if (AudioFormatGetPropertyInfo(0x636C636Du, 8u, (char *)this + 388, (UInt32 *)this + 36))
          {
            *v139 = 0;
LABEL_201:
            CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 17, 0x20uLL, 0);
            bzero(*((void **)this + 17), 0x20uLL);
            **((_DWORD **)this + 17) = kFLACChannelConfigToLayoutTag[*((_DWORD *)this + 93) - 1];
            *((_DWORD *)this + 36) = 32;
            goto LABEL_202;
          }
          v161 = (void **)((char *)this + 136);
          CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 17, *((unsigned int *)this + 36), 0);
          bzero(*((void **)this + 17), *((unsigned int *)this + 36));
          if (AudioFormatGetProperty(0x636C636Du, 8u, (char *)this + 388, (UInt32 *)this + 36, *((void **)this + 17)))
          {
            *v139 = 0;
            if (!*v161)
              goto LABEL_201;
            free(*v161);
            *v161 = 0;
          }
          if (*v139)
            goto LABEL_202;
          goto LABEL_201;
        }
LABEL_174:
        v25 = 4;
        *((_DWORD *)this + 64) = 4;
        v26 = (unsigned __int8 *)this + 336;
        *((_QWORD *)this + 33) = (char *)this + 336;
LABEL_123:
        LODWORD(result.location) = v25;
        StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)&result, v26);
        v83 = result.location;
        v84 = *((_DWORD *)this + 64);
        *((_QWORD *)this + 33) += LODWORD(result.location);
        v85 = v84 - v83;
        *((_DWORD *)this + 64) = v85;
        if (v85)
        {
          v29 = 0;
          v40 = 175;
          goto LABEL_177;
        }
        v86 = bswap32(*((_DWORD *)this + 84));
        *((_DWORD *)this + 84) = v86;
        v87 = v86 & 0xFFFFFF;
        *((_DWORD *)this + 127) = v86 & 0xFFFFFF;
        *((_QWORD *)this + 37) += 4;
        v88 = HIBYTE(v86) & 0x7F;
        if (v88 > 5)
          break;
        if (v88)
        {
          if (v88 != 4)
            goto LABEL_192;
          *((_DWORD *)this + 128) = 0;
          if (!*((_QWORD *)this + 70) && v87 >= 5 && *((_QWORD *)this + 72) == *((_QWORD *)this + 71))
          {
            v17 = 4;
            *((_DWORD *)this + 64) = 4;
            v18 = (unsigned __int8 *)this + 516;
            *((_QWORD *)this + 33) = (char *)this + 516;
            goto LABEL_110;
          }
          goto LABEL_376;
        }
        if (v87 <= 0x21)
          goto LABEL_169;
        bzero((char *)this + 344, 0x28uLL);
        *((_DWORD *)this + 88) = 1718378851;
        v5 = 34;
        *((_DWORD *)this + 64) = 34;
        v6 = (unsigned __int8 *)this + 396;
        *((_QWORD *)this + 33) = (char *)this + 396;
LABEL_142:
        LODWORD(result.location) = v5;
        StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)&result, v6);
        v98 = result.location;
        v99 = *((_DWORD *)this + 64);
        *((_QWORD *)this + 33) += LODWORD(result.location);
        v100 = v99 - v98;
        *((_DWORD *)this + 64) = v100;
        if (v100)
        {
          v29 = 0;
          v40 = 188;
          goto LABEL_177;
        }
        result.location = (CFIndex)this + 396;
        result.length = (CFIndex)this + 396;
        v390 = (char *)this + 430;
        v391 = 0;
        if ((((unint64_t)this + 396) & 3) != 0)
        {
          v101 = 0;
          v102 = (char *)this + 397;
          v103 = (unsigned __int8 *)this + 396;
          do
          {
            if (v103 >= (unsigned __int8 *)this + 430)
              v104 = 255;
            else
              v104 = *v103;
            v101 = v104 | (v101 << 8);
            ++v103;
            v131 = (v102++ & 3) == 0;
          }
          while (!v131);
          result.location = (CFIndex)this + ((this ^ 3) & 3) + 397;
          LODWORD(v391) = v101 << ((8 * ((this ^ 3) & 3)) ^ 0x18);
          HIDWORD(v391) = 8 * ((this ^ 3) & 3) + 8;
        }
        FLACUnpackStreamInfo((uint64_t)&result, (uint64_t)this + 432);
        v105 = *((_DWORD *)this + 108);
        if (v105 != *((_DWORD *)this + 109))
          v105 = 0;
        *((_DWORD *)this + 91) = v105;
        v106 = *((_QWORD *)this + 55);
        *(_QWORD *)((char *)this + 492) = v106;
        LODWORD(v106) = *((_DWORD *)this + 112);
        *((double *)this + 43) = (double)v106;
        v107 = *((_DWORD *)this + 113);
        *((_DWORD *)this + 93) = v107;
        v108 = *((_DWORD *)this + 114);
        *((_DWORD *)this + 82) = v108;
        *((_DWORD *)this + 96) = kFLACChannelConfigToLayoutTag[v107 - 1];
        HIDWORD(v110) = v108;
        LODWORD(v110) = v108 - 16;
        v109 = v110 >> 2;
        if (v109 >= 5 || ((0x17u >> v109) & 1) == 0)
          goto LABEL_169;
        *((_DWORD *)this + 89) = dword_18F10DC00[v109];
        (*(void (**)(FLACAudioStream *, char *))(*(_QWORD *)this + 56))(this, (char *)this + 344);
        v111 = *((_QWORD *)this + 1);
        LODWORD(result.location) = 1;
        if (!*(_BYTE *)(v111 + 105))
        {
          *(_BYTE *)(v111 + 105) = 1;
          v112 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v111 + 24);
          if (v112)
            v112(*(_QWORD *)(v111 + 40), *(unsigned int *)(v111 + 8), 1684434292, &result);
        }
        v113 = *((_QWORD *)this + 58);
        *((_QWORD *)this + 20) = v113;
        v114 = *((unsigned int *)this + 91);
        if ((_DWORD)v114)
        {
          v115 = v113 <= v114 * (v113 / v114)
               ? v113 / v114
               : (v113 / v114) + 1;
          *((_DWORD *)this + 43) = v115 * v114 - v113;
          (*(void (**)(FLACAudioStream *))(*(_QWORD *)this + 80))(this);
          v116 = *((_QWORD *)this + 1);
          LODWORD(result.location) = 1;
          v117 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v116 + 24);
          if (v117)
            v117(*(_QWORD *)(v116 + 40), *(unsigned int *)(v116 + 8), 1885564532, &result);
        }
        CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 15, 0x32uLL, 0);
        v118 = *((_QWORD *)this + 15);
        *(_OWORD *)v118 = xmmword_18F117070;
        v120 = *(_OWORD *)((char *)this + 396);
        v119 = *(_OWORD *)((char *)this + 412);
        *(_WORD *)(v118 + 48) = *((_WORD *)this + 214);
        *(_OWORD *)(v118 + 16) = v120;
        *(_OWORD *)(v118 + 32) = v119;
        *((_DWORD *)this + 32) = 50;
        v121 = *((_QWORD *)this + 1);
        LODWORD(result.location) = 1;
        *(_BYTE *)(v121 + 108) = 1;
        v122 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v121 + 24);
        if (v122)
          v122(*(_QWORD *)(v121 + 40), *(unsigned int *)(v121 + 8), 1835493731, &result);
        v123 = *((_DWORD *)this + 127);
        if (v123 >= 0x23)
        {
          v124 = v123 - 34;
          while (1)
          {
            *((_DWORD *)this + 64) = v124;
            if (!v124)
              break;
LABEL_349:
            v236 = *((_QWORD *)this + 1);
            v238 = *(_QWORD *)(v236 + 88);
            v237 = *(_QWORD *)(v236 + 96);
            v239 = v238 + *(unsigned int *)(v236 + 80);
            v240 = v239 - v237;
            if (v237 < v238 || v239 <= v237 || (_DWORD)v239 == (_DWORD)v237)
            {
              v29 = 0;
              v40 = 264;
              goto LABEL_177;
            }
            v243 = *((unsigned int *)this + 64);
            v244 = v237 + v243;
            v245 = v243 >= v240;
            v246 = v243 - v240;
            if (v245)
              v244 = v239;
            if (v245)
              v124 = v246;
            else
              v124 = 0;
            *(_QWORD *)(v236 + 96) = v244;
          }
        }
      }
      if (v88 == 6)
        break;
      if (v88 == 127)
        goto LABEL_169;
LABEL_192:
      while (1)
      {
        *((_DWORD *)this + 64) = v87;
        if (!v87)
          break;
LABEL_178:
        v125 = *((_QWORD *)this + 1);
        v127 = *(_QWORD *)(v125 + 88);
        v126 = *(_QWORD *)(v125 + 96);
        v128 = v127 + *(unsigned int *)(v125 + 80);
        v129 = v128 - v126;
        v131 = v126 < v127 || v128 <= v126 || (_DWORD)v128 == (_DWORD)v126;
        if (v131)
        {
          v29 = 0;
          v40 = 433;
          goto LABEL_177;
        }
        v132 = *((unsigned int *)this + 64);
        v133 = v126 + v132;
        v134 = v132 >= v129;
        v135 = v132 - v129;
        if (v134)
          v133 = v128;
        if (v134)
          v87 = v135;
        else
          v87 = 0;
        *(_QWORD *)(v125 + 96) = v133;
      }
    }
    *((_DWORD *)this + 128) = 0;
    if (v87 >= 5)
    {
      v36 = 4;
      *((_DWORD *)this + 64) = 4;
      v37 = (unsigned __int8 *)this + 552;
      *((_QWORD *)this + 33) = (char *)this + 552;
LABEL_134:
      LODWORD(result.location) = v36;
      StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)&result, v37);
      v89 = result.location;
      v90 = *((_DWORD *)this + 64);
      *((_QWORD *)this + 33) += LODWORD(result.location);
      v91 = v90 - v89;
      *((_DWORD *)this + 64) = v91;
      if (v91)
      {
        v29 = 0;
        v40 = 357;
        goto LABEL_177;
      }
      *((_DWORD *)this + 138) = bswap32(*((_DWORD *)this + 138));
      v92 = *((_DWORD *)this + 128) + 4;
      *((_DWORD *)this + 128) = v92;
      if ((*((_DWORD *)this + 127) - v92) >= 5)
      {
        v11 = 4;
        *((_DWORD *)this + 64) = 4;
        v12 = (unsigned __int8 *)this + 516;
        *((_QWORD *)this + 33) = (char *)this + 516;
LABEL_137:
        LODWORD(result.location) = v11;
        StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)&result, v12);
        v93 = result.location;
        v94 = *((_DWORD *)this + 64);
        *((_QWORD *)this + 33) += LODWORD(result.location);
        v95 = v94 - v93;
        *((_DWORD *)this + 64) = v95;
        if (v95)
        {
          v29 = 0;
          v40 = 362;
          goto LABEL_177;
        }
        v96 = bswap32(*((_DWORD *)this + 129));
        *((_DWORD *)this + 129) = v96;
        v97 = *((_DWORD *)this + 128) + 4;
        *((_DWORD *)this + 128) = v97;
        if (*((_DWORD *)this + 127) - v97 > v96)
        {
          while (1)
          {
            *((_DWORD *)this + 64) = v96;
            if (!v96)
              break;
LABEL_327:
            v219 = *((_QWORD *)this + 1);
            v221 = *(_QWORD *)(v219 + 88);
            v220 = *(_QWORD *)(v219 + 96);
            v222 = v221 + *(unsigned int *)(v219 + 80);
            v223 = v222 - v220;
            if (v220 < v221 || v222 <= v220 || (_DWORD)v222 == (_DWORD)v220)
            {
              v29 = 0;
              v40 = 367;
              goto LABEL_177;
            }
            v226 = *((unsigned int *)this + 64);
            v227 = v220 + v226;
            v228 = v226 >= v223;
            v229 = v226 - v223;
            if (v228)
              v227 = v222;
            if (v228)
              v96 = v229;
            else
              v96 = 0;
            *(_QWORD *)(v219 + 96) = v227;
          }
          v230 = *((_DWORD *)this + 128) + *((_DWORD *)this + 129);
          *((_DWORD *)this + 128) = v230;
          if ((*((_DWORD *)this + 127) - v230) < 5)
            goto LABEL_530;
          v8 = (unsigned __int8 *)this + 516;
          v7 = 4;
          *((_DWORD *)this + 64) = 4;
          *((_QWORD *)this + 33) = (char *)this + 516;
LABEL_343:
          LODWORD(result.location) = v7;
          StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)&result, v8);
          v231 = result.location;
          v232 = *((_DWORD *)this + 64);
          *((_QWORD *)this + 33) += LODWORD(result.location);
          v233 = v232 - v231;
          *((_DWORD *)this + 64) = v233;
          if (v233)
          {
            v29 = 0;
            v40 = 371;
            goto LABEL_177;
          }
          v234 = bswap32(*((_DWORD *)this + 129));
          *((_DWORD *)this + 129) = v234;
          v235 = *((_DWORD *)this + 128) + 4;
          *((_DWORD *)this + 128) = v235;
          if (*((_DWORD *)this + 127) - v235 > v234)
          {
            while (1)
            {
              *((_DWORD *)this + 64) = v234;
              if (!v234)
                break;
LABEL_442:
              v303 = *((_QWORD *)this + 1);
              v305 = *(_QWORD *)(v303 + 88);
              v304 = *(_QWORD *)(v303 + 96);
              v306 = v305 + *(unsigned int *)(v303 + 80);
              v307 = v306 - v304;
              if (v304 < v305 || v306 <= v304 || (_DWORD)v306 == (_DWORD)v304)
              {
                v29 = 0;
                v40 = 376;
                goto LABEL_177;
              }
              v310 = *((unsigned int *)this + 64);
              v311 = v304 + v310;
              v312 = v310 >= v307;
              v313 = v310 - v307;
              if (v312)
                v311 = v306;
              if (v312)
                v234 = v313;
              else
                v234 = 0;
              *(_QWORD *)(v303 + 96) = v311;
            }
            v314 = *((_DWORD *)this + 128) + *((_DWORD *)this + 129);
            *((_DWORD *)this + 128) = v314;
            if ((*((_DWORD *)this + 127) - v314) < 0x11)
              goto LABEL_530;
            v315 = 16;
            while (1)
            {
              *((_DWORD *)this + 64) = v315;
              if (!v315)
                break;
LABEL_460:
              v316 = *((_QWORD *)this + 1);
              v318 = *(_QWORD *)(v316 + 88);
              v317 = *(_QWORD *)(v316 + 96);
              v319 = v318 + *(unsigned int *)(v316 + 80);
              v320 = v319 - v317;
              if (v317 < v318 || v319 <= v317 || (_DWORD)v319 == (_DWORD)v317)
              {
                v29 = 0;
                v40 = 380;
                goto LABEL_177;
              }
              v323 = *((unsigned int *)this + 64);
              v324 = v317 + v323;
              v325 = v323 >= v320;
              v326 = v323 - v320;
              if (v325)
                v324 = v319;
              if (v325)
                v315 = v326;
              else
                v315 = 0;
              *(_QWORD *)(v316 + 96) = v324;
            }
            v327 = *((_DWORD *)this + 128) + 16;
            *((_DWORD *)this + 128) = v327;
            if ((*((_DWORD *)this + 127) - v327) < 5)
              goto LABEL_530;
            v23 = 4;
            *((_DWORD *)this + 64) = 4;
            v24 = (unsigned __int8 *)this + 516;
            *((_QWORD *)this + 33) = (char *)this + 516;
LABEL_476:
            LODWORD(result.location) = v23;
            StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)&result, v24);
            v328 = result.location;
            v329 = *((_DWORD *)this + 64);
            *((_QWORD *)this + 33) += LODWORD(result.location);
            v330 = v329 - v328;
            *((_DWORD *)this + 64) = v330;
            if (v330)
            {
              v29 = 0;
              v40 = 384;
              goto LABEL_177;
            }
            v331 = bswap32(*((_DWORD *)this + 129));
            *((_DWORD *)this + 129) = v331;
            v332 = *((_DWORD *)this + 128);
            v333 = v332 + 4;
            *((_DWORD *)this + 128) = v332 + 4;
            if (v331 < -5 - v332)
            {
              v334 = v333 + v331;
              v335 = *((_DWORD *)this + 127);
              if (v333 + (int)v331 > v335 && v335 == (v334 & 0xFFFFFF))
                *((_DWORD *)this + 127) = v334;
            }
            v336 = *(_QWORD *)(*((_QWORD *)this + 1) + 48);
            v337 = *(_QWORD *)(*((_QWORD *)this + 1) + 56);
            v338 = v337 - v336;
            if (v337 != v336)
            {
              v339 = 0;
              v340 = v338 >> 2;
              v341 = 1;
              do
              {
                v342 = *(_DWORD *)(v336 + 4 * v339);
                v339 = v341++;
              }
              while (v342 != 1633776244 && v340 > v339);
              if (v342 == 1633776244
                && *((_DWORD *)this + 138) == 3
                && !*((_QWORD *)this + 74)
                && *((_DWORD *)this + 127) - v333 >= v331)
              {
                break;
              }
            }
          }
        }
      }
    }
LABEL_530:
    v374 = *((_DWORD *)this + 127);
    v375 = *((_DWORD *)this + 128);
    v134 = v374 >= v375;
    v376 = v374 - v375;
    if (v376 != 0 && v134)
    {
      while (1)
      {
        *((_DWORD *)this + 64) = v376;
        if (!v376)
          break;
LABEL_535:
        v377 = *((_QWORD *)this + 1);
        v379 = *(_QWORD *)(v377 + 88);
        v378 = *(_QWORD *)(v377 + 96);
        v380 = v379 + *(unsigned int *)(v377 + 80);
        v381 = v380 - v378;
        if (v378 < v379 || v380 <= v378 || (_DWORD)v380 == (_DWORD)v378)
        {
          v29 = 0;
          v40 = 429;
          goto LABEL_177;
        }
        v384 = *((unsigned int *)this + 64);
        v385 = v378 + v384;
        v386 = v384 >= v381;
        v387 = v384 - v381;
        if (v386)
          v385 = v380;
        if (v386)
          v376 = v387;
        else
          v376 = 0;
        *(_QWORD *)(v377 + 96) = v385;
      }
    }
  }
  v344 = CFDataCreateMutable(0, v331);
  *((_QWORD *)this + 74) = v344;
  v345 = *((unsigned int *)this + 129);
  if (!v344)
  {
    while (1)
    {
      *((_DWORD *)this + 64) = v345;
      if (!(_DWORD)v345)
        goto LABEL_530;
LABEL_502:
      v353 = *((_QWORD *)this + 1);
      v355 = *(_QWORD *)(v353 + 88);
      v354 = *(_QWORD *)(v353 + 96);
      v356 = v355 + *(unsigned int *)(v353 + 80);
      v357 = v356 - v354;
      if (v354 < v355 || v356 <= v354 || (_DWORD)v356 == (_DWORD)v354)
      {
        v29 = 0;
        v40 = 401;
        goto LABEL_177;
      }
      v360 = *((unsigned int *)this + 64);
      v361 = v354 + v360;
      v134 = v360 >= v357;
      v362 = v360 - v357;
      if (v134)
      {
        LODWORD(v345) = v362;
      }
      else
      {
        v356 = v361;
        LODWORD(v345) = 0;
      }
      *(_QWORD *)(v353 + 96) = v356;
    }
  }
  CFDataSetLength(v344, v345);
  v346 = CFDataGetMutableBytePtr(*((CFMutableDataRef *)this + 74));
  *((_QWORD *)this + 66) = v346;
  v15 = *((_DWORD *)this + 129);
  *((_DWORD *)this + 64) = v15;
  if (v346)
  {
    v16 = v346;
    *((_QWORD *)this + 33) = v346;
LABEL_494:
    LODWORD(result.location) = v15;
    StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)&result, v16);
    v347 = result.location;
    v348 = *((_DWORD *)this + 64);
    *((_QWORD *)this + 33) += LODWORD(result.location);
    v349 = v348 - v347;
    *((_DWORD *)this + 64) = v349;
    if (v349)
    {
      v29 = 0;
      v40 = 413;
      goto LABEL_177;
    }
    v350 = *((_QWORD *)this + 74);
    *((_DWORD *)this + 128) += *((_DWORD *)this + 129);
    if (v350)
    {
      v351 = *((_QWORD *)this + 1);
      LODWORD(result.location) = 1;
      v352 = *(void (**)(_QWORD, _QWORD, uint64_t, CFRange *))(v351 + 24);
      if (v352)
        v352(*(_QWORD *)(v351 + 40), *(unsigned int *)(v351 + 8), 1633776244, &result);
    }
    goto LABEL_530;
  }
  while (1)
  {
    if (!v15)
    {
      CFRelease(*((CFTypeRef *)this + 74));
      *((_QWORD *)this + 74) = 0;
      *((_DWORD *)this + 128) += *((_DWORD *)this + 129);
      goto LABEL_530;
    }
LABEL_515:
    v363 = *((_QWORD *)this + 1);
    v365 = *(_QWORD *)(v363 + 88);
    v364 = *(_QWORD *)(v363 + 96);
    v366 = v365 + *(unsigned int *)(v363 + 80);
    v367 = v366 - v364;
    v368 = v364 < v365 || v366 <= v364;
    if (v368 || (_DWORD)v366 == (_DWORD)v364)
      break;
    v370 = *((unsigned int *)this + 64);
    v371 = v364 + v370;
    v372 = v370 >= v367;
    v373 = v370 - v367;
    if (v372)
      v371 = v366;
    if (v372)
      v15 = v373;
    else
      v15 = 0;
    *(_QWORD *)(v363 + 96) = v371;
    *((_DWORD *)this + 64) = v15;
  }
  v29 = 0;
  v40 = 408;
LABEL_177:
  *((_DWORD *)this + 59) = v40;
  return v29;
}

uint64_t FLACAudioStream::GeneratePackets(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v10;
  char *v11;
  char *v12;
  size_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  size_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  size_t v32;
  uint64_t v33;
  int v34;
  unsigned int *v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  AudioStreamPacketDescription *v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  unsigned int v52;
  size_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  int v57;
  char *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  int v61;
  char *v62;
  int v63;
  int v64;
  int v65;
  int v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  int v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  AudioStreamPacketDescription *v85;
  uint64_t v86;
  int *v87;
  SInt64 v88;
  AudioStreamPacketDescription *v89;
  int v90;
  int v91;
  int v93;
  double v94[5];
  int v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned int __src[4];
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 236);
  v3 = -1;
  if (v2 > 526)
  {
    if (v2 != 535)
    {
      if (v2 == 527)
        goto LABEL_9;
      goto LABEL_160;
    }
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_DWORD *)(v4 + 116);
LABEL_26:
    v14 = *(_DWORD *)(a1 + 256) - v5;
    v15 = *(_QWORD *)(v4 + 88);
    v16 = *(_QWORD *)(v4 + 96);
    v17 = v15 + *(unsigned int *)(v4 + 80);
    if (v17 <= v16 || v16 < v15)
      v19 = 0;
    else
      v19 = v17 - v16;
    if (v14 <= v19)
      v14 = v19;
    LODWORD(v94[0]) = v14;
    v20 = v14 + v5;
    if (*(_DWORD *)(v4 + 120) < v20)
    {
      *(_DWORD *)(v4 + 120) = v20;
      CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v4 + 128), v20);
      v4 = *(_QWORD *)(a1 + 8);
    }
    StreamBuffer::Copy((_QWORD *)(v4 + 72), (unsigned int *)v94, (unsigned __int8 *)(*(_QWORD *)(v4 + 128) + *(unsigned int *)(v4 + 116)));
    v4 = *(_QWORD *)(a1 + 8);
    v21 = *(_DWORD *)(v4 + 116) + LODWORD(v94[0]);
    *(_DWORD *)(v4 + 116) = v21;
    if (v21 < *(_DWORD *)(a1 + 256))
    {
      v3 = 535;
      goto LABEL_160;
    }
    v22 = *(_QWORD *)(a1 + 272);
    v23 = *(_QWORD *)(v4 + 128);
    *(_QWORD *)(v4 + 88) = v22;
    *(_QWORD *)(v4 + 96) = v22;
    *(_QWORD *)(v4 + 72) = v23;
    *(_DWORD *)(v4 + 80) = v21;
LABEL_38:
    *(_DWORD *)(a1 + 488) = 0;
LABEL_39:
    if (*(_BYTE *)(a1 + 500))
    {
      v24 = 0;
      v25 = *(_QWORD *)(v4 + 88);
      v26 = *(_QWORD *)(v4 + 96);
      v27 = v25 + *(unsigned int *)(v4 + 80);
      v28 = v26 < v25 || v27 <= v26;
      v29 = v28;
      v30 = v27 - v26;
      if (!v28 && v30)
        v24 = (_BYTE *)(*(_QWORD *)(v4 + 72) + (v26 - v25));
      if (v29)
        v31 = 0;
      else
        v31 = v30;
      if ((*v24 & 0xFC) == 0xF8)
      {
        bzero(__src, 0x10uLL);
        LOBYTE(__src[0]) = -1;
        if (v31 >= 0xF)
          v32 = 15;
        else
          v32 = v31;
        memcpy((char *)__src + 1, v24, v32);
        v33 = (v32 + 1);
        v96 = __src;
        v97 = __src;
        v98 = (unsigned __int8 *)__src + v33;
        v99 = 0;
        if (((unint64_t)__src & 3) != 0)
        {
          v34 = 0;
          v35 = __src;
          v36 = 8 * ((__src ^ 3) & 3);
          v37 = ((__src ^ 3) & 3) + 1;
          do
          {
            if (v35 >= (unsigned int *)((char *)__src + v33))
              v38 = 255;
            else
              v38 = *(unsigned __int8 *)v35;
            v34 = v38 | (v34 << 8);
            v35 = (unsigned int *)((char *)v35 + 1);
            --v37;
          }
          while (v37);
          v96 = (unsigned int *)((char *)__src + ((__src ^ 3) & 3) + 1);
          LODWORD(v99) = v34 << (24 - v36);
          HIDWORD(v99) = v36 + 8;
        }
        v93 = 0;
        v39 = FLACAudioStream::ParseFLACFrameHeader(a1, (uint64_t)&v96, (unsigned int *)&v95, v94, &v93);
        if (v39 == -11)
        {
          v45 = v93 + v31;
LABEL_90:
          *(_DWORD *)(a1 + 488) = v45;
          goto LABEL_9;
        }
        if (v39)
        {
          v4 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          v40 = *(_DWORD *)(a1 + 504);
          if (v40)
          {
            if (!*(_DWORD *)(a1 + 200))
            {
              *(_DWORD *)(a1 + 200) = 1;
              CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), 1);
              v40 = *(_DWORD *)(a1 + 504);
            }
            v41 = *(AudioStreamPacketDescription **)(a1 + 192);
            v41->mStartOffset = 0;
            v41->mVariableFramesInPacket = 0;
            v41->mDataByteSize = v40 - 1;
            AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v40 - 1, 1u, *(const void **)(a1 + 288), v41, 1);
            ++*(_QWORD *)(a1 + 184);
          }
          memcpy(*(void **)(a1 + 288), __src, (v32 + 1));
          *(_DWORD *)(a1 + 504) = v33;
          v4 = *(_QWORD *)(a1 + 8);
          v42 = *(_QWORD *)(v4 + 88);
          v43 = *(_QWORD *)(v4 + 96) + v32;
          *(_QWORD *)(v4 + 96) = v43;
          if (v43 < v42)
            goto LABEL_9;
          v44 = v42 + *(unsigned int *)(v4 + 80);
          if (v44 <= v43 || (_DWORD)v44 == (_DWORD)v43)
            goto LABEL_9;
        }
      }
      *(_BYTE *)(a1 + 500) = 0;
    }
    v46 = 0;
    v47 = *(_QWORD *)(v4 + 88);
    v48 = *(_QWORD *)(v4 + 96);
    v49 = v47 + *(unsigned int *)(v4 + 80);
    v50 = v48 < v47 || v49 <= v48;
    v51 = v50;
    v52 = v49 - v48;
    if (!v50 && v52)
      v46 = (char *)(*(_QWORD *)(v4 + 72) + (v48 - v47));
    if (v51)
      v53 = 0;
    else
      v53 = v52;
    if (v53 <= 1)
    {
      v45 = 2;
      goto LABEL_90;
    }
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = v46 + 1;
    while (1)
    {
      v59 = (unsigned __int8 *)&v46[v57];
      if ((v59[1] & 0xFC | (*v59 << 8)) == 0xFFF8)
      {
        if (v57 + 6 > v53)
        {
          if (v54 == v55 || v55 - v54 == 4 && !*(_DWORD *)v54)
            *(_DWORD *)(a1 + 488) = v57 + 6;
LABEL_135:
          if (*(_DWORD *)(a1 + 488))
          {
            if (!v54)
              goto LABEL_9;
LABEL_167:
            operator delete(v54);
            goto LABEL_9;
          }
          v76 = v55 - v54;
          if (v55 == v54)
          {
            v83 = *(unsigned int *)(a1 + 504);
            if ((_DWORD)v83 && (int)v83 + (int)v53 <= (*(_DWORD *)(a1 + 496) + 1))
            {
              memcpy((void *)(*(_QWORD *)(a1 + 288) + v83), v46, v53);
              *(_DWORD *)(a1 + 504) += v53;
            }
            else
            {
              *(_DWORD *)(a1 + 504) = 0;
            }
            v91 = v53 - 1;
          }
          else
          {
            v77 = *((unsigned int *)v55 - 1);
            v78 = *(unsigned int *)(a1 + 504);
            if ((_DWORD)v78)
            {
              v79 = *(unsigned int *)v54;
              if ((_DWORD)v79 && (int)v79 + (int)v78 <= (*(_DWORD *)(a1 + 496) + 1))
              {
                memcpy((void *)(*(_QWORD *)(a1 + 288) + v78), v46, v79);
                *(_DWORD *)(a1 + 504) += *(_DWORD *)v54;
              }
              FLACAudioStream::FlushPacketBuffer(a1);
            }
            if (v76 >= 5)
            {
              v80 = v76 >> 2;
              v81 = (v76 >> 2) - 1;
              if (*(_DWORD *)(a1 + 200) >= v81)
              {
                if (v81)
                  goto LABEL_151;
                v85 = *(AudioStreamPacketDescription **)(a1 + 192);
              }
              else
              {
                v82 = (1 << -__clz(v80 - 2));
                *(_DWORD *)(a1 + 200) = v82;
                CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), v82);
LABEL_151:
                v84 = 0;
                v86 = *(_QWORD *)(a1 + 184);
                v85 = *(AudioStreamPacketDescription **)(a1 + 192);
                v87 = (int *)(v54 + 4);
                do
                {
                  v88 = *(v87 - 1);
                  v89 = &v85[v84];
                  v89->mStartOffset = v88;
                  v90 = *v87++;
                  v89->mVariableFramesInPacket = 0;
                  v89->mDataByteSize = v90 - v88;
                  ++v84;
                }
                while (v81 != v84);
                *(_QWORD *)(a1 + 184) = v86 + (v80 - 2) + 1;
              }
              AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v77, v81, v46, v85, 1);
            }
            if ((_DWORD)v77)
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) += v77;
              goto LABEL_167;
            }
            v91 = v53 - 1;
            if (v53 <= *(_DWORD *)(a1 + 496) + 1)
            {
              memcpy(*(void **)(a1 + 288), v46, v53);
              *(_DWORD *)(a1 + 504) += v53;
            }
          }
          if (v46[v91] == 255)
            *(_BYTE *)(a1 + 500) = 1;
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88)
                                                  + *(unsigned int *)(*(_QWORD *)(a1 + 8) + 80);
          if (v54)
            goto LABEL_167;
LABEL_9:
          v4 = *(_QWORD *)(a1 + 8);
          v6 = *(_QWORD *)(v4 + 88);
          v7 = *(_QWORD *)(v4 + 96);
          v8 = v6 + *(unsigned int *)(v4 + 80);
          v3 = 527;
          if (v7 < v6 || v8 <= v7)
            goto LABEL_160;
          v5 = v8 - v7;
          if ((_DWORD)v8 == (_DWORD)v7)
            goto LABEL_160;
          v10 = *(unsigned int *)(a1 + 488);
          if ((_DWORD)v10)
          {
            *(_DWORD *)(a1 + 256) = v10;
            if (v10 > v5)
            {
              *(_QWORD *)(a1 + 272) = v7;
              v11 = *(char **)(v4 + 72);
              if (v11 == *(char **)(v4 + 128))
              {
                if ((_DWORD)v8 == (_DWORD)v7)
                  v12 = 0;
                else
                  v12 = &v11[(v7 - v6)];
                memmove(v11, v12, (v8 - v7));
                v13 = *(unsigned int *)(a1 + 488);
                v4 = *(_QWORD *)(a1 + 8);
                if (*(_DWORD *)(v4 + 120) < v13)
                {
                  *(_DWORD *)(v4 + 120) = v13;
                  CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v4 + 128), v13);
                  v4 = *(_QWORD *)(a1 + 8);
                }
                *(_DWORD *)(v4 + 116) = v5;
                *(_QWORD *)(v4 + 96) = *(_QWORD *)(v4 + 88) + *(unsigned int *)(v4 + 80);
              }
              else
              {
                if (*(_DWORD *)(v4 + 120) < v10)
                {
                  *(_DWORD *)(v4 + 120) = v10;
                  CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v4 + 128), v10);
                  v4 = *(_QWORD *)(a1 + 8);
                }
                v5 = 0;
                *(_DWORD *)(v4 + 116) = 0;
              }
              goto LABEL_26;
            }
            goto LABEL_38;
          }
          goto LABEL_39;
        }
        v96 = (unsigned int *)&v46[v57];
        v97 = v96;
        v60 = &v59[(v53 - v57)];
        v98 = v60;
        v99 = 0;
        if ((v59 & 3) != 0)
        {
          v61 = 0;
          v62 = &v58[v57];
          v63 = -8;
          do
          {
            v64 = v61 << 8;
            LODWORD(v99) = v64;
            HIDWORD(v99) = v63 + 16;
            if (v59 >= v60)
              v65 = 255;
            else
              v65 = *v59;
            v61 = v65 | v64;
            LODWORD(v99) = v61;
            v96 = (unsigned int *)++v59;
            v63 += 8;
          }
          while ((v62++ & 3) != 0);
          LODWORD(v99) = v61 << (24 - v63);
        }
        __src[0] = 0;
        v95 = 0;
        v67 = FLACAudioStream::ParseFLACFrameHeader(a1, (uint64_t)&v96, __src, v94, &v95);
        if (!v67)
        {
          if ((unint64_t)v55 >= v56)
          {
            v69 = (v55 - v54) >> 2;
            v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v56 - (_QWORD)v54) >> 1 > v70)
              v70 = (uint64_t)(v56 - (_QWORD)v54) >> 1;
            if (v56 - (unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
              v71 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v71 = v70;
            if (v71)
              v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v71);
            else
              v72 = 0;
            v73 = (char *)(v71 + 4 * v69);
            *(_DWORD *)v73 = v57;
            v68 = v73 + 4;
            while (v55 != v54)
            {
              v74 = *((_DWORD *)v55 - 1);
              v55 -= 4;
              *((_DWORD *)v73 - 1) = v74;
              v73 -= 4;
            }
            v56 = v71 + 4 * v72;
            if (v54)
              operator delete(v54);
            v54 = v73;
            v58 = v46 + 1;
          }
          else
          {
            *(_DWORD *)v55 = v57;
            v68 = v55 + 4;
          }
          v75 = *(_DWORD *)(a1 + 492);
          if (!v75)
            v75 = __src[0];
          v57 += v75;
          v55 = v68;
          goto LABEL_125;
        }
        if (v67 == -11)
        {
          if (v54 == v55 || v55 - v54 == 4 && !*(_DWORD *)v54)
            *(_DWORD *)(a1 + 488) = v95 + v53;
          goto LABEL_135;
        }
      }
      ++v57;
LABEL_125:
      if (v57 + 1 >= v53)
        goto LABEL_135;
    }
  }
  if (v2 != -1)
  {
    if (!v2)
      goto LABEL_9;
LABEL_160:
    *(_DWORD *)(a1 + 236) = v3;
  }
  return 0;
}

void sub_18F078AAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t FLACAudioStream::HandleDiscontinuity(FLACAudioStream *this)
{
  *((_DWORD *)this + 59) = 0;
  *((_BYTE *)this + 500) = 0;
  *((_DWORD *)this + 126) = 0;
  FLACAudioStream::Resync(this);
  return 0;
}

BOOL FLACAudioStream::Resync(FLACAudioStream *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v24;
  int v25;
  _BOOL8 result;
  unsigned int v27;
  double v28[5];
  int v29;
  _QWORD v30[3];
  uint64_t v31;

  v2 = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = *(_QWORD *)(v3 + 88);
  v5 = *(_QWORD *)(v3 + 96);
  v6 = v4 + *(unsigned int *)(v3 + 80);
  v7 = v5 < v4 || v6 <= v5;
  v8 = v7;
  v9 = v6 - v5;
  if (!v7 && v9)
    v2 = *(_QWORD *)(v3 + 72) + (v5 - v4);
  if (v8)
    v10 = 0;
  else
    v10 = v9;
  *((_DWORD *)this + 122) = 0;
  if (v10 <= 1)
  {
    v11 = 0;
    v12 = 2;
LABEL_15:
    *((_DWORD *)this + 122) = v12;
    goto LABEL_31;
  }
  if ((int)v10 >= 2)
  {
    v13 = 0;
    v14 = v2 + 1;
    v15 = 1;
    while (1)
    {
      v16 = (unsigned __int8 *)(v2 + v13);
      if ((*(_BYTE *)(v2 + v13 + 1) & 0xFC | (*(unsigned __int8 *)(v2 + v13) << 8)) == 0xFFF8)
      {
        v30[0] = v2 + v13;
        v30[1] = v2 + v13;
        v17 = &v16[(v10 - v13)];
        v30[2] = v17;
        v31 = 0;
        if ((v16 & 3) != 0)
        {
          v18 = 0;
          v19 = -8;
          v20 = v14;
          do
          {
            v21 = v19;
            if (v16 >= v17)
              v22 = 255;
            else
              v22 = *v16;
            v18 = v22 | (v18 << 8);
            ++v16;
            v19 = v21 + 8;
          }
          while ((v20++ & 3) != 0);
          v30[0] = v16;
          LODWORD(v31) = v18 << (16 - v21);
          HIDWORD(v31) = v21 + 16;
        }
        v29 = 0;
        v24 = FLACAudioStream::ParseFLACFrameHeader((uint64_t)this, (uint64_t)v30, &v27, v28, &v29);
        if (!v24)
        {
          v11 = 1;
          goto LABEL_31;
        }
        if (v24 == -11)
          break;
      }
      ++v13;
      ++v15;
      ++v14;
      if (v15 == v10)
        goto LABEL_30;
    }
    v11 = 0;
    v12 = v29 + v10;
    goto LABEL_15;
  }
LABEL_30:
  v11 = 0;
LABEL_31:
  v25 = *((_DWORD *)this + 122);
  result = v25 == 0;
  if (!v25 && (v11 & 1) == 0)
  {
    result = 0;
    *(_QWORD *)(*((_QWORD *)this + 1) + 96) = *(_QWORD *)(*((_QWORD *)this + 1) + 88)
                                              + *(unsigned int *)(*((_QWORD *)this + 1) + 80);
  }
  return result;
}

uint64_t FLACAudioStream::ParseFLACFrameHeader(uint64_t a1, uint64_t a2, unsigned int *a3, double *a4, int *a5)
{
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  int v52;
  BOOL v53;
  int v54;
  char v55;
  unsigned int *v56;
  int v57;
  unsigned int *v58;
  unint64_t v59;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  unsigned int v71;
  uint64_t v73;
  unsigned __int8 *v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned int v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v123;
  unsigned __int8 *v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  double v135;
  int v136;
  int v137;
  unsigned int v138;
  unint64_t v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;

  *a3 = 0;
  bzero(a4, 0x28uLL);
  *a5 = 0;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(unsigned int **)a2;
  v12 = v10 - *(_QWORD *)a2;
  v13 = *(_DWORD *)(a2 + 28);
  v14 = v13 + 8 * v12;
  v15 = v14 >> 3;
  if (v14 <= 0x2F)
  {
    v16 = 6 - v15;
LABEL_3:
    *a5 = v16;
    return 4294967285;
  }
  v18 = *(_DWORD *)(a2 + 24);
  v19 = HIWORD(v18);
  v20 = v13 - 16;
  *(_DWORD *)(a2 + 28) = v13 - 16;
  if (v13 - 16 < 0)
  {
    v22 = *(_QWORD *)(a2 + 8);
    if ((v12 & ~(v12 >> 63) & 0xFFFFFFFC) == 0 || v22 > (unint64_t)v11)
    {
      v24 = 0;
      do
      {
        v25 = (unsigned __int8 *)v11 + v24;
        v26 = v18 << 8;
        *(_DWORD *)(a2 + 24) = v26;
        v27 = 255;
        if ((unint64_t)v11 + v24 < v10 && (unint64_t)v25 >= v22)
          v27 = *v25;
        v18 = v27 | v26;
        *(_DWORD *)(a2 + 24) = v18;
        ++v24;
      }
      while ((_DWORD)v24 != 4);
    }
    else
    {
      v18 = bswap32(*v11);
    }
    v28 = v18 << (16 - v13);
    v29 = v13 + 16;
    *(_DWORD *)(a2 + 28) = v29;
    *(_QWORD *)a2 = ++v11;
    v19 |= v18 >> v29;
    if (v29)
      v21 = v28;
    else
      v21 = 0;
    if (v29)
      v20 = v29;
    else
      v20 = 0;
  }
  else
  {
    v21 = v18 << 16;
  }
  *(_DWORD *)(a2 + 24) = v21;
  if ((v19 & 0xFFFE) != 0xFFF8)
    return 4294967284;
  v30 = *(_DWORD *)(a1 + 364);
  if ((v19 & 1) != 0)
  {
    if (v30)
      return 4294967284;
  }
  else if (!v30)
  {
    return 4294967284;
  }
  v31 = HIWORD(v21);
  v32 = v20 - 16;
  *(_DWORD *)(a2 + 28) = v20 - 16;
  if (v20 - 16 < 0)
  {
    v34 = *(_QWORD *)(a2 + 8);
    if ((((_DWORD)v10 - (_DWORD)v11) & ~((uint64_t)(v10 - (_QWORD)v11) >> 63) & 0xFFFFFFFC) != 0
      && v34 <= (unint64_t)v11)
    {
      v21 = bswap32(*v11);
    }
    else
    {
      v35 = 0;
      do
      {
        v36 = (unsigned __int8 *)v11 + v35;
        v37 = v21 << 8;
        *(_DWORD *)(a2 + 24) = v37;
        v38 = 255;
        if ((unint64_t)v11 + v35 < v10 && (unint64_t)v36 >= v34)
          v38 = *v36;
        v21 = v38 | v37;
        *(_DWORD *)(a2 + 24) = v21;
        ++v35;
      }
      while ((_DWORD)v35 != 4);
    }
    v39 = v21 << (16 - v20);
    v40 = v20 + 16;
    *(_DWORD *)(a2 + 28) = v40;
    *(_QWORD *)a2 = ++v11;
    v31 |= v21 >> v40;
    if (v40)
      v33 = v39;
    else
      v33 = 0;
    if (v40)
      v32 = v40;
    else
      v32 = 0;
  }
  else
  {
    v33 = v21 << 16;
  }
  *(_DWORD *)(a2 + 24) = v33;
  result = 4294967284;
  if ((v31 & 1) == 0 && (v31 & 6) != 6)
  {
    v41 = v31 >> 4;
    if (v41 != 15)
    {
      v42 = (unsigned __int16)v31 >> 12;
      if ((unsigned __int16)v31 >> 12)
      {
        v43 = (v31 >> 8) & 0xF;
        v44 = v43 - 15;
        if (v43 != 15)
        {
          v45 = HIBYTE(v33);
          v46 = v32 - 8;
          *(_DWORD *)(a2 + 28) = v32 - 8;
          if (v32 - 8 < 0)
          {
            v48 = *(_QWORD *)(a2 + 8);
            if ((((_DWORD)v10 - (_DWORD)v11) & ~((uint64_t)(v10 - (_QWORD)v11) >> 63) & 0xFFFFFFFC) != 0
              && v48 <= (unint64_t)v11)
            {
              v33 = bswap32(*v11);
            }
            else
            {
              v49 = 0;
              do
              {
                v50 = (unsigned __int8 *)v11 + v49;
                v51 = v33 << 8;
                *(_DWORD *)(a2 + 24) = v51;
                v52 = 255;
                if ((unint64_t)v11 + v49 < v10 && (unint64_t)v50 >= v48)
                  v52 = *v50;
                v33 = v51 | v52;
                *(_DWORD *)(a2 + 24) = v33;
                ++v49;
              }
              while ((_DWORD)v49 != 4);
            }
            v54 = v32 + 24;
            v53 = v32 == -24;
            ++v11;
            v45 |= v33 >> (v32 + 24);
            if (v32 == -24)
              v47 = 0;
            else
              v47 = v33 << (8 - v32);
            if (v53)
              v46 = 0;
            else
              v46 = v54;
          }
          else
          {
            v47 = v33 << 8;
          }
          v55 = v46 + 8;
          v56 = (unsigned int *)((char *)v11 - (((v46 + 8) >> 3) & 0x1FFFFFFC));
          *(_QWORD *)a2 = v56;
          v57 = (v46 + 8) & 0x1F;
          *(_DWORD *)(a2 + 24) = v47;
          *(_DWORD *)(a2 + 28) = v57;
          if (v57)
          {
            v58 = v56 - 1;
            v59 = *(_QWORD *)(a2 + 8);
            if ((((_DWORD)v10 - ((_DWORD)v56 - 4)) & ~((uint64_t)(v10 - (_QWORD)(v56 - 1)) >> 63) & 0xFFFFFFFC) == 0
              || v59 > (unint64_t)v58)
            {
              v61 = -4;
              do
              {
                v62 = (unsigned __int8 *)v56 + v61;
                v63 = v47 << 8;
                *(_DWORD *)(a2 + 24) = v63;
                v64 = 255;
                if ((unint64_t)v56 + v61 < v10 && (unint64_t)v62 >= v59)
                  v64 = *v62;
                v47 = v64 | v63;
                *(_DWORD *)(a2 + 24) = v47;
                ++v61;
              }
              while ((_DWORD)v61);
            }
            else
            {
              v47 = bswap32(*v58);
            }
            v65 = v47 << -(char)v57;
          }
          else
          {
            v65 = 0;
          }
          *(_DWORD *)(a2 + 24) = v65;
          if (v45 >= 0x80)
          {
            if ((v45 & 0xFFFFFFE0) == 0xC0)
            {
              v66 = 0;
              v67 = 2;
            }
            else if ((v45 & 0xFFFFFFF0) == 0xE0)
            {
              v66 = 0;
              v67 = 3;
            }
            else
            {
              if ((v45 & 0xFFFFFFF8) == 0xF0)
              {
                v67 = 4;
              }
              else if ((v45 & 0xFFFFFFFC) == 0xF8)
              {
                v67 = 5;
              }
              else if ((v45 & 0xFFFFFFFE) == 0xFC)
              {
                v67 = 6;
              }
              else
              {
                result = 4294967284;
                if ((v19 & 1) == 0 || v45 != 254)
                  return result;
                v67 = 7;
              }
              v66 = 1;
            }
          }
          else
          {
            v66 = 0;
            v67 = 1;
          }
          v68 = v15 - 4 - v67;
          if (v15 - 4 < v67)
          {
            v16 = v67 - (v15 - 4);
            goto LABEL_3;
          }
          if (!v66)
            goto LABEL_114;
          v69 = *(_QWORD *)(a2 + 8);
          v70 = 32 - v57;
          v71 = *(_DWORD *)&v55 | 0xFFFFFFE0;
          do
          {
            *(_QWORD *)(a2 + 24) = 0;
            if (v57)
            {
              *(_DWORD *)(a2 + 28) = v71;
              if ((((_DWORD)v10 - (_DWORD)v56) & ~((uint64_t)(v10 - (_QWORD)v56) >> 63) & 0xFFFFFFFC) == 0
                || v69 > (unint64_t)v56)
              {
                v73 = 0;
                v77 = 0;
                do
                {
                  v74 = (unsigned __int8 *)v56 + v73;
                  v75 = v77 << 8;
                  *(_DWORD *)(a2 + 24) = v75;
                  v76 = 255;
                  if ((unint64_t)v56 + v73 < v10 && (unint64_t)v74 >= v69)
                    v76 = *v74;
                  v77 = v76 | v75;
                  *(_DWORD *)(a2 + 24) = v77;
                  ++v73;
                }
                while ((_DWORD)v73 != 4);
              }
              else
              {
                v77 = bswap32(*v56);
              }
              *(_QWORD *)a2 = ++v56;
              v65 = v77 << v70;
              *(_DWORD *)(a2 + 24) = v77 << v70;
              *(_DWORD *)(a2 + 28) = v57;
            }
            else
            {
              v65 = 0;
              *(_QWORD *)a2 = ++v56;
            }
            v67 -= 4;
          }
          while (v67 > 3);
          if (v67)
          {
LABEL_114:
            v78 = 8 * v67;
            v79 = v78 - v57;
            if (v78 > v57)
            {
              *(_QWORD *)(a2 + 24) = 0;
              v65 = 0;
              v57 = 0;
              if (v79 >= 0x20)
              {
                v56 = (unsigned int *)((char *)v56 + ((v79 >> 3) & 0x1FFFFFFC));
                *(_QWORD *)a2 = v56;
                v78 = v79 & 0x1F;
              }
              else
              {
                v78 = v79;
              }
            }
            if (v78 - 33 >= 0xFFFFFFE0)
            {
              v57 -= v78;
              *(_DWORD *)(a2 + 28) = v57;
              if (v57 < 0)
              {
                v80 = *(_QWORD *)(a2 + 8);
                if ((((_DWORD)v10 - (_DWORD)v56) & ~((uint64_t)(v10 - (_QWORD)v56) >> 63) & 0xFFFFFFFC) != 0
                  && v80 <= (unint64_t)v56)
                {
                  v65 = bswap32(*v56);
                }
                else
                {
                  v81 = 0;
                  do
                  {
                    v82 = (unsigned __int8 *)v56 + v81;
                    v83 = v65 << 8;
                    *(_DWORD *)(a2 + 24) = v83;
                    v84 = 255;
                    if ((unint64_t)v56 + v81 < v10 && (unint64_t)v82 >= v80)
                      v84 = *v82;
                    v65 = v84 | v83;
                    *(_DWORD *)(a2 + 24) = v65;
                    ++v81;
                  }
                  while ((_DWORD)v81 != 4);
                }
                v85 = v65 << -(char)v57;
                v57 += 32;
                *(_DWORD *)(a2 + 28) = v57;
                *(_QWORD *)a2 = ++v56;
                if (v57)
                {
                  v65 = v85;
                }
                else
                {
                  v57 = 0;
                  v65 = 0;
                }
              }
              else
              {
                v65 <<= v78;
              }
              *(_DWORD *)(a2 + 24) = v65;
            }
          }
          if (v42 == 7)
          {
            if (v68 <= 2)
              goto LABEL_161;
            v86 = HIWORD(v65);
            v57 -= 16;
            *(_DWORD *)(a2 + 28) = v57;
            if (v57 >= 0)
            {
              v65 <<= 16;
              v87 = -2;
              goto LABEL_151;
            }
            v143 = (unsigned __int16)v31 >> 12;
            v145 = v43 - 15;
            v147 = v31 >> 4;
            AT::TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
            v56 = (unsigned int *)(*(_QWORD *)a2 + 4);
            *(_QWORD *)a2 = v56;
            v91 = *(_DWORD *)(a2 + 24);
            v92 = *(_DWORD *)(a2 + 28);
            v86 |= v91 >> v92;
            v57 = v92 + 32;
            *(_DWORD *)(a2 + 28) = v92 + 32;
            if (v92 == -32)
              v65 = 0;
            else
              v65 = v91 << -(char)v92;
            v87 = -2;
          }
          else
          {
            if (v42 != 6)
            {
              v88 = 0;
              goto LABEL_152;
            }
            if (v68 <= 1)
            {
LABEL_156:
              v94 = 2;
LABEL_162:
              v16 = v94 - v68;
              goto LABEL_3;
            }
            v86 = HIBYTE(v65);
            v57 -= 8;
            *(_DWORD *)(a2 + 28) = v57;
            if (v57 >= 0)
            {
              v65 <<= 8;
              v87 = -1;
LABEL_151:
              *(_DWORD *)(a2 + 24) = v65;
              v88 = v86 + 1;
              v68 += v87;
LABEL_152:
              switch(v43)
              {
                case 14:
                  v93 = v68 - 2;
                  if (v68 > 2)
                  {
                    v146 = v44;
                    v148 = v41;
                    v95 = HIWORD(v65);
                    *(_DWORD *)(a2 + 28) = v57 - 16;
                    v142 = v88;
                    if (v57 - 16 < 0)
                    {
                      v102 = v42;
                      AT::TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
                      *(_QWORD *)a2 += 4;
                      v103 = *(_DWORD *)(a2 + 24);
                      v104 = *(_DWORD *)(a2 + 28);
                      v95 |= v103 >> v104;
                      *(_DWORD *)(a2 + 28) = v104 + 32;
                      if (v104 == -32)
                        v96 = 0;
                      else
                        v96 = v103 << -(char)v104;
                      v42 = v102;
                    }
                    else
                    {
                      v96 = v65 << 16;
                    }
                    v97 = v42;
                    *(_DWORD *)(a2 + 24) = v96;
                    v111 = 10 * v95;
LABEL_182:
                    v144 = v111;
LABEL_186:
                    v68 = v93;
LABEL_187:
                    v112 = v15 - v68;
                    *a3 = v112;
                    AT::TBitstreamReader<unsigned int>::PutBack(a2, 8 * v112);
                    v114 = *(_DWORD *)(a2 + 24);
                    v113 = *(_DWORD *)(a2 + 28);
                    v115 = 0;
                    if (v112)
                    {
                      v117 = *(_QWORD *)(a2 + 8);
                      v116 = *(_QWORD *)(a2 + 16);
                      v118 = *(unsigned int **)a2;
                      v119 = v148;
                      v120 = v146;
                      do
                      {
                        v121 = HIBYTE(v114);
                        *(_DWORD *)(a2 + 28) = v113 - 8;
                        if (v113 - 8 < 0)
                        {
                          if ((((_DWORD)v116 - (_DWORD)v118) & ~((uint64_t)(v116 - (_QWORD)v118) >> 63) & 0xFFFFFFFC) == 0
                            || v117 > (unint64_t)v118)
                          {
                            v123 = 0;
                            do
                            {
                              v124 = (unsigned __int8 *)v118 + v123;
                              v125 = v114 << 8;
                              *(_DWORD *)(a2 + 24) = v125;
                              v126 = 255;
                              if ((unint64_t)v118 + v123 < v116 && (unint64_t)v124 >= v117)
                                v126 = *v124;
                              v114 = v126 | v125;
                              *(_DWORD *)(a2 + 24) = v114;
                              ++v123;
                            }
                            while ((_DWORD)v123 != 4);
                          }
                          else
                          {
                            v114 = bswap32(*v118);
                          }
                          v127 = v114 << (8 - v113);
                          v113 += 24;
                          *(_DWORD *)(a2 + 28) = v113;
                          *(_QWORD *)a2 = ++v118;
                          v121 |= v114 >> v113;
                          if (v113)
                            v114 = v127;
                          else
                            v114 = 0;
                          if (!v113)
                            v113 = 0;
                        }
                        else
                        {
                          v114 <<= 8;
                          v113 -= 8;
                        }
                        *(_DWORD *)(a2 + 24) = v114;
                        v115 = FLAC_crc8[v121 ^ v115];
                        --v112;
                      }
                      while (v112);
                    }
                    else
                    {
                      v119 = v148;
                      v120 = v146;
                    }
                    v128 = HIBYTE(v114);
                    v129 = v113 - 8;
                    *(_DWORD *)(a2 + 28) = v129;
                    if (v129 < 0)
                    {
                      v131 = v120;
                      v132 = v119;
                      AT::TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                      *(_QWORD *)a2 += 4;
                      v133 = *(_DWORD *)(a2 + 24);
                      v134 = *(_DWORD *)(a2 + 28);
                      v128 |= v133 >> v134;
                      *(_DWORD *)(a2 + 28) = v134 + 32;
                      if (v134 == -32)
                        v130 = 0;
                      else
                        v130 = v133 << -(char)v134;
                      v119 = v132;
                      v120 = v131;
                    }
                    else
                    {
                      v130 = v114 << 8;
                    }
                    *(_DWORD *)(a2 + 24) = v130;
                    if (v128 != v115)
                      return 4294967284;
                    if (v120 > 0xFFFFFFFC)
                    {
                      v135 = (double)v144;
                    }
                    else
                    {
                      if (!v43)
                        return 4294967284;
                      v135 = kFLACSampleRates[v43];
                    }
                    *a4 = v135;
                    if (v135 == *(double *)(a1 + 344))
                    {
                      v136 = (v31 >> 1) & 7;
                      *((_DWORD *)a4 + 2) = 1718378851;
                      if (v136)
                      {
                        v137 = kFLACBitDepths[v136];
                        if (v137 == *(_DWORD *)(a1 + 328))
                        {
                          if (((0x89uLL >> v136) & 1) != 0)
                          {
LABEL_229:
                            v140 = v142;
                            if ((v97 - 8) <= 0xFFFFFFFD)
                              v140 = kFLACBlockSizes[v97];
                            *((_DWORD *)a4 + 5) = v140;
                            result = 4294967284;
                            if (v119 <= 0xA)
                            {
                              v141 = LOWORD(kFLACChannelConfigToLayoutTag[v119]);
                              *((_DWORD *)a4 + 7) = v141;
                              if (v141 == *(_DWORD *)(a1 + 372))
                                return 0;
                              else
                                return 4294967284;
                            }
                            return result;
                          }
                          HIDWORD(v139) = kFLACBitDepths[v136];
                          LODWORD(v139) = v137 - 16;
                          v138 = v139 >> 2;
                          if (v138 <= 4 && ((0x17u >> v138) & 1) != 0)
                          {
                            *((_DWORD *)a4 + 3) = dword_18F10DC00[v138];
                            goto LABEL_229;
                          }
                        }
                      }
                    }
                    return 4294967284;
                  }
                  break;
                case 13:
                  v93 = v68 - 2;
                  if (v68 > 2)
                  {
                    v146 = v44;
                    v148 = v41;
                    v100 = HIWORD(v65);
                    *(_DWORD *)(a2 + 28) = v57 - 16;
                    v142 = v88;
                    if (v57 - 16 < 0)
                    {
                      v108 = v42;
                      AT::TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
                      *(_QWORD *)a2 += 4;
                      v109 = *(_DWORD *)(a2 + 24);
                      v110 = *(_DWORD *)(a2 + 28);
                      v100 |= v109 >> v110;
                      *(_DWORD *)(a2 + 28) = v110 + 32;
                      if (v110 == -32)
                        v101 = 0;
                      else
                        v101 = v109 << -(char)v110;
                      v42 = v108;
                    }
                    else
                    {
                      v101 = v65 << 16;
                    }
                    v144 = v100;
                    v97 = v42;
                    *(_DWORD *)(a2 + 24) = v101;
                    goto LABEL_186;
                  }
                  break;
                case 12:
                  v93 = v68 - 1;
                  if (v68 <= 1)
                    goto LABEL_156;
                  v146 = v44;
                  v148 = v41;
                  v98 = HIBYTE(v65);
                  *(_DWORD *)(a2 + 28) = v57 - 8;
                  v142 = v88;
                  if (v57 - 8 < 0)
                  {
                    v105 = v42;
                    AT::TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
                    *(_QWORD *)a2 += 4;
                    v106 = *(_DWORD *)(a2 + 24);
                    v107 = *(_DWORD *)(a2 + 28);
                    v98 |= v106 >> v107;
                    *(_DWORD *)(a2 + 28) = v107 + 32;
                    if (v107 == -32)
                      v99 = 0;
                    else
                      v99 = v106 << -(char)v107;
                    v42 = v105;
                  }
                  else
                  {
                    v99 = v65 << 8;
                  }
                  v97 = v42;
                  *(_DWORD *)(a2 + 24) = v99;
                  v111 = 1000 * v98;
                  goto LABEL_182;
                default:
                  if (!v68)
                  {
                    v16 = 1;
                    goto LABEL_3;
                  }
                  v142 = v88;
                  v144 = 0;
                  v146 = v44;
                  v97 = v42;
                  v148 = v41;
                  goto LABEL_187;
              }
LABEL_161:
              v94 = 3;
              goto LABEL_162;
            }
            v143 = (unsigned __int16)v31 >> 12;
            v145 = v43 - 15;
            v147 = v31 >> 4;
            AT::TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
            v56 = (unsigned int *)(*(_QWORD *)a2 + 4);
            *(_QWORD *)a2 = v56;
            v89 = *(_DWORD *)(a2 + 24);
            v90 = *(_DWORD *)(a2 + 28);
            v86 |= v89 >> v90;
            v57 = v90 + 32;
            *(_DWORD *)(a2 + 28) = v90 + 32;
            if (v90 == -32)
              v65 = 0;
            else
              v65 = v89 << -(char)v90;
            v87 = -1;
          }
          v41 = v147;
          v42 = v143;
          v44 = v145;
          goto LABEL_151;
        }
      }
    }
  }
  return result;
}

uint64_t AT::TBitstreamReader<unsigned int>::PutBack(uint64_t result, int a2)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  if (a2)
  {
    v2 = *(_DWORD *)(result + 28) + a2;
    v3 = *(_QWORD *)result - ((v2 >> 3) & 0x1FFFFFFC);
    *(_QWORD *)result = v3;
    v4 = v2 & 0x1F;
    *(_DWORD *)(result + 28) = v4;
    if (v4)
    {
      v5 = (unsigned int *)(v3 - 4);
      v7 = *(_QWORD *)(result + 8);
      v6 = *(_QWORD *)(result + 16);
      if ((((_DWORD)v6 - ((_DWORD)v3 - 4)) & ~((uint64_t)(v6 - (v3 - 4)) >> 63) & 0xFFFFFFFC) == 0
        || v7 > (unint64_t)v5)
      {
        v13 = *(_DWORD *)(result + 24);
        v9 = -4;
        do
        {
          v10 = (unsigned __int8 *)(v3 + v9);
          v11 = v13 << 8;
          *(_DWORD *)(result + 24) = v11;
          v12 = 255;
          if (v3 + v9 < v6 && (unint64_t)v10 >= v7)
            v12 = *v10;
          v13 = v12 | v11;
          *(_DWORD *)(result + 24) = v13;
          ++v9;
        }
        while ((_DWORD)v9);
      }
      else
      {
        v13 = bswap32(*v5);
      }
      *(_DWORD *)(result + 24) = v13 << -(char)v4;
    }
    else
    {
      *(_DWORD *)(result + 24) = 0;
    }
  }
  return result;
}

uint64_t FLACAudioStream::FlushPacketBuffer(uint64_t this)
{
  UInt32 v1;
  uint64_t v2;
  AudioStreamPacketDescription *v3;

  v1 = *(_DWORD *)(this + 504);
  if (v1)
  {
    v2 = this;
    if (!*(_DWORD *)(this + 200))
    {
      *(_DWORD *)(this + 200) = 1;
      CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(this + 192), 1);
      v1 = *(_DWORD *)(v2 + 504);
    }
    v3 = *(AudioStreamPacketDescription **)(v2 + 192);
    v3->mStartOffset = 0;
    v3->mVariableFramesInPacket = 0;
    v3->mDataByteSize = v1;
    this = AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(v2 + 8), v1, 1u, *(const void **)(v2 + 288), v3, 1);
    ++*(_QWORD *)(v2 + 184);
    *(_DWORD *)(v2 + 504) = 0;
  }
  return this;
}

void VPTimeFreqConverter_Create(int a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  MultiRadixRealFFT *v8;
  char **v9;
  char **v10;
  unsigned int v11;
  int v12;
  uint64x2_t v13;
  uint64x2_t v14;

  v6 = operator new();
  v7 = v6;
  *(_OWORD *)(v6 + 32) = 0u;
  v8 = (MultiRadixRealFFT *)(v6 + 32);
  *(_OWORD *)(v6 + 64) = 0u;
  v9 = (char **)(v6 + 64);
  *(_OWORD *)(v6 + 112) = 0u;
  v10 = (char **)(v6 + 112);
  *(_OWORD *)(v6 + 48) = 0u;
  v11 = 2 * a2;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 169) = 0u;
  if (2 * a2)
  {
    if (a2)
    {
      *(_DWORD *)v6 = 0;
      *(_DWORD *)(v6 + 4) = a1;
      *(_DWORD *)(v6 + 8) = a2;
      *(_DWORD *)(v6 + 12) = a2;
      *(_DWORD *)(v6 + 16) = v11;
      *(_DWORD *)(v6 + 20) = v11;
      *(float *)(v6 + 24) = 1.0 / (float)v11;
      *(_DWORD *)(v6 + 28) = a2 & 0x7FFFFFFF;
      *(_QWORD *)(v6 + 48) = operator new[]();
      *(_QWORD *)(v7 + 56) = operator new[]();
      if (!MultiRadixRealFFT::Initialize(v8))
      {
        std::vector<float>::resize((char **)(v7 + 88), *(unsigned int *)(v7 + 20));
        v12 = *(_DWORD *)(v7 + 4);
        if ((v12 | 2) == 2)
        {
          std::vector<float>::resize(v9, *(unsigned int *)(v7 + 20));
          std::vector<float>::resize((char **)(v7 + 136), *(unsigned int *)(v7 + 20));
          CreateMagicalWindow(*(_QWORD *)(v7 + 136), *(_DWORD *)(v7 + 16), v13);
          v12 = *(_DWORD *)(v7 + 4);
        }
        if ((v12 - 1) <= 1)
        {
          std::vector<float>::resize((char **)(v7 + 160), *(unsigned int *)(v7 + 20));
          CreateMagicalWindow(*(_QWORD *)(v7 + 160), *(_DWORD *)(v7 + 16), v14);
          std::vector<float>::resize(v10, *(unsigned int *)(v7 + 20));
        }
        *(_BYTE *)(v7 + 184) = 1;
      }
    }
  }
  *a3 = v7;
}

void sub_18F079B20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v8 = (void *)v1[20];
  if (v8)
  {
    v1[21] = v8;
    operator delete(v8);
  }
  v9 = *v6;
  if (*v6)
  {
    v1[18] = v9;
    operator delete(v9);
  }
  v10 = *v4;
  if (*v4)
  {
    v1[15] = v10;
    operator delete(v10);
  }
  v11 = *v5;
  if (*v5)
  {
    v1[12] = v11;
    operator delete(v11);
  }
  v12 = *v3;
  if (*v3)
  {
    v1[9] = v12;
    operator delete(v12);
  }
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2);
  MEMORY[0x193FFE460](v1, 0x10A0C406C6E14A4);
  _Unwind_Resume(a1);
}

uint64_t VPTimeFreqConverter_Dispose(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (a1)
  {
    v2 = a1[6];
    if (v2)
      MEMORY[0x193FFE43C](v2, 0x1000C8052888210);
    v3 = a1[7];
    if (v3)
      MEMORY[0x193FFE43C](v3, 0x1000C8052888210);
    v4 = (void *)a1[20];
    if (v4)
    {
      a1[21] = v4;
      operator delete(v4);
    }
    v5 = (void *)a1[17];
    if (v5)
    {
      a1[18] = v5;
      operator delete(v5);
    }
    v6 = (void *)a1[14];
    if (v6)
    {
      a1[15] = v6;
      operator delete(v6);
    }
    v7 = (void *)a1[11];
    if (v7)
    {
      a1[12] = v7;
      operator delete(v7);
    }
    v8 = (void *)a1[8];
    if (v8)
    {
      a1[9] = v8;
      operator delete(v8);
    }
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    MEMORY[0x193FFE460](a1, 0x10A0C406C6E14A4);
  }
  return 0;
}

uint64_t VPTimeFreqConverter_Analyze(uint64_t a1, const void *a2, DSPSplitComplex *a3)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294967246;
  if (!*(_BYTE *)(a1 + 184))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "vpTimeFreqConverter.cpp";
      v12 = 1024;
      v13 = 69;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d _vp: vptimefreqconverter::analyze: not configured for conversion";
LABEL_11:
      _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v10, 0x12u);
    }
    return 4294956433;
  }
  if ((*(_DWORD *)(a1 + 4) | 2) != 2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "vpTimeFreqConverter.cpp";
      v12 = 1024;
      v13 = 76;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d _vp: vptimefreqconverter::analyze: not configured for analysis";
      goto LABEL_11;
    }
    return 4294956433;
  }
  if (*(_DWORD *)a1)
    return 4294967292;
  memcpy(*(void **)(a1 + 64), (const void *)(*(_QWORD *)(a1 + 64) + 4 * *(unsigned int *)(a1 + 12)), 4 * (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 12)));
  memcpy((void *)(*(_QWORD *)(a1 + 64) + 4 * (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 12))), a2, 4 * *(unsigned int *)(a1 + 12));
  vDSP_vmul(*(const float **)(a1 + 136), 1, *(const float **)(a1 + 64), 1, *(float **)(a1 + 88), 1, *(unsigned int *)(a1 + 16));
  vDSP_vsmul(*(const float **)(a1 + 88), 1, (const float *)(a1 + 24), *(float **)(a1 + 88), 1, *(unsigned int *)(a1 + 16));
  v4 = MultiRadixRealFFT::RealOutOfPlaceForwardTransform((MultiRadixRealFFT *)(a1 + 32), *(const float **)(a1 + 88), a3, 1.0);
  if ((_DWORD)v4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v10 = 136315394;
    v11 = "vpTimeFreqConverter.cpp";
    v12 = 1024;
    v13 = 95;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d _vp: vptimefreqconverter::analyze: FFT error", (uint8_t *)&v10, 0x12u);
  }
  return v4;
}

uint64_t VPTimeFreqConverter_Synthesize(uint64_t a1, const DSPSplitComplex *a2, void *a3)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294967246;
  if (!*(_BYTE *)(a1 + 184))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "vpTimeFreqConverter.cpp";
      v11 = 1024;
      v12 = 117;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d _vp: vptimefreqconverter::synthesize: not configured for conversion";
LABEL_11:
      _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v9, 0x12u);
    }
    return 4294956433;
  }
  if ((*(_DWORD *)(a1 + 4) - 1) >= 2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "vpTimeFreqConverter.cpp";
      v11 = 1024;
      v12 = 124;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d _vp: vptimefreqconverter::synthesize: not configured for synthesis";
      goto LABEL_11;
    }
    return 4294956433;
  }
  if (*(_DWORD *)a1)
    return 4294967292;
  v4 = MultiRadixRealFFT::RealOutOfPlaceInverseTransform((MultiRadixRealFFT *)(a1 + 32), a2, *(float **)(a1 + 88));
  if ((_DWORD)v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "vpTimeFreqConverter.cpp";
      v11 = 1024;
      v12 = 132;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d _vp: vptimefreqconverter::synthesize: IFFT error", (uint8_t *)&v9, 0x12u);
    }
  }
  else
  {
    vDSP_vmul(*(const float **)(a1 + 88), 1, *(const float **)(a1 + 160), 1, *(float **)(a1 + 88), 1, *(unsigned int *)(a1 + 16));
    vDSP_vadd(*(const float **)(a1 + 88), 1, *(const float **)(a1 + 112), 1, *(float **)(a1 + 112), 1, *(unsigned int *)(a1 + 16));
    memcpy(a3, *(const void **)(a1 + 112), 4 * *(unsigned int *)(a1 + 12));
    memmove(*(void **)(a1 + 112), (const void *)(*(_QWORD *)(a1 + 112) + 4 * *(unsigned int *)(a1 + 12)), 4 * (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 12)));
    bzero((void *)(*(_QWORD *)(a1 + 112) + 4 * (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 12))), 4 * *(unsigned int *)(a1 + 12));
  }
  return v4;
}

void DSPGraph::Wire::~Wire(DSPGraph::Wire *this)
{
  *(_QWORD *)this = &off_1E2911688;
}

{
  *(_QWORD *)this = &off_1E2911688;
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::Wire::ClassName(DSPGraph::Wire *this)
{
  return "Wire";
}

uint64_t DSPGraph::Wire::print(uint64_t result, _QWORD *a2, int a3, uint64_t a4)
{
  int v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int16x8_t v11;
  void **v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  void *__p[2];
  char v19;
  _OWORD v20[2];
  uint64_t v21;

  if (a3 >= 4)
  {
    v4 = a4;
    v6 = result;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a2, a4, 1);
    DSPGraph::printi(a2, v4 + 4, "block size %u\n", *(_DWORD *)(*(_QWORD *)(v6 + 120) + 40));
    DSPGraph::printi(a2, v4 + 4, "buffer %p\n", *(const void **)(v6 + 56));
    v7 = *(_QWORD **)(v6 + 8);
    v8 = v7[1];
    v9 = (const char *)(v8 + 32);
    if (*(char *)(v8 + 55) < 0)
      v9 = *(const char **)v9;
    DSPGraph::printi(a2, v4 + 4, "source port %p box %p %s\n", v7, (const void *)v7[1], v9);
    v10 = *(_QWORD *)(v6 + 120);
    v11 = *(int16x8_t *)(v10 + 16);
    v20[0] = *(_OWORD *)v10;
    v20[1] = v11;
    v21 = *(_QWORD *)(v10 + 32);
    CA::StreamDescription::AsString((CA::StreamDescription *)__p, v20, *(double *)v20, v11);
    if (v19 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    DSPGraph::printi(a2, v4 + 4, "format %s\n", (const char *)v12);
    if (v19 < 0)
      operator delete(__p[0]);
    result = DSPGraph::printi(a2, v4 + 4, "num dests %zu\n", *(_QWORD *)(v6 + 40));
    v13 = *(_QWORD **)(v6 + 32);
    if (v13)
    {
      v14 = 0;
      v15 = v4 + 8;
      do
      {
        v16 = *(_QWORD *)(v13[2] + 8);
        v17 = (const char *)(v16 + 32);
        if (*(char *)(v16 + 55) < 0)
          v17 = *(const char **)v17;
        result = DSPGraph::printi(a2, v15, "%3zu dest %p, box name %s\n", v14++, (const void *)v13[2], v17);
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
  }
  return result;
}

void sub_18F07A320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Wire::add(DSPGraph::Wire *this, DSPGraph::InputPort *a2)
{
  std::__hash_table<DSPGraph::InputPort *,std::hash<DSPGraph::InputPort *>,std::equal_to<DSPGraph::InputPort *>,std::allocator<DSPGraph::InputPort *>>::__emplace_unique_key_args<DSPGraph::InputPort *,DSPGraph::InputPort * const&>((float *)this + 4, (unint64_t)a2, (uint64_t)a2);
  *((_QWORD *)a2 + 2) = this;
}

void DSPGraph::Wire::remove(DSPGraph::Wire *this, DSPGraph::InputPort *a2)
{
  std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>((uint64_t *)this + 2, (unint64_t)a2);
  *((_QWORD *)a2 + 2) = 0;
}

_QWORD *DSPGraph::Wire::removeAll(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (this[5])
  {
    v1 = this;
    this = (_QWORD *)this[4];
    if (this)
    {
      do
      {
        v2 = (_QWORD *)*this;
        operator delete(this);
        this = v2;
      }
      while (v2);
    }
    v1[4] = 0;
    v3 = v1[3];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(v1[2] + 8 * i) = 0;
    }
    v1[5] = 0;
  }
  return this;
}

void DSPGraph::Wire::addAll(DSPGraph::Wire *this, DSPGraph::Wire *a2)
{
  _QWORD *v2;
  float *v4;
  unint64_t v5;

  v2 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (v2)
  {
    v4 = (float *)((char *)this + 16);
    do
    {
      v5 = v2[2];
      std::__hash_table<DSPGraph::InputPort *,std::hash<DSPGraph::InputPort *>,std::equal_to<DSPGraph::InputPort *>,std::allocator<DSPGraph::InputPort *>>::__emplace_unique_key_args<DSPGraph::InputPort *,DSPGraph::InputPort * const&>(v4, v5, v5);
      *(_QWORD *)(v5 + 16) = this;
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
}

uint64_t DSPGraph::Wire::setLocalFormat(uint64_t this, const AudioStreamBasicDescription *__s1, uint64_t a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int16x8_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int16x8_t v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[2];
  char v19;
  _QWORD v20[2];
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int16x8_t v25;
  uint64_t v26;

  v5 = this;
  if (*(_BYTE *)(this + 64))
  {
    v6 = *(_DWORD **)(this + 120);
    this = memcmp(__s1, v6, 0x28uLL);
    if ((_DWORD)this || v6[10] != (_DWORD)a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Wire.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v22, "setLocalFormat");
      v7 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
      v8 = (_QWORD *)(v7 + 32);
      if (*(char *)(v7 + 55) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(int16x8_t *)&__s1->mBytesPerPacket;
      v24 = *(_OWORD *)&__s1->mSampleRate;
      v25 = v9;
      v26 = *(_QWORD *)&__s1->mBitsPerChannel;
      CA::StreamDescription::AsString((CA::StreamDescription *)v20, &v24, *(double *)&v24, v9);
      v10 = v21;
      v11 = (_QWORD *)v20[0];
      v12 = *(_QWORD *)(v5 + 120);
      v24 = *(_OWORD *)v12;
      v25 = *(int16x8_t *)(v12 + 16);
      v26 = *(_QWORD *)(v12 + 32);
      CA::StreamDescription::AsString((CA::StreamDescription *)v18, &v24, *(double *)v25.i64, v13);
      if (v10 >= 0)
        v14 = v20;
      else
        v14 = v11;
      if (v19 >= 0)
        v15 = v18;
      else
        v15 = (_QWORD *)v18[0];
      DSPGraph::strprintf((DSPGraph *)"Wire from box %s: format\n%s, %u block size\ndoes not match the one previously set\n%s, %u block size\n", &v24, v8, v14, a3, v15, *(unsigned int *)(*(_QWORD *)(v5 + 120) + 40));
      DSPGraph::ThrowException(1718444833, &v23, 125, &v22, &v24);
    }
  }
  else
  {
    v16 = *(_OWORD *)&__s1->mSampleRate;
    v17 = *(_OWORD *)&__s1->mBytesPerPacket;
    *(_QWORD *)(this + 104) = *(_QWORD *)&__s1->mBitsPerChannel;
    *(_OWORD *)(this + 88) = v17;
    *(_OWORD *)(this + 72) = v16;
    *(_BYTE *)(this + 64) = 1;
  }
  *(_DWORD *)(v5 + 112) = a3;
  *(_QWORD *)(v5 + 120) = v5 + 72;
  return this;
}

void sub_18F07A5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (*(char *)(v38 - 89) < 0)
    operator delete(*(void **)(v38 - 112));
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Wire::setSameFormat(uint64_t this, DSPGraph::Wire *a2)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_BYTE *)(this + 64) = *((_BYTE *)a2 + 64);
  v2 = (__int128 *)*((_QWORD *)a2 + 15);
  if (v2 == (__int128 *)((char *)a2 + 72))
  {
    v3 = *v2;
    v4 = v2[1];
    v5 = *(__int128 *)((char *)v2 + 28);
    v2 = (__int128 *)(this + 72);
    *(_OWORD *)(this + 100) = v5;
    *(_OWORD *)(this + 88) = v4;
    *(_OWORD *)(this + 72) = v3;
  }
  *(_QWORD *)(this + 120) = v2;
  return this;
}

void WAVEAudioFile::~WAVEAudioFile(WAVEAudioFile *this)
{
  WAVEAudioFile::~WAVEAudioFile(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E2903B40;
  if (*((_QWORD *)this + 65))
  {
    v2 = BaseOpaqueObject::ResolveOpaqueRef();
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  free(*((void **)this + 63));
  *(_QWORD *)this = off_1E2905308;
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  AudioFileObject::~AudioFileObject(this);
}

uint64_t WAVEAudioFile::Create(WAVEAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((IsSupportedWAVEFormat(a3->mFormatID) & 1) != 0)
  {
    v6 = AudioFileObject::Create(this, a2, a3);
    if ((_DWORD)v6)
    {
      v7 = v6;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v12 = 136315394;
        v13 = "WAVEAudioFile.cpp";
        v14 = 1024;
        v15 = 1459;
        v8 = MEMORY[0x1E0C81028];
        v9 = "%25s:%-5d  Couldn't create a new audio file object";
LABEL_7:
        _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v12, 0x12u);
      }
    }
    else
    {
      v11 = WAVEAudioFile::InitializeWAVEChunks(this);
      if ((_DWORD)v11)
      {
        v7 = v11;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return v7;
        v12 = 136315394;
        v13 = "WAVEAudioFile.cpp";
        v14 = 1024;
        v15 = 1462;
        v8 = MEMORY[0x1E0C81028];
        v9 = "%25s:%-5d  InitializeWAVEChunks";
        goto LABEL_7;
      }
      v7 = WAVEAudioFile::ParseAudioFile(this);
      if ((_DWORD)v7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v12 = 136315394;
        v13 = "WAVEAudioFile.cpp";
        v14 = 1024;
        v15 = 1465;
        v8 = MEMORY[0x1E0C81028];
        v9 = "%25s:%-5d  ParseAudioFile";
        goto LABEL_7;
      }
    }
  }
  else
  {
    v7 = 1718449215;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "WAVEAudioFile.cpp";
      v14 = 1024;
      v15 = 1456;
      v8 = MEMORY[0x1E0C81028];
      v9 = "%25s:%-5d  Unsupported WAVE format";
      goto LABEL_7;
    }
  }
  return v7;
}

uint64_t WAVEAudioFile::OpenFromDataSource(WAVEAudioFile *this)
{
  uint64_t v1;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = WAVEAudioFile::ParseAudioFile(this);
  if ((_DWORD)v1 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "WAVEAudioFile.cpp";
    v5 = 1024;
    v6 = 1476;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  WAVEAudioFile::OpenFromDataSource Failed", (uint8_t *)&v3, 0x12u);
  }
  return v1;
}

uint64_t WAVEAudioFile::InitializeDataSource(WAVEAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((IsSupportedWAVEFormat(a2->mFormatID) & 1) != 0)
  {
    v3 = WAVEAudioFile::InitializeWAVEChunks(this);
    if ((_DWORD)v3)
    {
      v4 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v8 = 136315394;
        v9 = "WAVEAudioFile.cpp";
        v10 = 1024;
        v11 = 1491;
        v5 = MEMORY[0x1E0C81028];
        v6 = "%25s:%-5d  InitializeWAVEChunks";
LABEL_7:
        _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v8, 0x12u);
      }
    }
    else
    {
      v4 = WAVEAudioFile::ParseAudioFile(this);
      if ((_DWORD)v4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v8 = 136315394;
        v9 = "WAVEAudioFile.cpp";
        v10 = 1024;
        v11 = 1494;
        v5 = MEMORY[0x1E0C81028];
        v6 = "%25s:%-5d  ParseAudioFile";
        goto LABEL_7;
      }
    }
  }
  else
  {
    v4 = 1718449215;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "WAVEAudioFile.cpp";
      v10 = 1024;
      v11 = 1488;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  Unsupported WAVE format";
      goto LABEL_7;
    }
  }
  return v4;
}

uint64_t WAVEAudioFile::ReadBytes(WAVEAudioFile *this, int a2, uint64_t a3, unsigned int *a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  BOOL v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a4 && a5)
  {
    v5 = *((_QWORD *)this + 1);
    if (v5 <= a3)
    {
      *a4 = 0;
      return 4294967257;
    }
    else
    {
      v6 = *((_QWORD *)this + 9);
      v7 = v6 + a3;
      v8 = v7 + *a4;
      v9 = v5 + v6;
      if (v8 > v5 + v6)
        *a4 = v9 - v7;
      LODWORD(result) = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 32 * (a2 == 0));
      if ((_DWORD)result)
        v11 = 1;
      else
        v11 = v8 <= v9;
      if (v11)
        return result;
      else
        return 4294967257;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "WAVEAudioFile.cpp";
      v14 = 1024;
      v15 = 3282;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid num bytes parameter", (uint8_t *)&v12, 0x12u);
    }
    return 4294967246;
  }
}

uint64_t WAVEAudioFile::ReadPackets(WAVEAudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  int v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  NSObject *v19;
  const char *v20;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  void *v25;
  malloc_type_id_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  const char *v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v32 = 136315394;
      v33 = "WAVEAudioFile.cpp";
      v34 = 1024;
      v35 = 3191;
      v19 = MEMORY[0x1E0C81028];
      v20 = "%25s:%-5d  NULL buffer";
      goto LABEL_18;
    }
    return 4294967246;
  }
  if (!a6 || (v8 = *a6) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v32 = 136315394;
      v33 = "WAVEAudioFile.cpp";
      v34 = 1024;
      v35 = 3193;
      v19 = MEMORY[0x1E0C81028];
      v20 = "%25s:%-5d  invalid num packets parameter";
LABEL_18:
      _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v32, 0x12u);
      return 4294967246;
    }
    return 4294967246;
  }
  if (*((_DWORD *)this + 117) == 1)
  {
    v13 = *((unsigned int *)this + 10);
    v32 = v13 * v8;
    v14 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t, uint64_t, unsigned int *, char *))(*(_QWORD *)this + 72))(this, a2, v13 * a5, &v32, a7);
    v15 = v14;
    if (!(_DWORD)v14 || (_DWORD)v14 == -39)
    {
      v16 = v32;
      v17 = *((_DWORD *)this + 10);
      if (v32 != v17 * *a6)
      {
        v18 = v32 / v17;
        *a6 = v32 / v17;
        v16 = *((_DWORD *)this + 10) * v18;
      }
      if (a3)
        *a3 = v16;
      if ((_DWORD)v14 == -39)
        return 0;
      else
        return v14;
    }
    return v15;
  }
  v22 = *((unsigned int *)this + 120);
  v23 = (v22 * v8);
  v32 = v22 * v8;
  v24 = v22 * a5;
  v25 = (void *)*((_QWORD *)this + 63);
  if (v25)
  {
    if (*((_DWORD *)this + 128) >= v23)
      goto LABEL_26;
    free(*((void **)this + 63));
    v23 = *((_DWORD *)this + 120) * *a6;
    v26 = 1984237655;
  }
  else
  {
    v26 = 3874801137;
  }
  v25 = malloc_type_calloc(v23, 1uLL, v26);
  *((_QWORD *)this + 63) = v25;
  *((_DWORD *)this + 128) = *((_DWORD *)this + 120) * *a6;
LABEL_26:
  v27 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t, uint64_t, unsigned int *, void *))(*(_QWORD *)this + 72))(this, a2, v24, &v32, v25);
  v15 = v27;
  if (!(_DWORD)v27 || (_DWORD)v27 == -39)
  {
    v28 = v32;
    v29 = *((_DWORD *)this + 120);
    if (v32 != v29 * *a6)
    {
      v30 = v32 / v29;
      *a6 = v32 / v29;
      v28 = *((_DWORD *)this + 120) * v30;
      v32 = v28;
    }
    if (a3)
      *a3 = (*((double *)this + 61) * (double)v28);
    if ((_DWORD)v27 == -39)
      v15 = 0;
    else
      v15 = v27;
  }
  if (*a6)
  {
    v31 = 0;
    do
    {
      memcpy(&a7[*((_DWORD *)this + 10) * v31], (const void *)(*((_QWORD *)this + 63) + *((unsigned int *)this + 124) + *((_DWORD *)this + 120) * v31), *((unsigned int *)this + 10));
      ++v31;
    }
    while (v31 < *a6);
  }
  return v15;
}

uint64_t WAVEAudioFile::GetPropertyInfo(WAVEAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  int v6;

  if (a2 > 1768174446)
  {
    if (a2 != 1768174447)
    {
      if (a2 == 1969321067)
      {
LABEL_10:
        if (a3)
          *a3 = 4;
        if (a4)
        {
          result = 0;
          *a4 = 1;
          return result;
        }
        return 0;
      }
      return ChunkyAudioFile::GetPropertyInfo(this, a2, a3, a4);
    }
    if (a3)
      *a3 = 8;
    if (!a4)
      return 0;
LABEL_21:
    result = 0;
    *a4 = 0;
    return result;
  }
  if (a2 == 1635017588)
  {
    if (a3)
      *a3 = 4;
    if (!a4)
      return 0;
    goto LABEL_21;
  }
  if (a2 != 1714828386)
    return ChunkyAudioFile::GetPropertyInfo(this, a2, a3, a4);
  result = 1886681407;
  if ((*((_BYTE *)this + 100) & 2) != 0)
  {
    v6 = *((_DWORD *)this + 21);
    if (v6 == 1380333108 || v6 == 1113011764)
      goto LABEL_10;
  }
  return result;
}

uint64_t WAVEAudioFile::GetProperty(WAVEAudioFile *this, int a2, unsigned int *a3, char *a4)
{
  uint64_t result;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;

  result = 561211770;
  if (!a3 || !a4)
    return result;
  if (a2 <= 1768174446)
  {
    if (a2 != 1635017588)
    {
      if (a2 == 1714828386)
      {
        result = 1886681407;
        if ((*((_BYTE *)this + 100) & 2) != 0)
        {
          v6 = *((_DWORD *)this + 21);
          if (v6 == 1380333108 || v6 == 1113011764)
          {
            result = 561211770;
            if (*a3 >= 4)
            {
              result = 0;
              *(_DWORD *)a4 = *((unsigned __int8 *)this + 516);
              v7 = 4;
LABEL_22:
              *a3 = v7;
              return result;
            }
          }
        }
        return result;
      }
      return ChunkyAudioFile::GetProperty(this, a2, a3, a4);
    }
    if (*a3 < 4)
      return result;
    result = 0;
    v8 = *((_DWORD *)this + 117);
LABEL_17:
    *(_DWORD *)a4 = v8;
    return result;
  }
  if (a2 != 1768174447)
  {
    if (a2 != 1969321067)
      return ChunkyAudioFile::GetProperty(this, a2, a3, a4);
    if (*a3 < 4)
      return result;
    result = 0;
    v8 = *((_DWORD *)this + 118);
    goto LABEL_17;
  }
  result = 1886681407;
  v9 = *((_QWORD *)this + 66);
  if (v9)
  {
    if ((*((_BYTE *)this + 100) & 2) == 0)
    {
      result = 561211770;
      if (*a3 >= 8)
      {
        result = 0;
        *(_QWORD *)a4 = v9;
        v7 = 8;
        goto LABEL_22;
      }
    }
  }
  return result;
}

uint64_t WAVEAudioFile::SetProperty(WAVEAudioFile *this, int a2, uint64_t a3, uint64_t *a4)
{
  int v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  UInt32 v9;
  uint64_t result;
  int v11;
  uint8x8_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  AudioStreamBasicDescription v17;

  if (a2 != 1714828386)
  {
    if (a2 != 1969321067)
      return ChunkyAudioFile::SetProperty(this, a2, a3, a4);
    if ((*((_BYTE *)this + 100) & 2) != 0)
      return 0;
    if (a3 >= 4)
    {
      v5 = *(_DWORD *)a4;
      v6 = *((_DWORD *)this + 117);
      if (*(_DWORD *)a4 >= v6)
        return 2003334207;
      if (v5 != *((_DWORD *)this + 118))
      {
        v7 = *(_OWORD *)((char *)this + 24);
        v8 = *(_OWORD *)((char *)this + 40);
        *(_OWORD *)&v17.mSampleRate = v7;
        *(_OWORD *)&v17.mBytesPerPacket = v8;
        *(_QWORD *)&v17.mBitsPerChannel = *((_QWORD *)this + 7);
        if (v6 >= 2)
        {
          if (v5)
          {
            v9 = 2;
          }
          else
          {
            LODWORD(v7) = *((_DWORD *)this + 114) & 0x3FFFF;
            v13 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v7);
            v13.i16[0] = vaddlv_u8(v13);
            v9 = v13.i32[0];
          }
          v17.mBytesPerFrame = 0;
          v17.mChannelsPerFrame = v9;
          v17.mBytesPerPacket = 0;
          if (!FillOutAudioDescription(&v17, 0, 0, 0))
            (*(void (**)(WAVEAudioFile *, AudioStreamBasicDescription *))(*(_QWORD *)this + 176))(this, &v17);
          v15 = *((_DWORD *)this + 119);
          if (v5)
            v16 = (v15 + 2 * (v5 - *((_DWORD *)this + 117))) * (*((_DWORD *)this + 14) >> 3);
          else
            v16 = 0;
          *((_DWORD *)this + 124) = v16;
          if (v15)
          {
            LODWORD(v14) = *((_DWORD *)this + 13);
            *((double *)this + 61) = (double)v14 / (double)v15;
          }
          *((_DWORD *)this + 118) = v5;
        }
      }
      return 0;
    }
    return 561211770;
  }
  result = 1886681407;
  if ((*((_BYTE *)this + 100) & 2) != 0)
  {
    v11 = *((_DWORD *)this + 21);
    if (v11 == 1380333108 || v11 == 1113011764)
    {
      if (a3 >= 4)
      {
        *((_BYTE *)this + 516) = *(_DWORD *)a4 != 0;
        return (*(uint64_t (**)(WAVEAudioFile *))(*(_QWORD *)this + 216))(this);
      }
      return 561211770;
    }
  }
  return result;
}

uint64_t WAVEAudioFile::UpdateDataFormat(WAVEAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v4;
  int v6;
  UInt32 mBitsPerChannel;
  unsigned int mSampleRate;
  int FormatTagFromFormatID;
  int v10;
  unint64_t v11;
  NSObject *v12;
  const char *v13;
  unsigned int v14;
  _WORD v15[2];
  unsigned int v16;
  int v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  int v22;
  __int128 v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(WAVEAudioFile *))(*(_QWORD *)this + 176))(this);
  if ((_DWORD)v4)
    return v4;
  v4 = 1718449215;
  v6 = *((_DWORD *)this + 10);
  mBitsPerChannel = a2->mBitsPerChannel;
  v15[1] = a2->mChannelsPerFrame;
  mSampleRate = a2->mSampleRate;
  v19 = mBitsPerChannel;
  v18 = v6;
  v16 = mSampleRate;
  v17 = v6 * mSampleRate;
  FormatTagFromFormatID = AudioFormat_GetFormatTagFromFormatID(a2->mFormatID, a2->mFormatFlags);
  if (!FormatTagFromFormatID)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v4;
    *(_DWORD *)buf = 136315394;
    v25 = "WAVEAudioFile.cpp";
    v26 = 1024;
    v27 = 2090;
    v12 = MEMORY[0x1E0C81028];
    v13 = "%25s:%-5d  Unsupported data format file";
LABEL_17:
    _os_log_impl(&dword_18EE07000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
    return v4;
  }
  v10 = *((_DWORD *)this + 114);
  if (v10)
  {
    v15[0] = -2;
    v22 = v10;
    v23 = waveFormatExTagUUID;
    LOWORD(v23) = FormatTagFromFormatID;
    v21 = mBitsPerChannel;
    v20 = 22;
    v11 = 40;
  }
  else
  {
    v15[0] = FormatTagFromFormatID;
    if (FormatTagFromFormatID != 1)
      v21 = 0;
    v11 = 16;
  }
  v14 = ChunkyAudioFile::ReplaceChunk(this, 1718449184, 0, v11, v15);
  if (v14 == -1)
    v4 = 1685348671;
  else
    v4 = v14;
  if ((_DWORD)v4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v4;
    *(_DWORD *)buf = 136315394;
    v25 = "WAVEAudioFile.cpp";
    v26 = 1024;
    v27 = 2122;
    v12 = MEMORY[0x1E0C81028];
    v13 = "%25s:%-5d  FSWrite Failed";
    goto LABEL_17;
  }
  if (*((_DWORD *)this + 114) && !*((_DWORD *)this + 20))
    return (*(uint64_t (**)(WAVEAudioFile *))(*(_QWORD *)this + 64))(this);
  else
    return 0;
}

uint64_t WAVEAudioFile::UpdateSize(WAVEAudioFile *this)
{
  int v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  _DWORD *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  int *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  int v63;
  _BYTE v64[24];
  _BYTE buf[24];
  uint64_t v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v63 = 0;
  v1 = *((unsigned __int8 *)this + 516);
  v62 = 0;
  v61 = 0;
  v4 = *((_QWORD *)this + 18);
  v2 = *((_QWORD *)this + 19);
  v3 = (char *)this + 144;
  v5 = v2 - v4;
  if (v2 == v4)
  {
LABEL_5:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1885;
      v11 = MEMORY[0x1E0C81028];
      v12 = "%25s:%-5d  Couldn't get the data chunk info";
      goto LABEL_7;
    }
    return 0;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
  while (1)
  {
    v10 = (_DWORD *)(v4 + 24 * v7);
    if (*v10 == 1684108385)
      break;
    v7 = ++v8;
    if (v9 <= v8)
      goto LABEL_5;
  }
  v16 = 0;
  v17 = 1;
  while (1)
  {
    v18 = (int *)(v4 + 24 * v16);
    if (*v18 == *((_DWORD *)this + 42))
      break;
    v16 = v17;
    v38 = v9 > v17++;
    if (!v38)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1888;
      v11 = MEMORY[0x1E0C81028];
      v12 = "%25s:%-5d  Couldn't get the RIFF/RF64/BW64 container chunk info";
LABEL_7:
      v13 = buf;
LABEL_8:
      _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_ERROR, v12, v13, 0x12u);
      return 0;
    }
  }
  v58 = *((_DWORD *)this + 21);
  v19 = v4 + 24 * v7;
  v21 = *(_QWORD *)(v19 + 8);
  v20 = (_QWORD *)(v19 + 8);
  v22 = v21 - *((unsigned int *)v20 - 1);
  v59 = (*(uint64_t (**)(WAVEAudioFile *))(*(_QWORD *)this + 224))(this);
  v38 = v22 <= v59;
  v23 = v22 - v59;
  if (!v38)
  {
    ChunkyAudioFile::MoveUpTrailingChunks(this, v8, v23);
    v24 = (*(uint64_t (**)(_QWORD, unint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v62);
    if ((_DWORD)v24)
    {
      v14 = v24;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v14;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1898;
      v25 = MEMORY[0x1E0C81028];
      v26 = "%25s:%-5d  GetSize failed";
      goto LABEL_24;
    }
    (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), v62 - v23);
  }
  v27 = (*(uint64_t (**)(_QWORD, unint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v62);
  if ((_DWORD)v27)
  {
    v14 = v27;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v14;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1903;
    v25 = MEMORY[0x1E0C81028];
    v26 = "%25s:%-5d  GetSize failed";
    goto LABEL_24;
  }
  v57 = v62 - *(unsigned int *)(v4 + 24 * v16 + 4);
  v29 = *((_QWORD *)this + 18);
  v30 = *((_QWORD *)this + 19);
  v31 = v30 - v29;
  if (v30 == v29)
  {
LABEL_30:
    v35 = 0;
  }
  else
  {
    v32 = 0;
    v33 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
    v34 = 1;
    while (1)
    {
      v35 = v29 + 24 * v32;
      if (*(_DWORD *)v35 == 1685272116)
        break;
      v32 = v34;
      v38 = v33 > v34++;
      if (!v38)
        goto LABEL_30;
    }
    if (*(_QWORD *)(v4 + 24 * v16 + 16) + 12 == *(_QWORD *)(v29 + 24 * v32 + 16)
      && (unint64_t)(*(uint64_t (**)(WAVEAudioFile *, _QWORD))(*(_QWORD *)this + 792))(this, *(_QWORD *)(v29 + 24 * v32 + 8)) >= 0x24)
    {
      v52 = *((_DWORD *)this + 42);
      v36 = 1;
      if (v52 == 1113011764 || v52 == 1380333108)
        goto LABEL_40;
      goto LABEL_32;
    }
  }
  v36 = 0;
LABEL_32:
  v37 = ~*((_DWORD *)this + 45);
  v38 = v59 > v37 || v62 > v37;
  if (v38)
  {
    if (((*(uint64_t (**)(WAVEAudioFile *))(*(_QWORD *)this + 800))(this) & 1) != 0)
      goto LABEL_40;
    if (!(*(unsigned int (**)(WAVEAudioFile *))(*(_QWORD *)this + 808))(this))
      return 1868981823;
  }
  if (!v1)
    goto LABEL_72;
LABEL_40:
  v39 = (*(uint64_t (**)(WAVEAudioFile *))(*(_QWORD *)this + 240))(this) * *((unsigned int *)this + 11);
  *(_QWORD *)buf = 0x1C34367364;
  *(_QWORD *)&buf[8] = v57;
  *(_QWORD *)&buf[16] = v59;
  v66 = v39;
  v67 = 0;
  if (!v36)
  {
    v41 = *((_QWORD *)this + 18);
    v42 = *((_QWORD *)this + 19) - v41;
    if (v42)
    {
      v43 = 0;
      v44 = 0;
      v45 = 0xAAAAAAAAAAAAAAABLL * (v42 >> 3);
      while (1)
      {
        v46 = v41 + 24 * v43;
        if (*(_DWORD *)v46 == 1247104587)
          break;
        v43 = ++v44;
        if (v45 <= v44)
          goto LABEL_48;
      }
    }
    else
    {
LABEL_48:
      v44 = 0;
      v46 = 0;
    }
    v47 = (*(uint64_t (**)(WAVEAudioFile *, _QWORD))(*(_QWORD *)this + 792))(this, *(_QWORD *)(v46 + 8));
    v48 = *(_QWORD *)(v4 + 24 * v16 + 16) + 12;
    if (v48 != *(_QWORD *)(v46 + 16) || (v49 = v47, v47 <= 0x23))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v64 = 136315394;
        *(_QWORD *)&v64[4] = "WAVEAudioFile.cpp";
        *(_WORD *)&v64[12] = 1024;
        *(_DWORD *)&v64[14] = 1956;
        v11 = MEMORY[0x1E0C81028];
        v12 = "%25s:%-5d  Couldn't find a suitable JUNK chunk at the required offset of a ds64 chunk";
        v13 = v64;
        goto LABEL_8;
      }
      return 0;
    }
    *(_QWORD *)v64 = 0x864733634;
    v50 = 36;
    if (v47 - 44 >= 0xFFFFFFFFFFFFFFF8)
      v50 = v47;
    *(_QWORD *)&v64[8] = v50;
    *(_QWORD *)&v64[16] = v48;
    v51 = (*(uint64_t (**)(WAVEAudioFile *, _BYTE *, int *))(*(_QWORD *)this + 776))(this, v64, &v61);
    if ((_DWORD)v51)
      return v51;
    v56 = v49;
    v60 = 0;
    v14 = (*(uint64_t (**)(WAVEAudioFile *, _BYTE *, _BYTE *, uint64_t *))(*(_QWORD *)this + 784))(this, v64, &buf[8], &v60);
    if ((_DWORD)v14)
      return v14;
    if (v56 == *(_QWORD *)&v64[8])
    {
      *(_DWORD *)v46 = *(_DWORD *)v64;
      *(_QWORD *)(v46 + 8) = v56;
    }
    else
    {
      std::vector<ChunkInfo64>::insert((uint64_t)v3, (char *)(*((_QWORD *)this + 18) + 24 * v44), (unint64_t)v64);
      v53 = *(_QWORD *)(v46 + 16) + *(_QWORD *)&v64[8];
      *(_QWORD *)(v46 + 8) = v56 - *(_QWORD *)&v64[8];
      *(_QWORD *)(v46 + 16) = v53;
      v14 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t, int *))(*(_QWORD *)this + 776))(this, v46, &v61);
      if ((_DWORD)v14)
        return v14;
    }
    goto LABEL_67;
  }
  v40 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _BYTE *, int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v35 + 16) + 8, 24, &buf[8], &v63);
  if (!(_DWORD)v40)
  {
LABEL_67:
    v54 = 1113011764;
    if (v58 == 1113011764 || (v54 = 1380333108, v58 == 1380333108))
      *((_DWORD *)this + 42) = v54;
    else
      v54 = *((_DWORD *)this + 42);
    *v18 = v54;
LABEL_72:
    *v20 = v59 + *((unsigned int *)v20 - 1);
    v55 = (*(uint64_t (**)(WAVEAudioFile *, _DWORD *, int *))(*(_QWORD *)this + 776))(this, v10, &v61);
    if ((_DWORD)v55)
    {
      v14 = v55;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v14;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2016;
      v25 = MEMORY[0x1E0C81028];
      v26 = "%25s:%-5d  Update to data chunk failed";
    }
    else
    {
      *(_QWORD *)(v4 + 24 * v16 + 8) = v57 + *(unsigned int *)(v4 + 24 * v16 + 4);
      v14 = (*(uint64_t (**)(WAVEAudioFile *, int *, int *))(*(_QWORD *)this + 776))(this, v18, &v61);
      if (!(_DWORD)v14 || !os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v14;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2021;
      v25 = MEMORY[0x1E0C81028];
      v26 = "%25s:%-5d  Update to RIFF/RF64/BW64 chunk failed";
    }
LABEL_24:
    v28 = buf;
LABEL_25:
    _os_log_impl(&dword_18EE07000, v25, OS_LOG_TYPE_ERROR, v26, v28, 0x12u);
    return v14;
  }
  v14 = v40;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v64 = 136315394;
    *(_QWORD *)&v64[4] = "WAVEAudioFile.cpp";
    *(_WORD *)&v64[12] = 1024;
    *(_DWORD *)&v64[14] = 1945;
    v25 = MEMORY[0x1E0C81028];
    v26 = "%25s:%-5d  Couldn't update the ds64 chunk with new size";
    v28 = v64;
    goto LABEL_25;
  }
  return v14;
}

uint64_t WAVEAudioFile::GetNumBytes(WAVEAudioFile *this)
{
  unsigned int v1;
  unsigned int v2;

  v1 = *((_DWORD *)this + 13);
  v2 = *((_DWORD *)this + 119);
  if (v1 >= v2)
    return *((_QWORD *)this + 1);
  else
    return (uint64_t)((double)v1 / (double)v2 * (double)*((uint64_t *)this + 1));
}

uint64_t WAVEAudioFile::GetMagicCookieDataSize(WAVEAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v12;
  __int16 v14;
  _WORD *v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  _WORD v22[5];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 8) != 1667326771)
  {
    if (!a2)
      return 2003334207;
    if (!*((_BYTE *)this + 460))
      return 1886681407;
    if (a3)
      *a3 = 0;
    *a2 = 0;
    v5 = *((_QWORD *)this + 18);
    v6 = *((_QWORD *)this + 19);
    v7 = v6 - v5;
    if (v6 != v5)
    {
      v8 = 0;
      v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      v10 = 1;
      while (*(_DWORD *)(v5 + 24 * v8) != 1718449184)
      {
        v8 = v10;
        if (v9 <= v10++)
          return 0;
      }
      v12 = *(_QWORD *)(v5 + 24 * v8 + 8);
      if (v12 <= 0xFFFFFFFE)
      {
        v4 = 0;
        *a2 = v12 - *(_DWORD *)(v5 + 24 * v8 + 4) + 28;
        return v4;
      }
    }
    return 0;
  }
  if (a3)
    *a3 = 0;
  if (!a2)
    return 0;
  *a2 = 0;
  v21 = 0;
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _WORD *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                            + 48))(*((_QWORD *)this + 13), 0, *((_QWORD *)this + 9) + 8, 10, v22, &v21);
  if ((_DWORD)v4)
    return v4;
  v14 = 0;
  v15 = v22;
  v16 = v21;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0xF6400000000;
  if (v21 >= 0xA)
  {
    if (v22[0] == 2935)
    {
LABEL_25:
      LOBYTE(v14) = 1;
      goto LABEL_26;
    }
    if (v22[0] == 30475)
    {
      v17 = 1;
      goto LABEL_25;
    }
  }
LABEL_26:
  if (AC3PacketParser::IsValid((AC3PacketParser *)&v14))
    *a2 = 11;
  if (v19)
    free(v19);
  return v4;
}

uint64_t WAVEAudioFile::GetMagicCookieData(WAVEAudioFile *this, unsigned int *a2, char *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  int v17;
  size_t v18;
  unsigned __int16 *v19;
  unsigned __int16 *v21;
  unsigned int v22;
  void *v23;
  std::bad_alloc *exception;
  std::bad_alloc *v26;
  int v27;
  _WORD *v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unsigned int v34;
  _WORD v35[5];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = 2003334207;
  if (!a2 || !a3)
    return v3;
  if (*((_DWORD *)this + 8) == 1667326771)
  {
    v34 = 0;
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _WORD *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                              + 48))(*((_QWORD *)this + 13), 0, *((_QWORD *)this + 9) + 8, 10, v35, &v34);
    if ((_DWORD)v3)
      return v3;
    LOWORD(v27) = 0;
    v28 = v35;
    v29 = v34;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0xF6400000000;
    if (v34 < 0xA)
      goto LABEL_27;
    if (v35[0] != 2935)
    {
      if (v35[0] != 30475)
      {
LABEL_27:
        if (AC3PacketParser::IsValid((AC3PacketParser *)&v27) && *a2 >= 0xB)
          AC3PacketParser::GetMagicCookie((AC3PacketParser *)&v27, a3, a2);
        v23 = v32;
        if (v32)
        {
LABEL_31:
          free(v23);
          return v3;
        }
        return v3;
      }
      v30 = 1;
    }
    LOBYTE(v27) = 1;
    goto LABEL_27;
  }
  v3 = 561211770;
  if (*((_BYTE *)this + 460))
  {
    v7 = *((_QWORD *)this + 18);
    v8 = *((_QWORD *)this + 19) - v7;
    if (v8)
    {
      v9 = 0;
      v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
      v11 = 1;
      while (*(_DWORD *)(v7 + 24 * v9) != 1718449184)
      {
        v9 = v11;
        if (v10 <= v11++)
          return 0;
      }
      v13 = *(_QWORD *)(v7 + 24 * v9 + 8);
      if (v13 <= 0xFFFFFFFE)
      {
        v14 = v7 + 24 * v9;
        v17 = *(_DWORD *)(v14 + 4);
        v16 = (unsigned int *)(v14 + 4);
        v15 = v17;
        v18 = (v13 - v17);
        if (*a2 < (int)v18 + 28)
          return v3;
        v19 = (unsigned __int16 *)malloc_type_malloc(v18, 0x7C51E058uLL);
        if ((_DWORD)v13 != v15 && v19 == 0)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v26 = std::bad_alloc::bad_alloc(exception);
        }
        v21 = v19;
        if (v19)
        {
          v27 = 0;
          v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, size_t, unsigned __int16 *, int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v7 + 24 * v9 + 16) + *v16, v18, v19, &v27);
          if (!(_DWORD)v3)
          {
            *(_QWORD *)a3 = 0x616D72660C000000;
            v22 = bswap32(*v21 | 0x6D730000);
            *((_DWORD *)a3 + 2) = v22;
            *((_DWORD *)a3 + 3) = bswap32(v18 + 8);
            *((_DWORD *)a3 + 4) = v22;
            memcpy(a3 + 20, v21, v18);
            *(_QWORD *)&a3[(v18 + 20)] = 0x8000000;
            *a2 = v18 + 28;
          }
          v23 = v21;
          goto LABEL_31;
        }
      }
    }
    return 0;
  }
  return v3;
}

void sub_18F07C2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a20)
    free(a20);
  _Unwind_Resume(exception_object);
}

uint64_t WAVEAudioFile::GetMarkerListSize(WAVEAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v12;

  if (a3)
    *a3 = 1;
  if (!a2)
    return 0;
  v4 = *((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 19);
  v6 = v5 - v4;
  if (v5 == v4)
  {
LABEL_8:
    result = 0;
    *a2 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 1;
    while (*(_DWORD *)(v4 + 24 * v7) != 1668637984)
    {
      v7 = v9;
      if (v8 <= v9++)
        goto LABEL_8;
    }
    v12 = 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, char *, uint64_t *))(**((_QWORD **)this + 13)
                                                                                           + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v4 + 24 * v7 + 16) + *(unsigned int *)(v4 + 24 * v7 + 4), 4, (char *)&v12 + 4, &v12);
    if (!(_DWORD)result)
      *a2 = 40 * HIDWORD(v12) + 8;
  }
  return result;
}

uint64_t WAVEAudioFile::GetMarkerList(WAVEAudioFile *this, unsigned int *a2, AudioFileMarkerList *a3)
{
  return (*(uint64_t (**)(WAVEAudioFile *, unsigned int *, AudioFileMarkerList *, uint64_t))(*(_QWORD *)this + 816))(this, a2, a3, 1);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t ListChunkData;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const __CFAllocator *v20;
  SInt32 *p_mMarkerID;
  unsigned int *v22;
  SInt32 v23;
  uint64_t v24;
  CFStringRef v25;
  double v26;
  char *cStr;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;

  v4 = *((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 19) - v4;
  if (v5)
  {
    v8 = 0;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    v10 = 1;
    while (*(_DWORD *)(v4 + 24 * v8) != 1668637984)
    {
      v8 = v10;
      if (v9 <= v10++)
        goto LABEL_5;
    }
    bzero(a3, *a2);
    v13 = *(_QWORD *)(v4 + 24 * v8 + 16) + *(unsigned int *)(v4 + 24 * v8 + 4);
    v35 = 0;
    ListChunkData = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *, uint64_t *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v13, 4, (char *)&v35 + 4, &v35);
    if (!(_DWORD)ListChunkData)
    {
      v14 = (*a2 - 8) / 0x28;
      if (*a2 < 8)
        v14 = 0;
      v15 = v35;
      if (SHIDWORD(v35) >= (int)v14)
        v16 = v14;
      else
        v16 = HIDWORD(v35);
      a3->mSMPTE_TimeType = 0;
      a3->mNumberMarkers = v16;
      v34 = 0;
      v33 = 0;
      ListChunkData = WAVEAudioFile::GetListChunkData((uint64_t)this, &v34, &v33, 1633973356);
      if ((_DWORD)ListChunkData)
      {
        v17 = v33;
      }
      else
      {
        v17 = v33;
        if ((int)v16 < 1)
        {
LABEL_21:
          ListChunkData = 0;
        }
        else
        {
          v18 = v13 + v15;
          v19 = v34;
          v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          p_mMarkerID = &a3->mMarkers[0].mMarkerID;
          while (1)
          {
            HIDWORD(v29) = 24;
            ListChunkData = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, char *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v18, 24, &v30, (char *)&v29 + 4);
            if ((_DWORD)ListChunkData)
              break;
            v24 = HIDWORD(v29);
            v23 = v30;
            v31 = bswap32(v31);
            cStr = 0;
            WAVEAudioFile::FindAssocDataName(v19, (uint64_t)v17, (const unsigned __int8 *)v30, &cStr, (const char **)&v29, v22);
            if (cStr)
            {
              v25 = CFStringCreateWithCString(v20, cStr, 0x500u);
              v23 = v30;
            }
            else
            {
              v25 = 0;
            }
            v18 += v24;
            v26 = (double)v32;
            *((_QWORD *)p_mMarkerID - 1) = v25;
            *((double *)p_mMarkerID - 2) = v26;
            *p_mMarkerID = v23;
            *(_QWORD *)(p_mMarkerID + 3) = 0;
            p_mMarkerID += 10;
            if (!--v16)
              goto LABEL_21;
          }
        }
      }
      if (v17)
        free(v17);
    }
  }
  else
  {
LABEL_5:
    ListChunkData = 0;
    *a2 = 0;
  }
  return ListChunkData;
}

uint64_t WAVEAudioFile::SetMarkerList(WAVEAudioFile *this, unsigned int a2, const AudioFileMarkerList *a3)
{
  WAVEAudioFile *v4;
  uint64_t ListChunkData;
  uint64_t mNumberMarkers;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  const unsigned __int8 *v13;
  double v14;
  unsigned int v15;
  const __CFString *v16;
  unsigned int *v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  char *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned __int8 *v28;
  char *v29;
  unsigned __int8 *v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  WAVEAudioFile *v35;
  const AudioFileMarkerList *v36;
  uint64_t v37;
  size_t v38;
  void *v39;
  void *v40;
  unsigned int v41;
  void *v42;
  _BYTE v43[12];
  char buffer[1024];
  uint64_t v45;

  v4 = this;
  v45 = *MEMORY[0x1E0C80C00];
  v41 = 0;
  v40 = 0;
  ListChunkData = WAVEAudioFile::GetListChunkData((uint64_t)this, &v41, &v40, 1633973356);
  if (!(_DWORD)ListChunkData)
  {
    mNumberMarkers = a3->mNumberMarkers;
    CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v39, (24 * (_DWORD)mNumberMarkers) | 4u, 0);
    *(_WORD *)v39 = mNumberMarkers;
    *((_BYTE *)v39 + 2) = BYTE2(mNumberMarkers);
    *((_BYTE *)v39 + 3) = BYTE3(mNumberMarkers);
    if ((_DWORD)mNumberMarkers)
    {
      v35 = v4;
      v36 = a3;
      v7 = 0;
      v8 = 0;
      v9 = v41;
      LODWORD(v10) = 4;
      v11 = (char *)v40;
      v37 = mNumberMarkers;
      do
      {
        v12 = (char *)a3 + 40 * v7;
        v13 = (const unsigned __int8 *)*((unsigned int *)v12 + 6);
        v14 = *((double *)v12 + 1);
        *((_BYTE *)v39 + v10) = (_BYTE)v13;
        *((_BYTE *)v39 + (v10 | 1)) = BYTE1(v13);
        *((_BYTE *)v39 + (v10 | 2)) = BYTE2(v13);
        *((_BYTE *)v39 + (v10 | 3)) = BYTE3(v13);
        *((_BYTE *)v39 + (v10 + 4)) = (int)v14;
        v15 = (int)v14 >> 8;
        *((_BYTE *)v39 + (v10 + 5)) = v15;
        *((_BYTE *)v39 + (v10 + 6)) = (int)v14 >> 16;
        *((_BYTE *)v39 + (v10 + 7)) = (int)v14 >> 24;
        *((_BYTE *)v39 + (v10 + 8)) = 100;
        *((_BYTE *)v39 + (v10 + 9)) = 97;
        *((_BYTE *)v39 + (v10 + 10)) = 116;
        *((_BYTE *)v39 + (v10 + 11)) = 97;
        *((_BYTE *)v39 + (v10 + 12)) = 0;
        *((_BYTE *)v39 + (v10 + 13)) = 0;
        *((_BYTE *)v39 + (v10 + 14)) = 0;
        *((_BYTE *)v39 + (v10 + 15)) = 0;
        *((_BYTE *)v39 + (v10 + 16)) = 0;
        *((_BYTE *)v39 + (v10 + 17)) = 0;
        *((_BYTE *)v39 + (v10 + 18)) = 0;
        *((_BYTE *)v39 + (v10 + 19)) = 0;
        *((_BYTE *)v39 + (v10 + 20)) = (int)v14;
        *((_BYTE *)v39 + (v10 + 21)) = v15;
        *((_BYTE *)v39 + (v10 + 22)) = (int)v14 >> 16;
        *((_BYTE *)v39 + (v10 + 23)) = (int)v14 >> 24;
        v16 = (const __CFString *)*((_QWORD *)v12 + 2);
        if (v16 && CFStringGetCString(v16, buffer, 1024, 0x500u))
        {
          memset(v43, 0, sizeof(v43));
          WAVEAudioFile::FindAssocDataName(v9, (uint64_t)v11, v13, &v43[4], (const char **)v43, v17);
          if (*(_QWORD *)&v43[4])
            v18 = *(_DWORD *)v43;
          else
            v18 = 0;
          v19 = strlen(buffer);
          v20 = (v19 & 0xFFFFFFFE) + 14;
          v21 = v9 - v18;
          mNumberMarkers = v37;
          v38 = v21 + v20;
          CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v42, v38, 0);
          *(_DWORD *)v42 = 1818386796;
          *((_DWORD *)v42 + 1) = (v19 & 0xFFFFFFFE) + 6;
          v22 = (char *)v42;
          *((_DWORD *)v42 + 2) = (_DWORD)v13;
          memcpy(v22 + 12, buffer, (v19 + 1));
          if (v9 >= 9)
          {
            v23 = 0;
            v24 = 8;
            while (1)
            {
              v25 = (v11[v23] << 24) | (v11[v23 + 1] << 16) | (v11[v23 + 2] << 8) | v11[v23 + 3];
              v26 = ((v11[v23 + 4] | (v11[v23 + 5] << 8) | (v11[v23 + 6] << 16) | (v11[v23 + 7] << 24))
                   + 1) & 0xFFFFFFFE;
              if (v25 != 1852798053 && v25 != 1818321516)
                break;
              v28 = (unsigned __int8 *)&v11[v24];
              if ((*v28 | (v11[v23 + 9] << 8) | (v11[v23 + 10] << 16) | (v11[v23 + 11] << 24)) != (_DWORD)v13)
              {
                v29 = (char *)v42 + v20;
                v30 = v28 - 8;
                goto LABEL_18;
              }
LABEL_19:
              v23 = v26 + v24;
              v24 += v26 + 8;
              if (v24 >= v9)
              {
                v22 = (char *)v42;
                a3 = v36;
                mNumberMarkers = v37;
                goto LABEL_21;
              }
            }
            v29 = (char *)v42 + v20;
            v30 = (unsigned __int8 *)&v11[v24 - 8];
LABEL_18:
            memcpy(v29, v30, v26 + 8);
            v20 += v26 + 8;
            goto LABEL_19;
          }
LABEL_21:
          v42 = 0;
          if (v11 == v22)
          {
            v22 = v11;
          }
          else
          {
            free(v11);
            if (v42)
              free(v42);
          }
          v8 = 1;
          v11 = v22;
          v9 = v38;
        }
        v10 = (v10 + 24);
        ++v7;
      }
      while (v7 != mNumberMarkers);
      v41 = v9;
      v40 = v11;
      v4 = v35;
    }
    else
    {
      v8 = 0;
      v10 = 4;
    }
    ListChunkData = (*(uint64_t (**)(WAVEAudioFile *, uint64_t, uint64_t, void *))(*(_QWORD *)v4 + 768))(v4, 1668637984, v10, v39);
    if ((v8 & 1) != 0)
    {
      v31 = v41;
      v32 = v40;
      *(_QWORD *)buffer = 0;
      if (!WAVEAudioFile::FindListChunk((uint64_t)v4, buffer, 1633973356)
        || (v33 = *(_QWORD *)buffer,
            **(_DWORD **)buffer = 1179405394,
            *(_DWORD *)&v43[4] = 1380731974,
            LODWORD(v42) = 4,
            !(*(unsigned int (**)(_QWORD, _QWORD, _QWORD, uint64_t, _BYTE *, void **))(**((_QWORD **)v4 + 13)
                                                                                               + 56))(*((_QWORD *)v4 + 13), 0, *(_QWORD *)(v33 + 16), 4, &v43[4], &v42)))
      {
        CADeprecated::CAAutoFree<char>::CAAutoFree(&v43[4], v31 + 4);
        **(_DWORD **)&v43[4] = 1819567201;
        memcpy((void *)(*(_QWORD *)&v43[4] + 4), v32, v31);
        (*(void (**)(WAVEAudioFile *, uint64_t, size_t, _QWORD))(*(_QWORD *)v4 + 760))(v4, 1279873876, v31 + 4, *(_QWORD *)&v43[4]);
        if (*(_QWORD *)&v43[4])
          free(*(void **)&v43[4]);
      }
    }
    if (v39)
      free(v39);
  }
  if (v40)
    free(v40);
  return ListChunkData;
}

void sub_18F07C940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18)
    free(a18);
  if (a13)
    free(a13);
  if (a14)
    free(a14);
  _Unwind_Resume(exception_object);
}

uint64_t WAVEAudioFile::GetRegionListSize(WAVEAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  return 1886681407;
}

uint64_t WAVEAudioFile::GetRegionList(WAVEAudioFile *this, unsigned int *a2, AudioFileRegionList *a3)
{
  *a2 = 0;
  return 1886681407;
}

uint64_t WAVEAudioFile::SetRegionList(WAVEAudioFile *this, unsigned int a2, const AudioFileRegionList *a3)
{
  return 1886681407;
}

uint64_t WAVEAudioFile::GetChannelLayoutSize(WAVEAudioFile *this, unsigned int *a2, unsigned int *a3, int8x8_t a4)
{
  BOOL v5;
  unsigned int v6;
  uint64_t result;

  if (a3)
    *a3 = 1;
  if (!a2)
    return 0;
  if (*((_DWORD *)this + 114))
    v5 = 1;
  else
    v5 = *((_DWORD *)this + 8) == 1667326771;
  if (v5)
  {
    v6 = AudioFormatProperty_ChannelLayoutSizeForWAVEChannelMask(*((_DWORD *)this + 114), *((_DWORD *)this + 13), a4);
    result = 0;
  }
  else
  {
    v6 = 0;
    result = 1667787583;
  }
  *a2 = v6;
  return result;
}

uint64_t WAVEAudioFile::GetChannelLayout(WAVEAudioFile *this, unsigned int *a2, AudioChannelLayout *a3, int8x8_t a4)
{
  uint64_t v4;
  unsigned int v5;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int8x8_t v12;

  v4 = 561211770;
  v5 = *a2;
  if (*a2 >= 0x20)
  {
    if (*((_DWORD *)this + 8) == 1667326771)
    {
      v4 = 0;
      *(_OWORD *)&a3->mChannelLayoutTag = 0u;
      *(_OWORD *)&a3->mChannelDescriptions[0].mChannelFlags = 0u;
      a3->mChannelLayoutTag = *((_DWORD *)this + 116);
      *a2 = 32;
    }
    else
    {
      v9 = *((_DWORD *)this + 114);
      if (v9)
      {
        if (*((_DWORD *)this + 118))
        {
          if (v5 >= 0x21)
            *a2 = 32;
          v4 = 0;
          *(_QWORD *)&a3->mChannelLayoutTag = 6619138;
          *(_QWORD *)&a3->mChannelDescriptions[0].mChannelFlags = 0;
          *(_QWORD *)&a3->mChannelDescriptions[0].mCoordinates[1] = 0;
          *(_QWORD *)&a3->mNumberChannelDescriptions = 0;
        }
        else
        {
          v10 = *((_DWORD *)this + 13);
          v11 = AudioFormatProperty_ChannelLayoutSizeForWAVEChannelMask(*((_DWORD *)this + 114), v10, a4);
          if (v5 >= v11)
          {
            if (v5 > v11)
            {
              *a2 = v11;
              v9 = *((_DWORD *)this + 114);
            }
            AudioFormatProperty_ChannelLayoutForWAVEChannelMask(v9, v10, a3, v12);
            return 0;
          }
        }
      }
      else
      {
        *a2 = 0;
        return 1667787583;
      }
    }
  }
  return v4;
}

uint64_t WAVEAudioFile::SetChannelLayout(WAVEAudioFile *this, UInt32 a2, const AudioChannelLayout *a3)
{
  uint64_t result;
  uint8x8_t v6;
  unsigned int v7;
  UInt32 ioPropertyDataSize;
  int outPropertyData;

  ioPropertyDataSize = 4;
  outPropertyData = 0;
  result = AudioFormatGetProperty(0x6E63686Du, a2, a3, &ioPropertyDataSize, &outPropertyData);
  if (!(_DWORD)result)
  {
    if (outPropertyData != *((_DWORD *)this + 13))
      return 4294967246;
    v7 = 0;
    result = AudioFormatProperty_WAVEChannelMaskForChannelLayout(a3, &v7);
    if ((_DWORD)result)
      return result;
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.i32[0] == *((_DWORD *)this + 13))
    {
      *((_DWORD *)this + 114) = v7;
      return (*(uint64_t (**)(WAVEAudioFile *, char *))(*(_QWORD *)this + 184))(this, (char *)this + 24);
    }
    else
    {
      return 4294967246;
    }
  }
  return result;
}

uint64_t WAVEAudioFile::GetInfoDictionary(WAVEAudioFile *this, CACFDictionary *a2)
{
  int ListChunkData;
  size_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  const __CFAllocator *v22;
  unsigned int v23;
  unsigned int v24;
  char *v25;
  unint64_t v26;
  size_t v27;
  const UInt8 *v28;
  unsigned int v29;
  CFStringEncoding v30;
  const __CFString *v31;
  const __CFString *v32;
  AudioFileObject *v33;
  void *v35;
  int v36;
  int v37;

  v36 = 0;
  v35 = 0;
  ListChunkData = WAVEAudioFile::GetListChunkData((uint64_t)this, &v36, &v35, 1229866575);
  LODWORD(v5) = v36;
  if (ListChunkData)
    v6 = 1;
  else
    v6 = v36 == 0;
  v7 = v6;
  if (v6)
  {
    if (*((_DWORD *)this + 21) != 1463170150)
      goto LABEL_20;
    v8 = *((_QWORD *)this + 18);
    v9 = *((_QWORD *)this + 19);
    v10 = v9 - v8;
    if (v9 == v8)
      goto LABEL_20;
    v11 = 0;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
    v13 = 1;
    while (*(_DWORD *)(v8 + 24 * v11) != -1131126894)
    {
      v11 = v13;
      if (v12 <= v13++)
        goto LABEL_20;
    }
    v16 = *(_QWORD *)(v8 + 24 * v11 + 8);
    if (v16 < 0x1D || (v17 = *(unsigned int *)(v8 + 24 * v11 + 4), v5 = v16 - v17 - 4, v5 > 0xFFFFFFFE))
    {
LABEL_20:
      LODWORD(v5) = 0;
      v19 = 0;
    }
    else
    {
      v18 = *(_QWORD *)(v8 + 24 * v11 + 16);
      CADeprecated::CAAutoFree<unsigned char>::allocBytes(&v35, v5, 1);
      v37 = 0;
      v19 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, size_t, void *, int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v17 + v18 + 4, v5, v35, &v37);
      if (v37 == (_DWORD)v5)
      {
        if (!v19)
          goto LABEL_21;
      }
      else
      {
        v19 = -1;
      }
      LODWORD(v5) = 0;
    }
LABEL_21:
    v15 = v19 == 0;
    goto LABEL_22;
  }
  v15 = 1;
LABEL_22:
  v20 = v35;
  if (v15 && (_DWORD)v5)
  {
    v21 = 0;
    v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      if (v5 >= 8)
      {
        v23 = 0;
        v24 = v5;
        while (1)
        {
          v25 = &v20[v23];
          if (bswap32(*(_DWORD *)v25) == *(_DWORD *)&WAVEAudioFile::GetInfoDictionaryFromListChunk(CACFDictionary *)::listTypes[16 * v21])
            break;
          v26 = *((unsigned int *)v25 + 1);
          v23 += v26 + 8;
          if ((unint64_t)v24 - 8 < v26)
            v23 = v5;
          if (v23 < v5 && !v20[v23])
            ++v23;
          v24 = v5 - v23;
          if (v5 - v23 <= 7)
            goto LABEL_43;
        }
        v27 = *((unsigned int *)v25 + 1);
        if ((unint64_t)(v27 + v23) + 8 <= v5)
        {
          v28 = (const UInt8 *)(v25 + 8);
          if (v7)
          {
            v29 = 4 * wcsnlen((const __int32 *)v25 + 2, v27 >> 2);
            v30 = 335544576;
          }
          else
          {
            v29 = strnlen(v25 + 8, v27);
            v30 = 1280;
          }
          v31 = CFStringCreateWithBytes(v22, v28, v29, v30, 0);
          v32 = v31;
          if (v31)
          {
            if (CFStringGetLength(v31))
              CACFDictionary::AddString(a2, *(const __CFString **)&WAVEAudioFile::GetInfoDictionaryFromListChunk(CACFDictionary *)::listTypes[16 * v21 + 8], v32);
            CFRelease(v32);
          }
        }
      }
LABEL_43:
      ++v21;
    }
    while (v21 != 6);
  }
  if (v20)
    free(v20);
  if (*((_QWORD *)this + 65))
    FillInfoDictionaryFromID3Parser(a2);
  v35 = 0;
  v33 = (AudioFileObject *)(*(uint64_t (**)(WAVEAudioFile *, void **))(*(_QWORD *)this + 544))(this, &v35);
  if (!(_DWORD)v33)
    AudioFileObject::AddDurationToInfoDictionary(v33, a2, (double *)&v35);
  return 0;
}

void sub_18F07CEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9)
    free(a9);
  _Unwind_Resume(exception_object);
}

uint64_t WAVEAudioFile::IsDataFormatSupported(WAVEAudioFile *this, const AudioStreamBasicDescription *a2)
{
  signed int mFormatID;
  uint64_t result;
  AudioFormatFlags mFormatFlags;
  unsigned int v7;
  _BOOL4 v8;

  mFormatID = a2->mFormatID;
  result = 1;
  if (mFormatID <= 1667326770)
  {
    if ((mFormatID - 778924081) < 3)
      return result;
    if (mFormatID != 1096107074)
    {
      if (mFormatID == 1634492791)
        return result;
      return 0;
    }
    if (IsACELPnetSupported(void)::sCheckForACELPnetOnce[0] != -1)
      dispatch_once(IsACELPnetSupported(void)::sCheckForACELPnetOnce, &__block_literal_global_9814);
    return IsACELPnetSupported(void)::isACELPnetSupported;
  }
  else if (mFormatID <= 1836253185)
  {
    if (mFormatID == 1667326771)
      return result;
    if (mFormatID != 1819304813)
      return 0;
    mFormatFlags = a2->mFormatFlags;
    v7 = (0x101200u >> mFormatFlags) & 1;
    if (mFormatFlags >= 0x15)
      v7 = 0;
    v8 = (mFormatFlags & 0xFFFFFFED) == 8;
    if (a2->mBitsPerChannel == 8)
      return v8;
    else
      return v7;
  }
  else if (((mFormatID - 1836253186) > 0x2F
          || ((1 << (mFormatID - 2)) & 0x800000008001) == 0)
         && mFormatID != 1970037111)
  {
    return 0;
  }
  return result;
}

uint64_t WAVEAudioFile::FileCode(WAVEAudioFile *this)
{
  return *((unsigned int *)this + 42);
}

uint64_t WAVEAudioFile::WriteChunkHeader(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  __int128 v12;
  uint64_t v13;

  v4 = 1869627199;
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 24)
  {
    if (*(_DWORD *)(a1 + 84) == 1463170150)
    {
      if (*(_DWORD *)a2 == 1919510118)
      {
        v7 = 0;
      }
      else
      {
        v7 = 0;
        v9 = w64GUIDMap;
        while (1)
        {
          v10 = *v9;
          v9 += 5;
          if (v10 == *(_DWORD *)a2)
            break;
          if (++v7 == 29)
            return v4;
        }
      }
      v12 = *(_OWORD *)&w64GUIDMap[5 * v7 + 1];
      v8 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 8);
      v11 = 0;
      v4 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, __int128 *, int *))(**(_QWORD **)(a1 + 104)
                                                                                          + 56))(*(_QWORD *)(a1 + 104), 0, v8, 24, &v12, &v11);
      *a3 = v11;
    }
  }
  else if (v5 == 8)
  {
    return ChunkyAudioFile::WriteChunkHeader(a1, a2, a3);
  }
  return v4;
}

void sub_18F07D3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a14)
    free(a14);
  _Unwind_Resume(exception_object);
}

uint64_t WAVEAudioFile::GetListChunkData(uint64_t a1, _DWORD *a2, void **a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;

  v12 = 0;
  if (!WAVEAudioFile::FindListChunk(a1, &v12, a4))
  {
    result = 0;
    *a2 = 0;
    return result;
  }
  v7 = *(unsigned int *)(v12 + 4);
  v8 = *(_QWORD *)(v12 + 8) - v7 - 4;
  if (v8 > 0xFFFFFFFE)
  {
    *a2 = 0;
    return 0xFFFFFFFFLL;
  }
  v9 = v7 + *(_QWORD *)(v12 + 16) + 4;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes(a3, *(_QWORD *)(v12 + 8) - v7 - 4, 1);
  v11 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unint64_t, void *, int *))(**(_QWORD **)(a1 + 104)
                                                                                               + 48))(*(_QWORD *)(a1 + 104), 0, v9, v8, *a3, &v11);
  if (v11 != (_DWORD)v8)
    return 0xFFFFFFFFLL;
  if (!(_DWORD)result)
    *a2 = v8;
  return result;
}

uint64_t WAVEAudioFile::FindAssocDataName(uint64_t this, uint64_t a2, const unsigned __int8 *a3, _QWORD *a4, const char **a5, unsigned int *a6)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;

  if (this < 0xD)
  {
LABEL_10:
    *a4 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 12;
    while (1)
    {
      v8 = (*(unsigned __int8 *)(a2 + v6) << 24) | (*(unsigned __int8 *)(a2 + v6 + 1) << 16) | (*(unsigned __int8 *)(a2 + v6 + 2) << 8) | *(unsigned __int8 *)(a2 + v6 + 3);
      v9 = ((*(unsigned __int8 *)(a2 + v6 + 4) | (*(unsigned __int8 *)(a2 + v6 + 5) << 8) | (*(unsigned __int8 *)(a2 + v6 + 6) << 16) | (*(unsigned __int8 *)(a2 + v6 + 7) << 24))
          + 1) & 0xFFFFFFFE;
      v10 = v6 + 8;
      v11 = v8 == 1852798053 || v8 == 1818321516;
      if (v11
        && (*(unsigned __int8 *)(a2 + v10) | (*(unsigned __int8 *)(a2 + v6 + 9) << 8) | (*(unsigned __int8 *)(a2 + v6 + 10) << 16) | (*(unsigned __int8 *)(a2 + v6 + 11) << 24)) == (_DWORD)a3)
      {
        break;
      }
      v6 = v9 + v10;
      v7 = v9 + v10 + 12;
      if (v7 >= this)
        goto LABEL_10;
    }
    *a4 = a2 + v7;
    *(_DWORD *)a5 = v9 + 8;
  }
  return this;
}

BOOL WAVEAudioFile::FindListChunk(uint64_t a1, _QWORD *a2, int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  int v16;
  _BOOL8 result;
  uint64_t v18;

  v6 = 0;
  while (2)
  {
    v7 = *(_QWORD *)(a1 + 144);
    v8 = *(_QWORD *)(a1 + 152);
    v9 = v8 - v7;
    if (v8 == v7)
    {
LABEL_12:
      result = 0;
      *a2 = 0;
      return result;
    }
    v10 = 0;
    v11 = 0;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    v13 = 1;
    while (1)
    {
      v14 = (_DWORD *)(v7 + 24 * v10);
      if (*v14 == 1279873876)
        break;
LABEL_7:
      v10 = v13;
      if (v12 <= v13++)
        goto LABEL_12;
    }
    if (v11 != v6)
    {
      ++v11;
      goto LABEL_7;
    }
    *a2 = v14;
    v18 = 0;
    v16 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, char *, uint64_t *))(**(_QWORD **)(a1 + 104) + 48))(*(_QWORD *)(a1 + 104), 0, *(_QWORD *)(v7 + 24 * v10 + 16) + *(unsigned int *)(v7 + 24 * v10 + 4), 4, (char *)&v18 + 4, &v18);
    result = v16 == 0;
    if (!v16 && bswap32(HIDWORD(v18)) != a3)
    {
      ++v6;
      continue;
    }
    return result;
  }
}

void ___ZL19IsACELPnetSupportedv_block_invoke()
{
  int *v0;
  unint64_t v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  int *v5;
  int v6;
  UInt32 outPropertyDataSize;

  outPropertyDataSize = 0;
  if (!AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize))
  {
    if (outPropertyDataSize >= 4)
    {
      v1 = (unint64_t)outPropertyDataSize >> 2;
      v2 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v1);
      v0 = (int *)v2;
      v3 = 0;
      do
      {
        *(_DWORD *)&v2[v3] = 0;
        v3 += 4;
      }
      while (4 * v1 != v3);
    }
    else
    {
      v0 = 0;
    }
    if (AudioFormatGetProperty(0x61636966u, 0, 0, &outPropertyDataSize, v0) || outPropertyDataSize < 4)
    {
      if (!v0)
        return;
    }
    else
    {
      v4 = (unint64_t)outPropertyDataSize >> 2;
      v5 = v0;
      while (1)
      {
        v6 = *v5++;
        if (v6 == 1096107074)
          break;
        if (!--v4)
          goto LABEL_9;
      }
      IsACELPnetSupported(void)::isACELPnetSupported = 1;
    }
LABEL_9:
    operator delete(v0);
  }
}

void sub_18F07D798(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormat_GetFormatTagFromFormatID(int a1, char a2)
{
  if (a1 <= 1836253185)
  {
    switch(a1)
    {
      case 1096107074:
        if (IsACELPnetSupported(void)::sCheckForACELPnetOnce[0] != -1)
          dispatch_once(IsACELPnetSupported(void)::sCheckForACELPnetOnce, &__block_literal_global_9814);
        if ((IsACELPnetSupported(void)::isACELPnetSupported & 1) != 0)
          return 304;
        return 0;
      case 1634492791:
        return 6;
      case 1819304813:
        if ((a2 & 1) != 0)
          return 3;
        else
          return 1;
      default:
        return 0;
    }
  }
  else
  {
    if (a1 <= 1836253232)
    {
      if (a1 == 1836253186)
        return 2;
      if (a1 == 1836253201)
        return 17;
      return 0;
    }
    if (a1 != 1836253233)
    {
      if (a1 == 1970037111)
        return 7;
      return 0;
    }
    return 49;
  }
}

uint64_t IsSupportedWAVEFormat(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= 1819304812)
  {
    if (a1 != 1096107074)
    {
      v3 = 1634492791;
LABEL_7:
      if (a1 != v3)
        return 0;
      return result;
    }
    if (IsACELPnetSupported(void)::sCheckForACELPnetOnce[0] != -1)
      dispatch_once(IsACELPnetSupported(void)::sCheckForACELPnetOnce, &__block_literal_global_9814);
    return IsACELPnetSupported(void)::isACELPnetSupported;
  }
  else if (a1 != 1819304813 && a1 != 1836253233)
  {
    v3 = 1970037111;
    goto LABEL_7;
  }
  return result;
}

uint64_t WAVEAudioFile::InitializeWAVEChunks(WAVEAudioFile *this)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  double v8;
  int v9;
  int v10;
  unsigned int v11;
  int FormatTagFromFormatID;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[40];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[2];
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 21);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v48 = 0;
  memset(v47, 0, sizeof(v47));
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v3 = (*(uint64_t (**)(WAVEAudioFile *))(*(_QWORD *)this + 800))(this);
  v4 = *((_DWORD *)this + 10);
  v5 = *((_DWORD *)this + 11);
  if (v2 == 1463170150)
  {
    *((_QWORD *)this + 22) = 0x1800000028;
    *((_DWORD *)this + 46) = 24;
  }
  v6 = *((_DWORD *)this + 8);
  v7 = *((_DWORD *)this + 9);
  v8 = *((double *)this + 3);
  v9 = *((_DWORD *)this + 13);
  v10 = *((_DWORD *)this + 14);
  if (v3)
  {
    *(_QWORD *)&v47[0] = 0x1C4A554E4BLL;
    v11 = 1247104587;
  }
  else
  {
    v11 = 0;
  }
  memset(v43, 0, sizeof(v43));
  v42 = 0x10666D7420;
  *(_WORD *)&v43[2] = v9;
  *(_DWORD *)&v43[4] = v8;
  *(_WORD *)&v43[14] = v10;
  *(_WORD *)&v43[12] = v4;
  if (v5)
    *(_DWORD *)&v43[8] = v4 * v8 / v5;
  v35 = 0;
  FormatTagFromFormatID = AudioFormat_GetFormatTagFromFormatID(v6, v7);
  if (FormatTagFromFormatID)
  {
    v13 = *((_DWORD *)this + 114);
    if (v13)
    {
      *(_WORD *)v43 = -2;
      *(_DWORD *)&v43[20] = v13;
      *(_OWORD *)&v43[24] = waveFormatExTagUUID;
      *(_WORD *)&v43[24] = FormatTagFromFormatID;
      *(_WORD *)&v43[18] = v10;
      *(_WORD *)&v43[16] = 22;
      v14 = 40;
      HIDWORD(v42) = 40;
    }
    else
    {
      *(_WORD *)v43 = FormatTagFromFormatID;
      if (FormatTagFromFormatID != 1)
        *(_WORD *)&v43[18] = 0;
      v14 = 16;
    }
    v19 = *((unsigned int *)this + 44);
    v18 = *((unsigned int *)this + 45);
    LODWORD(v44) = 1718449184;
    HIDWORD(v44) = v18;
    if (v3)
      v19 += 36;
    v45 = (v14 + v18);
    v46 = v19;
    LODWORD(v39) = 1684108385;
    HIDWORD(v39) = v18;
    v20 = v19 + v45;
    v40 = v18;
    v41 = v19 + v45;
    if (*((_BYTE *)this + 138))
    {
      v41 = (4096 - *((_DWORD *)this + 46));
      LODWORD(v36) = 1179405394;
      HIDWORD(v36) = v18;
      v21 = v41 - v20;
      v37 = v41 - v20;
      v38 = v19 + (v14 + v18);
      v20 = v41;
    }
    else
    {
      v21 = 0;
    }
    LODWORD(v49) = 1380533830;
    HIDWORD(v49) = v18;
    v50 = v20 + v18;
    v51 = 0;
    v22 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t *, char *))(*(_QWORD *)this + 776))(this, &v49, (char *)&v35 + 4);
    if ((_DWORD)v22)
    {
      v15 = v22;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v53 = "WAVEAudioFile.cpp";
        v54 = 1024;
        v55 = 1387;
        v16 = MEMORY[0x1E0C81028];
        v17 = "%25s:%-5d  WriteChunkHeader for RIFF chunk Failed";
        goto LABEL_41;
      }
    }
    else
    {
      if (*((_DWORD *)this + 21) == 1463170150)
      {
        v23 = 16;
        v24 = (uint64_t *)&unk_18F10DCB4;
      }
      else
      {
        LODWORD(v35) = 1163280727;
        v23 = 4;
        v24 = &v35;
      }
      v25 = HIDWORD(v35);
      v26 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t *, char *))(**((_QWORD **)this + 13)
                                                                                          + 56))(*((_QWORD *)this + 13), 0, *((unsigned int *)this + 45), v23, v24, (char *)&v35 + 4);
      if (!(_DWORD)v26)
      {
        v27 = HIDWORD(v35) + v25;
        if (v3)
        {
          LODWORD(v47[0]) = bswap32(v11);
          v28 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _OWORD *, char *))(**((_QWORD **)this + 13)
                                                                                              + 56))(*((_QWORD *)this + 13), 0, v27, 36, v47, (char *)&v35 + 4);
          if ((_DWORD)v28)
          {
            v15 = v28;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v53 = "WAVEAudioFile.cpp";
              v54 = 1024;
              v55 = 1410;
              v16 = MEMORY[0x1E0C81028];
              v17 = "%25s:%-5d  FSWrite Failed";
              goto LABEL_41;
            }
            return v15;
          }
          v27 += HIDWORD(v35);
        }
        v29 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t *, char *))(*(_QWORD *)this + 776))(this, &v44, (char *)&v35 + 4);
        if ((_DWORD)v29)
        {
          v15 = v29;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v53 = "WAVEAudioFile.cpp";
            v54 = 1024;
            v55 = 1415;
            v16 = MEMORY[0x1E0C81028];
            v17 = "%25s:%-5d  WriteChunkHeader for fmt chunk Failed";
            goto LABEL_41;
          }
        }
        else
        {
          v30 = v27 + HIDWORD(v35);
          LODWORD(v42) = 544501094;
          v31 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _BYTE *, char *))(**((_QWORD **)this + 13)
                                                                                             + 56))(*((_QWORD *)this + 13), 0, v30, v14, v43, (char *)&v35 + 4);
          if ((_DWORD)v31)
          {
            v15 = v31;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v53 = "WAVEAudioFile.cpp";
              v54 = 1024;
              v55 = 1424;
              v16 = MEMORY[0x1E0C81028];
              v17 = "%25s:%-5d  FSWrite Failed";
              goto LABEL_41;
            }
          }
          else
          {
            if (v21)
            {
              v33 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t *, char *))(*(_QWORD *)this + 776))(this, &v36, (char *)&v35 + 4);
              if ((_DWORD)v33)
              {
                v15 = v33;
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  return v15;
                *(_DWORD *)buf = 136315394;
                v53 = "WAVEAudioFile.cpp";
                v54 = 1024;
                v55 = 1429;
                v16 = MEMORY[0x1E0C81028];
                v17 = "%25s:%-5d  WriteChunkHeader for filler chunk Failed";
                goto LABEL_41;
              }
              v34 = v37 + v38;
              (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), v37 + v38);
            }
            else
            {
              v34 = v30 + HIDWORD(v35);
            }
            v15 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t *, char *))(*(_QWORD *)this + 776))(this, &v39, (char *)&v35 + 4);
            if (!(_DWORD)v15)
            {
              *((_QWORD *)this + 9) = v34 + HIDWORD(v35);
              *((_DWORD *)this + 20) = 1;
              return v15;
            }
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v53 = "WAVEAudioFile.cpp";
              v54 = 1024;
              v55 = 1437;
              v16 = MEMORY[0x1E0C81028];
              v17 = "%25s:%-5d  WriteChunkHeader for data chunk Failed";
              goto LABEL_41;
            }
          }
        }
        return v15;
      }
      v15 = v26;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v53 = "WAVEAudioFile.cpp";
        v54 = 1024;
        v55 = 1403;
        v16 = MEMORY[0x1E0C81028];
        v17 = "%25s:%-5d  WriteBytes for RIFF identifier failed";
        goto LABEL_41;
      }
    }
  }
  else
  {
    v15 = 1718449215;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v53 = "WAVEAudioFile.cpp";
      v54 = 1024;
      v55 = 1327;
      v16 = MEMORY[0x1E0C81028];
      v17 = "%25s:%-5d  Unsupported data format file";
LABEL_41:
      _os_log_impl(&dword_18EE07000, v16, OS_LOG_TYPE_ERROR, v17, buf, 0x12u);
    }
  }
  return v15;
}

uint64_t WAVEAudioFile::ParseAudioFile(WAVEAudioFile *this)
{
  NSObject *v2;
  const char *v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned int v18;
  NSObject *v19;
  const char *v20;
  size_t v21;
  unsigned int v22;
  uint64_t v24;
  size_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __int128 v69;
  char *v70;
  char *v71;
  unint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  _BOOL4 v82;
  int v83;
  int v84;
  BOOL v85;
  void *v86;
  uint64_t v87;
  const AudioStreamBasicDescription *v88;
  uint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  int v104;
  size_t v105;
  uint64_t v106;
  NSObject *v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  _OWORD v113[3];
  unsigned int v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  size_t size;
  _BYTE v122[12];
  __int16 v123;
  int v124;
  _BYTE buf[72];
  void *v126;
  int v127;
  int v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v117 = 0uLL;
  v118 = 0;
  v115 = 0uLL;
  v116 = 0;
  v112 = 0;
  v110 = 0u;
  v111 = 0u;
  *((_QWORD *)this + 9) = 0;
  (*(void (**)(WAVEAudioFile *, _QWORD))(*(_QWORD *)this + 232))(this, 0);
  memset(v113, 0, sizeof(v113));
  v119 = 0x7FFFFFFFFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v119))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_5:
      v4 = 0;
      goto LABEL_6;
    }
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1510;
    v2 = MEMORY[0x1E0C81028];
    v3 = "%25s:%-5d  GetSize Failed";
LABEL_4:
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_ERROR, v3, buf, 0x12u);
    goto LABEL_5;
  }
  v120 = 0;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, size_t *, int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, 0, 8, &size, &v120);
  if (v8)
  {
    if (v8 == -39)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_5;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1514;
      v2 = MEMORY[0x1E0C81028];
      v3 = "%25s:%-5d  ";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_5;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1515;
      v2 = MEMORY[0x1E0C81028];
      v3 = "%25s:%-5d  ReadBytes Failed";
    }
    goto LABEL_4;
  }
  if (size == 84)
  {
    if (BYTE1(size) != 65 || BYTE2(size) != 71)
      goto LABEL_5;
    v4 = 128;
  }
  else
  {
    if (size != 73 || BYTE1(size) != 68 || BYTE2(size) != 51)
      goto LABEL_5;
    v120 = 0;
    if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, uint64_t, _BYTE *, int *))(**((_QWORD **)this + 13)
                                                                                         + 48))(*((_QWORD *)this + 13), 0, 0, 10, v122, &v120))
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_5;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1525;
      v2 = MEMORY[0x1E0C81028];
      v3 = "%25s:%-5d  ReadBytes Failed";
      goto LABEL_4;
    }
    v4 = ID3Size(0xAu, v122, (int *)buf);
  }
LABEL_6:
  v5 = *((_QWORD *)this + 13);
  size = 0x7FFFFFFFFFFFFFFFLL;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v122 = 136315394;
      *(_QWORD *)&v122[4] = "WAVEAudioFile.cpp";
      v123 = 1024;
      v124 = 3320;
      v6 = MEMORY[0x1E0C81028];
      v7 = "%25s:%-5d  No data source";
      goto LABEL_16;
    }
    return 1685348671;
  }
  if ((*(unsigned int (**)(uint64_t, size_t *))(*(_QWORD *)v5 + 24))(v5, &size))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v122 = 136315394;
      *(_QWORD *)&v122[4] = "WAVEAudioFile.cpp";
      v123 = 1024;
      v124 = 3323;
      v6 = MEMORY[0x1E0C81028];
      v7 = "%25s:%-5d  GetSize Failed";
LABEL_16:
      _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_ERROR, v7, v122, 0x12u);
      return 1685348671;
    }
    return 1685348671;
  }
  v11 = v4;
  LODWORD(v119) = 48;
  v12 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, 0, v4, 48, buf, &v119);
  if (v12 != -39 && v12 != 0)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 1685348671;
    *(_DWORD *)v122 = 136315394;
    *(_QWORD *)&v122[4] = "WAVEAudioFile.cpp";
    v123 = 1024;
    v124 = 3327;
    v6 = MEMORY[0x1E0C81028];
    v7 = "%25s:%-5d  ReadBytes Failed";
    goto LABEL_16;
  }
  v14 = bswap32(*(unsigned int *)buf);
  if (v14 <= 1380533829)
  {
    if (v14 == 1113011764 || v14 == 1380333108)
    {
      v15 = operator new();
      v16 = v15;
      v17 = size;
      v18 = v119;
      *(_QWORD *)(v15 + 16) = size;
      *(_QWORD *)(v15 + 24) = v11;
      *(_QWORD *)(v15 + 32) = 0;
      *(_BYTE *)(v15 + 40) = 0;
      *(_QWORD *)v15 = &off_1E2905D38;
      *(_QWORD *)(v15 + 8) = v17;
      *(_DWORD *)(v15 + 44) = 1380333108;
      *(_QWORD *)(v15 + 56) = 0;
      *(_QWORD *)(v15 + 64) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_BYTE *)(v15 + 72) = 0;
      if (v18 <= 0x2F)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v122 = 136315394;
          *(_QWORD *)&v122[4] = "WAVEAudioFile.cpp";
          v123 = 1024;
          v124 = 3433;
          v19 = MEMORY[0x1E0C81028];
          v20 = "%25s:%-5d  Too small for RF64/WAVE/ds64";
LABEL_85:
          _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, v20, v122, 0x12u);
          goto LABEL_95;
        }
        goto LABEL_95;
      }
      v27 = *(_DWORD *)&buf[8];
      v28 = bswap32(*(unsigned int *)buf);
      *(_DWORD *)buf = v28;
      *(_DWORD *)&buf[8] = bswap32(*(unsigned int *)&buf[8]);
      if (v27 != 1163280727)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v122 = 136315394;
          *(_QWORD *)&v122[4] = "WAVEAudioFile.cpp";
          v123 = 1024;
          v124 = 3435;
          v19 = MEMORY[0x1E0C81028];
          v20 = "%25s:%-5d  Not an RF64/WAVE file";
          goto LABEL_85;
        }
        goto LABEL_95;
      }
      *(_DWORD *)(v15 + 44) = v28;
      v29 = *(_DWORD *)&buf[12];
      *(_DWORD *)&buf[12] = bswap32(*(unsigned int *)&buf[12]);
      if (v29 != 875983716)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v122 = 136315394;
          *(_QWORD *)&v122[4] = "WAVEAudioFile.cpp";
          v123 = 1024;
          v124 = 3441;
          v19 = MEMORY[0x1E0C81028];
          v20 = "%25s:%-5d  Mandatory ds64 chunk missing";
          goto LABEL_85;
        }
        goto LABEL_95;
      }
      if (*(_DWORD *)&buf[16] <= 0x1Bu)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v122 = 136315394;
          *(_QWORD *)&v122[4] = "WAVEAudioFile.cpp";
          v123 = 1024;
          v124 = 3442;
          v19 = MEMORY[0x1E0C81028];
          v20 = "%25s:%-5d  Mandatory ds64 chunk too small";
          goto LABEL_85;
        }
        goto LABEL_95;
      }
      v35 = *(unsigned int *)&buf[4];
      if (*(_DWORD *)&buf[4] == -1)
        v35 = *(_QWORD *)&buf[20];
      v36 = __CFADD__(v35, 12);
      v37 = v35 + 12;
      if (v36)
        v37 = -1;
      v32 = v17 - v11;
      if (v32 >= v37)
        v32 = v37;
      goto LABEL_93;
    }
LABEL_49:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 1685348671;
    *(_DWORD *)v122 = 136315394;
    *(_QWORD *)&v122[4] = "WAVEAudioFile.cpp";
    v123 = 1024;
    v124 = 3342;
    v6 = MEMORY[0x1E0C81028];
    v7 = "%25s:%-5d  File identifier not recognized";
    goto LABEL_16;
  }
  if (v14 == 1919510118)
  {
    v24 = operator new();
    v16 = v24;
    v25 = size;
    v26 = v119;
    *(_QWORD *)(v24 + 16) = size;
    *(_QWORD *)(v24 + 24) = v11;
    *(_QWORD *)(v24 + 32) = 0;
    *(_BYTE *)(v24 + 40) = 0;
    *(_QWORD *)v24 = &off_1E29077E0;
    *(_QWORD *)(v24 + 8) = v25;
    if (v26 <= 0x27)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v122 = 136315394;
        *(_QWORD *)&v122[4] = "WAVEAudioFile.cpp";
        v123 = 1024;
        v124 = 3589;
        v19 = MEMORY[0x1E0C81028];
        v20 = "%25s:%-5d  Too small for riff/wave";
        goto LABEL_85;
      }
      goto LABEL_95;
    }
    if (*(_QWORD *)buf != 0x11CF912E66666972 || *(_QWORD *)&buf[8] != 0xC104DB28D6A5)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v122 = 136315394;
        *(_QWORD *)&v122[4] = "WAVEAudioFile.cpp";
        v123 = 1024;
        v124 = 3591;
        v19 = MEMORY[0x1E0C81028];
        v20 = "%25s:%-5d  Not a riff file";
        goto LABEL_85;
      }
      goto LABEL_95;
    }
    if (*(_QWORD *)&buf[24] != 0x11D3ACF365766177 || *(_QWORD *)&buf[32] != 0x8ADB8E4FC000D18CLL)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v122 = 136315394;
        *(_QWORD *)&v122[4] = "WAVEAudioFile.cpp";
        v123 = 1024;
        v124 = 3593;
        v19 = MEMORY[0x1E0C81028];
        v20 = "%25s:%-5d  Not a riff/wave file";
        goto LABEL_85;
      }
      goto LABEL_95;
    }
    v105 = v25 - v11;
    if (v105 >= *(_QWORD *)&buf[16])
      v105 = *(_QWORD *)&buf[16];
    *(_QWORD *)(v24 + 16) = v105;
    v38 = 40;
LABEL_94:
    *(_QWORD *)(v16 + 32) = v38;
    *(_BYTE *)(v16 + 40) = 1;
    goto LABEL_95;
  }
  if (v14 != 1380533830)
    goto LABEL_49;
  v16 = operator new();
  v21 = size;
  v22 = v119;
  *(_QWORD *)(v16 + 16) = size;
  *(_QWORD *)(v16 + 24) = v11;
  *(_QWORD *)(v16 + 32) = 0;
  *(_BYTE *)(v16 + 40) = 0;
  *(_QWORD *)v16 = &off_1E2908730;
  *(_QWORD *)(v16 + 8) = v21;
  if (v22 > 0xB)
  {
    v30 = *(_DWORD *)&buf[8];
    *(_DWORD *)buf = bswap32(*(unsigned int *)buf);
    *(_DWORD *)&buf[8] = bswap32(*(unsigned int *)&buf[8]);
    if (v30 != 1163280727)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v122 = 136315394;
        *(_QWORD *)&v122[4] = "WAVEAudioFile.cpp";
        v123 = 1024;
        v124 = 3363;
        v19 = MEMORY[0x1E0C81028];
        v20 = "%25s:%-5d  Not a RIFF/WAVE file";
        goto LABEL_85;
      }
      goto LABEL_95;
    }
    LODWORD(v31) = *(_DWORD *)&buf[4] + 12;
    if (*(_DWORD *)&buf[4] >= 0xFFFFFFF4)
      v31 = 0xFFFFFFFFLL;
    else
      v31 = v31;
    v32 = v21 - v11;
    if (v32 >= v31)
      v32 = v31;
    else
      v32 = v32;
LABEL_93:
    *(_QWORD *)(v16 + 16) = v32;
    v38 = 12;
    goto LABEL_94;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v122 = 136315394;
    *(_QWORD *)&v122[4] = "WAVEAudioFile.cpp";
    v123 = 1024;
    v124 = 3361;
    v19 = MEMORY[0x1E0C81028];
    v20 = "%25s:%-5d  Too small for RIFF/WAVE";
    goto LABEL_85;
  }
LABEL_95:
  if (!*(_BYTE *)(v16 + 40))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    return 1685348671;
  }
  v114 = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v16 + 16))(v16, &v117);
  v39 = v117;
  *((_DWORD *)this + 42) = v117;
  if (v39 == 1919510118)
  {
    *((_QWORD *)this + 22) = 0x1800000028;
    *((_BYTE *)this + 188) = 8;
    *((_DWORD *)this + 46) = 24;
  }
  v9 = 0xAAAAAAAAAAAAAAALL;
  v41 = *((_QWORD *)this + 19);
  v40 = *((_QWORD *)this + 20);
  if (v41 >= v40)
  {
    v44 = *((_QWORD *)this + 18);
    v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - v44) >> 3);
    v46 = v45 + 1;
    if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_276:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v44) >> 3);
    if (2 * v47 > v46)
      v46 = 2 * v47;
    if (v47 >= 0x555555555555555)
      v48 = 0xAAAAAAAAAAAAAAALL;
    else
      v48 = v46;
    if (v48)
      v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v48);
    else
      v49 = 0;
    v50 = v48 + 24 * v45;
    v51 = v48 + 24 * v49;
    v52 = v117;
    *(_QWORD *)(v50 + 16) = v118;
    *(_OWORD *)v50 = v52;
    v43 = v50 + 24;
    v54 = (char *)*((_QWORD *)this + 18);
    v53 = (char *)*((_QWORD *)this + 19);
    if (v53 != v54)
    {
      do
      {
        v55 = *(_OWORD *)(v53 - 24);
        *(_QWORD *)(v50 - 8) = *((_QWORD *)v53 - 1);
        *(_OWORD *)(v50 - 24) = v55;
        v50 -= 24;
        v53 -= 24;
      }
      while (v53 != v54);
      v53 = (char *)*((_QWORD *)this + 18);
    }
    *((_QWORD *)this + 18) = v50;
    *((_QWORD *)this + 19) = v43;
    *((_QWORD *)this + 20) = v51;
    if (v53)
      operator delete(v53);
  }
  else
  {
    v42 = v117;
    *(_QWORD *)(v41 + 16) = v118;
    *(_OWORD *)v41 = v42;
    v43 = v41 + 24;
  }
  *((_QWORD *)this + 19) = v43;
  while (1)
  {
    v56 = (*(uint64_t (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v16 + 24))(v16, *((_QWORD *)this + 13), &v115);
    if ((_DWORD)v56 == -39)
      goto LABEL_210;
    v57 = *((_QWORD *)&v115 + 1);
    if ((unint64_t)(*((_QWORD *)&v117 + 1) - v116) < *((_QWORD *)&v115 + 1))
      break;
LABEL_122:
    if (!v57)
      goto LABEL_210;
    v59 = *((_QWORD *)this + 19);
    v58 = *((_QWORD *)this + 20);
    if (v59 >= v58)
    {
      v62 = *((_QWORD *)this + 18);
      v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59 - v62) >> 3);
      v64 = v63 + 1;
      if (v63 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_276;
      v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - v62) >> 3);
      if (2 * v65 > v64)
        v64 = 2 * v65;
      if (v65 >= 0x555555555555555)
        v66 = 0xAAAAAAAAAAAAAAALL;
      else
        v66 = v64;
      if (v66)
        v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v66);
      else
        v67 = 0;
      v68 = v66 + 24 * v63;
      v69 = v115;
      *(_QWORD *)(v68 + 16) = v116;
      *(_OWORD *)v68 = v69;
      v71 = (char *)*((_QWORD *)this + 18);
      v70 = (char *)*((_QWORD *)this + 19);
      v72 = v68;
      if (v70 != v71)
      {
        do
        {
          v73 = *(_OWORD *)(v70 - 24);
          *(_QWORD *)(v72 - 8) = *((_QWORD *)v70 - 1);
          *(_OWORD *)(v72 - 24) = v73;
          v72 -= 24;
          v70 -= 24;
        }
        while (v70 != v71);
        v70 = (char *)*((_QWORD *)this + 18);
      }
      v61 = v68 + 24;
      *((_QWORD *)this + 18) = v72;
      *((_QWORD *)this + 19) = v68 + 24;
      *((_QWORD *)this + 20) = v66 + 24 * v67;
      if (v70)
        operator delete(v70);
    }
    else
    {
      v60 = v115;
      *(_QWORD *)(v59 + 16) = v116;
      *(_OWORD *)v59 = v60;
      v61 = v59 + 24;
    }
    *((_QWORD *)this + 19) = v61;
    if ((int)v115 > 1718449183)
    {
      if ((_DWORD)v115 == 1768174368)
      {
LABEL_172:
        if (!*((_QWORD *)this + 65))
        {
          *((_QWORD *)this + 66) = v116 + DWORD1(v115);
          if (ID3ParserOpen((uint64_t)this, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, unsigned __int8 **, unsigned int *))WAVEID3CallbackProc, (_QWORD *)this + 65))*((_QWORD *)this + 66) = 0;
        }
        goto LABEL_206;
      }
      if ((_DWORD)v115 == 1718449184)
      {
        LODWORD(size) = 0;
        *(_QWORD *)v122 = 0;
        v76 = DWORD2(v115) - DWORD1(v115);
        LODWORD(v113[0]) = 1718449184;
        DWORD1(v113[0]) = DWORD2(v115) - DWORD1(v115);
        if ((DWORD2(v115) - DWORD1(v115)) <= 0xF)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1623;
            _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  fmt chunk too small", buf, 0x12u);
          }
          v104 = 6;
          v56 = 1718449215;
          goto LABEL_268;
        }
        v77 = v116 + v11 + DWORD1(v115);
        v56 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                  + 48))(*((_QWORD *)this + 13), 0, v77, 16, (char *)v113 + 8, &v114);
        if ((_DWORD)v56)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1627;
            _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes Failed", buf, 0x12u);
          }
          v104 = 6;
          goto LABEL_268;
        }
        v78 = (v76 + 8);
        v9 = v77 + v114;
        if (v78 >= 0x1A && WORD4(v113[0]) != 1)
        {
          v56 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v77 + v114, 2, (char *)&v113[1] + 8, &v114);
          if ((_DWORD)v56)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1635;
              v107 = MEMORY[0x1E0C81028];
              goto LABEL_265;
            }
            goto LABEL_266;
          }
          v9 += v114;
          if (v78 >= 0x1C && WORD4(v113[1]) >= 2u)
          {
            v56 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v9, 2, (char *)&v113[1] + 10, &v114);
            if ((_DWORD)v56)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1643;
                v107 = MEMORY[0x1E0C81028];
LABEL_265:
                _os_log_impl(&dword_18EE07000, v107, OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes Failed", buf, 0x12u);
              }
LABEL_266:
              v104 = 6;
              goto LABEL_268;
            }
            v9 += v114;
          }
        }
        if (v78 >= 0x20 && WORD4(v113[0]) == 65534 && WORD4(v113[1]) >= 6u)
        {
          v79 = WORD4(v113[1]) - 2;
          if (v79 >= v78 - 28)
            v79 = v78 - 28;
          if (v79 >= 0x14)
            v80 = 20;
          else
            v80 = v79;
          v114 = v80;
          v56 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v9);
          if ((_DWORD)v56)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1655;
              v107 = MEMORY[0x1E0C81028];
              goto LABEL_265;
            }
            goto LABEL_266;
          }
          v81 = HIDWORD(v113[1]);
          *((_DWORD *)this + 114) = HIDWORD(v113[1]);
          v82 = (v81 & 0x3FFFF) != 0;
          if ((v81 & 0x3FFFF) != 0)
            v83 = 2;
          else
            v83 = 1;
          if ((~v81 & 0x1800000) == 0)
            v82 = v83;
          if ((~v81 & 0x60000000) != 0)
            v84 = (~v81 & 0x6000000) == 0;
          else
            v84 = ((~v81 & 0x6000000) == 0) + 1;
          *((_DWORD *)this + 117) = v84 + v82;
          *((_DWORD *)this + 119) = WORD5(v113[0]);
          *((_DWORD *)this + 120) = WORD2(v113[1]);
        }
        else
        {
          v85 = WORD4(v113[0]) == 17 || WORD4(v113[0]) == 2;
          if (v85 && SDWORD1(v113[0]) >= 15)
            *((_BYTE *)this + 460) = 1;
        }
        if (HIDWORD(v113[0]) >= 0xFFFF0000)
          HIDWORD(v113[0]) = WORD6(v113[0]);
        if (*((_BYTE *)this + 460))
        {
          v56 = (*(uint64_t (**)(WAVEAudioFile *, size_t *, _QWORD))(*(_QWORD *)this + 328))(this, &size, 0);
          if ((_DWORD)v56 || !(_DWORD)size)
            goto LABEL_190;
          CADeprecated::CAAutoFree<char>::allocBytes((void **)v122, size, 1);
          v86 = *(void **)v122;
          v56 = (*(uint64_t (**)(WAVEAudioFile *, size_t *, _QWORD))(*(_QWORD *)this + 336))(this, &size, *(_QWORD *)v122);
          if ((_DWORD)v56)
          {
            if (v86)
            {
              free(v86);
              *(_QWORD *)v122 = 0;
            }
LABEL_190:
            v86 = 0;
            LODWORD(size) = 0;
          }
        }
        else
        {
          v86 = 0;
          v56 = 0;
        }
        v9 = 0xAAAAAAAAAAAAAAALL;
        if (WORD4(v113[0]) == 80 || WORD4(v113[0]) == 85)
        {
          if (v86)
            free(v86);
          goto LABEL_206;
        }
        v87 = FillDescriptionFromWAVEFormat((uint64_t)&v110, size, v86, (uint64_t)v113, *((_DWORD *)this + 118));
        v9 = v87;
        if (!(_DWORD)v87)
        {
          if (*(_QWORD *)v122)
          {
            free(*(void **)v122);
            *(_QWORD *)v122 = 0;
          }
          if (!AudioFileObject::IsDataFormatValid((AudioFileObject *)&v110, v88)
            || !(*(unsigned int (**)(WAVEAudioFile *, __int128 *))(*(_QWORD *)this + 616))(this, &v110))
          {
            v56 = 0;
            v104 = 1;
            v9 = 1718449215;
            goto LABEL_268;
          }
          (*(void (**)(WAVEAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, v111);
          v89 = (*(uint64_t (**)(WAVEAudioFile *, __int128 *))(*(_QWORD *)this + 176))(this, &v110);
          v56 = v89;
          if ((_DWORD)v89)
          {
            v104 = 1;
            v9 = v89;
            goto LABEL_268;
          }
          v91 = *((_DWORD *)this + 119);
          if (v91)
          {
            LODWORD(v90) = *((_DWORD *)this + 13);
            *((double *)this + 61) = (double)v90 / (double)v91;
          }
          v56 = 0;
          v9 = 0xAAAAAAAAAAAAAAALL;
          goto LABEL_206;
        }
        if (v86)
        {
          free(v86);
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          return v9;
        }
        v104 = 1;
        v56 = v87;
LABEL_268:
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        if (v104 != 6)
          return v9;
LABEL_269:
        v108 = *(_OWORD *)((char *)this + 40);
        v110 = *(_OWORD *)((char *)this + 24);
        v111 = v108;
        v112 = *((_QWORD *)this + 7);
        if ((_DWORD)v108)
        {
          v109 = (*(uint64_t (**)(WAVEAudioFile *))(*(_QWORD *)this + 224))(this);
          (*(void (**)(WAVEAudioFile *, uint64_t))(*(_QWORD *)this + 248))(this, v109 / v111);
        }
        *((_DWORD *)this + 20) = v115 == 1684108385;
        if ((_DWORD)v56 == -39)
        {
          if (*((_QWORD *)this + 9))
            return 0;
          return 1685348671;
        }
        return v56;
      }
    }
    else
    {
      if ((_DWORD)v115 == 1229206304)
        goto LABEL_172;
      if ((_DWORD)v115 == 1684108385)
      {
        v74 = DWORD1(v115);
        v75 = *((_QWORD *)&v115 + 1);
        *((_QWORD *)this + 9) = v116 + DWORD1(v115);
        (*(void (**)(WAVEAudioFile *, uint64_t))(*(_QWORD *)this + 232))(this, v75 - v74);
      }
    }
LABEL_206:
    if (*((_QWORD *)&v115 + 1) + v116 >= (unint64_t)(*((_QWORD *)&v117 + 1) + v118))
      goto LABEL_210;
  }
  if ((*((_BYTE *)this + 100) & 2) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1588;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  chunk size past eof", buf, 0x12u);
    }
    v56 = 1685348671;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    goto LABEL_269;
  }
  if ((_DWORD)v115 == 1684108385
    && *((_QWORD *)&v117 + 1) - v116 >= (unint64_t)(v111 + DWORD1(v115)))
  {
    v57 = ((*((_QWORD *)&v117 + 1) - (v116 + DWORD1(v115))) & -(uint64_t)v111) + DWORD1(v115);
    *((_QWORD *)&v115 + 1) = v57;
    goto LABEL_122;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1601;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  chunk size past eof - stopped parsing", buf, 0x12u);
  }
LABEL_210:
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (WORD4(v113[0]) != 85 && WORD4(v113[0]) != 80)
  {
    if (WORD4(v113[0]) != 1)
      goto LABEL_269;
    v92 = *((_QWORD *)this + 9);
    if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, _BYTE *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v92 + 8, 10, v122, &v114))
    {
      return 0;
    }
    v93 = v92 + 6152;
    v94 = 5;
    while (2)
    {
      *(_WORD *)buf = 0;
      *(_QWORD *)&buf[8] = v122;
      *(_DWORD *)&buf[16] = v114;
      buf[20] = 0;
      *(_QWORD *)&buf[64] = 0;
      v126 = 0;
      v127 = 0;
      v128 = 3940;
      if (v114 >= 0xA)
      {
        if (*(unsigned __int16 *)v122 == 2935)
          goto LABEL_219;
        if (*(unsigned __int16 *)v122 == 30475)
        {
          buf[20] = 1;
LABEL_219:
          buf[0] = 1;
        }
      }
      if (!AC3PacketParser::IsValid((AC3PacketParser *)buf))
      {
        if (v126)
          free(v126);
        goto LABEL_249;
      }
      if (!--v94)
      {
        *(_QWORD *)&v110 = *(_QWORD *)&buf[24];
        v111 = *(_OWORD *)&buf[40];
        v112 = *(_QWORD *)&buf[56];
        DWORD2(v110) = 1667326771;
        HIDWORD(v110) = buf[20] | 0xC;
        LODWORD(v111) = 6144;
        if (!(*(unsigned int (**)(WAVEAudioFile *, __int128 *))(*(_QWORD *)this + 176))(this, &v110))
        {
          (*(void (**)(WAVEAudioFile *, uint64_t))(*(_QWORD *)this + 648))(this, 6144);
          v106 = (*(uint64_t (**)(WAVEAudioFile *))(*(_QWORD *)this + 224))(this);
          (*(void (**)(WAVEAudioFile *, uint64_t))(*(_QWORD *)this + 248))(this, v106 / 6144);
          *((_DWORD *)this + 116) = *(_DWORD *)&buf[64];
        }
        if (v126)
          free(v126);
        v56 = 0;
        goto LABEL_269;
      }
      if (v126)
        free(v126);
      v95 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _BYTE *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                 + 48))(*((_QWORD *)this + 13), 0, v93, 10, v122, &v114);
      v93 += 6144;
      if (v95)
        return 0;
      continue;
    }
  }
  LODWORD(size) = 0;
  v96 = *((_QWORD *)this + 9);
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, size_t *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                             + 48))(*((_QWORD *)this + 13), 0, v96, 4, &size, &v114);
  if ((_DWORD)v9)
    return v9;
  memset(&buf[8], 0, 64);
  if (!ParseMPEGSyncWord(bswap32(size), (uint64_t)&buf[8]))
    return 1685348671;
  HIDWORD(v97) = *(_DWORD *)&buf[52];
  v110 = *(_OWORD *)&buf[32];
  v111 = *(_OWORD *)&buf[48];
  v112 = *(_QWORD *)&buf[64];
  v98 = *(unsigned int *)&buf[16];
  LODWORD(v97) = *(_DWORD *)&buf[52];
  v99 = (*(double *)&buf[32] / (double)v97);
  if (!v99)
  {
LABEL_233:
    LODWORD(v111) = v98;
    (*(void (**)(WAVEAudioFile *, __int128 *))(*(_QWORD *)this + 176))(this, &v110);
    (*(void (**)(WAVEAudioFile *, uint64_t))(*(_QWORD *)this + 648))(this, v98);
    v101 = (*(uint64_t (**)(WAVEAudioFile *))(*(_QWORD *)this + 224))(this);
    (*(void (**)(WAVEAudioFile *, uint64_t))(*(_QWORD *)this + 248))(this, v101 / v98);
    v103 = *((_DWORD *)this + 119);
    if (v103)
    {
      LODWORD(v102) = *((_DWORD *)this + 13);
      *((double *)this + 61) = (double)v102 / (double)v103;
    }
LABEL_249:
    v56 = 0;
    goto LABEL_269;
  }
  v100 = v96 + *(unsigned int *)&buf[16];
  while (1)
  {
    v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, size_t *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                               + 48))(*((_QWORD *)this + 13), 0, v100, 4, &size, &v114);
    if ((_DWORD)v9)
      return v9;
    if ((ParseMPEGSyncWord(bswap32(size), (uint64_t)&v122[8]) & 1) == 0)
      return 1685348671;
    v100 += v98;
    if (!--v99)
      goto LABEL_233;
  }
}

void sub_18F07F8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 120);
  if (v37)
    free(v37);
  _Unwind_Resume(exception_object);
}

void CADeprecated::CAAutoFree<char>::allocBytes(void **a1, size_t size, int a3)
{
  void *v6;
  void *v7;
  void *v8;
  std::bad_alloc *exception;
  std::bad_alloc *v10;

  v6 = *a1;
  if (v6)
  {
    free(v6);
    *a1 = 0;
  }
  if (!a3)
  {
    v8 = malloc_type_malloc(size, 0x7C51E058uLL);
    if (v8)
      goto LABEL_7;
LABEL_8:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_alloc::bad_alloc(exception);
  }
  v7 = malloc_type_malloc(size, 0x2C8E6D5CuLL);
  if (!v7)
    goto LABEL_8;
  v8 = v7;
  bzero(v7, size);
LABEL_7:
  *a1 = v8;
}

uint64_t FillDescriptionFromWAVEFormat(uint64_t a1, UInt32 a2, void *a3, uint64_t a4, int a5)
{
  int v10;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  int AudioFormatIDFromFormatTag;
  unint64_t v16;
  int v17;
  int v18;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v10 = *(unsigned __int16 *)(a4 + 8);
  if (v10 == 65534)
  {
    if (*(_DWORD *)(a4 + 4) < 0x28u || *(unsigned __int16 *)(a4 + 24) <= 0x15u)
    {
      v12 = 1685348671;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v12;
      *(_DWORD *)buf = 136315394;
      v25 = "WAVEAudioFile.cpp";
      v26 = 1024;
      v27 = 852;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  Invalid data format";
LABEL_26:
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x12u);
      return v12;
    }
    if (*(_QWORD *)(a4 + 34) != 0x80001000000000 || *(_QWORD *)(a4 + 40) != 0x719B3800AA000080)
      return 1718449215;
    v10 = *(unsigned __int16 *)(a4 + 32);
  }
  v12 = 1718449215;
  if (!v10)
    return v12;
  v23 = 0;
  AudioFormatIDFromFormatTag = AudioFormat_GetAudioFormatIDFromFormatTag((__int16)v10, &v23);
  *(_DWORD *)(a1 + 8) = AudioFormatIDFromFormatTag;
  if (AudioFormatIDFromFormatTag == 1061109567)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v12;
    *(_DWORD *)buf = 136315394;
    v25 = "WAVEAudioFile.cpp";
    v26 = 1024;
    v27 = 870;
    v13 = MEMORY[0x1E0C81028];
    v14 = "%25s:%-5d  Unsupported data format file";
    goto LABEL_26;
  }
  LODWORD(v16) = *(_DWORD *)(a4 + 12);
  *(double *)a1 = (double)v16;
  if (*(__int16 *)(a4 + 8) == -2 && (v17 = *(_DWORD *)(a4 + 28), v17 >= 1))
  {
    if (a5)
    {
      v18 = 2;
    }
    else
    {
      if ((v17 & 0x3FFFF) != 0)
        v20 = -1;
      else
        v20 = 0;
      if ((v17 & 0x3FFFF) != 0)
        v21 = 2147483646;
      else
        v21 = 0x7FFFFFFF;
      if ((~v17 & 0x1800000) == 0)
        v20 = v21;
      if ((~v17 & 0x6000000) != 0)
        v22 = 0;
      else
        v22 = -1;
      v18 = *(unsigned __int16 *)(a4 + 10) + 2 * (((__PAIR64__(v22, ~v17 & 0x60000000) - 1) >> 32) + v20) + 2;
    }
  }
  else
  {
    v18 = *(unsigned __int16 *)(a4 + 10);
  }
  *(_DWORD *)(a1 + 28) = v18;
  *(_DWORD *)(a1 + 32) = *(unsigned __int16 *)(a4 + 22);
  if (AudioFormatIDFromFormatTag == 1096107074)
    *(_DWORD *)(a1 + 16) = *(unsigned __int16 *)(a4 + 20);
  v12 = FillOutAudioDescription((AudioStreamBasicDescription *)a1, a2, a3, v23);
  if ((_DWORD)v12 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v25 = "WAVEAudioFile.cpp";
    v26 = 1024;
    v27 = 890;
    v13 = MEMORY[0x1E0C81028];
    v14 = "%25s:%-5d  Couldn't get info about data format";
    goto LABEL_26;
  }
  return v12;
}

uint64_t WAVEID3CallbackProc(_QWORD *a1, int a2, unsigned int a3, int a4, void **a5, unsigned int *a6)
{
  size_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  void *v18;
  BOOL v19;
  void *v20;
  std::bad_alloc *exception;
  std::bad_alloc *v22;
  int v23;
  unsigned int v24;
  unint64_t v25;

  if (a2 == 1)
  {
    v14 = (void *)a1[67];
    if (v14)
      free(v14);
    result = 0;
    a1[67] = 0;
  }
  else
  {
    if (a2)
      return 0;
    LODWORD(v9) = a4;
    v25 = 0;
    (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)a1[13] + 24))(a1[13], &v25);
    v11 = a1[66];
    v12 = v25;
    if (v9 + (unint64_t)a3 + v11 > v25)
      return 4294967272;
    if (v9 <= 0x400)
      LODWORD(v9) = 1024;
    if (!a1[65])
      goto LABEL_19;
    v23 = 4;
    v24 = 0;
    v15 = BaseOpaqueObject::ResolveOpaqueRef();
    if (!v15)
      return 2003334207;
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, int *, unsigned int *))(*(_QWORD *)v15 + 32))(v15, 0, 0, 1953720698, &v23, &v24);
    if (!(_DWORD)result)
    {
      if (v24 <= a3)
        return 4294967272;
      if (v9 >= v24 - a3)
        LODWORD(v9) = v24 - a3;
      v11 = a1[66];
      v12 = v25;
LABEL_19:
      v16 = v11 + v9;
      v17 = v12 - v11;
      if (v16 <= v12)
        v9 = v9;
      else
        v9 = v17;
      v18 = malloc_type_malloc(v9, 0x2C8E6D5CuLL);
      if (v18)
        v19 = 1;
      else
        v19 = (_DWORD)v9 == 0;
      if (!v19)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v22 = std::bad_alloc::bad_alloc(exception);
      }
      v20 = v18;
      bzero(v18, v9);
      a1[67] = v20;
      v24 = 0;
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, size_t, void *, unsigned int *))(*(_QWORD *)a1[13]
                                                                                                 + 48))(a1[13], 0, a1[66] + a3, v9, v20, &v24);
      if (!(_DWORD)result)
      {
        *a5 = (void *)a1[67];
        *a6 = v24;
      }
    }
  }
  return result;
}

uint64_t AudioFormat_GetAudioFormatIDFromFormatTag(int a1, BOOL *a2)
{
  uint64_t result;
  unsigned int v4;

  result = 1061109567;
  *a2 = 0;
  if (a1 > 16)
  {
    if (a1 > 84)
    {
      if (a1 == 85)
      {
        return 778924083;
      }
      else if (a1 == 304)
      {
        if (IsACELPnetSupported(void)::sCheckForACELPnetOnce[0] != -1)
          dispatch_once(IsACELPnetSupported(void)::sCheckForACELPnetOnce, &__block_literal_global_9814);
        if (IsACELPnetSupported(void)::isACELPnetSupported)
          return 1096107074;
        else
          return 1061109567;
      }
    }
    else
    {
      if (a1 == 49)
        v4 = 1836253233;
      else
        v4 = 1061109567;
      if (a1 == 17)
        return 1836253201;
      else
        return v4;
    }
  }
  else
  {
    switch(a1)
    {
      case 1:
        result = 1819304813;
        break;
      case 2:
        result = 1836253186;
        break;
      case 3:
        result = 1819304813;
        *a2 = 1;
        break;
      case 6:
        result = 1634492791;
        break;
      case 7:
        result = 1970037111;
        break;
      default:
        return result;
    }
  }
  return result;
}

void Wave64ChunkParser::~Wave64ChunkParser(Wave64ChunkParser *this)
{
  JUMPOUT(0x193FFE460);
}

__n128 Wave64ChunkParser::ContainerChunk(__n128 *a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = 0x1872696666;
  result = a1[1];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t Wave64ChunkParser::NextChunk(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v3 = a1[4];
  if (a1[2] <= v3)
    return 4294967257;
  v6 = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t, uint64_t, uint64_t *, unsigned int *))(*(_QWORD *)a2 + 48))(a2, 0, a1[3] + v3, 24, &v17, &v20);
  if (v20 <= 0x17)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v22 = "WAVEAudioFile.cpp";
      v23 = 1024;
      v24 = 3628;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  End of file", buf, 0x12u);
    }
    return 4294967257;
  }
  v7 = v6;
  if ((_DWORD)v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v22 = "WAVEAudioFile.cpp";
      v23 = 1024;
      v24 = 3629;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes failed", buf, 0x12u);
    }
  }
  else
  {
    v9 = 0;
    v10 = &qword_18F10DC28;
    while (v17 != *v10 || v18 != v10[1])
    {
      ++v9;
      v10 = (uint64_t *)((char *)v10 + 20);
      if (v9 == 29)
      {
        v12 = 707406378;
        goto LABEL_18;
      }
    }
    v12 = w64GUIDMap[5 * v9];
LABEL_18:
    *(_DWORD *)a3 = v12;
    *(_DWORD *)(a3 + 4) = 24;
    v13 = v19;
    *(_QWORD *)(a3 + 8) = v19;
    v14 = a1[4];
    *(_QWORD *)(a3 + 16) = v14 + a1[3];
    v15 = v14 + v13;
    a1[4] = v15;
    if (v15 < 0xFFFFFFFFFFFFFFF9)
    {
      if ((v15 & 7) == 0)
        return 0;
      v7 = 0;
      v16 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    else
    {
      v7 = 0;
      v16 = -1;
    }
    a1[4] = v16;
  }
  return v7;
}

void RF64ChunkParser::~RF64ChunkParser(RF64ChunkParser *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2905D38;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2905D38;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x193FFE460);
}

__n128 RF64ChunkParser::ContainerChunk(__n128 *a1, uint64_t a2)
{
  __n128 result;

  *(_DWORD *)a2 = a1[2].n128_u32[3];
  *(_DWORD *)(a2 + 4) = 8;
  result = a1[1];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t RF64ChunkParser::NextChunk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  NSObject *v10;
  const char *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  int v32;
  void **v33;
  char *v34;
  unint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint8_t v54[4];
  const char *v55;
  __int16 v56;
  int v57;
  uint8_t buf[32];
  unsigned int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v52 = 0;
  v51 = 0;
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 16) <= v3)
    return 4294967257;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t, uint64_t, uint64_t *, unsigned int *))(*(_QWORD *)a2 + 48))(a2, 0, *(_QWORD *)(a1 + 24) + v3, 8, &v51, &v52);
  if (v52 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3531;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  End of file", buf, 0x12u);
    }
    return 4294967257;
  }
  v8 = v7;
  if ((_DWORD)v7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v8;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3532;
    v10 = MEMORY[0x1E0C81028];
    v11 = "%25s:%-5d  ReadBytes failed";
LABEL_10:
    _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
    return v8;
  }
  v13 = v51;
  v12 = HIDWORD(v51);
  v14 = bswap32(v51);
  LODWORD(v51) = v14;
  if (!*(_BYTE *)(a1 + 72))
  {
    v59 = 0;
    memset(buf, 0, sizeof(buf));
    v53 = 0;
    if (v13 == 875983716 && HIDWORD(v51) > 0x1B)
    {
      v18 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint8_t *, unsigned int *))(*(_QWORD *)a2 + 48))(a2, 0, *(_QWORD *)(a1 + 32) + *(_QWORD *)(a1 + 24), 36, buf, &v53);
      if (v53 <= 0x23)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
LABEL_23:
          v8 = 4294967257;
LABEL_42:
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return v8;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "WAVEAudioFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3540;
          v10 = MEMORY[0x1E0C81028];
          v11 = "%25s:%-5d  ParseDS64Chunk failed";
          goto LABEL_10;
        }
        *(_DWORD *)v54 = 136315394;
        v55 = "WAVEAudioFile.cpp";
        v56 = 1024;
        v57 = 3486;
        v19 = MEMORY[0x1E0C81028];
LABEL_22:
        _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d  End of file", v54, 0x12u);
        goto LABEL_23;
      }
      v8 = v18;
      if ((_DWORD)v18)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_42;
        *(_DWORD *)v54 = 136315394;
        v55 = "WAVEAudioFile.cpp";
        v56 = 1024;
        v57 = 3487;
        v26 = MEMORY[0x1E0C81028];
        v27 = "%25s:%-5d  ReadBytes for DataSize64Chunk failed";
      }
      else
      {
        *(_DWORD *)buf = bswap32(*(unsigned int *)buf);
        if (v59 < 0x15555553)
        {
          v32 = *(_DWORD *)&buf[16];
          v31 = *(_DWORD *)&buf[20];
          v33 = (void **)(a1 + 48);
          v34 = *(char **)(a1 + 56);
          v35 = *(_QWORD *)(a1 + 64);
          if ((unint64_t)v34 >= v35)
          {
            v37 = 0x1555555555555555;
            v38 = (char *)*v33;
            v39 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (_BYTE *)*v33) >> 2);
            v40 = v39 + 1;
            if (v39 + 1 > 0x1555555555555555)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v38) >> 2);
            if (2 * v41 > v40)
              v40 = 2 * v41;
            if (v41 < 0xAAAAAAAAAAAAAAALL)
              v37 = v40;
            if (v37)
            {
              v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(v37);
              v38 = *(char **)(a1 + 48);
              v34 = *(char **)(a1 + 56);
            }
            else
            {
              v42 = 0;
            }
            v43 = (_DWORD *)(v37 + 12 * v39);
            v44 = v37 + 12 * v42;
            *v43 = 1684108385;
            v43[1] = v32;
            v43[2] = v31;
            v36 = v43 + 3;
            if (v34 != v38)
            {
              do
              {
                v45 = *(_QWORD *)(v34 - 12);
                v34 -= 12;
                v46 = *((_DWORD *)v34 + 2);
                *(_QWORD *)(v43 - 3) = v45;
                v43 -= 3;
                v43[2] = v46;
              }
              while (v34 != v38);
              v38 = (char *)*v33;
            }
            *(_QWORD *)(a1 + 48) = v43;
            *(_QWORD *)(a1 + 56) = v36;
            *(_QWORD *)(a1 + 64) = v44;
            if (v38)
              operator delete(v38);
          }
          else
          {
            *(_DWORD *)v34 = 1684108385;
            *((_DWORD *)v34 + 1) = v32;
            *((_DWORD *)v34 + 2) = v31;
            v36 = v34 + 12;
          }
          *(_QWORD *)(a1 + 56) = v36;
          if (v59 && 12 * (unint64_t)v59 + 28 <= SHIDWORD(v51))
          {
            std::vector<ChunkSize64>::resize(a1 + 48, v59 + 1);
            v53 = 0;
            v47 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int *))(*(_QWORD *)a2 + 48))(a2, 0, *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) + 36, 12 * v59, *(_QWORD *)(a1 + 48) + 12, &v53);
            if (12 * (unint64_t)v59 > v53)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_23;
              *(_DWORD *)v54 = 136315394;
              v55 = "WAVEAudioFile.cpp";
              v56 = 1024;
              v57 = 3504;
              v19 = MEMORY[0x1E0C81028];
              goto LABEL_22;
            }
            v8 = v47;
            if ((_DWORD)v47)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_42;
              *(_DWORD *)v54 = 136315394;
              v55 = "WAVEAudioFile.cpp";
              v56 = 1024;
              v57 = 3505;
              v26 = MEMORY[0x1E0C81028];
              v27 = "%25s:%-5d  ReadBytes for 64-bit chunk sizes failed";
              goto LABEL_41;
            }
            if (v59)
            {
              if (v59 + 1 > 2)
                v48 = v59 + 1;
              else
                v48 = 2;
              v49 = v48 - 1;
              v50 = (unsigned int *)((char *)*v33 + 12);
              do
              {
                *v50 = bswap32(*v50);
                v50 += 3;
                --v49;
              }
              while (v49);
            }
          }
          *(_BYTE *)(a1 + 72) = 1;
          v14 = v51;
          v12 = HIDWORD(v51);
          goto LABEL_12;
        }
        v8 = 1718449215;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_42;
        *(_DWORD *)v54 = 136315394;
        v55 = "WAVEAudioFile.cpp";
        v56 = 1024;
        v57 = 3491;
        v26 = MEMORY[0x1E0C81028];
        v27 = "%25s:%-5d  'ds64' chunk has bad table length";
      }
    }
    else
    {
      v8 = 1685348671;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_42;
      *(_DWORD *)v54 = 136315394;
      v55 = "WAVEAudioFile.cpp";
      v56 = 1024;
      v57 = 3483;
      v26 = MEMORY[0x1E0C81028];
      v27 = "%25s:%-5d  ds64 chunk not found";
    }
LABEL_41:
    _os_log_impl(&dword_18EE07000, v26, OS_LOG_TYPE_ERROR, v27, v54, 0x12u);
    goto LABEL_42;
  }
LABEL_12:
  *(_DWORD *)a3 = v14;
  *(_DWORD *)(a3 + 4) = 8;
  if (v12 == -1)
  {
    *(_QWORD *)(a3 + 8) = 8;
    v20 = *(_QWORD *)(a1 + 48);
    v21 = *(_QWORD *)(a1 + 56) - v20;
    if (v21)
    {
      v22 = 0;
      v23 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 2);
      v24 = 1;
      v15 = 16;
      while (v14 != *(_DWORD *)(v20 + 12 * v22))
      {
        v22 = v24;
        if (v23 <= v24++)
          goto LABEL_14;
      }
      v28 = *(_QWORD *)(v20 + 12 * v22 + 4);
      v29 = __CFADD__(v28, 8);
      v30 = v28 + 8;
      if (v29)
        v15 = -1;
      else
        v15 = v30;
    }
    else
    {
      v15 = 16;
    }
  }
  else
  {
    v15 = v12 + 8;
  }
LABEL_14:
  v8 = 0;
  *(_QWORD *)(a3 + 8) = v15;
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a3 + 16) = v16 + *(_QWORD *)(a1 + 24);
  v17 = v16 + v15;
  *(_QWORD *)(a1 + 32) = v16 + v15;
  if ((v15 & 1) != 0 && v17 != -1)
  {
    v8 = 0;
    *(_QWORD *)(a1 + 32) = v17 + 1;
  }
  return v8;
}

void std::vector<ChunkSize64>::resize(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  size_t v22;

  v3 = *(_DWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)a1) >> 2);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v21 = &v3[3 * a2];
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 2) >= v6)
  {
    v22 = 12 * ((12 * v6 - 12) / 0xC) + 12;
    bzero(*(void **)(a1 + 8), v22);
    v21 = (_DWORD *)(v4 + v22);
LABEL_17:
    *(_QWORD *)(a1 + 8) = v21;
    return;
  }
  if (a2 > 0x1555555555555555)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 2);
  v9 = 2 * v8;
  if (2 * v8 <= a2)
    v9 = a2;
  if (v8 >= 0xAAAAAAAAAAAAAAALL)
    v10 = 0x1555555555555555;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(v10);
  v12 = &v11[12 * v5];
  v14 = &v11[12 * v13];
  v15 = 12 * ((12 * v6 - 12) / 0xC) + 12;
  bzero(v12, v15);
  v16 = &v12[v15];
  v18 = *(_DWORD **)a1;
  v17 = *(_DWORD **)(a1 + 8);
  if (v17 != *(_DWORD **)a1)
  {
    do
    {
      v19 = *(_QWORD *)(v17 - 3);
      v17 -= 3;
      v20 = v17[2];
      *(_QWORD *)(v12 - 12) = v19;
      v12 -= 12;
      *((_DWORD *)v12 + 2) = v20;
    }
    while (v17 != v18);
    v17 = *(_DWORD **)a1;
  }
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v14;
  if (v17)
    operator delete(v17);
}

void RIFFWAVE32ChunkParser::~RIFFWAVE32ChunkParser(RIFFWAVE32ChunkParser *this)
{
  JUMPOUT(0x193FFE460);
}

__n128 RIFFWAVE32ChunkParser::ContainerChunk(__n128 *a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = 0x852494646;
  result = a1[1];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t RIFFWAVE32ChunkParser::NextChunk(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v15 = 0;
  v3 = a1[4];
  if (a1[2] <= v3)
    return 4294967257;
  v6 = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t, uint64_t, uint64_t *, unsigned int *))(*(_QWORD *)a2 + 48))(a2, 0, a1[3] + v3, 8, &v15, &v16);
  if (v16 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v18 = "WAVEAudioFile.cpp";
      v19 = 1024;
      v20 = 3399;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  End of file", buf, 0x12u);
    }
    return 4294967257;
  }
  v7 = v6;
  if ((_DWORD)v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v18 = "WAVEAudioFile.cpp";
      v19 = 1024;
      v20 = 3400;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes failed", buf, 0x12u);
    }
  }
  else
  {
    v9 = HIDWORD(v15);
    *(_DWORD *)a3 = bswap32(v15);
    *(_DWORD *)(a3 + 4) = 8;
    v10 = v9 + 8;
    v11 = ((_DWORD)v9 != -9) & __CFADD__((_DWORD)v9, 9);
    v12 = 0xFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    *(_QWORD *)(a3 + 8) = v12;
    v13 = a1[4];
    *(_QWORD *)(a3 + 16) = v13 + a1[3];
    v14 = v13 + v12;
    a1[4] = v13 + v12;
    if ((v12 & 1) != 0 && v14 <= 0xFFFFFFFE)
    {
      v7 = 0;
      a1[4] = v14 + 1;
    }
  }
  return v7;
}

void WAVEAudioFormat::~WAVEAudioFormat(WAVEAudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL WAVEAudioFormat::ExtensionIsThisFormat(WAVEAudioFormat *this, CFStringRef theString1)
{
  const __CFString *v3;

  if (*((_DWORD *)this + 2) == 1463170150)
    v3 = CFSTR("w64");
  else
    v3 = CFSTR("wav");
  return CFStringCompare(theString1, v3, 1uLL) == kCFCompareEqualTo;
}

BOOL WAVEAudioFormat::FileDataIsThisFormat(WAVEAudioFormat *this, unsigned int a2, const void *a3)
{
  unsigned int v3;
  _BOOL8 result;
  uint64_t v8;
  size_t v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  unsigned int __dst[2];
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a2 >> 2 >= 8)
    v3 = 8;
  else
    v3 = a2 >> 2;
  if (v3 < 3)
    return 0;
  v8 = v3;
  if (v3 <= 7)
    v9 = 32 - v8 * 4;
  else
    v9 = 0;
  bzero(&__dst[v8], v9);
  memcpy(__dst, a3, 4 * v3);
  v10 = *((_DWORD *)this + 2);
  if (v10 == 1113011764)
  {
LABEL_12:
    result = 0;
    v11 = bswap32(__dst[0]);
    v12 = __dst[0] == 1179011410 || v11 == v10;
    if (v12 && v16 == 1163280727)
    {
      if (v11 != v10)
        return v3 < 4 || __dst[0] != 1179011410 || v17 == 1263424842 && (v3 < 5 || v18 >= 0x24);
      if (v3 >= 4)
      {
        v13 = v17;
        v14 = 875983716;
        return v13 == v14;
      }
      return 1;
    }
    return result;
  }
  if (v10 != 1463170150)
  {
    if (v10 != 1380333108)
    {
      result = 0;
      if (__dst[0] == 1179011410 && v16 == 1163280727)
        return 1;
      return result;
    }
    goto LABEL_12;
  }
  result = 0;
  if (__dst[0] == 1717987698 && __dst[1] == 298815790 && v16 == -618080603)
  {
    if (v3 >= 4)
    {
      if (v17 != 49412)
        return 0;
      if (v3 >= 7)
      {
        if (v19 != 1702257015)
          return 0;
        if (a2 >= 0x20)
        {
          v13 = v20;
          v14 = 299085043;
          return v13 == v14;
        }
      }
    }
    return 1;
  }
  return result;
}

const __CFArray *WAVEAudioFormat::GetExtensions(WAVEAudioFormat *this, const __CFArray **a2)
{
  const __CFString *v3;
  const __CFArray *result;
  const void *v5[2];

  v5[1] = *(const void **)MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 2) == 1463170150)
    v3 = CFSTR("w64");
  else
    v3 = CFSTR("wav");
  v5[0] = v3;
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *WAVEAudioFormat::GetUTIs(WAVEAudioFormat *this, const __CFArray **a2)
{
  const __CFString *v3;
  const __CFArray *result;
  const void *v5[2];

  v5[1] = *(const void **)MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 2) == 1463170150)
    v3 = CFSTR("com.sony.wave64");
  else
    v3 = CFSTR("com.microsoft.waveform-audio");
  v5[0] = v3;
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *WAVEAudioFormat::GetMIMETypes(WAVEAudioFormat *this, const __CFArray **a2)
{
  const __CFAllocator *v3;
  const CFArrayCallBacks *v4;
  void **v5;
  CFIndex v6;
  const __CFArray *result;
  void *values[5];

  values[4] = *(void **)MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 2) == 1463170150)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v5 = 0;
    v6 = 0;
  }
  else
  {
    values[0] = CFSTR("audio/wav");
    values[1] = CFSTR("audio/wave");
    values[2] = CFSTR("audio/x-wav");
    values[3] = CFSTR("audio/vnd.wave");
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v5 = values;
    v6 = 4;
  }
  result = CFArrayCreate(v3, (const void **)v5, v6, v4);
  *a2 = result;
  return result;
}

void WAVEAudioFormat::GetFileTypeName(WAVEAudioFormat *this, const __CFString **a2)
{
  __CFBundle *v4;
  int v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  char v9;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v9);
  v4 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v4 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_12:
    v8 = (const __CFString *)CFRetain(CFSTR("WAVE"));
    goto LABEL_13;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_12;
LABEL_3:
  v5 = *((_DWORD *)this + 2);
  v6 = CFSTR("WAVE");
  if (v5 == 1463170150)
    v6 = CFSTR("Wave64");
  if (v5 == 1380333108)
    v6 = CFSTR("RF64");
  if (v5 == 1113011764)
    v7 = CFSTR("BW64");
  else
    v7 = v6;
  v8 = CFBundleCopyLocalizedString(v4, v7, v7, CFSTR("FileTypeNames"));
LABEL_13:
  *a2 = v8;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v9);
}

void sub_18F0813D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t WAVEAudioFormat::GetAvailableFormatIDs(WAVEAudioFormat *this, unsigned int *a2, void *__dst)
{
  unsigned int v5;
  size_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_18F1173F0;
  v9 = 0x6D7300316D730002;
  if (IsACELPnetSupported(void)::sCheckForACELPnetOnce[0] != -1)
    dispatch_once(IsACELPnetSupported(void)::sCheckForACELPnetOnce, &__block_literal_global_9814);
  if (IsACELPnetSupported(void)::isACELPnetSupported == 1)
  {
    v10 = 1096107074;
    v5 = 7;
  }
  else
  {
    v5 = 6;
  }
  if (*a2 >> 2 < v5)
    v5 = *a2 >> 2;
  v6 = 4 * v5;
  *a2 = v6;
  if (__dst)
    memcpy(__dst, &v8, v6);
  return 0;
}

uint64_t WAVEAudioFormat::GetAvailableStreamDescriptions(WAVEAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t result;
  UInt32 ioPropertyDataSize;
  _OWORD outPropertyData[10];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2 > 1836253185)
  {
    if (((a2 - 1836253186) > 0x2F || ((1 << (a2 - 2)) & 0x800000008001) == 0)
      && a2 != 1970037111)
    {
      goto LABEL_25;
    }
LABEL_16:
    memset(outPropertyData, 0, 40);
    DWORD2(outPropertyData[0]) = a2;
    ioPropertyDataSize = 40;
    AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, outPropertyData);
    v10 = 1;
    if (__dst)
      goto LABEL_17;
LABEL_24:
    result = 0;
    *a3 = 40 * v10;
    return result;
  }
  switch(a2)
  {
    case 1096107074:
      if (IsACELPnetSupported(void)::sCheckForACELPnetOnce[0] != -1)
        dispatch_once(IsACELPnetSupported(void)::sCheckForACELPnetOnce, &__block_literal_global_9814);
      if (IsACELPnetSupported(void)::isACELPnetSupported != 1)
        goto LABEL_25;
      memset((char *)outPropertyData + 8, 0, 72);
      DWORD2(outPropertyData[0]) = 1096107074;
      *(_QWORD *)&outPropertyData[0] = 0x40BF400000000000;
      ioPropertyDataSize = 40;
      AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, outPropertyData);
      LODWORD(outPropertyData[3]) = 1096107074;
      *((_QWORD *)&outPropertyData[2] + 1) = 0x40CF400000000000;
      ioPropertyDataSize = 40;
      AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, (char *)&outPropertyData[2] + 8);
      v10 = 2;
      if (!__dst)
        goto LABEL_24;
      break;
    case 1634492791:
      goto LABEL_16;
    case 1819304813:
      v6 = 0;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      v7 = (_DWORD *)&outPropertyData[1] + 1;
      memset(outPropertyData, 0, sizeof(outPropertyData));
      do
      {
        v8 = v6 + 8;
        if ((_DWORD)v6)
          v9 = 12;
        else
          v9 = 8;
        *(v7 - 3) = 1819304813;
        *(v7 - 2) = v9;
        v7[3] = v8;
        *v7 = 1;
        v7 += 10;
        v6 = v8;
      }
      while (v8 != 32);
      *((_QWORD *)&v15 + 1) = 0x96C70636DLL;
      LODWORD(v17) = 32;
      DWORD1(v16) = 1;
      *(_QWORD *)&v18 = 0x96C70636DLL;
      DWORD2(v19) = 64;
      HIDWORD(v18) = 1;
      v10 = 6;
      if (!__dst)
        goto LABEL_24;
      break;
    default:
LABEL_25:
      *a3 = 0;
      return 1718449215;
  }
LABEL_17:
  if (*a3 / 0x28 < v10)
    v10 = *a3 / 0x28;
  v11 = 40 * v10;
  *a3 = v11;
  memcpy(__dst, outPropertyData, v11);
  return 0;
}

uint64_t WAVEAudioFormat::GetHFSCodes(WAVEAudioFormat *this, unsigned int *a2, void *__dst)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  size_t v7;
  uint64_t __src;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  __src = 0x2E57415657415645;
  v3 = *((_DWORD *)this + 2);
  if (v3 == 1463170150)
  {
    *a2 = 0;
  }
  else
  {
    if (v3 == 1113011764)
      v4 = 1113011764;
    else
      v4 = 1380533830;
    if (v3 == 1380333108)
      v5 = 1380333108;
    else
      v5 = v4;
    v10 = v5;
    v6 = *a2 >> 2;
    if (v6 >= 3)
      v6 = 3;
    v7 = 4 * v6;
    *a2 = v7;
    if (__dst)
      memcpy(__dst, &__src, v7);
  }
  return 0;
}

double WAVEAudioFormat::New(WAVEAudioFormat *this)
{
  uint64_t v2;
  int v3;
  double result;

  v2 = operator new();
  v3 = *((_DWORD *)this + 2);
  *(_DWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_DWORD *)(v2 + 80) = 1;
  *(_DWORD *)(v2 + 84) = v3;
  *(_QWORD *)(v2 + 88) = 0;
  *(_DWORD *)(v2 + 96) = -1;
  *(_WORD *)(v2 + 100) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_DWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0x100000000;
  *(_DWORD *)(v2 + 136) = 65792;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 168) = xmmword_18F117400;
  *(_DWORD *)(v2 + 184) = 8;
  *(_WORD *)(v2 + 188) = 2;
  *(_QWORD *)v2 = &off_1E2903B40;
  *(_DWORD *)(v2 + 456) = 0;
  *(_BYTE *)(v2 + 460) = 0;
  *(_OWORD *)(v2 + 464) = xmmword_18F117410;
  *(_DWORD *)(v2 + 480) = 0;
  *(_QWORD *)(v2 + 488) = 0x3FF0000000000000;
  *(_DWORD *)(v2 + 496) = 0;
  *(_QWORD *)(v2 + 504) = 0;
  *(_DWORD *)(v2 + 512) = 0;
  *(_BYTE *)(v2 + 516) = 0;
  *(_QWORD *)(v2 + 536) = 0;
  *(_OWORD *)(v2 + 520) = 0u;
  return result;
}

uint64_t WAVEAudioFormat::NewStream(WAVEAudioFormat *this)
{
  uint64_t v1;

  v1 = operator new();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = -1;
  *(_QWORD *)(v1 + 96) = -1;
  *(_QWORD *)(v1 + 104) = -1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_OWORD *)(v1 + 240) = xmmword_18F116F80;
  *(_DWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 300) = 0;
  *(_QWORD *)(v1 + 284) = 0;
  *(_QWORD *)(v1 + 292) = 0;
  *(_DWORD *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)v1 = &off_1E2906620;
  *(_QWORD *)(v1 + 344) = 0;
  *(_QWORD *)(v1 + 373) = 0;
  *(_QWORD *)(v1 + 360) = 0;
  *(_QWORD *)(v1 + 368) = 0;
  bzero((void *)(v1 + 332), 0xCuLL);
  bzero((void *)(v1 + 352), 8uLL);
  return v1;
}

void LOASAudioStream::~LOASAudioStream(LOASAudioStream *this)
{
  LOASAudioStream::~LOASAudioStream(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_1E29058F0;
  v2 = *((_QWORD *)this + 80);
  if (v2)
    MEMORY[0x193FFE460](v2, 0x1000C403E1C8BA9);
  v3 = (void *)*((_QWORD *)this + 76);
  if (v3)
  {
    *((_QWORD *)this + 77) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 72);
  if (v4)
  {
    *((_QWORD *)this + 73) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 69);
  if (v5)
  {
    *((_QWORD *)this + 70) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 55);
  if (v6)
  {
    *((_QWORD *)this + 56) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 52);
  if (v7)
  {
    *((_QWORD *)this + 53) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 42);
  if (v8)
  {
    *((_QWORD *)this + 43) = v8;
    operator delete(v8);
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

uint64_t LOASAudioStream::GetPropertyInfo(UInt32 *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  const void *v9;
  UInt32 v10;
  UInt32 outPropertyDataSize;

  if (a2 == 1768174433)
  {
    if (!a3)
      goto LABEL_9;
    v6 = 8;
LABEL_8:
    *a3 = v6;
LABEL_9:
    if (a4)
    {
      result = 0;
      *a4 = 0;
      return result;
    }
    return 0;
  }
  if (a2 != 1835493731)
  {
    if (a2 != 1768174437)
      return AudioFileStreamObject::GetPropertyInfo((AudioFileStreamObject *)this, a2, a3, a4);
    if (!a3)
      goto LABEL_9;
    v6 = 4;
    goto LABEL_8;
  }
  v8 = *((_QWORD *)this + 1);
  v9 = *(const void **)(v8 + 136);
  if (v9)
  {
    outPropertyDataSize = 0;
    result = AudioFormatGetPropertyInfo(0x78686D63u, 0xCu, v9, &outPropertyDataSize);
    if (a3 && !(_DWORD)result)
    {
      v10 = outPropertyDataSize;
      goto LABEL_15;
    }
  }
  else
  {
    if (*((_BYTE *)this + 177))
      return 1685348671;
    if (*(_DWORD *)(v8 + 112))
      result = 1970170687;
    else
      result = 1836020325;
    if (a4)
    {
      *a4 = 0;
      v8 = *((_QWORD *)this + 1);
    }
    if (*(_BYTE *)(v8 + 108))
    {
      if (!a3)
        return 0;
      result = 0;
      v10 = this[32];
LABEL_15:
      *a3 = v10;
    }
  }
  return result;
}

uint64_t LOASAudioStream::GetProperty(LOASAudioStream *this, int a2, unsigned int *a3, _QWORD *__dst)
{
  unsigned int *v7;
  uint64_t Property;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  const void *v19;
  size_t v21;
  const void *v22;
  __int128 v23;
  __int128 v24;
  OSType v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  uint64_t PropertyInfo;
  _QWORD *v30;
  size_t v31;
  Boolean outWritable;
  UInt32 outPropertyDataSize;
  UInt32 ioPropertyDataSize[2];
  UInt32 outSize;
  __int128 outPropertyData;
  __int128 v37;
  uint64_t v38;

  if (a2 > 1768174432)
  {
    if (a2 == 1768174433)
    {
      Property = 561211770;
      if (a3 && *a3 == 8)
      {
        Property = 0;
        *__dst = *((_QWORD *)this + 66);
      }
      return Property;
    }
    if (a2 != 1835493731)
    {
      if (a2 != 1768174437)
        return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
      Property = 561211770;
      if (!a3 || *a3 != 4)
        return Property;
      Property = 0;
      v11 = *((_DWORD *)this + 131);
      goto LABEL_21;
    }
    v18 = *((_QWORD *)this + 1);
    v19 = *(const void **)(v18 + 136);
    if (v19)
    {
      AudioFormatGetProperty(0x78686D63u, 0xCu, v19, a3, __dst);
      return 0;
    }
    if (*((_BYTE *)this + 177))
      return 1685348671;
    if (*(_DWORD *)(v18 + 112))
      Property = 1970170687;
    else
      Property = 1836020325;
    if (!*(_BYTE *)(v18 + 108))
      return Property;
    v21 = *a3;
    if ((_DWORD)v21 != *((_DWORD *)this + 32))
      return 561211770;
    v22 = (const void *)*((_QWORD *)this + 15);
LABEL_77:
    memcpy(__dst, v22, v21);
    return 0;
  }
  if (a2 == 1668112752)
  {
    v12 = *((_QWORD *)this + 1);
    v13 = *(const void **)(v12 + 136);
    if (v13)
    {
      if (*a3 != *((_DWORD *)this + 36))
        return 561211770;
      ioPropertyDataSize[0] = 32;
      Property = AudioFormatGetProperty(0x7868636Cu, 0xCu, v13, ioPropertyDataSize, &outPropertyData);
      if ((_DWORD)Property)
        return Property;
      v11 = **(_DWORD **)(*((_QWORD *)this + 1) + 136);
LABEL_21:
      *(_DWORD *)__dst = v11;
      return Property;
    }
    if (*((_BYTE *)this + 177))
      return 1685348671;
    if (*(_DWORD *)(v12 + 112))
      Property = 1970170687;
    else
      Property = 1836020325;
    if (!*(_BYTE *)(v12 + 109))
      return Property;
    v21 = *a3;
    if ((_DWORD)v21 != *((_DWORD *)this + 36))
      return 561211770;
    v22 = (const void *)*((_QWORD *)this + 17);
    goto LABEL_77;
  }
  if (a2 == 1684434292)
  {
    v14 = *((_QWORD *)this + 1);
    v15 = *(const void **)(v14 + 136);
    if (v15)
    {
      v38 = 0;
      outPropertyData = 0u;
      v37 = 0u;
      v16 = AudioFormatGetProperty(0x78686173u, 0xCu, v15, a3, &outPropertyData);
      if (*a3 == 40)
      {
        Property = v16;
        if (!(_DWORD)v16)
        {
          v17 = v37;
          *(_OWORD *)__dst = outPropertyData;
          *((_OWORD *)__dst + 1) = v17;
          __dst[4] = v38;
        }
        return Property;
      }
      return 561211770;
    }
    if (!*((_BYTE *)this + 177))
    {
      if (*(_DWORD *)(v14 + 112))
        Property = 1970170687;
      else
        Property = 1836020325;
      if (!*(_BYTE *)(v14 + 105))
        return Property;
      if (*a3 != 40)
        return 561211770;
      Property = 0;
      v23 = *(_OWORD *)((char *)this + 24);
      v24 = *(_OWORD *)((char *)this + 40);
      __dst[4] = *((_QWORD *)this + 7);
      *(_OWORD *)__dst = v23;
      *((_OWORD *)__dst + 1) = v24;
      return Property;
    }
    return 1685348671;
  }
  if (a2 != 1718383476)
    return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
  v7 = *(unsigned int **)(*((_QWORD *)this + 1) + 136);
  if (!v7)
  {
    a2 = 1718383476;
    return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
  }
  Property = 1836020325;
  v9 = bswap32(*v7);
  if (v9 <= 1902207330)
  {
    if (v9 <= 1885430114)
    {
      if (v9 != 1633772320)
      {
        if (v9 != 1633772392)
        {
          v10 = 1633772400;
          goto LABEL_58;
        }
LABEL_65:
        outSize = 2;
        v25 = 1633772392;
        v26 = 96;
LABEL_66:
        if (v26 <= *a3)
        {
          *(_QWORD *)ioPropertyDataSize = 0;
          v27 = OpenCodecComponent(v25, (OpaqueAudioComponentInstance **)ioPropertyDataSize, 0x61646563u);
          if ((_DWORD)v27)
            return v27;
          outPropertyDataSize = 88;
          AudioFormatGetPropertyInfo(0x78686D63u, 0xCu, *(const void **)(*((_QWORD *)this + 1) + 136), &outPropertyDataSize);
          v28 = malloc_type_calloc(1uLL, outPropertyDataSize, 0xC1FED70uLL);
          AudioFormatGetProperty(0x78686D63u, 0xCu, *(const void **)(*((_QWORD *)this + 1) + 136), &outPropertyDataSize, v28);
          outWritable = 0;
          PropertyInfo = AudioCodecGetPropertyInfo(*(AudioCodec *)ioPropertyDataSize, 0x6163666Cu, &outSize, &outWritable);
          if ((_DWORD)PropertyInfo)
          {
            Property = PropertyInfo;
            AudioComponentInstanceDispose(*(AudioComponentInstance *)ioPropertyDataSize);
          }
          else
          {
            std::vector<unsigned char>::vector(&outPropertyData, outSize);
            v30 = (_QWORD *)outPropertyData;
            *(_DWORD *)outPropertyData = outPropertyDataSize;
            v30[1] = v28;
            Property = AudioCodecGetProperty(*(AudioCodec *)ioPropertyDataSize, 0x6163666Cu, &outSize, v30);
            if (!(_DWORD)Property)
            {
              v31 = outSize;
              *a3 = outSize;
              memcpy(__dst, (const void *)outPropertyData, v31);
            }
            AudioComponentInstanceDispose(*(AudioComponentInstance *)ioPropertyDataSize);
            if ((_QWORD)outPropertyData)
            {
              *((_QWORD *)&outPropertyData + 1) = outPropertyData;
              operator delete((void *)outPropertyData);
            }
          }
          return Property;
        }
        return 561211770;
      }
      goto LABEL_63;
    }
    if (v9 == 1885430115)
      goto LABEL_63;
    if (v9 == 1885430632)
      goto LABEL_65;
    v10 = 1885430640;
LABEL_58:
    if (v9 != v10)
      return Property;
    goto LABEL_64;
  }
  if (v9 <= 2053202274)
  {
    if (v9 == 1902207331)
      goto LABEL_63;
    if (v9 == 1902207848)
      goto LABEL_65;
    v10 = 1902207856;
    goto LABEL_58;
  }
  switch(v9)
  {
    case 2053202800:
LABEL_64:
      outSize = 3;
      v25 = 1633772400;
      v26 = 144;
      goto LABEL_66;
    case 2053202792:
      goto LABEL_65;
    case 2053202275:
LABEL_63:
      v25 = 1633772320;
      outSize = 1;
      v26 = 48;
      goto LABEL_66;
  }
  return Property;
}

void sub_18F082140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LOASAudioStream::ParseHeader(LOASAudioStream *this, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v20;
  unsigned int v21;
  char *v22;
  int v23;
  char *v24;
  size_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  char v41;
  int v42;
  unint64_t v43;
  int v44;
  BOOL v45;
  std::vector<char>::pointer begin;
  size_t v47;
  unsigned int v48;
  int v49;
  PacketDependencyParser *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD, _QWORD, uint64_t, void **);
  void (*v54)(_QWORD, _QWORD, uint64_t, void **);
  void (*v55)(_QWORD, _QWORD, uint64_t, void **);
  int v56;
  void (*v57)(_QWORD, _QWORD, uint64_t, void **);
  void (*v58)(_QWORD, _QWORD, uint64_t, void **);
  void (*v59)(_QWORD, _QWORD, uint64_t, void **);
  void (*v60)(_QWORD, _QWORD, uint64_t, void **);
  void (*v61)(_QWORD, _QWORD, uint64_t, void **);
  unsigned int v62;
  int v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  _DWORD *v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  int v86;
  int v87;
  int v88;
  UInt32 ioPropertyDataSize;
  void *__p[3];
  UInt32 outPropertyDataSize;
  AudioFormatInfo inSpecifier;
  unsigned int v94;
  AudioStreamBasicDescription v95;
  std::vector<char> v96;
  _QWORD v97[2];
  uint64_t v98;
  unsigned int v99;
  __int16 v100[2];
  _DWORD v101[9];

  v4 = 1718449215;
  v5 = *((_DWORD *)this + 59);
  if (v5 <= 87)
  {
    if (v5 == -1)
      return 0;
    if (!v5)
      goto LABEL_10;
    goto LABEL_7;
  }
  if (v5 == 105)
  {
    v6 = *((_QWORD *)this + 1);
    LODWORD(v7) = *(_DWORD *)(v6 + 116);
    goto LABEL_38;
  }
  if (v5 == 88)
  {
    while (1)
    {
      while (1)
      {
LABEL_10:
        v8 = *((_QWORD *)this + 1);
        v9 = *(_QWORD *)(v8 + 88);
        v10 = *(_QWORD *)(v8 + 96);
        v11 = v9 + *(unsigned int *)(v8 + 80);
        v12 = v10 < v9 || v11 <= v10;
        if (v12 || (_DWORD)v11 == (_DWORD)v10)
        {
          v4 = 0;
          v72 = 88;
          goto LABEL_153;
        }
        *((_BYTE *)this + 648) = 0;
        *((_DWORD *)this + 163) = 0;
        *((_DWORD *)this + 116) = 0;
        v13 = LOASAudioStream::ScanForSyncWord(this, (int)v11 - (int)v10, (const unsigned __int8 *)(*(_QWORD *)(v8 + 72) + (v10 - v9)), (unsigned int *)this + 163, (unsigned int *)this + 116, 0, (unsigned int *)&inSpecifier);
        *((_BYTE *)this + 648) = v13;
        v14 = *((unsigned int *)this + 116);
        *((_DWORD *)this + 64) = v14;
        v6 = *((_QWORD *)this + 1);
        v15 = *(unsigned int *)(v6 + 80);
        v16 = *(_QWORD *)(v6 + 88);
        v17 = *(_QWORD *)(v6 + 96);
        v18 = v16 + v15;
        v20 = v17 < v16 || v18 <= v17;
        v21 = v18 - v17;
        if (v20)
          v7 = 0;
        else
          v7 = v21;
        if (v7 < v14)
        {
          *((_QWORD *)this + 34) = v17;
          v22 = *(char **)(v6 + 72);
          if (v22 == *(char **)(v6 + 128))
          {
            if (v21)
              v23 = v20;
            else
              v23 = 1;
            if (v23)
              v24 = 0;
            else
              v24 = &v22[(v17 - v16)];
            memmove(v22, v24, v7);
            v25 = *((unsigned int *)this + 116);
            v6 = *((_QWORD *)this + 1);
            if (*(_DWORD *)(v6 + 120) < v25)
            {
              *(_DWORD *)(v6 + 120) = v25;
              CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v25);
              v6 = *((_QWORD *)this + 1);
            }
            *(_DWORD *)(v6 + 116) = v7;
            *(_QWORD *)(v6 + 96) = *(_QWORD *)(v6 + 88) + *(unsigned int *)(v6 + 80);
          }
          else
          {
            if (*(_DWORD *)(v6 + 120) < v14)
            {
              *(_DWORD *)(v6 + 120) = v14;
              CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v14);
              v6 = *((_QWORD *)this + 1);
            }
            LODWORD(v7) = 0;
            *(_DWORD *)(v6 + 116) = 0;
          }
LABEL_38:
          v26 = *((_DWORD *)this + 64) - v7;
          v27 = *(_QWORD *)(v6 + 88);
          v28 = *(_QWORD *)(v6 + 96);
          v29 = v27 + *(unsigned int *)(v6 + 80);
          if (v29 <= v28 || v28 < v27)
            v31 = 0;
          else
            v31 = v29 - v28;
          if (v26 <= v31)
            v26 = v31;
          LODWORD(inSpecifier.mASBD.mSampleRate) = v26;
          v32 = v26 + v7;
          if (*(_DWORD *)(v6 + 120) < v32)
          {
            *(_DWORD *)(v6 + 120) = v32;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v32);
            v6 = *((_QWORD *)this + 1);
          }
          StreamBuffer::Copy((_QWORD *)(v6 + 72), (unsigned int *)&inSpecifier, (unsigned __int8 *)(*(_QWORD *)(v6 + 128) + *(unsigned int *)(v6 + 116)));
          v6 = *((_QWORD *)this + 1);
          LODWORD(v15) = *(_DWORD *)(v6 + 116) + LODWORD(inSpecifier.mASBD.mSampleRate);
          *(_DWORD *)(v6 + 116) = v15;
          if (v15 < *((_DWORD *)this + 64))
          {
            v4 = 0;
            v72 = 105;
            goto LABEL_153;
          }
          v16 = *((_QWORD *)this + 34);
          v33 = *(_QWORD *)(v6 + 128);
          *(_QWORD *)(v6 + 88) = v16;
          *(_QWORD *)(v6 + 96) = v16;
          *(_QWORD *)(v6 + 72) = v33;
          *(_DWORD *)(v6 + 80) = v15;
          v13 = *((unsigned __int8 *)this + 648);
          v17 = v16;
        }
        v34 = v16 + v15;
        if (v13)
          break;
        *(_QWORD *)(v6 + 96) = v34;
      }
      if (*((_BYTE *)this + 405) && !*((_BYTE *)this + 404))
      {
        *((_QWORD *)this + 13) = v17 + *((unsigned int *)this + 163);
        *((_BYTE *)this + 404) = 1;
      }
      v35 = 0;
      v36 = v17 < v16 || v34 <= v17;
      v37 = v36;
      v38 = v34 - v17;
      if (!v36 && v38)
        v35 = *(_QWORD *)(v6 + 72) + (v17 - v16);
      v99 = 0;
      v100[0] = 1;
      *(_QWORD *)v101 = 0;
      *(_DWORD *)((char *)&v101[1] + 3) = 0;
      memset(&v101[3], 0, 24);
      if (v37)
        v39 = 0;
      else
        v39 = v38;
      v97[0] = v35;
      v97[1] = v35 + v39;
      v98 = 0;
      if ((v35 & 3) != 0 && (_DWORD)v39)
      {
        v40 = 0;
        v41 = v35 + 1;
        v42 = -8;
        v43 = v35 + 1;
        do
        {
          LODWORD(v98) = v40 << 8;
          HIDWORD(v98) = v42 + 16;
          v97[0] = v43;
          v44 = *(unsigned __int8 *)(v43 - 1) | (v40 << 8);
          LODWORD(v98) = v44;
          v42 += 8;
          if ((v41 & 3) == 0)
            break;
          ++v41;
          v40 = v44;
          v45 = v43++ >= v35 + v39;
        }
        while (!v45);
        LODWORD(v98) = v44 << (24 - v42);
      }
      if (MP4::LOASHeader::Deserialize(&v99, (uint64_t)v97))
        goto LABEL_119;
      memset(&v96, 0, sizeof(v96));
      memset(&v95, 0, sizeof(v95));
      v94 = -65536;
      if (MP4::LATMHeader::StreamFormatInfo((uint64_t)v100, (unsigned __int8 *)(v35 + 3), (int)v39 - 3, (std::vector<char> *)this + 14, &v96, &v95, &v94))
      {
        (*(void (**)(LOASAudioStream *, AudioStreamBasicDescription *))(*(_QWORD *)this + 56))(this, &v95);
        begin = v96.__begin_;
        v47 = v96.__end_ - v96.__begin_;
        CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 15, (LODWORD(v96.__end_) - LODWORD(v96.__begin_)), 0);
        memcpy(*((void **)this + 15), begin, v47);
        *((_DWORD *)this + 32) = v47;
        v48 = v94;
        if (v94 != -65536)
        {
          CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 17, 0x20uLL, 0);
          bzero(*((void **)this + 17), 0x20uLL);
          *((_DWORD *)this + 36) = 32;
          **((_DWORD **)this + 17) = v48;
        }
        memset(&inSpecifier, 0, 40);
        inSpecifier.mASBD.mFormatID = v95.mFormatID;
        inSpecifier.mMagicCookie = begin;
        *(_QWORD *)&inSpecifier.mMagicCookieSize = v47;
        outPropertyDataSize = 0;
        v49 = 0;
        if (!AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, &inSpecifier, &outPropertyDataSize)
          && outPropertyDataSize >= 0x30)
        {
          std::vector<AudioFormatListItem>::vector(__p, outPropertyDataSize / 0x30uLL);
          v49 = 0;
          if (!AudioFormatProperty_FormatList(&inSpecifier, 0x38u, &outPropertyDataSize, (AudioFormatListItem *)__p[0]))
          {
            v49 = 1;
            (*(void (**)(LOASAudioStream *, _QWORD, void *))(*(_QWORD *)this + 64))(this, outPropertyDataSize, __p[0]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        ioPropertyDataSize = 4;
        AudioFormatGetProperty(0x66646570u, 0x28u, &v95, &ioPropertyDataSize, (char *)this + 632);
        if (*((_DWORD *)this + 158))
        {
          v50 = (PacketDependencyParser *)operator new();
          PacketDependencyParser::PacketDependencyParser(v50, &v95, *((unsigned __int8 **)this + 15), *((_DWORD *)this + 32));
          *((_QWORD *)this + 80) = v50;
        }
        v51 = *((_QWORD *)this + 1);
        v52 = *(_QWORD *)(v51 + 96) + *((unsigned int *)this + 163);
        if (!*((_BYTE *)this + 404))
        {
          *((_QWORD *)this + 13) = v52;
          *((_BYTE *)this + 404) = 1;
        }
        *(_QWORD *)(v51 + 96) = v52;
        LODWORD(__p[0]) = 1;
        if (!*(_BYTE *)(v51 + 104))
        {
          *(_BYTE *)(v51 + 104) = 1;
          v53 = *(void (**)(_QWORD, _QWORD, uint64_t, void **))(v51 + 24);
          if (v53)
          {
            v53(*(_QWORD *)(v51 + 40), *(unsigned int *)(v51 + 8), 1717988724, __p);
            v51 = *((_QWORD *)this + 1);
          }
        }
        LODWORD(__p[0]) = 1;
        v54 = *(void (**)(_QWORD, _QWORD, uint64_t, void **))(v51 + 24);
        if (v54)
        {
          v54(*(_QWORD *)(v51 + 40), *(unsigned int *)(v51 + 8), 1685022310, __p);
          v51 = *((_QWORD *)this + 1);
          v55 = *(void (**)(_QWORD, _QWORD, uint64_t, void **))(v51 + 24);
          LODWORD(__p[0]) = 1;
          if (v55)
          {
            v55(*(_QWORD *)(v51 + 40), *(unsigned int *)(v51 + 8), 1920098672, __p);
            v51 = *((_QWORD *)this + 1);
          }
        }
        else
        {
          LODWORD(__p[0]) = 1;
        }
        LODWORD(__p[0]) = 1;
        if (!*(_BYTE *)(v51 + 105))
        {
          *(_BYTE *)(v51 + 105) = 1;
          v57 = *(void (**)(_QWORD, _QWORD, uint64_t, void **))(v51 + 24);
          if (v57)
          {
            v57(*(_QWORD *)(v51 + 40), *(unsigned int *)(v51 + 8), 1684434292, __p);
            v51 = *((_QWORD *)this + 1);
          }
        }
        if (*((_DWORD *)this + 32))
        {
          LODWORD(__p[0]) = 1;
          *(_BYTE *)(v51 + 108) = 1;
          v58 = *(void (**)(_QWORD, _QWORD, uint64_t, void **))(v51 + 24);
          if (v58)
          {
            v58(*(_QWORD *)(v51 + 40), *(unsigned int *)(v51 + 8), 1835493731, __p);
            v51 = *((_QWORD *)this + 1);
          }
        }
        if (v48 != -65536)
        {
          LODWORD(__p[0]) = 1;
          if (!*(_BYTE *)(v51 + 109))
          {
            *(_BYTE *)(v51 + 109) = 1;
            v59 = *(void (**)(_QWORD, _QWORD, uint64_t, void **))(v51 + 24);
            if (v59)
            {
              v59(*(_QWORD *)(v51 + 40), *(unsigned int *)(v51 + 8), 1668112752, __p);
              v51 = *((_QWORD *)this + 1);
            }
          }
        }
        if (v49)
        {
          LODWORD(__p[0]) = 1;
          *(_BYTE *)(v51 + 108) = 1;
          v60 = *(void (**)(_QWORD, _QWORD, uint64_t, void **))(v51 + 24);
          if (v60)
          {
            v60(*(_QWORD *)(v51 + 40), *(unsigned int *)(v51 + 8), 1718383476, __p);
            v51 = *((_QWORD *)this + 1);
          }
        }
        LODWORD(__p[0]) = 1;
        if (!*(_DWORD *)(v51 + 112))
        {
          *(_DWORD *)(v51 + 112) = 1;
          v61 = *(void (**)(_QWORD, _QWORD, uint64_t, void **))(v51 + 24);
          if (v61)
            v61(*(_QWORD *)(v51 + 40), *(unsigned int *)(v51 + 8), 1919247481, __p);
        }
        v56 = 4;
        goto LABEL_134;
      }
      if (!*((_BYTE *)this + 405))
        goto LABEL_133;
      if (*((_DWORD *)this + 102) < 0x2EEu)
        break;
      *((_DWORD *)this + 59) = -1;
      v56 = 1;
LABEL_134:
      if (v96.__begin_)
        operator delete(v96.__begin_);
      if (v56)
      {
        if (v56 != 1)
        {
          v80 = 0;
          *(_QWORD *)a2 = this;
          *(_OWORD *)(a2 + 8) = xmmword_18F116F70;
          v81 = *((_QWORD *)this + 1);
          v82 = *(_QWORD *)(v81 + 88);
          v83 = *(_QWORD *)(v81 + 96);
          v84 = v82 + *(unsigned int *)(v81 + 80);
          v85 = v83 < v82 || v84 <= v83;
          v86 = v85;
          v87 = v84 - v83;
          if (!v85 && v87)
            v80 = *(_QWORD *)(v81 + 72) + (v83 - v82);
          v4 = 0;
          *(_QWORD *)(a2 + 32) = v80;
          if (v86)
            v88 = 0;
          else
            v88 = v87;
          *(_DWORD *)(a2 + 24) = v88;
        }
        return v4;
      }
    }
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = (char *)*((_QWORD *)this + 55);
    v66 = (char *)*((_QWORD *)this + 56);
    v67 = (v66 - v65) >> 4;
    if (v66 != v65)
    {
      v64 = *((_QWORD *)v66 - 2);
      v63 = *((_DWORD *)v66 - 2);
      v62 = *((_DWORD *)v66 - 1);
    }
    v68 = v64 + v62;
    v69 = *((_DWORD *)this + 116);
    v70 = *((_QWORD *)this + 57);
    if ((unint64_t)v66 >= v70)
    {
      v73 = v67 + 1;
      v74 = (unint64_t)(v67 + 1) >> 60;
      if (v74)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v75 = 0;
      v76 = v70 - (_QWORD)v65;
      if (v76 >> 3 > v73)
        v73 = v76 >> 3;
      v45 = (unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0;
      v77 = 0xFFFFFFFFFFFFFFFLL;
      if (!v45)
        v77 = v73;
      if (v77)
      {
        v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v77);
        v65 = (char *)*((_QWORD *)this + 55);
        v66 = (char *)*((_QWORD *)this + 56);
      }
      v78 = v74 + 16 * v67;
      *(_QWORD *)v78 = v68;
      v79 = v74 + 16 * v75;
      *(_DWORD *)(v78 + 8) = v63;
      *(_DWORD *)(v78 + 12) = v69;
      v71 = (_DWORD *)(v78 + 16);
      if (v66 != v65)
      {
        do
        {
          *(_OWORD *)(v78 - 16) = *((_OWORD *)v66 - 1);
          v78 -= 16;
          v66 -= 16;
        }
        while (v66 != v65);
        v65 = (char *)*((_QWORD *)this + 55);
      }
      *((_QWORD *)this + 55) = v78;
      *((_QWORD *)this + 56) = v71;
      *((_QWORD *)this + 57) = v79;
      if (v65)
        operator delete(v65);
    }
    else
    {
      *(_QWORD *)v66 = v68;
      v71 = v66 + 16;
      *((_DWORD *)v66 + 2) = v63;
      *((_DWORD *)v66 + 3) = v69;
    }
    *((_QWORD *)this + 56) = v71;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)this + 416, *((char **)this + 53), (char *)v35, (char *)(v35 + *((unsigned int *)this + 116)), *((unsigned int *)this + 116));
    ++*((_DWORD *)this + 102);
LABEL_133:
    v56 = 0;
    *(_QWORD *)(*((_QWORD *)this + 1) + 96) += *((unsigned int *)this + 163)
                                               + (unint64_t)*((unsigned int *)this + 116);
    *((_BYTE *)this + 648) = 0;
    goto LABEL_134;
  }
LABEL_7:
  v4 = 0;
LABEL_119:
  v72 = -1;
LABEL_153:
  *((_DWORD *)this + 59) = v72;
  return v4;
}

void sub_18F082A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)(v12 + 48);
  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t LOASAudioStream::GeneratePackets(LOASAudioStream *this)
{
  LOASAudioStream *v1;
  int v2;
  size_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t result;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v20;
  unsigned int v21;
  size_t v22;
  uint64_t v23;
  const void *v24;
  size_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v31;
  size_t v32;
  uint64_t v33;
  const void *v34;
  unsigned int *v36;
  size_t v37;
  uint64_t v38;
  __int16 v39;
  unsigned int v40;
  int v41;
  int v42;
  AudioStreamPacketDescription *v43;
  int v44;
  unsigned int v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v51;
  unsigned int v52;
  char *v53;
  int v54;
  char *v55;
  size_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v62;
  size_t v63;
  uint64_t v64;
  const void *v65;
  _WORD *v66;
  uint64_t v69;
  uint64_t v70;
  _BOOL4 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  void (*v78)(_QWORD, _QWORD, uint64_t, unsigned int *);
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  BOOL v87;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  int v100;
  const unsigned __int8 *v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  char v105;
  unsigned int v106;
  unsigned int v107;
  int v109;
  char v110;
  int v111;
  unint64_t v112;
  int v113;
  unsigned int *v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  MP4::LOASHeader *v120;
  int v121;
  int v124;
  int v125;
  unsigned int v126;
  LOASAudioStream *v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  int v138;
  AudioStreamPacketDescription *v139;
  int v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v145;
  unsigned int v146;
  size_t v147;
  _BOOL4 v148;
  int v149;
  int v150;
  int v151;
  BOOL v152;
  int v153;
  int v154;
  _BOOL4 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  unsigned int v165;
  int v166;
  unsigned int v168;
  const unsigned __int8 *v169;
  int v170;
  int v171;
  unsigned int v172;
  __int16 v173;
  _DWORD v174[9];
  unsigned int v175[2];
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179[2];

  v1 = this;
  v2 = *((_DWORD *)this + 59);
  if (v2 <= 404)
  {
    if (v2 <= 397)
    {
      if (v2 == -1)
        return 0;
      if (v2)
        goto LABEL_18;
      v5 = *((_DWORD *)this + 102);
      if (!v5)
        goto LABEL_25;
      if (!LOASAudioStream::ConsolidateAccessUnitsAndCallPacketsProc(this, *((_DWORD *)this + 106) - *((_QWORD *)this + 52), v5, *((_QWORD *)this + 52), *((AudioStreamPacketDescription **)this + 55)))
      {
        *((_QWORD *)v1 + 23) += *((unsigned int *)v1 + 102);
        *((_DWORD *)v1 + 102) = 0;
        *((_QWORD *)v1 + 56) = *((_QWORD *)v1 + 55);
        *((_QWORD *)v1 + 53) = *((_QWORD *)v1 + 52);
        goto LABEL_25;
      }
      goto LABEL_22;
    }
    if (v2 == 398)
      goto LABEL_140;
    if (v2 != 402)
      goto LABEL_18;
LABEL_27:
    while (2)
    {
      v12 = *((_QWORD *)v1 + 1);
      v17 = *(_QWORD *)(v12 + 88);
      v16 = *(_QWORD *)(v12 + 96);
      v18 = v17 + *(unsigned int *)(v12 + 80);
      v13 = v18 - v16;
      v20 = v16 < v17 || v18 <= v16 || (_DWORD)v18 == (_DWORD)v16;
      if (v20)
      {
        result = 0;
        v14 = 402;
        goto LABEL_24;
      }
      if (!*((_BYTE *)v1 + 488))
        goto LABEL_72;
      v21 = *((unsigned __int8 *)v1 + 489);
      v22 = 3 - v21;
      *((_DWORD *)v1 + 64) = v22;
      if (v22 <= v13)
        goto LABEL_58;
      *((_QWORD *)v1 + 34) = v16;
      v23 = *(_QWORD *)(v12 + 72);
      if (v23 == *(_QWORD *)(v12 + 128))
      {
        if (v13)
          v24 = (const void *)(v23 + (v16 - v17));
        else
          v24 = 0;
        memmove(*(void **)(v12 + 72), v24, v13);
        v25 = 3 - *((unsigned __int8 *)v1 + 489);
        v12 = *((_QWORD *)v1 + 1);
        if (*(_DWORD *)(v12 + 120) < v25)
        {
          *(_DWORD *)(v12 + 120) = v25;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v25);
          v12 = *((_QWORD *)v1 + 1);
        }
        *(_DWORD *)(v12 + 116) = v13;
        *(_QWORD *)(v12 + 96) = *(_QWORD *)(v12 + 88) + *(unsigned int *)(v12 + 80);
      }
      else
      {
        if (*(_DWORD *)(v12 + 120) < v22)
        {
          *(_DWORD *)(v12 + 120) = v22;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v22);
          v12 = *((_QWORD *)v1 + 1);
        }
        v13 = 0;
        *(_DWORD *)(v12 + 116) = 0;
      }
LABEL_46:
      v26 = *((_DWORD *)v1 + 64) - v13;
      v27 = *(_QWORD *)(v12 + 88);
      v28 = *(_QWORD *)(v12 + 96);
      v29 = v27 + *(unsigned int *)(v12 + 80);
      if (v29 <= v28 || v28 < v27)
        v31 = 0;
      else
        v31 = v29 - v28;
      if (v26 <= v31)
        v26 = v31;
      v172 = v26;
      v32 = v26 + v13;
      if (*(_DWORD *)(v12 + 120) < v32)
      {
        *(_DWORD *)(v12 + 120) = v32;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v32);
        v12 = *((_QWORD *)v1 + 1);
      }
      StreamBuffer::Copy((_QWORD *)(v12 + 72), &v172, (unsigned __int8 *)(*(_QWORD *)(v12 + 128) + *(unsigned int *)(v12 + 116)));
      v12 = *((_QWORD *)v1 + 1);
      v13 = *(_DWORD *)(v12 + 116) + v172;
      *(_DWORD *)(v12 + 116) = v13;
      if (v13 < *((_DWORD *)v1 + 64))
      {
        result = 0;
        v14 = 405;
        goto LABEL_24;
      }
      v16 = *((_QWORD *)v1 + 34);
      v33 = *(_QWORD *)(v12 + 128);
      *(_QWORD *)(v12 + 88) = v16;
      *(_QWORD *)(v12 + 96) = v16;
      *(_QWORD *)(v12 + 72) = v33;
      *(_DWORD *)(v12 + 80) = v13;
      v21 = *((unsigned __int8 *)v1 + 489);
      v18 = v16 + v13;
      v17 = v16;
LABEL_58:
      v34 = 0;
      if (v16 >= v17 && v16 < v18 && v13 != 0)
        v34 = (const void *)(*(_QWORD *)(v12 + 72) + (v16 - v17));
      memcpy((char *)v1 + v21 + 490, v34, 3 - v21);
      if (!MP4::LOASHeader::IsLOASSyncWord((LOASAudioStream *)((char *)v1 + 490), (const unsigned __int8 *)3, (_DWORD *)v1 + 119, v36))
      {
LABEL_71:
        *((_WORD *)v1 + 244) = 0;
LABEL_72:
        if (!*((_BYTE *)v1 + 493))
          goto LABEL_157;
        v45 = *((_DWORD *)v1 + 124);
        v46 = 10 - v45;
        *((_DWORD *)v1 + 64) = v46;
        v10 = *((_QWORD *)v1 + 1);
        v48 = *(_QWORD *)(v10 + 88);
        v47 = *(_QWORD *)(v10 + 96);
        v49 = v48 + *(unsigned int *)(v10 + 80);
        v51 = v47 < v48 || v49 <= v47;
        v52 = v49 - v47;
        if (v51)
          v11 = 0;
        else
          v11 = v52;
        if (v11 >= v46)
        {
LABEL_108:
          v65 = 0;
          v66 = (_WORD *)((char *)v1 + 500);
          if (v47 >= v48 && v47 < v49 && v52)
            v65 = (const void *)(*(_QWORD *)(v10 + 72) + (v47 - v48));
          memcpy((char *)v1 + v45 + 500, v65, 10 - v45);
          if (*v66 != 17481 || *((_BYTE *)v1 + 502) != 51)
          {
            if (*v66 != 16724 || *((_BYTE *)v1 + 502) != 71)
            {
LABEL_156:
              *((_DWORD *)v1 + 124) = 0;
              *((_BYTE *)v1 + 493) = 0;
LABEL_157:
              *((_DWORD *)v1 + 121) = 0;
              v94 = *((_QWORD *)v1 + 1);
              v95 = *(unsigned int *)(v94 + 80);
              v96 = *(_QWORD *)(v94 + 88);
              v97 = *(_QWORD *)(v94 + 96);
              v98 = v96 + v95;
              v99 = v97 < v96 || v98 <= v97;
              v100 = v99;
              if (v99 || (_DWORD)v98 == (_DWORD)v97)
                v101 = 0;
              else
                v101 = (const unsigned __int8 *)(*(_QWORD *)(v94 + 72) + (v97 - v96));
              v102 = 0;
              v103 = 0;
              if (!v100)
                LODWORD(v95) = v97 - v96;
              v166 = v95;
              if (v100)
                v104 = 0;
              else
                v104 = v98 - v97;
              *(_QWORD *)v179 = 0;
              v20 = *((_BYTE *)v1 + 468) == 0;
              v178 = 0;
              if (v20)
                v105 = 3;
              else
                v105 = 0;
              *((_BYTE *)v1 + 480) = 0;
              *((_DWORD *)v1 + 130) = 0;
              v169 = v101 + 1;
              while (LOASAudioStream::ScanForSyncWord(v1, v104, v101, &v179[1], v179, v105, &v178))
              {
                v107 = v179[0];
                v106 = v179[1];
                if (v104 - v179[1] < v179[0])
                {
                  *((_BYTE *)v1 + 480) = 1;
                  *((_DWORD *)v1 + 118) = v106 + v166;
                  *((_DWORD *)v1 + 119) = v107;
                  v179[1] = v107 + v106;
                  v102 = v106;
                }
                else
                {
                  if (!*((_BYTE *)v1 + 468))
                    goto LABEL_218;
                  *(_QWORD *)v175 = &v101[v179[1]];
                  v176 = *(_QWORD *)v175 + v179[0];
                  v177 = 0;
                  if ((v175[0] & 3) != 0 && v179[0] != 0)
                  {
                    v109 = 0;
                    v110 = (_BYTE)v169 + LOBYTE(v179[1]);
                    v111 = -8;
                    v112 = (unint64_t)&v169[v179[1]];
                    do
                    {
                      LODWORD(v177) = v109 << 8;
                      HIDWORD(v177) = v111 + 16;
                      *(_QWORD *)v175 = v112;
                      v113 = *(unsigned __int8 *)(v112 - 1) | (v109 << 8);
                      LODWORD(v177) = v113;
                      v111 += 8;
                      if ((v110 & 3) == 0)
                        break;
                      ++v110;
                      v109 = v113;
                      v91 = v112++ >= (unint64_t)&v101[v179[1] + v179[0]];
                    }
                    while (!v91);
                    LODWORD(v177) = v113 << (24 - v111);
                  }
                  v172 = 0;
                  v173 = 1;
                  *(_QWORD *)v174 = 0;
                  *(_DWORD *)((char *)&v174[1] + 3) = 0;
                  memset(&v174[3], 0, 24);
                  if (!MP4::LOASHeader::Deserialize(&v172, (uint64_t)v175))
                  {
                    v115 = v103;
                    v168 = v102;
                    v116 = v107 + v106;
                    v117 = 4;
                    while (1)
                    {
                      v118 = v116;
                      v119 = v104 - v116;
                      if (v104 >= v116)
                      {
                        v118 = v116;
                        if (v119 >= 3)
                        {
                          v171 = 0;
                          v120 = (MP4::LOASHeader *)&v101[v116];
                          if (MP4::LOASHeader::IsLOASSyncWord(v120, (const unsigned __int8 *)(v104 - v116), &v171, v114))
                          {
                            v121 = v171;
                            if (__CFADD__(v116, v171))
                              v121 = 0;
LABEL_212:
                            v118 = v121 + v116;
                            goto LABEL_213;
                          }
                          if ((*(_WORD *)v120 != 17481 || *((_BYTE *)v120 + 2) != 51)
                            && (*(_WORD *)v120 != 16724 || *((_BYTE *)v120 + 2) != 71))
                          {
LABEL_222:
                            v102 = v168;
                            v103 = v115;
                            v1 = this;
                            break;
                          }
                          v118 = v116;
                          if (v119 >= 0xA)
                          {
                            v170 = 0;
                            v124 = ID3Size(0xAu, &v101[v116], &v170);
                            if (__CFADD__(v116, v124))
                              v121 = 0;
                            else
                              v121 = v124;
                            if (!v124)
                              goto LABEL_222;
                            goto LABEL_212;
                          }
                        }
                      }
LABEL_213:
                      if (v118 == v116)
                        v116 = v104;
                      else
                        v116 = v118;
                      if (!--v117)
                      {
                        *((_BYTE *)this + 468) = 0;
                        v106 = v179[1];
                        LODWORD(v103) = v115;
                        v1 = this;
                        goto LABEL_218;
                      }
                    }
                  }
                  v106 = v179[1];
                  if (*((_BYTE *)v1 + 468))
                  {
                    ++v179[1];
                  }
                  else
                  {
LABEL_218:
                    v125 = *((_DWORD *)v1 + 121);
                    if (v125)
                      v103 = v103;
                    else
                      v103 = v106;
                    *((_DWORD *)v1 + 121) = v125 + 1;
                    v102 = v179[0] + v106;
                    v179[1] = v179[0] + v106;
                    v105 = 3;
                  }
                }
              }
              *((_DWORD *)v1 + 130) = v178;
              v126 = *((_DWORD *)v1 + 121);
              if (!v126)
              {
LABEL_234:
                v134 = *((_QWORD *)v1 + 1);
                v135 = *(_QWORD *)(v134 + 96) + v102;
                *(_QWORD *)(v134 + 96) = v135;
                if (*((_BYTE *)v1 + 480))
                {
                  v3 = *((unsigned int *)v1 + 119);
                  if (*((_DWORD *)v1 + 71) < v3)
                  {
                    *((_DWORD *)v1 + 71) = v3;
                    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)v1 + 36, v3, 0);
                    LODWORD(v3) = *((_DWORD *)v1 + 119);
                  }
                  *((_DWORD *)v1 + 64) = v3;
                  v4 = (unsigned __int8 *)*((_QWORD *)v1 + 36);
                  *((_QWORD *)v1 + 33) = v4;
                  goto LABEL_238;
                }
                v141 = 0;
                v142 = *(_QWORD *)(v134 + 88);
                v143 = v142 + *(unsigned int *)(v134 + 80);
                v145 = v135 < v142 || v143 <= v135;
                v146 = v143 - v135;
                if (v145)
                  v147 = 0;
                else
                  v147 = v146;
                if (!v145 && v146)
                  v141 = (_BYTE *)(*(_QWORD *)(v134 + 72) + (v135 - v142));
                if ((_DWORD)v147 == 1)
                {
                  v148 = *v141 == 86;
                  *((_BYTE *)v1 + 488) = v148;
                  v153 = *v141;
                  v152 = v153 == 73 || v153 == 84;
                }
                else
                {
                  if ((_DWORD)v147 != 2)
                  {
                    *((_BYTE *)v1 + 488) = 0;
                    if ((v147 - 3) > 6)
                    {
                      *((_BYTE *)v1 + 493) = 0;
                      goto LABEL_283;
                    }
                    v154 = *v141;
                    if (v154 == 84)
                    {
                      v155 = 0;
                      if (v141[1] == 65)
                        v155 = v141[2] == 71;
                    }
                    else
                    {
                      v155 = 0;
                      if (v154 == 73)
                      {
                        if (v141[1] != 68 || (v155 = 1, v141[2] != 51))
                          v155 = 0;
                      }
                    }
                    *((_BYTE *)v1 + 493) = v155;
                    if (!v155)
                      goto LABEL_283;
LABEL_272:
                    *((_DWORD *)v1 + 124) = v147;
                    *((_WORD *)v1 + 254) = 0;
                    *(_QWORD *)((char *)v1 + 500) = 0;
                    memcpy((char *)v1 + 500, v141, v147);
LABEL_283:
                    *(_QWORD *)(v134 + 96) = *(_QWORD *)(v134 + 88) + *(unsigned int *)(v134 + 80);
LABEL_25:
                    v15 = *((_DWORD *)v1 + 130);
                    if (!v15)
                      continue;
                    *((_DWORD *)v1 + 64) = v15;
LABEL_140:
                    while (1)
                    {
                      v82 = *((_QWORD *)v1 + 1);
                      v84 = *(_QWORD *)(v82 + 88);
                      v83 = *(_QWORD *)(v82 + 96);
                      v85 = v84 + *(unsigned int *)(v82 + 80);
                      v86 = v85 - v83;
                      v87 = v83 < v84 || v85 <= v83;
                      if (v87 || (_DWORD)v85 == (_DWORD)v83)
                        break;
                      v89 = *((unsigned int *)v1 + 64);
                      v90 = v83 + v89;
                      v91 = v89 >= v86;
                      v92 = v89 - v86;
                      if (v91)
                        v90 = v85;
                      if (v91)
                        v93 = v92;
                      else
                        v93 = 0;
                      *(_QWORD *)(v82 + 96) = v90;
                      *((_DWORD *)v1 + 64) = v93;
                      if (!v93)
                      {
                        *((_DWORD *)v1 + 130) = 0;
                        goto LABEL_27;
                      }
                    }
                    result = 0;
                    v14 = 398;
                    goto LABEL_24;
                  }
                  v148 = 0;
                  if (*v141 == 86)
                    v148 = v141[1] > 0xDFu;
                  *((_BYTE *)v1 + 488) = v148;
                  v149 = *v141;
                  v150 = 68;
                  if (v149 != 73)
                  {
                    v151 = 0;
                    if (v149 != 84)
                      goto LABEL_269;
                    v150 = 65;
                  }
                  v152 = v141[1] == v150;
                }
                v151 = v152;
LABEL_269:
                *((_BYTE *)v1 + 493) = v151;
                if (v148)
                {
                  *((_BYTE *)v1 + 489) = v147;
                  *((_WORD *)v1 + 245) = 0;
                  *((_BYTE *)v1 + 492) = 0;
                  memcpy((char *)v1 + 490, v141, v147);
                  v151 = *((unsigned __int8 *)v1 + 493);
                }
                if (!v151)
                  goto LABEL_283;
                goto LABEL_272;
              }
              v127 = v1;
              v128 = v103;
              if (*((_DWORD *)v127 + 50) < v126)
              {
                v129 = (1 << -(char)__clz(v126 - 1));
                *((_DWORD *)this + 50) = v129;
                CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)this + 24, v129);
              }
              v130 = 0;
              v172 = v128;
              v175[0] = 0;
              v1 = this;
              while (LOASAudioStream::ScanForSyncWord(this, v104, v101, &v172, v175, 1, &v179[1]))
              {
                v131 = v172;
                v132 = v175[0];
                if (v104 - v172 >= v175[0])
                {
                  v133 = *((_QWORD *)this + 24) + 16 * v130;
                  *(_QWORD *)v133 = v172;
                  *(_DWORD *)(v133 + 8) = 0;
                  *(_DWORD *)(v133 + 12) = v132;
                }
                v172 = v132 + v131;
                ++v130;
              }
              if (!LOASAudioStream::ConsolidateAccessUnitsAndCallPacketsProc(this, v102, *((_DWORD *)this + 121), (uint64_t)v101, *((AudioStreamPacketDescription **)this + 24)))
              {
                *((_QWORD *)this + 23) += *((unsigned int *)this + 121);
                goto LABEL_234;
              }
LABEL_22:
              result = 1718449215;
              goto LABEL_23;
            }
LABEL_134:
            v79 = ID3Size(0xAu, (const unsigned __int8 *)v1 + 500, (int *)v1 + 129);
            *((_DWORD *)v1 + 128) = v79;
            v80 = *((_DWORD *)v1 + 124);
            v81 = v79 - v80;
            if (v79 > v80)
            {
              while (1)
              {
                *((_DWORD *)v1 + 64) = v81;
                if (!v81)
                  goto LABEL_156;
LABEL_286:
                v156 = *((_QWORD *)v1 + 1);
                v158 = *(_QWORD *)(v156 + 88);
                v157 = *(_QWORD *)(v156 + 96);
                v159 = v158 + *(unsigned int *)(v156 + 80);
                if (v157 < v158 || v159 <= v157)
                  break;
                v161 = v159 - v157;
                if ((_DWORD)v159 == (_DWORD)v157)
                  break;
                v162 = *((unsigned int *)v1 + 64);
                v163 = v157 + v162;
                v164 = v162 >= v161;
                v165 = v162 - v161;
                if (v164)
                  v163 = v159;
                if (v164)
                  v81 = v165;
                else
                  v81 = 0;
                *(_QWORD *)(v156 + 96) = v163;
              }
              result = 0;
              v14 = 447;
              goto LABEL_24;
            }
            goto LABEL_156;
          }
          v69 = *((int *)v1 + 124);
          *((_DWORD *)v1 + 131) = -(int)v69;
          v70 = *((_QWORD *)v1 + 1);
          *((_QWORD *)v1 + 66) = *(_QWORD *)(v70 + 88) - v69;
          if (*((char *)v1 + 536) < 0)
          {
            v71 = 0;
            v72 = *(_QWORD *)(v70 + 48);
            v73 = *(_QWORD *)(v70 + 56) - v72;
            if (v73)
            {
              v74 = 0;
              v75 = v73 >> 2;
              v76 = 1;
              do
              {
                v20 = *(_DWORD *)(v72 + 4 * v74) == 1768174437;
                v71 = v20;
                v74 = v76++;
              }
              while (!v20 && v75 > v74);
            }
            *((_BYTE *)v1 + 536) = v71;
            if (!v71)
              goto LABEL_134;
          }
          else if (!*((_BYTE *)v1 + 536))
          {
            goto LABEL_134;
          }
          v172 = 0;
          v78 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v70 + 24);
          if (v78)
            v78(*(_QWORD *)(v70 + 40), *(unsigned int *)(v70 + 8), 1768174437, &v172);
          goto LABEL_134;
        }
        *((_QWORD *)v1 + 34) = v47;
        v53 = *(char **)(v10 + 72);
        if (v53 == *(char **)(v10 + 128))
        {
          if (v52)
            v54 = v51;
          else
            v54 = 1;
          if (v54)
            v55 = 0;
          else
            v55 = &v53[(v47 - v48)];
          memmove(v53, v55, v11);
          v56 = (10 - *((_DWORD *)v1 + 124));
          v10 = *((_QWORD *)v1 + 1);
          if (*(_DWORD *)(v10 + 120) < v56)
          {
            *(_DWORD *)(v10 + 120) = v56;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v56);
            v10 = *((_QWORD *)v1 + 1);
          }
          *(_DWORD *)(v10 + 116) = v11;
          *(_QWORD *)(v10 + 96) = *(_QWORD *)(v10 + 88) + *(unsigned int *)(v10 + 80);
        }
        else
        {
          if (*(_DWORD *)(v10 + 120) < v46)
          {
            *(_DWORD *)(v10 + 120) = v46;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v46);
            v10 = *((_QWORD *)v1 + 1);
          }
          LODWORD(v11) = 0;
          *(_DWORD *)(v10 + 116) = 0;
        }
LABEL_96:
        v57 = *((_DWORD *)v1 + 64) - v11;
        v58 = *(_QWORD *)(v10 + 88);
        v59 = *(_QWORD *)(v10 + 96);
        v60 = v58 + *(unsigned int *)(v10 + 80);
        if (v60 <= v59 || v59 < v58)
          v62 = 0;
        else
          v62 = v60 - v59;
        if (v57 <= v62)
          v57 = v62;
        v172 = v57;
        v63 = v57 + v11;
        if (*(_DWORD *)(v10 + 120) < v63)
        {
          *(_DWORD *)(v10 + 120) = v63;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v63);
          v10 = *((_QWORD *)v1 + 1);
        }
        StreamBuffer::Copy((_QWORD *)(v10 + 72), &v172, (unsigned __int8 *)(*(_QWORD *)(v10 + 128) + *(unsigned int *)(v10 + 116)));
        v10 = *((_QWORD *)v1 + 1);
        v52 = *(_DWORD *)(v10 + 116) + v172;
        *(_DWORD *)(v10 + 116) = v52;
        if (v52 < *((_DWORD *)v1 + 64))
        {
          result = 0;
          v14 = 433;
          goto LABEL_24;
        }
        v47 = *((_QWORD *)v1 + 34);
        v64 = *(_QWORD *)(v10 + 128);
        *(_QWORD *)(v10 + 88) = v47;
        *(_QWORD *)(v10 + 96) = v47;
        *(_QWORD *)(v10 + 72) = v64;
        *(_DWORD *)(v10 + 80) = v52;
        v45 = *((_DWORD *)v1 + 124);
        v49 = v47 + v52;
        v48 = v47;
        goto LABEL_108;
      }
      break;
    }
    v37 = *((unsigned int *)v1 + 119);
    if (*((_DWORD *)v1 + 71) < v37)
    {
      *((_DWORD *)v1 + 71) = v37;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)v1 + 36, v37, 0);
    }
    v38 = *((_QWORD *)v1 + 36);
    v39 = *((_WORD *)v1 + 245);
    *(_BYTE *)(v38 + 2) = *((_BYTE *)v1 + 492);
    *(_WORD *)v38 = v39;
    v7 = *((_QWORD *)v1 + 1);
    *(_QWORD *)(v7 + 96) = *(_QWORD *)(v7 + 96) - *((unsigned __int8 *)v1 + 489) + 3;
    v6 = *((_DWORD *)v1 + 119) - 3;
    *((_DWORD *)v1 + 64) = v6;
    v8 = (unsigned __int8 *)(*((_QWORD *)v1 + 36) + 3);
    *((_QWORD *)v1 + 33) = v8;
LABEL_68:
    v172 = v6;
    StreamBuffer::Copy((_QWORD *)(v7 + 72), &v172, v8);
    v40 = v172;
    v41 = *((_DWORD *)v1 + 64);
    *((_QWORD *)v1 + 33) += v172;
    v42 = v41 - v40;
    *((_DWORD *)v1 + 64) = v42;
    if (v42)
    {
      result = 0;
      v14 = 414;
      goto LABEL_24;
    }
    v43 = (AudioStreamPacketDescription *)*((_QWORD *)v1 + 24);
    v43->mStartOffset = 0;
    v44 = *((_DWORD *)v1 + 119);
    v43->mVariableFramesInPacket = 0;
    v43->mDataByteSize = v44;
    if (LOASAudioStream::ConsolidateAccessUnitsAndCallPacketsProc(v1, v44, 1u, *((_QWORD *)v1 + 36), v43))
      goto LABEL_22;
    ++*((_QWORD *)v1 + 23);
    goto LABEL_71;
  }
  if (v2 <= 432)
  {
    if (v2 != 405)
    {
      if (v2 != 414)
        goto LABEL_18;
      v6 = *((_DWORD *)this + 64);
      v7 = *((_QWORD *)this + 1);
      v8 = (unsigned __int8 *)*((_QWORD *)this + 33);
      goto LABEL_68;
    }
    v12 = *((_QWORD *)this + 1);
    v13 = *(_DWORD *)(v12 + 116);
    goto LABEL_46;
  }
  switch(v2)
  {
    case 433:
      v10 = *((_QWORD *)this + 1);
      LODWORD(v11) = *(_DWORD *)(v10 + 116);
      goto LABEL_96;
    case 447:
      goto LABEL_286;
    case 592:
      LODWORD(v3) = *((_DWORD *)this + 64);
      v4 = (unsigned __int8 *)*((_QWORD *)this + 33);
LABEL_238:
      v172 = v3;
      StreamBuffer::Copy((_QWORD *)(*((_QWORD *)v1 + 1) + 72), &v172, v4);
      v136 = v172;
      v137 = *((_DWORD *)v1 + 64);
      *((_QWORD *)v1 + 33) += v172;
      v138 = v137 - v136;
      *((_DWORD *)v1 + 64) = v138;
      if (v138)
      {
        result = 0;
        v14 = 592;
        goto LABEL_24;
      }
      if (!*((_DWORD *)v1 + 50))
      {
        *((_DWORD *)v1 + 50) = 1;
        CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)v1 + 24, 1);
      }
      v139 = (AudioStreamPacketDescription *)*((_QWORD *)v1 + 24);
      v139->mStartOffset = 0;
      v140 = *((_DWORD *)v1 + 119);
      v139->mVariableFramesInPacket = 0;
      v139->mDataByteSize = v140;
      if (!LOASAudioStream::ConsolidateAccessUnitsAndCallPacketsProc(v1, v140, 1u, *((_QWORD *)v1 + 36), v139))
      {
        ++*((_QWORD *)v1 + 23);
        goto LABEL_25;
      }
      goto LABEL_22;
  }
LABEL_18:
  result = 0;
LABEL_23:
  v14 = -1;
LABEL_24:
  *((_DWORD *)v1 + 59) = v14;
  return result;
}

uint64_t LOASAudioStream::RestrictsRandomAccess(LOASAudioStream *this)
{
  return *((unsigned int *)this + 158);
}

uint64_t LOASAudioStream::PacketToRollDistance(LOASAudioStream *this, AudioPacketRollDistanceTranslation *a2)
{
  a2->mRollDistance = 0;
  if (*((_BYTE *)this + 544) || *((_BYTE *)this + 600))
    return PacketToRollDistanceForRestrictedRandomAccess(a2, (LOASAudioStream *)((char *)this + 544), (LOASAudioStream *)((char *)this + 600));
  else
    return 0;
}

uint64_t LOASAudioStream::ScanForIndependentPacket(uint64_t a1, int a2, AudioIndependentPacketTranslation *a3)
{
  if (*(_DWORD *)(a1 + 632))
    return ScanForIndependentPacketWithRestrictedRandomAccess(a2 == 1, a3, (SampleToRollDistanceTable **)(a1 + 544), (SyncSampleTable **)(a1 + 600));
  else
    return AudioFileStreamObject::ScanForIndependentPacket(a1, a2, a3);
}

uint64_t LOASAudioStream::PacketToDependencyInfo(LOASAudioStream *this, AudioPacketDependencyInfoTranslation *a2)
{
  if (*((_DWORD *)this + 158))
    return PacketToDependencyInfoForRestrictedRandomAccess(a2, (LOASAudioStream *)((char *)this + 544), (LOASAudioStream *)((char *)this + 600));
  AudioFileStreamObject::PacketToDependencyInfo(this, a2);
  return 0;
}

uint64_t LOASAudioStream::HandleDiscontinuity(LOASAudioStream *this)
{
  *((_DWORD *)this + 59) = 0;
  *((_BYTE *)this + 468) = 1;
  *((_BYTE *)this + 480) = 0;
  *((_BYTE *)this + 488) = 0;
  *((_BYTE *)this + 493) = 0;
  *((_QWORD *)this + 73) = *((_QWORD *)this + 72);
  *((_QWORD *)this + 77) = *((_QWORD *)this + 76);
  return 0;
}

uint64_t LOASAudioStream::ConsolidateAccessUnitsAndCallPacketsProc(LOASAudioStream *this, int a2, unsigned int a3, uint64_t a4, AudioStreamPacketDescription *a5)
{
  AudioStreamPacketDescription *v9;
  int v10;
  unsigned int v11;
  UInt32 v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  AudioStreamPacketDescription *v21;
  SInt64 mStartOffset;
  unsigned __int8 *v23;
  uint64_t mDataByteSize;
  unsigned __int8 *v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[2];
  _QWORD v36[3];
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  void *__p;
  void *v41;

  std::vector<unsigned char>::vector(&__p, -3 * a3 + a2);
  if (a3)
  {
    v9 = (AudioStreamPacketDescription *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(a3);
    memmove(v9, a5, 16 * a3);
  }
  else
  {
    v9 = 0;
  }
  v38 = 0;
  v39 = a3;
  v10 = MP4::LOASHeader::CopyByteAlignedAccessUnitsFromAudioSyncStream(&v39, (uint64_t)v9, a4, (uint64_t)this + 336, __p, (int)v41 - (int)__p, &v38);
  v11 = v39;
  if (v39)
  {
    v12 = v38;
    if (v38)
    {
      if (*((_DWORD *)this + 158) && *((_QWORD *)this + 80))
      {
        v13 = (_BYTE *)*((_QWORD *)this + 73);
        v14 = *((_QWORD *)this + 72);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-v14] >> 3) >= 0x15)
        {
          v15 = (_BYTE *)(v14 + 8 * ((uint64_t)&v13[-v14] >> 3) - 480);
          v16 = v13 - v15;
          if (v13 != v15)
            memmove(*((void **)this + 72), v15, v13 - v15);
          *((_QWORD *)this + 73) = v14 + v16;
        }
        v17 = *((_QWORD *)this + 77);
        v18 = *((_QWORD *)this + 76);
        if ((unint64_t)(v17 - v18) >= 0xA1)
        {
          if (v17 != v17 - 160)
            memmove(*((void **)this + 76), (const void *)(v17 - 160), 0xA0uLL);
          *((_QWORD *)this + 77) = v18 + 160;
        }
        v19 = 0;
        if (v11 <= 1)
          v20 = 1;
        else
          v20 = v11;
        do
        {
          v21 = &v9[v19];
          mStartOffset = v21->mStartOffset;
          v23 = (unsigned __int8 *)__p + v21->mStartOffset;
          mDataByteSize = v21->mDataByteSize;
          v36[0] = v23;
          v36[1] = v23;
          v25 = &v23[mDataByteSize];
          v36[2] = v25;
          v37 = 0;
          if ((v23 & 3) != 0)
          {
            v26 = 0;
            v27 = (char *)__p + mStartOffset + 1;
            v28 = -8;
            do
            {
              v29 = v28;
              if (v23 >= v25)
                v30 = 255;
              else
                v30 = *v23;
              v26 = v30 | (v26 << 8);
              ++v23;
              v28 = v29 + 8;
            }
            while ((v27++ & 3) != 0);
            v36[0] = v23;
            LODWORD(v37) = v26 << (16 - v29);
            HIDWORD(v37) = v29 + 16;
          }
          v35[0] = 0;
          v35[1] = 0;
          PacketDependencyParser::PacketDependencyInfo(*((_DWORD **)this + 80), (uint64_t)v36, (uint64_t)v35);
          if (!LODWORD(v35[0]))
          {
            v33 = *((_QWORD *)this + 23) + v19;
            if (HIDWORD(v35[0]))
            {
              v34 = xmmword_18F117420;
              WORD4(v34) = WORD2(v35[0]);
              SampleToRollDistanceTable::append_entry((uint64_t)this + 544, (__int128 *)&v33);
            }
            else
            {
              SyncSampleTable::append_entry((uint64_t)this + 600, &v33);
            }
          }
          ++v19;
        }
        while (v19 != v20);
      }
      AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v12, v11, __p, v9, 1);
    }
  }
  if (v9)
    operator delete(v9);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  if (v10)
    return 1718449215;
  else
    return 0;
}

void sub_18F083C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LOASAudioStream::ScanForSyncWord(LOASAudioStream *this, int a2, const unsigned __int8 *a3, unsigned int *a4, unsigned int *a5, char a6, unsigned int *a7)
{
  signed int v9;
  signed int v10;
  unsigned __int8 *v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  void (*v26)(_QWORD, _QWORD, uint64_t, int *);
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t result;
  int v33;
  unsigned int v34;
  int v35;

  v9 = *a4;
  v34 = 0;
  *a5 = 0;
  *a7 = 0;
  v10 = a2 - 3;
  if (v9 <= a2 - 3)
  {
    do
    {
      v14 = (unsigned __int8 *)&a3[v9];
      v15 = a2 - v9;
      if (MP4::LOASHeader::IsLOASSyncWord((MP4::LOASHeader *)v14, (const unsigned __int8 *)(a2 - v9), &v34, a4))
      {
        *a5 = v34;
        result = 1;
        goto LABEL_37;
      }
      if ((a6 & 1) != 0)
      {
        v16 = *(_WORD *)v14 == 17481 && v14[2] == 51;
        if (v16)
        {
          if (v15 < 0xA)
            break;
          v18 = *((_QWORD *)this + 1);
          v19 = (_DWORD)v14 - *(_QWORD *)(v18 + 72);
          *((_DWORD *)this + 131) = v19;
          *((_QWORD *)this + 66) = *(_QWORD *)(v18 + 88) + v19;
          if ((a6 & 2) != 0)
          {
            LODWORD(v20) = *((char *)this + 536);
            if ((v20 & 0x80000000) != 0)
            {
              v21 = *(_QWORD *)(v18 + 48);
              v20 = *(_QWORD *)(v18 + 56) - v21;
              if (v20)
              {
                v22 = 0;
                v23 = v20 >> 2;
                v24 = 1;
                do
                {
                  v16 = *(_DWORD *)(v21 + 4 * v22) == 1768174437;
                  LODWORD(v20) = v16;
                  v22 = v24++;
                  v25 = !v16 && v23 > v22;
                }
                while (v25);
              }
              *((_BYTE *)this + 536) = v20;
            }
            if ((_DWORD)v20)
            {
              v35 = 0;
              v26 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v18 + 24);
              if (v26)
                v26(*(_QWORD *)(v18 + 40), *(unsigned int *)(v18 + 8), 1768174437, &v35);
            }
          }
        }
        else
        {
          if (*(_WORD *)v14 != 16724 || v14[2] != 71)
            goto LABEL_33;
          if (v15 < 0xA)
            break;
        }
        v27 = ID3Size(0xAu, &a3[v9], &v33);
        if (v27)
        {
          v28 = v27;
          if (v15 < v27)
          {
            result = 0;
            *a7 = v9 - a2 + v28;
            goto LABEL_35;
          }
          v29 = v27 - 1;
        }
        else
        {
          v29 = 2;
        }
        v9 += v29;
      }
LABEL_33:
      v25 = v9++ < v10;
    }
    while (v25);
  }
  result = 0;
LABEL_35:
  v9 = a2;
LABEL_37:
  *a4 = v9;
  return result;
}

void MP4CelpSpecificConfig::~MP4CelpSpecificConfig(MP4CelpSpecificConfig *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t MP4CelpSpecificConfig::Deserialize(_DWORD *a1, uint64_t a2)
{
  int Bit;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;

  Bit = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[3] = Bit;
  v5 = TBitstreamReader<unsigned int>::GetBit(a2);
  if (Bit)
  {
    a1[4] = v5;
    a1[5] = TBitstreamReader<unsigned int>::GetBit(a2);
    a1[6] = TBitstreamReader<unsigned int>::GetBit(a2);
    if (a1[2] == 24)
      a1[7] = TBitstreamReader<unsigned int>::GetBit(a2);
    v7 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 20);
    if (a1[4])
    {
      v8 = v7 >> 29;
      v9 = v6 - 3;
      *(_DWORD *)(a2 + 20) = v9;
      if (v9 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v18 = *(_DWORD *)(a2 + 16);
        v19 = *(_DWORD *)(a2 + 20);
        v8 |= v18 >> v19;
        *(_DWORD *)(a2 + 20) = v19 + 32;
        if (v19 == -32)
          v10 = 0;
        else
          v10 = v18 << -(char)v19;
      }
      else
      {
        v10 = 8 * v7;
      }
      *(_DWORD *)(a2 + 16) = v10;
      a1[8] = v8;
      goto LABEL_36;
    }
    v15 = v7 >> 27;
    v16 = v6 - 5;
    *(_DWORD *)(a2 + 20) = v16;
    if (v16 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      v23 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v23;
      v24 = *(_DWORD *)(a2 + 16);
      v25 = *(_DWORD *)(a2 + 20);
      v15 |= v24 >> v25;
      v16 = v25 + 32;
      if (v25 == -32)
      {
        v26 = 0;
        a1[9] = v15;
        *(_QWORD *)(a2 + 16) = 0xFFFFFFFE00000000;
        goto LABEL_30;
      }
      v17 = v24 << -(char)v25;
    }
    else
    {
      v17 = 32 * v7;
    }
    a1[9] = v15;
    v26 = v17 >> 30;
    v27 = v16 - 2;
    *(_DWORD *)(a2 + 16) = v17;
    *(_DWORD *)(a2 + 20) = v27;
    if (v27 >= 0)
    {
      v28 = 4 * v17;
LABEL_33:
      *(_DWORD *)(a2 + 16) = v28;
      a1[10] = v26;
      a1[11] = TBitstreamReader<unsigned int>::GetBit(a2);
      goto LABEL_36;
    }
    v23 = *(unsigned int **)a2;
LABEL_30:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v23);
    *(_QWORD *)a2 += 4;
    v31 = *(_DWORD *)(a2 + 16);
    v32 = *(_DWORD *)(a2 + 20);
    v26 |= v31 >> v32;
    *(_DWORD *)(a2 + 20) = v32 + 32;
    if (v32 == -32)
      v28 = 0;
    else
      v28 = v31 << -(char)v32;
    goto LABEL_33;
  }
  a1[12] = v5;
  v11 = *(_DWORD *)(a2 + 16);
  v12 = v11 >> 30;
  v13 = *(_DWORD *)(a2 + 20) - 2;
  *(_DWORD *)(a2 + 20) = v13;
  if (v5)
  {
    if (v13 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v21 = *(_DWORD *)(a2 + 16);
      v22 = *(_DWORD *)(a2 + 20);
      v12 |= v21 >> v22;
      *(_DWORD *)(a2 + 20) = v22 + 32;
      if (v22 == -32)
        v14 = 0;
      else
        v14 = v21 << -(char)v22;
    }
    else
    {
      v14 = 4 * v11;
    }
    *(_DWORD *)(a2 + 16) = v14;
    a1[13] = v12;
  }
  else
  {
    if (v13 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v29 = *(_DWORD *)(a2 + 16);
      v30 = *(_DWORD *)(a2 + 20);
      v12 |= v29 >> v30;
      *(_DWORD *)(a2 + 20) = v30 + 32;
      if (v30 == -32)
        v20 = 0;
      else
        v20 = v29 << -(char)v30;
    }
    else
    {
      v20 = 4 * v11;
    }
    *(_DWORD *)(a2 + 16) = v20;
    a1[14] = v12;
  }
LABEL_36:
  if (a1[2] == 24)
  {
    v33 = *(_DWORD *)(a2 + 16);
    v34 = v33 >> 30;
    v35 = *(_DWORD *)(a2 + 20) - 2;
    *(_DWORD *)(a2 + 20) = v35;
    if (v35 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v37 = *(_DWORD *)(a2 + 16);
      v38 = *(_DWORD *)(a2 + 20);
      v34 |= v37 >> v38;
      *(_DWORD *)(a2 + 20) = v38 + 32;
      if (v38 == -32)
        v36 = 0;
      else
        v36 = v37 << -(char)v38;
    }
    else
    {
      v36 = 4 * v33;
    }
    *(_DWORD *)(a2 + 16) = v36;
    a1[15] = v34;
  }
  return 0;
}

void MP4SpatialAudioSpecificConfig::~MP4SpatialAudioSpecificConfig(MP4SpatialAudioSpecificConfig *this)
{
  MP4SpatialAudioSpecificConfig::~MP4SpatialAudioSpecificConfig(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1E2909660;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x193FFE460](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 15);
  if (v3)
    MEMORY[0x193FFE460](v3, 0x1000C4000E02AC3);
  v4 = *((_QWORD *)this + 16);
  if (v4)
  {
    v5 = *(void **)(v4 + 56);
    if (v5)
    {
      *(_QWORD *)(v4 + 64) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v4 + 32);
    if (v6)
    {
      *(_QWORD *)(v4 + 40) = v6;
      operator delete(v6);
    }
    v7 = *(void **)v4;
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)(v4 + 8) = v7;
      operator delete(v7);
    }
    MEMORY[0x193FFE460](v4, 0x1010C40ADE5291FLL);
  }
}

uint64_t MP4SpatialAudioSpecificConfig::Deserialize(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v15;
  uint32x4_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  BOOL v53;
  int Bit;
  _DWORD *v55;
  unsigned int *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;

  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_DWORD *)a2;
  v8 = *(_DWORD *)(a2 + 20);
  MP4SampleRate::Deserialize(*(MP4SampleRate **)(a1 + 8), a2, 1);
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 20) - 32;
  *(_DWORD *)(a2 + 20) = v10;
  if (v10 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v12 = *(_DWORD *)(a2 + 16);
    v11 = *(_DWORD *)(a2 + 20);
    v14 = v11 + 32;
    v13 = v11 == -32;
    *(_QWORD *)a2 += 4;
    v9 |= v12 >> v11;
    v15 = v12 << -(char)v11;
    if (v13)
      v15 = 0;
    *(_DWORD *)(a2 + 16) = v15;
    *(_DWORD *)(a2 + 20) = v14;
  }
  v16 = (uint32x4_t)vdupq_n_s32(v9);
  *(_DWORD *)(a1 + 16) = v9 >> 25;
  *(int8x16_t *)(a1 + 20) = vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_18F117430), (int8x16_t)xmmword_18F117440);
  *(int8x16_t *)(a1 + 36) = vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_18F117450), (int8x16_t)xmmword_18F117460);
  *(int8x8_t *)(a1 + 52) = vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v16.i8, (uint32x2_t)0xFFFFFFFEFFFFFFFCLL), (int8x8_t)0x300000001);
  *(_DWORD *)(a1 + 60) = v9 & 3;
  *(_DWORD *)(a1 + 64) = TBitstreamReader<unsigned int>::GetBit(a2);
  v17 = *(unsigned int *)(a1 + 24);
  if (v17 > 7)
    return 0xFFFFFFFFLL;
  v66 = v8;
  v67 = a3;
  v19 = 0;
  v65 = v6 - v7;
  v20 = (char *)&kBsTreeConfigurationTable[7 * v17];
  v21 = *((_DWORD *)v20 + 1);
  v22 = *((unsigned __int16 *)v20 + 5);
  if (v21 <= 1)
    v23 = 1;
  else
    v23 = v21;
  do
  {
    if (((v22 >> v19) & 1) != 0)
    {
      v24 = *(_DWORD *)(a2 + 16);
      v25 = v24 >> 27;
      v26 = *(_DWORD *)(a2 + 20) - 5;
      *(_DWORD *)(a2 + 20) = v26;
      if (v26 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v28 = *(_DWORD *)(a2 + 16);
        v29 = *(_DWORD *)(a2 + 20);
        v25 |= v28 >> v29;
        *(_DWORD *)(a2 + 20) = v29 + 32;
        if (v29 == -32)
          v27 = 0;
        else
          v27 = v28 << -(char)v29;
      }
      else
      {
        v27 = 32 * v24;
      }
      *(_DWORD *)(a2 + 16) = v27;
    }
    else
    {
      v25 = kBsFreqResTable[*(unsigned int *)(a1 + 20)];
    }
    *(_DWORD *)(a1 + 76 + 4 * v19++) = v25;
  }
  while (v23 != v19);
  if ((unint64_t)(v17 - 5) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v30 = 0;
    v31 = kBsTreeConfigurationTable[7 * v17 + 3];
    if (v31 <= 1)
      v31 = 1;
    v32 = 4 * v31;
    do
    {
      *(_DWORD *)(a1 + v30 + 96) = TBitstreamReader<unsigned int>::GetBit(a2);
      v33 = *(_DWORD *)(a2 + 16);
      v34 = v33 >> 29;
      v35 = *(_DWORD *)(a2 + 20) - 3;
      *(_DWORD *)(a2 + 20) = v35;
      if (v35 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v37 = *(_DWORD *)(a2 + 16);
        v38 = *(_DWORD *)(a2 + 20);
        v34 |= v37 >> v38;
        *(_DWORD *)(a2 + 20) = v38 + 32;
        if (v38 == -32)
          v36 = 0;
        else
          v36 = v37 << -(char)v38;
      }
      else
      {
        v36 = 8 * v33;
      }
      *(_DWORD *)(a2 + 16) = v36;
      *(_DWORD *)(a1 + v30 + 100) = v34;
      v39 = a1 + 108;
      if (*(_DWORD *)(a1 + v30 + 96))
      {
        v40 = *(_DWORD *)(a2 + 16);
        v41 = v40 >> 29;
        v42 = *(_DWORD *)(a2 + 20) - 3;
        *(_DWORD *)(a2 + 20) = v42;
        if (v42 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(_QWORD *)a2 += 4;
          v44 = *(_DWORD *)(a2 + 16);
          v45 = *(_DWORD *)(a2 + 20);
          v41 |= v44 >> v45;
          *(_DWORD *)(a2 + 20) = v45 + 32;
          if (v45 == -32)
            v43 = 0;
          else
            v43 = v44 << -(char)v45;
        }
        else
        {
          v43 = 8 * v40;
        }
        *(_DWORD *)(a2 + 16) = v43;
        *(_DWORD *)(a1 + v30 + 104) = v41;
        v46 = *(_DWORD *)(a2 + 16);
        v47 = v46 >> 27;
        v48 = *(_DWORD *)(a2 + 20) - 5;
        *(_DWORD *)(a2 + 20) = v48;
        if (v48 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(_QWORD *)a2 += 4;
          v50 = *(_DWORD *)(a2 + 16);
          v51 = *(_DWORD *)(a2 + 20);
          v47 |= v50 >> v51;
          *(_DWORD *)(a2 + 20) = v51 + 32;
          if (v51 == -32)
            v49 = 0;
          else
            v49 = v50 << -(char)v51;
        }
        else
        {
          v49 = 32 * v46;
        }
        *(_DWORD *)(a2 + 16) = v49;
        *(_DWORD *)(a1 + v30 + 108) = v47;
        v39 = a1 + 112;
      }
      *(_DWORD *)(v39 + v30) = kBsFreqResTable[*(unsigned int *)(a1 + 20)];
      v30 += 4;
    }
    while (v32 != v30);
  }
  v52 = *(_DWORD *)(a1 + 56);
  v53 = __OFSUB__(v52, 2);
  if (v52 == 2)
    *(_DWORD *)(a1 + 68) = TBitstreamReader<unsigned int>::GetBit(a2);
  if (*(_DWORD *)(a1 + 64))
  {
    Bit = TBitstreamReader<unsigned int>::GetBit(a2);
    *(_DWORD *)(a1 + 72) = Bit;
    if (!Bit)
    {
      v63 = operator new();
      *(_QWORD *)(a1 + 120) = v63;
      if (ParamHRTF::Deserialize(v63, a2))
        return 0xFFFFFFFFLL;
    }
  }
  v55 = &kBsTreeConfigurationTable[7 * v17];
  v56 = *(unsigned int **)a2;
  v57 = *(_QWORD *)(a2 + 8);
  v58 = *(_QWORD *)a2 - v57;
  v59 = *(_DWORD *)(a2 + 20);
  if ((v59 & 7) != 0)
  {
    v60 = *(_DWORD *)(a2 + 16);
    v61 = v59 & 0xFFFFFFF8;
    *(_DWORD *)(a2 + 20) = v59 & 0xFFFFFFF8;
    if (v59 < 0 != v53)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
      v64 = *(_DWORD *)(a2 + 20);
      v56 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v56;
      v61 = v64 + 32;
      *(_DWORD *)(a2 + 20) = v64 + 32;
      if (v64 == -32)
        v62 = 0;
      else
        v62 = *(_DWORD *)(a2 + 16) << -(char)v64;
    }
    else
    {
      v62 = v60 << (v59 & 7);
    }
    *(_DWORD *)(a2 + 16) = v62;
    v57 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v61 = *(_DWORD *)(a2 + 20);
  }
  MP4SpatialExtensionConfig::Deserialize(*(_QWORD *)(a1 + 128), a2, v55, v66 - v67 - v59 + v61 + 8 * (v58 + v65 + v57 - (_DWORD)v56));
  result = 0;
  *(_BYTE *)(a1 + 136) = 1;
  return result;
}

uint64_t MP4SpatialAudioSpecificConfig::NumBands(MP4SpatialAudioSpecificConfig *this)
{
  return kBsFreqResTable[*((unsigned int *)this + 5)];
}

uint64_t ParamHRTF::Deserialize(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned __int16 *v10;
  int Bit;
  uint64_t v12;
  BOOL v13;
  char v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  char v54;
  unsigned __int16 *v55;
  uint64_t v56;
  uint64_t v57;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = v4 >> 29;
  v6 = *(_DWORD *)(a2 + 20) - 3;
  *(_DWORD *)(a2 + 20) = v6;
  if (v6 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v8 = *(_DWORD *)(a2 + 16);
    v9 = *(_DWORD *)(a2 + 20);
    v5 |= v8 >> v9;
    *(_DWORD *)(a2 + 20) = v9 + 32;
    if (v9 == -32)
      v7 = 0;
    else
      v7 = v8 << -(char)v9;
  }
  else
  {
    v7 = 8 * v4;
  }
  *(_DWORD *)(a2 + 16) = v7;
  *(_DWORD *)a1 = v5;
  if (!v5)
    return 0xFFFFFFFFLL;
  v10 = (unsigned __int16 *)((char *)&ParamHRTF::kParamHRTFFreqResTable + 4 * v5);
  Bit = TBitstreamReader<unsigned int>::GetBit(a2);
  v12 = 0;
  v55 = v10 + 1;
  v56 = a1;
  v57 = *v10;
  if (Bit)
    v13 = *v10 == 0;
  else
    v13 = 1;
  v14 = v13;
  v54 = v14;
  v15 = (unsigned int *)(a1 + 4);
  v16 = (unsigned int *)(a1 + 564);
  v17 = (unsigned int *)(a1 + 1124);
  v18 = (unsigned int *)(a1 + 1384);
  do
  {
    v19 = v15;
    v20 = v57;
    if ((_DWORD)v57)
    {
      do
      {
        v21 = *(_DWORD *)(a2 + 16);
        v22 = v21 >> 26;
        v23 = *(_DWORD *)(a2 + 20) - 6;
        *(_DWORD *)(a2 + 20) = v23;
        if (v23 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(_QWORD *)a2 += 4;
          v25 = *(_DWORD *)(a2 + 16);
          v26 = *(_DWORD *)(a2 + 20);
          v22 |= v25 >> v26;
          *(_DWORD *)(a2 + 20) = v26 + 32;
          if (v26 == -32)
            v24 = 0;
          else
            v24 = v25 << -(char)v26;
        }
        else
        {
          v24 = v21 << 6;
        }
        *(_DWORD *)(a2 + 16) = v24;
        *v19++ = v22;
        --v20;
      }
      while (v20);
      v27 = v16;
      v28 = v57;
      if ((v54 & 1) == 0)
      {
        do
        {
          v29 = *(_DWORD *)(a2 + 16);
          v30 = v29 >> 26;
          v31 = *(_DWORD *)(a2 + 20) - 6;
          *(_DWORD *)(a2 + 20) = v31;
          if (v31 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
            *(_QWORD *)a2 += 4;
            v33 = *(_DWORD *)(a2 + 16);
            v34 = *(_DWORD *)(a2 + 20);
            v30 |= v33 >> v34;
            *(_DWORD *)(a2 + 20) = v34 + 32;
            if (v34 == -32)
              v32 = 0;
            else
              v32 = v33 << -(char)v34;
          }
          else
          {
            v32 = v29 << 6;
          }
          *(_DWORD *)(a2 + 16) = v32;
          *v27++ = v30;
          --v28;
        }
        while (v28);
      }
    }
    v35 = TBitstreamReader<unsigned int>::GetBit(a2);
    *(_WORD *)(a1 + 1944) |= 1 << v12;
    if (v35)
    {
      v36 = *v55 <= 1u ? 1 : *v55;
      v37 = v17;
      do
      {
        v38 = *(_DWORD *)(a2 + 16);
        v39 = v38 >> 26;
        v40 = *(_DWORD *)(a2 + 20) - 6;
        *(_DWORD *)(a2 + 20) = v40;
        if (v40 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(_QWORD *)a2 += 4;
          v42 = *(_DWORD *)(a2 + 16);
          v43 = *(_DWORD *)(a2 + 20);
          v39 |= v42 >> v43;
          *(_DWORD *)(a2 + 20) = v43 + 32;
          if (v43 == -32)
            v41 = 0;
          else
            v41 = v42 << -(char)v43;
        }
        else
        {
          v41 = v38 << 6;
        }
        *(_DWORD *)(a2 + 16) = v41;
        *v37++ = v39;
        --v36;
      }
      while (v36);
      v44 = TBitstreamReader<unsigned int>::GetBit(a2);
      *(_WORD *)(v56 + 1946) |= 1 << v12;
      if (v44)
      {
        v45 = v18;
        v46 = v57;
        if ((_DWORD)v57)
        {
          do
          {
            v47 = *(_DWORD *)(a2 + 16);
            v48 = v47 >> 29;
            v49 = *(_DWORD *)(a2 + 20) - 3;
            *(_DWORD *)(a2 + 20) = v49;
            if (v49 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(_QWORD *)a2 += 4;
              v51 = *(_DWORD *)(a2 + 16);
              v52 = *(_DWORD *)(a2 + 20);
              v48 |= v51 >> v52;
              *(_DWORD *)(a2 + 20) = v52 + 32;
              if (v52 == -32)
                v50 = 0;
              else
                v50 = v51 << -(char)v52;
            }
            else
            {
              v50 = 8 * v47;
            }
            *(_DWORD *)(a2 + 16) = v50;
            *v45++ = v48;
            --v46;
          }
          while (v46);
        }
      }
    }
    ++v12;
    v15 += 28;
    v16 += 28;
    v17 += 13;
    v18 += 28;
    a1 = v56;
  }
  while (v12 != 5);
  return 0;
}

void MP4SpatialExtensionConfig::Deserialize(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  int v5;
  unsigned int *v6;
  int v7;
  int v8;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unsigned int *v17;
  _DWORD *v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int *v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  BOOL v50;
  int v51;
  int Bit;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  char v81;
  char v82;
  unint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  unint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  unint64_t v89;
  size_t v90;
  char *v91;
  char *v92;
  _BYTE *v93;
  _BYTE *v94;
  char v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int *v111;
  int v112;
  unsigned int v113;
  std::vector<char> *v114;

  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(unsigned int **)a2;
  v7 = v5 - (_DWORD)v6;
  v8 = *(_DWORD *)(a2 + 20);
  if (v8 + 8 * v7 >= a4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    if ((int)(v8 - a4 + 8 * v7) >= 8)
    {
      v114 = (std::vector<char> *)(a1 + 56);
      do
      {
        v10 = *(_DWORD *)(a2 + 16);
        v11 = v10 >> 28;
        v12 = v8 - 4;
        *(_DWORD *)(a2 + 20) = v12;
        if (v12 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v6);
          *(_QWORD *)a2 += 4;
          v14 = *(_DWORD *)(a2 + 16);
          v15 = *(_DWORD *)(a2 + 20);
          v11 |= v14 >> v15;
          *(_DWORD *)(a2 + 20) = v15 + 32;
          if (v15 == -32)
            v13 = 0;
          else
            v13 = v14 << -(char)v15;
        }
        else
        {
          v13 = 16 * v10;
        }
        *(_DWORD *)(a2 + 16) = v13;
        v17 = *(unsigned int **)(a1 + 8);
        v16 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v17 >= v16)
        {
          v19 = *(unsigned int **)a1;
          v20 = ((uint64_t)v17 - *(_QWORD *)a1) >> 2;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v22 = v16 - (_QWORD)v19;
          if (v22 >> 1 > v21)
            v21 = v22 >> 1;
          v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL;
          v24 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v23)
            v24 = v21;
          if (v24)
          {
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v24);
            v19 = *(unsigned int **)a1;
            v17 = *(unsigned int **)(a1 + 8);
          }
          else
          {
            v25 = 0;
          }
          v26 = (unsigned int *)(v24 + 4 * v20);
          *v26 = v11;
          v18 = v26 + 1;
          while (v17 != v19)
          {
            v27 = *--v17;
            *--v26 = v27;
          }
          *(_QWORD *)a1 = v26;
          *(_QWORD *)(a1 + 8) = v18;
          *(_QWORD *)(a1 + 16) = v24 + 4 * v25;
          if (v19)
            operator delete(v19);
        }
        else
        {
          *v17 = v11;
          v18 = v17 + 1;
        }
        *(_QWORD *)(a1 + 8) = v18;
        v28 = *(_DWORD *)(a2 + 16);
        v29 = v28 >> 28;
        v30 = *(_DWORD *)(a2 + 20) - 4;
        *(_DWORD *)(a2 + 20) = v30;
        if (v30 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(_QWORD *)a2 += 4;
          v32 = *(_DWORD *)(a2 + 16);
          v33 = *(_DWORD *)(a2 + 20);
          v29 |= v32 >> v33;
          v30 = v33 + 32;
          *(_DWORD *)(a2 + 20) = v33 + 32;
          if (v33 == -32)
            v31 = 0;
          else
            v31 = v32 << -(char)v33;
        }
        else
        {
          v31 = 16 * v28;
        }
        *(_DWORD *)(a2 + 16) = v31;
        if (v29 == 15)
        {
          v34 = HIBYTE(v31);
          v30 -= 8;
          *(_DWORD *)(a2 + 20) = v30;
          if (v30 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
            *(_QWORD *)a2 += 4;
            v35 = *(_DWORD *)(a2 + 16);
            v36 = *(_DWORD *)(a2 + 20);
            v34 |= v35 >> v36;
            v30 = v36 + 32;
            *(_DWORD *)(a2 + 20) = v36 + 32;
            v31 = v36 == -32 ? 0 : v35 << -(char)v36;
          }
          else
          {
            v31 <<= 8;
          }
          *(_DWORD *)(a2 + 16) = v31;
          v29 = v34 + 15;
          if (v34 == 255)
          {
            v37 = HIWORD(v31);
            v30 -= 16;
            *(_DWORD *)(a2 + 20) = v30;
            if (v30 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(_QWORD *)a2 += 4;
              v38 = *(_DWORD *)(a2 + 16);
              v39 = *(_DWORD *)(a2 + 20);
              v37 |= v38 >> v39;
              v30 = v39 + 32;
              *(_DWORD *)(a2 + 20) = v39 + 32;
              if (v39 == -32)
                v31 = 0;
              else
                v31 = v38 << -(char)v39;
            }
            else
            {
              v31 <<= 16;
            }
            *(_DWORD *)(a2 + 16) = v31;
            v29 = v37 + 270;
          }
        }
        v40 = *(unsigned int **)a2;
        v41 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 4);
        v112 = *(_DWORD *)(a2 + 8);
        v113 = v29;
        v111 = *(unsigned int **)a2;
        if (v41 == 2)
        {
          v46 = a3[5];
          if (v46)
          {
            v47 = 0;
            v48 = 0;
            v49 = 0;
            v50 = 1;
LABEL_49:
            v51 = 1;
            while (*(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2) >= 1)
            {
              Bit = TBitstreamReader<unsigned int>::GetBit(a2);
              if (Bit)
              {
                ++v49;
                ++v51;
              }
              else
              {
                --v51;
              }
              if (!Bit)
                ++v47;
              if (!v51)
              {
                v50 = ++v48 < v46;
                if (v48 != v46)
                  goto LABEL_49;
                goto LABEL_62;
              }
            }
            if (v50)
              goto LABEL_134;
LABEL_62:
            while (v49)
            {
              TBitstreamReader<unsigned int>::GetBit(a2);
              if (TBitstreamReader<unsigned int>::GetBit(a2))
              {
                v57 = *(_DWORD *)(a2 + 16);
                v58 = *(_DWORD *)(a2 + 20) - 5;
                *(_DWORD *)(a2 + 20) = v58;
                if (v58 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                  v60 = *(_DWORD *)(a2 + 20);
                  *(_QWORD *)a2 += 4;
                  *(_DWORD *)(a2 + 20) = v60 + 32;
                  if (v60 == -32)
                    v59 = 0;
                  else
                    v59 = *(_DWORD *)(a2 + 16) << -(char)v60;
                }
                else
                {
                  v59 = 32 * v57;
                }
                *(_DWORD *)(a2 + 16) = v59;
              }
              --v49;
            }
            if (v47)
            {
              v62 = *(_DWORD *)(a2 + 16);
              v61 = *(_DWORD *)(a2 + 20);
              do
              {
                v61 -= 5;
                *(_DWORD *)(a2 + 20) = v61;
                if (v61 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                  v63 = *(_DWORD *)(a2 + 20);
                  *(_QWORD *)a2 += 4;
                  v61 = v63 + 32;
                  *(_DWORD *)(a2 + 20) = v63 + 32;
                  if (v63 == -32)
                    v62 = 0;
                  else
                    v62 = *(_DWORD *)(a2 + 16) << -(char)v63;
                }
                else
                {
                  v62 *= 32;
                }
                *(_DWORD *)(a2 + 16) = v62;
                --v47;
              }
              while (v47);
            }
          }
          goto LABEL_134;
        }
        if (v41 != 1)
        {
          if (v41)
            return;
          *(_BYTE *)(a1 + 24) = 1;
          v42 = v31 >> 28;
          v43 = v30 - 4;
          *(_DWORD *)(a2 + 20) = v30 - 4;
          if (v30 - 4 >= 0)
          {
            v44 = 16 * v31;
            v45 = v40;
            goto LABEL_82;
          }
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v40);
          v45 = (unsigned int *)(*(_QWORD *)a2 + 4);
          *(_QWORD *)a2 = v45;
          v64 = *(_DWORD *)(a2 + 16);
          v65 = *(_DWORD *)(a2 + 20);
          v42 |= v64 >> v65;
          v43 = v65 + 32;
          if (v65 == -32)
          {
            v66 = 0;
            *(_BYTE *)(a1 + 25) = v42;
            *(_QWORD *)(a2 + 16) = 0xFFFFFFFE00000000;
          }
          else
          {
            v44 = v64 << -(char)v65;
LABEL_82:
            *(_BYTE *)(a1 + 25) = v42;
            v66 = v44 >> 30;
            v67 = v43 - 2;
            *(_DWORD *)(a2 + 16) = v44;
            *(_DWORD *)(a2 + 20) = v67;
            if (v67 >= 0)
            {
              v68 = 4 * v44;
LABEL_92:
              *(_DWORD *)(a2 + 16) = v68;
              *(_BYTE *)(a1 + 26) = v66;
              v76 = (a3[3] + a3[1]);
              v78 = *(_QWORD *)(a1 + 56);
              v77 = *(_QWORD *)(a1 + 64);
              if (v76 <= v77 - v78)
              {
                if (v76 < v77 - v78)
                {
                  v77 = v78 + v76;
                  *(_QWORD *)(a1 + 64) = v78 + v76;
                }
              }
              else
              {
                std::vector<unsigned char>::__append(v114, v76 - (v77 - v78));
                v78 = *(_QWORD *)(a1 + 56);
                v77 = *(_QWORD *)(a1 + 64);
              }
              if (v77 != v78)
              {
                v79 = 0;
                v80 = 0;
                do
                {
                  v81 = TBitstreamReader<unsigned int>::GetBit(a2);
                  v82 = v81;
                  v84 = *(_BYTE **)(a1 + 40);
                  v83 = *(_QWORD *)(a1 + 48);
                  if ((unint64_t)v84 >= v83)
                  {
                    v86 = *(_QWORD *)(a1 + 32);
                    v87 = &v84[-v86];
                    v88 = (uint64_t)&v84[-v86 + 1];
                    if (v88 < 0)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v89 = v83 - v86;
                    if (2 * v89 > v88)
                      v88 = 2 * v89;
                    if (v89 >= 0x3FFFFFFFFFFFFFFFLL)
                      v90 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v90 = v88;
                    if (v90)
                      v91 = (char *)operator new(v90);
                    else
                      v91 = 0;
                    v92 = &v87[(_QWORD)v91];
                    v93 = &v87[(_QWORD)v91];
                    *v93 = v82;
                    v85 = v93 + 1;
                    if (v84 != (_BYTE *)v86)
                    {
                      v94 = &v84[~v86];
                      do
                      {
                        v95 = *--v84;
                        (v94--)[(_QWORD)v91] = v95;
                      }
                      while (v84 != (_BYTE *)v86);
                      v84 = *(_BYTE **)(a1 + 32);
                      v92 = v91;
                    }
                    *(_QWORD *)(a1 + 32) = v92;
                    *(_QWORD *)(a1 + 40) = v85;
                    *(_QWORD *)(a1 + 48) = &v91[v90];
                    if (v84)
                      operator delete(v84);
                  }
                  else
                  {
                    *v84 = v81;
                    v85 = v84 + 1;
                  }
                  *(_QWORD *)(a1 + 40) = v85;
                  if (*(v85 - 1))
                  {
                    v96 = *(_DWORD *)(a2 + 16);
                    v97 = v96 >> 27;
                    v98 = *(_DWORD *)(a2 + 20) - 5;
                    *(_DWORD *)(a2 + 20) = v98;
                    if (v98 < 0)
                    {
                      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                      *(_QWORD *)a2 += 4;
                      v100 = *(_DWORD *)(a2 + 16);
                      v101 = *(_DWORD *)(a2 + 20);
                      v97 |= v100 >> v101;
                      *(_DWORD *)(a2 + 20) = v101 + 32;
                      if (v101 == -32)
                        v99 = 0;
                      else
                        v99 = v100 << -(char)v101;
                    }
                    else
                    {
                      v99 = 32 * v96;
                    }
                    *(_DWORD *)(a2 + 16) = v99;
                    v114->__begin_[v79] = v97;
                  }
                  v79 = ++v80;
                }
                while (*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56) > (unint64_t)v80);
              }
              goto LABEL_134;
            }
          }
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v45);
          *(_QWORD *)a2 += 4;
          v74 = *(_DWORD *)(a2 + 16);
          v75 = *(_DWORD *)(a2 + 20);
          v66 |= v74 >> v75;
          *(_DWORD *)(a2 + 20) = v75 + 32;
          if (v75 == -32)
            v68 = 0;
          else
            v68 = v74 << -(char)v75;
          goto LABEL_92;
        }
        *(_BYTE *)(a1 + 80) = 1;
        v53 = v31 >> 28;
        v54 = v30 - 4;
        *(_DWORD *)(a2 + 20) = v30 - 4;
        if (v30 - 4 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v40);
          v56 = (unsigned int *)(*(_QWORD *)a2 + 4);
          *(_QWORD *)a2 = v56;
          v69 = *(_DWORD *)(a2 + 16);
          v70 = *(_DWORD *)(a2 + 20);
          v53 |= v69 >> v70;
          v54 = v70 + 32;
          if (v70 == -32)
          {
            v71 = 0;
            *(_BYTE *)(a1 + 81) = v53;
            *(_QWORD *)(a2 + 16) = 0xFFFFFFFE00000000;
            goto LABEL_125;
          }
          v55 = v69 << -(char)v70;
        }
        else
        {
          v55 = 16 * v31;
          v56 = v40;
        }
        *(_BYTE *)(a1 + 81) = v53;
        v71 = v55 >> 30;
        v72 = v54 - 2;
        *(_DWORD *)(a2 + 16) = v55;
        *(_DWORD *)(a2 + 20) = v54 - 2;
        if (v54 - 2 >= 0)
        {
          v73 = 4 * v55;
          goto LABEL_127;
        }
LABEL_125:
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
        v56 = (unsigned int *)(*(_QWORD *)a2 + 4);
        *(_QWORD *)a2 = v56;
        v102 = *(_DWORD *)(a2 + 16);
        v103 = *(_DWORD *)(a2 + 20);
        v71 |= v102 >> v103;
        v72 = v103 + 32;
        if (v103 == -32)
        {
          v104 = 0;
          *(_BYTE *)(a1 + 82) = v71;
          *(_QWORD *)(a2 + 16) = 0xFFFFFFFB00000000;
LABEL_130:
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
          *(_QWORD *)a2 += 4;
          v107 = *(_DWORD *)(a2 + 16);
          v108 = *(_DWORD *)(a2 + 20);
          v104 |= v107 >> v108;
          *(_DWORD *)(a2 + 20) = v108 + 32;
          if (v108 == -32)
            v106 = 0;
          else
            v106 = v107 << -(char)v108;
          goto LABEL_133;
        }
        v73 = v102 << -(char)v103;
LABEL_127:
        *(_BYTE *)(a1 + 82) = v71;
        v104 = v73 >> 27;
        v105 = v72 - 5;
        *(_DWORD *)(a2 + 16) = v73;
        *(_DWORD *)(a2 + 20) = v105;
        if (v105 < 0)
          goto LABEL_130;
        v106 = 32 * v73;
LABEL_133:
        *(_DWORD *)(a2 + 16) = v106;
        *(_BYTE *)(a1 + 83) = v104;
LABEL_134:
        TBitstreamReader<unsigned int>::SkipBits(a2, *(_DWORD *)(a2 + 20) - v30 + 8 * (v113 + (_DWORD)v111 - v112 + *(_DWORD *)(a2 + 8) - *(_DWORD *)a2));
        v6 = *(unsigned int **)a2;
        v8 = *(_DWORD *)(a2 + 20);
      }
      while ((int)(v8 - a4 + 8 * (*(_DWORD *)(a2 + 8) - *(_QWORD *)a2)) > 7);
    }
  }
}

void MP4LDSpatialSpecificConfig::~MP4LDSpatialSpecificConfig(MP4LDSpatialSpecificConfig *this)
{
  MP4SpatialAudioSpecificConfig::~MP4SpatialAudioSpecificConfig(this);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4LDSpatialSpecificConfig::Deserialize(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  BOOL v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int *v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;

  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_DWORD *)a2;
  v8 = *(_DWORD *)(a2 + 20);
  MP4SampleRate::Deserialize(*(MP4SampleRate **)(a1 + 8), a2, 1);
  v9 = *(_DWORD *)(a2 + 16);
  v10 = v9 >> 18;
  v11 = *(_DWORD *)(a2 + 20) - 14;
  *(_DWORD *)(a2 + 20) = v11;
  if (v11 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v13 = *(_DWORD *)(a2 + 16);
    v14 = *(_DWORD *)(a2 + 20);
    v10 |= v13 >> v14;
    *(_DWORD *)(a2 + 20) = v14 + 32;
    if (v14 == -32)
      v12 = 0;
    else
      v12 = v13 << -(char)v14;
  }
  else
  {
    v12 = v9 << 14;
  }
  *(_DWORD *)(a2 + 16) = v12;
  *(int8x8_t *)(a1 + 16) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v10), (uint32x2_t)0xFFFFFFFAFFFFFFF7), (int8x8_t)0x70000001FLL);
  v15 = (v10 >> 2) & 0xF;
  *(_DWORD *)(a1 + 24) = v15;
  *(_DWORD *)(a1 + 28) = v10 & 3;
  if (v15 != 7)
    *(_DWORD *)(a1 + 32) = TBitstreamReader<unsigned int>::GetBit(a2);
  *(_DWORD *)(a1 + 36) = TBitstreamReader<unsigned int>::GetBit(a2);
  v16 = *(_DWORD *)(a2 + 16);
  v17 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a1 + 24) != 7)
  {
    v18 = v16 >> 29;
    v19 = v17 - 3;
    *(_DWORD *)(a2 + 20) = v19;
    if (v19 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      v21 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v21;
      v22 = *(_DWORD *)(a2 + 16);
      v23 = *(_DWORD *)(a2 + 20);
      v18 |= v22 >> v23;
      v19 = v23 + 32;
      if (v23 == -32)
      {
        v24 = 0;
        *(_DWORD *)(a1 + 40) = v18;
        *(_QWORD *)(a2 + 16) = 0xFFFFFFFD00000000;
        goto LABEL_17;
      }
      v20 = v22 << -(char)v23;
    }
    else
    {
      v20 = 8 * v16;
    }
    *(_DWORD *)(a1 + 40) = v18;
    v24 = v20 >> 29;
    v17 = v19 - 3;
    *(_DWORD *)(a2 + 16) = v20;
    *(_DWORD *)(a2 + 20) = v17;
    if (v17 >= 0)
    {
      v16 = 8 * v20;
LABEL_20:
      *(_DWORD *)(a2 + 16) = v16;
      *(_DWORD *)(a1 + 44) = v24;
      goto LABEL_21;
    }
    v21 = *(unsigned int **)a2;
LABEL_17:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v21);
    *(_QWORD *)a2 += 4;
    v25 = *(_DWORD *)(a2 + 16);
    v26 = *(_DWORD *)(a2 + 20);
    v24 |= v25 >> v26;
    v17 = v26 + 32;
    if (v26 == -32)
      v16 = 0;
    else
      v16 = v25 << -(char)v26;
    goto LABEL_20;
  }
LABEL_21:
  v27 = v16 >> 29;
  v28 = v17 - 3;
  *(_DWORD *)(a2 + 20) = v28;
  if (v28 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v30 = *(_DWORD *)(a2 + 16);
    v31 = *(_DWORD *)(a2 + 20);
    v27 |= v30 >> v31;
    v28 = v31 + 32;
    *(_DWORD *)(a2 + 20) = v31 + 32;
    if (v31 == -32)
      v29 = 0;
    else
      v29 = v30 << -(char)v31;
  }
  else
  {
    v29 = 8 * v16;
  }
  *(_DWORD *)(a2 + 16) = v29;
  *(_DWORD *)(a1 + 48) = v27;
  if (*(_DWORD *)(a1 + 24) != 7)
  {
    *(_DWORD *)(a1 + 52) = TBitstreamReader<unsigned int>::GetBit(a2);
    v29 = *(_DWORD *)(a2 + 16);
    v28 = *(_DWORD *)(a2 + 20);
  }
  v32 = v29 >> 30;
  v33 = v28 - 2;
  *(_DWORD *)(a2 + 20) = v33;
  if (v33 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v35 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v35;
    v36 = *(_DWORD *)(a2 + 16);
    v37 = *(_DWORD *)(a2 + 20);
    v32 |= v36 >> v37;
    v33 = v37 + 32;
    if (v37 == -32)
    {
      v39 = 0;
      *(_DWORD *)(a1 + 56) = v32;
      v38 = (_DWORD *)(a1 + 56);
      *(_QWORD *)(a2 + 16) = 0xFFFFFFFE00000000;
      goto LABEL_36;
    }
    v34 = v36 << -(char)v37;
  }
  else
  {
    v34 = 4 * v29;
  }
  *(_DWORD *)(a1 + 56) = v32;
  v38 = (_DWORD *)(a1 + 56);
  v39 = v34 >> 30;
  v40 = v33 - 2;
  *(_DWORD *)(a2 + 16) = v34;
  *(_DWORD *)(a2 + 20) = v40;
  if (v40 >= 0)
  {
    v41 = 4 * v34;
    goto LABEL_39;
  }
  v35 = *(unsigned int **)a2;
LABEL_36:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v35);
  *(_QWORD *)a2 += 4;
  v42 = *(_DWORD *)(a2 + 16);
  v43 = *(_DWORD *)(a2 + 20);
  v39 |= v42 >> v43;
  *(_DWORD *)(a2 + 20) = v43 + 32;
  if (v43 == -32)
    v41 = 0;
  else
    v41 = v42 << -(char)v43;
LABEL_39:
  *(_DWORD *)(a2 + 16) = v41;
  *(_DWORD *)(a1 + 60) = v39;
  v44 = *(_DWORD *)(a1 + 24);
  if (v44 == 7)
  {
    *(_DWORD *)(a1 + 64) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 64) = TBitstreamReader<unsigned int>::GetBit(a2);
    v44 = *(_DWORD *)(a1 + 24);
    if (v44 > 7)
      return 0xFFFFFFFFLL;
  }
  v96 = a3;
  v46 = 0;
  v95 = v6 - v7;
  v47 = v44;
  v48 = &kBsTreeConfigurationTable[7 * v44];
  v49 = v48[1];
  v50 = *((unsigned __int16 *)v48 + 5);
  if (v49 <= 1)
    v51 = 1;
  else
    v51 = v49;
  do
  {
    if (((v50 >> v46) & 1) != 0)
    {
      v52 = *(_DWORD *)(a2 + 16);
      v53 = v52 >> 27;
      v54 = *(_DWORD *)(a2 + 20) - 5;
      *(_DWORD *)(a2 + 20) = v54;
      if (v54 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v56 = *(_DWORD *)(a2 + 16);
        v57 = *(_DWORD *)(a2 + 20);
        v53 |= v56 >> v57;
        *(_DWORD *)(a2 + 20) = v57 + 32;
        if (v57 == -32)
          v55 = 0;
        else
          v55 = v56 << -(char)v57;
      }
      else
      {
        v55 = 32 * v52;
      }
      *(_DWORD *)(a2 + 16) = v55;
    }
    else
    {
      v53 = kLDBsFreqResTable[*(unsigned int *)(a1 + 20)];
    }
    *(_DWORD *)(a1 + 76 + 4 * v46++) = v53;
  }
  while (v51 != v46);
  v97 = v47;
  if ((unint64_t)(v47 - 5) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v58 = 0;
    v59 = kBsTreeConfigurationTable[7 * v47 + 3];
    if (v59 <= 1)
      v59 = 1;
    v60 = 4 * v59;
    do
    {
      *(_DWORD *)(a1 + v58 + 96) = TBitstreamReader<unsigned int>::GetBit(a2);
      v61 = *(_DWORD *)(a2 + 16);
      v62 = v61 >> 29;
      v63 = *(_DWORD *)(a2 + 20) - 3;
      *(_DWORD *)(a2 + 20) = v63;
      if (v63 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v65 = *(_DWORD *)(a2 + 16);
        v66 = *(_DWORD *)(a2 + 20);
        v62 |= v65 >> v66;
        *(_DWORD *)(a2 + 20) = v66 + 32;
        if (v66 == -32)
          v64 = 0;
        else
          v64 = v65 << -(char)v66;
      }
      else
      {
        v64 = 8 * v61;
      }
      *(_DWORD *)(a2 + 16) = v64;
      *(_DWORD *)(a1 + v58 + 100) = v62;
      v67 = a1 + 108;
      if (*(_DWORD *)(a1 + v58 + 96))
      {
        v68 = *(_DWORD *)(a2 + 16);
        v69 = v68 >> 29;
        v70 = *(_DWORD *)(a2 + 20) - 3;
        *(_DWORD *)(a2 + 20) = v70;
        if (v70 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(_QWORD *)a2 += 4;
          v72 = *(_DWORD *)(a2 + 16);
          v73 = *(_DWORD *)(a2 + 20);
          v69 |= v72 >> v73;
          *(_DWORD *)(a2 + 20) = v73 + 32;
          if (v73 == -32)
            v71 = 0;
          else
            v71 = v72 << -(char)v73;
        }
        else
        {
          v71 = 8 * v68;
        }
        *(_DWORD *)(a2 + 16) = v71;
        *(_DWORD *)(a1 + v58 + 104) = v69;
        v74 = *(_DWORD *)(a2 + 16);
        v75 = v74 >> 27;
        v76 = *(_DWORD *)(a2 + 20) - 5;
        *(_DWORD *)(a2 + 20) = v76;
        if (v76 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(_QWORD *)a2 += 4;
          v78 = *(_DWORD *)(a2 + 16);
          v79 = *(_DWORD *)(a2 + 20);
          v75 |= v78 >> v79;
          *(_DWORD *)(a2 + 20) = v79 + 32;
          if (v79 == -32)
            v77 = 0;
          else
            v77 = v78 << -(char)v79;
        }
        else
        {
          v77 = 32 * v74;
        }
        *(_DWORD *)(a2 + 16) = v77;
        *(_DWORD *)(a1 + v58 + 108) = v75;
        v67 = a1 + 112;
      }
      *(_DWORD *)(v67 + v58) = kLDBsFreqResTable[*(unsigned int *)(a1 + 20)];
      v58 += 4;
    }
    while (v60 != v58);
  }
  v80 = __OFSUB__(*v38, 2);
  if (*v38 == 2)
    *(_DWORD *)(a1 + 68) = TBitstreamReader<unsigned int>::GetBit(a2);
  v81 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a1 + 64))
  {
    v82 = *(_DWORD *)(a2 + 16);
    v83 = v82 >> 30;
    v80 = __OFSUB__(v81, 2);
    v81 -= 2;
    *(_DWORD *)(a2 + 20) = v81;
    if (v81 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v85 = *(_DWORD *)(a2 + 16);
      v86 = *(_DWORD *)(a2 + 20);
      v83 |= v85 >> v86;
      v80 = __OFADD__(v86, 32);
      v81 = v86 + 32;
      *(_DWORD *)(a2 + 20) = v86 + 32;
      v84 = v86 == -32 ? 0 : v85 << -(char)v86;
    }
    else
    {
      v84 = 4 * v82;
    }
    *(_DWORD *)(a2 + 16) = v84;
    *(_DWORD *)(a1 + 72) = v83;
    if (!v83)
    {
      v93 = operator new();
      *(_QWORD *)(a1 + 120) = v93;
      if (ParamHRTF::Deserialize(v93, a2))
        return 4294967294;
      v81 = *(_DWORD *)(a2 + 20);
    }
  }
  v87 = *(unsigned int **)a2;
  v88 = *(_QWORD *)(a2 + 8);
  v89 = *(_QWORD *)a2 - v88;
  if ((v81 & 7) != 0)
  {
    v90 = *(_DWORD *)(a2 + 16);
    v91 = v81 & 0xFFFFFFF8;
    *(_DWORD *)(a2 + 20) = v81 & 0xFFFFFFF8;
    if (v81 < 0 != v80)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v87);
      v94 = *(_DWORD *)(a2 + 20);
      v87 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v87;
      v91 = v94 + 32;
      *(_DWORD *)(a2 + 20) = v94 + 32;
      if (v94 == -32)
        v92 = 0;
      else
        v92 = *(_DWORD *)(a2 + 16) << -(char)v94;
    }
    else
    {
      v92 = v90 << (v81 & 7);
    }
    *(_DWORD *)(a2 + 16) = v92;
    v88 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v91 = v81;
  }
  MP4SpatialExtensionConfig::Deserialize(*(_QWORD *)(a1 + 128), a2, &kBsTreeConfigurationTable[7 * v97], v8 - v81 - v96 + v91 + 8 * (v89 + v95 + v88 - (_DWORD)v87));
  result = 0;
  *(_BYTE *)(a1 + 136) = 1;
  return result;
}

uint64_t MP4LDSpatialSpecificConfig::NumBands(MP4LDSpatialSpecificConfig *this)
{
  return kLDBsFreqResTable[*((unsigned int *)this + 5)];
}

void MP4SpatialAudioSpecificConfig::MP4SpatialAudioSpecificConfig(MP4SpatialAudioSpecificConfig *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2909660;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 136) = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  *((_QWORD *)this + 1) = v2;
  v3 = operator new();
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)(v3 + 23) = 0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_DWORD *)(v3 + 80) = 0;
  *((_QWORD *)this + 16) = v3;
  *(_OWORD *)((char *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_QWORD *)((char *)this + 108) = 0;
}

_QWORD *to_string@<X0>(const AudioTimeStamp *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  AudioTimeStampFlags mFlags;
  void *p_p;
  uint64_t v8;
  AudioTimeStampFlags v9;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _QWORD v19[10];
  char v20;
  uint64_t v21;

  if (!a1)
    return std::string::basic_string[abi:ne180100]<0>(a3, "NULL");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"{ ", 2);
  mFlags = a1->mFlags;
  if ((a2 & mFlags & 2) == 0)
  {
    if ((a2 & mFlags & 1) == 0)
    {
      if ((a2 & mFlags & 4) == 0)
        goto LABEL_35;
      goto LABEL_26;
    }
    goto LABEL_15;
  }
  caulk::make_string((caulk *)"hostTime=%.6f", (uint64_t)&__p, (double)a1->mHostTime * 0.0000000416666667);
  if ((v17 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v17 & 0x80u) == 0)
    v8 = v17;
  else
    v8 = v16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)p_p, v8);
  if ((char)v17 < 0)
    operator delete(__p);
  v9 = a2 & a1->mFlags;
  if ((v9 & 1) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)", ", 2);
LABEL_15:
    caulk::make_string((caulk *)"sampleTime=%lld", (uint64_t)&__p, (uint64_t)a1->mSampleTime);
    if ((v17 & 0x80u) == 0)
      v11 = &__p;
    else
      v11 = __p;
    if ((v17 & 0x80u) == 0)
      v12 = v17;
    else
      v12 = v16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)v11, v12);
    if ((char)v17 < 0)
      operator delete(__p);
    v9 = a2 & a1->mFlags;
  }
  if ((v9 & 4) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)", ", 2);
LABEL_26:
    caulk::make_string((caulk *)"rateScalar=%.6f", (uint64_t)&__p, *(_QWORD *)&a1->mRateScalar);
    if ((v17 & 0x80u) == 0)
      v13 = &__p;
    else
      v13 = __p;
    if ((v17 & 0x80u) == 0)
      v14 = v17;
    else
      v14 = v16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)v13, v14);
    if ((char)v17 < 0)
      operator delete(__p);
  }
  LOBYTE(__p) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)&__p, 1);
LABEL_35:
  LOBYTE(__p) = 125;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)&__p, 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a3, (uint64_t)v19);
  v18 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x193FFE3A0](&v21);
}

_QWORD *to_string@<X0>(const AudioChannelLayout *a1@<X0>, _QWORD *a2@<X8>)
{
  void *p_p;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  AudioChannelDescription *mChannelDescriptions;
  void *v13;
  uint64_t v14;
  std::runtime_error *exception;
  CFTypeRef cf;
  UInt32 ioPropertyDataSize;
  CFTypeRef outPropertyData;
  void *__p;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  uint64_t v25;

  if (!a1)
    return std::string::basic_string[abi:ne180100]<0>(a2, "NULL");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"{ ", 2);
  caulk::make_string((caulk *)"tag=0x%x", (uint64_t)&__p, a1->mChannelLayoutTag);
  if ((v21 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v21 & 0x80u) == 0)
    v5 = v21;
  else
    v5 = v20;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)p_p, v5);
  if ((char)v21 < 0)
    operator delete(__p);
  if (a1->mChannelLayoutTag)
  {
    if (a1->mChannelLayoutTag == 0x10000)
    {
      caulk::make_string((caulk *)", channelBitmap=0x%x", (uint64_t)&__p, a1->mChannelBitmap);
      v6 = (v21 & 0x80u) == 0 ? &__p : (void **)__p;
      v7 = (v21 & 0x80u) == 0 ? v21 : v20;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)v6, v7);
      if ((char)v21 < 0)
        operator delete(__p);
    }
  }
  else
  {
    caulk::make_string((caulk *)", numberDescs=%u, descs=[", (uint64_t)&__p, a1->mNumberChannelDescriptions);
    if ((v21 & 0x80u) == 0)
      v9 = &__p;
    else
      v9 = __p;
    if ((v21 & 0x80u) == 0)
      v10 = v21;
    else
      v10 = v20;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)v9, v10);
    if ((char)v21 < 0)
      operator delete(__p);
    if (a1->mNumberChannelDescriptions)
    {
      v11 = 0;
      mChannelDescriptions = a1->mChannelDescriptions;
      do
      {
        if (v11)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)", ", 2);
        outPropertyData = 0;
        ioPropertyDataSize = 8;
        if (AudioFormatGetProperty(0x63736E6Du, 0x14u, mChannelDescriptions, &ioPropertyDataSize, &outPropertyData))
        {
          std::ostream::operator<<();
        }
        else
        {
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, outPropertyData);
          if (!cf)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)cf);
          if ((v21 & 0x80u) == 0)
            v13 = &__p;
          else
            v13 = __p;
          if ((v21 & 0x80u) == 0)
            v14 = v21;
          else
            v14 = v20;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)v13, v14);
          if ((char)v21 < 0)
            operator delete(__p);
          if (cf)
            CFRelease(cf);
        }
        ++v11;
        ++mChannelDescriptions;
      }
      while (v11 < a1->mNumberChannelDescriptions);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"]", 1);
  }
  LOBYTE(__p) = 125;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)&__p, 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v23);
  v22 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v23[-1] + *(_QWORD *)(v22 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v23[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete((void *)v23[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x193FFE3A0](&v25);
}

void sub_18F0860EC(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

_QWORD *to_string@<X0>(const AudioStreamPacketDescription *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  UInt32 *p_mVariableFramesInPacket;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v18;
  _QWORD v19[10];
  char v20;
  uint64_t v21;
  char v22[9];

  if (!a1)
    return std::string::basic_string[abi:ne180100]<0>(a4, "NULL");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"{ numberDescs=", 14);
  std::ostream::operator<<();
  if (a2 <= a3 || a3 == 0)
    v8 = a2;
  else
    v8 = a3;
  if (v8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)", descs=[\n", 10);
    v9 = 0;
    p_mVariableFramesInPacket = &a1->mVariableFramesInPacket;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"  [", 3);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] byte offsets ", 15);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" - ", 3);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (", 2);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)")", 1);
      if (*p_mVariableFramesInPacket)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"; ", 2);
        v15 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" fr\n", 4);
      }
      else
      {
        v22[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)v22, 1);
      }
      ++v9;
      p_mVariableFramesInPacket += 4;
    }
    while (v8 != v9);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"] }", 3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a4, (uint64_t)v19);
  v18 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x193FFE3A0](&v21);
}

void sub_18F086368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *to_string@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v19;
  _QWORD v20[10];
  char v21;
  uint64_t v22;

  if (!a1)
    return std::string::basic_string[abi:ne180100]<0>(a4, "NULL");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"{ numberInfos=", 14);
  std::ostream::operator<<();
  if (a2 <= a3 || a3 == 0)
    v8 = a2;
  else
    v8 = a3;
  if (v8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)", infos=[\n", 10);
    v9 = 0;
    v10 = a1 + 4;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"  [", 3);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] isDep:", 8);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" preroll:", 9);
      v13 = (_QWORD *)std::ostream::operator<<();
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" flags:0x", 9);
      *(_DWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 8) & 0xFFFFFFB5 | 8;
      v15 = (_QWORD *)std::ostream::operator<<();
      *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" (reserved:", 11);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)")\n", 2);
      ++v9;
      v10 += 16;
    }
    while (v8 != v9);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"] }", 3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a4, (uint64_t)v20);
  v19 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v21 < 0)
    operator delete((void *)v20[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x193FFE3A0](&v22);
}

void sub_18F0865C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void CAObjectDescription(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;

  v5 = 0;
  v3 = (char *)CACopyObjectDescription(a1, &v5);
  if (v3)
  {
    v4 = v3;
    std::string::basic_string[abi:ne180100]<0>(a2, v3);
    free(v4);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

uint64_t to_string@<X0>(const AudioBufferList *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  void **p_mData;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  uint64_t v14;
  _QWORD v15[10];
  char v16;
  uint64_t v17;
  char v18[9];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" buffer", 7);
  if (a1->mNumberBuffers <= 1)
    v6 = ": ";
  else
    v6 = "s: ";
  if (a1->mNumberBuffers <= 1)
    v7 = 2;
  else
    v7 = 3;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  if (a1->mNumberBuffers)
  {
    v8 = 0;
    p_mData = &a1->mBuffers[0].mData;
    do
    {
      if (v8)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"; ", 2);
      v10 = (_QWORD *)std::ostream::operator<<();
      v18[0] = 45;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v18, 1);
      v11 = strlen((const char *)*p_mData + *((unsigned int *)p_mData - 1));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)*p_mData + *((unsigned int *)p_mData - 1), v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (", 2);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)")", 1);
      ++v8;
      p_mData += 2;
    }
    while (v8 < a1->mNumberBuffers);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v15);
  v14 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x193FFE3A0](&v17);
}

void sub_18F086800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void to_string(const AudioBufferList *a1@<X0>, AudioStreamBasicDescription *a2@<X2>, const char *a3@<X3>, unint64_t a4@<X1>, int a5@<W4>, _QWORD *a6@<X8>)
{
  UInt32 mBytesPerFrame;
  Float64 mSampleRate;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  AudioBuffer *mBuffers;
  _QWORD *v18;
  uint64_t v20;
  _QWORD v21[10];
  char v22;
  uint64_t v23;
  AudioStreamBasicDescription v24;

  AudioFormatString(&v24, a2);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v20);
  mBytesPerFrame = v24.mBytesPerFrame;
  if ((v24.mFramesPerPacket & 0x80000000) == 0)
    mSampleRate = COERCE_DOUBLE(&v24);
  else
    mSampleRate = v24.mSampleRate;
  if (!a3)
    a3 = "AudioBufferList";
  v12 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)a3, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"@", 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (", 2);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" fr", 3);
  if (mSampleRate != 0.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)", ", 2);
    v15 = strlen(*(const char **)&mSampleRate);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, *(uint64_t *)&mSampleRate, v15);
  }
  if (a1->mNumberBuffers)
  {
    v16 = 0;
    mBuffers = a1->mBuffers;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"    [", 5);
      *(_QWORD *)((char *)&v21[2] + *(_QWORD *)(v20 - 24)) = 2;
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
      DumpAudioBuffer(&v20, &mBuffers->mNumberChannels, a4, mBytesPerFrame, a5);
      ++v16;
      ++mBuffers;
    }
    while (v16 < a1->mNumberBuffers);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a6, (uint64_t)v21);
  v20 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v21[-1] + *(_QWORD *)(v20 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x193FFE3A0](&v23);
  if (SHIBYTE(v24.mFramesPerPacket) < 0)
    operator delete(*(void **)&v24.mSampleRate);
}

void sub_18F086A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  if (*(char *)(v11 - 97) < 0)
    operator delete(*(void **)(v11 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatString(const AudioStreamBasicDescription *a1, _DWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  UInt32 v7;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[10];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
  if (a2[2] != 1819304813)
    goto LABEL_10;
  v4 = a2[3];
  if ((v4 & 1) != 0)
  {
    if (a2[8] == 32)
    {
      if ((v4 & 2) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"BEF", 3);
        v7 = 10;
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"LEF", 3);
        v7 = -10;
      }
      goto LABEL_11;
    }
LABEL_10:
    v7 = 1;
    goto LABEL_11;
  }
  v5 = a2[6];
  if (!v5)
  {
LABEL_6:
    v7 = 0;
    goto LABEL_11;
  }
  if ((v4 & 0x20) != 0)
  {
    v6 = 1;
  }
  else
  {
    v6 = a2[7];
    if (!v6)
      goto LABEL_6;
  }
  v7 = v5 / v6;
  if ((int)(v5 / v6) >= 1)
  {
    if (((v4 >> 7) & 0x3F) != 0)
    {
      v9 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(v10) = 46;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v10, 1);
      std::ostream::operator<<();
    }
    else
    {
      std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"-bit", 4);
    if ((a2[3] & 2) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)" BEI", 4);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)" LEI", 4);
      v7 = -v7;
    }
  }
LABEL_11:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&v10, (uint64_t)v13);
  v12 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v13[-1] + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&a1->mBytesPerPacket = v11;
  *(_OWORD *)&a1->mSampleRate = v10;
  a1->mBytesPerFrame = v7;
  v13[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x193FFE3A0](&v15);
}

void sub_18F086C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *DumpAudioBuffer(_QWORD *a1, unsigned int *a2, unint64_t a3, int a4, int a5)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v36;
  char v37;

  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" bytes ", 7);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"ch @ ", 5);
  std::ostream::operator<<();
  if (a3 >= 8)
    a3 = 8;
  if (a3)
  {
    if (*((_QWORD *)a2 + 1))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)":", 1);
      v12 = a3 * *a2;
      if (v12)
      {
        v13 = a1 + 3;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v15 = a1 + 1;
        while (2)
        {
          switch(a4)
          {
            case -10:
            case 0:
            case 10:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              v34 = *a1;
              *(_QWORD *)((char *)v13 + *(_QWORD *)(*a1 - 24)) = 6;
              *(_QWORD *)((char *)a1 + *(_QWORD *)(v34 - 24) + 16) = 3;
              v14 += 4;
              std::ostream::operator<<();
              goto LABEL_31;
            case -4:
            case 4:
              v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              *(_DWORD *)((char *)v15 + *(_QWORD *)(*a1 - 24)) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*a1 - 24)) & 0xFFFFFFB5 | 8;
              std::operator<<[abi:ne180100]<std::char_traits<char>>(v33, 48);
              *(_QWORD *)((char *)v13 + *(_QWORD *)(*a1 - 24)) = 8;
              v14 += 4;
              std::ostream::operator<<();
              goto LABEL_31;
            case -3:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              v21 = (uint64_t *)(*a1 - 24);
              v22 = *v21;
              v23 = *(_DWORD *)((_BYTE *)v15 + *v21) & 0xFFFFFFB5;
              if (a5)
              {
                *(_DWORD *)((char *)v15 + v22) = v23 | 8;
                std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, 48);
                v21 = (uint64_t *)(*a1 - 24);
                v24 = 6;
              }
              else
              {
                *(_DWORD *)((char *)v15 + v22) = v23 | 2;
                v24 = 8;
              }
              *(_QWORD *)((char *)v13 + *v21) = v24;
              goto LABEL_30;
            case -2:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              v25 = *a1;
              v26 = *(_QWORD *)(*a1 - 24);
              v27 = *(_DWORD *)((_BYTE *)v15 + v26) & 0xFFFFFFB5;
              if (a5)
                goto LABEL_15;
              *(_DWORD *)((char *)v15 + v26) = v27 | 2;
              *(_QWORD *)((char *)v13 + *(_QWORD *)(v25 - 24)) = 6;
              goto LABEL_26;
            case -1:
            case 1:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              v16 = *a1;
              v17 = *(_QWORD *)(*a1 - 24);
              v18 = *(_DWORD *)((_BYTE *)v15 + v17) & 0xFFFFFFB5;
              if (a5)
              {
                *(_DWORD *)((char *)v15 + v17) = v18 | 8;
                v19 = std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, 48);
                *(_QWORD *)((char *)v13 + *(_QWORD *)(*a1 - 24)) = 2;
                v36 = *v14;
                v20 = &v36;
              }
              else
              {
                *(_DWORD *)((char *)v15 + v17) = v18 | 2;
                *(_QWORD *)((char *)v13 + *(_QWORD *)(v16 - 24)) = 4;
                v37 = *v14;
                v20 = &v37;
                v19 = a1;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, 1);
              ++v14;
              goto LABEL_31;
            case 2:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              v28 = *a1;
              v26 = *(_QWORD *)(*a1 - 24);
              v27 = *(_DWORD *)((_BYTE *)v15 + v26) & 0xFFFFFFB5;
              if (a5)
              {
LABEL_15:
                *(_DWORD *)((char *)v15 + v26) = v27 | 8;
                std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, 48);
                *(_QWORD *)((char *)v13 + *(_QWORD *)(*a1 - 24)) = 4;
                std::ostream::operator<<();
              }
              else
              {
                *(_DWORD *)((char *)v15 + v26) = v27 | 2;
                *(_QWORD *)((char *)v13 + *(_QWORD *)(v28 - 24)) = 6;
LABEL_26:
                std::ostream::operator<<();
              }
              v14 += 2;
LABEL_31:
              if (!--v12)
                return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
              continue;
            case 3:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              v29 = (uint64_t *)(*a1 - 24);
              v30 = *v29;
              v31 = *(_DWORD *)((_BYTE *)v15 + *v29) & 0xFFFFFFB5;
              if (a5)
              {
                *(_DWORD *)((char *)v15 + v30) = v31 | 8;
                std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, 48);
                v29 = (uint64_t *)(*a1 - 24);
                v32 = 6;
              }
              else
              {
                *(_DWORD *)((char *)v15 + v30) = v31 | 2;
                v32 = 8;
              }
              *(_QWORD *)((char *)v13 + *v29) = v32;
LABEL_30:
              std::ostream::operator<<();
              v14 += 3;
              goto LABEL_31;
            default:
              goto LABEL_31;
          }
        }
      }
    }
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
}

uint64_t to_string@<X0>(const AudioBufferList *a1@<X0>, const AudioStreamBasicDescription *a2@<X2>, const char *a3@<X3>, unint64_t a4@<X1>, int a5@<W4>, _QWORD *a6@<X8>)
{
  size_t v9;
  _QWORD *v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  AudioStreamBasicDescription *v14;
  uint64_t mChannelsPerFrame;
  uint64_t v16;
  const AudioStreamBasicDescription *v17;
  UInt32 *p_mBytesPerFrame;
  uint64_t v19;
  AudioBuffer *v20;
  UInt32 v21;
  UInt32 mDataByteSize;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t p_p;
  uint64_t mFramesPerPacket_high;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  const AudioStreamBasicDescription *v32;
  unsigned int v34;
  int v35;
  UInt32 *p_mBytesPerPacket;
  AudioStreamBasicDescription __p;
  _QWORD v39[10];
  char v40;
  uint64_t v41;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p.mBitsPerChannel);
  if (!a3)
    a3 = "AudioBufferList";
  v9 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.mBitsPerChannel, (uint64_t)a3, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.mBitsPerChannel, (uint64_t)"@", 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)":\n", 2);
  if (a4)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v32 = a2;
    while (1)
    {
      v35 = v13;
      v14 = (AudioStreamBasicDescription *)&a2[v11];
      if ((v14->mFormatFlags & 0x20) == 0)
        break;
      mChannelsPerFrame = a2[v11].mChannelsPerFrame;
      if ((_DWORD)mChannelsPerFrame)
        goto LABEL_8;
LABEL_22:
      v12 += mChannelsPerFrame;
      v11 = (v35 + 1);
      v13 = v35 + 1;
      if (v11 >= a4)
        goto LABEL_23;
    }
    mChannelsPerFrame = 1;
LABEL_8:
    v16 = 0;
    v17 = &a2[v11];
    p_mBytesPerFrame = &v17->mBytesPerFrame;
    p_mBytesPerPacket = &v17->mBytesPerPacket;
    v19 = v12;
    v34 = v12;
    v20 = &a1->mBuffers[v12];
    do
    {
      if (v19 + v16 >= (unint64_t)a1->mNumberBuffers)
        break;
      AudioFormatString(&__p, v14);
      v21 = *p_mBytesPerFrame;
      if (!*p_mBytesPerFrame)
      {
        v21 = *p_mBytesPerPacket;
        __p.mBytesPerFrame = 4;
      }
      mDataByteSize = v20->mDataByteSize;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.mBitsPerChannel, (uint64_t)"    [", 5);
      *(_QWORD *)((char *)&v39[2] + *(_QWORD *)(*(_QWORD *)&__p.mBitsPerChannel - 24)) = 2;
      v23 = (_QWORD *)std::ostream::operator<<();
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"] ", 2);
      *(_QWORD *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 24) = 12;
      if ((__p.mFramesPerPacket & 0x80000000) == 0)
        p_p = (uint64_t)&__p;
      else
        p_p = *(_QWORD *)&__p.mSampleRate;
      if ((__p.mFramesPerPacket & 0x80000000) == 0)
        mFramesPerPacket_high = HIBYTE(__p.mFramesPerPacket);
      else
        mFramesPerPacket_high = *(_QWORD *)&__p.mFormatID;
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, p_p, mFramesPerPacket_high);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ", 1);
      *(_QWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 24) = 5;
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"fr ", 3);
      DumpAudioBuffer(&__p.mBitsPerChannel, &v20->mNumberChannels, mDataByteSize / v21, __p.mBytesPerFrame, a5);
      if (SHIBYTE(__p.mFramesPerPacket) < 0)
        operator delete(*(void **)&__p.mSampleRate);
      ++v16;
      ++v20;
    }
    while (mChannelsPerFrame != v16);
    a2 = v32;
    v12 = v34;
    goto LABEL_22;
  }
LABEL_23:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a6, (uint64_t)v39);
  *(_QWORD *)&__p.mBitsPerChannel = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&__p.mBitsPerChannel + *(_QWORD *)(*(_QWORD *)&__p.mBitsPerChannel - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v39[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v40 < 0)
    operator delete((void *)v39[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x193FFE3A0](&v41);
}

void sub_18F08740C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  std::ostringstream::~ostringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t to_string@<X0>(const float *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t i;
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;
  _BYTE v15[9];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  v15[0] = 124;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)v15, 1);
  if (a3)
  {
    v8 = 0;
    do
    {
      for (i = a2; i; --i)
      {
        v15[0] = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)v15, 1);
        *(_QWORD *)((char *)&v12[1] + *(_QWORD *)(v11 - 24)) = 3;
        std::ostream::operator<<();
        ++a1;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"| ", 2);
      ++v8;
    }
    while (v8 != a3);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a4, (uint64_t)v12);
  v11 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x193FFE3A0](&v14);
}

void sub_18F0875A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void AUScopeElementString(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (a2 | a1)
  {
    if (a1 > 5)
      caulk::make_string((caulk *)"scope %d, element %d", (uint64_t)a3, a1, a2);
    else
      caulk::make_string((caulk *)"%s scope, element %d", (uint64_t)a3, CAAUScopeElementFormatter::CAAUScopeElementFormatter(unsigned int,unsigned int)::scopeNames[a1], a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "Global scope");
  }
}

void LOASAudioFile::~LOASAudioFile(LOASAudioFile *this)
{
  LOASAudioFile::~LOASAudioFile(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_1E2903238;
  v2 = *((_QWORD *)this + 38);
  if (v2)
    MEMORY[0x193FFE460](v2, 0x1000C403E1C8BA9);
  v3 = (void *)*((_QWORD *)this + 35);
  if (v3)
  {
    *((_QWORD *)this + 36) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 31);
  if (v4)
  {
    *((_QWORD *)this + 32) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 28);
  if (v5)
  {
    *((_QWORD *)this + 29) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 24);
  if (v6)
  {
    *((_QWORD *)this + 25) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 21);
  if (v7)
  {
    *((_QWORD *)this + 22) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 18);
  if (v8)
  {
    *((_QWORD *)this + 19) = v8;
    operator delete(v8);
  }
  AudioFileObject::~AudioFileObject(this);
}

uint64_t LOASAudioFile::Create(LOASAudioFile *this, CFURLRef url, const AudioStreamBasicDescription *a3)
{
  CFStringRef v6;
  CFStringRef v7;
  uint64_t v8;
  AudioFormatID mFormatID;
  BOOL v10;

  v6 = CFURLCopyPathExtension(url);
  v7 = v6;
  if (v6 && CFEqual(v6, CFSTR("xhe")))
  {
    if (a3->mFormatID != 1970495843)
    {
      v8 = 1718449215;
LABEL_14:
      CFRelease(v7);
      return v8;
    }
LABEL_16:
    v8 = AudioFileObject::Create(this, url, a3);
    if (!v7)
      return v8;
    goto LABEL_14;
  }
  mFormatID = a3->mFormatID;
  if (IsSupportedLATMFormat(mFormatID))
    v10 = mFormatID - 778924081 >= 2;
  else
    v10 = 0;
  if (v10 && mFormatID != 1836069684)
    goto LABEL_16;
  v8 = 1718449215;
  if (v7)
    goto LABEL_14;
  return v8;
}

uint64_t LOASAudioFile::OpenFromDataSource(LOASAudioFile *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned __int8 *begin;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  unsigned __int8 *v10;
  NSObject *v12;
  const char *v13;
  PacketDependencyParser *v15;
  unsigned int v16;
  _QWORD v17[2];
  uint64_t v18;
  std::vector<char> v19;
  AudioStreamBasicDescription v20;
  int v21;
  unsigned __int8 v22[10];
  uint8_t v23[4];
  const char *v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  _BYTE v28[15];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = 0;
  v32 = *MEMORY[0x1E0C80C00];
  do
  {
    v16 = 10;
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned __int8 *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v2, 10, v22, &v16);
    if ((_DWORD)v3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v28 = "LOASAudioFile.cpp";
        *(_WORD *)&v28[8] = 1024;
        *(_DWORD *)&v28[10] = 613;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes Failed", buf, 0x12u);
      }
      goto LABEL_33;
    }
    if (!v16)
    {
      v3 = 2003334207;
      goto LABEL_33;
    }
    if (v16 < 0xA)
      break;
    v4 = ID3Size(v16, v22, (int *)buf);
    v2 += v4;
  }
  while (v4);
  *((_QWORD *)this + 9) = v2;
  v21 = 0;
  *(_DWORD *)buf = 0;
  *(_WORD *)v28 = 1;
  *(_QWORD *)&v28[4] = 0;
  *(_DWORD *)&v28[11] = 0;
  v29 = 0;
  v31 = 0;
  v30 = 0;
  memset(&v20, 0, sizeof(v20));
  memset(&v19, 0, sizeof(v19));
  std::vector<unsigned char>::__append(&v19, 0x2000uLL);
  begin = (unsigned __int8 *)v19.__begin_;
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, std::vector<char>::pointer, int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, *((_QWORD *)this + 9), 0x2000, v19.__begin_, &v21);
  v3 = v6;
  v17[0] = begin;
  v17[1] = &begin[v21];
  v18 = 0;
  if ((begin & 3) != 0 && v21)
  {
    v7 = 0;
    v8 = (_BYTE)begin + 1;
    v9 = -8;
    v10 = begin + 1;
    do
    {
      HIDWORD(v18) = v9 + 16;
      v17[0] = v10;
      v7 = *(v10 - 1) | (v7 << 8);
      LODWORD(v18) = v7;
      v9 += 8;
      if ((v8 & 3) == 0)
        break;
      ++v8;
    }
    while (v10++ < &begin[v21]);
    LODWORD(v18) = v7 << (24 - v9);
  }
  if ((_DWORD)v6 != -39 && (_DWORD)v6)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    *(_DWORD *)v23 = 136315394;
    v24 = "LOASAudioFile.cpp";
    v25 = 1024;
    v26 = 651;
    v12 = MEMORY[0x1E0C81028];
    v13 = "%25s:%-5d  ReadBytes Failed";
    goto LABEL_29;
  }
  if (!MP4::LOASHeader::Deserialize((unsigned int *)buf, (uint64_t)v17))
  {
    if ((MP4::LATMHeader::StreamFormatInfo((uint64_t)v28, begin + 3, v21 - 3, (std::vector<char> *)this + 6, (std::vector<char> *)this + 7, &v20, (unsigned int *)this + 35) & 1) != 0)
    {
      v3 = (*(uint64_t (**)(LOASAudioFile *, AudioStreamBasicDescription *))(*(_QWORD *)this + 176))(this, &v20);
      if (!(_DWORD)v3)
      {
        if ((*(unsigned int (**)(LOASAudioFile *))(*(_QWORD *)this + 272))(this))
        {
          v15 = (PacketDependencyParser *)operator new();
          PacketDependencyParser::PacketDependencyParser(v15, &v20, *((unsigned __int8 **)this + 21), *((_DWORD *)this + 44) - *((_QWORD *)this + 21));
          v3 = 0;
          *((_QWORD *)this + 38) = v15;
        }
        else
        {
          v3 = 0;
        }
        goto LABEL_30;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_30;
      *(_DWORD *)v23 = 136315394;
      v24 = "LOASAudioFile.cpp";
      v25 = 1024;
      v26 = 662;
      v12 = MEMORY[0x1E0C81028];
      v13 = "%25s:%-5d  SetDataFormat Failed";
    }
    else
    {
      v3 = 1718449215;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_30;
      *(_DWORD *)v23 = 136315394;
      v24 = "LOASAudioFile.cpp";
      v25 = 1024;
      v26 = 659;
      v12 = MEMORY[0x1E0C81028];
      v13 = "%25s:%-5d  MP4::LATMHeader::GetStreamFormatInfo Failed";
    }
LABEL_29:
    _os_log_impl(&dword_18EE07000, v12, OS_LOG_TYPE_ERROR, v13, v23, 0x12u);
    goto LABEL_30;
  }
  v3 = 1718449215;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v23 = 136315394;
    v24 = "LOASAudioFile.cpp";
    v25 = 1024;
    v26 = 654;
    v12 = MEMORY[0x1E0C81028];
    v13 = "%25s:%-5d  LOASHeader::Deserialize failed";
    goto LABEL_29;
  }
LABEL_30:
  if (begin)
    operator delete(begin);
  if ((_DWORD)v3)
  {
LABEL_33:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v28 = "LOASAudioFile.cpp";
      *(_WORD *)&v28[8] = 1024;
      *(_DWORD *)&v28[10] = 551;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  LOASAudioFile::ParseAudioFile failed", buf, 0x12u);
    }
  }
  return v3;
}

void sub_18F087C04(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x193FFE460](v2, 0x1000C403E1C8BA9);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t LOASAudioFile::InitializeDataSource(LOASAudioFile *this, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID;
  BOOL v3;

  mFormatID = a2->mFormatID;
  if (IsSupportedLATMFormat(mFormatID))
    v3 = mFormatID - 778924081 >= 2;
  else
    v3 = 0;
  if (!v3 || mFormatID == 1836069684)
    return 1718449215;
  else
    return 0;
}

uint64_t LOASAudioFile::ReadPackets(LOASAudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  int v19;
  uint64_t v20;
  unsigned int v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  if (a6)
  {
    v8 = *a6;
    if ((_DWORD)v8)
    {
      if (a7)
      {
        v15 = (*(uint64_t (**)(LOASAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, v8 + a5, 0, 1);
        if ((_DWORD)v15)
        {
          v16 = v15;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v24 = "LOASAudioFile.cpp";
            v25 = 1024;
            v26 = 119;
            v17 = MEMORY[0x1E0C81028];
            v18 = "%25s:%-5d  ScanForPackets (LATM/LOAS) failed";
LABEL_9:
            _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
            return v16;
          }
          return v16;
        }
        v19 = (*(uint64_t (**)(LOASAudioFile *))(*(_QWORD *)this + 632))(this);
        if (!v19)
          v19 = (*(uint64_t (**)(LOASAudioFile *))(*(_QWORD *)this + 656))(this);
        v22 = *a6 * v19;
      }
      v20 = (*(uint64_t (**)(LOASAudioFile *, uint64_t, unsigned int *, AudioStreamPacketDescription *, uint64_t, unsigned int *, void *))(*(_QWORD *)this + 96))(this, a2, &v22, a4, a5, a6, a7);
      v16 = v20;
      if (a3 && !(_DWORD)v20)
        *a3 = v22;
      return v16;
    }
  }
  v16 = 2003334207;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v24 = "LOASAudioFile.cpp";
    v25 = 1024;
    v26 = 111;
    v17 = MEMORY[0x1E0C81028];
    v18 = "%25s:%-5d  invalid ioNumPackets parameter";
    goto LABEL_9;
  }
  return v16;
}

uint64_t LOASAudioFile::ReadPacketData(LOASAudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, _BYTE *a7)
{
  BOOL v7;
  int v8;
  int v10;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  UInt32 *p_mDataByteSize;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v36;
  UInt32 v37;
  std::vector<char> *v39;
  UInt32 *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  UInt32 v46;
  int v47;
  unsigned int v48;
  _BYTE buf[12];
  _DWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (a4)
    v7 = a7 == 0;
  else
    v7 = 0;
  v8 = v7;
  if (a3 && (v10 = *a3) != 0)
  {
    if (a6 && (v12 = *a6, (_DWORD)v12))
    {
      if (v8)
      {
        v13 = 1869627199;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "LOASAudioFile.cpp";
          LOWORD(v50[0]) = 1024;
          *(_DWORD *)((char *)v50 + 2) = 157;
          v14 = MEMORY[0x1E0C81028];
          v15 = "%25s:%-5d  can't provide packet descriptions for an LATM/LOAS file, in which packets are not necessarily byte-aligned";
LABEL_18:
          _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
        }
      }
      else
      {
        v22 = (*(uint64_t (**)(LOASAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, v12 + a5, 0, 1);
        if ((_DWORD)v22)
        {
          v13 = v22;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return v13;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "LOASAudioFile.cpp";
          LOWORD(v50[0]) = 1024;
          *(_DWORD *)((char *)v50 + 2) = 163;
          v14 = MEMORY[0x1E0C81028];
          v15 = "%25s:%-5d  ScanForPackets (LATM/LOAS) failed";
          goto LABEL_18;
        }
        v23 = (uint64_t *)*((_QWORD *)this + 15);
        if (v23)
        {
          v24 = v23[3];
          if (v24 >= a5)
            v13 = 1685348671;
          else
            v13 = 1885563711;
          if (v24 >= a5)
          {
            v48 = 0;
            v25 = v23[3];
            *a3 = 0;
            v26 = *a6;
            if (v26 + a5 > v25)
            {
              LODWORD(v26) = v25 - a5;
              *a6 = v25 - a5;
            }
            if ((_DWORD)v26)
            {
              v39 = (std::vector<char> *)((char *)this + 192);
              v27 = *((_QWORD *)this + 25) - *((_QWORD *)this + 24);
              if (v27 < (*(unsigned int (**)(LOASAudioFile *))(*(_QWORD *)this + 632))(this))
              {
                v28 = (*(uint64_t (**)(LOASAudioFile *))(*(_QWORD *)this + 632))(this);
                std::vector<unsigned char>::resize(v39, v28);
              }
              if (*a6)
              {
                v29 = 0;
                v30 = 0;
                p_mDataByteSize = &a4->mDataByteSize;
                v43 = v23;
                while (1)
                {
                  v40 = p_mDataByteSize;
                  v41 = v29;
                  v42 = v30;
                  v46 = 0;
                  v47 = 1;
                  v32 = a5 + v29;
                  v45 = 0;
                  CompressedPacketTable::operator[]((uint64_t)buf, v23, a5 + v29);
                  v33 = *(_QWORD *)buf;
                  CompressedPacketTable::operator[]((uint64_t)buf, v43, v32);
                  v48 = v50[0];
                  v34 = (*(uint64_t (**)(LOASAudioFile *, uint64_t, uint64_t, unsigned int *, _QWORD))(*(_QWORD *)this + 72))(this, a2, v33, &v48, *((_QWORD *)this + 24));
                  v13 = v34;
                  if ((_DWORD)v34 != -39 && (_DWORD)v34 != 0)
                    break;
                  v36 = v48;
                  CompressedPacketTable::operator[]((uint64_t)buf, v43, v32);
                  if (v36 < v50[0])
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315394;
                      *(_QWORD *)&buf[4] = "LOASAudioFile.cpp";
                      LOWORD(v50[0]) = 1024;
                      *(_DWORD *)((char *)v50 + 2) = 212;
                      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes did not provide the entire AudioSyncStream element", buf, 0x12u);
                    }
                    return 4294967257;
                  }
                  v44 = 0;
                  HIDWORD(v45) = v48;
                  if (MP4::LOASHeader::CopyByteAlignedAccessUnitsFromAudioSyncStream(&v47, (uint64_t)&v44, (uint64_t)v39->__begin_, (uint64_t)this + 144, &a7[v42], v10 - v42, &v46))
                  {
                    v13 = 1718449215;
                    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                      return v13;
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = "LOASAudioFile.cpp";
                    LOWORD(v50[0]) = 1024;
                    *(_DWORD *)((char *)v50 + 2) = 234;
                    v14 = MEMORY[0x1E0C81028];
                    v15 = "%25s:%-5d  Failed to parse or copy byte-aligned packet from AudioSyncStream";
                    goto LABEL_18;
                  }
                  if (!v47)
                  {
                    LODWORD(v29) = v41;
                    v30 = v42;
                    goto LABEL_56;
                  }
                  *(_QWORD *)(v40 - 3) = v42;
                  v37 = v46;
                  *(v40 - 1) = 0;
                  *v40 = v37;
                  v29 = v41 + 1;
                  v30 = v37 + v42;
                  p_mDataByteSize = v40 + 4;
                  v23 = v43;
                  if (v41 + 1 >= (unint64_t)*a6)
                    goto LABEL_56;
                }
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "LOASAudioFile.cpp";
                  LOWORD(v50[0]) = 1024;
                  *(_DWORD *)((char *)v50 + 2) = 211;
                  v14 = MEMORY[0x1E0C81028];
                  v15 = "%25s:%-5d  ReadBytes failed";
                  goto LABEL_18;
                }
              }
              else
              {
                LODWORD(v29) = 0;
                v30 = 0;
                v13 = 0;
LABEL_56:
                *a3 = v30;
                *a6 = v29;
              }
            }
            else
            {
              *a3 = 0;
              return 4294967257;
            }
          }
        }
        else if (a5 <= 0)
        {
          return 1685348671;
        }
        else
        {
          return 1885563711;
        }
      }
    }
    else
    {
      v13 = 2003334207;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "LOASAudioFile.cpp";
        LOWORD(v50[0]) = 1024;
        *(_DWORD *)((char *)v50 + 2) = 155;
        v14 = MEMORY[0x1E0C81028];
        v15 = "%25s:%-5d  invalid ioNumPackets parameter";
        goto LABEL_18;
      }
    }
  }
  else
  {
    v13 = 2003334207;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "LOASAudioFile.cpp";
      LOWORD(v50[0]) = 1024;
      *(_DWORD *)((char *)v50 + 2) = 154;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  invalid ioNumBytes parameter";
      goto LABEL_18;
    }
  }
  return v13;
}

uint64_t LOASAudioFile::WritePackets(LOASAudioFile *this, unsigned __int8 a2, unsigned int a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  unsigned int v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  int v22;
  UInt32 v23;
  uint64_t v24;
  UInt32 *p_mDataByteSize;
  UInt32 v26;
  UInt32 v27;
  int v28;
  std::vector<char>::size_type v29;
  uint64_t v30;
  const AudioStreamPacketDescription *v31;
  SInt64 mStartOffset;
  uint64_t mDataByteSize;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  SInt64 v37;
  char *v38;
  _DWORD *v39;
  int v40;
  char *v41;
  int v42;
  unsigned __int8 *v43;
  int v44;
  int v45;
  uint64_t v46;
  BOOL v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  std::vector<char>::pointer begin;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v61;
  unsigned int i;
  int v63;
  unsigned int v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  std::vector<char> *v69;
  int v70;
  uint64_t v71;
  UInt32 v72;
  _QWORD v73[2];
  AudioStreamPacketDescription v74;
  _BYTE buf[24];
  uint64_t v76;
  int v77;
  _BYTE v78[24];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v74.mStartOffset = 0;
  *(_QWORD *)&v74.mVariableFramesInPacket = 0;
  v7 = *a6;
  if (!*a6)
  {
    v15 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v15;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "LOASAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 319;
    v16 = MEMORY[0x1E0C81028];
    v17 = "%25s:%-5d  WritePackets has no packets to write";
LABEL_19:
    v20 = buf;
    goto LABEL_20;
  }
  if (!a4)
  {
    v15 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v15;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "LOASAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 321;
    v16 = MEMORY[0x1E0C81028];
    v17 = "%25s:%-5d  WritePackets has no packet descriptions";
    goto LABEL_19;
  }
  v13 = *((_QWORD *)this + 15);
  if (v13)
    v14 = *(_QWORD *)(v13 + 24);
  else
    v14 = 0;
  if (v14 != a5)
  {
    v15 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v15;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "LOASAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 324;
    v16 = MEMORY[0x1E0C81028];
    v17 = "%25s:%-5d  WritePackets: only appending is supported";
    goto LABEL_19;
  }
  v18 = *((_QWORD *)this + 18);
  v19 = *((_QWORD *)this + 19);
  if (v18 == v19)
  {
    v15 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v15;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "LOASAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 327;
    v16 = MEMORY[0x1E0C81028];
    v17 = "%25s:%-5d  WritePackets has no magic cookie from which to derive an AudioSpecificConfig to serialize; please r"
          "efer to the headerdoc for kAudioFilePropertyMagicCookieData";
    goto LABEL_19;
  }
  if ((unint64_t)(v19 - v18) >> 24)
  {
    v15 = 1718449215;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v15;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "LOASAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 328;
    v16 = MEMORY[0x1E0C81028];
    v17 = "%25s:%-5d  LATM can't accommodate an AudioSpecificConfig with a size requiring more than 3 bytes to store";
    goto LABEL_19;
  }
  if (v13
    || (v13 = operator new(),
        v22 = *((_DWORD *)this + 11),
        *(_OWORD *)v13 = 0u,
        *(_OWORD *)(v13 + 16) = 0u,
        *(_DWORD *)(v13 + 32) = v22,
        *((_QWORD *)this + 15) = v13,
        (v7 = *a6) != 0))
  {
    v23 = 0;
    v24 = v7;
    p_mDataByteSize = &a4->mDataByteSize;
    do
    {
      v27 = *p_mDataByteSize;
      p_mDataByteSize += 4;
      v26 = v27;
      if (v27 > v23)
        v23 = v26;
      --v24;
    }
    while (v24);
    v28 = v23 + 18;
  }
  else
  {
    v28 = 18;
  }
  v29 = (v28 + *((_DWORD *)this + 38) - *((_DWORD *)this + 36));
  v69 = (std::vector<char> *)((char *)this + 192);
  if (*((_QWORD *)this + 25) - *((_QWORD *)this + 24) < v29)
  {
    std::vector<unsigned char>::resize(v69, v29);
    v7 = *a6;
  }
  if (!v7)
  {
    LODWORD(v30) = 0;
LABEL_93:
    v15 = 0;
    *a6 = v30;
    return v15;
  }
  v67 = a5;
  v68 = (uint64_t *)v13;
  v30 = 0;
  v66 = a7;
  v65 = a7 + 1;
  while (1)
  {
    v31 = &a4[v30];
    mStartOffset = v31->mStartOffset;
    mDataByteSize = v31->mDataByteSize;
    v73[0] = 0;
    v73[1] = 0;
    v72 = 0;
    v71 = v30 + v67;
    if (v30 + v67)
    {
      v34 = *((_QWORD *)this + 15);
      if (v34)
        v34 = *(_QWORD *)(v34 + 24);
      CompressedPacketTable::operator[]((uint64_t)buf, v68, v34 - 1);
      v35 = *((_QWORD *)this + 15);
      if (v35)
        v35 = *(_QWORD *)(v35 + 24);
      v36 = *(_QWORD *)buf;
      CompressedPacketTable::operator[]((uint64_t)v78, v68, v35 - 1);
      v37 = v36 + *(unsigned int *)&v78[12];
    }
    else
    {
      v37 = 0;
    }
    v74.mStartOffset = v37;
    v38 = &v66[mStartOffset];
    if ((*(unsigned int (**)(LOASAudioFile *))(*(_QWORD *)this + 272))(this))
    {
      v39 = (_DWORD *)*((_QWORD *)this + 38);
      if (v39)
      {
        *(_QWORD *)buf = &v66[mStartOffset];
        *(_QWORD *)&buf[8] = &v66[mStartOffset];
        *(_QWORD *)&buf[16] = &v38[mDataByteSize];
        v76 = 0;
        if ((v38 & 3) != 0)
        {
          v40 = 0;
          v41 = &v65[mStartOffset];
          v42 = -8;
          v43 = (unsigned __int8 *)&v66[mStartOffset];
          do
          {
            v44 = v42;
            if (v43 >= (unsigned __int8 *)&v38[mDataByteSize])
              v45 = 255;
            else
              v45 = *v43;
            v40 = v45 | (v40 << 8);
            ++v43;
            v42 = v44 + 8;
            v47 = (v41++ & 3) == 0;
          }
          while (!v47);
          *(_QWORD *)buf = v43;
          LODWORD(v76) = v40 << (16 - v44);
          HIDWORD(v76) = v44 + 16;
        }
        PacketDependencyParser::PacketDependencyInfo(v39, (uint64_t)buf, (uint64_t)v73);
        v70 = v73[0];
        if (LODWORD(v73[0]))
          goto LABEL_58;
      }
    }
    v46 = *((_QWORD *)this + 42);
    if (v46 != -1 && v71 - v46 < *((_QWORD *)this + 41))
    {
      v47 = (*(unsigned int (**)(LOASAudioFile *))(*(_QWORD *)this + 272))(this) && HIDWORD(v73[0]) == 0;
      if (!v47)
      {
        v70 = 0;
LABEL_58:
        v48 = 0;
        v49 = 4;
        goto LABEL_68;
      }
    }
    v70 = 0;
    v50 = *((_DWORD *)this + 38) - *((_DWORD *)this + 36);
    if ((8 * v50) <= 0xFF)
      v51 = 10;
    else
      v51 = 11;
    if (((8 * v50) & 0xFFFF0000) != 0)
      v52 = v50 + 1;
    else
      v52 = *((_DWORD *)this + 38) - *((_DWORD *)this + 36);
    v47 = ((8 * v50) & 0xFF000000) == 0;
    v49 = v52 + v51;
    if (!v47)
      ++v49;
    v48 = 1;
LABEL_68:
    v53 = mDataByteSize + mDataByteSize / 0xFF + v49 + 1;
    begin = (std::vector<char>::pointer)*((_QWORD *)this + 24);
    v55 = *((_QWORD *)this + 25) - (_QWORD)begin;
    if (v53 > v55)
    {
      std::vector<unsigned char>::__append(v69, v53 - v55);
      begin = v69->__begin_;
    }
    *(_QWORD *)buf = begin;
    *(_QWORD *)&buf[8] = begin;
    v56 = &begin[v53];
    *(_QWORD *)&buf[16] = v56;
    v76 = 0x2000000000;
    v77 = begin & 3;
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 695, 0xBu);
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 0xDu);
    if (v48)
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 1u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 1, 1u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 1u);
      MP4::LATMHeader::PutVariableSizeValue((uint64_t)buf, 0xFFu);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 1, 1u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 6u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 4u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 3u);
      MP4::LATMHeader::PutVariableSizeValue((uint64_t)buf, 8 * (*((_DWORD *)this + 38) - *((_DWORD *)this + 36)));
      v57 = *((_QWORD *)this + 18);
      if (*((_QWORD *)this + 19) != v57)
      {
        v58 = 0;
        v59 = 1;
        do
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, *(unsigned __int8 *)(v57 + v58), 8u);
          v58 = v59;
          v57 = *((_QWORD *)this + 18);
        }
        while (*((_QWORD *)this + 19) - v57 > (unint64_t)v59++);
      }
      *((_QWORD *)this + 42) = v71;
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 3u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 255, 8u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 1u);
      v61 = 0;
    }
    else
    {
      v61 = 1;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, v61, 1u);
    i = mDataByteSize;
    if (mDataByteSize >= 0xFF)
    {
      for (i = mDataByteSize; i > 0xFE; i -= 255)
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 255, 8u);
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, i, 8u);
    if ((_DWORD)mDataByteSize)
    {
      do
      {
        v63 = *v38++;
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, v63, 8u);
        --mDataByteSize;
      }
      while (mDataByteSize);
    }
    AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)buf);
    v72 = (8 * ((int)v56 - (int)begin) - (HIDWORD(v76) + 8 * (*(_DWORD *)&buf[16] - *(_DWORD *)&buf[8])) + 32) >> 3;
    v64 = v72 - 3;
    if ((v72 - 3) >> 13)
    {
      v15 = 1869627199;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v15;
      *(_DWORD *)v78 = 136315394;
      *(_QWORD *)&v78[4] = "LOASAudioFile.cpp";
      *(_WORD *)&v78[12] = 1024;
      *(_DWORD *)&v78[14] = 467;
      v16 = MEMORY[0x1E0C81028];
      v17 = "%25s:%-5d  Packet is too large to be accommodated by LATM";
      goto LABEL_98;
    }
    if (v64 >= 0x100)
      v69->__begin_[1] |= BYTE1(v64);
    *(_BYTE *)(*((_QWORD *)this + 24) + 2) = v64;
    v15 = (*(uint64_t (**)(_QWORD, _QWORD, SInt64, _QWORD, _QWORD, UInt32 *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, *((_QWORD *)this + 9) + v37, v72, *((_QWORD *)this + 24), &v72);
    if ((_DWORD)v15)
      break;
    v74.mVariableFramesInPacket = a4[v30].mVariableFramesInPacket;
    v74.mDataByteSize = v72;
    AudioFileObject::AppendPacket(this, &v74);
    if ((*(unsigned int (**)(LOASAudioFile *))(*(_QWORD *)this + 272))(this) && !v70)
    {
      *(_QWORD *)v78 = v30 + v67;
      if (HIDWORD(v73[0]))
      {
        *(_OWORD *)&v78[8] = xmmword_18F117420;
        *(_WORD *)&v78[16] = WORD2(v73[0]);
        SampleToRollDistanceTable::append_entry((uint64_t)this + 216, (__int128 *)v78);
      }
      else
      {
        SyncSampleTable::append_entry((uint64_t)this + 272, v78);
      }
    }
    if (++v30 >= (unint64_t)*a6)
      goto LABEL_93;
  }
  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    return v15;
  *(_DWORD *)v78 = 136315394;
  *(_QWORD *)&v78[4] = "LOASAudioFile.cpp";
  *(_WORD *)&v78[12] = 1024;
  *(_DWORD *)&v78[14] = 517;
  v16 = MEMORY[0x1E0C81028];
  v17 = "%25s:%-5d  GetDataSource()->WriteBytes Failed";
LABEL_98:
  v20 = v78;
LABEL_20:
  _os_log_impl(&dword_18EE07000, v16, OS_LOG_TYPE_ERROR, v17, v20, 0x12u);
  return v15;
}

uint64_t LOASAudioFile::GetPropertyInfo(LOASAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 != 1919116903)
    return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
  if (a3)
    *a3 = 8;
  if (a4)
    *a4 = *((_BYTE *)this + 100) & 2;
  return 0;
}

double LOASAudioFile::GetProperty(LOASAudioFile *this, int a2, unsigned int *a3, char *a4)
{
  double result;

  if (a2 == 1919116903)
  {
    if (*a3 >= 8)
    {
      result = *((double *)this + 40);
      *(double *)a4 = result;
      *a3 = 8;
    }
  }
  else
  {
    AudioFileObject::GetProperty(this, a2, a3, a4);
  }
  return result;
}

uint64_t LOASAudioFile::SetProperty(LOASAudioFile *this, int a2, uint64_t a3, uint64_t *a4)
{
  double v4;
  uint64_t v5;
  double v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != 1919116903)
    return AudioFileObject::SetProperty(this, a2, a3, a4);
  if ((_DWORD)a3 != 8)
    return 561211770;
  v4 = *(double *)a4;
  *((_QWORD *)this + 40) = *a4;
  v5 = *((unsigned int *)this + 11);
  if (!(_DWORD)v5)
    goto LABEL_11;
  v6 = *((double *)this + 3);
  v7 = 9.22337204e18 / v4 <= v6 || v4 <= 0.0;
  v8 = (uint64_t)(v4 * v6);
  if (v7)
    v8 = 0;
  v9 = v8 / v5;
  if (!v9)
LABEL_11:
    v9 = 215;
  v10 = 0;
  *((_QWORD *)this + 41) = v9;
  return v10;
}

uint64_t LOASAudioFile::SetDataFormat(LOASAudioFile *this, AudioStreamBasicDescription *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v3 = AudioFileObject::SetDataFormat(this, a2);
  if (!(_DWORD)v3 && (*(unsigned int (**)(LOASAudioFile *))(*(_QWORD *)this + 272))(this))
    *((_BYTE *)this + 272) = 1;
  v4 = *((_QWORD *)this + 38);
  if (v4)
  {
    MEMORY[0x193FFE460](v4, 0x1000C403E1C8BA9);
    *((_QWORD *)this + 38) = 0;
  }
  v5 = *((unsigned int *)this + 11);
  if (!(_DWORD)v5)
    goto LABEL_14;
  v6 = *((double *)this + 3);
  v7 = *((double *)this + 40);
  v8 = 9.22337204e18 / v7 <= v6 || v7 <= 0.0;
  v9 = (uint64_t)(v6 * v7);
  if (v8)
    v9 = 0;
  v10 = v9 / v5;
  if (!v10)
LABEL_14:
    v10 = 215;
  *((_QWORD *)this + 41) = v10;
  return v3;
}

uint64_t LOASAudioFile::GetFormatListInfo(LOASAudioFile *this, UInt32 *outPropertyDataSize, unsigned int *a3)
{
  int v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  int v11;

  v5 = *((_DWORD *)this + 8);
  memset(v8, 0, sizeof(v8));
  DWORD2(v8[0]) = v5;
  v6 = *((_QWORD *)this + 21);
  v9 = 0;
  v10 = v6;
  v11 = *((_DWORD *)this + 44) - v6;
  if (AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, v8, outPropertyDataSize))
  {
    *outPropertyDataSize = 48;
    *a3 = 0;
  }
  return 0;
}

uint64_t LOASAudioFile::GetFormatList(LOASAudioFile *this, UInt32 *ioPropertyDataSize, AudioFormatListItem *outPropertyData)
{
  Float64 v6;
  AudioFormatID v7;
  uint64_t v8;
  _BYTE v10[28];
  _OWORD inSpecifier[2];
  uint64_t v12;
  uint64_t v13;
  int v14;

  v6 = *((double *)this + 3);
  v7 = *((_DWORD *)this + 8);
  *(_OWORD *)v10 = *(_OWORD *)((char *)this + 36);
  *(_OWORD *)&v10[12] = *((_OWORD *)this + 3);
  memset(inSpecifier, 0, sizeof(inSpecifier));
  DWORD2(inSpecifier[0]) = v7;
  v8 = *((_QWORD *)this + 21);
  v12 = 0;
  v13 = v8;
  v14 = *((_DWORD *)this + 44) - v8;
  if (AudioFormatGetProperty(0x666C7374u, 0x38u, inSpecifier, ioPropertyDataSize, outPropertyData))
  {
    outPropertyData->mASBD.mSampleRate = v6;
    outPropertyData->mASBD.mFormatID = v7;
    *(_OWORD *)&outPropertyData->mASBD.mFormatFlags = *(_OWORD *)v10;
    *(_OWORD *)&outPropertyData->mASBD.mBytesPerFrame = *(_OWORD *)&v10[12];
    outPropertyData->mChannelLayoutTag = *((_DWORD *)this + 35);
    *ioPropertyDataSize = 48;
  }
  return 0;
}

uint64_t LOASAudioFile::UpdateSize(LOASAudioFile *this)
{
  return 0;
}

uint64_t LOASAudioFile::GetNumBytes(LOASAudioFile *this)
{
  uint64_t v3;

  v3 = 0;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v3);
  return v3 - *((_QWORD *)this + 9);
}

uint64_t LOASAudioFile::GetNumPackets(LOASAudioFile *this)
{
  uint64_t v2;
  uint64_t result;
  int v4;

  if (*((_BYTE *)this + 312)
    || (v4 = (*(uint64_t (**)(LOASAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1), result = 0, !v4))
  {
    v2 = *((_QWORD *)this + 15);
    if (v2)
      return *(_QWORD *)(v2 + 24);
    else
      return 0;
  }
  return result;
}

uint64_t LOASAudioFile::PacketToRollDistance(LOASAudioFile *this, AudioPacketRollDistanceTranslation *a2)
{
  a2->mRollDistance = 0;
  (*(void (**)(LOASAudioFile *, SInt64, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, a2->mPacket + 1, 0, 1);
  if (*((_BYTE *)this + 272) || *((_BYTE *)this + 216))
    return PacketToRollDistanceForRestrictedRandomAccess(a2, (LOASAudioFile *)((char *)this + 216), (LOASAudioFile *)((char *)this + 272));
  else
    return 0;
}

uint64_t LOASAudioFile::ScanForIndependentPacket(uint64_t a1, int a2, AudioIndependentPacketTranslation *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
    return AudioFileObject::ScanForIndependentPacket(a1, a2, a3);
  (*(void (**)(uint64_t, SInt64, _QWORD, uint64_t))(*(_QWORD *)a1 + 688))(a1, a3->mPacket + 2, 0, 1);
  if (a2 != 1)
    return ScanForIndependentPacketWithRestrictedRandomAccess(0, a3, (SampleToRollDistanceTable **)(a1 + 216), (SyncSampleTable **)(a1 + 272));
  v6 = *(_QWORD *)(a1 + 120);
  if (v6)
    v7 = *(_QWORD *)(v6 + 24);
  else
    v7 = 0;
  while (1)
  {
    result = ScanForIndependentPacketWithRestrictedRandomAccess(1, a3, (SampleToRollDistanceTable **)(a1 + 216), (SyncSampleTable **)(a1 + 272));
    if ((_DWORD)result)
      break;
    if (a3->mIndependentlyDecodablePacket == -1)
    {
      (*(void (**)(uint64_t, unint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 688))(a1, v7 + 100, 0, 1);
      v9 = *(_QWORD *)(a1 + 120);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 24);
        v11 = v10 > v7;
        v7 = v10;
        if (v11)
          continue;
      }
    }
    return 0;
  }
  return result;
}

uint64_t LOASAudioFile::PacketToDependencyInfo(LOASAudioFile *this, AudioPacketDependencyInfoTranslation *a2)
{
  if ((*(unsigned int (**)(LOASAudioFile *))(*(_QWORD *)this + 272))(this))
  {
    (*(void (**)(LOASAudioFile *, SInt64, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, a2->mPacket + 1, 0, 1);
    return PacketToDependencyInfoForRestrictedRandomAccess(a2, (LOASAudioFile *)((char *)this + 216), (LOASAudioFile *)((char *)this + 272));
  }
  else
  {
    AudioFileObject::PacketToDependencyInfo(this, a2);
    return 0;
  }
}

uint64_t LOASAudioFile::GetMagicCookieDataSize(LOASAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3)
    *a3 = *((_BYTE *)this + 100) & 2;
  if (a2)
    *a2 = *((_DWORD *)this + 44) - *((_DWORD *)this + 42);
  return 0;
}

uint64_t LOASAudioFile::GetMagicCookieData(LOASAudioFile *this, unsigned int *a2, void *__dst)
{
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;

  result = 2003334207;
  if (__dst)
  {
    v6 = (_BYTE *)*((_QWORD *)this + 21);
    v7 = (_BYTE *)*((_QWORD *)this + 22);
    if (v6 != v7)
    {
      result = 561211770;
      if (a2)
      {
        v8 = v7 - v6;
        if (v8 <= *a2)
        {
          memmove(__dst, v6, v8);
          result = 0;
          *a2 = *((_DWORD *)this + 44) - *((_DWORD *)this + 42);
        }
      }
    }
  }
  return result;
}

uint64_t LOASAudioFile::SetMagicCookieData(LOASAudioFile *this, unsigned int a2, char *a3)
{
  int v6;
  char v7;
  int v8;
  char *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  PacketDependencyParser *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v22;
  _QWORD v23[2];
  uint64_t v24;
  _BYTE v25[296];
  _DWORD v26[9];
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD v30[276];
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v26[2] = 0;
  v28 = 0;
  v29 = 0;
  v30[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v30);
  v32 = 0u;
  v31 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v26);
  bzero(v25, 0x5F0uLL);
  v23[0] = a3;
  v23[1] = &a3[a2];
  v24 = 0;
  if ((a3 & 3) != 0 && a2)
  {
    v6 = 0;
    v7 = (_BYTE)a3 + 1;
    v8 = -8;
    v9 = a3;
    do
    {
      v10 = v8;
      v11 = *v9++;
      v6 = v11 | (v6 << 8);
      v8 += 8;
      if ((v7 & 3) == 0)
        break;
      ++v7;
    }
    while (v9 < &a3[a2]);
    v23[0] = v9;
    LODWORD(v24) = v6 << (24 - v8);
    HIDWORD(v24) = v10 + 16;
  }
  v22 = 0;
  if (MP4AudioESDS::Deserialize((uint64_t)v25, (uint64_t)v23, (int *)&v22, 2))
  {
    v12 = 1718449215;
  }
  else
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 21, a3, &a3[a2], a2);
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 18, &a3[v22], &a3[v22 + v27], v27);
    v13 = *((_QWORD *)this + 38);
    if (v13)
    {
      MEMORY[0x193FFE460](v13, 0x1000C403E1C8BA9);
      *((_QWORD *)this + 38) = 0;
    }
    if ((*(unsigned int (**)(LOASAudioFile *))(*(_QWORD *)this + 272))(this))
    {
      v14 = (PacketDependencyParser *)operator new();
      PacketDependencyParser::PacketDependencyParser(v14, (const AudioStreamBasicDescription *)((char *)this + 24), *((unsigned __int8 **)this + 21), *((_DWORD *)this + 44) - *((_QWORD *)this + 21));
      v12 = 0;
      *((_QWORD *)this + 38) = v14;
    }
    else
    {
      v12 = 0;
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v12;
}

void sub_18F0895F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x193FFE460](v1, 0x1000C403E1C8BA9);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x608]);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2 + 1488);
  _Unwind_Resume(a1);
}

uint64_t LOASAudioFile::GetChannelLayoutSize(LOASAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3)
    *a3 = 0;
  if (a2)
    *a2 = 32;
  return 0;
}

uint64_t LOASAudioFile::GetChannelLayout(LOASAudioFile *this, unsigned int *a2, AudioChannelLayout *a3)
{
  uint64_t result;
  size_t v5;

  result = 561211770;
  if (a2)
  {
    LODWORD(v5) = *a2;
    if (*a2 >= 0xC)
    {
      if (v5 >= 0x20)
        v5 = 32;
      else
        v5 = v5;
      *a2 = v5;
      if (a3)
      {
        bzero(a3, v5);
        result = 0;
        a3->mChannelLayoutTag = *((_DWORD *)this + 35);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t LOASAudioFile::GetInfoDictionary(LOASAudioFile *this, CACFDictionary *a2)
{
  AudioFileObject *v3;
  double v5;

  v5 = 0.0;
  v3 = (AudioFileObject *)(*(uint64_t (**)(LOASAudioFile *, double *))(*(_QWORD *)this + 544))(this, &v5);
  if ((_DWORD)v3)
    return 1886681407;
  AudioFileObject::AddDurationToInfoDictionary(v3, a2, &v5);
  return 0;
}

uint64_t LOASAudioFile::GetEstimatedDuration(LOASAudioFile *this, double *a2)
{
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  _BYTE v19[12];
  unsigned int v20;
  _QWORD v21[3];
  uint64_t v22;

  v4 = *((double *)this + 3);
  v5 = *((unsigned int *)this + 11);
  if (*((_BYTE *)this + 312))
  {
    if ((_DWORD)v5)
      v6 = (double)((*(uint64_t (**)(LOASAudioFile *))(*(_QWORD *)this + 240))(this) * v5) / v4;
    else
      v6 = 0.0;
    v7 = 0;
LABEL_8:
    *a2 = v6;
    return v7;
  }
  *a2 = 0.0;
  if ((*(unsigned int (**)(LOASAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, 16, 0, 1))
  {
    return 0;
  }
  v9 = *((_QWORD *)this + 15);
  if (!v9)
  {
    v9 = operator new();
    v10 = *((_DWORD *)this + 11);
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_DWORD *)(v9 + 32) = v10;
    *((_QWORD *)this + 15) = v9;
  }
  v22 = 0;
  v7 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v22);
  if (!(_DWORD)v7)
  {
    v22 -= *((_QWORD *)this + 9);
    v11 = *((_QWORD *)this + 15);
    if (v11)
      v11 = *(_QWORD *)(v11 + 24);
    v12 = v11 - 1;
    v13 = v11 >> 1;
    if (v13 >= 8)
      v14 = 8;
    else
      v14 = v13;
    v15 = v12 - v14;
    CompressedPacketTable::operator[]((uint64_t)v21, (uint64_t *)v9, v12);
    v16 = v21[0];
    CompressedPacketTable::operator[]((uint64_t)v19, (uint64_t *)v9, v12);
    v17 = v16 + v20;
    CompressedPacketTable::operator[]((uint64_t)v18, (uint64_t *)v9, v14);
    v6 = (double)v22 / (double)(v17 - v18[0]) * (double)(unint64_t)(v15 * v5) / v4;
    goto LABEL_8;
  }
  return v7;
}

uint64_t LOASAudioFile::IsDataFormatSupported(LOASAudioFile *this, const AudioStreamBasicDescription *a2)
{
  return IsSupportedLATMFormat(a2->mFormatID);
}

uint64_t LOASAudioFile::FindMaximumPacketSize(LOASAudioFile *this)
{
  if (*((_BYTE *)this + 312)
    || !(*(unsigned int (**)(LOASAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1))
  {
    return *((unsigned int *)this + 28);
  }
  else
  {
    return 0;
  }
}

uint64_t LOASAudioFile::GetPacketSizeUpperBound(LOASAudioFile *this)
{
  __int128 v2;
  int v3;
  OpaqueAudioConverter *v4;
  int *v5;
  int *v6;
  uint64_t result;
  int v8;
  AudioStreamBasicDescription v9;
  AudioStreamBasicDescription v10;
  AudioConverterRef inAudioConverter;
  unsigned int v12;
  int *v13;
  int **v14;
  int **v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  int **v17;
  unsigned int *v18;
  int *v19;
  int v20;

  v12 = 0;
  v2 = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&v10.mSampleRate = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v10.mBytesPerPacket = v2;
  *(_QWORD *)&v10.mBitsPerChannel = *((_QWORD *)this + 7);
  inAudioConverter = 0;
  v9.mSampleRate = v10.mSampleRate;
  *(_OWORD *)&v9.mFormatID = xmmword_18F116FC0;
  v9.mBytesPerFrame = 4;
  v9.mChannelsPerFrame = HIDWORD(v2);
  *(_QWORD *)&v9.mBitsPerChannel = 32;
  v3 = AudioConverterNewWithOptions(&v10, &v9, 0, &inAudioConverter);
  v4 = inAudioConverter;
  if (!inAudioConverter)
    return (*((_DWORD *)this + 13) << 10);
  v5 = (int *)*((_QWORD *)this + 21);
  v6 = (int *)*((_QWORD *)this + 22);
  if (v5 != v6)
  {
    LODWORD(v18) = 1684891491;
    v20 = (_DWORD)v6 - (_DWORD)v5;
    v19 = v5;
    v13 = (int *)&v18;
    v14 = (int **)&v20;
    v15 = &v19;
    v16 = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
    v17 = &v13;
    v3 = with_resolved((int)inAudioConverter, &v16);
  }
  if (!v3)
  {
    v8 = 4;
    v20 = 2020175987;
    v18 = &v12;
    v19 = &v8;
    v13 = &v20;
    v14 = &v19;
    v15 = (int **)&v18;
    v16 = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
    v17 = &v13;
    with_resolved((int)v4, &v16);
  }
  AudioConverterDispose(v4);
  result = v12;
  if (!v12)
    return (*((_DWORD *)this + 13) << 10);
  return result;
}

uint64_t LOASAudioFile::ScanForPackets(LOASAudioFile *this, uint64_t a2, DataSource *a3, char a4)
{
  DataSource *v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  BOOL v20;
  BOOL v21;
  unsigned int v22;
  SInt64 v23;
  unint64_t v24;
  std::vector<char>::pointer begin;
  unint64_t v26;
  uint64_t v27;
  std::vector<char>::pointer v28;
  char *v29;
  int v30;
  std::vector<char>::pointer v31;
  int v32;
  unint64_t v33;
  int v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  std::vector<char> *v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  UInt32 v52;
  uint64_t v53;
  unsigned int v54;
  AudioStreamPacketDescription v55;
  _BYTE buf[19];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60[10];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v55.mStartOffset = 0;
  *(_QWORD *)&v55.mVariableFramesInPacket = 0;
  v53 = 0;
  if (*((_BYTE *)this + 312))
    return 0;
  v5 = a3;
  if (!a3)
    v5 = (DataSource *)*((_QWORD *)this + 13);
  v8 = *((_QWORD *)this + 15);
  if (!v8)
  {
    v8 = operator new();
    v9 = *((_DWORD *)this + 11);
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_DWORD *)(v8 + 32) = v9;
    *((_QWORD *)this + 15) = v8;
  }
  v10 = *(_QWORD *)(v8 + 24);
  if (a2 != -1 && v10 >= a2)
    return 0;
  v54 = 0;
  v11 = (*(uint64_t (**)(DataSource *, uint64_t *))(*(_QWORD *)v5 + 24))(v5, &v53);
  if ((_DWORD)v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "LOASAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 940;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetSize failed", buf, 0x12u);
    }
  }
  else
  {
    if (v10)
    {
      v13 = *((_QWORD *)this + 9);
      CompressedPacketTable::operator[]((uint64_t)buf, (uint64_t *)v8, v10 - 1);
      v14 = *(_QWORD *)buf;
      CompressedPacketTable::operator[]((uint64_t)&v46, (uint64_t *)v8, v10 - 1);
      v15 = v14 + v13 + HIDWORD(v47);
    }
    else
    {
      (*(void (**)(LOASAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, 0);
      v15 = *((_QWORD *)this + 9);
    }
    if (a2 == -1)
    {
      v17 = -1;
    }
    else
    {
      v16 = *((_QWORD *)this + 15);
      if (v16)
        v16 = *(_QWORD *)(v16 + 24);
      v17 = a2 - v16;
    }
    if (v15 >= v53)
    {
      v11 = 0;
LABEL_73:
      *((_BYTE *)this + 312) = a4;
    }
    else
    {
      v42 = (std::vector<char> *)((char *)this + 192);
      while (1)
      {
        v52 = 0;
        v18 = (*(uint64_t (**)(DataSource *, _QWORD, uint64_t, uint64_t, unsigned __int8 *, unsigned int *))(*(_QWORD *)v5 + 48))(v5, 0, v15, 10, v60, &v54);
        v11 = v18;
        v20 = (_DWORD)v18 == -39 || (_DWORD)v18 == 0;
        v21 = v20 && v54 >= 3;
        if (!v21)
          break;
        if ((MP4::LOASHeader::IsLOASSyncWord((MP4::LOASHeader *)v60, (const unsigned __int8 *)3, &v52, v19) & 1) != 0)
        {
          v23 = v15 - *((_QWORD *)this + 9);
          v55.mStartOffset = v23;
          v24 = v52;
          v55.mDataByteSize = v52;
          if (v24 > (*(unsigned int (**)(LOASAudioFile *))(*(_QWORD *)this + 632))(this))
            (*(void (**)(LOASAudioFile *, unint64_t))(*(_QWORD *)this + 648))(this, v24);
          v15 += v24;
          if (v15 > v53)
            goto LABEL_76;
          AudioFileObject::AppendPacket(this, &v55);
          if ((*(unsigned int (**)(LOASAudioFile *))(*(_QWORD *)this + 272))(this))
          {
            begin = (std::vector<char>::pointer)*((_QWORD *)this + 24);
            v26 = *((_QWORD *)this + 25) - (_QWORD)begin;
            if (v24 > v26)
            {
              std::vector<unsigned char>::__append(v42, v24 - v26);
              begin = v42->__begin_;
            }
            v27 = (*(uint64_t (**)(DataSource *, _QWORD, SInt64, unint64_t, std::vector<char>::pointer, unsigned int *))(*(_QWORD *)v5 + 48))(v5, 0, *((_QWORD *)this + 9) + v23, v24, begin, &v54);
            v11 = v27;
            if ((_DWORD)v27 && (_DWORD)v27 != -39 || v54 < v24)
              break;
            *(_DWORD *)buf = 0;
            *(_WORD *)&buf[4] = 1;
            *(_QWORD *)&buf[8] = 0;
            *(_DWORD *)&buf[15] = 0;
            v58 = 0;
            v59 = 0;
            v57 = 0;
            v28 = v42->__begin_;
            v29 = &v42->__begin_[v24];
            v50[0] = v28;
            v50[1] = v29;
            v51 = 0;
            if ((v28 & 3) != 0 && (_DWORD)v24)
            {
              v30 = 0;
              v31 = v28 + 1;
              v32 = -8;
              v33 = (unint64_t)v31;
              do
              {
                LODWORD(v51) = v30 << 8;
                HIDWORD(v51) = v32 + 16;
                v50[0] = v33;
                v34 = *(unsigned __int8 *)(v33 - 1) | (v30 << 8);
                LODWORD(v51) = v34;
                v32 += 8;
                if ((v31 & 3) == 0)
                  break;
                LOBYTE(v31) = (_BYTE)v31 + 1;
                v30 = v34;
                v21 = v33++ >= (unint64_t)v29;
              }
              while (!v21);
              LODWORD(v51) = v34 << (24 - v32);
            }
            if (!MP4::LOASHeader::Deserialize((unsigned int *)buf, (uint64_t)v50))
            {
              if (!(*(unsigned int (**)(LOASAudioFile *))(*(_QWORD *)this + 272))(this))
                return 1718449215;
              v35 = (_DWORD *)*((_QWORD *)this + 38);
              if (!v35)
                return 1718449215;
              v36 = (uint64_t)v42->__begin_;
              v46 = v36;
              v47 = v36;
              v48 = v36 + v24;
              v49 = 0;
              if ((v36 & 3) != 0)
              {
                v37 = 0;
                v38 = 0;
                v39 = v36 + 1;
                v40 = (unsigned __int8 *)v36;
                do
                {
                  if ((unint64_t)v40 >= v36 + v24)
                    v41 = 255;
                  else
                    v41 = *v40;
                  v37 = v41 | (v37 << 8);
                  ++v40;
                  v38 += 8;
                  v20 = (v39++ & 3) == 0;
                }
                while (!v20);
                v46 = v36 + ((v36 ^ 3) & 3) + 1;
                LODWORD(v49) = v37 << ((8 * ((v36 ^ 3) & 3)) ^ 0x18);
                HIDWORD(v49) = v38;
              }
              v45[0] = 0;
              v45[1] = 0;
              AT::TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v46, HIDWORD(v59) + 24);
              PacketDependencyParser::PacketDependencyInfo(v35, (uint64_t)&v46, (uint64_t)v45);
              if (!LODWORD(v45[0]))
              {
                v43 = v10;
                if (HIDWORD(v45[0]))
                {
                  v44 = xmmword_18F117420;
                  WORD4(v44) = WORD2(v45[0]);
                  SampleToRollDistanceTable::append_entry((uint64_t)this + 216, (__int128 *)&v43);
                }
                else
                {
                  SyncSampleTable::append_entry((uint64_t)this + 272, &v43);
                }
              }
            }
          }
          if (v17 == -1)
            v17 = -1;
          else
            --v17;
          if (!v17)
            break;
          ++v10;
        }
        else
        {
          v22 = ID3Size(v54, v60, (int *)buf);
          if (!v22)
          {
            v11 = 4294967256;
            break;
          }
          v15 += v22;
        }
        if (v15 >= v53)
          goto LABEL_73;
      }
    }
  }
  if ((v11 & 0xFFFFFFFE) == 0xFFFFFFD8)
  {
    if ((_DWORD)v11 == -39)
    {
LABEL_76:
      v11 = 0;
      *((_BYTE *)this + 312) = a4;
      return v11;
    }
    return 0;
  }
  return v11;
}

uint64_t LOASAudioFile::CreatePacketTable(LOASAudioFile *this)
{
  return (*(uint64_t (**)(LOASAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1);
}

uint64_t IsSupportedLATMFormat(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 > 1634497331)
  {
    if (a1 > 1936487277)
    {
      if (a1 != 1936487278 && a1 != 1953986161)
      {
        v3 = 1970495843;
LABEL_14:
        if (a1 != v3)
          return 0;
      }
    }
    else if (a1 != 1634497332 && a1 != 1836069684)
    {
      v3 = 1936487267;
      goto LABEL_14;
    }
  }
  else if (((a1 - 1633772389) > 0xE || ((1 << (a1 - 101)) & 0x488F) == 0)
         && (a1 - 778924081) >= 2)
  {
    v3 = 1633772320;
    goto LABEL_14;
  }
  return result;
}

void LOASAudioFormat::~LOASAudioFormat(LOASAudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL LOASAudioFormat::ExtensionIsThisFormat(LOASAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3;

  v3 = 1;
  if (CFStringCompare(theString1, CFSTR("latm"), 1uLL))
    return CFStringCompare(theString1, CFSTR("loas"), 1uLL) == kCFCompareEqualTo;
  return v3;
}

uint64_t LOASAudioFormat::FileDataIsThisFormat(LOASAudioFormat *this, int a2, unsigned __int8 *a3)
{
  char *v3;
  int v4;
  char v5;
  int v6;
  int v7;
  int v8;
  _QWORD v10[2];
  uint64_t v11;
  unsigned int v12;
  __int16 v13;
  _DWORD v14[9];

  v12 = 0;
  v13 = 1;
  *(_QWORD *)v14 = 0;
  *(_DWORD *)((char *)&v14[1] + 3) = 0;
  memset(&v14[3], 0, 24);
  v3 = (char *)&a3[a2];
  v10[0] = a3;
  v10[1] = v3;
  v11 = 0;
  if ((a3 & 3) != 0 && a2)
  {
    v4 = 0;
    v5 = (_BYTE)a3 + 1;
    v6 = -8;
    do
    {
      v7 = v6;
      v8 = *a3++;
      v4 = v8 | (v4 << 8);
      v6 += 8;
      if ((v5 & 3) == 0)
        break;
      ++v5;
    }
    while (a3 < (unsigned __int8 *)v3);
    v10[0] = a3;
    LODWORD(v11) = v4 << (24 - v6);
    HIDWORD(v11) = v7 + 16;
  }
  if (MP4::LOASHeader::Deserialize(&v12, (uint64_t)v10))
    return 0xFFFFFFFFLL;
  else
    return 1;
}

const __CFArray *LOASAudioFormat::GetExtensions(LOASAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[4];

  v4[3] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("loas");
  v4[1] = CFSTR("latm");
  v4[2] = CFSTR("xhe");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 3, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *LOASAudioFormat::GetUTIs(LOASAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("public.mp4a-loas");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *LOASAudioFormat::GetMIMETypes(LOASAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[4];

  v4[3] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("audio/usac");
  v4[1] = CFSTR("audio/aac");
  v4[2] = CFSTR("audio/x-aac");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 3, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void LOASAudioFormat::GetFileTypeName(LOASAudioFormat *this, const __CFString **a2)
{
  __CFBundle *v3;
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_5:
    v4 = (const __CFString *)CFRetain(CFSTR("LATM/LOAS"));
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_5;
LABEL_3:
  v4 = CFBundleCopyLocalizedString(v3, CFSTR("LATM LOAS"), CFSTR("LATM LOAS"), CFSTR("FileTypeNames"));
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_18F08A4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t LOASAudioFormat::GetAvailableFormatIDs(LOASAudioFormat *this, unsigned int *a2, _DWORD *a3)
{
  unsigned int v5;
  uint64_t PropertyInfo;
  UInt32 v8;
  unint64_t v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int v14;
  int v15;
  void *outPropertyData;
  UInt32 outPropertyDataSize;

  if (a3)
    v5 = *a2 >> 2;
  else
    v5 = 0;
  outPropertyDataSize = 0;
  PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if ((_DWORD)PropertyInfo)
    return PropertyInfo;
  v8 = outPropertyDataSize;
  v9 = (unint64_t)outPropertyDataSize >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&outPropertyData, v9, 1);
  PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, outPropertyData);
  v10 = outPropertyData;
  if (!(_DWORD)PropertyInfo)
  {
    if (v8 >= 4)
    {
      v11 = 0;
      if (v9 <= 1)
        v9 = 1;
      else
        v9 = v9;
      v13 = (int *)outPropertyData;
      do
      {
        v15 = *v13++;
        v14 = v15;
        if (IsSupportedLATMFormat(v15))
        {
          if (a3 && v11 < v5)
            a3[v11] = v14;
          ++v11;
        }
        --v9;
      }
      while (v9);
    }
    else
    {
      v11 = 0;
      v12 = 0;
      if (!outPropertyData)
        goto LABEL_23;
    }
    free(v10);
    v12 = v11;
LABEL_23:
    PropertyInfo = 0;
    *a2 = 4 * v12;
    return PropertyInfo;
  }
  if (outPropertyData)
    free(outPropertyData);
  return PropertyInfo;
}

void sub_18F08A638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9)
    free(a9);
  _Unwind_Resume(exception_object);
}

uint64_t LOASAudioFormat::GetAvailableStreamDescriptions(LOASAudioFormat *this, int a2, unsigned int *a3, void *a4)
{
  uint64_t PropertyInfo;
  UInt32 v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  size_t v14;
  UInt32 ioPropertyDataSize;
  void *v17;
  UInt32 outPropertyDataSize;
  _OWORD outPropertyData[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  outPropertyDataSize = 0;
  PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if ((_DWORD)PropertyInfo)
    return PropertyInfo;
  v8 = outPropertyDataSize;
  v9 = (unint64_t)outPropertyDataSize >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&v17, v9, 1);
  PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, v17);
  v10 = v17;
  if (!(_DWORD)PropertyInfo)
  {
    if (v8 < 4)
    {
      if (v17)
        free(v17);
    }
    else
    {
      v11 = 0;
      if (v9 <= 1)
        v12 = 1;
      else
        v12 = v9;
      v13 = 1;
      do
      {
        if (v10[v11] == a2 && (IsSupportedLATMFormat(a2) & 1) != 0)
          break;
        v13 = ++v11 < v9;
      }
      while (v12 != v11);
      free(v10);
      v17 = 0;
      if (v13)
      {
        v20 = 0;
        memset(outPropertyData, 0, sizeof(outPropertyData));
        DWORD2(outPropertyData[0]) = a2;
        ioPropertyDataSize = 40;
        AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, outPropertyData);
        if (*a3 >= 0x28)
          v14 = 40;
        else
          v14 = 0;
        *a3 = v14;
        if (a4)
          memcpy(a4, outPropertyData, v14);
        PropertyInfo = 0;
        v10 = v17;
        if (v17)
          goto LABEL_4;
        return PropertyInfo;
      }
    }
    *a3 = 0;
    return 1718449215;
  }
  if (v17)
LABEL_4:
    free(v10);
  return PropertyInfo;
}

void sub_18F08A7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11)
    free(a11);
  _Unwind_Resume(exception_object);
}

uint64_t LOASAudioFormat::GetHFSCodes(LOASAudioFormat *this, unsigned int *a2, void *a3)
{
  *a2 = 0;
  return 0;
}

double LOASAudioFormat::New(LOASAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 80) = 0x6C6F617300000001;
  *(_QWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 96) = -1;
  *(_WORD *)(v1 + 100) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0x100000000;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)v1 = &off_1E2903238;
  *(_OWORD *)(v1 + 201) = 0u;
  *(_OWORD *)(v1 + 188) = 0u;
  *(_OWORD *)(v1 + 172) = 0u;
  *(_OWORD *)(v1 + 156) = 0u;
  *(_OWORD *)(v1 + 140) = 0u;
  *(_BYTE *)(v1 + 272) = 0;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_BYTE *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0x4014000000000000;
  *(_QWORD *)(v1 + 328) = 215;
  *(_QWORD *)(v1 + 336) = -1;
  *(_QWORD *)&result = 16843008;
  *(_DWORD *)(v1 + 136) = 16843008;
  return result;
}

double LOASAudioFormat::NewStream(LOASAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_QWORD *)(v1 + 88) = -1;
  *(_QWORD *)(v1 + 96) = -1;
  *(_QWORD *)(v1 + 104) = -1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_DWORD *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_QWORD *)(v1 + 224) = 0;
  *(_BYTE *)(v1 + 232) = 0;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 240) = xmmword_18F116F80;
  *(_DWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 300) = 0;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_DWORD *)(v1 + 328) = 0;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_QWORD *)v1 = &off_1E29058F0;
  *(_QWORD *)(v1 + 352) = 0;
  *(_DWORD *)(v1 + 360) = 0;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_WORD *)(v1 + 364) = 1;
  *(_QWORD *)(v1 + 368) = 0;
  *(_DWORD *)(v1 + 375) = 0;
  *(_QWORD *)(v1 + 396) = 0;
  *(_OWORD *)(v1 + 380) = 0u;
  *(_WORD *)(v1 + 404) = 256;
  *(_DWORD *)(v1 + 408) = 0;
  *(_DWORD *)(v1 + 484) = 0;
  *(_BYTE *)(v1 + 488) = 0;
  *(_QWORD *)(v1 + 461) = 0;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_BYTE *)(v1 + 480) = 0;
  *(_QWORD *)(v1 + 472) = 0;
  *(_BYTE *)(v1 + 489) = 3;
  *(_BYTE *)(v1 + 493) = 0;
  *(_DWORD *)(v1 + 496) = 0;
  *(_QWORD *)(v1 + 528) = 0;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_BYTE *)(v1 + 536) = -1;
  *(_BYTE *)(v1 + 544) = 0;
  *(_QWORD *)(v1 + 640) = 0;
  *(_BYTE *)(v1 + 648) = 0;
  *(_DWORD *)(v1 + 652) = 0;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_BYTE *)(v1 + 600) = 0;
  *(_QWORD *)(v1 + 616) = 0;
  *(_QWORD *)(v1 + 608) = 0;
  *(_DWORD *)(v1 + 632) = 0;
  *(_QWORD *)(v1 + 624) = 0;
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::APMIDIRouter(void)::$_1>(caulk::inplace_function_detail::wrapper<APMIDIRouter::APMIDIRouter(void)::$_1>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned char const*&&,unsigned int &&)#1}::__invoke(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, unsigned int *a5)
{
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD);

  v5 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a3 + 168);
  if (v5)
    return v5(*a2, *a4, *a5);
  else
    return 4294967292;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::vtable<APMIDIRouter::APMIDIRouter(void)::$_0>(caulk::inplace_function_detail::wrapper<APMIDIRouter::APMIDIRouter(void)::$_0>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned int &&,void *&&,void *&&,void *&&)#1}::__invoke(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t (*v7)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v7 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a3 + 160);
  if (v7)
    return v7(*a2, *a4, *a5, *a6, *a7);
  else
    return 4294967292;
}

uint64_t *caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    (*(void (**)(uint64_t *))(*a1 + 24))(a1 + 1);
    v4 = *a2;
    *a2 = (uint64_t)&caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::empty;
    *a1 = v4;
    (*(void (**)(uint64_t *, uint64_t *))(v4 + 16))(a1 + 1, a2 + 1);
  }
  return a1;
}

uint64_t *caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    (*(void (**)(uint64_t *))(*a1 + 24))(a1 + 1);
    v4 = *a2;
    *a2 = (uint64_t)&caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::empty;
    *a1 = v4;
    (*(void (**)(uint64_t *, uint64_t *))(v4 + 16))(a1 + 1, a2 + 1);
  }
  return a1;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_8>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_8>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned char const*&&,unsigned int &&)#1}::__invoke()
{
  return 4294967292;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_7>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_7>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned int &&,void *&&,void *&&,void *&&)#1}::__invoke()
{
  return 4294967292;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned char const*&&,unsigned int &&)#1}::__invoke(int **a1, uint64_t *a2, uint64_t a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t (**v12)();
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *a4;
  v7 = *a5;
  v11 = 0;
  v10 = *(_QWORD *)(a3 + 192);
  v8 = *a1;
  v12 = caulk::inplace_function<void ()(MIDI::EventList const*),48ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>;
  v13[0] = v5;
  v13[1] = &v10;
  v13[2] = &v11;
  MIDI::LegacyMIDIConverter<MIDI::MIDI_1_to_2_Translator>::convertLegacyDataToEventList(v8, v6, v7, 0, (uint64_t *)&v12);
  ((void (*)(_QWORD *))v12[3])(v13);
  return v11;
}

void sub_18F08AC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>)::{lambda(void *,void *)#1}::__invoke(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>)::{lambda(void *,void *)#2}::__invoke(_OWORD *a1, uint64_t a2)
{
  *a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a2);
}

uint64_t caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,MIDI::EventList const*&&)#1}::__invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = (**(uint64_t (***)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)a1, 0, *a2);
  **(_DWORD **)(a1 + 16) = result;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#1}::__invoke(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#2}::__invoke(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned int &&,void *&&,void *&&,void *&&)#1}::__invoke(int **a1, uint64_t *a2, uint64_t a3, int *a4, int *a5, int *a6, int *a7)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  unsigned int v15;
  _BYTE v16[3];
  uint64_t v17;
  int v18;
  uint64_t (**v19)();
  _QWORD v20[7];

  v20[6] = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = *a4;
  v9 = *a5;
  v10 = *a6;
  v18 = *a7;
  v17 = *(_QWORD *)(a3 + 192);
  v11 = v8 >> 4;
  if (v11 > 0xF)
    goto LABEL_9;
  if (((1 << v11) & 0x4F00) == 0)
  {
    if (((1 << v11) & 0x3000) != 0)
    {
      v12 = 2;
      goto LABEL_10;
    }
    if (v11 == 15 && v8 > 0xF0u)
    {
      v12 = qword_18F10DFC8[(v8 + 15)];
      goto LABEL_10;
    }
LABEL_9:
    v12 = 0;
    goto LABEL_10;
  }
  v12 = 3;
LABEL_10:
  v16[0] = v8;
  v16[1] = v9;
  v16[2] = v10;
  v15 = 0;
  v13 = *a1;
  v19 = caulk::inplace_function<void ()(MIDI::EventList const*),48ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>;
  v20[0] = v7;
  v20[1] = &v17;
  v20[2] = &v18;
  v20[3] = &v15;
  MIDI::LegacyMIDIConverter<MIDI::MIDI_1_to_2_Translator>::convertLegacyDataToEventList(v13, (uint64_t)v16, v12, 0, (uint64_t *)&v19);
  ((void (*)(_QWORD *))v19[3])(v20);
  return v15;
}

void sub_18F08AE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5>)::{lambda(void *,void *)#1}::__invoke(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5>)::{lambda(void *,void *)#2}::__invoke(_OWORD *a1, uint64_t a2)
{
  *a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a2);
}

uint64_t caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,MIDI::EventList const*&&)#1}::__invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = (**(uint64_t (***)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)a1, **(unsigned int **)(a1 + 16), *a2);
  **(_DWORD **)(a1 + 24) = result;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#1}::__invoke(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#2}::__invoke(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned char const*&&,unsigned int &&)#1}::__invoke(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t (**v11)();
  _QWORD v12[7];

  v12[6] = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *a4;
  v7 = *a5;
  v10 = 0;
  v9 = *(_QWORD *)(a3 + 192);
  v11 = caulk::inplace_function<void ()(MIDI::EventList const*),48ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>;
  v12[0] = v5;
  v12[1] = &v9;
  v12[2] = &v10;
  MIDI::LegacyMIDIConverter<MIDI::IdentityTranslator>::convertLegacyDataToEventList(v6, v7, 0, (uint64_t *)&v11);
  ((void (*)(_QWORD *))v11[3])(v12);
  return v10;
}

void sub_18F08AFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4>)::{lambda(void *,void *)#1}::__invoke(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4>)::{lambda(void *,void *)#2}::__invoke(_OWORD *a1, uint64_t a2)
{
  *a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a2);
}

uint64_t caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,MIDI::EventList const*&&)#1}::__invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = (**(uint64_t (***)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)a1, 0, *a2);
  **(_DWORD **)(a1 + 16) = result;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#1}::__invoke(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#2}::__invoke(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned int &&,void *&&,void *&&,void *&&)#1}::__invoke(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, int *a6, int *a7)
{
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  unsigned int v12;
  _BYTE v13[3];
  uint64_t v14;
  int v15;
  uint64_t (**v16)();
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = *a4;
  v9 = *a5;
  v10 = *a6;
  v15 = *a7;
  v14 = *(_QWORD *)(a3 + 192);
  v13[0] = v8;
  v13[1] = v9;
  v13[2] = v10;
  v12 = 0;
  v16 = caulk::inplace_function<void ()(MIDI::EventList const*),48ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>;
  v17[0] = v7;
  v17[1] = &v14;
  v17[2] = &v15;
  v17[3] = &v12;
  MIDI::LegacyMIDIConverter<MIDI::IdentityTranslator>::convertLegacyDataToEventList((uint64_t)v13, 3, 0, (uint64_t *)&v16);
  ((void (*)(_QWORD *))v16[3])(v17);
  return v12;
}

void sub_18F08B18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3>)::{lambda(void *,void *)#1}::__invoke(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3>)::{lambda(void *,void *)#2}::__invoke(_OWORD *a1, uint64_t a2)
{
  *a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a2);
}

uint64_t caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,MIDI::EventList const*&&)#1}::__invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = (**(uint64_t (***)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)a1, **(unsigned int **)(a1 + 16), *a2);
  **(_DWORD **)(a1 + 24) = result;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#1}::__invoke(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3::operator() const(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#2}::__invoke(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_2>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_2>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned char const*&&,unsigned int &&)#1}::__invoke(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, unsigned int *a5)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a3 + 168))(*a2, *a4, *a5);
}

void caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::vtable(void)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned int &&,void *&&,void *&&,void *&&)#1}::__invoke()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_1>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_1>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned int &&,void *&&,void *&&,void *&&)#1}::__invoke(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a3 + 160))(*a2, *a4, *a5, *a6, *a7);
}

void caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable(void)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned char const*&&,unsigned int &&)#1}::__invoke()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_0>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_0>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned char const*&&,unsigned int &&)#1}::__invoke(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, unsigned int *a5)
{
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD);

  v5 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a3 + 168);
  if (v5)
    return v5(*a2, *a4, *a5);
  else
    return 4294967292;
}

uint64_t caulk::inplace_function_detail::vtable<void,MIDI::LegacyPacketList const*>::vtable<APMIDIRouter::handleMIDIEventList(void *,AudioUnitPluginDispatch const&,unsigned int,MIDIEventList const*)::$_1>(caulk::inplace_function_detail::wrapper<APMIDIRouter::handleMIDIEventList(void *,AudioUnitPluginDispatch const&,unsigned int,MIDIEventList const*)::$_1>)::{lambda(void *,MIDI::LegacyPacketList const*&&)#1}::__invoke(uint64_t result, unsigned int **a2)
{
  unsigned int *v2;
  _QWORD *v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  int v8;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11[4];

  v2 = *a2;
  if (**a2)
  {
    v3 = (_QWORD *)result;
    v4 = 0;
    v5 = (unint64_t)(v2 + 1);
    do
    {
      v6 = *(unsigned __int16 *)(v5 + 8);
      if (*(unsigned __int8 *)(v5 + 10) == 240
        && *(unsigned __int8 *)(v6 + v5 + 9) == 247
        && (v7 = *(uint64_t (**)(_QWORD))(v3[1] + 168)) != 0)
      {
        result = v7(*v3);
        *(_DWORD *)v3[4] = result;
      }
      else
      {
        v11[0] = v5 + 10;
        v11[1] = v6;
        v11[2] = *(_QWORD *)v5;
        v11[3] = 0;
        while (1)
        {
          v9[1] = 0;
          v10 = 0;
          v9[0] = 0;
          v8 = MIDI::LegacyPacketList::PacketReader::read(v11, &v10, v9);
          result = *(unsigned int *)v3[4];
          if (!v8 || (_DWORD)result)
            break;
          *(_DWORD *)v3[4] = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v3[2])(*v3, BYTE2(v9[0]), BYTE1(v9[0]), LOBYTE(v9[0]), (*(_DWORD *)v3[3] + v10));
        }
      }
      if ((_DWORD)result)
        break;
      v5 = (v5 + *(unsigned __int16 *)(v5 + 8) + 13) & 0xFFFFFFFFFFFFFFFCLL;
      ++v4;
    }
    while (v4 < *v2);
  }
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::LegacyPacketList const*>::vtable<APMIDIRouter::handleMIDIEventList(void *,AudioUnitPluginDispatch const&,unsigned int,MIDIEventList const*)::$_1>(caulk::inplace_function_detail::wrapper<APMIDIRouter::handleMIDIEventList(void *,AudioUnitPluginDispatch const&,unsigned int,MIDIEventList const*)::$_1>)::{lambda(void *,void *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::LegacyPacketList const*>::vtable<APMIDIRouter::handleMIDIEventList(void *,AudioUnitPluginDispatch const&,unsigned int,MIDIEventList const*)::$_1>(caulk::inplace_function_detail::wrapper<APMIDIRouter::handleMIDIEventList(void *,AudioUnitPluginDispatch const&,unsigned int,MIDIEventList const*)::$_1>)::{lambda(void *,void *)#2}::__invoke(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t ___ZN12APMIDIRouter17handleSetPropertyEPvRK23AudioUnitPluginDispatchjjjPKvj_block_invoke(uint64_t a1, uint64_t a2, char a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v6;
  char v7;
  uint64_t v8;
  uint64_t (**v9)();
  _QWORD v10[7];

  v10[6] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 32);
  v6 = 0;
  v8 = a2;
  v9 = _ZN5caulk16inplace_functionIFvPKN4MIDI16LegacyPacketListEELm48ELm8ENS_23inplace_function_detail6vtableEE16k_wrapper_vtableIZZN12APMIDIRouter17handleSetPropertyEPvRK23AudioUnitPluginDispatchjjjPKvjEUb_E4__13EE;
  v10[0] = &v8;
  v10[1] = &v6;
  v10[2] = v4;
  v10[3] = &v7;
  MIDI::convertEventListToPacketList(a4, (uint64_t *)&v9);
  ((void (*)(_QWORD *))v9[3])(v10);
  return v6;
}

void sub_18F08B534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN12APMIDIRouter17handleSetPropertyEPvRK23AudioUnitPluginDispatchjjjPKvj_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _DWORD *v4;
  MIDIProtocolID v5;
  int v6;
  uint64_t v7;
  int *v9;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  MIDIEventPacket *v15;
  unint64_t v16;
  MIDIEventPacket *v17;
  MIDITimeStamp v18;
  ByteCount v19;
  UInt32 *v20;
  MIDIEventPacket *v21;
  UInt32 v22;
  UInt32 v23;
  UInt32 v24;
  UInt32 v25;
  int *v26;
  unint64_t v27;
  unsigned __int8 *v28;
  UInt32 v29;
  int v30;
  int v31;
  int v32;
  MIDITimeStamp v33;
  int v34;
  MIDIEventPacket *v35;
  MIDIEventPacket *v36;
  UInt32 v37;
  int v38;
  MIDITimeStamp v39;
  MIDIEventPacket *v40;
  MIDIEventPacket *v41;
  MIDIEventPacket *v42;
  uint64_t v43;
  MIDIEventPacket *v44;
  MIDIEventPacket *v45;
  int v46;
  MIDITimeStamp v47;
  MIDIEventPacket *v48;
  MIDIEventPacket *v49;
  unint64_t v50;
  MIDIEventPacket *v51;
  ByteCount v52;
  MIDIEventPacket *v53;
  MIDIEventPacket *v54;
  MIDIEventPacket *v55;
  MIDIEventPacket *v56;
  MIDIEventPacket *v57;
  MIDIEventPacket *v58;
  BOOL v59;
  unsigned int v60;
  _DWORD *v61;
  uint64_t v62;
  MIDIEventPacket *v63;
  MIDIEventPacket *v64;
  BOOL v65;
  int v66;
  _DWORD *v67;
  uint64_t v68;
  MIDIEventPacket *v69;
  unint64_t v70;
  MIDIEventPacket *v71;
  MIDITimeStamp v72;
  ByteCount v73;
  const UInt32 *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  UInt32 v82;
  unsigned int v83;
  BOOL v84;
  MIDIEventPacket *v85;
  MIDIEventPacket *v86;
  int v87;
  unsigned int v88;
  UInt32 v89;
  unsigned int v90;
  MIDITimeStamp v91;
  MIDIEventPacket *v92;
  MIDIEventPacket *v93;
  unsigned int v94;
  unsigned int v95;
  UInt32 v96;
  unsigned int v97;
  unsigned int v98;
  UInt32 v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  unsigned __int8 v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int j;
  int v109;
  int v110;
  uint64_t v111;
  char v113;
  int v114;
  uint64_t v115;
  int v116;
  unsigned __int8 *v117;
  unsigned int v118;
  UInt32 v119;
  unsigned int i;
  uint64_t v121;
  unsigned int v122;
  MIDIEventPacket *v123;
  BOOL v124;
  int *v125;
  char v126;
  _BYTE *v127;
  char v128;
  int *v129;
  uint64_t v130;
  int *v131;
  int v132;
  _OWORD *v133;
  int v134;
  uint64_t v136;
  MIDITimeStamp time[2];
  MIDITimeStamp v138;
  _DWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  UInt32 words[2];
  uint64_t v144;
  MIDIEventList evtlist;
  UInt32 v146[8];

  v4 = a4;
  v136 = *(_QWORD *)(a1 + 32);
  v5 = *(_DWORD *)(v136 + 16);
  v6 = *a4;
  if (*a4 != v5)
  {
    v9 = *(int **)(a1 + 40);
    if (v5 != kMIDIProtocol_2_0 || v6 != 1)
    {
      v11 = v5 == kMIDIProtocol_1_0 && v6 == 2;
      if (v11 && a4[1])
      {
        v7 = 0;
        v12 = 0;
        v13 = (uint64_t)(a4 + 2);
        v125 = v9 + 521;
        while (1)
        {
          v132 = v12;
          v14 = *(unsigned int *)(v13 + 8);
          v139 = (_DWORD *)(v13 + 12);
          v140 = v14;
          v130 = v13;
          v141 = *(_QWORD *)v13;
          v142 = 0;
          v15 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
          time[0] = 0;
          *(_QWORD *)words = 0;
          v144 = 0;
          while (MIDI::EventList::PacketReader::read((uint64_t *)&v139, time, words))
          {
            v16 = (unint64_t)words[0] >> 28;
            if (((1 << v16) & 0xA02B) != 0)
            {
              v15 = MIDIEventListAdd(&evtlist, 0x114uLL, v15, time[0], MIDI::UniversalPacket::word_sizes[v16], words);
              if (!v15)
              {
                if (!(_DWORD)v7)
                  v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
                memset(&evtlist, 0, sizeof(evtlist));
                v17 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                v18 = time[0];
                v19 = MIDI::UniversalPacket::word_sizes[(unint64_t)words[0] >> 28];
                v20 = words;
                goto LABEL_24;
              }
            }
            else if ((_DWORD)v16 == 4)
            {
              v22 = HIBYTE(words[0]) & 0xF | 0x20;
              v23 = words[1];
              switch(BYTE2(words[0]) >> 4)
              {
                case 2:
                case 3:
                  v26 = &v125[12 * (HIBYTE(words[0]) & 0xF)];
                  v27 = ((unint64_t)words[0] >> 16) & 0xF;
                  v28 = (unsigned __int8 *)v26 + 3 * v27;
                  v29 = (words[0] >> 8) & 0x7F;
                  v134 = words[0] & 0x7F;
                  if ((words[0] & 0x100000) != 0)
                    v30 = 2;
                  else
                    v30 = 1;
                  if (v30 == *v28 && v29 == v28[1])
                  {
                    v31 = v27 | 0xB0;
                    if (v134 == *((unsigned __int8 *)v26 + 3 * v27 + 2))
                    {
                      v32 = (v31 << 16) | (v22 << 24);
                      v33 = time[0];
                      goto LABEL_60;
                    }
                  }
                  else
                  {
                    v31 = v27 | 0xB0;
                  }
                  v126 = v30;
                  v127 = (char *)v26 + 3 * v27;
                  v129 = &v125[12 * (HIBYTE(words[0]) & 0xF)];
                  if ((words[0] & 0x100000) != 0)
                    v34 = 25344;
                  else
                    v34 = 25856;
                  v32 = (v22 << 24) | (v31 << 16);
                  v128 = BYTE1(words[0]) & 0x7F;
                  *(_OWORD *)v146 = v34 | v29 | v32;
                  v35 = MIDIEventListAdd(&evtlist, 0x114uLL, v15, time[0], 1uLL, v146);
                  if (v35)
                  {
                    v36 = v35;
                    v33 = time[0];
                  }
                  else
                  {
                    if (!(_DWORD)v7)
                      v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
                    memset(&evtlist, 0, sizeof(evtlist));
                    v40 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                    v33 = time[0];
                    v36 = MIDIEventListAdd(&evtlist, 0x114uLL, v40, time[0], MIDI::UniversalPacket::word_sizes[(unint64_t)v146[0] >> 28], v146);
                  }
                  *(_OWORD *)v146 = v32 | (v34 - 256) | v134;
                  v41 = MIDIEventListAdd(&evtlist, 0x114uLL, v36, v33, 1uLL, v146);
                  if (!v41)
                  {
                    if (!(_DWORD)v7)
                      v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
                    memset(&evtlist, 0, sizeof(evtlist));
                    v42 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                    v41 = MIDIEventListAdd(&evtlist, 0x114uLL, v42, v33, MIDI::UniversalPacket::word_sizes[(unint64_t)v146[0] >> 28], v146);
                  }
                  v15 = v41;
                  v4 = a4;
                  *v127 = v126;
                  v43 = (uint64_t)v129 + 3 * v27;
                  *(_BYTE *)(v43 + 1) = v128;
                  *(_BYTE *)(v43 + 2) = v134;
LABEL_60:
                  *(_OWORD *)v146 = v32 | (v23 >> 25) | 0x600;
                  v44 = MIDIEventListAdd(&evtlist, 0x114uLL, v15, v33, 1uLL, v146);
                  if (v44)
                  {
                    v15 = v44;
                  }
                  else
                  {
                    if (!(_DWORD)v7)
                      v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
                    memset(&evtlist, 0, sizeof(evtlist));
                    v45 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                    v15 = MIDIEventListAdd(&evtlist, 0x114uLL, v45, time[0], MIDI::UniversalPacket::word_sizes[(unint64_t)v146[0] >> 28], v146);
                  }
                  v46 = (v23 >> 18) & 0x7F;
                  if (v46)
                  {
                    *(_OWORD *)v146 = v46 | v32 | 0x2600u;
                    v47 = time[0];
                    v48 = MIDIEventListAdd(&evtlist, 0x114uLL, v15, time[0], 1uLL, v146);
                    if (!v48)
                    {
                      if (!(_DWORD)v7)
                        v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
                      memset(&evtlist, 0, sizeof(evtlist));
                      v49 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                      v48 = MIDIEventListAdd(&evtlist, 0x114uLL, v49, v47, MIDI::UniversalPacket::word_sizes[(unint64_t)v146[0] >> 28], v146);
                    }
                    v15 = v48;
                  }
                  continue;
                case 8:
                case 9:
                case 10:
                case 11:
                  v24 = BYTE2(words[0]) >> 4 == 9;
                  if (words[1] >> 25)
                    v24 = words[1] >> 25;
                  v146[3] = 0;
                  *(_QWORD *)&v146[1] = 0;
                  v25 = words[0] & 0x7F00 | (BYTE2(words[0]) << 16) | (v22 << 24) | v24;
                  goto LABEL_48;
                case 12:
                  if ((words[0] & 1) != 0)
                  {
                    v38 = BYTE2(words[0]) << 16;
                    v50 = (v38 - 0x100000) | (v22 << 24);
                    *(_OWORD *)v146 = (v38 - 0x100000) & 0xFFFFFF80 | (v22 << 24) | (words[1] >> 8) & 0x7F;
                    v51 = v15;
                    v52 = MIDI::UniversalPacket::word_sizes[v50 >> 28];
                    v53 = MIDIEventListAdd(&evtlist, 0x114uLL, v51, time[0], v52, v146);
                    if (v53)
                    {
                      v54 = v53;
                      v39 = time[0];
                    }
                    else
                    {
                      if (!(_DWORD)v7)
                        v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
                      memset(&evtlist, 0, sizeof(evtlist));
                      v55 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                      v39 = time[0];
                      v54 = MIDIEventListAdd(&evtlist, 0x114uLL, v55, time[0], MIDI::UniversalPacket::word_sizes[(unint64_t)v146[0] >> 28], v146);
                    }
                    *(_OWORD *)v146 = v50 | v23 & 0x7F | 0x2000;
                    v56 = MIDIEventListAdd(&evtlist, 0x114uLL, v54, v39, v52, v146);
                    if (v56)
                    {
                      v15 = v56;
                      v4 = a4;
                    }
                    else
                    {
                      v4 = a4;
                      if (!(_DWORD)v7)
                        v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
                      memset(&evtlist, 0, sizeof(evtlist));
                      v57 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                      v15 = MIDIEventListAdd(&evtlist, 0x114uLL, v57, v39, MIDI::UniversalPacket::word_sizes[(unint64_t)v146[0] >> 28], v146);
                    }
                    v37 = v22 << 24;
                  }
                  else
                  {
                    v37 = v22 << 24;
                    v38 = BYTE2(words[0]) << 16;
                    v39 = time[0];
                  }
                  *(_OWORD *)v146 = v38 | v37 | HIWORD(v23) & 0x7F00;
                  v58 = MIDIEventListAdd(&evtlist, 0x114uLL, v15, v39, 1uLL, v146);
                  if (v58)
                  {
                    v15 = v58;
                    continue;
                  }
                  if (!(_DWORD)v7)
LABEL_50:
                    v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
LABEL_51:
                  memset(&evtlist, 0, sizeof(evtlist));
                  v17 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                  v18 = time[0];
                  v19 = MIDI::UniversalPacket::word_sizes[(unint64_t)v146[0] >> 28];
                  v20 = v146;
                  break;
                case 13:
                  v146[3] = 0;
                  *(_QWORD *)&v146[1] = 0;
                  v25 = (BYTE2(words[0]) << 16) | (v22 << 24) | (words[1] >> 25 << 8);
                  goto LABEL_48;
                case 14:
                  v146[3] = 0;
                  *(_QWORD *)&v146[1] = 0;
                  v25 = (words[1] >> 10) & 0x7F00 | (words[1] >> 25) | (BYTE2(words[0]) << 16) | (v22 << 24);
LABEL_48:
                  v146[0] = v25;
                  v21 = MIDIEventListAdd(&evtlist, 0x114uLL, v15, time[0], 1uLL, v146);
                  if (v21)
                    goto LABEL_25;
                  if (!(_DWORD)v7)
                    goto LABEL_50;
                  goto LABEL_51;
                default:
                  continue;
              }
LABEL_24:
              v21 = MIDIEventListAdd(&evtlist, 0x114uLL, v17, v18, v19, v20);
LABEL_25:
              v15 = v21;
            }
          }
          if (evtlist.numPackets)
            v59 = (_DWORD)v7 == 0;
          else
            v59 = 0;
          if (v59)
            v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
          v13 = v130 + 4 * *(unsigned int *)(v130 + 8) + 12;
          v12 = v132 + 1;
          if ((v132 + 1) >= v4[1])
            return v7;
        }
      }
      return 0;
    }
    if (!a4[1])
      return 0;
    v7 = 0;
    v66 = 0;
    v67 = a4 + 2;
    v131 = *(int **)(a1 + 40);
    v133 = v9 + 4;
LABEL_111:
    v68 = v67[2];
    v139 = v67 + 3;
    v140 = v68;
    v141 = *(_QWORD *)v67;
    v142 = 0;
    v69 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
    time[1] = 0;
    v138 = 0;
    time[0] = 0;
    while (1)
    {
      while (1)
      {
LABEL_112:
        if (!MIDI::EventList::PacketReader::read((uint64_t *)&v139, &v138, time))
        {
          if (evtlist.numPackets)
            v124 = (_DWORD)v7 == 0;
          else
            v124 = 0;
          if (v124)
            v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
          v67 += v67[2] + 3;
          if (++v66 >= a4[1])
            return v7;
          goto LABEL_111;
        }
        v70 = LODWORD(time[0]);
        if (LODWORD(time[0]) >> 28 == 2)
          break;
        v69 = MIDIEventListAdd(&evtlist, 0x114uLL, v69, v138, MIDI::UniversalPacket::word_sizes[(unint64_t)LODWORD(time[0]) >> 28], (const UInt32 *)time);
        if (!v69)
        {
          if (!(_DWORD)v7)
            v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
          memset(&evtlist, 0, sizeof(evtlist));
          v71 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
          v72 = v138;
          v73 = MIDI::UniversalPacket::word_sizes[(unint64_t)LODWORD(time[0]) >> 28];
          v74 = (const UInt32 *)time;
          goto LABEL_219;
        }
      }
      *(_QWORD *)words = 0;
      v144 = 0;
      v75 = BYTE2(time[0]);
      v76 = *((unsigned __int8 *)v9 + 32);
      v77 = *v9;
      v78 = BYTE2(time[0]) >> 4;
      if (!*((_BYTE *)v9 + 32))
      {
        if ((v77 & 0xFF0000) != 0)
        {
          if (((v77 ^ LODWORD(time[0])) & 0xF0000) != 0)
          {
            v76 = 1;
            *((_BYTE *)v9 + 32) = 1;
            goto LABEL_119;
          }
          if (v78 != 11)
          {
            v76 = (v77 & 0xDF00) != 0 || v78 != 12;
            goto LABEL_119;
          }
          switch(BYTE1(v77))
          {
            case 'b':
              v109 = time[0] & 0xFF00;
              v110 = 25344;
              goto LABEL_224;
            case 'c':
              v109 = time[0] & 0xFF00;
              v110 = 25088;
              goto LABEL_224;
            case 'd':
              v109 = time[0] & 0xFF00;
              v110 = 25856;
              goto LABEL_224;
            case 'e':
              v109 = time[0] & 0xFF00;
              v110 = 25600;
LABEL_224:
              if (v109 != v110 && (time[0] & 0xF0DF00) != 0xB00600)
                break;
              goto LABEL_228;
            default:
              if (BYTE1(v77) == 32)
              {
                if ((time[0] & 0xFF00) != 0)
                  break;
LABEL_228:
                v76 = 0;
                *v133 = *(_OWORD *)time;
                goto LABEL_119;
              }
              if (!BYTE1(v77) && (time[0] & 0xFF00) == 0x2000)
                goto LABEL_228;
              break;
          }
        }
        else
        {
          v76 = 1;
          if ((time[0] & 0xF00000) != 0xB00000 || v78 != 11)
            goto LABEL_119;
          if (BYTE1(time[0]) - 98 < 4 || BYTE1(time[0]) == 32 || !BYTE1(time[0]))
          {
            v76 = 0;
            *(_OWORD *)v9 = *(_OWORD *)time;
            v77 = *v9;
            goto LABEL_119;
          }
        }
        v76 = 1;
      }
LABEL_119:
      v79 = BYTE3(v70) & 0xF;
      v80 = BYTE3(v70) & 0xF | 0x40;
      if (BYTE2(v77) && v76)
      {
        *((_BYTE *)v9 + 32) = 1;
        *(_QWORD *)&v146[2] = 0;
        v146[0] = v77 & 0xFF00 | (BYTE2(v77) << 16) & 0x80FFFFFF | ((BYTE3(v70) & 0xF | 0x40) << 24);
        v81 = v77;
        v82 = v77 << 25;
        if (v81 >= 0x41)
        {
          v83 = (v81 & 0x3F) << 19;
          if (v83)
          {
            do
            {
              v82 |= v83;
              v84 = v83 > 0x3F;
              v83 >>= 6;
            }
            while (v84);
          }
        }
        v146[1] = v82;
        v85 = MIDIEventListAdd(&evtlist, 0x114uLL, v69, v138, 2uLL, v146);
        if (!v85)
        {
          if (!(_DWORD)v7)
            v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
          memset(&evtlist, 0, sizeof(evtlist));
          v86 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
          v85 = MIDIEventListAdd(&evtlist, 0x114uLL, v86, v138, MIDI::UniversalPacket::word_sizes[(unint64_t)v146[0] >> 28], v146);
        }
        v69 = v85;
        v78 = BYTE2(v70) >> 4;
        *v9 = 0;
        *(_QWORD *)&v146[2] = 0;
        v87 = v9[4];
        v75 = BYTE2(v70);
        if (BYTE2(v87))
        {
          LOWORD(v146[0]) = v87 & 0xFF00;
          BYTE2(v146[0]) = BYTE2(v87);
          HIBYTE(v146[0]) = BYTE3(v70) & 0xF | 0x40;
          v88 = v87;
          v89 = v87 << 25;
          if (v88 >= 0x41)
          {
            v90 = (v88 & 0x3F) << 19;
            if (v90)
            {
              do
              {
                v89 |= v90;
                v84 = v90 > 0x3F;
                v90 >>= 6;
              }
              while (v84);
            }
          }
          v146[1] = v89;
          v91 = v138;
          v92 = MIDIEventListAdd(&evtlist, 0x114uLL, v85, v138, 2uLL, v146);
          if (!v92)
          {
            if (!(_DWORD)v7)
              v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
            memset(&evtlist, 0, sizeof(evtlist));
            v93 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
            v92 = MIDIEventListAdd(&evtlist, 0x114uLL, v93, v91, MIDI::UniversalPacket::word_sizes[(unint64_t)v146[0] >> 28], v146);
          }
          v69 = v92;
          v9 = v131;
          *(_DWORD *)v133 = 0;
          v75 = BYTE2(v70);
          v78 = BYTE2(v70) >> 4;
        }
        *(_QWORD *)((char *)&v9[32 * v79 + 8 + 2 * ((v70 >> 16) & 0xF)] + 1) = 0;
      }
      v94 = (v70 >> 8) & 0x7F;
      v95 = v70 & 0x7F;
      switch(v78)
      {
        case 8:
          goto LABEL_141;
        case 9:
          if ((v70 & 0x7F) == 0)
          {
            v75 -= 16;
            v95 = 64;
          }
LABEL_141:
          v96 = (v80 << 24) | (v75 << 16) | (v94 << 8);
          words[0] = v96;
          v97 = v95 << 9;
          if (v95 >= 0x41)
          {
            v98 = 8 * (v95 & 0x3F);
            if (v98)
            {
              do
              {
                v97 |= v98;
                v84 = v98 > 0x3F;
                v98 >>= 6;
              }
              while (v84);
            }
          }
          v99 = v97 << 16;
          goto LABEL_214;
        case 10:
          v96 = (v75 << 16) | (v80 << 24) | (v94 << 8);
          words[0] = v96;
          v99 = (_DWORD)v70 << 25;
          if (v95 >= 0x41)
          {
            v100 = (v70 & 0x3F) << 19;
            if (v100)
            {
              do
              {
                v99 |= v100;
                v84 = v100 > 0x3F;
                v100 >>= 6;
              }
              while (v84);
            }
          }
          goto LABEL_214;
        case 11:
          v101 = (uint64_t)&v9[32 * v79 + 8] + 1;
          v102 = (v70 >> 16) & 0xF;
          if (((v70 >> 8) & 0x7F) > 0x25)
          {
            switch(v94)
            {
              case 'b':
                v111 = v101 + 8 * v102;
                *(_BYTE *)(v111 + 1) = 2;
                goto LABEL_207;
              case 'c':
                v121 = v101 + 8 * v102;
                *(_BYTE *)(v121 + 1) = 2;
                goto LABEL_209;
              case 'd':
                v111 = v101 + 8 * v102;
                *(_BYTE *)(v111 + 1) = 1;
LABEL_207:
                *(_BYTE *)(v111 + 5) = v95;
                break;
              case 'e':
                v121 = v101 + 8 * v102;
                *(_BYTE *)(v121 + 1) = 1;
LABEL_209:
                *(_BYTE *)(v121 + 4) = v95;
                break;
              default:
                if (v94 != 38)
                  goto LABEL_211;
                v113 = v70 & 0x7F;
                v114 = v70 & 0x7F;
                goto LABEL_196;
            }
LABEL_210:
            if (!*((_BYTE *)v9 + 32))
              goto LABEL_112;
            goto LABEL_211;
          }
          if (!v94)
          {
            *(_BYTE *)(v101 + 8 * v102 + 2) = v95;
LABEL_192:
            *(_BYTE *)(v101 + 8 * v102) = 1;
            goto LABEL_210;
          }
          if (v94 != 6)
          {
            if (v94 == 32)
            {
              *(_BYTE *)(v101 + 8 * v102 + 3) = v95;
              goto LABEL_192;
            }
LABEL_211:
            v96 = (v75 << 16) | (v80 << 24) | (v94 << 8);
            words[0] = v96;
            v99 = (_DWORD)v70 << 25;
            if (v95 >= 0x41)
            {
              v122 = (v70 & 0x3F) << 19;
              if (v122)
              {
                do
                {
                  v99 |= v122;
                  v84 = v122 > 0x3F;
                  v122 >>= 6;
                }
                while (v84);
              }
            }
LABEL_214:
            words[1] = v99;
            goto LABEL_215;
          }
          v113 = 0;
          v114 = 0;
          *(_BYTE *)(v101 + 8 * v102 + 6) = v95;
LABEL_196:
          v115 = v101 + 8 * v102;
          *(_BYTE *)(v115 + 7) = v113;
          if (*((_BYTE *)v9 + 32) || !*(_BYTE *)(v115 + 1))
            goto LABEL_211;
          if (*(_BYTE *)(v115 + 1) == 1)
            v116 = 32;
          else
            v116 = 48;
          v117 = (unsigned __int8 *)(v101 + 8 * v102);
          v96 = (v80 << 24) | ((v116 | v102) << 16) | (v117[4] << 8) | v117[5];
          words[0] = v96;
          v118 = v114 | (v117[6] << 7);
          v119 = v118 << 18;
          if (v118 > 0x2000)
          {
            for (i = 32 * (v118 & 0x1FFF); i; i >>= 13)
              v119 |= i;
          }
          words[1] = v119;
LABEL_167:
          *(_OWORD *)v9 = 0u;
          *((_OWORD *)v9 + 1) = 0u;
LABEL_215:
          v123 = MIDIEventListAdd(&evtlist, 0x114uLL, v69, v138, MIDI::UniversalPacket::word_sizes[(unint64_t)v96 >> 28], words);
          if (v123)
            goto LABEL_220;
          if (!(_DWORD)v7)
            v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
          memset(&evtlist, 0, sizeof(evtlist));
          v71 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
          v72 = v138;
          v73 = MIDI::UniversalPacket::word_sizes[(unint64_t)words[0] >> 28];
          v74 = words;
          break;
        case 12:
          v103 = &v9[32 * v79 + 2 * (WORD1(v70) & 0xF)];
          v104 = *((_BYTE *)v9 + 32) ^ 1;
          if (!*((_BYTE *)v103 + 33))
            v104 = 0;
          v96 = (v75 << 16) | (v80 << 24) | v104;
          words[0] = v96;
          HIBYTE(words[1]) = BYTE1(v70) & 0x7F;
          BYTE1(words[1]) = *((_BYTE *)v103 + 35);
          LOBYTE(words[1]) = *((_BYTE *)v103 + 36);
          *(_QWORD *)((char *)v103 + 33) = 0;
          goto LABEL_167;
        case 13:
          v96 = (v75 << 16) | (v80 << 24);
          words[0] = v96;
          v105 = v70 >> 8 << 25;
          if (v94 >= 0x41)
          {
            v106 = ((v70 >> 8) & 0x3F) << 19;
            if (v106)
            {
              do
              {
                v105 |= v106;
                v84 = v106 > 0x3F;
                v106 >>= 6;
              }
              while (v84);
            }
          }
          words[1] = v105;
          goto LABEL_215;
        case 14:
          v96 = (v75 << 16) | (v80 << 24);
          words[0] = v96;
          v107 = v94 | (v95 << 7);
          v99 = v107 << 18;
          if (v107 > 0x2000)
          {
            for (j = 32 * (v107 & 0x1FFF); j; j >>= 13)
              v99 |= j;
          }
          goto LABEL_214;
        default:
          v96 = words[0];
          goto LABEL_215;
      }
LABEL_219:
      v123 = MIDIEventListAdd(&evtlist, 0x114uLL, v71, v72, v73, v74);
LABEL_220:
      v69 = v123;
    }
  }
  v7 = a4[1];
  if (!(_DWORD)v7)
    return v7;
  if ((_DWORD)v7 != 1 || a4[4] > 0x40u)
  {
    v7 = 0;
    v60 = 0;
    v61 = a4 + 2;
    do
    {
      v62 = v61[2];
      v139 = v61 + 3;
      v140 = v62;
      v141 = *(_QWORD *)v61;
      v142 = 0;
      v63 = MIDIEventListInit(&evtlist, v5);
      *(_QWORD *)words = 0;
      *(_OWORD *)v146 = 0uLL;
      while (MIDI::EventList::PacketReader::read((uint64_t *)&v139, words, v146))
      {
        v63 = MIDIEventListAdd(&evtlist, 0x114uLL, v63, *(MIDITimeStamp *)words, MIDI::UniversalPacket::word_sizes[(unint64_t)v146[0] >> 28], v146);
        if (!v63)
        {
          if (!(_DWORD)v7)
            v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
          memset(&evtlist, 0, sizeof(evtlist));
          v64 = MIDIEventListInit(&evtlist, v5);
          v63 = MIDIEventListAdd(&evtlist, 0x114uLL, v64, *(MIDITimeStamp *)words, MIDI::UniversalPacket::word_sizes[(unint64_t)v146[0] >> 28], v146);
        }
      }
      if (evtlist.numPackets)
        v65 = (_DWORD)v7 == 0;
      else
        v65 = 0;
      if (v65)
        v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
      v61 += v61[2] + 3;
      ++v60;
    }
    while (v60 < v4[1]);
    return v7;
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(v136 + 48) + 16))();
}

uint64_t APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_0::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_1::__invoke(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t (**v14)();
  _QWORD v15[7];

  v15[6] = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v12 = a3;
  v11 = a1;
  v10 = 0;
  if (!*a4)
    return 0;
  v5 = 0;
  v6 = (unint64_t)(a4 + 1);
  do
  {
    v7 = *(unsigned __int16 *)(v6 + 8);
    v8 = *(_QWORD *)v6;
    v14 = caulk::inplace_function<void ()(MIDI::EventList const*),48ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_1::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>;
    v15[0] = &v10;
    v15[1] = &v11;
    v15[2] = &v13;
    v15[3] = &v12;
    MIDI::LegacyMIDIConverter<MIDI::IdentityTranslator>::convertLegacyDataToEventList(v6 + 10, v7, v8, (uint64_t *)&v14);
    ((void (*)(_QWORD *))v14[3])(v15);
    v6 = (v6 + *(unsigned __int16 *)(v6 + 8) + 13) & 0xFFFFFFFFFFFFFFFCLL;
    ++v5;
  }
  while (v5 < *a4);
  return v10;
}

void sub_18F08CA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_2::__invoke(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  unsigned int v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t (**v15)();
  _QWORD v16[7];

  v16[6] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v13 = a3;
  v12 = a1;
  v11 = 0;
  if (!*a4)
    return 0;
  v5 = 0;
  v6 = (unint64_t)(a4 + 1);
  do
  {
    v7 = *(int **)(v12 + 88);
    v8 = *(unsigned __int16 *)(v6 + 8);
    v9 = *(_QWORD *)v6;
    v15 = caulk::inplace_function<void ()(MIDI::EventList const*),48ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_2::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>;
    v16[0] = &v11;
    v16[1] = &v12;
    v16[2] = &v14;
    v16[3] = &v13;
    MIDI::LegacyMIDIConverter<MIDI::MIDI_1_to_2_Translator>::convertLegacyDataToEventList(v7, v6 + 10, v8, v9, (uint64_t *)&v15);
    ((void (*)(_QWORD *))v15[3])(v16);
    v6 = (v6 + *(unsigned __int16 *)(v6 + 8) + 13) & 0xFFFFFFFFFFFFFFFCLL;
    ++v5;
  }
  while (v5 < *a4);
  return v11;
}

void sub_18F08CBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_2::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_2::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,MIDI::EventList const*&&)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 48) + 16))();
  **(_DWORD **)a1 = result;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_2::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_2::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#1}::__invoke(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_2::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_2::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#2}::__invoke(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_1::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_1::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,MIDI::EventList const*&&)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 48) + 16))();
  **(_DWORD **)a1 = result;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_1::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_1::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#1}::__invoke(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_1::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_1::operator() const(void *,AudioTimeStamp const*,unsigned int,MIDIPacketList const*)::{lambda(MIDIPacket const*)#1}::operator() const(MIDIPacket const*)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#2}::__invoke(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZN12APMIDIRouter17handleSetPropertyEPvRK23AudioUnitPluginDispatchjjjPKvjEUb_E4__13EENS0_7wrapperIT_EEENUlS9_OS5_E_8__invokeES9_SJ_(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;

  v2 = *a2;
  v3 = *(_DWORD **)(result + 8);
  v4 = **(_QWORD **)result;
  v11 = 1;
  v5 = *(_QWORD *)(result + 16);
  v7 = (double)v4;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  if (!*v3)
  {
    v6 = result;
    result = (*(uint64_t (**)(_QWORD, double *, _QWORD, uint64_t))(v5 + 32))(*(_QWORD *)(v5 + 40), &v7, **(unsigned __int8 **)(result + 24), v2);
    **(_DWORD **)(v6 + 8) = result;
  }
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZN12APMIDIRouter17handleSetPropertyEPvRK23AudioUnitPluginDispatchjjjPKvjEUb_E4__13EENS0_7wrapperIT_EEENUlS9_S9_E_8__invokeES9_S9_(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZN12APMIDIRouter17handleSetPropertyEPvRK23AudioUnitPluginDispatchjjjPKvjEUb_E4__13EENS0_7wrapperIT_EEENUlS9_S9_E0_8__invokeES9_S9_(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t APAC::MetadataBitStreamParser::parse(unint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  int v56;
  _QWORD *exception;
  _QWORD *v59;
  const char *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD v65[3];
  unsigned int v66;
  int v67;

  v65[0] = a2;
  v65[1] = a2;
  v6 = a2 + a3;
  v65[2] = v6;
  if ((a2 & 3) != 0)
  {
    v7 = 0;
    v8 = ((a2 ^ 3) & 3) + 1;
    v9 = a2 + 1;
    v10 = 8 * ((a2 ^ 3) & 3) + 8;
    v11 = (unsigned __int8 *)a2;
    do
    {
      if ((unint64_t)v11 >= v6)
        v12 = 255;
      else
        v12 = *v11;
      v7 = v12 | (v7 << 8);
      ++v11;
    }
    while ((v9++ & 3) != 0);
    v14 = (unsigned int *)(a2 + v8);
    v67 = 8 * ((a2 ^ 3) & 3) + 8;
    v65[0] = a2 + v8;
    v15 = v7 << ((8 * ((a2 ^ 3) & 3)) ^ 0x18);
  }
  else
  {
    v15 = 0;
    v10 = 0;
    v14 = (unsigned int *)a2;
  }
  if (v10 + 8 * ((int)v6 - (int)v14) <= 15)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Cannot read metadata.header.syncWords";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v16 = HIWORD(v15);
  v17 = v10 - 16;
  if (v10 - 16 < 0)
  {
    if ((unint64_t)v14 >= a2
      && (((_DWORD)v6 - (_DWORD)v14) & ~((uint64_t)(v6 - (_QWORD)v14) >> 63) & 0xFFFFFFFC) != 0)
    {
      v15 = bswap32(*v14);
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = (unsigned __int8 *)v14 + v19;
        v21 = 255;
        if ((unint64_t)v14 + v19 < v6 && (unint64_t)v20 >= a2)
          v21 = *v20;
        v15 = v21 | (v15 << 8);
        ++v19;
      }
      while ((_DWORD)v19 != 4);
    }
    v22 = v15 << (16 - v10);
    v23 = v10 + 16;
    v65[0] = ++v14;
    v16 |= v15 >> v23;
    if (v23)
      v18 = v22;
    else
      v18 = 0;
    if (v23)
      v17 = v23;
    else
      v17 = 0;
  }
  else
  {
    v18 = v15 << 16;
  }
  v66 = v18;
  *(_WORD *)a4 = v16;
  if ((_WORD)v16 != 0xFFFF)
  {
    v59 = __cxa_allocate_exception(8uLL);
    v60 = "metadata.header.syncWords not recognized";
    goto LABEL_110;
  }
  if (v17 + 8 * ((int)v6 - (int)v14) <= 15)
  {
    v61 = __cxa_allocate_exception(8uLL);
    *v61 = "Cannot read metadata.header.chunkSize";
    __cxa_throw(v61, MEMORY[0x1E0DE4E50], 0);
  }
  v24 = HIWORD(v18);
  v25 = v17 - 16;
  v67 = v17 - 16;
  if (v17 - 16 < 0)
  {
    if ((unint64_t)v14 >= a2
      && (((_DWORD)v6 - (_DWORD)v14) & ~((uint64_t)(v6 - (_QWORD)v14) >> 63) & 0xFFFFFFFC) != 0)
    {
      v18 = bswap32(*v14);
    }
    else
    {
      v27 = 0;
      do
      {
        v28 = (unsigned __int8 *)v14 + v27;
        v29 = v18 << 8;
        v66 = v29;
        v30 = 255;
        if ((unint64_t)v14 + v27 < v6 && (unint64_t)v28 >= a2)
          v30 = *v28;
        v18 = v30 | v29;
        v66 = v18;
        ++v27;
      }
      while ((_DWORD)v27 != 4);
    }
    v31 = v18 << (16 - v17);
    v32 = v17 + 16;
    v65[0] = ++v14;
    v24 |= v18 >> v32;
    if (v32)
      v26 = v31;
    else
      v26 = 0;
    if (v32)
      v25 = v32;
    else
      v25 = 0;
  }
  else
  {
    v26 = v18 << 16;
  }
  v66 = v26;
  *(_WORD *)(a4 + 2) = v24;
  if ((unsigned __int16)v24 + 4 > a3)
  {
    v59 = __cxa_allocate_exception(8uLL);
    v60 = "The metadata chunk size exceeds capacity. Early exit.";
    goto LABEL_110;
  }
  if (v25 + 8 * ((int)v6 - (int)v14) <= 7)
  {
    v62 = __cxa_allocate_exception(8uLL);
    *v62 = "Cannot read metadata.header.version.major";
    __cxa_throw(v62, MEMORY[0x1E0DE4E50], 0);
  }
  v33 = HIBYTE(v26);
  v34 = v25 - 8;
  v67 = v25 - 8;
  if (v25 - 8 < 0)
  {
    if ((unint64_t)v14 >= a2
      && (((_DWORD)v6 - (_DWORD)v14) & ~((uint64_t)(v6 - (_QWORD)v14) >> 63) & 0xFFFFFFFC) != 0)
    {
      v26 = bswap32(*v14);
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = (unsigned __int8 *)v14 + v36;
        v38 = v26 << 8;
        v66 = v38;
        v39 = 255;
        if ((unint64_t)v14 + v36 < v6 && (unint64_t)v37 >= a2)
          v39 = *v37;
        v26 = v39 | v38;
        v66 = v26;
        ++v36;
      }
      while ((_DWORD)v36 != 4);
    }
    v40 = v26 << (8 - v25);
    v41 = v25 + 24;
    v65[0] = ++v14;
    v33 |= v26 >> v41;
    if (v41)
      v35 = v40;
    else
      v35 = 0;
    if (v41)
      v34 = v41;
    else
      v34 = 0;
  }
  else
  {
    v35 = v26 << 8;
  }
  v66 = v35;
  *(_BYTE *)(a4 + 4) = v33;
  if (v34 + 8 * ((int)v6 - (int)v14) <= 7)
  {
    v63 = __cxa_allocate_exception(8uLL);
    *v63 = "Cannot read metadata.header.version.minor";
    __cxa_throw(v63, MEMORY[0x1E0DE4E50], 0);
  }
  v42 = HIBYTE(v35);
  v43 = v34 - 8;
  v67 = v34 - 8;
  if (v34 - 8 < 0)
  {
    if ((unint64_t)v14 >= a2
      && (((_DWORD)v6 - (_DWORD)v14) & ~((uint64_t)(v6 - (_QWORD)v14) >> 63) & 0xFFFFFFFC) != 0)
    {
      v35 = bswap32(*v14);
    }
    else
    {
      v45 = 0;
      do
      {
        v46 = (unsigned __int8 *)v14 + v45;
        v47 = v35 << 8;
        v66 = v47;
        v48 = 255;
        if ((unint64_t)v14 + v45 < v6 && (unint64_t)v46 >= a2)
          v48 = *v46;
        v35 = v48 | v47;
        v66 = v35;
        ++v45;
      }
      while ((_DWORD)v45 != 4);
    }
    v49 = v35 << (8 - v34);
    v50 = v34 + 24;
    v65[0] = ++v14;
    v42 |= v35 >> v50;
    if (v50)
      v44 = v49;
    else
      v44 = 0;
    if (v50)
      v43 = v50;
    else
      v43 = 0;
  }
  else
  {
    v44 = v35 << 8;
  }
  v66 = v44;
  *(_BYTE *)(a4 + 5) = v42;
  if (v43 + 8 * ((int)v6 - (int)v14) <= 0)
  {
    v64 = __cxa_allocate_exception(8uLL);
    *v64 = "Cannot read metadata.header.informationFrame";
    __cxa_throw(v64, MEMORY[0x1E0DE4E50], 0);
  }
  v51 = v44 >> 31;
  v67 = v43 - 1;
  if (v43 - 1 < 0)
  {
    if ((unint64_t)v14 >= a2
      && (((_DWORD)v6 - (_DWORD)v14) & ~((uint64_t)(v6 - (_QWORD)v14) >> 63) & 0xFFFFFFFC) != 0)
    {
      v44 = bswap32(*v14);
    }
    else
    {
      v53 = 0;
      do
      {
        v54 = (unsigned __int8 *)v14 + v53;
        v55 = v44 << 8;
        v66 = v55;
        v56 = 255;
        if ((unint64_t)v14 + v53 < v6 && (unint64_t)v54 >= a2)
          v56 = *v54;
        v44 = v56 | v55;
        v66 = v44;
        ++v53;
      }
      while ((_DWORD)v53 != 4);
    }
    v52 = v44 << (1 - v43);
    v67 = v43 + 31;
    v65[0] = v14 + 1;
    v51 |= v44 >> (v43 + 31);
    if (v43 == -31)
      v52 = 0;
  }
  else
  {
    v52 = 2 * v44;
  }
  v66 = v52;
  *(_BYTE *)(a4 + 6) = v51 != 0;
  if (v33 != 1)
  {
    v59 = __cxa_allocate_exception(8uLL);
    v60 = "Metadata version mismatch";
    goto LABEL_110;
  }
  if (v42 == 3)
  {
    APAC::MetadataBitStreamParser::parseMetadataFrame(a1, a4 + 1451080, v51 != 0, (uint64_t)v65);
    return 0;
  }
  if (v42 != 2)
  {
    v59 = __cxa_allocate_exception(8uLL);
    v60 = "Metadata version not supported";
LABEL_110:
    *v59 = v60;
    __cxa_throw(v59, MEMORY[0x1E0DE4E50], 0);
  }
  if (v51)
    APAC::MetadataBitStreamParser::parseStaticMetadata(a1, (BOOL *)(a4 + 8), (uint64_t)v65);
  APAC::MetadataBitStreamParser::parseDynamicMetadata(a1, (BOOL *)(a4 + 174192), (uint64_t)v65);
  return 0;
}

void sub_18F08D36C(void *a1, int a2)
{
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18F08D22CLL);
  }
  __clang_call_terminate(a1);
}

void APAC::MetadataBitStreamParser::parseStaticMetadata(uint64_t a1, BOOL *a2, uint64_t a3)
{
  BOOL *v4;
  BOOL *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2 + 424;
  v5 = a2 + 428;
  v6 = a2 + 27864;
  v7 = (uint64_t)(a2 + 173156);
  APAC::MetadataBitStreamParser::parseReferenceScreen(a1, a2, a3);
  APAC::MetadataBitStreamParser::parseCodeBookData(v8, v4, a3);
  APAC::MetadataBitStreamParser::parseGroupStaticData(v9, v5, a3);
  APAC::MetadataBitStreamParser::parseSceneComponenentStaticData(v10, v6, a3);
  APAC::MetadataBitStreamParser::parseExtendedData(v11, v7, a3);
}

void APAC::MetadataBitStreamParser::parseDynamicMetadata(uint64_t a1, BOOL *a2, uint64_t a3)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a2 + 32516;
  v6 = (uint64_t)(a2 + 1271024);
  APAC::MetadataBitStreamParser::parseGroupDynamicData(a1, a2, a3);
  APAC::MetadataBitStreamParser::parseSceneComponenentDynamicData(a1, v5, a3);
  APAC::MetadataBitStreamParser::parseExtendedData(v7, v6, a3);
}

void APAC::MetadataBitStreamParser::parseMetadataFrame(unint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL *v23;
  unsigned int v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *exception;
  const char *v51;

  v4 = *(_QWORD *)(a4 + 16);
  v5 = *(unsigned int **)a4;
  v6 = v4 - *(_QWORD *)a4;
  v7 = *(_DWORD *)(a4 + 28);
  if (v7 + 8 * (int)v6 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v51 = "Cannot read mdFrame.mRendererMetadataPresent";
    goto LABEL_62;
  }
  v11 = *(_DWORD *)(a4 + 24);
  v12 = v11 >> 31;
  v13 = v7 - 1;
  *(_DWORD *)(a4 + 28) = v7 - 1;
  if (v7 - 1 < 0)
  {
    v15 = *(_QWORD *)(a4 + 8);
    if ((v6 & ~(v6 >> 63) & 0xFFFFFFFC) == 0 || v15 > (unint64_t)v5)
    {
      v17 = 0;
      do
      {
        v18 = (unsigned __int8 *)v5 + v17;
        v19 = v11 << 8;
        *(_DWORD *)(a4 + 24) = v19;
        v20 = 255;
        if ((unint64_t)v5 + v17 < v4 && (unint64_t)v18 >= v15)
          v20 = *v18;
        v11 = v20 | v19;
        *(_DWORD *)(a4 + 24) = v11;
        ++v17;
      }
      while ((_DWORD)v17 != 4);
    }
    else
    {
      v11 = bswap32(*v5);
    }
    v21 = v11 << (1 - v7);
    v22 = v7 + 31;
    *(_DWORD *)(a4 + 28) = v22;
    *(_QWORD *)a4 = ++v5;
    v12 |= v11 >> v22;
    if (v22)
      v14 = v21;
    else
      v14 = 0;
    if (v22)
      v13 = v22;
    else
      v13 = 0;
  }
  else
  {
    v14 = 2 * v11;
  }
  *(_DWORD *)(a4 + 24) = v14;
  *(_BYTE *)(a2 + 1) = v12 != 0;
  if (v12)
  {
    if (a3)
    {
      if (v13 + 8 * ((int)v4 - (int)v5) <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v51 = "Cannot read glbCfg.mHasData";
        goto LABEL_62;
      }
      v23 = (BOOL *)(a2 + 16);
      v24 = v14 >> 31;
      v25 = v13 - 1;
      *(_DWORD *)(a4 + 28) = v13 - 1;
      if (v13 - 1 < 0)
      {
        v27 = *(_QWORD *)(a4 + 8);
        if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
          && v27 <= (unint64_t)v5)
        {
          v14 = bswap32(*v5);
        }
        else
        {
          v28 = 0;
          do
          {
            v29 = (unsigned __int8 *)v5 + v28;
            v30 = v14 << 8;
            *(_DWORD *)(a4 + 24) = v30;
            v31 = 255;
            if ((unint64_t)v5 + v28 < v4 && (unint64_t)v29 >= v27)
              v31 = *v29;
            v14 = v31 | v30;
            *(_DWORD *)(a4 + 24) = v14;
            ++v28;
          }
          while ((_DWORD)v28 != 4);
        }
        v33 = v13 + 31;
        v32 = v13 == -31;
        *(_DWORD *)(a4 + 28) = v13 + 31;
        *(_QWORD *)a4 = ++v5;
        v24 |= v14 >> (v13 + 31);
        if (v13 == -31)
          v26 = 0;
        else
          v26 = v14 << (1 - v13);
        if (v32)
          v25 = 0;
        else
          v25 = v33;
      }
      else
      {
        v26 = 2 * v14;
      }
      *(_DWORD *)(a4 + 24) = v26;
      *v23 = v24 != 0;
      if (v24)
      {
        APAC::MetadataBitStreamParser::parseGlobalConfig(a1, (uint64_t)v23, 0, a4);
        v4 = *(_QWORD *)(a4 + 16);
        v5 = *(unsigned int **)a4;
        v25 = *(_DWORD *)(a4 + 28);
      }
      if (v25 + 8 * ((int)v4 - (int)v5) <= 10)
      {
        exception = __cxa_allocate_exception(8uLL);
        v51 = "Cannot read mdFrame.mRendererMetadata.mGroupCount";
        goto LABEL_62;
      }
      v34 = *(_DWORD *)(a4 + 24);
      v35 = v34 >> 21;
      *(_DWORD *)(a4 + 28) = v25 - 11;
      if (v25 - 11 < 0)
      {
        v37 = *(_QWORD *)(a4 + 8);
        if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
          && v37 <= (unint64_t)v5)
        {
          v34 = bswap32(*v5);
        }
        else
        {
          v38 = 0;
          do
          {
            v39 = (unsigned __int8 *)v5 + v38;
            v40 = v34 << 8;
            *(_DWORD *)(a4 + 24) = v40;
            v41 = 255;
            if ((unint64_t)v5 + v38 < v4 && (unint64_t)v39 >= v37)
              v41 = *v39;
            v34 = v41 | v40;
            *(_DWORD *)(a4 + 24) = v34;
            ++v38;
          }
          while ((_DWORD)v38 != 4);
        }
        v42 = v34 << (11 - v25);
        v43 = v25 + 21;
        *(_DWORD *)(a4 + 28) = v43;
        *(_QWORD *)a4 = v5 + 1;
        v35 |= v34 >> v43;
        if (v43)
          v36 = v42;
        else
          v36 = 0;
      }
      else
      {
        v36 = v34 << 11;
      }
      *(_DWORD *)(a4 + 24) = v36;
      *(_WORD *)(a2 + 8) = v35;
      v44 = (unsigned __int16)v35;
      std::vector<APAC::Metadata::GroupConfig>::resize(a2 + 4784, v44);
      if ((_DWORD)v44)
      {
        v46 = 0;
        v47 = 0;
        v48 = 48 * v44;
        while (1)
        {
          v49 = *(_QWORD *)(a2 + 4784);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 4792) - v49) >> 4) <= v47)
            break;
          APAC::MetadataBitStreamParser::parseGroupConfig(v45, v49 + v46, 0, a4);
          ++v47;
          v46 += 48;
          if (v48 == v46)
            goto LABEL_60;
        }
        exception = __cxa_allocate_exception(8uLL);
        v51 = "metadata.mMetadataFrame.mRendererMetadata.mGroupConfig does not have enough elements";
LABEL_62:
        *exception = v51;
        __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
      }
    }
LABEL_60:
    APAC::MetadataBitStreamParser::parseRendererMetadata(a1, a2 + 8, a4);
  }
}

void APAC::MetadataBitStreamParser::parseGlobalConfig(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  int v37;
  unint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int *v77;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int *v85;
  uint64_t v87;
  unsigned __int8 *v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  BOOL v93;
  uint64_t v94;
  unsigned __int8 *v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  BOOL v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  BOOL v107;
  uint64_t v108;
  unsigned __int8 *v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  BOOL v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unsigned int v117;
  int v118;
  unint64_t v119;
  uint64_t v121;
  unsigned __int8 *v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  BOOL v127;
  uint64_t v128;
  unsigned __int8 *v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned int v135;
  int v136;
  int v137;
  unsigned int v138;
  BOOL v139;
  int v140;
  int v141;
  unsigned int v142;
  int v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  unsigned int *v147;
  unint64_t v148;
  unint64_t v149;
  unsigned int *v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unint64_t v164;
  unsigned int v165;
  int v166;
  uint64_t v167;
  unsigned __int8 *v168;
  unsigned int v169;
  int v170;
  BOOL v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  unint64_t v175;
  uint64_t v176;
  unsigned __int8 *v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  int v181;
  uint64_t v182;
  unsigned __int8 *v183;
  unsigned int v184;
  int v185;
  uint64_t v186;
  unsigned __int8 *v187;
  int v188;
  int v189;
  int v190;
  _QWORD *exception;
  const char *v192;
  _BYTE *v193;
  uint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned __int8 *v201;

  v8 = *(_DWORD *)(a4 + 24);
  v7 = *(_DWORD *)(a4 + 28);
  v9 = v8 >> 21;
  *(_DWORD *)(a4 + 28) = v7 - 11;
  if (v7 - 11 < 0)
  {
    v12 = *(_QWORD *)(a4 + 8);
    v11 = *(_QWORD *)(a4 + 16);
    v13 = *(unsigned int **)a4;
    if ((((_DWORD)v11 - *(_DWORD *)a4) & ~((uint64_t)(v11 - *(_QWORD *)a4) >> 63) & 0xFFFFFFFC) == 0
      || v12 > (unint64_t)v13)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v13 + v15;
        v17 = v8 << 8;
        *(_DWORD *)(a4 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v13 + v15 < v11 && (unint64_t)v16 >= v12)
          v18 = *v16;
        v8 = v18 | v17;
        *(_DWORD *)(a4 + 24) = v8;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v8 = bswap32(*v13);
    }
    v19 = v8 << (11 - v7);
    v20 = v7 + 21;
    *(_DWORD *)(a4 + 28) = v20;
    *(_QWORD *)a4 = v13 + 1;
    v9 |= v8 >> v20;
    if (v20)
      v10 = v19;
    else
      v10 = 0;
  }
  else
  {
    v10 = v8 << 11;
  }
  *(_DWORD *)(a4 + 24) = v10;
  *(_WORD *)(a2 + 2) = v9;
  if (v9)
  {
    v21 = 0;
    v193 = (_BYTE *)(a2 + 4496);
    v201 = (unsigned __int8 *)(a2 + 4736);
    v200 = a2 + 4716;
    v199 = a2 + 4668;
    v198 = a2 + 4648;
    v197 = a2 + 4504;
    v196 = a2 + 4480;
    v195 = (_BYTE *)(a2 + 4156);
    v194 = a2 + 4116;
    v22 = v9;
    while (1)
    {
      v24 = *(_DWORD *)(a4 + 24);
      v23 = *(_DWORD *)(a4 + 28);
      v25 = v24 >> 21;
      v26 = v23 - 11;
      *(_DWORD *)(a4 + 28) = v23 - 11;
      if (v23 - 11 < 0)
      {
        v29 = *(_QWORD *)(a4 + 8);
        v28 = *(_QWORD *)(a4 + 16);
        v30 = *(unsigned int **)a4;
        if ((((_DWORD)v28 - *(_DWORD *)a4) & ~((uint64_t)(v28 - *(_QWORD *)a4) >> 63) & 0xFFFFFFFC) == 0
          || v29 > (unint64_t)v30)
        {
          v32 = 0;
          do
          {
            v33 = (unsigned __int8 *)v30 + v32;
            v34 = v24 << 8;
            *(_DWORD *)(a4 + 24) = v34;
            v35 = 255;
            if ((unint64_t)v30 + v32 < v28 && (unint64_t)v33 >= v29)
              v35 = *v33;
            v24 = v35 | v34;
            *(_DWORD *)(a4 + 24) = v24;
            ++v32;
          }
          while ((_DWORD)v32 != 4);
        }
        else
        {
          v24 = bswap32(*v30);
        }
        v37 = v23 + 21;
        v36 = v23 == -21;
        *(_DWORD *)(a4 + 28) = v23 + 21;
        *(_QWORD *)a4 = v30 + 1;
        v25 |= v24 >> (v23 + 21);
        if (v23 == -21)
          v27 = 0;
        else
          v27 = v24 << (11 - v23);
        if (v36)
          v26 = 0;
        else
          v26 = v37;
      }
      else
      {
        v27 = v24 << 11;
      }
      *(_DWORD *)(a4 + 24) = v27;
      *(_WORD *)(a2 + 4 + 2 * v21) = v25;
      switch(v25)
      {
        case 0u:
          v38 = *(_QWORD *)(a4 + 16);
          v39 = *(unsigned int **)a4;
          v40 = v38 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v40 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v192 = "Cannot read glbCfg.mApplyPostProcReverb";
            goto LABEL_271;
          }
          v41 = v27 >> 31;
          *(_DWORD *)(a4 + 28) = v26 - 1;
          if (v26 - 1 < 0)
          {
            v91 = v40 & ~(v40 >> 63) & 0xFFFFFFFC;
            v92 = *(_QWORD *)(a4 + 8);
            if (v91)
              v93 = v92 > (unint64_t)v39;
            else
              v93 = 1;
            if (v93)
            {
              v94 = 0;
              do
              {
                v95 = (unsigned __int8 *)v39 + v94;
                v96 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v96;
                v97 = 255;
                if ((unint64_t)v39 + v94 < v38 && (unint64_t)v95 >= v92)
                  v97 = *v95;
                v27 = v97 | v96;
                *(_DWORD *)(a4 + 24) = v27;
                ++v94;
              }
              while ((_DWORD)v94 != 4);
            }
            else
            {
              v27 = bswap32(*v39);
            }
            v151 = v27 << (1 - v26);
            v152 = v26 + 31;
            *(_DWORD *)(a4 + 28) = v152;
            *(_QWORD *)a4 = v39 + 1;
            v41 |= v27 >> v152;
            if (v152)
              v42 = v151;
            else
              v42 = 0;
          }
          else
          {
            v42 = 2 * v27;
          }
          *(_DWORD *)(a4 + 24) = v42;
          *(_BYTE *)(a2 + 4100) = v41 != 0;
          goto LABEL_261;
        case 1u:
          v43 = *(_QWORD *)(a4 + 16);
          v44 = *(unsigned int **)a4;
          v45 = v43 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v45 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v192 = "Cannot read glbCfg.mIs6DoF";
            goto LABEL_271;
          }
          v46 = v27 >> 31;
          *(_DWORD *)(a4 + 28) = v26 - 1;
          if (v26 - 1 < 0)
          {
            v98 = v45 & ~(v45 >> 63) & 0xFFFFFFFC;
            v99 = *(_QWORD *)(a4 + 8);
            if (v98)
              v100 = v99 > (unint64_t)v44;
            else
              v100 = 1;
            if (v100)
            {
              v101 = 0;
              do
              {
                v102 = (unsigned __int8 *)v44 + v101;
                v103 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v103;
                v104 = 255;
                if ((unint64_t)v44 + v101 < v43 && (unint64_t)v102 >= v99)
                  v104 = *v102;
                v27 = v104 | v103;
                *(_DWORD *)(a4 + 24) = v27;
                ++v101;
              }
              while ((_DWORD)v101 != 4);
            }
            else
            {
              v27 = bswap32(*v44);
            }
            v153 = v27 << (1 - v26);
            v154 = v26 + 31;
            *(_DWORD *)(a4 + 28) = v154;
            *(_QWORD *)a4 = v44 + 1;
            v46 |= v27 >> v154;
            if (v154)
              v47 = v153;
            else
              v47 = 0;
          }
          else
          {
            v47 = 2 * v27;
          }
          *(_DWORD *)(a4 + 24) = v47;
          *(_BYTE *)(a2 + 4101) = v46 != 0;
          goto LABEL_261;
        case 2u:
          v48 = *(_QWORD *)(a4 + 16);
          v49 = *(unsigned int **)a4;
          v50 = v48 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v50 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v192 = "Cannot read glbCfg.mHasSceneRadiationPattern";
            goto LABEL_271;
          }
          v51 = v27 >> 31;
          *(_DWORD *)(a4 + 28) = v26 - 1;
          if (v26 - 1 < 0)
          {
            v105 = v50 & ~(v50 >> 63) & 0xFFFFFFFC;
            v106 = *(_QWORD *)(a4 + 8);
            if (v105)
              v107 = v106 > (unint64_t)v49;
            else
              v107 = 1;
            if (v107)
            {
              v108 = 0;
              do
              {
                v109 = (unsigned __int8 *)v49 + v108;
                v110 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v110;
                v111 = 255;
                if ((unint64_t)v49 + v108 < v48 && (unint64_t)v109 >= v106)
                  v111 = *v109;
                v27 = v111 | v110;
                *(_DWORD *)(a4 + 24) = v27;
                ++v108;
              }
              while ((_DWORD)v108 != 4);
            }
            else
            {
              v27 = bswap32(*v49);
            }
            v155 = v27 << (1 - v26);
            v156 = v26 + 31;
            *(_DWORD *)(a4 + 28) = v156;
            *(_QWORD *)a4 = v49 + 1;
            v51 |= v27 >> v156;
            if (v156)
              v52 = v155;
            else
              v52 = 0;
          }
          else
          {
            v52 = 2 * v27;
          }
          *(_DWORD *)(a4 + 24) = v52;
          *(_BYTE *)(a2 + 4102) = v51 != 0;
          goto LABEL_261;
        case 3u:
          v53 = *(_QWORD *)(a4 + 16);
          v54 = *(unsigned int **)a4;
          v55 = v53 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v55 <= 4)
          {
            exception = __cxa_allocate_exception(8uLL);
            v192 = "Cannot read glbCfg.mTargetPlaybackSystemIndex";
            goto LABEL_271;
          }
          v56 = v27 >> 27;
          *(_DWORD *)(a4 + 28) = v26 - 5;
          if (v26 - 5 < 0)
          {
            v112 = v55 & ~(v55 >> 63) & 0xFFFFFFFC;
            v113 = *(_QWORD *)(a4 + 8);
            if (v112)
              v114 = v113 > (unint64_t)v54;
            else
              v114 = 1;
            if (v114)
            {
              v115 = 0;
              do
              {
                v116 = (unsigned __int8 *)v54 + v115;
                v117 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v117;
                v118 = 255;
                if ((unint64_t)v54 + v115 < v53 && (unint64_t)v116 >= v113)
                  v118 = *v116;
                v27 = v118 | v117;
                *(_DWORD *)(a4 + 24) = v27;
                ++v115;
              }
              while ((_DWORD)v115 != 4);
            }
            else
            {
              v27 = bswap32(*v54);
            }
            v157 = v27 << (5 - v26);
            v158 = v26 + 27;
            *(_DWORD *)(a4 + 28) = v158;
            *(_QWORD *)a4 = v54 + 1;
            v56 |= v27 >> v158;
            if (v158)
              v57 = v157;
            else
              v57 = 0;
          }
          else
          {
            v57 = 32 * v27;
          }
          *(_DWORD *)(a4 + 24) = v57;
          *(_BYTE *)(a2 + 4103) = v56;
          goto LABEL_261;
        case 4u:
          APAC::MetadataBitStreamParser::parseAuthoringInformation(a1, (_BYTE *)(a2 + 4106), a4);
          goto LABEL_261;
        case 5u:
          APAC::MetadataBitStreamParser::parseReferenceScreen(a1, v194, a4);
          goto LABEL_261;
        case 6u:
          a1 = APAC::MetadataBitStreamParser::parseDBMD(a1, v195, a4);
          goto LABEL_261;
        case 7u:
          APAC::MetadataBitStreamParser::parseBinauralization(a1, v196, a4);
          goto LABEL_261;
        case 8u:
          v58 = *(_QWORD *)(a4 + 16);
          v59 = *(unsigned int **)a4;
          v60 = v58 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v60 <= 1)
          {
            exception = __cxa_allocate_exception(8uLL);
            v192 = "Cannot read glbCfg.mHCFilter.mDataLocationIndex";
            goto LABEL_271;
          }
          v61 = v27 >> 30;
          v62 = v26 - 2;
          *(_DWORD *)(a4 + 28) = v26 - 2;
          if (v26 - 2 < 0)
          {
            v119 = *(_QWORD *)(a4 + 8);
            if ((v60 & ~(v60 >> 63) & 0xFFFFFFFC) == 0 || v119 > (unint64_t)v59)
            {
              v121 = 0;
              do
              {
                v122 = (unsigned __int8 *)v59 + v121;
                v123 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v123;
                v124 = 255;
                if ((unint64_t)v59 + v121 < v58 && (unint64_t)v122 >= v119)
                  v124 = *v122;
                v27 = v124 | v123;
                *(_DWORD *)(a4 + 24) = v27;
                ++v121;
              }
              while ((_DWORD)v121 != 4);
            }
            else
            {
              v27 = bswap32(*v59);
            }
            v159 = v27 << (2 - v26);
            v160 = v26 + 30;
            *(_DWORD *)(a4 + 28) = v160;
            *(_QWORD *)a4 = ++v59;
            v61 |= v27 >> v160;
            if (v160)
              v63 = v159;
            else
              v63 = 0;
            if (v160)
              v62 = v160;
            else
              v62 = 0;
          }
          else
          {
            v63 = 4 * v27;
          }
          *(_DWORD *)(a4 + 24) = v63;
          *v193 = v61;
          if (v62 + 8 * ((int)v58 - (int)v59) <= 8)
          {
            exception = __cxa_allocate_exception(8uLL);
            v192 = "Cannot read glbCfg.mHCFilter.mCustomData_TableID";
            goto LABEL_271;
          }
          v161 = v63 >> 23;
          v162 = v62 - 9;
          *(_DWORD *)(a4 + 28) = v62 - 9;
          if (v62 - 9 < 0)
          {
            v164 = *(_QWORD *)(a4 + 8);
            if ((((_DWORD)v58 - (_DWORD)v59) & ~((uint64_t)(v58 - (_QWORD)v59) >> 63) & 0xFFFFFFFC) != 0
              && v164 <= (unint64_t)v59)
            {
              v63 = bswap32(*v59);
            }
            else
            {
              v167 = 0;
              do
              {
                v168 = (unsigned __int8 *)v59 + v167;
                v169 = v63 << 8;
                *(_DWORD *)(a4 + 24) = v169;
                v170 = 255;
                if ((unint64_t)v59 + v167 < v58 && (unint64_t)v168 >= v164)
                  v170 = *v168;
                v63 = v170 | v169;
                *(_DWORD *)(a4 + 24) = v63;
                ++v167;
              }
              while ((_DWORD)v167 != 4);
            }
            v172 = v62 + 23;
            v171 = v62 == -23;
            *(_DWORD *)(a4 + 28) = v62 + 23;
            *(_QWORD *)a4 = ++v59;
            v161 |= v63 >> (v62 + 23);
            if (v62 == -23)
              v163 = 0;
            else
              v163 = v63 << (9 - v62);
            if (v171)
              v162 = 0;
            else
              v162 = v172;
          }
          else
          {
            v163 = v63 << 9;
          }
          *(_DWORD *)(a4 + 24) = v163;
          *(_WORD *)(a2 + 4498) = v161;
          if (v162 + 8 * ((int)v58 - (int)v59) <= 8)
          {
            exception = __cxa_allocate_exception(8uLL);
            v192 = "Cannot read glbCfg.mHCFilter.mCustomData_EntryID";
LABEL_271:
            *exception = v192;
            __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
          }
          v173 = v163 >> 23;
          *(_DWORD *)(a4 + 28) = v162 - 9;
          if (v162 - 9 < 0)
          {
            v175 = *(_QWORD *)(a4 + 8);
            if ((((_DWORD)v58 - (_DWORD)v59) & ~((uint64_t)(v58 - (_QWORD)v59) >> 63) & 0xFFFFFFFC) != 0
              && v175 <= (unint64_t)v59)
            {
              v163 = bswap32(*v59);
            }
            else
            {
              v176 = 0;
              do
              {
                v177 = (unsigned __int8 *)v59 + v176;
                v178 = v163 << 8;
                *(_DWORD *)(a4 + 24) = v178;
                v179 = 255;
                if ((unint64_t)v59 + v176 < v58 && (unint64_t)v177 >= v175)
                  v179 = *v177;
                v163 = v179 | v178;
                *(_DWORD *)(a4 + 24) = v163;
                ++v176;
              }
              while ((_DWORD)v176 != 4);
            }
            v180 = v163 << (9 - v162);
            v181 = v162 + 23;
            *(_DWORD *)(a4 + 28) = v181;
            *(_QWORD *)a4 = v59 + 1;
            v173 |= v163 >> v181;
            if (v181)
              v174 = v180;
            else
              v174 = 0;
          }
          else
          {
            v174 = v163 << 9;
          }
          *(_DWORD *)(a4 + 24) = v174;
          *(_WORD *)(a2 + 4500) = v173;
LABEL_261:
          if (++v21 == v22)
            return;
          break;
        case 9u:
          APAC::MetadataBitStreamParser::parseSPAD(a1, v197, a3, a4);
          goto LABEL_261;
        case 0xAu:
          APAC::MetadataBitStreamParser::parseDistanceAttenuation(a1, v198, a4);
          goto LABEL_261;
        case 0xBu:
          a1 = APAC::MetadataBitStreamParser::parsePosition(a1, v199, a4);
          goto LABEL_261;
        case 0xCu:
          APAC::MetadataBitStreamParser::parseGenericRenderingConfig(a1, v200, a4);
          goto LABEL_261;
        case 0xDu:
          v64 = *(_QWORD *)(a4 + 16);
          v65 = *(unsigned int **)a4;
          v66 = v64 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v66 <= 5)
          {
            exception = __cxa_allocate_exception(8uLL);
            v192 = "Cannot read glbCfg.mContentKind";
            goto LABEL_271;
          }
          v67 = v27 >> 26;
          *(_DWORD *)(a4 + 28) = v26 - 6;
          if (v26 - 6 < 0)
          {
            v125 = v66 & ~(v66 >> 63) & 0xFFFFFFFC;
            v126 = *(_QWORD *)(a4 + 8);
            if (v125)
              v127 = v126 > (unint64_t)v65;
            else
              v127 = 1;
            if (v127)
            {
              v128 = 0;
              do
              {
                v129 = (unsigned __int8 *)v65 + v128;
                v130 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v130;
                v131 = 255;
                if ((unint64_t)v65 + v128 < v64 && (unint64_t)v129 >= v126)
                  v131 = *v129;
                v27 = v131 | v130;
                *(_DWORD *)(a4 + 24) = v27;
                ++v128;
              }
              while ((_DWORD)v128 != 4);
            }
            else
            {
              v27 = bswap32(*v65);
            }
            v165 = v27 << (6 - v26);
            v166 = v26 + 26;
            *(_DWORD *)(a4 + 28) = v166;
            *(_QWORD *)a4 = v65 + 1;
            v67 |= v27 >> v166;
            if (v166)
              v68 = v165;
            else
              v68 = 0;
          }
          else
          {
            v68 = v27 << 6;
          }
          *(_DWORD *)(a4 + 24) = v68;
          *(_BYTE *)(a2 + 4104) = v67;
          goto LABEL_261;
        case 0xEu:
          v69 = v27 >> 28;
          v70 = v26 - 4;
          *(_DWORD *)(a4 + 28) = v26 - 4;
          if (v26 - 4 < 0)
          {
            v76 = *(_QWORD *)(a4 + 8);
            v75 = *(_QWORD *)(a4 + 16);
            v77 = *(unsigned int **)a4;
            if ((((_DWORD)v75 - *(_DWORD *)a4) & ~((uint64_t)(v75 - *(_QWORD *)a4) >> 63) & 0xFFFFFFFC) == 0
              || v76 > (unint64_t)v77)
            {
              v79 = 0;
              do
              {
                v80 = (unsigned __int8 *)v77 + v79;
                v81 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v81;
                v82 = 255;
                if ((unint64_t)v77 + v79 < v75 && (unint64_t)v80 >= v76)
                  v82 = *v80;
                v27 = v82 | v81;
                *(_DWORD *)(a4 + 24) = v27;
                ++v79;
              }
              while ((_DWORD)v79 != 4);
            }
            else
            {
              v27 = bswap32(*v77);
            }
            v132 = v27 << (4 - v26);
            v133 = v26 + 28;
            *(_DWORD *)(a4 + 28) = v133;
            *(_QWORD *)a4 = v77 + 1;
            v69 |= v27 >> v133;
            if (v133)
              v71 = v132;
            else
              v71 = 0;
            if (v133)
              v70 = v133;
            else
              v70 = 0;
          }
          else
          {
            v71 = 16 * v27;
          }
          *(_DWORD *)(a4 + 24) = v71;
          v134 = 8 * v69;
          if (8 * v69 - 25 >= 0xFFFFFFE0)
          {
            v136 = v134 + 8;
            v135 = v71 >> (24 - v134);
            v137 = v70 - v136;
            *(_DWORD *)(a4 + 28) = v70 - v136;
            if (v70 - v136 < 0)
            {
              v146 = *(_QWORD *)(a4 + 8);
              v145 = *(_QWORD *)(a4 + 16);
              v147 = *(unsigned int **)a4;
              if ((((_DWORD)v145 - *(_DWORD *)a4) & ~((uint64_t)(v145 - *(_QWORD *)a4) >> 63) & 0xFFFFFFFC) != 0
                && v146 <= (unint64_t)v147)
              {
                v71 = bswap32(*v147);
              }
              else
              {
                v182 = 0;
                do
                {
                  v183 = (unsigned __int8 *)v147 + v182;
                  v184 = v71 << 8;
                  *(_DWORD *)(a4 + 24) = v184;
                  v185 = 255;
                  if ((unint64_t)v147 + v182 < v145 && (unint64_t)v183 >= v146)
                    v185 = *v183;
                  v71 = v185 | v184;
                  *(_DWORD *)(a4 + 24) = v71;
                  ++v182;
                }
                while ((_DWORD)v182 != 4);
              }
              *(_DWORD *)(a4 + 28) = v137 + 32;
              *(_QWORD *)a4 = v147 + 1;
              v135 |= v71 >> v137;
              if (v137 == -32)
                v138 = 0;
              else
                v138 = v71 << -(char)v137;
            }
            else
            {
              v138 = v71 << v136;
            }
            *(_DWORD *)(a4 + 24) = v138;
          }
          else
          {
            LOBYTE(v135) = 0;
          }
          *(_BYTE *)(a2 + 4105) = v135;
          goto LABEL_261;
        case 0xFu:
          APAC::MetadataBitStreamParser::parseChannelBedHeadphoneMetadata(a1, v201, a4);
          goto LABEL_261;
        default:
          v72 = v27 >> 28;
          v73 = v26 - 4;
          *(_DWORD *)(a4 + 28) = v26 - 4;
          if (v26 - 4 < 0)
          {
            v84 = *(_QWORD *)(a4 + 8);
            v83 = *(_QWORD *)(a4 + 16);
            v85 = *(unsigned int **)a4;
            if ((((_DWORD)v83 - *(_DWORD *)a4) & ~((uint64_t)(v83 - *(_QWORD *)a4) >> 63) & 0xFFFFFFFC) == 0
              || v84 > (unint64_t)v85)
            {
              v87 = 0;
              do
              {
                v88 = (unsigned __int8 *)v85 + v87;
                v89 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v89;
                v90 = 255;
                if ((unint64_t)v85 + v87 < v83 && (unint64_t)v88 >= v84)
                  v90 = *v88;
                v27 = v90 | v89;
                *(_DWORD *)(a4 + 24) = v27;
                ++v87;
              }
              while ((_DWORD)v87 != 4);
            }
            else
            {
              v27 = bswap32(*v85);
            }
            v140 = v26 + 28;
            v139 = v26 == -28;
            *(_DWORD *)(a4 + 28) = v26 + 28;
            *(_QWORD *)a4 = v85 + 1;
            v72 |= v27 >> (v26 + 28);
            if (v26 == -28)
              v74 = 0;
            else
              v74 = v27 << (4 - v26);
            if (v139)
              v73 = 0;
            else
              v73 = v140;
          }
          else
          {
            v74 = 16 * v27;
          }
          *(_DWORD *)(a4 + 24) = v74;
          v141 = 8 * v72 + 8;
          v142 = v141 - v73;
          if (v141 > v73)
          {
            *(_QWORD *)(a4 + 24) = 0;
            v74 = 0;
            v73 = 0;
            if (v142 >= 0x20)
            {
              *(_QWORD *)a4 += (v142 >> 3) & 0x1FFFFFFC;
              v141 = v142 & 0x1F;
            }
            else
            {
              v141 = v142;
            }
          }
          if ((v141 - 33) >= 0xFFFFFFE0)
          {
            v143 = v73 - v141;
            *(_DWORD *)(a4 + 28) = v73 - v141;
            if (v73 - v141 < 0)
            {
              v149 = *(_QWORD *)(a4 + 8);
              v148 = *(_QWORD *)(a4 + 16);
              v150 = *(unsigned int **)a4;
              if ((((_DWORD)v148 - *(_DWORD *)a4) & ~((uint64_t)(v148 - *(_QWORD *)a4) >> 63) & 0xFFFFFFFC) != 0
                && v149 <= (unint64_t)v150)
              {
                v74 = bswap32(*v150);
              }
              else
              {
                v186 = 0;
                do
                {
                  v187 = (unsigned __int8 *)v150 + v186;
                  v188 = v74 << 8;
                  *(_DWORD *)(a4 + 24) = v188;
                  v189 = 255;
                  if ((unint64_t)v150 + v186 < v148 && (unint64_t)v187 >= v149)
                    v189 = *v187;
                  v74 = v189 | v188;
                  *(_DWORD *)(a4 + 24) = v74;
                  ++v186;
                }
                while ((_DWORD)v186 != 4);
              }
              v144 = v74 << -(char)v143;
              v190 = v143 + 32;
              *(_DWORD *)(a4 + 28) = v190;
              *(_QWORD *)a4 = v150 + 1;
              if (!v190)
                v144 = 0;
            }
            else
            {
              v144 = v74 << v141;
            }
            *(_DWORD *)(a4 + 24) = v144;
          }
          goto LABEL_261;
      }
    }
  }
}

void std::vector<APAC::Metadata::GroupConfig>::resize(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  void *v23;
  char *v24;
  void *v25;

  v4 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-*(_QWORD *)a1] >> 4);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 4) >= v6)
    {
      bzero(*(void **)(a1 + 8), 48 * ((48 * v6 - 48) / 0x30) + 48);
      *(_QWORD *)(a1 + 8) = &v3[48 * ((48 * v6 - 48) / 0x30) + 48];
      return;
    }
    if (a2 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 4);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v9;
    if (v10 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = 3 * v10;
    v12 = (char *)operator new(48 * v10);
    v13 = &v12[48 * v5];
    v14 = &v12[16 * v11];
    v15 = 48 * ((48 * v6 - 48) / 0x30) + 48;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v3)
        return;
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v3[v17];
        v20 = *(_OWORD *)&v3[v17 - 48];
        *((_QWORD *)v18 - 4) = *(_QWORD *)&v3[v17 - 32];
        *((_OWORD *)v18 - 3) = v20;
        *((_QWORD *)v18 - 1) = 0;
        *(_OWORD *)(v18 - 24) = *(_OWORD *)&v3[v17 - 24];
        *((_QWORD *)v18 - 1) = *(_QWORD *)&v3[v17 - 8];
        *((_QWORD *)v19 - 3) = 0;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        v17 -= 48;
      }
      while (&v3[v17] != v4);
      v21 = &v13[v17];
      v22 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v21;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v3 != v22)
      {
        do
        {
          v23 = (void *)*((_QWORD *)v3 - 3);
          if (v23)
          {
            *((_QWORD *)v3 - 2) = v23;
            operator delete(v23);
          }
          v3 -= 48;
        }
        while (v3 != v22);
        v3 = v22;
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    v24 = &v4[48 * a2];
    while (v3 != v24)
    {
      v25 = (void *)*((_QWORD *)v3 - 3);
      if (v25)
      {
        *((_QWORD *)v3 - 2) = v25;
        operator delete(v25);
      }
      v3 -= 48;
    }
    *(_QWORD *)(a1 + 8) = v24;
  }
}

void APAC::MetadataBitStreamParser::parseGroupConfig(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  int v60;
  BOOL v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  int v83;
  BOOL v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  char *v89;
  _BYTE *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  __int16 v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  unsigned int v107;
  int v108;
  char *v109;
  uint64_t v110;
  unsigned __int8 *v111;
  unsigned int v112;
  int v113;
  int v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unsigned int v117;
  int v118;
  int v119;
  uint64_t v120;
  unsigned __int8 *v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  unint64_t v129;
  uint64_t v130;
  unsigned __int8 *v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int *v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v148;
  unsigned __int8 *v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  _QWORD *exception;
  const char *v154;

  v7 = *(_DWORD *)(a4 + 24);
  v6 = *(_DWORD *)(a4 + 28);
  v8 = v7 >> 21;
  v9 = v6 - 11;
  *(_DWORD *)(a4 + 28) = v6 - 11;
  if (v6 - 11 < 0)
  {
    v13 = *(_QWORD *)(a4 + 8);
    v11 = *(_QWORD *)(a4 + 16);
    v14 = *(unsigned int **)a4;
    if ((((_DWORD)v11 - *(_DWORD *)a4) & ~((uint64_t)(v11 - *(_QWORD *)a4) >> 63) & 0xFFFFFFFC) == 0
      || v13 > (unint64_t)v14)
    {
      v16 = 0;
      do
      {
        v17 = (unsigned __int8 *)v14 + v16;
        v18 = v7 << 8;
        *(_DWORD *)(a4 + 24) = v18;
        v19 = 255;
        if ((unint64_t)v14 + v16 < v11 && (unint64_t)v17 >= v13)
          v19 = *v17;
        v7 = v19 | v18;
        *(_DWORD *)(a4 + 24) = v7;
        ++v16;
      }
      while ((_DWORD)v16 != 4);
    }
    else
    {
      v7 = bswap32(*v14);
    }
    v12 = v14 + 1;
    *(_QWORD *)a4 = v14 + 1;
    v9 = v6 + 21;
    *(_DWORD *)(a4 + 28) = v6 + 21;
    v8 |= v7 >> (v6 + 21);
    if (v6 == -21)
    {
      v10 = 0;
      *(_DWORD *)(a4 + 24) = 0;
    }
    else
    {
      v10 = v7 << (11 - v6);
      *(_DWORD *)(a4 + 24) = v10;
    }
  }
  else
  {
    v10 = v7 << 11;
    *(_DWORD *)(a4 + 24) = v10;
    v11 = *(_QWORD *)(a4 + 16);
    v12 = *(unsigned int **)a4;
  }
  *(_WORD *)a2 = v8;
  if (v9 + 8 * ((int)v11 - (int)v12) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v154 = "Cannot read gpCfg.mIsGlobal";
    goto LABEL_246;
  }
  v20 = v10 >> 31;
  v21 = v9 - 1;
  *(_DWORD *)(a4 + 28) = v9 - 1;
  if (v9 - 1 < 0)
  {
    v23 = *(_QWORD *)(a4 + 8);
    if ((((_DWORD)v11 - (_DWORD)v12) & ~((uint64_t)(v11 - (_QWORD)v12) >> 63) & 0xFFFFFFFC) == 0
      || v23 > (unint64_t)v12)
    {
      v25 = 0;
      do
      {
        v26 = (unsigned __int8 *)v12 + v25;
        v27 = v10 << 8;
        *(_DWORD *)(a4 + 24) = v27;
        v28 = 255;
        if ((unint64_t)v12 + v25 < v11 && (unint64_t)v26 >= v23)
          v28 = *v26;
        v10 = v28 | v27;
        *(_DWORD *)(a4 + 24) = v10;
        ++v25;
      }
      while ((_DWORD)v25 != 4);
    }
    else
    {
      v10 = bswap32(*v12);
    }
    v30 = v9 + 31;
    v29 = v9 == -31;
    *(_DWORD *)(a4 + 28) = v9 + 31;
    *(_QWORD *)a4 = ++v12;
    v20 |= v10 >> (v9 + 31);
    if (v9 == -31)
      v22 = 0;
    else
      v22 = v10 << (1 - v9);
    if (v29)
      v21 = 0;
    else
      v21 = v30;
  }
  else
  {
    v22 = 2 * v10;
  }
  *(_DWORD *)(a4 + 24) = v22;
  *(_BYTE *)(a2 + 2) = v20 != 0;
  if (!v20)
  {
    if (v21 + 8 * ((int)v11 - (int)v12) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v154 = "Cannot read gpCfg.mIsPerASC";
      goto LABEL_246;
    }
    v31 = v22 >> 31;
    v32 = v21 - 1;
    *(_DWORD *)(a4 + 28) = v21 - 1;
    if (v21 - 1 < 0)
    {
      v34 = *(_QWORD *)(a4 + 8);
      if ((((_DWORD)v11 - (_DWORD)v12) & ~((uint64_t)(v11 - (_QWORD)v12) >> 63) & 0xFFFFFFFC) != 0
        && v34 <= (unint64_t)v12)
      {
        v22 = bswap32(*v12);
      }
      else
      {
        v35 = 0;
        do
        {
          v36 = (unsigned __int8 *)v12 + v35;
          v37 = v22 << 8;
          *(_DWORD *)(a4 + 24) = v37;
          v38 = 255;
          if ((unint64_t)v12 + v35 < v11 && (unint64_t)v36 >= v34)
            v38 = *v36;
          v22 = v38 | v37;
          *(_DWORD *)(a4 + 24) = v22;
          ++v35;
        }
        while ((_DWORD)v35 != 4);
      }
      v39 = v22 << (1 - v21);
      v40 = v21 + 31;
      *(_QWORD *)a4 = ++v12;
      v31 |= v22 >> v40;
      if (v40)
        v33 = v39;
      else
        v33 = 0;
      if (v40)
        v32 = v40;
      else
        v32 = 0;
    }
    else
    {
      v33 = 2 * v22;
    }
    *(_BYTE *)(a2 + 3) = v31 != 0;
    LODWORD(v41) = v33 >> 21;
    v42 = v32 - 11;
    *(_DWORD *)(a4 + 24) = v33;
    *(_DWORD *)(a4 + 28) = v32 - 11;
    if (v31)
    {
      if (v42 < 0)
      {
        v45 = *(_QWORD *)(a4 + 8);
        if ((((_DWORD)v11 - (_DWORD)v12) & ~((uint64_t)(v11 - (_QWORD)v12) >> 63) & 0xFFFFFFFC) != 0
          && v45 <= (unint64_t)v12)
        {
          v33 = bswap32(*v12);
        }
        else
        {
          v47 = 0;
          do
          {
            v48 = (unsigned __int8 *)v12 + v47;
            v49 = v33 << 8;
            *(_DWORD *)(a4 + 24) = v49;
            v50 = 255;
            if ((unint64_t)v12 + v47 < v11 && (unint64_t)v48 >= v45)
              v50 = *v48;
            v33 = v50 | v49;
            *(_DWORD *)(a4 + 24) = v33;
            ++v47;
          }
          while ((_DWORD)v47 != 4);
        }
        v51 = v33 << (11 - v32);
        v52 = v32 + 21;
        *(_DWORD *)(a4 + 28) = v52;
        *(_QWORD *)a4 = ++v12;
        LODWORD(v41) = (v33 >> v52) | v41;
        if (v52)
          v43 = v51;
        else
          v43 = 0;
        if (v52)
          v42 = v52;
        else
          v42 = 0;
      }
      else
      {
        v43 = v33 << 11;
      }
      *(_DWORD *)(a4 + 24) = v43;
      *(_WORD *)(a2 + 4) = v41;
      if (v42 + 8 * ((int)v11 - (int)v12) <= 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        v154 = "Cannot read gpCfg.mASCType";
      }
      else
      {
        v53 = v43 >> 29;
        v54 = v42 - 3;
        *(_DWORD *)(a4 + 28) = v42 - 3;
        if (v42 - 3 < 0)
        {
          v56 = *(_QWORD *)(a4 + 8);
          if ((((_DWORD)v11 - (_DWORD)v12) & ~((uint64_t)(v11 - (_QWORD)v12) >> 63) & 0xFFFFFFFC) != 0
            && v56 <= (unint64_t)v12)
          {
            v43 = bswap32(*v12);
          }
          else
          {
            v57 = 0;
            do
            {
              v58 = (unsigned __int8 *)v12 + v57;
              v59 = v43 << 8;
              *(_DWORD *)(a4 + 24) = v59;
              v60 = 255;
              if ((unint64_t)v12 + v57 < v11 && (unint64_t)v58 >= v56)
                v60 = *v58;
              v43 = v60 | v59;
              *(_DWORD *)(a4 + 24) = v43;
              ++v57;
            }
            while ((_DWORD)v57 != 4);
          }
          v62 = v42 + 29;
          v61 = v42 == -29;
          *(_DWORD *)(a4 + 28) = v42 + 29;
          *(_QWORD *)a4 = ++v12;
          v53 |= v43 >> (v42 + 29);
          if (v42 == -29)
            v55 = 0;
          else
            v55 = v43 << (3 - v42);
          if (v61)
            v54 = 0;
          else
            v54 = v62;
        }
        else
        {
          v55 = 8 * v43;
        }
        *(_DWORD *)(a4 + 24) = v55;
        *(_BYTE *)(a2 + 6) = v53;
        if (v53 == 2)
        {
          v65 = v55 >> 21;
          *(_DWORD *)(a4 + 28) = v54 - 11;
          if (v54 - 11 < 0)
          {
            v103 = *(_QWORD *)(a4 + 8);
            if ((((_DWORD)v11 - (_DWORD)v12) & ~((uint64_t)(v11 - (_QWORD)v12) >> 63) & 0xFFFFFFFC) != 0
              && v103 <= (unint64_t)v12)
            {
              v55 = bswap32(*v12);
            }
            else
            {
              v115 = 0;
              do
              {
                v116 = (unsigned __int8 *)v12 + v115;
                v117 = v55 << 8;
                *(_DWORD *)(a4 + 24) = v117;
                v118 = 255;
                if ((unint64_t)v12 + v115 < v11 && (unint64_t)v116 >= v103)
                  v118 = *v116;
                v55 = v118 | v117;
                *(_DWORD *)(a4 + 24) = v55;
                ++v115;
              }
              while ((_DWORD)v115 != 4);
            }
            v66 = v55 << (11 - v54);
            v119 = v54 + 21;
            *(_DWORD *)(a4 + 28) = v119;
            *(_QWORD *)a4 = v12 + 1;
            v65 |= v55 >> v119;
            if (!v119)
              v66 = 0;
          }
          else
          {
            v66 = v55 << 11;
          }
          *(_DWORD *)(a4 + 24) = v66;
          *(_WORD *)(a2 + 14) = v65;
          return;
        }
        if (v53 != 1)
        {
          if (!(_BYTE)v53)
          {
            v63 = v55 >> 21;
            *(_DWORD *)(a4 + 28) = v54 - 11;
            if (v54 - 11 < 0)
            {
              v102 = *(_QWORD *)(a4 + 8);
              if ((((_DWORD)v11 - (_DWORD)v12) & ~((uint64_t)(v11 - (_QWORD)v12) >> 63) & 0xFFFFFFFC) != 0
                && v102 <= (unint64_t)v12)
              {
                v55 = bswap32(*v12);
              }
              else
              {
                v110 = 0;
                do
                {
                  v111 = (unsigned __int8 *)v12 + v110;
                  v112 = v55 << 8;
                  *(_DWORD *)(a4 + 24) = v112;
                  v113 = 255;
                  if ((unint64_t)v12 + v110 < v11 && (unint64_t)v111 >= v102)
                    v113 = *v111;
                  v55 = v113 | v112;
                  *(_DWORD *)(a4 + 24) = v55;
                  ++v110;
                }
                while ((_DWORD)v110 != 4);
              }
              v64 = v55 << (11 - v54);
              v114 = v54 + 21;
              *(_DWORD *)(a4 + 28) = v114;
              *(_QWORD *)a4 = v12 + 1;
              v63 |= v55 >> v114;
              if (!v114)
                v64 = 0;
            }
            else
            {
              v64 = v55 << 11;
            }
            *(_DWORD *)(a4 + 24) = v64;
            *(_WORD *)(a2 + 16) = v63;
          }
          return;
        }
        v67 = v55 >> 21;
        v68 = v54 - 11;
        *(_DWORD *)(a4 + 28) = v54 - 11;
        if (v54 - 11 < 0)
        {
          v104 = *(_QWORD *)(a4 + 8);
          if ((((_DWORD)v11 - (_DWORD)v12) & ~((uint64_t)(v11 - (_QWORD)v12) >> 63) & 0xFFFFFFFC) != 0
            && v104 <= (unint64_t)v12)
          {
            v55 = bswap32(*v12);
          }
          else
          {
            v120 = 0;
            do
            {
              v121 = (unsigned __int8 *)v12 + v120;
              v122 = v55 << 8;
              *(_DWORD *)(a4 + 24) = v122;
              v123 = 255;
              if ((unint64_t)v12 + v120 < v11 && (unint64_t)v121 >= v104)
                v123 = *v121;
              v55 = v123 | v122;
              *(_DWORD *)(a4 + 24) = v55;
              ++v120;
            }
            while ((_DWORD)v120 != 4);
          }
          v124 = v55 << (11 - v54);
          v125 = v54 + 21;
          *(_DWORD *)(a4 + 28) = v125;
          *(_QWORD *)a4 = ++v12;
          v67 |= v55 >> v125;
          if (v125)
            v69 = v124;
          else
            v69 = 0;
          if (v125)
            v68 = v125;
          else
            v68 = 0;
        }
        else
        {
          v69 = v55 << 11;
        }
        *(_DWORD *)(a4 + 24) = v69;
        *(_WORD *)(a2 + 8) = v67;
        if (v68 + 8 * ((int)v11 - (int)v12) > 0)
        {
          v126 = v69 >> 31;
          v127 = v68 - 1;
          *(_DWORD *)(a4 + 28) = v68 - 1;
          if (v68 - 1 < 0)
          {
            v129 = *(_QWORD *)(a4 + 8);
            if ((((_DWORD)v11 - (_DWORD)v12) & ~((uint64_t)(v11 - (_QWORD)v12) >> 63) & 0xFFFFFFFC) != 0
              && v129 <= (unint64_t)v12)
            {
              v69 = bswap32(*v12);
            }
            else
            {
              v130 = 0;
              do
              {
                v131 = (unsigned __int8 *)v12 + v130;
                v132 = v69 << 8;
                *(_DWORD *)(a4 + 24) = v132;
                v133 = 255;
                if ((unint64_t)v12 + v130 < v11 && (unint64_t)v131 >= v129)
                  v133 = *v131;
                v69 = v133 | v132;
                *(_DWORD *)(a4 + 24) = v69;
                ++v130;
              }
              while ((_DWORD)v130 != 4);
            }
            v128 = v69 << (1 - v68);
            v134 = v68 + 31;
            *(_DWORD *)(a4 + 28) = v134;
            *(_QWORD *)a4 = ++v12;
            v126 |= v69 >> v134;
            if (v134)
            {
              v127 = v134;
            }
            else
            {
              v128 = 0;
              v127 = 0;
            }
          }
          else
          {
            v128 = 2 * v69;
          }
          *(_DWORD *)(a4 + 24) = v128;
          *(_BYTE *)(a2 + 10) = v126 != 0;
          if (v126)
          {
            v135 = v128 >> 21;
            *(_DWORD *)(a4 + 28) = v127 - 11;
            if (v127 - 11 < 0)
            {
              AT::TBitstreamReader<unsigned int>::FillCacheFrom(a4, v12);
              *(_QWORD *)a4 += 4;
              v137 = *(_DWORD *)(a4 + 24);
              v138 = *(_DWORD *)(a4 + 28);
              v135 |= v137 >> v138;
              *(_DWORD *)(a4 + 28) = v138 + 32;
              if (v138 == -32)
                v136 = 0;
              else
                v136 = v137 << -(char)v138;
            }
            else
            {
              v136 = v128 << 11;
            }
            *(_DWORD *)(a4 + 24) = v136;
            *(_WORD *)(a2 + 12) = v135;
          }
          return;
        }
        exception = __cxa_allocate_exception(8uLL);
        v154 = "Cannot read gpCfg.mIsObjectInBed";
      }
LABEL_246:
      *exception = v154;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    if (v42 < 0)
    {
      v46 = *(_QWORD *)(a4 + 8);
      if ((((_DWORD)v11 - (_DWORD)v12) & ~((uint64_t)(v11 - (_QWORD)v12) >> 63) & 0xFFFFFFFC) != 0
        && v46 <= (unint64_t)v12)
      {
        v33 = bswap32(*v12);
      }
      else
      {
        v70 = 0;
        do
        {
          v71 = (unsigned __int8 *)v12 + v70;
          v72 = v33 << 8;
          *(_DWORD *)(a4 + 24) = v72;
          v73 = 255;
          if ((unint64_t)v12 + v70 < v11 && (unint64_t)v71 >= v46)
            v73 = *v71;
          v33 = v73 | v72;
          *(_DWORD *)(a4 + 24) = v33;
          ++v70;
        }
        while ((_DWORD)v70 != 4);
      }
      v74 = v33 << (11 - v32);
      v75 = v32 + 21;
      *(_DWORD *)(a4 + 28) = v75;
      *(_QWORD *)a4 = ++v12;
      LODWORD(v41) = (v33 >> v75) | v41;
      if (v75)
        v44 = v74;
      else
        v44 = 0;
      if (v75)
        v42 = v75;
      else
        v42 = 0;
    }
    else
    {
      v44 = v33 << 11;
    }
    *(_DWORD *)(a4 + 24) = v44;
    *(_WORD *)(a2 + 18) = v41;
    if (v42 + 8 * ((int)v11 - (int)v12) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v154 = "Cannot read gpCfg.mHasConjunctMembers";
      goto LABEL_246;
    }
    v76 = v44 >> 31;
    v77 = v42 - 1;
    *(_DWORD *)(a4 + 28) = v42 - 1;
    if (v42 - 1 < 0)
    {
      v79 = *(_QWORD *)(a4 + 8);
      if ((((_DWORD)v11 - (_DWORD)v12) & ~((uint64_t)(v11 - (_QWORD)v12) >> 63) & 0xFFFFFFFC) != 0
        && v79 <= (unint64_t)v12)
      {
        v44 = bswap32(*v12);
      }
      else
      {
        v80 = 0;
        do
        {
          v81 = (unsigned __int8 *)v12 + v80;
          v82 = v44 << 8;
          *(_DWORD *)(a4 + 24) = v82;
          v83 = 255;
          if ((unint64_t)v12 + v80 < v11 && (unint64_t)v81 >= v79)
            v83 = *v81;
          v44 = v83 | v82;
          *(_DWORD *)(a4 + 24) = v44;
          ++v80;
        }
        while ((_DWORD)v80 != 4);
      }
      v85 = v42 + 31;
      v84 = v42 == -31;
      *(_DWORD *)(a4 + 28) = v42 + 31;
      *(_QWORD *)a4 = ++v12;
      v76 |= v44 >> (v42 + 31);
      if (v42 == -31)
        v78 = 0;
      else
        v78 = v44 << (1 - v42);
      if (v84)
        v77 = 0;
      else
        v77 = v85;
    }
    else
    {
      v78 = 2 * v44;
    }
    *(_DWORD *)(a4 + 24) = v78;
    *(_BYTE *)(a2 + 20) = v76 != 0;
    if (v76)
    {
      v86 = v78 >> 21;
      *(_DWORD *)(a4 + 28) = v77 - 11;
      if (v77 - 11 < 0)
      {
        v101 = *(_QWORD *)(a4 + 8);
        if ((((_DWORD)v11 - (_DWORD)v12) & ~((uint64_t)(v11 - (_QWORD)v12) >> 63) & 0xFFFFFFFC) != 0
          && v101 <= (unint64_t)v12)
        {
          v78 = bswap32(*v12);
        }
        else
        {
          v105 = 0;
          do
          {
            v106 = (unsigned __int8 *)v12 + v105;
            v107 = v78 << 8;
            *(_DWORD *)(a4 + 24) = v107;
            v108 = 255;
            if ((unint64_t)v12 + v105 < v11 && (unint64_t)v106 >= v101)
              v108 = *v106;
            v78 = v108 | v107;
            *(_DWORD *)(a4 + 24) = v78;
            ++v105;
          }
          while ((_DWORD)v105 != 4);
        }
        v87 = v78 << (11 - v77);
        *(_DWORD *)(a4 + 28) = v77 + 21;
        *(_QWORD *)a4 = v12 + 1;
        v86 |= v78 >> (v77 + 21);
        if (v77 == -21)
          v87 = 0;
      }
      else
      {
        v87 = v78 << 11;
      }
      *(_DWORD *)(a4 + 24) = v87;
      *(_WORD *)(a2 + 22) = v86;
      return;
    }
    v88 = (unsigned __int16)v41;
    if (a3)
    {
      v89 = *(char **)(a2 + 24);
      v90 = *(_BYTE **)(a2 + 32);
      v91 = (v90 - v89) >> 1;
      if ((unsigned __int16)v41 <= v91)
      {
        if ((unsigned __int16)v41 >= v91)
          goto LABEL_218;
        v109 = &v89[2 * (unsigned __int16)v41];
      }
      else
      {
        v92 = (unsigned __int16)v41 - v91;
        v93 = *(_QWORD *)(a2 + 40);
        if (v92 > (v93 - (uint64_t)v90) >> 1)
        {
          v94 = v93 - (_QWORD)v89;
          if (v94 <= (unsigned __int16)v41)
            v41 = (unsigned __int16)v41;
          else
            v41 = v94;
          if (v94 >= 0x7FFFFFFFFFFFFFFELL)
            v95 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v95 = v41;
          if (v95 < 0)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v96 = (char *)operator new(2 * v95);
          v97 = &v96[2 * v91];
          v98 = &v96[2 * v95];
          bzero(v97, 2 * v92);
          v99 = &v97[2 * v92];
          while (v90 != v89)
          {
            v100 = *((_WORD *)v90 - 1);
            v90 -= 2;
            *((_WORD *)v97 - 1) = v100;
            v97 -= 2;
          }
          *(_QWORD *)(a2 + 24) = v97;
          *(_QWORD *)(a2 + 32) = v99;
          *(_QWORD *)(a2 + 40) = v98;
          if (v89)
            operator delete(v89);
          goto LABEL_218;
        }
        bzero(*(void **)(a2 + 32), 2 * v92);
        v109 = &v90[2 * v92];
      }
      *(_QWORD *)(a2 + 32) = v109;
    }
LABEL_218:
    if ((_DWORD)v88)
    {
      v139 = 0;
      v141 = *(_DWORD *)(a4 + 24);
      v140 = *(_DWORD *)(a4 + 28);
      v143 = *(_QWORD *)(a4 + 8);
      v142 = *(_QWORD *)(a4 + 16);
      v144 = *(unsigned int **)a4;
      v145 = *(_QWORD *)(a2 + 24);
      do
      {
        v146 = v141 >> 21;
        *(_DWORD *)(a4 + 28) = v140 - 11;
        if (v140 - 11 < 0)
        {
          if ((((_DWORD)v142 - (_DWORD)v144) & ~((uint64_t)(v142 - (_QWORD)v144) >> 63) & 0xFFFFFFFC) == 0
            || v143 > (unint64_t)v144)
          {
            v148 = 0;
            do
            {
              v149 = (unsigned __int8 *)v144 + v148;
              v150 = v141 << 8;
              *(_DWORD *)(a4 + 24) = v150;
              v151 = 255;
              if ((unint64_t)v144 + v148 < v142 && (unint64_t)v149 >= v143)
                v151 = *v149;
              v141 = v151 | v150;
              *(_DWORD *)(a4 + 24) = v141;
              ++v148;
            }
            while ((_DWORD)v148 != 4);
          }
          else
          {
            v141 = bswap32(*v144);
          }
          v152 = v141 << (11 - v140);
          v140 += 21;
          *(_DWORD *)(a4 + 28) = v140;
          *(_QWORD *)a4 = ++v144;
          v146 |= v141 >> v140;
          if (v140)
            v141 = v152;
          else
            v141 = 0;
          if (!v140)
            v140 = 0;
        }
        else
        {
          v141 <<= 11;
          v140 -= 11;
        }
        *(_DWORD *)(a4 + 24) = v141;
        *(_WORD *)(v145 + 2 * v139++) = v146;
      }
      while (v139 != v88);
    }
  }
}

void APAC::MetadataBitStreamParser::parseRendererMetadata(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  int v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *exception;
  char *v79;
  unint64_t v80;
  char *v81;
  int v82;
  char *v83;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 10)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Cannot read rMd.mGroupCount";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v10 = *(_DWORD *)(a3 + 24);
  v11 = v10 >> 21;
  *(_DWORD *)(a3 + 28) = v6 - 11;
  if (v6 - 11 < 0)
  {
    v13 = v5 & ~(v5 >> 63) & 0xFFFFFFFC;
    v14 = *(_QWORD *)(a3 + 8);
    if (v13)
      v15 = v14 > (unint64_t)v4;
    else
      v15 = 1;
    if (v15)
    {
      v16 = 0;
      do
      {
        v17 = (unsigned __int8 *)v4 + v16;
        v18 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v18;
        v19 = 255;
        if ((unint64_t)v4 + v16 < v3 && (unint64_t)v17 >= v14)
          v19 = *v17;
        v10 = v19 | v18;
        *(_DWORD *)(a3 + 24) = v10;
        ++v16;
      }
      while ((_DWORD)v16 != 4);
    }
    else
    {
      v10 = bswap32(*v4);
    }
    v20 = v10 << (11 - v6);
    v21 = v6 + 21;
    *(_DWORD *)(a3 + 28) = v21;
    *(_QWORD *)a3 = v4 + 1;
    v11 |= v10 >> v21;
    if (v21)
      v12 = v20;
    else
      v12 = 0;
  }
  else
  {
    v12 = v10 << 11;
  }
  *(_DWORD *)(a3 + 24) = v12;
  *(_WORD *)a2 = v11;
  v22 = (unsigned __int16)v11;
  v23 = *(_QWORD *)(a2 + 4808);
  v24 = *(_QWORD *)(a2 + 4800);
  v25 = 0xB81DC085AE2E9061 * ((v23 - v24) >> 3);
  v26 = v22 - v25;
  if (v22 <= v25)
  {
    if (v22 < v25)
    {
      v73 = v24 + 40200 * v22;
      while (v23 != v73)
      {
        v23 -= 40200;
        std::__destroy_at[abi:ne180100]<APAC::Metadata::GroupData,0>(v23);
      }
      *(_QWORD *)(a2 + 4808) = v73;
    }
  }
  else
  {
    v27 = *(_QWORD *)(a2 + 4816);
    if (0xB81DC085AE2E9061 * ((v27 - v23) >> 3) < v26)
    {
      v28 = 0xB81DC085AE2E9061 * ((v27 - v24) >> 3);
      v29 = 2 * v28;
      if (2 * v28 <= v22)
        v29 = v22;
      if (v28 >= 0xD0ABFDC22706)
        v30 = 0x1A157FB844E0CLL;
      else
        v30 = v29;
      if (v30 > 0x1A157FB844E0CLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v31 = (char *)operator new(40200 * v30);
      v32 = &v31[40200 * v25];
      v81 = &v31[40200 * v22];
      v82 = v22;
      v33 = 40200 * v22 - 40200 * v25;
      v34 = (uint64_t)(v32 + 8);
      do
      {
        bzero((void *)(v34 - 8), 0x9D08uLL);
        std::array<APAC::Metadata::GroupData::BlockData,32ul>::array(v34);
        v34 += 40200;
        v33 -= 40200;
      }
      while (v33);
      v35 = &v31[40200 * v30];
      v36 = *(char **)(a2 + 4808);
      v83 = *(char **)(a2 + 4800);
      if (v36 == v83)
      {
        *(_QWORD *)(a2 + 4800) = v32;
        *(_QWORD *)(a2 + 4808) = v81;
        *(_QWORD *)(a2 + 4816) = v35;
        if (!v36)
          goto LABEL_46;
      }
      else
      {
        v79 = v35;
        v80 = a1;
        do
        {
          v37 = 0;
          v38 = v36 - 38944;
          v36 -= 40200;
          v39 = *(_DWORD *)v36;
          v40 = v32 - 38944;
          v32 -= 40200;
          v32[4] = v36[4];
          *(_DWORD *)v32 = v39;
          v41 = 32;
          do
          {
            v42 = &v40[v37];
            v43 = &v38[v37];
            v44 = *(_DWORD *)&v38[v37 - 1248];
            v45 = (uint64_t)&v40[v37 - 1248];
            *(_WORD *)(v45 + 4) = *(_WORD *)&v38[v37 - 1244];
            *(_DWORD *)v45 = v44;
            memcpy(&v40[v37 - 1240], &v38[v37 - 1240], 0x314uLL);
            v46 = (uint64_t)&v40[v37 - 448];
            v47 = *(_QWORD *)&v38[v37 - 448];
            *(_DWORD *)(v46 + 8) = *(_DWORD *)&v38[v37 - 440];
            *(_QWORD *)v46 = v47;
            v48 = *(_QWORD *)&v38[v37 - 432];
            v49 = &v40[v37 - 424];
            v50 = (uint64_t)&v38[v37 - 424];
            *((_QWORD *)v49 + 1) = 0;
            *((_QWORD *)v49 + 2) = 0;
            *((_QWORD *)v42 - 54) = v48;
            *(_QWORD *)v49 = 0;
            *(_OWORD *)v49 = *(_OWORD *)v50;
            *((_QWORD *)v42 - 51) = *(_QWORD *)&v38[v37 - 408];
            *((_QWORD *)v43 - 52) = 0;
            *(_QWORD *)v50 = 0;
            *(_QWORD *)(v50 + 16) = 0;
            v51 = &v40[v37 - 400];
            v52 = (uint64_t)&v38[v37 - 400];
            *((_QWORD *)v51 + 2) = 0;
            *(_QWORD *)v51 = 0;
            *((_QWORD *)v42 - 49) = 0;
            *(_OWORD *)v51 = *(_OWORD *)v52;
            *((_QWORD *)v42 - 48) = *(_QWORD *)&v38[v37 - 384];
            *((_QWORD *)v43 - 49) = 0;
            *(_QWORD *)v52 = 0;
            v53 = &v40[v37 - 376];
            v54 = (uint64_t)&v38[v37 - 376];
            *(_QWORD *)(v52 + 16) = 0;
            *((_QWORD *)v53 + 2) = 0;
            *(_QWORD *)v53 = 0;
            *((_QWORD *)v42 - 46) = 0;
            *(_OWORD *)v53 = *(_OWORD *)v54;
            *((_QWORD *)v42 - 45) = *(_QWORD *)&v38[v37 - 360];
            *((_QWORD *)v43 - 46) = 0;
            *(_QWORD *)v54 = 0;
            *(_QWORD *)(v54 + 16) = 0;
            v55 = &v40[v37 - 352];
            v56 = (uint64_t)&v38[v37 - 352];
            *((_QWORD *)v55 + 2) = 0;
            *(_QWORD *)v55 = 0;
            *((_QWORD *)v42 - 43) = 0;
            *(_OWORD *)v55 = *(_OWORD *)v56;
            *((_QWORD *)v42 - 42) = *(_QWORD *)&v38[v37 - 336];
            *((_QWORD *)v43 - 43) = 0;
            *(_QWORD *)v56 = 0;
            *(_QWORD *)(v56 + 16) = 0;
            v57 = &v40[v37 - 328];
            v58 = (uint64_t)&v38[v37 - 328];
            *((_QWORD *)v57 + 2) = 0;
            *(_QWORD *)v57 = 0;
            *((_QWORD *)v42 - 40) = 0;
            *(_OWORD *)v57 = *(_OWORD *)v58;
            *((_QWORD *)v42 - 39) = *(_QWORD *)&v38[v37 - 312];
            *((_QWORD *)v43 - 40) = 0;
            *(_QWORD *)v58 = 0;
            v59 = &v40[v37 - 304];
            v60 = (uint64_t)&v38[v37 - 304];
            *(_QWORD *)(v58 + 16) = 0;
            *((_QWORD *)v59 + 2) = 0;
            *(_QWORD *)v59 = 0;
            *((_QWORD *)v42 - 37) = 0;
            *(_OWORD *)v59 = *(_OWORD *)v60;
            *((_QWORD *)v42 - 36) = *(_QWORD *)&v38[v37 - 288];
            *((_QWORD *)v43 - 37) = 0;
            *(_QWORD *)v60 = 0;
            *(_QWORD *)(v60 + 16) = 0;
            *((_QWORD *)v42 - 35) = *(_QWORD *)&v38[v37 - 280];
            LOWORD(v58) = *(_WORD *)&v38[v37 - 272];
            v61 = &v40[v37 - 264];
            *((_QWORD *)v42 - 32) = 0;
            *((_QWORD *)v42 - 31) = 0;
            *(_QWORD *)v61 = 0;
            *(_OWORD *)v61 = *(_OWORD *)&v38[v37 - 264];
            v62 = *(_QWORD *)&v38[v37 - 248];
            *((_WORD *)v42 - 136) = v58;
            *((_QWORD *)v42 - 31) = v62;
            *((_QWORD *)v43 - 33) = 0;
            *((_QWORD *)v43 - 32) = 0;
            *((_QWORD *)v43 - 31) = 0;
            *((_QWORD *)v42 - 29) = 0;
            *((_QWORD *)v42 - 28) = 0;
            *((_QWORD *)v42 - 30) = 0;
            *((_OWORD *)v42 - 15) = *(_OWORD *)&v38[v37 - 240];
            *((_QWORD *)v42 - 28) = *(_QWORD *)&v38[v37 - 224];
            *((_QWORD *)v43 - 30) = 0;
            *((_QWORD *)v43 - 29) = 0;
            v63 = *(_OWORD *)&v38[v37 - 168];
            v64 = *(_OWORD *)&v38[v37 - 120];
            v65 = *(_OWORD *)&v38[v37 - 136];
            v66 = *(_OWORD *)&v38[v37 - 152];
            *((_QWORD *)v43 - 28) = 0;
            *(_OWORD *)(v42 - 152) = v66;
            *(_OWORD *)(v42 - 136) = v65;
            *(_OWORD *)(v42 - 120) = v64;
            *(_OWORD *)(v42 - 168) = v63;
            v67 = *(_OWORD *)&v38[v37 - 59];
            v68 = *(_OWORD *)&v38[v37 - 72];
            v69 = *(_OWORD *)&v38[v37 - 88];
            *(_OWORD *)(v42 - 104) = *(_OWORD *)&v38[v37 - 104];
            *(_OWORD *)(v42 - 88) = v69;
            *(_OWORD *)(v42 - 72) = v68;
            *(_OWORD *)(v42 - 59) = v67;
            v70 = *(_OWORD *)&v38[v37 - 184];
            v71 = *(_OWORD *)&v38[v37 - 200];
            *(_OWORD *)(v42 - 216) = *(_OWORD *)&v38[v37 - 216];
            *(_OWORD *)(v42 - 200) = v71;
            *(_OWORD *)(v42 - 184) = v70;
            LODWORD(v59) = *(_DWORD *)&v38[v37 - 32];
            *((_QWORD *)v42 - 5) = *(_QWORD *)&v38[v37 - 40];
            *((_QWORD *)v42 - 2) = 0;
            *((_QWORD *)v42 - 1) = 0;
            *((_QWORD *)v42 - 3) = 0;
            *((_DWORD *)v42 - 8) = (_DWORD)v59;
            *(_OWORD *)(v42 - 24) = *(_OWORD *)&v38[v37 - 24];
            *((_QWORD *)v42 - 1) = *(_QWORD *)&v38[v37 - 8];
            *((_QWORD *)v43 - 3) = 0;
            *((_QWORD *)v43 - 2) = 0;
            *((_QWORD *)v43 - 1) = 0;
            *(_QWORD *)v42 = *(_QWORD *)&v38[v37];
            v37 += 1256;
            --v41;
          }
          while (v41);
        }
        while (v36 != v83);
        v72 = *(char **)(a2 + 4800);
        v36 = *(char **)(a2 + 4808);
        *(_QWORD *)(a2 + 4800) = v32;
        LODWORD(v22) = v82;
        *(_QWORD *)(a2 + 4808) = v81;
        *(_QWORD *)(a2 + 4816) = v79;
        if (v36 == v72)
        {
          a1 = v80;
          if (!v36)
            goto LABEL_46;
        }
        else
        {
          a1 = v80;
          do
          {
            v36 -= 40200;
            std::__destroy_at[abi:ne180100]<APAC::Metadata::GroupData,0>((uint64_t)v36);
          }
          while (v36 != v72);
          v36 = v72;
          if (!v72)
            goto LABEL_46;
        }
      }
      operator delete(v36);
      goto LABEL_46;
    }
    v74 = v23 + 40200 * v26;
    v75 = 40200 * v22 - 8 * ((v23 - v24) >> 3);
    v76 = v23 + 8;
    do
    {
      bzero((void *)(v76 - 8), 0x9D08uLL);
      std::array<APAC::Metadata::GroupData::BlockData,32ul>::array(v76);
      v76 += 40200;
      v75 -= 40200;
    }
    while (v75);
    *(_QWORD *)(a2 + 4808) = v74;
  }
LABEL_46:
  if ((_DWORD)v22)
  {
    v77 = 0;
    do
    {
      APAC::MetadataBitStreamParser::parseGroupData(a1, *(_QWORD *)(a2 + 4800) + v77, a3);
      v77 += 40200;
    }
    while (40200 * v22 != v77);
  }
}

void APAC::MetadataBitStreamParser::parseGroupData(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *exception;
  const char *v43;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v43 = "Cannot read gpData.mHasData";
    goto LABEL_59;
  }
  v9 = *(_DWORD *)(a3 + 24);
  v10 = v9 >> 31;
  v11 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v13 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v13 > (unint64_t)v4)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v4 + v15;
        v17 = v9 << 8;
        *(_DWORD *)(a3 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v4 + v15 < v3 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v9 = v18 | v17;
        *(_DWORD *)(a3 + 24) = v9;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v9 = bswap32(*v4);
    }
    v19 = v9 << (1 - v6);
    v20 = v6 + 31;
    *(_DWORD *)(a3 + 28) = v20;
    *(_QWORD *)a3 = ++v4;
    v10 |= v9 >> v20;
    if (v20)
      v12 = v19;
    else
      v12 = 0;
    if (v20)
      v11 = v20;
    else
      v11 = 0;
  }
  else
  {
    v12 = 2 * v9;
  }
  *(_DWORD *)(a3 + 24) = v12;
  *(_BYTE *)a2 = v10 != 0;
  if (v10)
  {
    if (v11 + 8 * ((int)v3 - (int)v4) <= 10)
    {
      exception = __cxa_allocate_exception(8uLL);
      v43 = "Cannot read gpData.mGroupID";
    }
    else
    {
      v21 = v12 >> 21;
      v22 = v11 - 11;
      *(_DWORD *)(a3 + 28) = v11 - 11;
      if (v11 - 11 < 0)
      {
        v24 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v24 <= (unint64_t)v4)
        {
          v12 = bswap32(*v4);
        }
        else
        {
          v25 = 0;
          do
          {
            v26 = (unsigned __int8 *)v4 + v25;
            v27 = v12 << 8;
            *(_DWORD *)(a3 + 24) = v27;
            v28 = 255;
            if ((unint64_t)v4 + v25 < v3 && (unint64_t)v26 >= v24)
              v28 = *v26;
            v12 = v28 | v27;
            *(_DWORD *)(a3 + 24) = v12;
            ++v25;
          }
          while ((_DWORD)v25 != 4);
        }
        v29 = v12 << (11 - v11);
        v30 = v11 + 21;
        *(_DWORD *)(a3 + 28) = v30;
        *(_QWORD *)a3 = ++v4;
        v21 |= v12 >> v30;
        if (v30)
          v23 = v29;
        else
          v23 = 0;
        if (v30)
          v22 = v30;
        else
          v22 = 0;
      }
      else
      {
        v23 = v12 << 11;
      }
      *(_DWORD *)(a3 + 24) = v23;
      *(_WORD *)(a2 + 2) = v21;
      if (v22 + 8 * ((int)v3 - (int)v4) > 5)
      {
        v31 = v23 >> 26;
        *(_DWORD *)(a3 + 28) = v22 - 6;
        if (v22 - 6 < 0)
        {
          v33 = *(_QWORD *)(a3 + 8);
          if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
            && v33 <= (unint64_t)v4)
          {
            v23 = bswap32(*v4);
          }
          else
          {
            v34 = 0;
            do
            {
              v35 = (unsigned __int8 *)v4 + v34;
              v36 = v23 << 8;
              *(_DWORD *)(a3 + 24) = v36;
              v37 = 255;
              if ((unint64_t)v4 + v34 < v3 && (unint64_t)v35 >= v33)
                v37 = *v35;
              v23 = v37 | v36;
              *(_DWORD *)(a3 + 24) = v23;
              ++v34;
            }
            while ((_DWORD)v34 != 4);
          }
          v38 = v23 << (6 - v22);
          v39 = v22 + 26;
          *(_DWORD *)(a3 + 28) = v39;
          *(_QWORD *)a3 = v4 + 1;
          v31 |= v23 >> v39;
          if (v39)
            v32 = v38;
          else
            v32 = 0;
        }
        else
        {
          v32 = v23 << 6;
        }
        *(_DWORD *)(a3 + 24) = v32;
        *(_BYTE *)(a2 + 4) = v31;
        v40 = v31;
        if ((_BYTE)v31)
        {
          v41 = a2 + 8;
          do
          {
            APAC::MetadataBitStreamParser::parseBlockData(a1, v41, a3);
            v41 += 1256;
            --v40;
          }
          while (v40);
        }
        return;
      }
      exception = __cxa_allocate_exception(8uLL);
      v43 = "Cannot read gpData.mNumBlocks";
    }
LABEL_59:
    *exception = v43;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

void APAC::MetadataBitStreamParser::parseBlockData(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  _QWORD *exception;
  const char *v39;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 9)
  {
    exception = __cxa_allocate_exception(8uLL);
    v39 = "Cannot read blkMd.mRtime";
    goto LABEL_57;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 22;
  v9 = v6 - 10;
  *(_DWORD *)(a3 + 28) = v6 - 10;
  if (v6 - 10 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v17 = v7 << (10 - v6);
    v18 = v6 + 22;
    *(_DWORD *)(a3 + 28) = v18;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> v18;
    if (v18)
      v10 = v17;
    else
      v10 = 0;
    if (v18)
      v9 = v18;
    else
      v9 = 0;
  }
  else
  {
    v10 = v7 << 10;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_WORD *)a2 = v8;
  if (v9 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v39 = "Cannot read blkMd.mHasInterpolationLength";
    goto LABEL_57;
  }
  v19 = v10 >> 31;
  v20 = v9 - 1;
  *(_DWORD *)(a3 + 28) = v9 - 1;
  if (v9 - 1 < 0)
  {
    v22 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v22 <= (unint64_t)v4)
    {
      v10 = bswap32(*v4);
    }
    else
    {
      v23 = 0;
      do
      {
        v24 = (unsigned __int8 *)v4 + v23;
        v25 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v25;
        v26 = 255;
        if ((unint64_t)v4 + v23 < v3 && (unint64_t)v24 >= v22)
          v26 = *v24;
        v10 = v26 | v25;
        *(_DWORD *)(a3 + 24) = v10;
        ++v23;
      }
      while ((_DWORD)v23 != 4);
    }
    v28 = v9 + 31;
    v27 = v9 == -31;
    *(_DWORD *)(a3 + 28) = v9 + 31;
    *(_QWORD *)a3 = ++v4;
    v19 |= v10 >> (v9 + 31);
    if (v9 == -31)
      v21 = 0;
    else
      v21 = v10 << (1 - v9);
    if (v27)
      v20 = 0;
    else
      v20 = v28;
  }
  else
  {
    v21 = 2 * v10;
  }
  *(_DWORD *)(a3 + 24) = v21;
  *(_BYTE *)(a2 + 2) = v19 != 0;
  if (v19)
  {
    if (v20 + 8 * ((int)v3 - (int)v4) > 10)
    {
      v29 = v21 >> 21;
      *(_DWORD *)(a3 + 28) = v20 - 11;
      if (v20 - 11 < 0)
      {
        v31 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v31 <= (unint64_t)v4)
        {
          v21 = bswap32(*v4);
        }
        else
        {
          v32 = 0;
          do
          {
            v33 = (unsigned __int8 *)v4 + v32;
            v34 = v21 << 8;
            *(_DWORD *)(a3 + 24) = v34;
            v35 = 255;
            if ((unint64_t)v4 + v32 < v3 && (unint64_t)v33 >= v31)
              v35 = *v33;
            v21 = v35 | v34;
            *(_DWORD *)(a3 + 24) = v21;
            ++v32;
          }
          while ((_DWORD)v32 != 4);
        }
        v36 = v21 << (11 - v20);
        v37 = v20 + 21;
        *(_DWORD *)(a3 + 28) = v37;
        *(_QWORD *)a3 = v4 + 1;
        v29 |= v21 >> v37;
        if (v37)
          v30 = v36;
        else
          v30 = 0;
      }
      else
      {
        v30 = v21 << 11;
      }
      *(_DWORD *)(a3 + 24) = v30;
      *(_WORD *)(a2 + 4) = v29;
      goto LABEL_53;
    }
    exception = __cxa_allocate_exception(8uLL);
    v39 = "Cannot read blkMd.mInterpolationLength";
LABEL_57:
    *exception = v39;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
LABEL_53:
  APAC::MetadataBitStreamParser::parseRendererData(a1, a2 + 8, 0, a3);
}

void APAC::MetadataBitStreamParser::parseRendererData(unint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned int v57;
  int v58;
  unint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  unint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  unint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  BOOL v96;
  uint64_t v97;
  unsigned __int8 *v98;
  unsigned int v99;
  int v100;
  unint64_t v101;
  unsigned int *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  BOOL v106;
  uint64_t v107;
  unsigned __int8 *v108;
  unsigned int v109;
  int v110;
  unint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  unint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  BOOL v121;
  uint64_t v122;
  unsigned __int8 *v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  unsigned int *v131;
  uint64_t v133;
  unsigned __int8 *v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  unint64_t v138;
  BOOL v139;
  uint64_t v140;
  unsigned __int8 *v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  BOOL v146;
  uint64_t v147;
  unsigned __int8 *v148;
  unsigned int v149;
  int v150;
  unint64_t v151;
  uint64_t v153;
  unsigned __int8 *v154;
  unsigned int v155;
  int v156;
  unint64_t v157;
  uint64_t v159;
  unsigned __int8 *v160;
  unsigned int v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  BOOL v165;
  uint64_t v166;
  unsigned __int8 *v167;
  unsigned int v168;
  int v169;
  uint64_t v170;
  unint64_t v171;
  BOOL v172;
  uint64_t v173;
  unsigned __int8 *v174;
  unsigned int v175;
  int v176;
  uint64_t v177;
  unint64_t v178;
  BOOL v179;
  uint64_t v180;
  unsigned __int8 *v181;
  unsigned int v182;
  int v183;
  BOOL v184;
  int v185;
  int v186;
  unsigned int v187;
  int v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  BOOL v207;
  int v208;
  unsigned int v209;
  int v210;
  int v211;
  unint64_t v212;
  unsigned int v213;
  int v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unint64_t v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  uint64_t v225;
  unsigned __int8 *v226;
  unsigned int v227;
  int v228;
  int v229;
  int v230;
  unint64_t v231;
  unsigned int v232;
  uint64_t v233;
  unsigned __int8 *v234;
  unsigned int v235;
  int v236;
  BOOL v237;
  int v238;
  unsigned int v239;
  int v240;
  unint64_t v241;
  uint64_t v242;
  unsigned __int8 *v243;
  unsigned int v244;
  int v245;
  int v246;
  int v247;
  uint64_t v248;
  unsigned __int8 *v249;
  unsigned int v250;
  int v251;
  unsigned int v252;
  uint64_t v253;
  unsigned __int8 *v254;
  int v255;
  int v256;
  int v257;
  _QWORD *exception;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  BOOL *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;

  v8 = *(_DWORD *)(a4 + 24);
  v7 = *(_DWORD *)(a4 + 28);
  v9 = v8 >> 21;
  *(_DWORD *)(a4 + 28) = v7 - 11;
  if (v7 - 11 < 0)
  {
    v12 = *(_QWORD *)(a4 + 8);
    v11 = *(_QWORD *)(a4 + 16);
    v13 = *(unsigned int **)a4;
    if ((((_DWORD)v11 - *(_DWORD *)a4) & ~((uint64_t)(v11 - *(_QWORD *)a4) >> 63) & 0xFFFFFFFC) == 0
      || v12 > (unint64_t)v13)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v13 + v15;
        v17 = v8 << 8;
        *(_DWORD *)(a4 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v13 + v15 < v11 && (unint64_t)v16 >= v12)
          v18 = *v16;
        v8 = v18 | v17;
        *(_DWORD *)(a4 + 24) = v8;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v8 = bswap32(*v13);
    }
    v19 = v8 << (11 - v7);
    v20 = v7 + 21;
    *(_DWORD *)(a4 + 28) = v20;
    *(_QWORD *)a4 = v13 + 1;
    v9 |= v8 >> v20;
    if (v20)
      v10 = v19;
    else
      v10 = 0;
  }
  else
  {
    v10 = v8 << 11;
  }
  *(_DWORD *)(a4 + 24) = v10;
  *(_WORD *)(a2 + 2) = v9;
  if (v9)
  {
    v21 = 0;
    v269 = a2 + 1200;
    v270 = a2 + 1244;
    v267 = a2 + 1096;
    v268 = a2 + 1148;
    v265 = a2 + 780;
    v266 = a2 + 792;
    v263 = a2 + 1044;
    v264 = a2 + 568;
    v261 = a2 + 148;
    v262 = (BOOL *)(a2 + 172);
    v260 = a2 + 140;
    v22 = v9;
    do
    {
      v24 = *(_DWORD *)(a4 + 24);
      v23 = *(_DWORD *)(a4 + 28);
      v25 = v24 >> 21;
      v26 = v23 - 11;
      *(_DWORD *)(a4 + 28) = v23 - 11;
      if (v23 - 11 < 0)
      {
        v29 = *(_QWORD *)(a4 + 8);
        v28 = *(_QWORD *)(a4 + 16);
        v30 = *(unsigned int **)a4;
        if ((((_DWORD)v28 - *(_DWORD *)a4) & ~((uint64_t)(v28 - *(_QWORD *)a4) >> 63) & 0xFFFFFFFC) == 0
          || v29 > (unint64_t)v30)
        {
          v32 = 0;
          do
          {
            v33 = (unsigned __int8 *)v30 + v32;
            v34 = v24 << 8;
            *(_DWORD *)(a4 + 24) = v34;
            v35 = 255;
            if ((unint64_t)v30 + v32 < v28 && (unint64_t)v33 >= v29)
              v35 = *v33;
            v24 = v35 | v34;
            *(_DWORD *)(a4 + 24) = v24;
            ++v32;
          }
          while ((_DWORD)v32 != 4);
        }
        else
        {
          v24 = bswap32(*v30);
        }
        v37 = v23 + 21;
        v36 = v23 == -21;
        *(_DWORD *)(a4 + 28) = v23 + 21;
        *(_QWORD *)a4 = v30 + 1;
        v25 |= v24 >> (v23 + 21);
        if (v23 == -21)
          v27 = 0;
        else
          v27 = v24 << (11 - v23);
        if (v36)
          v26 = 0;
        else
          v26 = v37;
      }
      else
      {
        v27 = v24 << 11;
      }
      *(_DWORD *)(a4 + 24) = v27;
      *(_WORD *)(a2 + 4 + 2 * v21) = v25;
      switch(v25)
      {
        case 0u:
          v38 = a2 + 68;
          goto LABEL_118;
        case 1u:
          APAC::MetadataBitStreamParser::parseObjectSpread(a1, a2 + 116, a4);
          break;
        case 2u:
          v39 = *(_QWORD *)(a4 + 16);
          v40 = *(unsigned int **)a4;
          v41 = v39 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v41 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mGain";
            goto LABEL_385;
          }
          *(_DWORD *)(a4 + 28) = v26 - 32;
          if (v26 - 32 < 0)
          {
            v42 = v41 & ~(v41 >> 63) & 0xFFFFFFFC;
            v43 = *(_QWORD *)(a4 + 8);
            if (v42)
              v44 = v43 > (unint64_t)v40;
            else
              v44 = 1;
            if (v44)
            {
              v45 = 0;
              v193 = v27;
              do
              {
                v46 = (unsigned __int8 *)v40 + v45;
                v47 = v193 << 8;
                *(_DWORD *)(a4 + 24) = v47;
                v48 = 255;
                if ((unint64_t)v40 + v45 < v39 && (unint64_t)v46 >= v43)
                  v48 = *v46;
                v193 = v48 | v47;
                *(_DWORD *)(a4 + 24) = v193;
                ++v45;
              }
              while ((_DWORD)v45 != 4);
            }
            else
            {
              v193 = bswap32(*v40);
            }
            *(_QWORD *)a4 = v40 + 1;
            v27 |= v193 >> v26;
            v194 = v193 << -(char)v26;
            if (!v26)
              v194 = 0;
            *(_DWORD *)(a4 + 24) = v194;
            *(_DWORD *)(a4 + 28) = v26;
          }
          *(_DWORD *)(a2 + 132) = v27;
          break;
        case 3u:
          v49 = *(_QWORD *)(a4 + 16);
          v50 = *(unsigned int **)a4;
          v51 = v49 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v51 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mObjectDiffuse";
            goto LABEL_385;
          }
          *(_DWORD *)(a4 + 28) = v26 - 32;
          if (v26 - 32 < 0)
          {
            v52 = v51 & ~(v51 >> 63) & 0xFFFFFFFC;
            v53 = *(_QWORD *)(a4 + 8);
            if (v52)
              v54 = v53 > (unint64_t)v50;
            else
              v54 = 1;
            if (v54)
            {
              v55 = 0;
              v195 = v27;
              do
              {
                v56 = (unsigned __int8 *)v50 + v55;
                v57 = v195 << 8;
                *(_DWORD *)(a4 + 24) = v57;
                v58 = 255;
                if ((unint64_t)v50 + v55 < v49 && (unint64_t)v56 >= v53)
                  v58 = *v56;
                v195 = v58 | v57;
                *(_DWORD *)(a4 + 24) = v195;
                ++v55;
              }
              while ((_DWORD)v55 != 4);
            }
            else
            {
              v195 = bswap32(*v50);
            }
            *(_QWORD *)a4 = v50 + 1;
            v27 |= v195 >> v26;
            v196 = v195 << -(char)v26;
            if (!v26)
              v196 = 0;
            *(_DWORD *)(a4 + 24) = v196;
            *(_DWORD *)(a4 + 28) = v26;
          }
          *(_DWORD *)(a2 + 136) = v27;
          break;
        case 4u:
          APAC::MetadataBitStreamParser::parseObjectChannelLock(a1, v260, a4);
          break;
        case 5u:
          APAC::MetadataBitStreamParser::parseObjectDivergence(a1, v261, a4);
          break;
        case 6u:
          v59 = *(_QWORD *)(a4 + 16);
          v60 = *(unsigned int **)a4;
          v61 = v59 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v61 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mIsScreenSizeAdaptationEnabled";
            goto LABEL_385;
          }
          v62 = v27 >> 31;
          *(_DWORD *)(a4 + 28) = v26 - 1;
          if (v26 - 1 < 0)
          {
            v137 = v61 & ~(v61 >> 63) & 0xFFFFFFFC;
            v138 = *(_QWORD *)(a4 + 8);
            if (v137)
              v139 = v138 > (unint64_t)v60;
            else
              v139 = 1;
            if (v139)
            {
              v140 = 0;
              do
              {
                v141 = (unsigned __int8 *)v60 + v140;
                v142 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v142;
                v143 = 255;
                if ((unint64_t)v60 + v140 < v59 && (unint64_t)v141 >= v138)
                  v143 = *v141;
                v27 = v143 | v142;
                *(_DWORD *)(a4 + 24) = v27;
                ++v140;
              }
              while ((_DWORD)v140 != 4);
            }
            else
            {
              v27 = bswap32(*v60);
            }
            v203 = v27 << (1 - v26);
            v204 = v26 + 31;
            *(_DWORD *)(a4 + 28) = v204;
            *(_QWORD *)a4 = v60 + 1;
            v62 |= v27 >> v204;
            if (v204)
              v63 = v203;
            else
              v63 = 0;
          }
          else
          {
            v63 = 2 * v27;
          }
          *(_DWORD *)(a4 + 24) = v63;
          *(_BYTE *)(a2 + 168) = v62 != 0;
          break;
        case 7u:
          APAC::MetadataBitStreamParser::parseZoneExclusion(a1, v262, a4);
          break;
        case 8u:
          v64 = *(_QWORD *)(a4 + 16);
          v65 = *(unsigned int **)a4;
          v66 = v64 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v66 <= 2)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mBinauralizationPreset";
            goto LABEL_385;
          }
          v67 = v27 >> 29;
          *(_DWORD *)(a4 + 28) = v26 - 3;
          if (v26 - 3 < 0)
          {
            v144 = v66 & ~(v66 >> 63) & 0xFFFFFFFC;
            v145 = *(_QWORD *)(a4 + 8);
            if (v144)
              v146 = v145 > (unint64_t)v65;
            else
              v146 = 1;
            if (v146)
            {
              v147 = 0;
              do
              {
                v148 = (unsigned __int8 *)v65 + v147;
                v149 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v149;
                v150 = 255;
                if ((unint64_t)v65 + v147 < v64 && (unint64_t)v148 >= v145)
                  v150 = *v148;
                v27 = v150 | v149;
                *(_DWORD *)(a4 + 24) = v27;
                ++v147;
              }
              while ((_DWORD)v147 != 4);
            }
            else
            {
              v27 = bswap32(*v65);
            }
            v205 = v27 << (3 - v26);
            v206 = v26 + 29;
            *(_DWORD *)(a4 + 28) = v206;
            *(_QWORD *)a4 = v65 + 1;
            v67 |= v27 >> v206;
            if (v206)
              v68 = v205;
            else
              v68 = 0;
          }
          else
          {
            v68 = 8 * v27;
          }
          *(_DWORD *)(a4 + 24) = v68;
          *(_BYTE *)(a2 + 1037) = v67;
          break;
        case 9u:
          APAC::MetadataBitStreamParser::parseSceneReverb(a1, v264, a4);
          break;
        case 0xAu:
          APAC::MetadataBitStreamParser::parsePostProcReverb(a1, v265, a4);
          break;
        case 0xBu:
          APAC::MetadataBitStreamParser::parseRadiationPattern(a1, v266, a3, a4);
          break;
        case 0xCu:
          v69 = *(_QWORD *)(a4 + 16);
          v70 = *(unsigned int **)a4;
          v71 = v69 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v71 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mHPVirtualize.mBypass";
            goto LABEL_385;
          }
          v72 = v27 >> 31;
          v73 = v26 - 1;
          *(_DWORD *)(a4 + 28) = v26 - 1;
          if (v26 - 1 < 0)
          {
            v151 = *(_QWORD *)(a4 + 8);
            if ((v71 & ~(v71 >> 63) & 0xFFFFFFFC) == 0 || v151 > (unint64_t)v70)
            {
              v153 = 0;
              do
              {
                v154 = (unsigned __int8 *)v70 + v153;
                v155 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v155;
                v156 = 255;
                if ((unint64_t)v70 + v153 < v69 && (unint64_t)v154 >= v151)
                  v156 = *v154;
                v27 = v156 | v155;
                *(_DWORD *)(a4 + 24) = v27;
                ++v153;
              }
              while ((_DWORD)v153 != 4);
            }
            else
            {
              v27 = bswap32(*v70);
            }
            v208 = v26 + 31;
            v207 = v26 == -31;
            *(_DWORD *)(a4 + 28) = v26 + 31;
            *(_QWORD *)a4 = ++v70;
            v72 |= v27 >> (v26 + 31);
            if (v26 == -31)
              v74 = 0;
            else
              v74 = v27 << (1 - v26);
            if (v207)
              v73 = 0;
            else
              v73 = v208;
          }
          else
          {
            v74 = 2 * v27;
          }
          *(_DWORD *)(a4 + 24) = v74;
          *(_BYTE *)(a2 + 1024) = v72 != 0;
          if (v73 + 8 * ((int)v69 - (int)v70) <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mHPVirtualize.mHasDRR";
            goto LABEL_385;
          }
          v209 = v74 >> 31;
          v210 = v73 - 1;
          *(_DWORD *)(a4 + 28) = v73 - 1;
          if (v73 - 1 < 0)
          {
            v212 = *(_QWORD *)(a4 + 8);
            if ((((_DWORD)v69 - (_DWORD)v70) & ~((uint64_t)(v69 - (_QWORD)v70) >> 63) & 0xFFFFFFFC) != 0
              && v212 <= (unint64_t)v70)
            {
              v74 = bswap32(*v70);
            }
            else
            {
              v225 = 0;
              do
              {
                v226 = (unsigned __int8 *)v70 + v225;
                v227 = v74 << 8;
                *(_DWORD *)(a4 + 24) = v227;
                v228 = 255;
                if ((unint64_t)v70 + v225 < v69 && (unint64_t)v226 >= v212)
                  v228 = *v226;
                v74 = v228 | v227;
                *(_DWORD *)(a4 + 24) = v74;
                ++v225;
              }
              while ((_DWORD)v225 != 4);
            }
            v229 = v74 << (1 - v73);
            v230 = v73 + 31;
            *(_DWORD *)(a4 + 28) = v230;
            *(_QWORD *)a4 = ++v70;
            v209 |= v74 >> v230;
            if (v230)
              v211 = v229;
            else
              v211 = 0;
            if (v230)
              v210 = v230;
            else
              v210 = 0;
          }
          else
          {
            v211 = 2 * v74;
          }
          *(_DWORD *)(a4 + 24) = v211;
          *(_BYTE *)(a2 + 1025) = v209 != 0;
          if (!v209)
            break;
          if (v210 + 8 * ((int)v69 - (int)v70) <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mHPVirtualize.mDRR";
LABEL_385:
            *exception = v259;
            __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
          }
          *(_DWORD *)(a4 + 28) = v210 - 32;
          if (v210 - 32 < 0)
          {
            v231 = *(_QWORD *)(a4 + 8);
            if ((((_DWORD)v69 - (_DWORD)v70) & ~((uint64_t)(v69 - (_QWORD)v70) >> 63) & 0xFFFFFFFC) != 0
              && v231 <= (unint64_t)v70)
            {
              v232 = bswap32(*v70);
            }
            else
            {
              v248 = 0;
              v232 = v211;
              do
              {
                v249 = (unsigned __int8 *)v70 + v248;
                v250 = v232 << 8;
                *(_DWORD *)(a4 + 24) = v250;
                v251 = 255;
                if ((unint64_t)v70 + v248 < v69 && (unint64_t)v249 >= v231)
                  v251 = *v249;
                v232 = v251 | v250;
                *(_DWORD *)(a4 + 24) = v232;
                ++v248;
              }
              while ((_DWORD)v248 != 4);
            }
            *(_QWORD *)a4 = v70 + 1;
            v211 |= v232 >> v210;
            v252 = v232 << -(char)v210;
            if (!v210)
              v252 = 0;
            *(_DWORD *)(a4 + 24) = v252;
            *(_DWORD *)(a4 + 28) = v210;
          }
          *(_DWORD *)(a2 + 1028) = v211;
          break;
        case 0xDu:
          v75 = *(_QWORD *)(a4 + 16);
          v76 = *(unsigned int **)a4;
          v77 = v75 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v77 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mHeadLock.mHeadLocked";
            goto LABEL_385;
          }
          v78 = v27 >> 31;
          v79 = v26 - 1;
          *(_DWORD *)(a4 + 28) = v26 - 1;
          if (v26 - 1 < 0)
          {
            v157 = *(_QWORD *)(a4 + 8);
            if ((v77 & ~(v77 >> 63) & 0xFFFFFFFC) == 0 || v157 > (unint64_t)v76)
            {
              v159 = 0;
              do
              {
                v160 = (unsigned __int8 *)v76 + v159;
                v161 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v161;
                v162 = 255;
                if ((unint64_t)v76 + v159 < v75 && (unint64_t)v160 >= v157)
                  v162 = *v160;
                v27 = v162 | v161;
                *(_DWORD *)(a4 + 24) = v27;
                ++v159;
              }
              while ((_DWORD)v159 != 4);
            }
            else
            {
              v27 = bswap32(*v76);
            }
            v213 = v27 << (1 - v26);
            v214 = v26 + 31;
            *(_DWORD *)(a4 + 28) = v214;
            *(_QWORD *)a4 = ++v76;
            v78 |= v27 >> v214;
            if (v214)
              v80 = v213;
            else
              v80 = 0;
            if (v214)
              v79 = v214;
            else
              v79 = 0;
          }
          else
          {
            v80 = 2 * v27;
          }
          *(_DWORD *)(a4 + 24) = v80;
          *(_BYTE *)(a2 + 1032) = v78 != 0;
          if (v79 + 8 * ((int)v75 - (int)v76) <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mHeadLock.mIsExternalized";
            goto LABEL_385;
          }
          v215 = v80 >> 31;
          v216 = v79 - 1;
          *(_DWORD *)(a4 + 28) = v79 - 1;
          if (v79 - 1 < 0)
          {
            v218 = *(_QWORD *)(a4 + 8);
            if ((((_DWORD)v75 - (_DWORD)v76) & ~((uint64_t)(v75 - (_QWORD)v76) >> 63) & 0xFFFFFFFC) != 0
              && v218 <= (unint64_t)v76)
            {
              v80 = bswap32(*v76);
            }
            else
            {
              v233 = 0;
              do
              {
                v234 = (unsigned __int8 *)v76 + v233;
                v235 = v80 << 8;
                *(_DWORD *)(a4 + 24) = v235;
                v236 = 255;
                if ((unint64_t)v76 + v233 < v75 && (unint64_t)v234 >= v218)
                  v236 = *v234;
                v80 = v236 | v235;
                *(_DWORD *)(a4 + 24) = v80;
                ++v233;
              }
              while ((_DWORD)v233 != 4);
            }
            v238 = v79 + 31;
            v237 = v79 == -31;
            *(_DWORD *)(a4 + 28) = v79 + 31;
            *(_QWORD *)a4 = ++v76;
            v215 |= v80 >> (v79 + 31);
            if (v79 == -31)
              v217 = 0;
            else
              v217 = v80 << (1 - v79);
            if (v237)
              v216 = 0;
            else
              v216 = v238;
          }
          else
          {
            v217 = 2 * v80;
          }
          *(_DWORD *)(a4 + 24) = v217;
          *(_BYTE *)(a2 + 1033) = v215 != 0;
          if (v216 + 8 * ((int)v75 - (int)v76) <= 2)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mHeadLock.mReference";
            goto LABEL_385;
          }
          v239 = v217 >> 29;
          *(_DWORD *)(a4 + 28) = v216 - 3;
          if (v216 - 3 < 0)
          {
            v241 = *(_QWORD *)(a4 + 8);
            if ((((_DWORD)v75 - (_DWORD)v76) & ~((uint64_t)(v75 - (_QWORD)v76) >> 63) & 0xFFFFFFFC) != 0
              && v241 <= (unint64_t)v76)
            {
              v217 = bswap32(*v76);
            }
            else
            {
              v242 = 0;
              do
              {
                v243 = (unsigned __int8 *)v76 + v242;
                v244 = v217 << 8;
                *(_DWORD *)(a4 + 24) = v244;
                v245 = 255;
                if ((unint64_t)v76 + v242 < v75 && (unint64_t)v243 >= v241)
                  v245 = *v243;
                v217 = v245 | v244;
                *(_DWORD *)(a4 + 24) = v217;
                ++v242;
              }
              while ((_DWORD)v242 != 4);
            }
            v246 = v217 << (3 - v216);
            v247 = v216 + 29;
            *(_DWORD *)(a4 + 28) = v247;
            *(_QWORD *)a4 = v76 + 1;
            v239 |= v217 >> v247;
            if (v247)
              v240 = v246;
            else
              v240 = 0;
          }
          else
          {
            v240 = 8 * v217;
          }
          *(_DWORD *)(a4 + 24) = v240;
          *(_BYTE *)(a2 + 1034) = v239;
          break;
        case 0xEu:
          v81 = *(_QWORD *)(a4 + 16);
          v82 = *(unsigned int **)a4;
          v83 = v81 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v83 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mParallax";
            goto LABEL_385;
          }
          v84 = v27 >> 31;
          *(_DWORD *)(a4 + 28) = v26 - 1;
          if (v26 - 1 < 0)
          {
            v163 = v83 & ~(v83 >> 63) & 0xFFFFFFFC;
            v164 = *(_QWORD *)(a4 + 8);
            if (v163)
              v165 = v164 > (unint64_t)v82;
            else
              v165 = 1;
            if (v165)
            {
              v166 = 0;
              do
              {
                v167 = (unsigned __int8 *)v82 + v166;
                v168 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v168;
                v169 = 255;
                if ((unint64_t)v82 + v166 < v81 && (unint64_t)v167 >= v164)
                  v169 = *v167;
                v27 = v169 | v168;
                *(_DWORD *)(a4 + 24) = v27;
                ++v166;
              }
              while ((_DWORD)v166 != 4);
            }
            else
            {
              v27 = bswap32(*v82);
            }
            v219 = v27 << (1 - v26);
            v220 = v26 + 31;
            *(_DWORD *)(a4 + 28) = v220;
            *(_QWORD *)a4 = v82 + 1;
            v84 |= v27 >> v220;
            if (v220)
              v85 = v219;
            else
              v85 = 0;
          }
          else
          {
            v85 = 2 * v27;
          }
          *(_DWORD *)(a4 + 24) = v85;
          *(_BYTE *)(a2 + 1035) = v84 != 0;
          break;
        case 0xFu:
          v86 = *(_QWORD *)(a4 + 16);
          v87 = *(unsigned int **)a4;
          v88 = v86 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v88 <= 2)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mPreferredDoF.mDoFIndex";
            goto LABEL_385;
          }
          v89 = v27 >> 29;
          *(_DWORD *)(a4 + 28) = v26 - 3;
          if (v26 - 3 < 0)
          {
            v170 = v88 & ~(v88 >> 63) & 0xFFFFFFFC;
            v171 = *(_QWORD *)(a4 + 8);
            if (v170)
              v172 = v171 > (unint64_t)v87;
            else
              v172 = 1;
            if (v172)
            {
              v173 = 0;
              do
              {
                v174 = (unsigned __int8 *)v87 + v173;
                v175 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v175;
                v176 = 255;
                if ((unint64_t)v87 + v173 < v86 && (unint64_t)v174 >= v171)
                  v176 = *v174;
                v27 = v176 | v175;
                *(_DWORD *)(a4 + 24) = v27;
                ++v173;
              }
              while ((_DWORD)v173 != 4);
            }
            else
            {
              v27 = bswap32(*v87);
            }
            v221 = v27 << (3 - v26);
            v222 = v26 + 29;
            *(_DWORD *)(a4 + 28) = v222;
            *(_QWORD *)a4 = v87 + 1;
            v89 |= v27 >> v222;
            if (v222)
              v90 = v221;
            else
              v90 = 0;
          }
          else
          {
            v90 = 8 * v27;
          }
          *(_DWORD *)(a4 + 24) = v90;
          *(_BYTE *)(a2 + 1036) = v89;
          break;
        case 0x10u:
          v91 = *(_QWORD *)(a4 + 16);
          v92 = *(unsigned int **)a4;
          v93 = v91 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v93 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mFieldOfView.mAzimuth";
            goto LABEL_385;
          }
          *(_DWORD *)(a4 + 28) = v26 - 32;
          if (v26 - 32 < 0)
          {
            v94 = v93 & ~(v93 >> 63) & 0xFFFFFFFC;
            v95 = *(_QWORD *)(a4 + 8);
            if (v94)
              v96 = v95 > (unint64_t)v92;
            else
              v96 = 1;
            if (v96)
            {
              v97 = 0;
              v197 = v27;
              do
              {
                v98 = (unsigned __int8 *)v92 + v97;
                v99 = v197 << 8;
                *(_DWORD *)(a4 + 24) = v99;
                v100 = 255;
                if ((unint64_t)v92 + v97 < v91 && (unint64_t)v98 >= v95)
                  v100 = *v98;
                v197 = v100 | v99;
                *(_DWORD *)(a4 + 24) = v197;
                ++v97;
              }
              while ((_DWORD)v97 != 4);
            }
            else
            {
              v197 = bswap32(*v92);
            }
            *(_QWORD *)a4 = v92 + 1;
            v27 |= v197 >> v26;
            v198 = v197 << -(char)v26;
            if (!v26)
              v198 = 0;
            *(_DWORD *)(a4 + 24) = v198;
            *(_DWORD *)(a4 + 28) = v26;
          }
          *(_DWORD *)(a2 + 1040) = v27;
          break;
        case 0x11u:
          APAC::MetadataBitStreamParser::parseMaskingZone(a1, v263, a4);
          break;
        case 0x12u:
          v38 = v267;
          goto LABEL_118;
        case 0x13u:
          v101 = *(_QWORD *)(a4 + 16);
          v102 = *(unsigned int **)a4;
          v103 = v101 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v103 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mHOA_Radius";
            goto LABEL_385;
          }
          *(_DWORD *)(a4 + 28) = v26 - 32;
          if (v26 - 32 < 0)
          {
            v104 = v103 & ~(v103 >> 63) & 0xFFFFFFFC;
            v105 = *(_QWORD *)(a4 + 8);
            if (v104)
              v106 = v105 > (unint64_t)v102;
            else
              v106 = 1;
            if (v106)
            {
              v107 = 0;
              v199 = v27;
              do
              {
                v108 = (unsigned __int8 *)v102 + v107;
                v109 = v199 << 8;
                *(_DWORD *)(a4 + 24) = v109;
                v110 = 255;
                if ((unint64_t)v102 + v107 < v101 && (unint64_t)v108 >= v105)
                  v110 = *v108;
                v199 = v110 | v109;
                *(_DWORD *)(a4 + 24) = v199;
                ++v107;
              }
              while ((_DWORD)v107 != 4);
            }
            else
            {
              v199 = bswap32(*v102);
            }
            *(_QWORD *)a4 = v102 + 1;
            v27 |= v199 >> v26;
            v200 = v199 << -(char)v26;
            if (!v26)
              v200 = 0;
            *(_DWORD *)(a4 + 24) = v200;
            *(_DWORD *)(a4 + 28) = v26;
          }
          *(_DWORD *)(a2 + 1144) = v27;
          break;
        case 0x14u:
          v38 = v268;
LABEL_118:
          a1 = APAC::MetadataBitStreamParser::parsePosition(a1, v38, a4);
          break;
        case 0x15u:
          v111 = *(_QWORD *)(a4 + 16);
          v112 = *(unsigned int **)a4;
          v113 = v111 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v113 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mHOA_InteriorOrExterior";
            goto LABEL_385;
          }
          v114 = v27 >> 31;
          *(_DWORD *)(a4 + 28) = v26 - 1;
          if (v26 - 1 < 0)
          {
            v177 = v113 & ~(v113 >> 63) & 0xFFFFFFFC;
            v178 = *(_QWORD *)(a4 + 8);
            if (v177)
              v179 = v178 > (unint64_t)v112;
            else
              v179 = 1;
            if (v179)
            {
              v180 = 0;
              do
              {
                v181 = (unsigned __int8 *)v112 + v180;
                v182 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v182;
                v183 = 255;
                if ((unint64_t)v112 + v180 < v111 && (unint64_t)v181 >= v178)
                  v183 = *v181;
                v27 = v183 | v182;
                *(_DWORD *)(a4 + 24) = v27;
                ++v180;
              }
              while ((_DWORD)v180 != 4);
            }
            else
            {
              v27 = bswap32(*v112);
            }
            v223 = v27 << (1 - v26);
            v224 = v26 + 31;
            *(_DWORD *)(a4 + 28) = v224;
            *(_QWORD *)a4 = v112 + 1;
            v114 |= v27 >> v224;
            if (v224)
              v115 = v223;
            else
              v115 = 0;
          }
          else
          {
            v115 = 2 * v27;
          }
          *(_DWORD *)(a4 + 24) = v115;
          *(_BYTE *)(a2 + 1196) = v114 != 0;
          break;
        case 0x16u:
          APAC::MetadataBitStreamParser::parseHOARenderingMatrix(a1, v269, a3, a4);
          break;
        case 0x17u:
          v116 = *(_QWORD *)(a4 + 16);
          v117 = *(unsigned int **)a4;
          v118 = v116 - *(_QWORD *)a4;
          if (v26 + 8 * (int)v118 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v259 = "Cannot read rData.mNFCRefDist";
            goto LABEL_385;
          }
          *(_DWORD *)(a4 + 28) = v26 - 32;
          if (v26 - 32 < 0)
          {
            v119 = v118 & ~(v118 >> 63) & 0xFFFFFFFC;
            v120 = *(_QWORD *)(a4 + 8);
            if (v119)
              v121 = v120 > (unint64_t)v117;
            else
              v121 = 1;
            if (v121)
            {
              v122 = 0;
              v201 = v27;
              do
              {
                v123 = (unsigned __int8 *)v117 + v122;
                v124 = v201 << 8;
                *(_DWORD *)(a4 + 24) = v124;
                v125 = 255;
                if ((unint64_t)v117 + v122 < v116 && (unint64_t)v123 >= v120)
                  v125 = *v123;
                v201 = v125 | v124;
                *(_DWORD *)(a4 + 24) = v201;
                ++v122;
              }
              while ((_DWORD)v122 != 4);
            }
            else
            {
              v201 = bswap32(*v117);
            }
            *(_QWORD *)a4 = v117 + 1;
            v27 |= v201 >> v26;
            v202 = v201 << -(char)v26;
            if (!v26)
              v202 = 0;
            *(_DWORD *)(a4 + 24) = v202;
            *(_DWORD *)(a4 + 28) = v26;
          }
          *(_DWORD *)(a2 + 1240) = v27;
          break;
        case 0x18u:
          APAC::MetadataBitStreamParser::parsePropagationDelay(a1, v270, a4);
          break;
        default:
          v126 = v27 >> 15;
          v127 = v26 - 17;
          *(_DWORD *)(a4 + 28) = v26 - 17;
          if (v26 - 17 < 0)
          {
            v130 = *(_QWORD *)(a4 + 8);
            v129 = *(_QWORD *)(a4 + 16);
            v131 = *(unsigned int **)a4;
            if ((((_DWORD)v129 - *(_DWORD *)a4) & ~((uint64_t)(v129 - *(_QWORD *)a4) >> 63) & 0xFFFFFFFC) == 0
              || v130 > (unint64_t)v131)
            {
              v133 = 0;
              do
              {
                v134 = (unsigned __int8 *)v131 + v133;
                v135 = v27 << 8;
                *(_DWORD *)(a4 + 24) = v135;
                v136 = 255;
                if ((unint64_t)v131 + v133 < v129 && (unint64_t)v134 >= v130)
                  v136 = *v134;
                v27 = v136 | v135;
                *(_DWORD *)(a4 + 24) = v27;
                ++v133;
              }
              while ((_DWORD)v133 != 4);
            }
            else
            {
              v27 = bswap32(*v131);
            }
            v185 = v26 + 15;
            v184 = v26 == -15;
            *(_DWORD *)(a4 + 28) = v26 + 15;
            *(_QWORD *)a4 = v131 + 1;
            v126 |= v27 >> (v26 + 15);
            if (v26 == -15)
              v128 = 0;
            else
              v128 = v27 << (17 - v26);
            if (v184)
              v127 = 0;
            else
              v127 = v185;
          }
          else
          {
            v128 = v27 << 17;
          }
          *(_DWORD *)(a4 + 24) = v128;
          v186 = 8 * v126 + 8;
          v187 = v186 - v127;
          if (v186 > v127)
          {
            *(_QWORD *)(a4 + 24) = 0;
            v128 = 0;
            v127 = 0;
            if (v187 >= 0x20)
            {
              *(_QWORD *)a4 += (v187 >> 3) & 0x1FFFFFFC;
              v186 = v187 & 0x1F;
            }
            else
            {
              v186 = v187;
            }
          }
          if ((v186 - 33) >= 0xFFFFFFE0)
          {
            v188 = v127 - v186;
            *(_DWORD *)(a4 + 28) = v127 - v186;
            if (v127 - v186 < 0)
            {
              v191 = *(_QWORD *)(a4 + 8);
              v190 = *(_QWORD *)(a4 + 16);
              v192 = *(unsigned int **)a4;
              if ((((_DWORD)v190 - *(_DWORD *)a4) & ~((uint64_t)(v190 - *(_QWORD *)a4) >> 63) & 0xFFFFFFFC) != 0
                && v191 <= (unint64_t)v192)
              {
                v128 = bswap32(*v192);
              }
              else
              {
                v253 = 0;
                do
                {
                  v254 = (unsigned __int8 *)v192 + v253;
                  v255 = v128 << 8;
                  *(_DWORD *)(a4 + 24) = v255;
                  v256 = 255;
                  if ((unint64_t)v192 + v253 < v190 && (unint64_t)v254 >= v191)
                    v256 = *v254;
                  v128 = v256 | v255;
                  *(_DWORD *)(a4 + 24) = v128;
                  ++v253;
                }
                while ((_DWORD)v253 != 4);
              }
              v189 = v128 << -(char)v188;
              v257 = v188 + 32;
              *(_DWORD *)(a4 + 28) = v257;
              *(_QWORD *)a4 = v192 + 1;
              if (!v257)
                v189 = 0;
            }
            else
            {
              v189 = v128 << v186;
            }
            *(_DWORD *)(a4 + 24) = v189;
          }
          break;
      }
      ++v21;
    }
    while (v21 != v22);
  }
}

unint64_t APAC::MetadataBitStreamParser::parsePosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 Bit;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int *v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int v33;
  unsigned int *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  int v54;
  int v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unint64_t result;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  unsigned int *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  _QWORD *exception;
  const char *v76;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v76 = "Cannot read pos.mPositionPresent";
    goto LABEL_98;
  }
  v9 = *(_DWORD *)(a3 + 24);
  v10 = v9 >> 31;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v12 = v5 & ~(v5 >> 63) & 0xFFFFFFFC;
    v13 = *(_QWORD *)(a3 + 8);
    if (v12)
      v14 = v13 > (unint64_t)v4;
    else
      v14 = 1;
    if (v14)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v4 + v15;
        v17 = v9 << 8;
        *(_DWORD *)(a3 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v4 + v15 < v3 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v9 = v18 | v17;
        *(_DWORD *)(a3 + 24) = v9;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v9 = bswap32(*v4);
    }
    v19 = v9 << (1 - v6);
    v20 = v6 + 31;
    *(_DWORD *)(a3 + 28) = v20;
    *(_QWORD *)a3 = v4 + 1;
    v10 |= v9 >> v20;
    if (v20)
      v11 = v19;
    else
      v11 = 0;
  }
  else
  {
    v11 = 2 * v9;
  }
  *(_DWORD *)(a3 + 24) = v11;
  *(_BYTE *)a2 = v10 != 0;
  if (v10)
  {
    Bit = AT::TBitstreamReader<unsigned int>::GetBit(a3);
    *(_BYTE *)(a2 + 1) = Bit;
    v22 = *(_QWORD *)(a3 + 16);
    if (Bit)
    {
      v23 = 0;
      v25 = *(_DWORD *)(a3 + 24);
      v24 = *(_DWORD *)(a3 + 28);
      v26 = *(unsigned int **)a3;
      v27 = *(_QWORD *)(a3 + 8);
      while (v24 + 8 * ((int)v22 - (int)v26) > 31)
      {
        *(_DWORD *)(a3 + 28) = v24 - 32;
        if (v24 - 32 < 0)
        {
          if ((((_DWORD)v22 - (_DWORD)v26) & ~((uint64_t)(v22 - (_QWORD)v26) >> 63) & 0xFFFFFFFC) != 0
            && v27 <= (unint64_t)v26)
          {
            v29 = bswap32(*v26);
          }
          else
          {
            v30 = 0;
            v29 = v25;
            do
            {
              v31 = (unsigned __int8 *)v26 + v30;
              v32 = v29 << 8;
              *(_DWORD *)(a3 + 24) = v32;
              v33 = 255;
              if ((unint64_t)v26 + v30 < v22 && (unint64_t)v31 >= v27)
                v33 = *v31;
              v29 = v33 | v32;
              *(_DWORD *)(a3 + 24) = v29;
              ++v30;
            }
            while ((_DWORD)v30 != 4);
          }
          *(_QWORD *)a3 = ++v26;
          v28 = (v29 >> v24) | v25;
          v25 = v29 << -(char)v24;
          if (!v24)
            v25 = 0;
          *(_DWORD *)(a3 + 24) = v25;
          *(_DWORD *)(a3 + 28) = v24;
        }
        else
        {
          v24 -= 32;
          v28 = v25;
        }
        *(_DWORD *)(a2 + 20 + 4 * v23++) = v28;
        if (v23 == 3)
          goto LABEL_78;
      }
      exception = __cxa_allocate_exception(8uLL);
      v76 = "Cannot read pos.mCoordinate[n]";
LABEL_98:
      *exception = v76;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    v34 = *(unsigned int **)a3;
    v35 = v22 - *(_QWORD *)a3;
    v36 = *(_DWORD *)(a3 + 28);
    if (v36 + 8 * (int)v35 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v76 = "Cannot read pos.mAzimuth";
      goto LABEL_98;
    }
    v37 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 28) = v36 - 32;
    if (v36 - 32 < 0)
    {
      v40 = v35 & ~(v35 >> 63);
      v41 = *(_QWORD *)(a3 + 8);
      if ((v40 & 0xFFFFFFFC) != 0 && v41 <= (unint64_t)v34)
      {
        v42 = bswap32(*v34);
      }
      else
      {
        v43 = 0;
        v42 = v37;
        do
        {
          v44 = (unsigned __int8 *)v34 + v43;
          v45 = v42 << 8;
          *(_DWORD *)(a3 + 24) = v45;
          v46 = 255;
          if ((unint64_t)v34 + v43 < v22 && (unint64_t)v44 >= v41)
            v46 = *v44;
          v42 = v46 | v45;
          *(_DWORD *)(a3 + 24) = v42;
          ++v43;
        }
        while ((_DWORD)v43 != 4);
      }
      *(_QWORD *)a3 = ++v34;
      v39 = (v42 >> v36) | v37;
      v37 = v42 << -(char)v36;
      if (!v36)
        v37 = 0;
      *(_DWORD *)(a3 + 24) = v37;
      *(_DWORD *)(a3 + 28) = v36;
      v35 = v22 - (_QWORD)v34;
      v38 = 8 * (v22 - (_DWORD)v34);
    }
    else
    {
      v38 = 8 * v35;
      v36 -= 32;
      v39 = v37;
    }
    *(_DWORD *)(a2 + 4) = v39;
    if (v38 + v36 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v76 = "Cannot read pos.mElevation";
      goto LABEL_98;
    }
    *(_DWORD *)(a3 + 28) = v36 - 32;
    if (v36 - 32 < 0)
    {
      v48 = v35 & ~(v35 >> 63);
      v49 = *(_QWORD *)(a3 + 8);
      if ((v48 & 0xFFFFFFFC) != 0 && v49 <= (unint64_t)v34)
      {
        v50 = bswap32(*v34);
      }
      else
      {
        v51 = 0;
        v50 = v37;
        do
        {
          v52 = (unsigned __int8 *)v34 + v51;
          v53 = v50 << 8;
          *(_DWORD *)(a3 + 24) = v53;
          v54 = 255;
          if ((unint64_t)v34 + v51 < v22 && (unint64_t)v52 >= v49)
            v54 = *v52;
          v50 = v54 | v53;
          *(_DWORD *)(a3 + 24) = v50;
          ++v51;
        }
        while ((_DWORD)v51 != 4);
      }
      *(_QWORD *)a3 = ++v34;
      v47 = (v50 >> v36) | v37;
      v37 = v50 << -(char)v36;
      if (!v36)
        v37 = 0;
      *(_DWORD *)(a3 + 24) = v37;
      *(_DWORD *)(a3 + 28) = v36;
      v35 = v22 - (_QWORD)v34;
      v38 = 8 * (v22 - (_DWORD)v34);
    }
    else
    {
      v36 -= 32;
      v47 = v37;
    }
    *(_DWORD *)(a2 + 8) = v47;
    if (v38 + v36 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v76 = "Cannot read pos.mRadius";
      goto LABEL_98;
    }
    *(_DWORD *)(a3 + 28) = v36 - 32;
    if (v36 - 32 < 0)
    {
      v55 = v35 & ~(v35 >> 63);
      v56 = *(_QWORD *)(a3 + 8);
      if ((v55 & 0xFFFFFFFC) != 0 && v56 <= (unint64_t)v34)
      {
        v57 = bswap32(*v34);
      }
      else
      {
        v58 = 0;
        v57 = v37;
        do
        {
          v59 = (unsigned __int8 *)v34 + v58;
          v60 = v57 << 8;
          *(_DWORD *)(a3 + 24) = v60;
          v61 = 255;
          if ((unint64_t)v34 + v58 < v22 && (unint64_t)v59 >= v56)
            v61 = *v59;
          v57 = v61 | v60;
          *(_DWORD *)(a3 + 24) = v57;
          ++v58;
        }
        while ((_DWORD)v58 != 4);
      }
      *(_QWORD *)a3 = v34 + 1;
      v37 |= v57 >> v36;
      v62 = v57 << -(char)v36;
      if (!v36)
        v62 = 0;
      *(_DWORD *)(a3 + 24) = v62;
      *(_DWORD *)(a3 + 28) = v36;
    }
    *(_DWORD *)(a2 + 12) = v37;
  }
LABEL_78:
  result = AT::TBitstreamReader<unsigned int>::GetBit(a3);
  *(_BYTE *)(a2 + 16) = result;
  if ((_DWORD)result)
  {
    v64 = 0;
    v66 = *(_QWORD *)(a3 + 8);
    v65 = *(_QWORD *)(a3 + 16);
    v68 = *(_DWORD *)(a3 + 24);
    v67 = *(_DWORD *)(a3 + 28);
    v69 = *(unsigned int **)a3;
    while (v67 + 8 * ((int)v65 - (int)v69) > 31)
    {
      *(_DWORD *)(a3 + 28) = v67 - 32;
      if (v67 - 32 < 0)
      {
        if ((((_DWORD)v65 - (_DWORD)v69) & ~((uint64_t)(v65 - (_QWORD)v69) >> 63) & 0xFFFFFFFC) != 0
          && v66 <= (unint64_t)v69)
        {
          v71 = bswap32(*v69);
        }
        else
        {
          v72 = 0;
          v71 = v68;
          do
          {
            result = (unint64_t)v69 + v72;
            v73 = v71 << 8;
            *(_DWORD *)(a3 + 24) = v73;
            v74 = 255;
            if ((unint64_t)v69 + v72 < v65 && result >= v66)
              v74 = *(unsigned __int8 *)result;
            v71 = v74 | v73;
            *(_DWORD *)(a3 + 24) = v71;
            ++v72;
          }
          while ((_DWORD)v72 != 4);
        }
        *(_QWORD *)a3 = ++v69;
        v70 = (v71 >> v67) | v68;
        v68 = v71 << -(char)v67;
        if (!v67)
          v68 = 0;
        *(_DWORD *)(a3 + 24) = v68;
        *(_DWORD *)(a3 + 28) = v67;
      }
      else
      {
        v67 -= 32;
        v70 = v68;
      }
      *(_DWORD *)(a2 + 32 + 4 * v64++) = v70;
      if (v64 == 4)
        return result;
    }
    exception = __cxa_allocate_exception(8uLL);
    v76 = "Cannot read pos.mQuaternion[n]";
    goto LABEL_98;
  }
  return result;
}

void APAC::MetadataBitStreamParser::parseObjectSpread(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  int v42;
  BOOL v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  _QWORD *exception;
  const char *v53;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v53 = "Cannot read spread.mIsCartesian";
    goto LABEL_86;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v6 + 31;
    v17 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> (v6 + 31);
    if (v6 == -31)
      v10 = 0;
    else
      v10 = v7 << (1 - v6);
    if (v17)
      v9 = 0;
    else
      v9 = v18;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8 != 0;
  v19 = v3 - (_QWORD)v4;
  if (v9 + 8 * ((int)v3 - (int)v4) <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v53 = "Cannot read spread.mWidth";
    goto LABEL_86;
  }
  *(_DWORD *)(a3 + 28) = v9 - 32;
  if (v9 - 32 < 0)
  {
    v22 = *(_QWORD *)(a3 + 8);
    if ((v19 & ~(v19 >> 63) & 0xFFFFFFFC) != 0 && v22 <= (unint64_t)v4)
    {
      v23 = bswap32(*v4);
    }
    else
    {
      v24 = 0;
      v23 = v10;
      do
      {
        v25 = (unsigned __int8 *)v4 + v24;
        v26 = v23 << 8;
        *(_DWORD *)(a3 + 24) = v26;
        v27 = 255;
        if ((unint64_t)v4 + v24 < v3 && (unint64_t)v25 >= v22)
          v27 = *v25;
        v23 = v27 | v26;
        *(_DWORD *)(a3 + 24) = v23;
        ++v24;
      }
      while ((_DWORD)v24 != 4);
    }
    *(_QWORD *)a3 = ++v4;
    v21 = (v23 >> v9) | v10;
    v10 = v23 << -(char)v9;
    if (!v9)
      v10 = 0;
    *(_DWORD *)(a3 + 24) = v10;
    *(_DWORD *)(a3 + 28) = v9;
    v19 = v3 - (_QWORD)v4;
    v20 = 8 * (v3 - (_DWORD)v4);
  }
  else
  {
    v20 = 8 * v19;
    v9 -= 32;
    v21 = v10;
  }
  *(_DWORD *)(a2 + 4) = v21;
  if (v20 + v9 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v53 = "Cannot read spread.mHeight";
    goto LABEL_86;
  }
  *(_DWORD *)(a3 + 28) = v9 - 32;
  if (v9 - 32 < 0)
  {
    v29 = *(_QWORD *)(a3 + 8);
    if ((v19 & ~(v19 >> 63) & 0xFFFFFFFC) != 0 && v29 <= (unint64_t)v4)
    {
      v30 = bswap32(*v4);
    }
    else
    {
      v31 = 0;
      v30 = v10;
      do
      {
        v32 = (unsigned __int8 *)v4 + v31;
        v33 = v30 << 8;
        *(_DWORD *)(a3 + 24) = v33;
        v34 = 255;
        if ((unint64_t)v4 + v31 < v3 && (unint64_t)v32 >= v29)
          v34 = *v32;
        v30 = v34 | v33;
        *(_DWORD *)(a3 + 24) = v30;
        ++v31;
      }
      while ((_DWORD)v31 != 4);
    }
    *(_QWORD *)a3 = ++v4;
    v28 = (v30 >> v9) | v10;
    v10 = v30 << -(char)v9;
    if (!v9)
      v10 = 0;
    *(_DWORD *)(a3 + 24) = v10;
    *(_DWORD *)(a3 + 28) = v9;
    v19 = v3 - (_QWORD)v4;
    v20 = 8 * (v3 - (_DWORD)v4);
  }
  else
  {
    v9 -= 32;
    v28 = v10;
  }
  *(_DWORD *)(a2 + 8) = v28;
  if ((v20 + v9 < 0) ^ __OFADD__(v20, v9) | (v20 + v9 == 0))
  {
    exception = __cxa_allocate_exception(8uLL);
    v53 = "Cannot read spread.mHasDepth";
    goto LABEL_86;
  }
  v35 = v10 >> 31;
  v36 = v9 - 1;
  *(_DWORD *)(a3 + 28) = v9 - 1;
  if (v9 - 1 < 0)
  {
    v38 = *(_QWORD *)(a3 + 8);
    if ((v19 & ~(v19 >> 63) & 0xFFFFFFFC) != 0 && v38 <= (unint64_t)v4)
    {
      v10 = bswap32(*v4);
    }
    else
    {
      v39 = 0;
      do
      {
        v40 = (unsigned __int8 *)v4 + v39;
        v41 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v41;
        v42 = 255;
        if ((unint64_t)v4 + v39 < v3 && (unint64_t)v40 >= v38)
          v42 = *v40;
        v10 = v42 | v41;
        *(_DWORD *)(a3 + 24) = v10;
        ++v39;
      }
      while ((_DWORD)v39 != 4);
    }
    v44 = v9 + 31;
    v43 = v9 == -31;
    *(_DWORD *)(a3 + 28) = v9 + 31;
    *(_QWORD *)a3 = ++v4;
    v35 |= v10 >> (v9 + 31);
    if (v9 == -31)
      v37 = 0;
    else
      v37 = v10 << (1 - v9);
    if (v43)
      v36 = 0;
    else
      v36 = v44;
  }
  else
  {
    v37 = 2 * v10;
  }
  *(_DWORD *)(a3 + 24) = v37;
  *(_BYTE *)(a2 + 1) = v35 != 0;
  if (v35)
  {
    if (v36 + 8 * ((int)v3 - (int)v4) > 31)
    {
      *(_DWORD *)(a3 + 28) = v36 - 32;
      if (v36 - 32 < 0)
      {
        v45 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v45 <= (unint64_t)v4)
        {
          v46 = bswap32(*v4);
        }
        else
        {
          v47 = 0;
          v46 = v37;
          do
          {
            v48 = (unsigned __int8 *)v4 + v47;
            v49 = v46 << 8;
            *(_DWORD *)(a3 + 24) = v49;
            v50 = 255;
            if ((unint64_t)v4 + v47 < v3 && (unint64_t)v48 >= v45)
              v50 = *v48;
            v46 = v50 | v49;
            *(_DWORD *)(a3 + 24) = v46;
            ++v47;
          }
          while ((_DWORD)v47 != 4);
        }
        *(_QWORD *)a3 = v4 + 1;
        v37 |= v46 >> v36;
        v51 = v46 << -(char)v36;
        if (!v36)
          v51 = 0;
        *(_DWORD *)(a3 + 24) = v51;
        *(_DWORD *)(a3 + 28) = v36;
      }
      *(_DWORD *)(a2 + 12) = v37;
      return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v53 = "Cannot read spread.mDepth";
LABEL_86:
    *exception = v53;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

void APAC::MetadataBitStreamParser::parseObjectChannelLock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  _QWORD *exception;
  const char *v27;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v27 = "Cannot read chLock.mHasMaxDistance";
    goto LABEL_38;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v6 + 31;
    v17 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> (v6 + 31);
    if (v6 == -31)
      v10 = 0;
    else
      v10 = v7 << (1 - v6);
    if (v17)
      v9 = 0;
    else
      v9 = v18;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)(a2 + 1) = v8 != 0;
  if (v8)
  {
    if (v9 + 8 * ((int)v3 - (int)v4) > 31)
    {
      *(_DWORD *)(a3 + 28) = v9 - 32;
      if (v9 - 32 < 0)
      {
        v19 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v19 <= (unint64_t)v4)
        {
          v20 = bswap32(*v4);
        }
        else
        {
          v21 = 0;
          v20 = v10;
          do
          {
            v22 = (unsigned __int8 *)v4 + v21;
            v23 = v20 << 8;
            *(_DWORD *)(a3 + 24) = v23;
            v24 = 255;
            if ((unint64_t)v4 + v21 < v3 && (unint64_t)v22 >= v19)
              v24 = *v22;
            v20 = v24 | v23;
            *(_DWORD *)(a3 + 24) = v20;
            ++v21;
          }
          while ((_DWORD)v21 != 4);
        }
        *(_QWORD *)a3 = v4 + 1;
        v10 |= v20 >> v9;
        v25 = v20 << -(char)v9;
        if (!v9)
          v25 = 0;
        *(_DWORD *)(a3 + 24) = v25;
        *(_DWORD *)(a3 + 28) = v9;
      }
      *(_DWORD *)(a2 + 4) = v10;
      return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v27 = "Cannot read chLock.mMaxDistance";
LABEL_38:
    *exception = v27;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

void APAC::MetadataBitStreamParser::parseObjectDivergence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  _QWORD *exception;
  const char *v47;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v47 = "Cannot read objDiv.mDivergence";
    goto LABEL_69;
  }
  v7 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a3 + 28) = v6 - 32;
  if (v6 - 32 < 0)
  {
    v10 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v10 > (unint64_t)v4)
    {
      v12 = 0;
      v16 = v7;
      do
      {
        v13 = (unsigned __int8 *)v4 + v12;
        v14 = v16 << 8;
        *(_DWORD *)(a3 + 24) = v14;
        v15 = 255;
        if ((unint64_t)v4 + v12 < v3 && (unint64_t)v13 >= v10)
          v15 = *v13;
        v16 = v15 | v14;
        *(_DWORD *)(a3 + 24) = v16;
        ++v12;
      }
      while ((_DWORD)v12 != 4);
    }
    else
    {
      v16 = bswap32(*v4);
    }
    *(_QWORD *)a3 = ++v4;
    v9 = (v16 >> v6) | v7;
    v7 = v16 << -(char)v6;
    if (!v6)
      v7 = 0;
    *(_DWORD *)(a3 + 24) = v7;
    *(_DWORD *)(a3 + 28) = v6;
    v5 = v3 - (_QWORD)v4;
    v8 = 8 * (v3 - (_DWORD)v4);
  }
  else
  {
    v8 = 8 * v5;
    v6 -= 32;
    v9 = v7;
  }
  *(_DWORD *)a2 = v9;
  if ((v8 + v6 < 0) ^ __OFADD__(v8, v6) | (v8 + v6 == 0))
  {
    exception = __cxa_allocate_exception(8uLL);
    v47 = "Cannot read objDiv.mIsCartesian";
    goto LABEL_69;
  }
  v17 = v7 >> 31;
  v18 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v20 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v20 > (unint64_t)v4)
    {
      v22 = 0;
      do
      {
        v23 = (unsigned __int8 *)v4 + v22;
        v24 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v24;
        v25 = 255;
        if ((unint64_t)v4 + v22 < v3 && (unint64_t)v23 >= v20)
          v25 = *v23;
        v7 = v25 | v24;
        *(_DWORD *)(a3 + 24) = v7;
        ++v22;
      }
      while ((_DWORD)v22 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v27 = v6 + 31;
    v26 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v17 |= v7 >> (v6 + 31);
    if (v6 == -31)
      v19 = 0;
    else
      v19 = v7 << (1 - v6);
    if (v26)
      v18 = 0;
    else
      v18 = v27;
  }
  else
  {
    v19 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v19;
  *(_BYTE *)(a2 + 4) = v17 != 0;
  v28 = v3 - (_QWORD)v4;
  v29 = v18 + 8 * (v3 - (_DWORD)v4);
  if (v17)
  {
    if (v29 > 31)
    {
      *(_DWORD *)(a3 + 28) = v18 - 32;
      if (v18 - 32 < 0)
      {
        v30 = v28 & ~(v28 >> 63);
        v31 = *(_QWORD *)(a3 + 8);
        if ((v30 & 0xFFFFFFFC) != 0 && v31 <= (unint64_t)v4)
        {
          v32 = bswap32(*v4);
        }
        else
        {
          v36 = 0;
          v32 = v19;
          do
          {
            v37 = (unsigned __int8 *)v4 + v36;
            v38 = v32 << 8;
            *(_DWORD *)(a3 + 24) = v38;
            v39 = 255;
            if ((unint64_t)v4 + v36 < v3 && (unint64_t)v37 >= v31)
              v39 = *v37;
            v32 = v39 | v38;
            *(_DWORD *)(a3 + 24) = v32;
            ++v36;
          }
          while ((_DWORD)v36 != 4);
        }
        *(_QWORD *)a3 = v4 + 1;
        v19 |= v32 >> v18;
        v40 = v32 << -(char)v18;
        if (!v18)
          v40 = 0;
        *(_DWORD *)(a3 + 24) = v40;
        *(_DWORD *)(a3 + 28) = v18;
      }
      *(_DWORD *)(a2 + 12) = v19;
      return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v47 = "Cannot read objDiv.mPositionRange";
LABEL_69:
    *exception = v47;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  if (v29 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v47 = "Cannot read objDiv.mAzimuthRange";
    goto LABEL_69;
  }
  *(_DWORD *)(a3 + 28) = v18 - 32;
  if (v18 - 32 < 0)
  {
    v33 = v28 & ~(v28 >> 63);
    v34 = *(_QWORD *)(a3 + 8);
    if ((v33 & 0xFFFFFFFC) != 0 && v34 <= (unint64_t)v4)
    {
      v35 = bswap32(*v4);
    }
    else
    {
      v41 = 0;
      v35 = v19;
      do
      {
        v42 = (unsigned __int8 *)v4 + v41;
        v43 = v35 << 8;
        *(_DWORD *)(a3 + 24) = v43;
        v44 = 255;
        if ((unint64_t)v4 + v41 < v3 && (unint64_t)v42 >= v34)
          v44 = *v42;
        v35 = v44 | v43;
        *(_DWORD *)(a3 + 24) = v35;
        ++v41;
      }
      while ((_DWORD)v41 != 4);
    }
    *(_QWORD *)a3 = v4 + 1;
    v19 |= v35 >> v18;
    v45 = v35 << -(char)v18;
    if (!v18)
      v45 = 0;
    *(_DWORD *)(a3 + 24) = v45;
    *(_DWORD *)(a3 + 28) = v18;
  }
  *(_DWORD *)(a2 + 16) = v19;
}

void APAC::MetadataBitStreamParser::parseZoneExclusion(uint64_t a1, BOOL *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  uint64_t i;
  unint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  int v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  BOOL *v86;
  _DWORD *v87;
  unint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  int v93;
  unint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned __int8 *v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int *v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  int v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned __int8 *v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  unint64_t v114;
  unsigned int *v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  int v119;
  unint64_t v120;
  unsigned int v121;
  uint64_t v122;
  unsigned __int8 *v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  unint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  int v132;
  unint64_t v133;
  unsigned int v134;
  uint64_t v135;
  unsigned __int8 *v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  unint64_t v140;
  unsigned int *v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  int v145;
  unint64_t v146;
  unsigned int v147;
  uint64_t v148;
  unsigned __int8 *v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  unsigned __int8 *v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  BOOL *v158;
  _DWORD *v159;
  unint64_t v160;
  unsigned int *v161;
  uint64_t v162;
  int v163;
  unsigned int v164;
  int v165;
  unint64_t v166;
  unsigned int v167;
  uint64_t v168;
  unsigned __int8 *v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  unint64_t v173;
  unsigned int *v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  int v178;
  unint64_t v179;
  unsigned int v180;
  uint64_t v181;
  unsigned __int8 *v182;
  unsigned int v183;
  int v184;
  unsigned int v185;
  unint64_t v186;
  unsigned int *v187;
  uint64_t v188;
  int v189;
  unsigned int v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  uint64_t v194;
  unsigned __int8 *v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  _QWORD *exception;
  const char *v200;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v200 = "Cannot read zoneExclusion.mIsZoneDefined";
    goto LABEL_258;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v17 = v7 << (1 - v6);
    v18 = v6 + 31;
    *(_DWORD *)(a3 + 28) = v18;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> v18;
    if (v18)
      v10 = v17;
    else
      v10 = 0;
    if (v18)
      v9 = v18;
    else
      v9 = 0;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *a2 = v8 != 0;
  if (!v8)
    return;
  if (v9 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v200 = "Cannot read zoneExclusion.mKeepPreviousZone";
    goto LABEL_258;
  }
  v19 = v10 >> 31;
  v20 = v9 - 1;
  *(_DWORD *)(a3 + 28) = v9 - 1;
  if (v9 - 1 < 0)
  {
    v22 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v22 <= (unint64_t)v4)
    {
      v10 = bswap32(*v4);
    }
    else
    {
      v23 = 0;
      do
      {
        v24 = (unsigned __int8 *)v4 + v23;
        v25 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v25;
        v26 = 255;
        if ((unint64_t)v4 + v23 < v3 && (unint64_t)v24 >= v22)
          v26 = *v24;
        v10 = v26 | v25;
        *(_DWORD *)(a3 + 24) = v10;
        ++v23;
      }
      while ((_DWORD)v23 != 4);
    }
    v27 = v10 << (1 - v9);
    v28 = v9 + 31;
    *(_DWORD *)(a3 + 28) = v28;
    *(_QWORD *)a3 = ++v4;
    v19 |= v10 >> v28;
    if (v28)
      v21 = v27;
    else
      v21 = 0;
    if (v28)
      v20 = v28;
    else
      v20 = 0;
  }
  else
  {
    v21 = 2 * v10;
  }
  *(_DWORD *)(a3 + 24) = v21;
  a2[1] = v19 != 0;
  if (v19)
    return;
  if (v20 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v200 = "Cannot read zoneExclusion.mIsCartesian";
    goto LABEL_258;
  }
  v29 = v21 >> 31;
  v30 = v20 - 1;
  *(_DWORD *)(a3 + 28) = v20 - 1;
  if (v20 - 1 < 0)
  {
    v32 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v32 <= (unint64_t)v4)
    {
      v21 = bswap32(*v4);
    }
    else
    {
      v33 = 0;
      do
      {
        v34 = (unsigned __int8 *)v4 + v33;
        v35 = v21 << 8;
        *(_DWORD *)(a3 + 24) = v35;
        v36 = 255;
        if ((unint64_t)v4 + v33 < v3 && (unint64_t)v34 >= v32)
          v36 = *v34;
        v21 = v36 | v35;
        *(_DWORD *)(a3 + 24) = v21;
        ++v33;
      }
      while ((_DWORD)v33 != 4);
    }
    v37 = v21 << (1 - v20);
    v38 = v20 + 31;
    *(_DWORD *)(a3 + 28) = v38;
    *(_QWORD *)a3 = ++v4;
    v29 |= v21 >> v38;
    if (v38)
      v31 = v37;
    else
      v31 = 0;
    if (v38)
      v30 = v38;
    else
      v30 = 0;
  }
  else
  {
    v31 = 2 * v21;
  }
  *(_DWORD *)(a3 + 24) = v31;
  a2[2] = v29 != 0;
  if (v30 + 8 * ((int)v3 - (int)v4) <= 3)
  {
    exception = __cxa_allocate_exception(8uLL);
    v200 = "Cannot read zoneExclusion.mNumZones";
LABEL_258:
    *exception = v200;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v39 = v31 >> 28;
  *(_DWORD *)(a3 + 28) = v30 - 4;
  if (v30 - 4 < 0)
  {
    v41 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v41 <= (unint64_t)v4)
    {
      v31 = bswap32(*v4);
    }
    else
    {
      v42 = 0;
      do
      {
        v43 = (unsigned __int8 *)v4 + v42;
        v44 = v31 << 8;
        *(_DWORD *)(a3 + 24) = v44;
        v45 = 255;
        if ((unint64_t)v4 + v42 < v3 && (unint64_t)v43 >= v41)
          v45 = *v43;
        v31 = v45 | v44;
        *(_DWORD *)(a3 + 24) = v31;
        ++v42;
      }
      while ((_DWORD)v42 != 4);
    }
    v46 = v31 << (4 - v30);
    v47 = v30 + 28;
    *(_DWORD *)(a3 + 28) = v47;
    *(_QWORD *)a3 = v4 + 1;
    v39 |= v31 >> v47;
    if (v47)
      v40 = v46;
    else
      v40 = 0;
  }
  else
  {
    v40 = 16 * v31;
  }
  *(_DWORD *)(a3 + 24) = v40;
  a2[3] = v39;
  if ((_BYTE)v39)
  {
    for (i = 0; i != v39; ++i)
    {
      v49 = *(_QWORD *)(a3 + 16);
      v50 = *(unsigned int **)a3;
      v51 = v49 - *(_QWORD *)a3;
      v52 = *(_DWORD *)(a3 + 28);
      if (v52 + 8 * (int)v51 <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v200 = "Cannot read zoneExclusion.mUsePreDefinedZone[n]";
        goto LABEL_258;
      }
      v53 = *(_DWORD *)(a3 + 24);
      v54 = v53 >> 31;
      v55 = v52 - 1;
      *(_DWORD *)(a3 + 28) = v52 - 1;
      if (v52 - 1 < 0)
      {
        v57 = *(_QWORD *)(a3 + 8);
        if ((v51 & ~(v51 >> 63) & 0xFFFFFFFC) == 0 || v57 > (unint64_t)v50)
        {
          v59 = 0;
          do
          {
            v60 = (unsigned __int8 *)v50 + v59;
            v61 = v53 << 8;
            *(_DWORD *)(a3 + 24) = v61;
            v62 = 255;
            if ((unint64_t)v50 + v59 < v49 && (unint64_t)v60 >= v57)
              v62 = *v60;
            v53 = v62 | v61;
            *(_DWORD *)(a3 + 24) = v53;
            ++v59;
          }
          while ((_DWORD)v59 != 4);
        }
        else
        {
          v53 = bswap32(*v50);
        }
        v64 = v52 + 31;
        v63 = v52 == -31;
        *(_DWORD *)(a3 + 28) = v52 + 31;
        *(_QWORD *)a3 = ++v50;
        v54 |= v53 >> (v52 + 31);
        if (v52 == -31)
          v56 = 0;
        else
          v56 = v53 << (1 - v52);
        if (v63)
          v55 = 0;
        else
          v55 = v64;
      }
      else
      {
        v56 = 2 * v53;
      }
      *(_DWORD *)(a3 + 24) = v56;
      a2[i + 4] = v54 != 0;
      v65 = v49 - (_QWORD)v50;
      v66 = v55 + 8 * (v49 - (_DWORD)v50);
      if (v54)
      {
        if (v66 <= 3)
        {
          exception = __cxa_allocate_exception(8uLL);
          v200 = "Cannot read zoneExclusion.mZoneIndex[n]";
          goto LABEL_258;
        }
        v67 = v56 >> 28;
        *(_DWORD *)(a3 + 28) = v55 - 4;
        if (v55 - 4 < 0)
        {
          v71 = v65 & ~(v65 >> 63);
          v72 = *(_QWORD *)(a3 + 8);
          if ((v71 & 0xFFFFFFFC) != 0 && v72 <= (unint64_t)v50)
          {
            v56 = bswap32(*v50);
          }
          else
          {
            v75 = 0;
            do
            {
              v76 = (unsigned __int8 *)v50 + v75;
              v77 = v56 << 8;
              *(_DWORD *)(a3 + 24) = v77;
              v78 = 255;
              if ((unint64_t)v50 + v75 < v49 && (unint64_t)v76 >= v72)
                v78 = *v76;
              v56 = v78 | v77;
              *(_DWORD *)(a3 + 24) = v56;
              ++v75;
            }
            while ((_DWORD)v75 != 4);
          }
          v79 = v56 << (4 - v55);
          v80 = v55 + 28;
          *(_DWORD *)(a3 + 28) = v80;
          *(_QWORD *)a3 = v50 + 1;
          v67 |= v56 >> v80;
          if (v80)
            v68 = v79;
          else
            v68 = 0;
        }
        else
        {
          v68 = 16 * v56;
        }
        *(_DWORD *)(a3 + 24) = v68;
        a2[i + 19] = v67;
      }
      else if (v29)
      {
        if (v66 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v200 = "Cannot read zoneExclusion.mZone[n].co_tu.cartesian.mMinX";
          goto LABEL_258;
        }
        *(_DWORD *)(a3 + 28) = v55 - 32;
        if (v55 - 32 < 0)
        {
          v69 = *(_QWORD *)(a3 + 8);
          if ((v65 & ~(v65 >> 63) & 0xFFFFFFFC) != 0 && v69 <= (unint64_t)v50)
          {
            v70 = bswap32(*v50);
          }
          else
          {
            v81 = 0;
            v70 = v56;
            do
            {
              v82 = (unsigned __int8 *)v50 + v81;
              v83 = v70 << 8;
              *(_DWORD *)(a3 + 24) = v83;
              v84 = 255;
              if ((unint64_t)v50 + v81 < v49 && (unint64_t)v82 >= v69)
                v84 = *v82;
              v70 = v84 | v83;
              *(_DWORD *)(a3 + 24) = v70;
              ++v81;
            }
            while ((_DWORD)v81 != 4);
          }
          *(_QWORD *)a3 = v50 + 1;
          v56 |= v70 >> v55;
          v85 = v70 << -(char)v55;
          if (!v55)
            v85 = 0;
          *(_DWORD *)(a3 + 24) = v85;
          *(_DWORD *)(a3 + 28) = v55;
        }
        v86 = &a2[24 * i];
        *((_DWORD *)v86 + 9) = v56;
        v87 = v86 + 36;
        v88 = *(_QWORD *)(a3 + 16);
        v89 = *(unsigned int **)a3;
        v90 = v88 - *(_QWORD *)a3;
        v91 = *(_DWORD *)(a3 + 28);
        if (v91 + 8 * (int)v90 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v200 = "Cannot read zoneExclusion.mZone[n].co_tu.cartesian.mMaxX";
          goto LABEL_258;
        }
        v92 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 28) = v91 - 32;
        if (v91 - 32 < 0)
        {
          v93 = v90 & ~(v90 >> 63);
          v94 = *(_QWORD *)(a3 + 8);
          if ((v93 & 0xFFFFFFFC) != 0 && v94 <= (unint64_t)v89)
          {
            v95 = bswap32(*v89);
          }
          else
          {
            v96 = 0;
            v95 = v92;
            do
            {
              v97 = (unsigned __int8 *)v89 + v96;
              v98 = v95 << 8;
              *(_DWORD *)(a3 + 24) = v98;
              v99 = 255;
              if ((unint64_t)v89 + v96 < v88 && (unint64_t)v97 >= v94)
                v99 = *v97;
              v95 = v99 | v98;
              *(_DWORD *)(a3 + 24) = v95;
              ++v96;
            }
            while ((_DWORD)v96 != 4);
          }
          *(_QWORD *)a3 = v89 + 1;
          v92 |= v95 >> v91;
          v100 = v95 << -(char)v91;
          if (!v91)
            v100 = 0;
          *(_DWORD *)(a3 + 24) = v100;
          *(_DWORD *)(a3 + 28) = v91;
        }
        v87[1] = v92;
        v101 = *(_QWORD *)(a3 + 16);
        v102 = *(unsigned int **)a3;
        v103 = v101 - *(_QWORD *)a3;
        v104 = *(_DWORD *)(a3 + 28);
        if (v104 + 8 * (int)v103 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v200 = "Cannot read zoneExclusion.mZone[n].co_tu.cartesian.mMinY";
          goto LABEL_258;
        }
        v105 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 28) = v104 - 32;
        if (v104 - 32 < 0)
        {
          v106 = v103 & ~(v103 >> 63);
          v107 = *(_QWORD *)(a3 + 8);
          if ((v106 & 0xFFFFFFFC) != 0 && v107 <= (unint64_t)v102)
          {
            v108 = bswap32(*v102);
          }
          else
          {
            v109 = 0;
            v108 = v105;
            do
            {
              v110 = (unsigned __int8 *)v102 + v109;
              v111 = v108 << 8;
              *(_DWORD *)(a3 + 24) = v111;
              v112 = 255;
              if ((unint64_t)v102 + v109 < v101 && (unint64_t)v110 >= v107)
                v112 = *v110;
              v108 = v112 | v111;
              *(_DWORD *)(a3 + 24) = v108;
              ++v109;
            }
            while ((_DWORD)v109 != 4);
          }
          *(_QWORD *)a3 = v102 + 1;
          v105 |= v108 >> v104;
          v113 = v108 << -(char)v104;
          if (!v104)
            v113 = 0;
          *(_DWORD *)(a3 + 24) = v113;
          *(_DWORD *)(a3 + 28) = v104;
        }
        v87[2] = v105;
        v114 = *(_QWORD *)(a3 + 16);
        v115 = *(unsigned int **)a3;
        v116 = v114 - *(_QWORD *)a3;
        v117 = *(_DWORD *)(a3 + 28);
        if (v117 + 8 * (int)v116 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v200 = "Cannot read zoneExclusion.mZone[n].co_tu.cartesian.mMaxY";
          goto LABEL_258;
        }
        v118 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 28) = v117 - 32;
        if (v117 - 32 < 0)
        {
          v119 = v116 & ~(v116 >> 63);
          v120 = *(_QWORD *)(a3 + 8);
          if ((v119 & 0xFFFFFFFC) != 0 && v120 <= (unint64_t)v115)
          {
            v121 = bswap32(*v115);
          }
          else
          {
            v122 = 0;
            v121 = v118;
            do
            {
              v123 = (unsigned __int8 *)v115 + v122;
              v124 = v121 << 8;
              *(_DWORD *)(a3 + 24) = v124;
              v125 = 255;
              if ((unint64_t)v115 + v122 < v114 && (unint64_t)v123 >= v120)
                v125 = *v123;
              v121 = v125 | v124;
              *(_DWORD *)(a3 + 24) = v121;
              ++v122;
            }
            while ((_DWORD)v122 != 4);
          }
          *(_QWORD *)a3 = v115 + 1;
          v118 |= v121 >> v117;
          v126 = v121 << -(char)v117;
          if (!v117)
            v126 = 0;
          *(_DWORD *)(a3 + 24) = v126;
          *(_DWORD *)(a3 + 28) = v117;
        }
        v87[3] = v118;
        v127 = *(_QWORD *)(a3 + 16);
        v128 = *(unsigned int **)a3;
        v129 = v127 - *(_QWORD *)a3;
        v130 = *(_DWORD *)(a3 + 28);
        if (v130 + 8 * (int)v129 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v200 = "Cannot read zoneExclusion.mZone[n].co_tu.cartesian.mMinZ";
          goto LABEL_258;
        }
        v131 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 28) = v130 - 32;
        if (v130 - 32 < 0)
        {
          v132 = v129 & ~(v129 >> 63);
          v133 = *(_QWORD *)(a3 + 8);
          if ((v132 & 0xFFFFFFFC) != 0 && v133 <= (unint64_t)v128)
          {
            v134 = bswap32(*v128);
          }
          else
          {
            v135 = 0;
            v134 = v131;
            do
            {
              v136 = (unsigned __int8 *)v128 + v135;
              v137 = v134 << 8;
              *(_DWORD *)(a3 + 24) = v137;
              v138 = 255;
              if ((unint64_t)v128 + v135 < v127 && (unint64_t)v136 >= v133)
                v138 = *v136;
              v134 = v138 | v137;
              *(_DWORD *)(a3 + 24) = v134;
              ++v135;
            }
            while ((_DWORD)v135 != 4);
          }
          *(_QWORD *)a3 = v128 + 1;
          v131 |= v134 >> v130;
          v139 = v134 << -(char)v130;
          if (!v130)
            v139 = 0;
          *(_DWORD *)(a3 + 24) = v139;
          *(_DWORD *)(a3 + 28) = v130;
        }
        v87[4] = v131;
        v140 = *(_QWORD *)(a3 + 16);
        v141 = *(unsigned int **)a3;
        v142 = v140 - *(_QWORD *)a3;
        v143 = *(_DWORD *)(a3 + 28);
        if (v143 + 8 * (int)v142 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v200 = "Cannot read zoneExclusion.mZone[n].co_tu.cartesian.mMaxZ";
          goto LABEL_258;
        }
        v144 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 28) = v143 - 32;
        if (v143 - 32 < 0)
        {
          v145 = v142 & ~(v142 >> 63);
          v146 = *(_QWORD *)(a3 + 8);
          if ((v145 & 0xFFFFFFFC) != 0 && v146 <= (unint64_t)v141)
          {
            v147 = bswap32(*v141);
          }
          else
          {
            v148 = 0;
            v147 = v144;
            do
            {
              v149 = (unsigned __int8 *)v141 + v148;
              v150 = v147 << 8;
              *(_DWORD *)(a3 + 24) = v150;
              v151 = 255;
              if ((unint64_t)v141 + v148 < v140 && (unint64_t)v149 >= v146)
                v151 = *v149;
              v147 = v151 | v150;
              *(_DWORD *)(a3 + 24) = v147;
              ++v148;
            }
            while ((_DWORD)v148 != 4);
          }
          *(_QWORD *)a3 = v141 + 1;
          v144 |= v147 >> v143;
          v152 = v147 << -(char)v143;
          if (!v143)
            v152 = 0;
          *(_DWORD *)(a3 + 24) = v152;
          *(_DWORD *)(a3 + 28) = v143;
        }
        v87[5] = v144;
      }
      else
      {
        if (v66 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v200 = "Cannot read zoneExclusion.mZone[n].co_tu.spherical.mMinAzimuth";
          goto LABEL_258;
        }
        *(_DWORD *)(a3 + 28) = v55 - 32;
        if (v55 - 32 < 0)
        {
          v73 = *(_QWORD *)(a3 + 8);
          if ((v65 & ~(v65 >> 63) & 0xFFFFFFFC) != 0 && v73 <= (unint64_t)v50)
          {
            v74 = bswap32(*v50);
          }
          else
          {
            v153 = 0;
            v74 = v56;
            do
            {
              v154 = (unsigned __int8 *)v50 + v153;
              v155 = v74 << 8;
              *(_DWORD *)(a3 + 24) = v155;
              v156 = 255;
              if ((unint64_t)v50 + v153 < v49 && (unint64_t)v154 >= v73)
                v156 = *v154;
              v74 = v156 | v155;
              *(_DWORD *)(a3 + 24) = v74;
              ++v153;
            }
            while ((_DWORD)v153 != 4);
          }
          *(_QWORD *)a3 = v50 + 1;
          v56 |= v74 >> v55;
          v157 = v74 << -(char)v55;
          if (!v55)
            v157 = 0;
          *(_DWORD *)(a3 + 24) = v157;
          *(_DWORD *)(a3 + 28) = v55;
        }
        v158 = &a2[24 * i];
        *((_DWORD *)v158 + 9) = v56;
        v159 = v158 + 36;
        v160 = *(_QWORD *)(a3 + 16);
        v161 = *(unsigned int **)a3;
        v162 = v160 - *(_QWORD *)a3;
        v163 = *(_DWORD *)(a3 + 28);
        if (v163 + 8 * (int)v162 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v200 = "Cannot read zoneExclusion.mZone[n].co_tu.spherical.mMaxAzimuth";
          goto LABEL_258;
        }
        v164 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 28) = v163 - 32;
        if (v163 - 32 < 0)
        {
          v165 = v162 & ~(v162 >> 63);
          v166 = *(_QWORD *)(a3 + 8);
          if ((v165 & 0xFFFFFFFC) != 0 && v166 <= (unint64_t)v161)
          {
            v167 = bswap32(*v161);
          }
          else
          {
            v168 = 0;
            v167 = v164;
            do
            {
              v169 = (unsigned __int8 *)v161 + v168;
              v170 = v167 << 8;
              *(_DWORD *)(a3 + 24) = v170;
              v171 = 255;
              if ((unint64_t)v161 + v168 < v160 && (unint64_t)v169 >= v166)
                v171 = *v169;
              v167 = v171 | v170;
              *(_DWORD *)(a3 + 24) = v167;
              ++v168;
            }
            while ((_DWORD)v168 != 4);
          }
          *(_QWORD *)a3 = v161 + 1;
          v164 |= v167 >> v163;
          v172 = v167 << -(char)v163;
          if (!v163)
            v172 = 0;
          *(_DWORD *)(a3 + 24) = v172;
          *(_DWORD *)(a3 + 28) = v163;
        }
        v159[1] = v164;
        v173 = *(_QWORD *)(a3 + 16);
        v174 = *(unsigned int **)a3;
        v175 = v173 - *(_QWORD *)a3;
        v176 = *(_DWORD *)(a3 + 28);
        if (v176 + 8 * (int)v175 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v200 = "Cannot read zoneExclusion.mZone[n].co_tu.spherical.mMinElevation";
          goto LABEL_258;
        }
        v177 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 28) = v176 - 32;
        if (v176 - 32 < 0)
        {
          v178 = v175 & ~(v175 >> 63);
          v179 = *(_QWORD *)(a3 + 8);
          if ((v178 & 0xFFFFFFFC) != 0 && v179 <= (unint64_t)v174)
          {
            v180 = bswap32(*v174);
          }
          else
          {
            v181 = 0;
            v180 = v177;
            do
            {
              v182 = (unsigned __int8 *)v174 + v181;
              v183 = v180 << 8;
              *(_DWORD *)(a3 + 24) = v183;
              v184 = 255;
              if ((unint64_t)v174 + v181 < v173 && (unint64_t)v182 >= v179)
                v184 = *v182;
              v180 = v184 | v183;
              *(_DWORD *)(a3 + 24) = v180;
              ++v181;
            }
            while ((_DWORD)v181 != 4);
          }
          *(_QWORD *)a3 = v174 + 1;
          v177 |= v180 >> v176;
          v185 = v180 << -(char)v176;
          if (!v176)
            v185 = 0;
          *(_DWORD *)(a3 + 24) = v185;
          *(_DWORD *)(a3 + 28) = v176;
        }
        v159[2] = v177;
        v186 = *(_QWORD *)(a3 + 16);
        v187 = *(unsigned int **)a3;
        v188 = v186 - *(_QWORD *)a3;
        v189 = *(_DWORD *)(a3 + 28);
        if (v189 + 8 * (int)v188 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v200 = "Cannot read zoneExclusion.mZone[n].co_tu.spherical.mMaxElevation";
          goto LABEL_258;
        }
        v190 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 28) = v189 - 32;
        if (v189 - 32 < 0)
        {
          v191 = v188 & ~(v188 >> 63);
          v192 = *(_QWORD *)(a3 + 8);
          if ((v191 & 0xFFFFFFFC) != 0 && v192 <= (unint64_t)v187)
          {
            v193 = bswap32(*v187);
          }
          else
          {
            v194 = 0;
            v193 = v190;
            do
            {
              v195 = (unsigned __int8 *)v187 + v194;
              v196 = v193 << 8;
              *(_DWORD *)(a3 + 24) = v196;
              v197 = 255;
              if ((unint64_t)v187 + v194 < v186 && (unint64_t)v195 >= v192)
                v197 = *v195;
              v193 = v197 | v196;
              *(_DWORD *)(a3 + 24) = v193;
              ++v194;
            }
            while ((_DWORD)v194 != 4);
          }
          *(_QWORD *)a3 = v187 + 1;
          v190 |= v193 >> v189;
          v198 = v193 << -(char)v189;
          if (!v189)
            v198 = 0;
          *(_DWORD *)(a3 + 24) = v198;
          *(_DWORD *)(a3 + 28) = v189;
        }
        v159[3] = v190;
      }
    }
  }
}

void APAC::MetadataBitStreamParser::parseMaskingZone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  int v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  int v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned __int8 *v95;
  unsigned int v96;
  int v97;
  int v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  int v109;
  int v110;
  int v111;
  unint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  unint64_t v120;
  unsigned int v121;
  uint64_t v122;
  unsigned __int8 *v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unsigned __int8 *v131;
  unsigned int v132;
  int v133;
  int v134;
  int v135;
  unint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unsigned __int8 *v139;
  unsigned int v140;
  int v141;
  int v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  unsigned __int8 *v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  _QWORD *exception;
  const char *v151;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v151 = "Cannot read maskingZone.mIsZoneDefined";
    goto LABEL_257;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v17 = v7 << (1 - v6);
    v18 = v6 + 31;
    *(_DWORD *)(a3 + 28) = v18;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> v18;
    if (v18)
      v10 = v17;
    else
      v10 = 0;
    if (v18)
      v9 = v18;
    else
      v9 = 0;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8 != 0;
  if (v8)
  {
    if (v9 + 8 * ((int)v3 - (int)v4) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v151 = "Cannot read maskingZone.mUsePreDefinedZone";
      goto LABEL_257;
    }
    v19 = v10 >> 31;
    v20 = v9 - 1;
    *(_DWORD *)(a3 + 28) = v9 - 1;
    if (v9 - 1 < 0)
    {
      v22 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v22 <= (unint64_t)v4)
      {
        v10 = bswap32(*v4);
      }
      else
      {
        v23 = 0;
        do
        {
          v24 = (unsigned __int8 *)v4 + v23;
          v25 = v10 << 8;
          *(_DWORD *)(a3 + 24) = v25;
          v26 = 255;
          if ((unint64_t)v4 + v23 < v3 && (unint64_t)v24 >= v22)
            v26 = *v24;
          v10 = v26 | v25;
          *(_DWORD *)(a3 + 24) = v10;
          ++v23;
        }
        while ((_DWORD)v23 != 4);
      }
      v28 = v9 + 31;
      v27 = v9 == -31;
      *(_DWORD *)(a3 + 28) = v9 + 31;
      *(_QWORD *)a3 = ++v4;
      v19 |= v10 >> (v9 + 31);
      if (v9 == -31)
        v21 = 0;
      else
        v21 = v10 << (1 - v9);
      if (v27)
        v20 = 0;
      else
        v20 = v28;
    }
    else
    {
      v21 = 2 * v10;
    }
    *(_DWORD *)(a3 + 24) = v21;
    *(_BYTE *)(a2 + 1) = v19 != 0;
    v29 = v3 - (_QWORD)v4;
    v30 = v20 + 8 * (v3 - (_DWORD)v4);
    if (v19)
    {
      if (v30 > 3)
      {
        v31 = v21 >> 28;
        *(_DWORD *)(a3 + 28) = v20 - 4;
        if (v20 - 4 < 0)
        {
          v36 = v29 & ~(v29 >> 63);
          v37 = *(_QWORD *)(a3 + 8);
          if ((v36 & 0xFFFFFFFC) != 0 && v37 <= (unint64_t)v4)
          {
            v21 = bswap32(*v4);
          }
          else
          {
            v39 = 0;
            do
            {
              v40 = (unsigned __int8 *)v4 + v39;
              v41 = v21 << 8;
              *(_DWORD *)(a3 + 24) = v41;
              v42 = 255;
              if ((unint64_t)v4 + v39 < v3 && (unint64_t)v40 >= v37)
                v42 = *v40;
              v21 = v42 | v41;
              *(_DWORD *)(a3 + 24) = v21;
              ++v39;
            }
            while ((_DWORD)v39 != 4);
          }
          v43 = v21 << (4 - v20);
          v44 = v20 + 28;
          *(_DWORD *)(a3 + 28) = v44;
          *(_QWORD *)a3 = v4 + 1;
          v31 |= v21 >> v44;
          if (v44)
            v32 = v43;
          else
            v32 = 0;
        }
        else
        {
          v32 = 16 * v21;
        }
        *(_DWORD *)(a3 + 24) = v32;
        *(_BYTE *)(a2 + 3) = v31;
        return;
      }
      exception = __cxa_allocate_exception(8uLL);
      v151 = "Cannot read maskingZone.mZoneIndex";
LABEL_257:
      *exception = v151;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    if (v30 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v151 = "Cannot read maskingZone.mIsCartesian";
      goto LABEL_257;
    }
    v33 = v21 >> 31;
    v34 = v20 - 1;
    *(_DWORD *)(a3 + 28) = v20 - 1;
    if (v20 - 1 < 0)
    {
      v38 = *(_QWORD *)(a3 + 8);
      if ((v29 & ~(v29 >> 63) & 0xFFFFFFFC) != 0 && v38 <= (unint64_t)v4)
      {
        v21 = bswap32(*v4);
      }
      else
      {
        v45 = 0;
        do
        {
          v46 = (unsigned __int8 *)v4 + v45;
          v47 = v21 << 8;
          *(_DWORD *)(a3 + 24) = v47;
          v48 = 255;
          if ((unint64_t)v4 + v45 < v3 && (unint64_t)v46 >= v38)
            v48 = *v46;
          v21 = v48 | v47;
          *(_DWORD *)(a3 + 24) = v21;
          ++v45;
        }
        while ((_DWORD)v45 != 4);
      }
      v50 = v20 + 31;
      v49 = v20 == -31;
      *(_DWORD *)(a3 + 28) = v20 + 31;
      *(_QWORD *)a3 = ++v4;
      v33 |= v21 >> (v20 + 31);
      if (v20 == -31)
        v35 = 0;
      else
        v35 = v21 << (1 - v20);
      if (v49)
        v34 = 0;
      else
        v34 = v50;
    }
    else
    {
      v35 = 2 * v21;
    }
    *(_DWORD *)(a3 + 24) = v35;
    *(_BYTE *)(a2 + 2) = v33 != 0;
    v51 = v3 - (_QWORD)v4;
    v52 = 8 * (v3 - (_DWORD)v4);
    v53 = v34 + v52;
    if (v33)
    {
      if (v53 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v151 = "Cannot read maskingZone.mZone.mMinX";
        goto LABEL_257;
      }
      *(_DWORD *)(a3 + 28) = v34 - 32;
      if (v34 - 32 < 0)
      {
        v56 = v51 & ~(v51 >> 63);
        v57 = *(_QWORD *)(a3 + 8);
        if ((v56 & 0xFFFFFFFC) != 0 && v57 <= (unint64_t)v4)
        {
          v58 = bswap32(*v4);
        }
        else
        {
          v62 = 0;
          v58 = v35;
          do
          {
            v63 = (unsigned __int8 *)v4 + v62;
            v64 = v58 << 8;
            *(_DWORD *)(a3 + 24) = v64;
            v65 = 255;
            if ((unint64_t)v4 + v62 < v3 && (unint64_t)v63 >= v57)
              v65 = *v63;
            v58 = v65 | v64;
            *(_DWORD *)(a3 + 24) = v58;
            ++v62;
          }
          while ((_DWORD)v62 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v54 = (v58 >> v34) | v35;
        v35 = v58 << -(char)v34;
        if (!v34)
          v35 = 0;
        *(_DWORD *)(a3 + 24) = v35;
        *(_DWORD *)(a3 + 28) = v34;
        v51 = v3 - (_QWORD)v4;
        v52 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v34 -= 32;
        v54 = v35;
      }
      *(_DWORD *)(a2 + 4) = v54;
      if (v52 + v34 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v151 = "Cannot read maskingZone.mZone.mMaxX";
        goto LABEL_257;
      }
      *(_DWORD *)(a3 + 28) = v34 - 32;
      if (v34 - 32 < 0)
      {
        v67 = v51 & ~(v51 >> 63);
        v68 = *(_QWORD *)(a3 + 8);
        if ((v67 & 0xFFFFFFFC) != 0 && v68 <= (unint64_t)v4)
        {
          v69 = bswap32(*v4);
        }
        else
        {
          v70 = 0;
          v69 = v35;
          do
          {
            v71 = (unsigned __int8 *)v4 + v70;
            v72 = v69 << 8;
            *(_DWORD *)(a3 + 24) = v72;
            v73 = 255;
            if ((unint64_t)v4 + v70 < v3 && (unint64_t)v71 >= v68)
              v73 = *v71;
            v69 = v73 | v72;
            *(_DWORD *)(a3 + 24) = v69;
            ++v70;
          }
          while ((_DWORD)v70 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v66 = (v69 >> v34) | v35;
        v35 = v69 << -(char)v34;
        if (!v34)
          v35 = 0;
        *(_DWORD *)(a3 + 24) = v35;
        *(_DWORD *)(a3 + 28) = v34;
        v51 = v3 - (_QWORD)v4;
        v52 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v34 -= 32;
        v66 = v35;
      }
      *(_DWORD *)(a2 + 8) = v66;
      if (v52 + v34 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v151 = "Cannot read maskingZone.mZone.mMinY";
        goto LABEL_257;
      }
      *(_DWORD *)(a3 + 28) = v34 - 32;
      if (v34 - 32 < 0)
      {
        v75 = v51 & ~(v51 >> 63);
        v76 = *(_QWORD *)(a3 + 8);
        if ((v75 & 0xFFFFFFFC) != 0 && v76 <= (unint64_t)v4)
        {
          v77 = bswap32(*v4);
        }
        else
        {
          v78 = 0;
          v77 = v35;
          do
          {
            v79 = (unsigned __int8 *)v4 + v78;
            v80 = v77 << 8;
            *(_DWORD *)(a3 + 24) = v80;
            v81 = 255;
            if ((unint64_t)v4 + v78 < v3 && (unint64_t)v79 >= v76)
              v81 = *v79;
            v77 = v81 | v80;
            *(_DWORD *)(a3 + 24) = v77;
            ++v78;
          }
          while ((_DWORD)v78 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v74 = (v77 >> v34) | v35;
        v35 = v77 << -(char)v34;
        if (!v34)
          v35 = 0;
        *(_DWORD *)(a3 + 24) = v35;
        *(_DWORD *)(a3 + 28) = v34;
        v51 = v3 - (_QWORD)v4;
        v52 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v34 -= 32;
        v74 = v35;
      }
      *(_DWORD *)(a2 + 12) = v74;
      if (v52 + v34 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v151 = "Cannot read maskingZone.mZone.mMaxY";
        goto LABEL_257;
      }
      *(_DWORD *)(a3 + 28) = v34 - 32;
      if (v34 - 32 < 0)
      {
        v83 = v51 & ~(v51 >> 63);
        v84 = *(_QWORD *)(a3 + 8);
        if ((v83 & 0xFFFFFFFC) != 0 && v84 <= (unint64_t)v4)
        {
          v85 = bswap32(*v4);
        }
        else
        {
          v86 = 0;
          v85 = v35;
          do
          {
            v87 = (unsigned __int8 *)v4 + v86;
            v88 = v85 << 8;
            *(_DWORD *)(a3 + 24) = v88;
            v89 = 255;
            if ((unint64_t)v4 + v86 < v3 && (unint64_t)v87 >= v84)
              v89 = *v87;
            v85 = v89 | v88;
            *(_DWORD *)(a3 + 24) = v85;
            ++v86;
          }
          while ((_DWORD)v86 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v82 = (v85 >> v34) | v35;
        v35 = v85 << -(char)v34;
        if (!v34)
          v35 = 0;
        *(_DWORD *)(a3 + 24) = v35;
        *(_DWORD *)(a3 + 28) = v34;
        v51 = v3 - (_QWORD)v4;
        v52 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v34 -= 32;
        v82 = v35;
      }
      *(_DWORD *)(a2 + 16) = v82;
      if (v52 + v34 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v151 = "Cannot read maskingZone.mZone.mMinZ";
        goto LABEL_257;
      }
      *(_DWORD *)(a3 + 28) = v34 - 32;
      if (v34 - 32 < 0)
      {
        v91 = v51 & ~(v51 >> 63);
        v92 = *(_QWORD *)(a3 + 8);
        if ((v91 & 0xFFFFFFFC) != 0 && v92 <= (unint64_t)v4)
        {
          v93 = bswap32(*v4);
        }
        else
        {
          v94 = 0;
          v93 = v35;
          do
          {
            v95 = (unsigned __int8 *)v4 + v94;
            v96 = v93 << 8;
            *(_DWORD *)(a3 + 24) = v96;
            v97 = 255;
            if ((unint64_t)v4 + v94 < v3 && (unint64_t)v95 >= v92)
              v97 = *v95;
            v93 = v97 | v96;
            *(_DWORD *)(a3 + 24) = v93;
            ++v94;
          }
          while ((_DWORD)v94 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v90 = (v93 >> v34) | v35;
        v35 = v93 << -(char)v34;
        if (!v34)
          v35 = 0;
        *(_DWORD *)(a3 + 24) = v35;
        *(_DWORD *)(a3 + 28) = v34;
        v51 = v3 - (_QWORD)v4;
        v52 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v34 -= 32;
        v90 = v35;
      }
      *(_DWORD *)(a2 + 20) = v90;
      if (v52 + v34 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v151 = "Cannot read maskingZone.mZone.mMaxZ";
        goto LABEL_257;
      }
      *(_DWORD *)(a3 + 28) = v34 - 32;
      if (v34 - 32 < 0)
      {
        v98 = v51 & ~(v51 >> 63);
        v99 = *(_QWORD *)(a3 + 8);
        if ((v98 & 0xFFFFFFFC) != 0 && v99 <= (unint64_t)v4)
        {
          v100 = bswap32(*v4);
        }
        else
        {
          v101 = 0;
          v100 = v35;
          do
          {
            v102 = (unsigned __int8 *)v4 + v101;
            v103 = v100 << 8;
            *(_DWORD *)(a3 + 24) = v103;
            v104 = 255;
            if ((unint64_t)v4 + v101 < v3 && (unint64_t)v102 >= v99)
              v104 = *v102;
            v100 = v104 | v103;
            *(_DWORD *)(a3 + 24) = v100;
            ++v101;
          }
          while ((_DWORD)v101 != 4);
        }
        *(_QWORD *)a3 = v4 + 1;
        v35 |= v100 >> v34;
        v105 = v100 << -(char)v34;
        if (!v34)
          v105 = 0;
        *(_DWORD *)(a3 + 24) = v105;
        *(_DWORD *)(a3 + 28) = v34;
      }
      *(_DWORD *)(a2 + 24) = v35;
    }
    else
    {
      if (v53 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v151 = "Cannot read maskingZone.mZone.mMinAzimuth";
        goto LABEL_257;
      }
      *(_DWORD *)(a3 + 28) = v34 - 32;
      if (v34 - 32 < 0)
      {
        v59 = v51 & ~(v51 >> 63);
        v60 = *(_QWORD *)(a3 + 8);
        if ((v59 & 0xFFFFFFFC) != 0 && v60 <= (unint64_t)v4)
        {
          v61 = bswap32(*v4);
        }
        else
        {
          v106 = 0;
          v61 = v35;
          do
          {
            v107 = (unsigned __int8 *)v4 + v106;
            v108 = v61 << 8;
            *(_DWORD *)(a3 + 24) = v108;
            v109 = 255;
            if ((unint64_t)v4 + v106 < v3 && (unint64_t)v107 >= v60)
              v109 = *v107;
            v61 = v109 | v108;
            *(_DWORD *)(a3 + 24) = v61;
            ++v106;
          }
          while ((_DWORD)v106 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v55 = (v61 >> v34) | v35;
        v35 = v61 << -(char)v34;
        if (!v34)
          v35 = 0;
        *(_DWORD *)(a3 + 24) = v35;
        *(_DWORD *)(a3 + 28) = v34;
        v51 = v3 - (_QWORD)v4;
        v52 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v34 -= 32;
        v55 = v35;
      }
      *(_DWORD *)(a2 + 28) = v55;
      if (v52 + v34 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v151 = "Cannot read maskingZone.mZone.mMaxAzimuth";
        goto LABEL_257;
      }
      *(_DWORD *)(a3 + 28) = v34 - 32;
      if (v34 - 32 < 0)
      {
        v111 = v51 & ~(v51 >> 63);
        v112 = *(_QWORD *)(a3 + 8);
        if ((v111 & 0xFFFFFFFC) != 0 && v112 <= (unint64_t)v4)
        {
          v113 = bswap32(*v4);
        }
        else
        {
          v114 = 0;
          v113 = v35;
          do
          {
            v115 = (unsigned __int8 *)v4 + v114;
            v116 = v113 << 8;
            *(_DWORD *)(a3 + 24) = v116;
            v117 = 255;
            if ((unint64_t)v4 + v114 < v3 && (unint64_t)v115 >= v112)
              v117 = *v115;
            v113 = v117 | v116;
            *(_DWORD *)(a3 + 24) = v113;
            ++v114;
          }
          while ((_DWORD)v114 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v110 = (v113 >> v34) | v35;
        v35 = v113 << -(char)v34;
        if (!v34)
          v35 = 0;
        *(_DWORD *)(a3 + 24) = v35;
        *(_DWORD *)(a3 + 28) = v34;
        v51 = v3 - (_QWORD)v4;
        v52 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v34 -= 32;
        v110 = v35;
      }
      *(_DWORD *)(a2 + 32) = v110;
      if (v52 + v34 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v151 = "Cannot read maskingZone.mZone.mMinElevation";
        goto LABEL_257;
      }
      *(_DWORD *)(a3 + 28) = v34 - 32;
      if (v34 - 32 < 0)
      {
        v119 = v51 & ~(v51 >> 63);
        v120 = *(_QWORD *)(a3 + 8);
        if ((v119 & 0xFFFFFFFC) != 0 && v120 <= (unint64_t)v4)
        {
          v121 = bswap32(*v4);
        }
        else
        {
          v122 = 0;
          v121 = v35;
          do
          {
            v123 = (unsigned __int8 *)v4 + v122;
            v124 = v121 << 8;
            *(_DWORD *)(a3 + 24) = v124;
            v125 = 255;
            if ((unint64_t)v4 + v122 < v3 && (unint64_t)v123 >= v120)
              v125 = *v123;
            v121 = v125 | v124;
            *(_DWORD *)(a3 + 24) = v121;
            ++v122;
          }
          while ((_DWORD)v122 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v118 = (v121 >> v34) | v35;
        v35 = v121 << -(char)v34;
        if (!v34)
          v35 = 0;
        *(_DWORD *)(a3 + 24) = v35;
        *(_DWORD *)(a3 + 28) = v34;
        v51 = v3 - (_QWORD)v4;
        v52 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v34 -= 32;
        v118 = v35;
      }
      *(_DWORD *)(a2 + 36) = v118;
      if (v52 + v34 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v151 = "Cannot read maskingZone.mZone.mMaxElevation";
        goto LABEL_257;
      }
      *(_DWORD *)(a3 + 28) = v34 - 32;
      if (v34 - 32 < 0)
      {
        v127 = v51 & ~(v51 >> 63);
        v128 = *(_QWORD *)(a3 + 8);
        if ((v127 & 0xFFFFFFFC) != 0 && v128 <= (unint64_t)v4)
        {
          v129 = bswap32(*v4);
        }
        else
        {
          v130 = 0;
          v129 = v35;
          do
          {
            v131 = (unsigned __int8 *)v4 + v130;
            v132 = v129 << 8;
            *(_DWORD *)(a3 + 24) = v132;
            v133 = 255;
            if ((unint64_t)v4 + v130 < v3 && (unint64_t)v131 >= v128)
              v133 = *v131;
            v129 = v133 | v132;
            *(_DWORD *)(a3 + 24) = v129;
            ++v130;
          }
          while ((_DWORD)v130 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v126 = (v129 >> v34) | v35;
        v35 = v129 << -(char)v34;
        if (!v34)
          v35 = 0;
        *(_DWORD *)(a3 + 24) = v35;
        *(_DWORD *)(a3 + 28) = v34;
        v51 = v3 - (_QWORD)v4;
        v52 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v34 -= 32;
        v126 = v35;
      }
      *(_DWORD *)(a2 + 40) = v126;
      if (v52 + v34 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v151 = "Cannot read maskingZone.mZone.mMinDistance";
        goto LABEL_257;
      }
      *(_DWORD *)(a3 + 28) = v34 - 32;
      if (v34 - 32 < 0)
      {
        v135 = v51 & ~(v51 >> 63);
        v136 = *(_QWORD *)(a3 + 8);
        if ((v135 & 0xFFFFFFFC) != 0 && v136 <= (unint64_t)v4)
        {
          v137 = bswap32(*v4);
        }
        else
        {
          v138 = 0;
          v137 = v35;
          do
          {
            v139 = (unsigned __int8 *)v4 + v138;
            v140 = v137 << 8;
            *(_DWORD *)(a3 + 24) = v140;
            v141 = 255;
            if ((unint64_t)v4 + v138 < v3 && (unint64_t)v139 >= v136)
              v141 = *v139;
            v137 = v141 | v140;
            *(_DWORD *)(a3 + 24) = v137;
            ++v138;
          }
          while ((_DWORD)v138 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v134 = (v137 >> v34) | v35;
        v35 = v137 << -(char)v34;
        if (!v34)
          v35 = 0;
        *(_DWORD *)(a3 + 24) = v35;
        *(_DWORD *)(a3 + 28) = v34;
        v51 = v3 - (_QWORD)v4;
        v52 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v34 -= 32;
        v134 = v35;
      }
      *(_DWORD *)(a2 + 44) = v134;
      if (v52 + v34 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v151 = "Cannot read maskingZone.mZone.mMaxDistance";
        goto LABEL_257;
      }
      *(_DWORD *)(a3 + 28) = v34 - 32;
      if (v34 - 32 < 0)
      {
        v142 = v51 & ~(v51 >> 63);
        v143 = *(_QWORD *)(a3 + 8);
        if ((v142 & 0xFFFFFFFC) != 0 && v143 <= (unint64_t)v4)
        {
          v144 = bswap32(*v4);
        }
        else
        {
          v145 = 0;
          v144 = v35;
          do
          {
            v146 = (unsigned __int8 *)v4 + v145;
            v147 = v144 << 8;
            *(_DWORD *)(a3 + 24) = v147;
            v148 = 255;
            if ((unint64_t)v4 + v145 < v3 && (unint64_t)v146 >= v143)
              v148 = *v146;
            v144 = v148 | v147;
            *(_DWORD *)(a3 + 24) = v144;
            ++v145;
          }
          while ((_DWORD)v145 != 4);
        }
        *(_QWORD *)a3 = v4 + 1;
        v35 |= v144 >> v34;
        v149 = v144 << -(char)v34;
        if (!v34)
          v149 = 0;
        *(_DWORD *)(a3 + 24) = v149;
        *(_DWORD *)(a3 + 28) = v34;
      }
      *(_DWORD *)(a2 + 48) = v35;
    }
  }
}

void APAC::MetadataBitStreamParser::parseSceneReverb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned int v68;
  int v69;
  BOOL v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  _QWORD *exception;
  const char *v97;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v97 = "Cannot read reverb.mReverbProcIndex";
    goto LABEL_161;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 29;
  v9 = v6 - 3;
  *(_DWORD *)(a3 + 28) = v6 - 3;
  if (v6 - 3 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v6 + 29;
    v17 = v6 == -29;
    *(_DWORD *)(a3 + 28) = v6 + 29;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> (v6 + 29);
    if (v6 == -29)
      v10 = 0;
    else
      v10 = v7 << (3 - v6);
    if (v17)
      v9 = 0;
    else
      v9 = v18;
  }
  else
  {
    v10 = 8 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8;
  switch(v8)
  {
    case 3u:
      if (v9 + 8 * ((int)v3 - (int)v4) > 1)
      {
        v24 = v10 >> 30;
        v25 = v9 - 2;
        *(_DWORD *)(a3 + 28) = v9 - 2;
        if (v9 - 2 < 0)
        {
          v29 = *(_QWORD *)(a3 + 8);
          if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
            && v29 <= (unint64_t)v4)
          {
            v10 = bswap32(*v4);
          }
          else
          {
            v46 = 0;
            do
            {
              v47 = (unsigned __int8 *)v4 + v46;
              v48 = v10 << 8;
              *(_DWORD *)(a3 + 24) = v48;
              v49 = 255;
              if ((unint64_t)v4 + v46 < v3 && (unint64_t)v47 >= v29)
                v49 = *v47;
              v10 = v49 | v48;
              *(_DWORD *)(a3 + 24) = v10;
              ++v46;
            }
            while ((_DWORD)v46 != 4);
          }
          v50 = v10 << (2 - v9);
          v51 = v9 + 30;
          *(_DWORD *)(a3 + 28) = v51;
          *(_QWORD *)a3 = ++v4;
          v24 |= v10 >> v51;
          if (v51)
            v26 = v50;
          else
            v26 = 0;
          if (v51)
            v25 = v51;
          else
            v25 = 0;
        }
        else
        {
          v26 = 4 * v10;
        }
        *(_DWORD *)(a3 + 24) = v26;
        *(_BYTE *)(a2 + 4) = v24;
        if (v25 + 8 * ((int)v3 - (int)v4) > 8)
        {
          v52 = v26 >> 23;
          v53 = v25 - 9;
          *(_DWORD *)(a3 + 28) = v25 - 9;
          if (v25 - 9 < 0)
          {
            v55 = *(_QWORD *)(a3 + 8);
            if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
              && v55 <= (unint64_t)v4)
            {
              v26 = bswap32(*v4);
            }
            else
            {
              v66 = 0;
              do
              {
                v67 = (unsigned __int8 *)v4 + v66;
                v68 = v26 << 8;
                *(_DWORD *)(a3 + 24) = v68;
                v69 = 255;
                if ((unint64_t)v4 + v66 < v3 && (unint64_t)v67 >= v55)
                  v69 = *v67;
                v26 = v69 | v68;
                *(_DWORD *)(a3 + 24) = v26;
                ++v66;
              }
              while ((_DWORD)v66 != 4);
            }
            v71 = v25 + 23;
            v70 = v25 == -23;
            *(_DWORD *)(a3 + 28) = v25 + 23;
            *(_QWORD *)a3 = ++v4;
            v52 |= v26 >> (v25 + 23);
            if (v25 == -23)
              v54 = 0;
            else
              v54 = v26 << (9 - v25);
            if (v70)
              v53 = 0;
            else
              v53 = v71;
          }
          else
          {
            v54 = v26 << 9;
          }
          *(_DWORD *)(a3 + 24) = v54;
          *(_WORD *)(a2 + 6) = v52;
          if (v53 + 8 * ((int)v3 - (int)v4) > 8)
          {
            v72 = v54 >> 23;
            *(_DWORD *)(a3 + 28) = v53 - 9;
            if (v53 - 9 < 0)
            {
              v74 = *(_QWORD *)(a3 + 8);
              if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
                && v74 <= (unint64_t)v4)
              {
                v54 = bswap32(*v4);
              }
              else
              {
                v84 = 0;
                do
                {
                  v85 = (unsigned __int8 *)v4 + v84;
                  v86 = v54 << 8;
                  *(_DWORD *)(a3 + 24) = v86;
                  v87 = 255;
                  if ((unint64_t)v4 + v84 < v3 && (unint64_t)v85 >= v74)
                    v87 = *v85;
                  v54 = v87 | v86;
                  *(_DWORD *)(a3 + 24) = v54;
                  ++v84;
                }
                while ((_DWORD)v84 != 4);
              }
              v88 = v54 << (9 - v53);
              v89 = v53 + 23;
              *(_DWORD *)(a3 + 28) = v89;
              *(_QWORD *)a3 = v4 + 1;
              v72 |= v54 >> v89;
              if (v89)
                v73 = v88;
              else
                v73 = 0;
            }
            else
            {
              v73 = v54 << 9;
            }
            *(_DWORD *)(a3 + 24) = v73;
            *(_WORD *)(a2 + 8) = v72;
            APAC::MetadataBitStreamParser::parseFallbackRoomGeometry(a1, a2 + 12, a3);
            return;
          }
LABEL_158:
          exception = __cxa_allocate_exception(8uLL);
          v97 = "Cannot read reverb.mCustomData_EntryID";
          goto LABEL_161;
        }
LABEL_157:
        exception = __cxa_allocate_exception(8uLL);
        v97 = "Cannot read reverb.mCustomData_TableID";
        goto LABEL_161;
      }
LABEL_156:
      exception = __cxa_allocate_exception(8uLL);
      v97 = "Cannot read reverb.mDataLocationIndex";
      goto LABEL_161;
    case 2u:
      if (v9 + 8 * ((int)v3 - (int)v4) > 1)
      {
        v21 = v10 >> 30;
        v22 = v9 - 2;
        *(_DWORD *)(a3 + 28) = v9 - 2;
        if (v9 - 2 < 0)
        {
          v27 = *(_QWORD *)(a3 + 8);
          if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
            && v27 <= (unint64_t)v4)
          {
            v10 = bswap32(*v4);
          }
          else
          {
            v30 = 0;
            do
            {
              v31 = (unsigned __int8 *)v4 + v30;
              v32 = v10 << 8;
              *(_DWORD *)(a3 + 24) = v32;
              v33 = 255;
              if ((unint64_t)v4 + v30 < v3 && (unint64_t)v31 >= v27)
                v33 = *v31;
              v10 = v33 | v32;
              *(_DWORD *)(a3 + 24) = v10;
              ++v30;
            }
            while ((_DWORD)v30 != 4);
          }
          v34 = v10 << (2 - v9);
          v35 = v9 + 30;
          *(_DWORD *)(a3 + 28) = v35;
          *(_QWORD *)a3 = ++v4;
          v21 |= v10 >> v35;
          if (v35)
            v23 = v34;
          else
            v23 = 0;
          if (v35)
            v22 = v35;
          else
            v22 = 0;
        }
        else
        {
          v23 = 4 * v10;
        }
        *(_DWORD *)(a3 + 24) = v23;
        *(_BYTE *)(a2 + 4) = v21;
        if (v22 + 8 * ((int)v3 - (int)v4) > 8)
        {
          v36 = v23 >> 23;
          v37 = v22 - 9;
          *(_DWORD *)(a3 + 28) = v22 - 9;
          if (v22 - 9 < 0)
          {
            v39 = *(_QWORD *)(a3 + 8);
            if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
              && v39 <= (unint64_t)v4)
            {
              v23 = bswap32(*v4);
            }
            else
            {
              v56 = 0;
              do
              {
                v57 = (unsigned __int8 *)v4 + v56;
                v58 = v23 << 8;
                *(_DWORD *)(a3 + 24) = v58;
                v59 = 255;
                if ((unint64_t)v4 + v56 < v3 && (unint64_t)v57 >= v39)
                  v59 = *v57;
                v23 = v59 | v58;
                *(_DWORD *)(a3 + 24) = v23;
                ++v56;
              }
              while ((_DWORD)v56 != 4);
            }
            v60 = v23 << (9 - v22);
            v61 = v22 + 23;
            *(_DWORD *)(a3 + 28) = v61;
            *(_QWORD *)a3 = ++v4;
            v36 |= v23 >> v61;
            if (v61)
              v38 = v60;
            else
              v38 = 0;
            if (v61)
              v37 = v61;
            else
              v37 = 0;
          }
          else
          {
            v38 = v23 << 9;
          }
          *(_DWORD *)(a3 + 24) = v38;
          *(_WORD *)(a2 + 6) = v36;
          if (v37 + 8 * ((int)v3 - (int)v4) > 8)
          {
            v62 = v38 >> 23;
            v63 = v37 - 9;
            *(_DWORD *)(a3 + 28) = v37 - 9;
            if (v37 - 9 < 0)
            {
              v65 = *(_QWORD *)(a3 + 8);
              if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
                && v65 <= (unint64_t)v4)
              {
                v38 = bswap32(*v4);
              }
              else
              {
                v75 = 0;
                do
                {
                  v76 = (unsigned __int8 *)v4 + v75;
                  v77 = v38 << 8;
                  *(_DWORD *)(a3 + 24) = v77;
                  v78 = 255;
                  if ((unint64_t)v4 + v75 < v3 && (unint64_t)v76 >= v65)
                    v78 = *v76;
                  v38 = v78 | v77;
                  *(_DWORD *)(a3 + 24) = v38;
                  ++v75;
                }
                while ((_DWORD)v75 != 4);
              }
              v79 = v38 << (9 - v37);
              v80 = v37 + 23;
              *(_DWORD *)(a3 + 28) = v80;
              *(_QWORD *)a3 = ++v4;
              v62 |= v38 >> v80;
              if (v80)
                v64 = v79;
              else
                v64 = 0;
              if (v80)
                v63 = v80;
              else
                v63 = 0;
            }
            else
            {
              v64 = v38 << 9;
            }
            *(_DWORD *)(a3 + 24) = v64;
            *(_WORD *)(a2 + 8) = v62;
            if (v63 + 8 * ((int)v3 - (int)v4) > 9)
            {
              v81 = v64 >> 22;
              *(_DWORD *)(a3 + 28) = v63 - 10;
              if (v63 - 10 < 0)
              {
                v83 = *(_QWORD *)(a3 + 8);
                if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
                  && v83 <= (unint64_t)v4)
                {
                  v64 = bswap32(*v4);
                }
                else
                {
                  v90 = 0;
                  do
                  {
                    v91 = (unsigned __int8 *)v4 + v90;
                    v92 = v64 << 8;
                    *(_DWORD *)(a3 + 24) = v92;
                    v93 = 255;
                    if ((unint64_t)v4 + v90 < v3 && (unint64_t)v91 >= v83)
                      v93 = *v91;
                    v64 = v93 | v92;
                    *(_DWORD *)(a3 + 24) = v64;
                    ++v90;
                  }
                  while ((_DWORD)v90 != 4);
                }
                v94 = v64 << (10 - v63);
                v95 = v63 + 22;
                *(_DWORD *)(a3 + 28) = v95;
                *(_QWORD *)a3 = v4 + 1;
                v81 |= v64 >> v95;
                if (v95)
                  v82 = v94;
                else
                  v82 = 0;
              }
              else
              {
                v82 = v64 << 10;
              }
              *(_DWORD *)(a3 + 24) = v82;
              *(_WORD *)(a2 + 10) = v81;
              goto LABEL_154;
            }
            exception = __cxa_allocate_exception(8uLL);
            v97 = "Cannot read reverb.mFallbackCustomeIR.mAUSMReverbPreset";
LABEL_161:
            *exception = v97;
            __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
          }
          goto LABEL_158;
        }
        goto LABEL_157;
      }
      goto LABEL_156;
    case 1u:
      if (v9 + 8 * ((int)v3 - (int)v4) > 9)
      {
        v19 = v10 >> 22;
        *(_DWORD *)(a3 + 28) = v9 - 10;
        if (v9 - 10 < 0)
        {
          v28 = *(_QWORD *)(a3 + 8);
          if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
            && v28 <= (unint64_t)v4)
          {
            v10 = bswap32(*v4);
          }
          else
          {
            v40 = 0;
            do
            {
              v41 = (unsigned __int8 *)v4 + v40;
              v42 = v10 << 8;
              *(_DWORD *)(a3 + 24) = v42;
              v43 = 255;
              if ((unint64_t)v4 + v40 < v3 && (unint64_t)v41 >= v28)
                v43 = *v41;
              v10 = v43 | v42;
              *(_DWORD *)(a3 + 24) = v10;
              ++v40;
            }
            while ((_DWORD)v40 != 4);
          }
          v44 = v10 << (10 - v9);
          v45 = v9 + 22;
          *(_DWORD *)(a3 + 28) = v45;
          *(_QWORD *)a3 = v4 + 1;
          v19 |= v10 >> v45;
          if (v45)
            v20 = v44;
          else
            v20 = 0;
        }
        else
        {
          v20 = v10 << 10;
        }
        *(_DWORD *)(a3 + 24) = v20;
        *(_WORD *)(a2 + 2) = v19;
LABEL_154:
        APAC::MetadataBitStreamParser::parseParametricReverb(a1, a2 + 144, a3);
        return;
      }
      exception = __cxa_allocate_exception(8uLL);
      v97 = "Cannot read reverb.mAUSMReverbPreset";
      goto LABEL_161;
  }
}

{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  BOOL v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned int v56;
  int v57;
  BOOL v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  int v64;
  int v65;
  _QWORD *exception;
  const char *v67;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v67 = "Cannot read sR.reverbProcIndex";
    goto LABEL_107;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 29;
  v9 = v6 - 3;
  *(_DWORD *)(a3 + 28) = v6 - 3;
  if (v6 - 3 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v6 + 29;
    v17 = v6 == -29;
    *(_DWORD *)(a3 + 28) = v6 + 29;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> (v6 + 29);
    if (v6 == -29)
      v10 = 0;
    else
      v10 = v7 << (3 - v6);
    if (v17)
      v9 = 0;
    else
      v9 = v18;
  }
  else
  {
    v10 = 8 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8;
  if (v8 == 2)
  {
    if (v9 + 8 * ((int)v3 - (int)v4) <= 3)
    {
      exception = __cxa_allocate_exception(8uLL);
      v67 = "Cannot read sR.codeBookID";
    }
    else
    {
      v22 = v10 >> 28;
      v23 = v9 - 4;
      *(_DWORD *)(a3 + 28) = v9 - 4;
      if (v9 - 4 < 0)
      {
        v26 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v26 <= (unint64_t)v4)
        {
          v10 = bswap32(*v4);
        }
        else
        {
          v36 = 0;
          do
          {
            v37 = (unsigned __int8 *)v4 + v36;
            v38 = v10 << 8;
            *(_DWORD *)(a3 + 24) = v38;
            v39 = 255;
            if ((unint64_t)v4 + v36 < v3 && (unint64_t)v37 >= v26)
              v39 = *v37;
            v10 = v39 | v38;
            *(_DWORD *)(a3 + 24) = v10;
            ++v36;
          }
          while ((_DWORD)v36 != 4);
        }
        v40 = v10 << (4 - v9);
        v41 = v9 + 28;
        *(_DWORD *)(a3 + 28) = v41;
        *(_QWORD *)a3 = ++v4;
        v22 |= v10 >> v41;
        if (v41)
          v24 = v40;
        else
          v24 = 0;
        if (v41)
          v23 = v41;
        else
          v23 = 0;
      }
      else
      {
        v24 = 16 * v10;
      }
      *(_DWORD *)(a3 + 24) = v24;
      *(_BYTE *)(a2 + 5) = v22;
      if (v23 + 8 * ((int)v3 - (int)v4) > 9)
      {
        v42 = v24 >> 22;
        v43 = v23 - 10;
        *(_DWORD *)(a3 + 28) = v23 - 10;
        if (v23 - 10 < 0)
        {
          v45 = *(_QWORD *)(a3 + 8);
          if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
            && v45 <= (unint64_t)v4)
          {
            v24 = bswap32(*v4);
          }
          else
          {
            v54 = 0;
            do
            {
              v55 = (unsigned __int8 *)v4 + v54;
              v56 = v24 << 8;
              *(_DWORD *)(a3 + 24) = v56;
              v57 = 255;
              if ((unint64_t)v4 + v54 < v3 && (unint64_t)v55 >= v45)
                v57 = *v55;
              v24 = v57 | v56;
              *(_DWORD *)(a3 + 24) = v24;
              ++v54;
            }
            while ((_DWORD)v54 != 4);
          }
          v59 = v23 + 22;
          v58 = v23 == -22;
          *(_DWORD *)(a3 + 28) = v23 + 22;
          *(_QWORD *)a3 = ++v4;
          v42 |= v24 >> (v23 + 22);
          if (v23 == -22)
            v44 = 0;
          else
            v44 = v24 << (10 - v23);
          if (v58)
            v43 = 0;
          else
            v43 = v59;
        }
        else
        {
          v44 = v24 << 10;
        }
        *(_DWORD *)(a3 + 24) = v44;
        *(_WORD *)(a2 + 6) = v42;
        if (v43 + 8 * ((int)v3 - (int)v4) > 6)
        {
          v33 = v44 >> 25;
          *(_DWORD *)(a3 + 28) = v43 - 7;
          if (v43 - 7 >= 0)
          {
            v34 = v44 << 7;
            goto LABEL_100;
          }
          v60 = *(_QWORD *)(a3 + 8);
          if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
            && v60 <= (unint64_t)v4)
          {
            v44 = bswap32(*v4);
          }
          else
          {
            v61 = 0;
            do
            {
              v62 = (unsigned __int8 *)v4 + v61;
              v63 = v44 << 8;
              *(_DWORD *)(a3 + 24) = v63;
              v64 = 255;
              if ((unint64_t)v4 + v61 < v3 && (unint64_t)v62 >= v60)
                v64 = *v62;
              v44 = v64 | v63;
              *(_DWORD *)(a3 + 24) = v44;
              ++v61;
            }
            while ((_DWORD)v61 != 4);
          }
          v50 = v44 << (7 - v43);
          v65 = v43 + 25;
          v51 = v65 == 0;
          *(_DWORD *)(a3 + 28) = v65;
          *(_QWORD *)a3 = v4 + 1;
          v53 = v44 >> v65;
LABEL_97:
          LOBYTE(v33) = v53 | v33;
          if (v51)
            v34 = 0;
          else
            v34 = v50;
          goto LABEL_100;
        }
        goto LABEL_103;
      }
      exception = __cxa_allocate_exception(8uLL);
      v67 = "Cannot read sR.IRFilterID";
    }
LABEL_107:
    *exception = v67;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  if (v8 != 1)
    return;
  if (v9 + 8 * ((int)v3 - (int)v4) <= 9)
  {
    exception = __cxa_allocate_exception(8uLL);
    v67 = "Cannot read sR.reverbProcPreset";
    goto LABEL_107;
  }
  v19 = v10 >> 22;
  v20 = v9 - 10;
  *(_DWORD *)(a3 + 28) = v9 - 10;
  if (v9 - 10 < 0)
  {
    v25 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v25 <= (unint64_t)v4)
    {
      v10 = bswap32(*v4);
    }
    else
    {
      v27 = 0;
      do
      {
        v28 = (unsigned __int8 *)v4 + v27;
        v29 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v29;
        v30 = 255;
        if ((unint64_t)v4 + v27 < v3 && (unint64_t)v28 >= v25)
          v30 = *v28;
        v10 = v30 | v29;
        *(_DWORD *)(a3 + 24) = v10;
        ++v27;
      }
      while ((_DWORD)v27 != 4);
    }
    v31 = v10 << (10 - v9);
    v32 = v9 + 22;
    *(_DWORD *)(a3 + 28) = v32;
    *(_QWORD *)a3 = ++v4;
    v19 |= v10 >> v32;
    if (v32)
      v21 = v31;
    else
      v21 = 0;
    if (v32)
      v20 = v32;
    else
      v20 = 0;
  }
  else
  {
    v21 = v10 << 10;
  }
  *(_DWORD *)(a3 + 24) = v21;
  *(_WORD *)(a2 + 2) = v19;
  if (v20 + 8 * ((int)v3 - (int)v4) <= 6)
  {
LABEL_103:
    exception = __cxa_allocate_exception(8uLL);
    v67 = "Cannot read sR.mixLevel";
    goto LABEL_107;
  }
  v33 = v21 >> 25;
  *(_DWORD *)(a3 + 28) = v20 - 7;
  if (v20 - 7 < 0)
  {
    v35 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v35 <= (unint64_t)v4)
    {
      v21 = bswap32(*v4);
    }
    else
    {
      v46 = 0;
      do
      {
        v47 = (unsigned __int8 *)v4 + v46;
        v48 = v21 << 8;
        *(_DWORD *)(a3 + 24) = v48;
        v49 = 255;
        if ((unint64_t)v4 + v46 < v3 && (unint64_t)v47 >= v35)
          v49 = *v47;
        v21 = v49 | v48;
        *(_DWORD *)(a3 + 24) = v21;
        ++v46;
      }
      while ((_DWORD)v46 != 4);
    }
    v50 = v21 << (7 - v20);
    v52 = v20 + 25;
    v51 = v52 == 0;
    *(_DWORD *)(a3 + 28) = v52;
    *(_QWORD *)a3 = v4 + 1;
    v53 = v21 >> v52;
    goto LABEL_97;
  }
  v34 = v21 << 7;
LABEL_100:
  *(_DWORD *)(a3 + 24) = v34;
  *(_BYTE *)(a2 + 4) = v33;
}

void APAC::MetadataBitStreamParser::parsePostProcReverb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  _QWORD *exception;
  const char *v37;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v37 = "Cannot read ppReverb.mReverbProcIndex";
    goto LABEL_57;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 29;
  v9 = v6 - 3;
  *(_DWORD *)(a3 + 28) = v6 - 3;
  if (v6 - 3 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v17 = v7 << (3 - v6);
    v18 = v6 + 29;
    *(_DWORD *)(a3 + 28) = v18;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> v18;
    if (v18)
      v10 = v17;
    else
      v10 = 0;
    if (v18)
      v9 = v18;
    else
      v9 = 0;
  }
  else
  {
    v10 = 8 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8;
  if (v8 == 1)
  {
    if (v9 + 8 * ((int)v3 - (int)v4) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v37 = "Cannot read ppReverb.mEarlyReflectionTimeProvided";
      goto LABEL_57;
    }
    v19 = v10 >> 31;
    v20 = v9 - 1;
    *(_DWORD *)(a3 + 28) = v9 - 1;
    if (v9 - 1 < 0)
    {
      v22 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v22 <= (unint64_t)v4)
      {
        v10 = bswap32(*v4);
      }
      else
      {
        v23 = 0;
        do
        {
          v24 = (unsigned __int8 *)v4 + v23;
          v25 = v10 << 8;
          *(_DWORD *)(a3 + 24) = v25;
          v26 = 255;
          if ((unint64_t)v4 + v23 < v3 && (unint64_t)v24 >= v22)
            v26 = *v24;
          v10 = v26 | v25;
          *(_DWORD *)(a3 + 24) = v10;
          ++v23;
        }
        while ((_DWORD)v23 != 4);
      }
      v28 = v9 + 31;
      v27 = v9 == -31;
      *(_DWORD *)(a3 + 28) = v9 + 31;
      *(_QWORD *)a3 = ++v4;
      v19 |= v10 >> (v9 + 31);
      if (v9 == -31)
        v21 = 0;
      else
        v21 = v10 << (1 - v9);
      if (v27)
        v20 = 0;
      else
        v20 = v28;
    }
    else
    {
      v21 = 2 * v10;
    }
    *(_DWORD *)(a3 + 24) = v21;
    *(_BYTE *)(a2 + 1) = v19 != 0;
    if (v19)
    {
      if (v20 + 8 * ((int)v3 - (int)v4) > 31)
      {
        *(_DWORD *)(a3 + 28) = v20 - 32;
        if (v20 - 32 < 0)
        {
          v29 = *(_QWORD *)(a3 + 8);
          if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
            && v29 <= (unint64_t)v4)
          {
            v30 = bswap32(*v4);
          }
          else
          {
            v31 = 0;
            v30 = v21;
            do
            {
              v32 = (unsigned __int8 *)v4 + v31;
              v33 = v30 << 8;
              *(_DWORD *)(a3 + 24) = v33;
              v34 = 255;
              if ((unint64_t)v4 + v31 < v3 && (unint64_t)v32 >= v29)
                v34 = *v32;
              v30 = v34 | v33;
              *(_DWORD *)(a3 + 24) = v30;
              ++v31;
            }
            while ((_DWORD)v31 != 4);
          }
          *(_QWORD *)a3 = v4 + 1;
          v21 |= v30 >> v20;
          v35 = v30 << -(char)v20;
          if (!v20)
            v35 = 0;
          *(_DWORD *)(a3 + 24) = v35;
          *(_DWORD *)(a3 + 28) = v20;
        }
        *(_DWORD *)(a2 + 4) = v21;
        return;
      }
      exception = __cxa_allocate_exception(8uLL);
      v37 = "Cannot read ppReverb.mEarlyReflectionTime";
LABEL_57:
      *exception = v37;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
  }
}

void APAC::MetadataBitStreamParser::parseRadiationPattern(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  _QWORD *exception;
  const char *v63;

  v4 = *(_QWORD *)(a4 + 16);
  v5 = *(unsigned int **)a4;
  v6 = v4 - *(_QWORD *)a4;
  v7 = *(_DWORD *)(a4 + 28);
  if (v7 + 8 * (int)v6 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v63 = "Cannot read radPattern.mAuSMProcIndex";
    goto LABEL_99;
  }
  v8 = *(_DWORD *)(a4 + 24);
  v9 = v8 >> 29;
  v10 = v7 - 3;
  *(_DWORD *)(a4 + 28) = v7 - 3;
  if (v7 - 3 < 0)
  {
    v12 = *(_QWORD *)(a4 + 8);
    if ((v6 & ~(v6 >> 63) & 0xFFFFFFFC) == 0 || v12 > (unint64_t)v5)
    {
      v14 = 0;
      do
      {
        v15 = (unsigned __int8 *)v5 + v14;
        v16 = v8 << 8;
        *(_DWORD *)(a4 + 24) = v16;
        v17 = 255;
        if ((unint64_t)v5 + v14 < v4 && (unint64_t)v15 >= v12)
          v17 = *v15;
        v8 = v17 | v16;
        *(_DWORD *)(a4 + 24) = v8;
        ++v14;
      }
      while ((_DWORD)v14 != 4);
    }
    else
    {
      v8 = bswap32(*v5);
    }
    v19 = v7 + 29;
    v18 = v7 == -29;
    *(_DWORD *)(a4 + 28) = v7 + 29;
    *(_QWORD *)a4 = ++v5;
    v9 |= v8 >> (v7 + 29);
    if (v7 == -29)
      v11 = 0;
    else
      v11 = v8 << (3 - v7);
    if (v18)
      v10 = 0;
    else
      v10 = v19;
  }
  else
  {
    v11 = 8 * v8;
  }
  *(_DWORD *)(a4 + 24) = v11;
  *(_BYTE *)a2 = v9;
  switch((char)v9)
  {
    case 1:
      if (v10 + 8 * ((int)v4 - (int)v5) > 9)
      {
        v20 = v11 >> 22;
        *(_DWORD *)(a4 + 28) = v10 - 10;
        if (v10 - 10 < 0)
        {
          v25 = *(_QWORD *)(a4 + 8);
          if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
            && v25 <= (unint64_t)v5)
          {
            v11 = bswap32(*v5);
          }
          else
          {
            v27 = 0;
            do
            {
              v28 = (unsigned __int8 *)v5 + v27;
              v29 = v11 << 8;
              *(_DWORD *)(a4 + 24) = v29;
              v30 = 255;
              if ((unint64_t)v5 + v27 < v4 && (unint64_t)v28 >= v25)
                v30 = *v28;
              v11 = v30 | v29;
              *(_DWORD *)(a4 + 24) = v11;
              ++v27;
            }
            while ((_DWORD)v27 != 4);
          }
          v31 = v11 << (10 - v10);
          v32 = v10 + 22;
          *(_DWORD *)(a4 + 28) = v32;
          *(_QWORD *)a4 = v5 + 1;
          v20 |= v11 >> v32;
          if (v32)
            v21 = v31;
          else
            v21 = 0;
        }
        else
        {
          v21 = v11 << 10;
        }
        *(_DWORD *)(a4 + 24) = v21;
        *(_WORD *)(a2 + 2) = v20;
        return;
      }
      exception = __cxa_allocate_exception(8uLL);
      v63 = "Cannot read radPattern.mSourceType";
      goto LABEL_99;
    case 2:
      if (v10 + 8 * ((int)v4 - (int)v5) <= 1)
      {
        exception = __cxa_allocate_exception(8uLL);
        v63 = "Cannot read radPattern.mDataLocationIndex";
        goto LABEL_99;
      }
      v22 = v11 >> 30;
      v23 = v10 - 2;
      *(_DWORD *)(a4 + 28) = v10 - 2;
      if (v10 - 2 < 0)
      {
        v26 = *(_QWORD *)(a4 + 8);
        if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
          && v26 <= (unint64_t)v5)
        {
          v11 = bswap32(*v5);
        }
        else
        {
          v33 = 0;
          do
          {
            v34 = (unsigned __int8 *)v5 + v33;
            v35 = v11 << 8;
            *(_DWORD *)(a4 + 24) = v35;
            v36 = 255;
            if ((unint64_t)v5 + v33 < v4 && (unint64_t)v34 >= v26)
              v36 = *v34;
            v11 = v36 | v35;
            *(_DWORD *)(a4 + 24) = v11;
            ++v33;
          }
          while ((_DWORD)v33 != 4);
        }
        *(_QWORD *)a4 = ++v5;
        v23 = v10 + 30;
        v22 |= v11 >> (v10 + 30);
        if (v10 == -30)
        {
          v37 = 0;
          v24 = 0;
          *(_BYTE *)(a2 + 4) = v22;
          *(_QWORD *)(a4 + 24) = 0xFFFFFFF700000000;
          goto LABEL_55;
        }
        v24 = v11 << (2 - v10);
      }
      else
      {
        v24 = 4 * v11;
      }
      *(_BYTE *)(a2 + 4) = v22;
      v37 = v24 >> 23;
      v38 = v23 - 9;
      *(_DWORD *)(a4 + 24) = v24;
      *(_DWORD *)(a4 + 28) = v23 - 9;
      if (v23 - 9 >= 0)
      {
        v39 = v24 << 9;
        goto LABEL_65;
      }
      v26 = *(_QWORD *)(a4 + 8);
LABEL_55:
      if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
        && v26 <= (unint64_t)v5)
      {
        v24 = bswap32(*v5);
      }
      else
      {
        v40 = 0;
        do
        {
          v41 = (unsigned __int8 *)v5 + v40;
          v42 = v24 << 8;
          *(_DWORD *)(a4 + 24) = v42;
          v43 = 255;
          if ((unint64_t)v5 + v40 < v4 && (unint64_t)v41 >= v26)
            v43 = *v41;
          v24 = v43 | v42;
          *(_DWORD *)(a4 + 24) = v24;
          ++v40;
        }
        while ((_DWORD)v40 != 4);
      }
      *(_QWORD *)a4 = ++v5;
      v38 = v23 + 23;
      v37 |= v24 >> (v23 + 23);
      if (v23 == -23)
      {
        v44 = 0;
        v39 = 0;
        *(_WORD *)(a2 + 6) = v37;
        *(_QWORD *)(a4 + 24) = 0xFFFFFFF700000000;
        goto LABEL_69;
      }
      v39 = v24 << (9 - v23);
LABEL_65:
      *(_WORD *)(a2 + 6) = v37;
      v44 = v39 >> 23;
      v45 = v38 - 9;
      *(_DWORD *)(a4 + 24) = v39;
      *(_DWORD *)(a4 + 28) = v38 - 9;
      if (v38 - 9 >= 0)
      {
        v46 = v39 << 9;
        goto LABEL_83;
      }
      v26 = *(_QWORD *)(a4 + 8);
LABEL_69:
      if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
        && v26 <= (unint64_t)v5)
      {
        v39 = bswap32(*v5);
      }
      else
      {
        v47 = 0;
        do
        {
          v48 = (unsigned __int8 *)v5 + v47;
          v49 = v39 << 8;
          *(_DWORD *)(a4 + 24) = v49;
          v50 = 255;
          if ((unint64_t)v5 + v47 < v4 && (unint64_t)v48 >= v26)
            v50 = *v48;
          v39 = v50 | v49;
          *(_DWORD *)(a4 + 24) = v39;
          ++v47;
        }
        while ((_DWORD)v47 != 4);
      }
      v51 = v39 << (9 - v38);
      v52 = v38 + 23;
      *(_DWORD *)(a4 + 28) = v52;
      *(_QWORD *)a4 = ++v5;
      v44 |= v39 >> v52;
      if (v52)
        v46 = v51;
      else
        v46 = 0;
      if (v52)
        v45 = v52;
      else
        v45 = 0;
LABEL_83:
      *(_DWORD *)(a4 + 24) = v46;
      *(_WORD *)(a2 + 8) = v44;
      if (v45 + 8 * ((int)v4 - (int)v5) <= 9)
      {
        exception = __cxa_allocate_exception(8uLL);
        v63 = "Cannot read radPattern.mFallbackCustomIR.mSourceType";
LABEL_99:
        *exception = v63;
        __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
      }
      v53 = v46 >> 22;
      *(_DWORD *)(a4 + 28) = v45 - 10;
      if (v45 - 10 < 0)
      {
        v55 = *(_QWORD *)(a4 + 8);
        if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
          && v55 <= (unint64_t)v5)
        {
          v46 = bswap32(*v5);
        }
        else
        {
          v56 = 0;
          do
          {
            v57 = (unsigned __int8 *)v5 + v56;
            v58 = v46 << 8;
            *(_DWORD *)(a4 + 24) = v58;
            v59 = 255;
            if ((unint64_t)v5 + v56 < v4 && (unint64_t)v57 >= v55)
              v59 = *v57;
            v46 = v59 | v58;
            *(_DWORD *)(a4 + 24) = v46;
            ++v56;
          }
          while ((_DWORD)v56 != 4);
        }
        v60 = v46 << (10 - v45);
        v61 = v45 + 22;
        *(_DWORD *)(a4 + 28) = v61;
        *(_QWORD *)a4 = v5 + 1;
        v53 |= v46 >> v61;
        if (v61)
          v54 = v60;
        else
          v54 = 0;
      }
      else
      {
        v54 = v46 << 10;
      }
      *(_DWORD *)(a4 + 24) = v54;
      *(_WORD *)(a2 + 10) = v53;
      return;
    case 3:
      APAC::MetadataBitStreamParser::parseParametricRadiationPattern(a1, a2 + 16, a3, a4);
      return;
    case 4:
      APAC::MetadataBitStreamParser::parseHOADirectivityModel(a1, a2 + 176, a3, a4);
      return;
    default:
      return;
  }
}

void APAC::MetadataBitStreamParser::parseHOARenderingMatrix(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned int v64;
  int v65;
  _QWORD *exception;
  const char *v67;

  v4 = *(_QWORD *)(a4 + 16);
  v5 = *(unsigned int **)a4;
  v6 = v4 - *(_QWORD *)a4;
  v7 = *(_DWORD *)(a4 + 28);
  if (v7 + 8 * (int)v6 <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v67 = "Cannot read matrix.mDataLocationIndex";
    goto LABEL_105;
  }
  v10 = *(_DWORD *)(a4 + 24);
  v11 = v10 >> 30;
  v12 = v7 - 2;
  *(_DWORD *)(a4 + 28) = v7 - 2;
  if (v7 - 2 < 0)
  {
    v14 = *(_QWORD *)(a4 + 8);
    if ((v6 & ~(v6 >> 63) & 0xFFFFFFFC) == 0 || v14 > (unint64_t)v5)
    {
      v16 = 0;
      do
      {
        v17 = (unsigned __int8 *)v5 + v16;
        v18 = v10 << 8;
        *(_DWORD *)(a4 + 24) = v18;
        v19 = 255;
        if ((unint64_t)v5 + v16 < v4 && (unint64_t)v17 >= v14)
          v19 = *v17;
        v10 = v19 | v18;
        *(_DWORD *)(a4 + 24) = v10;
        ++v16;
      }
      while ((_DWORD)v16 != 4);
    }
    else
    {
      v10 = bswap32(*v5);
    }
    v20 = v10 << (2 - v7);
    v21 = v7 + 30;
    *(_DWORD *)(a4 + 28) = v21;
    *(_QWORD *)a4 = ++v5;
    v11 |= v10 >> v21;
    if (v21)
      v13 = v20;
    else
      v13 = 0;
    if (v21)
      v12 = v21;
    else
      v12 = 0;
  }
  else
  {
    v13 = 4 * v10;
  }
  *(_DWORD *)(a4 + 24) = v13;
  *(_BYTE *)a2 = v11;
  if (v11 == 2)
  {
LABEL_23:
    v22 = v13 >> 23;
    v23 = v12 - 9;
    *(_DWORD *)(a4 + 28) = v12 - 9;
    if (v12 - 9 < 0)
    {
      v28 = *(_QWORD *)(a4 + 8);
      if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
        && v28 <= (unint64_t)v5)
      {
        v13 = bswap32(*v5);
      }
      else
      {
        v29 = 0;
        do
        {
          v30 = (unsigned __int8 *)v5 + v29;
          v31 = v13 << 8;
          *(_DWORD *)(a4 + 24) = v31;
          v32 = 255;
          if ((unint64_t)v5 + v29 < v4 && (unint64_t)v30 >= v28)
            v32 = *v30;
          v13 = v32 | v31;
          *(_DWORD *)(a4 + 24) = v13;
          ++v29;
        }
        while ((_DWORD)v29 != 4);
      }
      *(_QWORD *)a4 = ++v5;
      v23 = v12 + 23;
      v22 |= v13 >> (v12 + 23);
      if (v12 == -23)
      {
        v33 = 0;
        v24 = 0;
        *(_WORD *)(a2 + 2) = v22;
        *(_QWORD *)(a4 + 24) = 0xFFFFFFF700000000;
        goto LABEL_45;
      }
      v24 = v13 << (9 - v12);
    }
    else
    {
      v24 = v13 << 9;
    }
    *(_WORD *)(a2 + 2) = v22;
    v33 = v24 >> 23;
    *(_DWORD *)(a4 + 24) = v24;
    *(_DWORD *)(a4 + 28) = v23 - 9;
    if (v23 - 9 >= 0)
    {
      v34 = v24 << 9;
LABEL_56:
      *(_DWORD *)(a4 + 24) = v34;
      *(_WORD *)(a2 + 4) = v33;
      return;
    }
    v28 = *(_QWORD *)(a4 + 8);
LABEL_45:
    if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
      && v28 <= (unint64_t)v5)
    {
      v24 = bswap32(*v5);
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = (unsigned __int8 *)v5 + v36;
        v38 = v24 << 8;
        *(_DWORD *)(a4 + 24) = v38;
        v39 = 255;
        if ((unint64_t)v5 + v36 < v4 && (unint64_t)v37 >= v28)
          v39 = *v37;
        v24 = v39 | v38;
        *(_DWORD *)(a4 + 24) = v24;
        ++v36;
      }
      while ((_DWORD)v36 != 4);
    }
    *(_DWORD *)(a4 + 28) = v23 + 23;
    *(_QWORD *)a4 = v5 + 1;
    v33 |= v24 >> (v23 + 23);
    if (v23 == -23)
      v34 = 0;
    else
      v34 = v24 << (9 - v23);
    goto LABEL_56;
  }
  if (v11 == 1)
  {
    if (v12 + 8 * ((int)v4 - (int)v5) <= 3)
    {
      exception = __cxa_allocate_exception(8uLL);
      v67 = "Cannot read matrix.mHOAOrder";
    }
    else
    {
      v25 = v13 >> 28;
      v26 = v12 - 4;
      *(_DWORD *)(a4 + 28) = v12 - 4;
      if (v12 - 4 < 0)
      {
        v35 = *(_QWORD *)(a4 + 8);
        if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
          && v35 <= (unint64_t)v5)
        {
          v13 = bswap32(*v5);
        }
        else
        {
          v40 = 0;
          do
          {
            v41 = (unsigned __int8 *)v5 + v40;
            v42 = v13 << 8;
            *(_DWORD *)(a4 + 24) = v42;
            v43 = 255;
            if ((unint64_t)v5 + v40 < v4 && (unint64_t)v41 >= v35)
              v43 = *v41;
            v13 = v43 | v42;
            *(_DWORD *)(a4 + 24) = v13;
            ++v40;
          }
          while ((_DWORD)v40 != 4);
        }
        v45 = v12 + 28;
        v44 = v12 == -28;
        *(_DWORD *)(a4 + 28) = v12 + 28;
        *(_QWORD *)a4 = ++v5;
        v25 |= v13 >> (v12 + 28);
        if (v12 == -28)
          v27 = 0;
        else
          v27 = v13 << (4 - v12);
        if (v44)
          v26 = 0;
        else
          v26 = v45;
      }
      else
      {
        v27 = 16 * v13;
      }
      *(_DWORD *)(a4 + 24) = v27;
      *(_BYTE *)(a2 + 6) = v25;
      if (v26 + 8 * ((int)v4 - (int)v5) <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v67 = "Cannot read matrix.mChannelLayoutTag";
      }
      else
      {
        *(_DWORD *)(a4 + 28) = v26 - 32;
        if (v26 - 32 < 0)
        {
          v47 = *(_QWORD *)(a4 + 8);
          if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
            && v47 <= (unint64_t)v5)
          {
            v48 = bswap32(*v5);
          }
          else
          {
            v49 = 0;
            v48 = v27;
            do
            {
              v50 = (unsigned __int8 *)v5 + v49;
              v51 = v48 << 8;
              *(_DWORD *)(a4 + 24) = v51;
              v52 = 255;
              if ((unint64_t)v5 + v49 < v4 && (unint64_t)v50 >= v47)
                v52 = *v50;
              v48 = v52 | v51;
              *(_DWORD *)(a4 + 24) = v48;
              ++v49;
            }
            while ((_DWORD)v49 != 4);
          }
          *(_QWORD *)a4 = ++v5;
          v46 = (v48 >> v26) | v27;
          v27 = v48 << -(char)v26;
          if (!v26)
            v27 = 0;
          *(_DWORD *)(a4 + 24) = v27;
          *(_DWORD *)(a4 + 28) = v26;
        }
        else
        {
          v26 -= 32;
          v46 = v27;
        }
        *(_DWORD *)(a2 + 8) = v46;
        v53 = (v25 + 1) * (v25 + 1);
        v54 = (unsigned __int16)v46;
        if (a3)
        {
          std::vector<float>::resize((char **)(a2 + 16), (unsigned __int16)v46 * v53);
          v27 = *(_DWORD *)(a4 + 24);
          v26 = *(_DWORD *)(a4 + 28);
          v5 = *(unsigned int **)a4;
        }
        v55 = 0;
        v56 = *(_QWORD *)(a4 + 16);
        while (!(_DWORD)v54)
        {
LABEL_102:
          if (++v55 == v53)
            return;
        }
        v57 = 0;
        v58 = *(_QWORD *)(a4 + 8);
        v59 = *(_QWORD *)(a2 + 16);
        while (v26 + 8 * ((int)v56 - (int)v5) > 31)
        {
          *(_DWORD *)(a4 + 28) = v26 - 32;
          if (v26 - 32 < 0)
          {
            if ((((_DWORD)v56 - (_DWORD)v5) & ~((uint64_t)(v56 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
              && v58 <= (unint64_t)v5)
            {
              v61 = bswap32(*v5);
            }
            else
            {
              v62 = 0;
              v61 = v27;
              do
              {
                v63 = (unsigned __int8 *)v5 + v62;
                v64 = v61 << 8;
                *(_DWORD *)(a4 + 24) = v64;
                v65 = 255;
                if ((unint64_t)v5 + v62 < v56 && (unint64_t)v63 >= v58)
                  v65 = *v63;
                v61 = v65 | v64;
                *(_DWORD *)(a4 + 24) = v61;
                ++v62;
              }
              while ((_DWORD)v62 != 4);
            }
            *(_QWORD *)a4 = ++v5;
            v60 = (v61 >> v26) | v27;
            v27 = v61 << -(char)v26;
            if (!v26)
              v27 = 0;
            *(_DWORD *)(a4 + 24) = v27;
            *(_DWORD *)(a4 + 28) = v26;
          }
          else
          {
            v26 -= 32;
            v60 = v27;
          }
          *(_DWORD *)(v59 + 4 * (v57 + v55 * v54)) = v60;
          if (++v57 == v54)
            goto LABEL_102;
        }
        exception = __cxa_allocate_exception(8uLL);
        v67 = "Cannot read matrix.mCoeff[idx]";
      }
    }
LABEL_105:
    *exception = v67;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  if (!(_BYTE)v11)
    goto LABEL_23;
}

void APAC::MetadataBitStreamParser::parsePropagationDelay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  _QWORD *exception;
  const char *v39;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v39 = "Cannot read propDelay.mProcessingIndex";
    goto LABEL_58;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 30;
  v9 = v6 - 2;
  *(_DWORD *)(a3 + 28) = v6 - 2;
  if (v6 - 2 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v17 = v7 << (2 - v6);
    v18 = v6 + 30;
    *(_DWORD *)(a3 + 28) = v18;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> v18;
    if (v18)
      v10 = v17;
    else
      v10 = 0;
    if (v18)
      v9 = v18;
    else
      v9 = 0;
  }
  else
  {
    v10 = 4 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8;
  if ((_BYTE)v8)
  {
    if (v9 + 8 * ((int)v3 - (int)v4) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v39 = "Cannot read propDelay.mSpeedOfSoundProvided";
      goto LABEL_58;
    }
    v19 = v10 >> 31;
    v20 = v9 - 1;
    *(_DWORD *)(a3 + 28) = v9 - 1;
    if (v9 - 1 < 0)
    {
      v22 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v22 <= (unint64_t)v4)
      {
        v10 = bswap32(*v4);
      }
      else
      {
        v23 = 0;
        do
        {
          v24 = (unsigned __int8 *)v4 + v23;
          v25 = v10 << 8;
          *(_DWORD *)(a3 + 24) = v25;
          v26 = 255;
          if ((unint64_t)v4 + v23 < v3 && (unint64_t)v24 >= v22)
            v26 = *v24;
          v10 = v26 | v25;
          *(_DWORD *)(a3 + 24) = v10;
          ++v23;
        }
        while ((_DWORD)v23 != 4);
      }
      v27 = v10 << (1 - v9);
      v28 = v9 + 31;
      *(_DWORD *)(a3 + 28) = v28;
      *(_QWORD *)a3 = ++v4;
      v19 |= v10 >> v28;
      if (v28)
        v21 = v27;
      else
        v21 = 0;
      if (v28)
        v20 = v28;
      else
        v20 = 0;
    }
    else
    {
      v21 = 2 * v10;
    }
    *(_DWORD *)(a3 + 24) = v21;
    *(_BYTE *)(a2 + 1) = v19 != 0;
    if (v19)
    {
      if (v20 + 8 * ((int)v3 - (int)v4) > 15)
      {
        v29 = HIWORD(v21);
        *(_DWORD *)(a3 + 28) = v20 - 16;
        if (v20 - 16 < 0)
        {
          v31 = *(_QWORD *)(a3 + 8);
          if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
            && v31 <= (unint64_t)v4)
          {
            v21 = bswap32(*v4);
          }
          else
          {
            v32 = 0;
            do
            {
              v33 = (unsigned __int8 *)v4 + v32;
              v34 = v21 << 8;
              *(_DWORD *)(a3 + 24) = v34;
              v35 = 255;
              if ((unint64_t)v4 + v32 < v3 && (unint64_t)v33 >= v31)
                v35 = *v33;
              v21 = v35 | v34;
              *(_DWORD *)(a3 + 24) = v21;
              ++v32;
            }
            while ((_DWORD)v32 != 4);
          }
          v36 = v21 << (16 - v20);
          v37 = v20 + 16;
          *(_DWORD *)(a3 + 28) = v37;
          *(_QWORD *)a3 = v4 + 1;
          v29 |= v21 >> v37;
          if (v37)
            v30 = v36;
          else
            v30 = 0;
        }
        else
        {
          v30 = v21 << 16;
        }
        *(_DWORD *)(a3 + 24) = v30;
        *(_WORD *)(a2 + 2) = v29;
        return;
      }
      exception = __cxa_allocate_exception(8uLL);
      v39 = "Cannot read propDelay.mSpeedOfSound";
LABEL_58:
      *exception = v39;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
  }
}

void APAC::MetadataBitStreamParser::parseParametricRadiationPattern(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  unsigned __int8 *v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  unsigned __int8 *v118;
  unsigned int v119;
  int v120;
  BOOL v121;
  int v122;
  int v123;
  unsigned int v124;
  int v125;
  int v126;
  unint64_t v127;
  uint64_t v128;
  unsigned __int8 *v129;
  unsigned int v130;
  int v131;
  int v132;
  unint64_t v133;
  unsigned int v134;
  uint64_t v135;
  unsigned __int8 *v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  unsigned __int8 *v141;
  int v142;
  int v143;
  _QWORD *exception;
  const char *v145;

  v4 = *(_QWORD *)(a4 + 16);
  v5 = *(unsigned int **)a4;
  v6 = v4 - *(_QWORD *)a4;
  v7 = *(_DWORD *)(a4 + 28);
  if (v7 + 8 * (int)v6 <= 4)
  {
    exception = __cxa_allocate_exception(8uLL);
    v145 = "Cannot read parametric.mDirectivityModel";
    goto LABEL_232;
  }
  v10 = *(_DWORD *)(a4 + 24);
  v11 = v10 >> 27;
  v12 = v7 - 5;
  *(_DWORD *)(a4 + 28) = v7 - 5;
  if (v7 - 5 < 0)
  {
    v14 = *(_QWORD *)(a4 + 8);
    if ((v6 & ~(v6 >> 63) & 0xFFFFFFFC) == 0 || v14 > (unint64_t)v5)
    {
      v16 = 0;
      do
      {
        v17 = (unsigned __int8 *)v5 + v16;
        v18 = v10 << 8;
        *(_DWORD *)(a4 + 24) = v18;
        v19 = 255;
        if ((unint64_t)v5 + v16 < v4 && (unint64_t)v17 >= v14)
          v19 = *v17;
        v10 = v19 | v18;
        *(_DWORD *)(a4 + 24) = v10;
        ++v16;
      }
      while ((_DWORD)v16 != 4);
    }
    else
    {
      v10 = bswap32(*v5);
    }
    v21 = v7 + 27;
    v20 = v7 == -27;
    *(_DWORD *)(a4 + 28) = v7 + 27;
    *(_QWORD *)a4 = ++v5;
    v11 |= v10 >> (v7 + 27);
    if (v7 == -27)
      v13 = 0;
    else
      v13 = v10 << (5 - v7);
    if (v20)
      v12 = 0;
    else
      v12 = v21;
  }
  else
  {
    v13 = 32 * v10;
  }
  *(_DWORD *)(a4 + 24) = v13;
  *(_BYTE *)a2 = v11;
  switch((char)v11)
  {
    case 0:
      return;
    case 1:
      v22 = v13 >> 14;
      *(_DWORD *)(a4 + 28) = v12 - 18;
      if (v12 - 18 < 0)
      {
        v33 = *(_QWORD *)(a4 + 8);
        if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
          && v33 <= (unint64_t)v5)
        {
          v13 = bswap32(*v5);
        }
        else
        {
          v81 = 0;
          do
          {
            v82 = (unsigned __int8 *)v5 + v81;
            v83 = v13 << 8;
            *(_DWORD *)(a4 + 24) = v83;
            v84 = 255;
            if ((unint64_t)v5 + v81 < v4 && (unint64_t)v82 >= v33)
              v84 = *v82;
            v13 = v84 | v83;
            *(_DWORD *)(a4 + 24) = v13;
            ++v81;
          }
          while ((_DWORD)v81 != 4);
        }
        v85 = v13 << (18 - v12);
        v86 = v12 + 14;
        *(_DWORD *)(a4 + 28) = v86;
        *(_QWORD *)a4 = v5 + 1;
        v22 |= v13 >> v86;
        if (v86)
          v23 = v85;
        else
          v23 = 0;
      }
      else
      {
        v23 = v13 << 18;
      }
      *(_DWORD *)(a4 + 24) = v23;
      v87 = v22 + 1;
      *(_DWORD *)(a2 + 4) = v87;
      if (a3)
      {
        std::vector<unsigned int>::resize((std::vector<int> *)(a2 + 8), v22 + 1);
        std::vector<float>::resize((char **)(a2 + 32), v87);
        std::vector<float>::resize((char **)(a2 + 56), v87);
      }
      if (!(_DWORD)v87)
        return;
      v88 = 0;
      v90 = *(_DWORD *)(a4 + 24);
      v89 = *(_DWORD *)(a4 + 28);
      v92 = *(_QWORD *)(a4 + 8);
      v91 = *(_QWORD *)(a4 + 16);
      v93 = *(unsigned int **)a4;
      v94 = *(_QWORD *)(a2 + 8);
      v95 = *(_QWORD *)(a2 + 32);
      v96 = *(_QWORD *)(a2 + 56);
      while (1)
      {
        if (v89 + 8 * ((int)v91 - (int)v93) <= 17)
          goto LABEL_225;
        v97 = v90 >> 14;
        *(_DWORD *)(a4 + 28) = v89 - 18;
        if (v89 - 18 < 0)
        {
          if ((((_DWORD)v91 - (_DWORD)v93) & ~((uint64_t)(v91 - (_QWORD)v93) >> 63) & 0xFFFFFFFC) != 0
            && v92 <= (unint64_t)v93)
          {
            v90 = bswap32(*v93);
          }
          else
          {
            v98 = 0;
            do
            {
              v99 = (unsigned __int8 *)v93 + v98;
              v100 = v90 << 8;
              *(_DWORD *)(a4 + 24) = v100;
              v101 = 255;
              if ((unint64_t)v93 + v98 < v91 && (unint64_t)v99 >= v92)
                v101 = *v99;
              v90 = v101 | v100;
              *(_DWORD *)(a4 + 24) = v90;
              ++v98;
            }
            while ((_DWORD)v98 != 4);
          }
          v102 = v90 << (18 - v89);
          v89 += 14;
          *(_DWORD *)(a4 + 28) = v89;
          *(_QWORD *)a4 = ++v93;
          v97 |= v90 >> v89;
          if (v89)
            v90 = v102;
          else
            v90 = 0;
          if (!v89)
            v89 = 0;
        }
        else
        {
          v90 <<= 18;
          v89 -= 18;
        }
        *(_DWORD *)(a4 + 24) = v90;
        *(_DWORD *)(v94 + 4 * v88) = v97 + 1;
        v103 = v91 - (_QWORD)v93;
        if (v89 + 8 * ((int)v91 - (int)v93) <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v145 = "Cannot read parametric.mPattern[sb]";
          goto LABEL_232;
        }
        *(_DWORD *)(a4 + 28) = v89 - 32;
        if (v89 - 32 < 0)
        {
          if ((v103 & ~(v103 >> 63) & 0xFFFFFFFC) != 0 && v92 <= (unint64_t)v93)
          {
            v106 = bswap32(*v93);
          }
          else
          {
            v107 = 0;
            v106 = v90;
            do
            {
              v108 = (unsigned __int8 *)v93 + v107;
              v109 = v106 << 8;
              *(_DWORD *)(a4 + 24) = v109;
              v110 = 255;
              if ((unint64_t)v93 + v107 < v91 && (unint64_t)v108 >= v92)
                v110 = *v108;
              v106 = v110 | v109;
              *(_DWORD *)(a4 + 24) = v106;
              ++v107;
            }
            while ((_DWORD)v107 != 4);
          }
          *(_QWORD *)a4 = ++v93;
          v105 = (v106 >> v89) | v90;
          v90 = v106 << -(char)v89;
          if (!v89)
            v90 = 0;
          *(_DWORD *)(a4 + 24) = v90;
          *(_DWORD *)(a4 + 28) = v89;
          v103 = v91 - (_QWORD)v93;
          v104 = 8 * (v91 - (_DWORD)v93);
        }
        else
        {
          v104 = 8 * v103;
          v89 -= 32;
          v105 = v90;
        }
        *(_DWORD *)(v95 + 4 * v88) = v105;
        if (v104 + v89 <= 31)
          break;
        *(_DWORD *)(a4 + 28) = v89 - 32;
        if (v89 - 32 < 0)
        {
          if ((v103 & ~(v103 >> 63) & 0xFFFFFFFC) != 0 && v92 <= (unint64_t)v93)
          {
            v112 = bswap32(*v93);
          }
          else
          {
            v113 = 0;
            v112 = v90;
            do
            {
              v114 = (unsigned __int8 *)v93 + v113;
              v115 = v112 << 8;
              *(_DWORD *)(a4 + 24) = v115;
              v116 = 255;
              if ((unint64_t)v93 + v113 < v91 && (unint64_t)v114 >= v92)
                v116 = *v114;
              v112 = v116 | v115;
              *(_DWORD *)(a4 + 24) = v112;
              ++v113;
            }
            while ((_DWORD)v113 != 4);
          }
          *(_QWORD *)a4 = ++v93;
          v111 = (v112 >> v89) | v90;
          v90 = v112 << -(char)v89;
          if (!v89)
            v90 = 0;
          *(_DWORD *)(a4 + 24) = v90;
          *(_DWORD *)(a4 + 28) = v89;
        }
        else
        {
          v89 -= 32;
          v111 = v90;
        }
        *(_DWORD *)(v96 + 4 * v88++) = v111;
        if (v88 == v87)
          return;
      }
      exception = __cxa_allocate_exception(8uLL);
      v145 = "Cannot read parametric.mSharpness[sb]";
      goto LABEL_232;
    case 2:
      v24 = v13 >> 14;
      *(_DWORD *)(a4 + 28) = v12 - 18;
      if (v12 - 18 < 0)
      {
        v32 = *(_QWORD *)(a4 + 8);
        if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
          && v32 <= (unint64_t)v5)
        {
          v13 = bswap32(*v5);
        }
        else
        {
          v38 = 0;
          do
          {
            v39 = (unsigned __int8 *)v5 + v38;
            v40 = v13 << 8;
            *(_DWORD *)(a4 + 24) = v40;
            v41 = 255;
            if ((unint64_t)v5 + v38 < v4 && (unint64_t)v39 >= v32)
              v41 = *v39;
            v13 = v41 | v40;
            *(_DWORD *)(a4 + 24) = v13;
            ++v38;
          }
          while ((_DWORD)v38 != 4);
        }
        v42 = v13 << (18 - v12);
        v43 = v12 + 14;
        *(_DWORD *)(a4 + 28) = v43;
        *(_QWORD *)a4 = v5 + 1;
        v24 |= v13 >> v43;
        if (v43)
          v25 = v42;
        else
          v25 = 0;
      }
      else
      {
        v25 = v13 << 18;
      }
      *(_DWORD *)(a4 + 24) = v25;
      v44 = v24 + 1;
      *(_DWORD *)(a2 + 4) = v44;
      if (a3)
      {
        std::vector<unsigned int>::resize((std::vector<int> *)(a2 + 8), v24 + 1);
        std::vector<float>::resize((char **)(a2 + 80), v44);
        std::vector<float>::resize((char **)(a2 + 104), v44);
        std::vector<float>::resize((char **)(a2 + 128), v44);
      }
      if (!(_DWORD)v44)
        return;
      v45 = 0;
      v46 = *(_DWORD *)(a4 + 24);
      v47 = *(_DWORD *)(a4 + 28);
      v49 = *(_QWORD *)(a4 + 8);
      v48 = *(_QWORD *)(a4 + 16);
      v50 = *(unsigned int **)a4;
      v51 = *(_QWORD *)(a2 + 8);
      v52 = *(_QWORD *)(a2 + 80);
      v53 = *(_QWORD *)(a2 + 104);
      v54 = *(_QWORD *)(a2 + 128);
      do
      {
        if (v47 + 8 * ((int)v48 - (int)v50) <= 17)
        {
LABEL_225:
          exception = __cxa_allocate_exception(8uLL);
          v145 = "Cannot read parametric.mFrequencyForTheSubband[sb]";
          goto LABEL_232;
        }
        v55 = v46 >> 14;
        *(_DWORD *)(a4 + 28) = v47 - 18;
        if (v47 - 18 < 0)
        {
          if ((((_DWORD)v48 - (_DWORD)v50) & ~((uint64_t)(v48 - (_QWORD)v50) >> 63) & 0xFFFFFFFC) != 0
            && v49 <= (unint64_t)v50)
          {
            v46 = bswap32(*v50);
          }
          else
          {
            v56 = 0;
            do
            {
              v57 = (unsigned __int8 *)v50 + v56;
              v58 = v46 << 8;
              *(_DWORD *)(a4 + 24) = v58;
              v59 = 255;
              if ((unint64_t)v50 + v56 < v48 && (unint64_t)v57 >= v49)
                v59 = *v57;
              v46 = v59 | v58;
              *(_DWORD *)(a4 + 24) = v46;
              ++v56;
            }
            while ((_DWORD)v56 != 4);
          }
          v60 = v46 << (18 - v47);
          v47 += 14;
          *(_DWORD *)(a4 + 28) = v47;
          *(_QWORD *)a4 = ++v50;
          v55 |= v46 >> v47;
          if (v47)
            v46 = v60;
          else
            v46 = 0;
          if (!v47)
            v47 = 0;
        }
        else
        {
          v46 <<= 18;
          v47 -= 18;
        }
        *(_DWORD *)(a4 + 24) = v46;
        *(_DWORD *)(v51 + 4 * v45) = v55 + 1;
        v61 = v48 - (_QWORD)v50;
        if (v47 + 8 * ((int)v48 - (int)v50) <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v145 = "Cannot read parametric.mInnerAngle[sb]";
          goto LABEL_232;
        }
        *(_DWORD *)(a4 + 28) = v47 - 32;
        if (v47 - 32 < 0)
        {
          if ((v61 & ~(v61 >> 63) & 0xFFFFFFFC) != 0 && v49 <= (unint64_t)v50)
          {
            v64 = bswap32(*v50);
          }
          else
          {
            v65 = 0;
            v64 = v46;
            do
            {
              v66 = (unsigned __int8 *)v50 + v65;
              v67 = v64 << 8;
              *(_DWORD *)(a4 + 24) = v67;
              v68 = 255;
              if ((unint64_t)v50 + v65 < v48 && (unint64_t)v66 >= v49)
                v68 = *v66;
              v64 = v68 | v67;
              *(_DWORD *)(a4 + 24) = v64;
              ++v65;
            }
            while ((_DWORD)v65 != 4);
          }
          *(_QWORD *)a4 = ++v50;
          v63 = (v64 >> v47) | v46;
          v46 = v64 << -(char)v47;
          if (!v47)
            v46 = 0;
          *(_DWORD *)(a4 + 24) = v46;
          *(_DWORD *)(a4 + 28) = v47;
          v61 = v48 - (_QWORD)v50;
          v62 = 8 * (v48 - (_DWORD)v50);
        }
        else
        {
          v62 = 8 * v61;
          v47 -= 32;
          v63 = v46;
        }
        *(_DWORD *)(v52 + 4 * v45) = v63;
        if (v62 + v47 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v145 = "Cannot read parametric.mOuterAngle[sb]";
          goto LABEL_232;
        }
        *(_DWORD *)(a4 + 28) = v47 - 32;
        if (v47 - 32 < 0)
        {
          if ((v61 & ~(v61 >> 63) & 0xFFFFFFFC) != 0 && v49 <= (unint64_t)v50)
          {
            v70 = bswap32(*v50);
          }
          else
          {
            v71 = 0;
            v70 = v46;
            do
            {
              v72 = (unsigned __int8 *)v50 + v71;
              v73 = v70 << 8;
              *(_DWORD *)(a4 + 24) = v73;
              v74 = 255;
              if ((unint64_t)v50 + v71 < v48 && (unint64_t)v72 >= v49)
                v74 = *v72;
              v70 = v74 | v73;
              *(_DWORD *)(a4 + 24) = v70;
              ++v71;
            }
            while ((_DWORD)v71 != 4);
          }
          *(_QWORD *)a4 = ++v50;
          v69 = (v70 >> v47) | v46;
          v46 = v70 << -(char)v47;
          if (!v47)
            v46 = 0;
          *(_DWORD *)(a4 + 24) = v46;
          *(_DWORD *)(a4 + 28) = v47;
          v61 = v48 - (_QWORD)v50;
          v62 = 8 * (v48 - (_DWORD)v50);
        }
        else
        {
          v47 -= 32;
          v69 = v46;
        }
        *(_DWORD *)(v53 + 4 * v45) = v69;
        if (v62 + v47 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v145 = "Cannot read parametric.mOuterGain[sb]";
          goto LABEL_232;
        }
        *(_DWORD *)(a4 + 28) = v47 - 32;
        if (v47 - 32 < 0)
        {
          if ((v61 & ~(v61 >> 63) & 0xFFFFFFFC) != 0 && v49 <= (unint64_t)v50)
          {
            v76 = bswap32(*v50);
          }
          else
          {
            v77 = 0;
            v76 = v46;
            do
            {
              v78 = (unsigned __int8 *)v50 + v77;
              v79 = v76 << 8;
              *(_DWORD *)(a4 + 24) = v79;
              v80 = 255;
              if ((unint64_t)v50 + v77 < v48 && (unint64_t)v78 >= v49)
                v80 = *v78;
              v76 = v80 | v79;
              *(_DWORD *)(a4 + 24) = v76;
              ++v77;
            }
            while ((_DWORD)v77 != 4);
          }
          *(_QWORD *)a4 = ++v50;
          v75 = (v76 >> v47) | v46;
          v46 = v76 << -(char)v47;
          if (!v47)
            v46 = 0;
          *(_DWORD *)(a4 + 24) = v46;
          *(_DWORD *)(a4 + 28) = v47;
        }
        else
        {
          v47 -= 32;
          v75 = v46;
        }
        *(_DWORD *)(v54 + 4 * v45++) = v75;
      }
      while (v45 != v44);
      return;
    case 3:
      v26 = v4 - (_QWORD)v5;
      if (v12 + 8 * ((int)v4 - (int)v5) <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v145 = "Cannot read parametric.mSphereRadius";
        goto LABEL_232;
      }
      *(_DWORD *)(a4 + 28) = v12 - 32;
      if (v12 - 32 < 0)
      {
        v35 = v26 & ~(v26 >> 63);
        v36 = *(_QWORD *)(a4 + 8);
        if ((v35 & 0xFFFFFFFC) != 0 && v36 <= (unint64_t)v5)
        {
          v37 = bswap32(*v5);
        }
        else
        {
          v128 = 0;
          v37 = v13;
          do
          {
            v129 = (unsigned __int8 *)v5 + v128;
            v130 = v37 << 8;
            *(_DWORD *)(a4 + 24) = v130;
            v131 = 255;
            if ((unint64_t)v5 + v128 < v4 && (unint64_t)v129 >= v36)
              v131 = *v129;
            v37 = v131 | v130;
            *(_DWORD *)(a4 + 24) = v37;
            ++v128;
          }
          while ((_DWORD)v128 != 4);
        }
        *(_QWORD *)a4 = ++v5;
        v28 = (v37 >> v12) | v13;
        v13 = v37 << -(char)v12;
        if (!v12)
          v13 = 0;
        *(_DWORD *)(a4 + 24) = v13;
        *(_DWORD *)(a4 + 28) = v12;
        v26 = v4 - (_QWORD)v5;
        v27 = 8 * (v4 - (_DWORD)v5);
      }
      else
      {
        v27 = 8 * v26;
        v12 -= 32;
        v28 = v13;
      }
      *(_DWORD *)(a2 + 152) = v28;
      if (v27 + v12 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v145 = "Cannot read parametric.mCapOpeningAngle";
LABEL_232:
        *exception = v145;
        __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
      }
      *(_DWORD *)(a4 + 28) = v12 - 32;
      if (v12 - 32 < 0)
      {
        v132 = v26 & ~(v26 >> 63);
        v133 = *(_QWORD *)(a4 + 8);
        if ((v132 & 0xFFFFFFFC) != 0 && v133 <= (unint64_t)v5)
        {
          v134 = bswap32(*v5);
        }
        else
        {
          v135 = 0;
          v134 = v13;
          do
          {
            v136 = (unsigned __int8 *)v5 + v135;
            v137 = v134 << 8;
            *(_DWORD *)(a4 + 24) = v137;
            v138 = 255;
            if ((unint64_t)v5 + v135 < v4 && (unint64_t)v136 >= v133)
              v138 = *v136;
            v134 = v138 | v137;
            *(_DWORD *)(a4 + 24) = v134;
            ++v135;
          }
          while ((_DWORD)v135 != 4);
        }
        *(_QWORD *)a4 = v5 + 1;
        v13 |= v134 >> v12;
        v139 = v134 << -(char)v12;
        if (!v12)
          v139 = 0;
        *(_DWORD *)(a4 + 24) = v139;
        *(_DWORD *)(a4 + 28) = v12;
      }
      *(_DWORD *)(a2 + 156) = v13;
      return;
    default:
      v29 = v13 >> 15;
      v30 = v12 - 17;
      *(_DWORD *)(a4 + 28) = v12 - 17;
      if (v12 - 17 < 0)
      {
        v34 = *(_QWORD *)(a4 + 8);
        if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
          && v34 <= (unint64_t)v5)
        {
          v13 = bswap32(*v5);
        }
        else
        {
          v117 = 0;
          do
          {
            v118 = (unsigned __int8 *)v5 + v117;
            v119 = v13 << 8;
            *(_DWORD *)(a4 + 24) = v119;
            v120 = 255;
            if ((unint64_t)v5 + v117 < v4 && (unint64_t)v118 >= v34)
              v120 = *v118;
            v13 = v120 | v119;
            *(_DWORD *)(a4 + 24) = v13;
            ++v117;
          }
          while ((_DWORD)v117 != 4);
        }
        v122 = v12 + 15;
        v121 = v12 == -15;
        *(_DWORD *)(a4 + 28) = v12 + 15;
        *(_QWORD *)a4 = ++v5;
        v29 |= v13 >> (v12 + 15);
        if (v12 == -15)
          v31 = 0;
        else
          v31 = v13 << (17 - v12);
        if (v121)
          v30 = 0;
        else
          v30 = v122;
      }
      else
      {
        v31 = v13 << 17;
      }
      *(_DWORD *)(a4 + 24) = v31;
      v123 = 8 * v29 + 8;
      v124 = v123 - v30;
      if (v123 > v30)
      {
        *(_QWORD *)(a4 + 24) = 0;
        v31 = 0;
        v30 = 0;
        if (v124 >= 0x20)
        {
          v5 = (unsigned int *)((char *)v5 + ((v124 >> 3) & 0x1FFFFFFC));
          *(_QWORD *)a4 = v5;
          v123 = v124 & 0x1F;
        }
        else
        {
          v123 = v124;
        }
      }
      if ((v123 - 33) >= 0xFFFFFFE0)
      {
        v125 = v30 - v123;
        *(_DWORD *)(a4 + 28) = v30 - v123;
        if (v30 - v123 < 0)
        {
          v127 = *(_QWORD *)(a4 + 8);
          if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
            && v127 <= (unint64_t)v5)
          {
            v31 = bswap32(*v5);
          }
          else
          {
            v140 = 0;
            do
            {
              v141 = (unsigned __int8 *)v5 + v140;
              v142 = v31 << 8;
              *(_DWORD *)(a4 + 24) = v142;
              v143 = 255;
              if ((unint64_t)v5 + v140 < v4 && (unint64_t)v141 >= v127)
                v143 = *v141;
              v31 = v143 | v142;
              *(_DWORD *)(a4 + 24) = v31;
              ++v140;
            }
            while ((_DWORD)v140 != 4);
          }
          *(_DWORD *)(a4 + 28) = v125 + 32;
          *(_QWORD *)a4 = v5 + 1;
          if (v125 == -32)
            v126 = 0;
          else
            v126 = v31 << -(char)v125;
        }
        else
        {
          v126 = v31 << v123;
        }
        *(_DWORD *)(a4 + 24) = v126;
      }
      return;
  }
}

void APAC::MetadataBitStreamParser::parseHOADirectivityModel(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  int v53;
  _QWORD *exception;

  v7 = *(_DWORD *)(a4 + 24);
  v6 = *(_DWORD *)(a4 + 28);
  v8 = v7 >> 22;
  v9 = v6 - 10;
  *(_DWORD *)(a4 + 28) = v6 - 10;
  if (v6 - 10 < 0)
  {
    v12 = *(_QWORD *)(a4 + 8);
    v11 = *(_QWORD *)(a4 + 16);
    v13 = *(unsigned int **)a4;
    if ((((_DWORD)v11 - *(_DWORD *)a4) & ~((uint64_t)(v11 - *(_QWORD *)a4) >> 63) & 0xFFFFFFFC) == 0
      || v12 > (unint64_t)v13)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v13 + v15;
        v17 = v7 << 8;
        *(_DWORD *)(a4 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v13 + v15 < v11 && (unint64_t)v16 >= v12)
          v18 = *v16;
        v7 = v18 | v17;
        *(_DWORD *)(a4 + 24) = v7;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v7 = bswap32(*v13);
    }
    v19 = v7 << (10 - v6);
    v20 = v6 + 22;
    *(_DWORD *)(a4 + 28) = v20;
    *(_QWORD *)a4 = v13 + 1;
    v8 |= v7 >> v20;
    if (v20)
      v10 = v19;
    else
      v10 = 0;
    if (v20)
      v9 = v20;
    else
      v9 = 0;
  }
  else
  {
    v10 = v7 << 10;
  }
  *(_DWORD *)(a4 + 24) = v10;
  v21 = __CFADD__(v8, 1);
  v22 = v8 + 1;
  *(_WORD *)a2 = v22;
  if (v21)
  {
    if ((a3 & 1) == 0)
      goto LABEL_45;
    v23 = 0;
    goto LABEL_44;
  }
  v24 = 0;
  v26 = *(_QWORD *)(a4 + 8);
  v25 = *(_QWORD *)(a4 + 16);
  v27 = *(unsigned int **)a4;
  v28 = *(unsigned __int16 **)(a2 + 8);
  do
  {
    v29 = v10 >> 19;
    *(_DWORD *)(a4 + 28) = v9 - 13;
    if (v9 - 13 < 0)
    {
      if ((((_DWORD)v25 - (_DWORD)v27) & ~((uint64_t)(v25 - (_QWORD)v27) >> 63) & 0xFFFFFFFC) == 0
        || v26 > (unint64_t)v27)
      {
        v31 = 0;
        do
        {
          v32 = (unsigned __int8 *)v27 + v31;
          v33 = v10 << 8;
          *(_DWORD *)(a4 + 24) = v33;
          v34 = 255;
          if ((unint64_t)v27 + v31 < v25 && (unint64_t)v32 >= v26)
            v34 = *v32;
          v10 = v34 | v33;
          *(_DWORD *)(a4 + 24) = v10;
          ++v31;
        }
        while ((_DWORD)v31 != 4);
      }
      else
      {
        v10 = bswap32(*v27);
      }
      v35 = v10 << (13 - v9);
      v9 += 19;
      *(_DWORD *)(a4 + 28) = v9;
      *(_QWORD *)a4 = ++v27;
      v29 |= v10 >> v9;
      if (v9)
        v10 = v35;
      else
        v10 = 0;
      if (!v9)
        v9 = 0;
    }
    else
    {
      v10 <<= 13;
      v9 -= 13;
    }
    *(_DWORD *)(a4 + 24) = v10;
    v28[v24++] = v29 + 1;
  }
  while (v24 != v22);
  if (a3)
  {
    LODWORD(v23) = 0;
    do
    {
      v36 = *v28++;
      v23 = (v23 + v36);
      --v22;
    }
    while (v22);
LABEL_44:
    std::vector<float>::resize((char **)(a2 + 32), v23);
  }
LABEL_45:
  v37 = *(_QWORD *)(a2 + 32);
  v38 = *(_QWORD *)(a2 + 40);
  v39 = v38 - v37;
  if (v38 != v37)
  {
    v40 = 0;
    v41 = 0;
    v42 = v39 >> 2;
    v44 = *(_DWORD *)(a4 + 24);
    v43 = *(_DWORD *)(a4 + 28);
    v46 = *(_QWORD *)(a4 + 8);
    v45 = *(_QWORD *)(a4 + 16);
    v47 = *(unsigned int **)a4;
    do
    {
      if (v43 + 8 * ((int)v45 - (int)v47) <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = "Cannot read hoaModel.mCoeffs[n]";
        __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
      }
      *(_DWORD *)(a4 + 28) = v43 - 32;
      if (v43 - 32 < 0)
      {
        if ((((_DWORD)v45 - (_DWORD)v47) & ~((uint64_t)(v45 - (_QWORD)v47) >> 63) & 0xFFFFFFFC) != 0
          && v46 <= (unint64_t)v47)
        {
          v49 = bswap32(*v47);
        }
        else
        {
          v50 = 0;
          v49 = v44;
          do
          {
            v51 = (unsigned __int8 *)v47 + v50;
            v52 = v49 << 8;
            *(_DWORD *)(a4 + 24) = v52;
            v53 = 255;
            if ((unint64_t)v47 + v50 < v45 && (unint64_t)v51 >= v46)
              v53 = *v51;
            v49 = v53 | v52;
            *(_DWORD *)(a4 + 24) = v49;
            ++v50;
          }
          while ((_DWORD)v50 != 4);
        }
        *(_QWORD *)a4 = ++v47;
        v48 = (v49 >> v43) | v44;
        v44 = v49 << -(char)v43;
        if (!v43)
          v44 = 0;
        *(_DWORD *)(a4 + 24) = v44;
        *(_DWORD *)(a4 + 28) = v43;
      }
      else
      {
        v43 -= 32;
        v48 = v44;
      }
      *(_DWORD *)(v37 + 4 * v40) = v48;
      v40 = ++v41;
    }
    while (v42 > v41);
  }
}

void APAC::MetadataBitStreamParser::parseParametricReverb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned int v83;
  int v84;
  BOOL v85;
  int v86;
  int v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  unint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  unsigned int v110;
  int v111;
  BOOL v112;
  int v113;
  int v114;
  unint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unsigned __int8 *v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  unint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  unsigned int v127;
  int v128;
  BOOL v129;
  int v130;
  int v131;
  unint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned __int8 *v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  int v139;
  int v140;
  unint64_t v141;
  uint64_t v142;
  unsigned __int8 *v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  unint64_t v148;
  unsigned int v149;
  uint64_t v150;
  unsigned __int8 *v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  _QWORD *exception;
  const char *v156;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v156 = "Cannot read reverbParams.mPreDelay.mHasData";
    goto LABEL_301;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v6 + 31;
    v17 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> (v6 + 31);
    if (v6 == -31)
      v10 = 0;
    else
      v10 = v7 << (1 - v6);
    if (v17)
      v9 = 0;
    else
      v9 = v18;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)(a2 + 4) = v8 != 0;
  if (v8)
  {
    if (v9 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v156 = "Cannot read reverbParams.mPreDelay.mValue";
      goto LABEL_301;
    }
    *(_DWORD *)(a3 + 28) = v9 - 32;
    if (v9 - 32 < 0)
    {
      v20 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v20 <= (unint64_t)v4)
      {
        v21 = bswap32(*v4);
      }
      else
      {
        v22 = 0;
        v21 = v10;
        do
        {
          v23 = (unsigned __int8 *)v4 + v22;
          v24 = v21 << 8;
          *(_DWORD *)(a3 + 24) = v24;
          v25 = 255;
          if ((unint64_t)v4 + v22 < v3 && (unint64_t)v23 >= v20)
            v25 = *v23;
          v21 = v25 | v24;
          *(_DWORD *)(a3 + 24) = v21;
          ++v22;
        }
        while ((_DWORD)v22 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v19 = (v21 >> v9) | v10;
      v10 = v21 << -(char)v9;
      if (!v9)
        v10 = 0;
      *(_DWORD *)(a3 + 24) = v10;
      *(_DWORD *)(a3 + 28) = v9;
    }
    else
    {
      v9 -= 32;
      v19 = v10;
    }
    *(_DWORD *)a2 = v19;
  }
  if (v9 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v156 = "Cannot read reverbParams.mRT60.mHasData";
    goto LABEL_301;
  }
  v26 = v10 >> 31;
  v27 = v9 - 1;
  *(_DWORD *)(a3 + 28) = v9 - 1;
  if (v9 - 1 < 0)
  {
    v29 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v29 <= (unint64_t)v4)
    {
      v10 = bswap32(*v4);
    }
    else
    {
      v30 = 0;
      do
      {
        v31 = (unsigned __int8 *)v4 + v30;
        v32 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v32;
        v33 = 255;
        if ((unint64_t)v4 + v30 < v3 && (unint64_t)v31 >= v29)
          v33 = *v31;
        v10 = v33 | v32;
        *(_DWORD *)(a3 + 24) = v10;
        ++v30;
      }
      while ((_DWORD)v30 != 4);
    }
    v34 = v10 << (1 - v9);
    v35 = v9 + 31;
    *(_DWORD *)(a3 + 28) = v35;
    *(_QWORD *)a3 = ++v4;
    v26 |= v10 >> v35;
    if (v35)
      v28 = v34;
    else
      v28 = 0;
    if (v35)
      v27 = v35;
    else
      v27 = 0;
  }
  else
  {
    v28 = 2 * v10;
  }
  *(_DWORD *)(a3 + 24) = v28;
  *(_BYTE *)(a2 + 12) = v26 != 0;
  if (v26)
  {
    if (v27 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v156 = "Cannot read reverbParams.mRT60.mValue";
      goto LABEL_301;
    }
    *(_DWORD *)(a3 + 28) = v27 - 32;
    if (v27 - 32 < 0)
    {
      v37 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v37 <= (unint64_t)v4)
      {
        v38 = bswap32(*v4);
      }
      else
      {
        v39 = 0;
        v38 = v28;
        do
        {
          v40 = (unsigned __int8 *)v4 + v39;
          v41 = v38 << 8;
          *(_DWORD *)(a3 + 24) = v41;
          v42 = 255;
          if ((unint64_t)v4 + v39 < v3 && (unint64_t)v40 >= v37)
            v42 = *v40;
          v38 = v42 | v41;
          *(_DWORD *)(a3 + 24) = v38;
          ++v39;
        }
        while ((_DWORD)v39 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v36 = (v38 >> v27) | v28;
      v28 = v38 << -(char)v27;
      if (!v27)
        v28 = 0;
      *(_DWORD *)(a3 + 24) = v28;
      *(_DWORD *)(a3 + 28) = v27;
    }
    else
    {
      v27 -= 32;
      v36 = v28;
    }
    *(_DWORD *)(a2 + 8) = v36;
  }
  if (v27 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v156 = "Cannot read reverbParams.mWetDryMix.mHasData";
    goto LABEL_301;
  }
  v43 = v28 >> 31;
  v44 = v27 - 1;
  *(_DWORD *)(a3 + 28) = v27 - 1;
  if (v27 - 1 < 0)
  {
    v46 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v46 <= (unint64_t)v4)
    {
      v28 = bswap32(*v4);
    }
    else
    {
      v47 = 0;
      do
      {
        v48 = (unsigned __int8 *)v4 + v47;
        v49 = v28 << 8;
        *(_DWORD *)(a3 + 24) = v49;
        v50 = 255;
        if ((unint64_t)v4 + v47 < v3 && (unint64_t)v48 >= v46)
          v50 = *v48;
        v28 = v50 | v49;
        *(_DWORD *)(a3 + 24) = v28;
        ++v47;
      }
      while ((_DWORD)v47 != 4);
    }
    v51 = v28 << (1 - v27);
    v52 = v27 + 31;
    *(_DWORD *)(a3 + 28) = v52;
    *(_QWORD *)a3 = ++v4;
    v43 |= v28 >> v52;
    if (v52)
      v45 = v51;
    else
      v45 = 0;
    if (v52)
      v44 = v52;
    else
      v44 = 0;
  }
  else
  {
    v45 = 2 * v28;
  }
  *(_DWORD *)(a3 + 24) = v45;
  *(_BYTE *)(a2 + 20) = v43 != 0;
  if (v43)
  {
    if (v44 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v156 = "Cannot read reverbParams.mWetDryMix.mValue";
      goto LABEL_301;
    }
    *(_DWORD *)(a3 + 28) = v44 - 32;
    if (v44 - 32 < 0)
    {
      v54 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v54 <= (unint64_t)v4)
      {
        v55 = bswap32(*v4);
      }
      else
      {
        v56 = 0;
        v55 = v45;
        do
        {
          v57 = (unsigned __int8 *)v4 + v56;
          v58 = v55 << 8;
          *(_DWORD *)(a3 + 24) = v58;
          v59 = 255;
          if ((unint64_t)v4 + v56 < v3 && (unint64_t)v57 >= v54)
            v59 = *v57;
          v55 = v59 | v58;
          *(_DWORD *)(a3 + 24) = v55;
          ++v56;
        }
        while ((_DWORD)v56 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v53 = (v55 >> v44) | v45;
      v45 = v55 << -(char)v44;
      if (!v44)
        v45 = 0;
      *(_DWORD *)(a3 + 24) = v45;
      *(_DWORD *)(a3 + 28) = v44;
    }
    else
    {
      v44 -= 32;
      v53 = v45;
    }
    *(_DWORD *)(a2 + 16) = v53;
  }
  if (v44 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v156 = "Cannot read reverbParams.mReverbWidth.mHasData";
    goto LABEL_301;
  }
  v60 = v45 >> 31;
  v61 = v44 - 1;
  *(_DWORD *)(a3 + 28) = v44 - 1;
  if (v44 - 1 < 0)
  {
    v63 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v63 <= (unint64_t)v4)
    {
      v45 = bswap32(*v4);
    }
    else
    {
      v64 = 0;
      do
      {
        v65 = (unsigned __int8 *)v4 + v64;
        v66 = v45 << 8;
        *(_DWORD *)(a3 + 24) = v66;
        v67 = 255;
        if ((unint64_t)v4 + v64 < v3 && (unint64_t)v65 >= v63)
          v67 = *v65;
        v45 = v67 | v66;
        *(_DWORD *)(a3 + 24) = v45;
        ++v64;
      }
      while ((_DWORD)v64 != 4);
    }
    v68 = v45 << (1 - v44);
    v69 = v44 + 31;
    *(_DWORD *)(a3 + 28) = v69;
    *(_QWORD *)a3 = ++v4;
    v60 |= v45 >> v69;
    if (v69)
      v62 = v68;
    else
      v62 = 0;
    if (v69)
      v61 = v69;
    else
      v61 = 0;
  }
  else
  {
    v62 = 2 * v45;
  }
  *(_DWORD *)(a3 + 24) = v62;
  *(_BYTE *)(a2 + 28) = v60 != 0;
  if (v60)
  {
    if (v61 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v156 = "Cannot read reverbParams.mReverbWidth.mValue";
      goto LABEL_301;
    }
    *(_DWORD *)(a3 + 28) = v61 - 32;
    if (v61 - 32 < 0)
    {
      v71 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v71 <= (unint64_t)v4)
      {
        v72 = bswap32(*v4);
      }
      else
      {
        v73 = 0;
        v72 = v62;
        do
        {
          v74 = (unsigned __int8 *)v4 + v73;
          v75 = v72 << 8;
          *(_DWORD *)(a3 + 24) = v75;
          v76 = 255;
          if ((unint64_t)v4 + v73 < v3 && (unint64_t)v74 >= v71)
            v76 = *v74;
          v72 = v76 | v75;
          *(_DWORD *)(a3 + 24) = v72;
          ++v73;
        }
        while ((_DWORD)v73 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v70 = (v72 >> v61) | v62;
      v62 = v72 << -(char)v61;
      if (!v61)
        v62 = 0;
      *(_DWORD *)(a3 + 24) = v62;
      *(_DWORD *)(a3 + 28) = v61;
    }
    else
    {
      v61 -= 32;
      v70 = v62;
    }
    *(_DWORD *)(a2 + 24) = v70;
  }
  if (v61 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v156 = "Cannot read reverbParams.mHFDampingCutoffFreq.mHasData";
    goto LABEL_301;
  }
  v77 = v62 >> 31;
  v78 = v61 - 1;
  *(_DWORD *)(a3 + 28) = v61 - 1;
  if (v61 - 1 < 0)
  {
    v80 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v80 <= (unint64_t)v4)
    {
      v62 = bswap32(*v4);
    }
    else
    {
      v81 = 0;
      do
      {
        v82 = (unsigned __int8 *)v4 + v81;
        v83 = v62 << 8;
        *(_DWORD *)(a3 + 24) = v83;
        v84 = 255;
        if ((unint64_t)v4 + v81 < v3 && (unint64_t)v82 >= v80)
          v84 = *v82;
        v62 = v84 | v83;
        *(_DWORD *)(a3 + 24) = v62;
        ++v81;
      }
      while ((_DWORD)v81 != 4);
    }
    v86 = v61 + 31;
    v85 = v61 == -31;
    *(_DWORD *)(a3 + 28) = v61 + 31;
    *(_QWORD *)a3 = ++v4;
    v77 |= v62 >> (v61 + 31);
    if (v61 == -31)
      v79 = 0;
    else
      v79 = v62 << (1 - v61);
    if (v85)
      v78 = 0;
    else
      v78 = v86;
  }
  else
  {
    v79 = 2 * v62;
  }
  *(_DWORD *)(a3 + 24) = v79;
  *(_BYTE *)(a2 + 36) = v77 != 0;
  if (v77)
  {
    if (v78 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v156 = "Cannot read reverbParams.mHFDampingCutoffFreq.mValue";
      goto LABEL_301;
    }
    *(_DWORD *)(a3 + 28) = v78 - 32;
    if (v78 - 32 < 0)
    {
      v88 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v88 <= (unint64_t)v4)
      {
        v89 = bswap32(*v4);
      }
      else
      {
        v90 = 0;
        v89 = v79;
        do
        {
          v91 = (unsigned __int8 *)v4 + v90;
          v92 = v89 << 8;
          *(_DWORD *)(a3 + 24) = v92;
          v93 = 255;
          if ((unint64_t)v4 + v90 < v3 && (unint64_t)v91 >= v88)
            v93 = *v91;
          v89 = v93 | v92;
          *(_DWORD *)(a3 + 24) = v89;
          ++v90;
        }
        while ((_DWORD)v90 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v87 = (v89 >> v78) | v79;
      v79 = v89 << -(char)v78;
      if (!v78)
        v79 = 0;
      *(_DWORD *)(a3 + 24) = v79;
      *(_DWORD *)(a3 + 28) = v78;
    }
    else
    {
      v78 -= 32;
      v87 = v79;
    }
    *(_DWORD *)(a2 + 32) = v87;
  }
  if (v78 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v156 = "Cannot read reverbParams.mEarlyReflectionOnly";
    goto LABEL_301;
  }
  v94 = v79 >> 31;
  v95 = v78 - 1;
  *(_DWORD *)(a3 + 28) = v78 - 1;
  if (v78 - 1 < 0)
  {
    v97 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v97 <= (unint64_t)v4)
    {
      v79 = bswap32(*v4);
    }
    else
    {
      v98 = 0;
      do
      {
        v99 = (unsigned __int8 *)v4 + v98;
        v100 = v79 << 8;
        *(_DWORD *)(a3 + 24) = v100;
        v101 = 255;
        if ((unint64_t)v4 + v98 < v3 && (unint64_t)v99 >= v97)
          v101 = *v99;
        v79 = v101 | v100;
        *(_DWORD *)(a3 + 24) = v79;
        ++v98;
      }
      while ((_DWORD)v98 != 4);
    }
    v102 = v79 << (1 - v78);
    v103 = v78 + 31;
    *(_DWORD *)(a3 + 28) = v103;
    *(_QWORD *)a3 = ++v4;
    v94 |= v79 >> v103;
    if (v103)
      v96 = v102;
    else
      v96 = 0;
    if (v103)
      v95 = v103;
    else
      v95 = 0;
  }
  else
  {
    v96 = 2 * v79;
  }
  *(_DWORD *)(a3 + 24) = v96;
  *(_BYTE *)(a2 + 40) = v94 != 0;
  if (v95 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v156 = "Cannot read reverbParams.mEarlyReflectionLevel.mHasData";
    goto LABEL_301;
  }
  v104 = v96 >> 31;
  v105 = v95 - 1;
  *(_DWORD *)(a3 + 28) = v95 - 1;
  if (v95 - 1 < 0)
  {
    v107 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v107 <= (unint64_t)v4)
    {
      v96 = bswap32(*v4);
    }
    else
    {
      v108 = 0;
      do
      {
        v109 = (unsigned __int8 *)v4 + v108;
        v110 = v96 << 8;
        *(_DWORD *)(a3 + 24) = v110;
        v111 = 255;
        if ((unint64_t)v4 + v108 < v3 && (unint64_t)v109 >= v107)
          v111 = *v109;
        v96 = v111 | v110;
        *(_DWORD *)(a3 + 24) = v96;
        ++v108;
      }
      while ((_DWORD)v108 != 4);
    }
    v113 = v95 + 31;
    v112 = v95 == -31;
    *(_DWORD *)(a3 + 28) = v95 + 31;
    *(_QWORD *)a3 = ++v4;
    v104 |= v96 >> (v95 + 31);
    if (v95 == -31)
      v106 = 0;
    else
      v106 = v96 << (1 - v95);
    if (v112)
      v105 = 0;
    else
      v105 = v113;
  }
  else
  {
    v106 = 2 * v96;
  }
  *(_DWORD *)(a3 + 24) = v106;
  *(_BYTE *)(a2 + 48) = v104 != 0;
  if (v104)
  {
    if (v105 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v156 = "Cannot read reverbParams.mEarlyReflectionLevel.mValue";
      goto LABEL_301;
    }
    *(_DWORD *)(a3 + 28) = v105 - 32;
    if (v105 - 32 < 0)
    {
      v115 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v115 <= (unint64_t)v4)
      {
        v116 = bswap32(*v4);
      }
      else
      {
        v117 = 0;
        v116 = v106;
        do
        {
          v118 = (unsigned __int8 *)v4 + v117;
          v119 = v116 << 8;
          *(_DWORD *)(a3 + 24) = v119;
          v120 = 255;
          if ((unint64_t)v4 + v117 < v3 && (unint64_t)v118 >= v115)
            v120 = *v118;
          v116 = v120 | v119;
          *(_DWORD *)(a3 + 24) = v116;
          ++v117;
        }
        while ((_DWORD)v117 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v114 = (v116 >> v105) | v106;
      v106 = v116 << -(char)v105;
      if (!v105)
        v106 = 0;
      *(_DWORD *)(a3 + 24) = v106;
      *(_DWORD *)(a3 + 28) = v105;
    }
    else
    {
      v105 -= 32;
      v114 = v106;
    }
    *(_DWORD *)(a2 + 44) = v114;
  }
  if (v105 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v156 = "Cannot read reverbParams.mEarlyReflectionTime.mHasData";
    goto LABEL_301;
  }
  v121 = v106 >> 31;
  v122 = v105 - 1;
  *(_DWORD *)(a3 + 28) = v105 - 1;
  if (v105 - 1 < 0)
  {
    v124 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v124 <= (unint64_t)v4)
    {
      v106 = bswap32(*v4);
    }
    else
    {
      v125 = 0;
      do
      {
        v126 = (unsigned __int8 *)v4 + v125;
        v127 = v106 << 8;
        *(_DWORD *)(a3 + 24) = v127;
        v128 = 255;
        if ((unint64_t)v4 + v125 < v3 && (unint64_t)v126 >= v124)
          v128 = *v126;
        v106 = v128 | v127;
        *(_DWORD *)(a3 + 24) = v106;
        ++v125;
      }
      while ((_DWORD)v125 != 4);
    }
    v130 = v105 + 31;
    v129 = v105 == -31;
    *(_DWORD *)(a3 + 28) = v105 + 31;
    *(_QWORD *)a3 = ++v4;
    v121 |= v106 >> (v105 + 31);
    if (v105 == -31)
      v123 = 0;
    else
      v123 = v106 << (1 - v105);
    if (v129)
      v122 = 0;
    else
      v122 = v130;
  }
  else
  {
    v123 = 2 * v106;
  }
  *(_DWORD *)(a3 + 24) = v123;
  *(_BYTE *)(a2 + 56) = v121 != 0;
  if (v121)
  {
    if (v122 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v156 = "Cannot read reverbParams.mEarlyReflectionTime.mValue";
      goto LABEL_301;
    }
    *(_DWORD *)(a3 + 28) = v122 - 32;
    if (v122 - 32 < 0)
    {
      v132 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v132 <= (unint64_t)v4)
      {
        v133 = bswap32(*v4);
      }
      else
      {
        v134 = 0;
        v133 = v123;
        do
        {
          v135 = (unsigned __int8 *)v4 + v134;
          v136 = v133 << 8;
          *(_DWORD *)(a3 + 24) = v136;
          v137 = 255;
          if ((unint64_t)v4 + v134 < v3 && (unint64_t)v135 >= v132)
            v137 = *v135;
          v133 = v137 | v136;
          *(_DWORD *)(a3 + 24) = v133;
          ++v134;
        }
        while ((_DWORD)v134 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v131 = (v133 >> v122) | v123;
      v123 = v133 << -(char)v122;
      if (!v122)
        v123 = 0;
      *(_DWORD *)(a3 + 24) = v123;
      *(_DWORD *)(a3 + 28) = v122;
    }
    else
    {
      v122 -= 32;
      v131 = v123;
    }
    *(_DWORD *)(a2 + 52) = v131;
  }
  if (v122 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v156 = "Cannot read reverbParams.mLateReverbLevel.mHasData";
    goto LABEL_301;
  }
  v138 = v123 >> 31;
  v139 = v122 - 1;
  *(_DWORD *)(a3 + 28) = v122 - 1;
  if (v122 - 1 < 0)
  {
    v141 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v141 <= (unint64_t)v4)
    {
      v123 = bswap32(*v4);
    }
    else
    {
      v142 = 0;
      do
      {
        v143 = (unsigned __int8 *)v4 + v142;
        v144 = v123 << 8;
        *(_DWORD *)(a3 + 24) = v144;
        v145 = 255;
        if ((unint64_t)v4 + v142 < v3 && (unint64_t)v143 >= v141)
          v145 = *v143;
        v123 = v145 | v144;
        *(_DWORD *)(a3 + 24) = v123;
        ++v142;
      }
      while ((_DWORD)v142 != 4);
    }
    v146 = v123 << (1 - v122);
    v147 = v122 + 31;
    *(_DWORD *)(a3 + 28) = v147;
    *(_QWORD *)a3 = ++v4;
    v138 |= v123 >> v147;
    if (v147)
      v140 = v146;
    else
      v140 = 0;
    if (v147)
      v139 = v147;
    else
      v139 = 0;
  }
  else
  {
    v140 = 2 * v123;
  }
  *(_DWORD *)(a3 + 24) = v140;
  *(_BYTE *)(a2 + 64) = v138 != 0;
  if (v138)
  {
    if (v139 + 8 * ((int)v3 - (int)v4) > 31)
    {
      *(_DWORD *)(a3 + 28) = v139 - 32;
      if (v139 - 32 < 0)
      {
        v148 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v148 <= (unint64_t)v4)
        {
          v149 = bswap32(*v4);
        }
        else
        {
          v150 = 0;
          v149 = v140;
          do
          {
            v151 = (unsigned __int8 *)v4 + v150;
            v152 = v149 << 8;
            *(_DWORD *)(a3 + 24) = v152;
            v153 = 255;
            if ((unint64_t)v4 + v150 < v3 && (unint64_t)v151 >= v148)
              v153 = *v151;
            v149 = v153 | v152;
            *(_DWORD *)(a3 + 24) = v149;
            ++v150;
          }
          while ((_DWORD)v150 != 4);
        }
        *(_QWORD *)a3 = v4 + 1;
        v140 |= v149 >> v139;
        v154 = v149 << -(char)v139;
        if (!v139)
          v154 = 0;
        *(_DWORD *)(a3 + 24) = v154;
        *(_DWORD *)(a3 + 28) = v139;
      }
      *(_DWORD *)(a2 + 60) = v140;
      return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v156 = "Cannot read reverbParams.mLateReverbLevel.mValue";
LABEL_301:
    *exception = v156;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  unint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned __int8 *v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  unint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unsigned int v117;
  int v118;
  BOOL v119;
  int v120;
  unsigned int v121;
  unint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned int v134;
  int v135;
  BOOL v136;
  int v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  unsigned __int8 *v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  _QWORD *exception;
  const char *v146;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v146 = "Cannot read pR.hasPreDelay";
    goto LABEL_285;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v6 + 31;
    v17 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> (v6 + 31);
    if (v6 == -31)
      v10 = 0;
    else
      v10 = v7 << (1 - v6);
    if (v17)
      v9 = 0;
    else
      v9 = v18;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8 != 0;
  if (v8)
  {
    if (v9 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v146 = "Cannot read pR.preDelayMSec";
      goto LABEL_285;
    }
    *(_DWORD *)(a3 + 28) = v9 - 32;
    if (v9 - 32 < 0)
    {
      v20 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v20 <= (unint64_t)v4)
      {
        v21 = bswap32(*v4);
      }
      else
      {
        v22 = 0;
        v21 = v10;
        do
        {
          v23 = (unsigned __int8 *)v4 + v22;
          v24 = v21 << 8;
          *(_DWORD *)(a3 + 24) = v24;
          v25 = 255;
          if ((unint64_t)v4 + v22 < v3 && (unint64_t)v23 >= v20)
            v25 = *v23;
          v21 = v25 | v24;
          *(_DWORD *)(a3 + 24) = v21;
          ++v22;
        }
        while ((_DWORD)v22 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v19 = (v21 >> v9) | v10;
      v10 = v21 << -(char)v9;
      if (!v9)
        v10 = 0;
      *(_DWORD *)(a3 + 24) = v10;
      *(_DWORD *)(a3 + 28) = v9;
    }
    else
    {
      v9 -= 32;
      v19 = v10;
    }
    *(_DWORD *)(a2 + 8) = v19;
  }
  if (v9 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v146 = "Cannot read pR.hasEarlyReflectionLevel";
    goto LABEL_285;
  }
  v26 = v10 >> 31;
  v27 = v9 - 1;
  *(_DWORD *)(a3 + 28) = v9 - 1;
  if (v9 - 1 < 0)
  {
    v29 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v29 <= (unint64_t)v4)
    {
      v10 = bswap32(*v4);
    }
    else
    {
      v30 = 0;
      do
      {
        v31 = (unsigned __int8 *)v4 + v30;
        v32 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v32;
        v33 = 255;
        if ((unint64_t)v4 + v30 < v3 && (unint64_t)v31 >= v29)
          v33 = *v31;
        v10 = v33 | v32;
        *(_DWORD *)(a3 + 24) = v10;
        ++v30;
      }
      while ((_DWORD)v30 != 4);
    }
    v34 = v10 << (1 - v9);
    v35 = v9 + 31;
    *(_DWORD *)(a3 + 28) = v35;
    *(_QWORD *)a3 = ++v4;
    v26 |= v10 >> v35;
    if (v35)
      v28 = v34;
    else
      v28 = 0;
    if (v35)
      v27 = v35;
    else
      v27 = 0;
  }
  else
  {
    v28 = 2 * v10;
  }
  *(_DWORD *)(a3 + 24) = v28;
  *(_BYTE *)(a2 + 1) = v26 != 0;
  if (v26)
  {
    if (v27 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v146 = "Cannot read pR.earlyReflectionLevel";
      goto LABEL_285;
    }
    *(_DWORD *)(a3 + 28) = v27 - 32;
    if (v27 - 32 < 0)
    {
      v37 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v37 <= (unint64_t)v4)
      {
        v38 = bswap32(*v4);
      }
      else
      {
        v39 = 0;
        v38 = v28;
        do
        {
          v40 = (unsigned __int8 *)v4 + v39;
          v41 = v38 << 8;
          *(_DWORD *)(a3 + 24) = v41;
          v42 = 255;
          if ((unint64_t)v4 + v39 < v3 && (unint64_t)v40 >= v37)
            v42 = *v40;
          v38 = v42 | v41;
          *(_DWORD *)(a3 + 24) = v38;
          ++v39;
        }
        while ((_DWORD)v39 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v36 = (v38 >> v27) | v28;
      v28 = v38 << -(char)v27;
      if (!v27)
        v28 = 0;
      *(_DWORD *)(a3 + 24) = v28;
      *(_DWORD *)(a3 + 28) = v27;
    }
    else
    {
      v27 -= 32;
      v36 = v28;
    }
    *(_DWORD *)(a2 + 12) = v36;
  }
  if (v27 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v146 = "Cannot read pR.hasRT60";
    goto LABEL_285;
  }
  v43 = v28 >> 31;
  v44 = v27 - 1;
  *(_DWORD *)(a3 + 28) = v27 - 1;
  if (v27 - 1 < 0)
  {
    v46 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v46 <= (unint64_t)v4)
    {
      v28 = bswap32(*v4);
    }
    else
    {
      v47 = 0;
      do
      {
        v48 = (unsigned __int8 *)v4 + v47;
        v49 = v28 << 8;
        *(_DWORD *)(a3 + 24) = v49;
        v50 = 255;
        if ((unint64_t)v4 + v47 < v3 && (unint64_t)v48 >= v46)
          v50 = *v48;
        v28 = v50 | v49;
        *(_DWORD *)(a3 + 24) = v28;
        ++v47;
      }
      while ((_DWORD)v47 != 4);
    }
    v51 = v28 << (1 - v27);
    v52 = v27 + 31;
    *(_DWORD *)(a3 + 28) = v52;
    *(_QWORD *)a3 = ++v4;
    v43 |= v28 >> v52;
    if (v52)
      v45 = v51;
    else
      v45 = 0;
    if (v52)
      v44 = v52;
    else
      v44 = 0;
  }
  else
  {
    v45 = 2 * v28;
  }
  *(_DWORD *)(a3 + 24) = v45;
  *(_BYTE *)(a2 + 2) = v43 != 0;
  if (v43)
  {
    if (v44 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v146 = "Cannot read pR.RT60Msec";
      goto LABEL_285;
    }
    *(_DWORD *)(a3 + 28) = v44 - 32;
    if (v44 - 32 < 0)
    {
      v54 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v54 <= (unint64_t)v4)
      {
        v55 = bswap32(*v4);
      }
      else
      {
        v56 = 0;
        v55 = v45;
        do
        {
          v57 = (unsigned __int8 *)v4 + v56;
          v58 = v55 << 8;
          *(_DWORD *)(a3 + 24) = v58;
          v59 = 255;
          if ((unint64_t)v4 + v56 < v3 && (unint64_t)v57 >= v54)
            v59 = *v57;
          v55 = v59 | v58;
          *(_DWORD *)(a3 + 24) = v55;
          ++v56;
        }
        while ((_DWORD)v56 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v53 = (v55 >> v44) | v45;
      v45 = v55 << -(char)v44;
      if (!v44)
        v45 = 0;
      *(_DWORD *)(a3 + 24) = v45;
      *(_DWORD *)(a3 + 28) = v44;
    }
    else
    {
      v44 -= 32;
      v53 = v45;
    }
    *(_DWORD *)(a2 + 16) = v53;
  }
  if (v44 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v146 = "Cannot read pR.hasWetDryMix";
    goto LABEL_285;
  }
  v60 = v45 >> 31;
  v61 = v44 - 1;
  *(_DWORD *)(a3 + 28) = v44 - 1;
  if (v44 - 1 < 0)
  {
    v63 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v63 <= (unint64_t)v4)
    {
      v45 = bswap32(*v4);
    }
    else
    {
      v64 = 0;
      do
      {
        v65 = (unsigned __int8 *)v4 + v64;
        v66 = v45 << 8;
        *(_DWORD *)(a3 + 24) = v66;
        v67 = 255;
        if ((unint64_t)v4 + v64 < v3 && (unint64_t)v65 >= v63)
          v67 = *v65;
        v45 = v67 | v66;
        *(_DWORD *)(a3 + 24) = v45;
        ++v64;
      }
      while ((_DWORD)v64 != 4);
    }
    v68 = v45 << (1 - v44);
    v69 = v44 + 31;
    *(_DWORD *)(a3 + 28) = v69;
    *(_QWORD *)a3 = ++v4;
    v60 |= v45 >> v69;
    if (v69)
      v62 = v68;
    else
      v62 = 0;
    if (v69)
      v61 = v69;
    else
      v61 = 0;
  }
  else
  {
    v62 = 2 * v45;
  }
  *(_DWORD *)(a3 + 24) = v62;
  *(_BYTE *)(a2 + 3) = v60 != 0;
  if (v60)
  {
    if (v61 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v146 = "Cannot read pR.wetDryMix";
      goto LABEL_285;
    }
    *(_DWORD *)(a3 + 28) = v61 - 32;
    if (v61 - 32 < 0)
    {
      v71 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v71 <= (unint64_t)v4)
      {
        v72 = bswap32(*v4);
      }
      else
      {
        v73 = 0;
        v72 = v62;
        do
        {
          v74 = (unsigned __int8 *)v4 + v73;
          v75 = v72 << 8;
          *(_DWORD *)(a3 + 24) = v75;
          v76 = 255;
          if ((unint64_t)v4 + v73 < v3 && (unint64_t)v74 >= v71)
            v76 = *v74;
          v72 = v76 | v75;
          *(_DWORD *)(a3 + 24) = v72;
          ++v73;
        }
        while ((_DWORD)v73 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v70 = (v72 >> v61) | v62;
      v62 = v72 << -(char)v61;
      if (!v61)
        v62 = 0;
      *(_DWORD *)(a3 + 24) = v62;
      *(_DWORD *)(a3 + 28) = v61;
    }
    else
    {
      v61 -= 32;
      v70 = v62;
    }
    *(_DWORD *)(a2 + 20) = v70;
  }
  if (v61 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v146 = "Cannot read pR.hasReverbWidth";
    goto LABEL_285;
  }
  v77 = v62 >> 31;
  v78 = v61 - 1;
  *(_DWORD *)(a3 + 28) = v61 - 1;
  if (v61 - 1 < 0)
  {
    v80 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v80 <= (unint64_t)v4)
    {
      v62 = bswap32(*v4);
    }
    else
    {
      v81 = 0;
      do
      {
        v82 = (unsigned __int8 *)v4 + v81;
        v83 = v62 << 8;
        *(_DWORD *)(a3 + 24) = v83;
        v84 = 255;
        if ((unint64_t)v4 + v81 < v3 && (unint64_t)v82 >= v80)
          v84 = *v82;
        v62 = v84 | v83;
        *(_DWORD *)(a3 + 24) = v62;
        ++v81;
      }
      while ((_DWORD)v81 != 4);
    }
    v85 = v62 << (1 - v61);
    v86 = v61 + 31;
    *(_DWORD *)(a3 + 28) = v86;
    *(_QWORD *)a3 = ++v4;
    v77 |= v62 >> v86;
    if (v86)
      v79 = v85;
    else
      v79 = 0;
    if (v86)
      v78 = v86;
    else
      v78 = 0;
  }
  else
  {
    v79 = 2 * v62;
  }
  *(_DWORD *)(a3 + 24) = v79;
  *(_BYTE *)(a2 + 4) = v77 != 0;
  if (v77)
  {
    if (v78 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v146 = "Cannot read pR.reverbWidth";
      goto LABEL_285;
    }
    *(_DWORD *)(a3 + 28) = v78 - 32;
    if (v78 - 32 < 0)
    {
      v88 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v88 <= (unint64_t)v4)
      {
        v89 = bswap32(*v4);
      }
      else
      {
        v90 = 0;
        v89 = v79;
        do
        {
          v91 = (unsigned __int8 *)v4 + v90;
          v92 = v89 << 8;
          *(_DWORD *)(a3 + 24) = v92;
          v93 = 255;
          if ((unint64_t)v4 + v90 < v3 && (unint64_t)v91 >= v88)
            v93 = *v91;
          v89 = v93 | v92;
          *(_DWORD *)(a3 + 24) = v89;
          ++v90;
        }
        while ((_DWORD)v90 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v87 = (v89 >> v78) | v79;
      v79 = v89 << -(char)v78;
      if (!v78)
        v79 = 0;
      *(_DWORD *)(a3 + 24) = v79;
      *(_DWORD *)(a3 + 28) = v78;
    }
    else
    {
      v78 -= 32;
      v87 = v79;
    }
    *(_DWORD *)(a2 + 24) = v87;
  }
  if (v78 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v146 = "Cannot read pR.hasHighFrequencyDamping";
    goto LABEL_285;
  }
  v94 = v79 >> 31;
  v95 = v78 - 1;
  *(_DWORD *)(a3 + 28) = v78 - 1;
  if (v78 - 1 < 0)
  {
    v97 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v97 <= (unint64_t)v4)
    {
      v79 = bswap32(*v4);
    }
    else
    {
      v98 = 0;
      do
      {
        v99 = (unsigned __int8 *)v4 + v98;
        v100 = v79 << 8;
        *(_DWORD *)(a3 + 24) = v100;
        v101 = 255;
        if ((unint64_t)v4 + v98 < v3 && (unint64_t)v99 >= v97)
          v101 = *v99;
        v79 = v101 | v100;
        *(_DWORD *)(a3 + 24) = v79;
        ++v98;
      }
      while ((_DWORD)v98 != 4);
    }
    v102 = v79 << (1 - v78);
    v103 = v78 + 31;
    *(_DWORD *)(a3 + 28) = v103;
    *(_QWORD *)a3 = ++v4;
    v94 |= v79 >> v103;
    if (v103)
      v96 = v102;
    else
      v96 = 0;
    if (v103)
      v95 = v103;
    else
      v95 = 0;
  }
  else
  {
    v96 = 2 * v79;
  }
  *(_DWORD *)(a3 + 24) = v96;
  *(_BYTE *)(a2 + 5) = v94 != 0;
  if (v94)
  {
    if (v95 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v146 = "Cannot read pR.highFrequencyDamping";
      goto LABEL_285;
    }
    *(_DWORD *)(a3 + 28) = v95 - 32;
    if (v95 - 32 < 0)
    {
      v105 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v105 <= (unint64_t)v4)
      {
        v106 = bswap32(*v4);
      }
      else
      {
        v107 = 0;
        v106 = v96;
        do
        {
          v108 = (unsigned __int8 *)v4 + v107;
          v109 = v106 << 8;
          *(_DWORD *)(a3 + 24) = v109;
          v110 = 255;
          if ((unint64_t)v4 + v107 < v3 && (unint64_t)v108 >= v105)
            v110 = *v108;
          v106 = v110 | v109;
          *(_DWORD *)(a3 + 24) = v106;
          ++v107;
        }
        while ((_DWORD)v107 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v104 = (v106 >> v95) | v96;
      v96 = v106 << -(char)v95;
      if (!v95)
        v96 = 0;
      *(_DWORD *)(a3 + 24) = v96;
      *(_DWORD *)(a3 + 28) = v95;
    }
    else
    {
      v95 -= 32;
      v104 = v96;
    }
    *(_DWORD *)(a2 + 28) = v104;
  }
  if (v95 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v146 = "Cannot read pR.hasEarlyReflectionOnly";
    goto LABEL_285;
  }
  v111 = v96 >> 31;
  v112 = v95 - 1;
  *(_DWORD *)(a3 + 28) = v95 - 1;
  if (v95 - 1 < 0)
  {
    v114 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v114 <= (unint64_t)v4)
    {
      v96 = bswap32(*v4);
    }
    else
    {
      v115 = 0;
      do
      {
        v116 = (unsigned __int8 *)v4 + v115;
        v117 = v96 << 8;
        *(_DWORD *)(a3 + 24) = v117;
        v118 = 255;
        if ((unint64_t)v4 + v115 < v3 && (unint64_t)v116 >= v114)
          v118 = *v116;
        v96 = v118 | v117;
        *(_DWORD *)(a3 + 24) = v96;
        ++v115;
      }
      while ((_DWORD)v115 != 4);
    }
    v120 = v95 + 31;
    v119 = v95 == -31;
    *(_DWORD *)(a3 + 28) = v95 + 31;
    *(_QWORD *)a3 = ++v4;
    v111 |= v96 >> (v95 + 31);
    if (v95 == -31)
      v113 = 0;
    else
      v113 = v96 << (1 - v95);
    if (v119)
      v112 = 0;
    else
      v112 = v120;
  }
  else
  {
    v113 = 2 * v96;
  }
  *(_DWORD *)(a3 + 24) = v113;
  *(_BYTE *)(a2 + 6) = v111 != 0;
  if (v111)
  {
    if (v112 + 8 * ((int)v3 - (int)v4) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v146 = "Cannot read pR.earlyReflectionOnly";
      goto LABEL_285;
    }
    v121 = v113 >> 31;
    *(_DWORD *)(a3 + 28) = v112 - 1;
    if (v112 - 1 < 0)
    {
      v122 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v122 <= (unint64_t)v4)
      {
        v113 = bswap32(*v4);
      }
      else
      {
        v123 = 0;
        do
        {
          v124 = (unsigned __int8 *)v4 + v123;
          v125 = v113 << 8;
          *(_DWORD *)(a3 + 24) = v125;
          v126 = 255;
          if ((unint64_t)v4 + v123 < v3 && (unint64_t)v124 >= v122)
            v126 = *v124;
          v113 = v126 | v125;
          *(_DWORD *)(a3 + 24) = v113;
          ++v123;
        }
        while ((_DWORD)v123 != 4);
      }
      v127 = v113 << (1 - v112);
      v112 += 31;
      *(_DWORD *)(a3 + 28) = v112;
      *(_QWORD *)a3 = ++v4;
      v121 |= v113 >> v112;
      if (v112)
        v113 = v127;
      else
        v113 = 0;
      if (!v112)
        v112 = 0;
    }
    else
    {
      v113 *= 2;
      --v112;
    }
    *(_DWORD *)(a3 + 24) = v113;
    *(_BYTE *)(a2 + 32) = v121 != 0;
  }
  if (v112 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v146 = "Cannot read pR.hasEarlyReflectionTime";
    goto LABEL_285;
  }
  v128 = v113 >> 31;
  v129 = v112 - 1;
  *(_DWORD *)(a3 + 28) = v112 - 1;
  if (v112 - 1 < 0)
  {
    v131 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v131 <= (unint64_t)v4)
    {
      v113 = bswap32(*v4);
    }
    else
    {
      v132 = 0;
      do
      {
        v133 = (unsigned __int8 *)v4 + v132;
        v134 = v113 << 8;
        *(_DWORD *)(a3 + 24) = v134;
        v135 = 255;
        if ((unint64_t)v4 + v132 < v3 && (unint64_t)v133 >= v131)
          v135 = *v133;
        v113 = v135 | v134;
        *(_DWORD *)(a3 + 24) = v113;
        ++v132;
      }
      while ((_DWORD)v132 != 4);
    }
    v137 = v112 + 31;
    v136 = v112 == -31;
    *(_DWORD *)(a3 + 28) = v112 + 31;
    *(_QWORD *)a3 = ++v4;
    v128 |= v113 >> (v112 + 31);
    if (v112 == -31)
      v130 = 0;
    else
      v130 = v113 << (1 - v112);
    if (v136)
      v129 = 0;
    else
      v129 = v137;
  }
  else
  {
    v130 = 2 * v113;
  }
  *(_DWORD *)(a3 + 24) = v130;
  *(_BYTE *)(a2 + 7) = v128 != 0;
  if (v128)
  {
    if (v129 + 8 * ((int)v3 - (int)v4) > 31)
    {
      *(_DWORD *)(a3 + 28) = v129 - 32;
      if (v129 - 32 < 0)
      {
        v138 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v138 <= (unint64_t)v4)
        {
          v139 = bswap32(*v4);
        }
        else
        {
          v140 = 0;
          v139 = v130;
          do
          {
            v141 = (unsigned __int8 *)v4 + v140;
            v142 = v139 << 8;
            *(_DWORD *)(a3 + 24) = v142;
            v143 = 255;
            if ((unint64_t)v4 + v140 < v3 && (unint64_t)v141 >= v138)
              v143 = *v141;
            v139 = v143 | v142;
            *(_DWORD *)(a3 + 24) = v139;
            ++v140;
          }
          while ((_DWORD)v140 != 4);
        }
        *(_QWORD *)a3 = v4 + 1;
        v130 |= v139 >> v129;
        v144 = v139 << -(char)v129;
        if (!v129)
          v144 = 0;
        *(_DWORD *)(a3 + 24) = v144;
        *(_DWORD *)(a3 + 28) = v129;
      }
      *(_DWORD *)(a2 + 36) = v130;
      return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v146 = "Cannot read pR.earlyReflectionTimeMsec";
LABEL_285:
    *exception = v146;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

uint64_t APAC::MetadataBitStreamParser::parseFallbackRoomGeometry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  int v22;
  uint64_t result;
  unsigned int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  _QWORD *exception;
  const char *v44;

  v3 = 0;
  v5 = *(_QWORD *)(a3 + 8);
  v4 = *(_QWORD *)(a3 + 16);
  v6 = *(unsigned int **)a3;
  v7 = *(_DWORD *)(a3 + 24);
  v8 = *(_DWORD *)(a3 + 28);
  do
  {
    v9 = v4 - (_QWORD)v6;
    if (v8 + 8 * ((int)v4 - (int)v6) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v44 = "Cannot read fallbackRoomGeometry.mOctaveBandRt60[n]";
      goto LABEL_76;
    }
    *(_DWORD *)(a3 + 28) = v8 - 32;
    if (v8 - 32 < 0)
    {
      if ((v9 & ~(v9 >> 63) & 0xFFFFFFFC) != 0 && v5 <= (unint64_t)v6)
      {
        v12 = bswap32(*v6);
      }
      else
      {
        v13 = 0;
        v12 = v7;
        do
        {
          v14 = (unsigned __int8 *)v6 + v13;
          v15 = v12 << 8;
          *(_DWORD *)(a3 + 24) = v15;
          v16 = 255;
          if ((unint64_t)v6 + v13 < v4 && (unint64_t)v14 >= v5)
            v16 = *v14;
          v12 = v16 | v15;
          *(_DWORD *)(a3 + 24) = v12;
          ++v13;
        }
        while ((_DWORD)v13 != 4);
      }
      *(_QWORD *)a3 = ++v6;
      v11 = (v12 >> v8) | v7;
      v7 = v12 << -(char)v8;
      if (!v8)
        v7 = 0;
      *(_DWORD *)(a3 + 24) = v7;
      *(_DWORD *)(a3 + 28) = v8;
      v9 = v4 - (_QWORD)v6;
      v10 = 8 * (v4 - (_DWORD)v6);
    }
    else
    {
      v10 = 8 * v9;
      v8 -= 32;
      v11 = v7;
    }
    *(_DWORD *)(a2 + 4 + 4 * v3) = v11;
    if (v10 + v8 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v44 = "Cannot read fallbackRoomGeometry.mOctaveBandEarlyRoomEnergy[n]";
      goto LABEL_76;
    }
    *(_DWORD *)(a3 + 28) = v8 - 32;
    if (v8 - 32 < 0)
    {
      if ((v9 & ~(v9 >> 63) & 0xFFFFFFFC) != 0 && v5 <= (unint64_t)v6)
      {
        v18 = bswap32(*v6);
      }
      else
      {
        v19 = 0;
        v18 = v7;
        do
        {
          v20 = (unsigned __int8 *)v6 + v19;
          v21 = v18 << 8;
          *(_DWORD *)(a3 + 24) = v21;
          v22 = 255;
          if ((unint64_t)v6 + v19 < v4 && (unint64_t)v20 >= v5)
            v22 = *v20;
          v18 = v22 | v21;
          *(_DWORD *)(a3 + 24) = v18;
          ++v19;
        }
        while ((_DWORD)v19 != 4);
      }
      *(_QWORD *)a3 = ++v6;
      v17 = (v18 >> v8) | v7;
      v7 = v18 << -(char)v8;
      if (!v8)
        v7 = 0;
      *(_DWORD *)(a3 + 24) = v7;
      *(_DWORD *)(a3 + 28) = v8;
      v9 = v4 - (_QWORD)v6;
      v10 = 8 * (v4 - (_DWORD)v6);
    }
    else
    {
      v8 -= 32;
      v17 = v7;
    }
    *(_DWORD *)(a2 + 44 + 4 * v3) = v17;
    if (v10 + v8 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v44 = "Cannot read fallbackRoomGeometry.mOctaveBandLateRoomEnergy[n]";
      goto LABEL_76;
    }
    result = (v8 - 32);
    *(_DWORD *)(a3 + 28) = result;
    if (v8 - 32 < 0)
    {
      if ((v9 & ~(v9 >> 63) & 0xFFFFFFFC) != 0 && v5 <= (unint64_t)v6)
      {
        result = bswap32(*v6);
      }
      else
      {
        v25 = 0;
        LODWORD(result) = v7;
        do
        {
          v26 = (unsigned __int8 *)v6 + v25;
          v27 = (_DWORD)result << 8;
          *(_DWORD *)(a3 + 24) = v27;
          v28 = 255;
          if ((unint64_t)v6 + v25 < v4 && (unint64_t)v26 >= v5)
            v28 = *v26;
          result = v28 | v27;
          *(_DWORD *)(a3 + 24) = result;
          ++v25;
        }
        while ((_DWORD)v25 != 4);
      }
      *(_QWORD *)a3 = ++v6;
      v24 = (result >> v8) | v7;
      v7 = (_DWORD)result << -(char)v8;
      if (!v8)
        v7 = 0;
      *(_DWORD *)(a3 + 24) = v7;
      *(_DWORD *)(a3 + 28) = v8;
    }
    else
    {
      v8 -= 32;
      v24 = v7;
    }
    *(_DWORD *)(a2 + 84 + 4 * v3++) = v24;
  }
  while (v3 != 10);
  v29 = v4 - (_QWORD)v6;
  if (v8 + 8 * ((int)v4 - (int)v6) < 32)
  {
    exception = __cxa_allocate_exception(8uLL);
    v44 = "Cannot read fallbackRoomGeometry.mRoomVolume";
    goto LABEL_76;
  }
  *(_DWORD *)(a3 + 28) = v8 - 32;
  if (v8 - 32 < 0)
  {
    if ((v29 & ~(v29 >> 63) & 0xFFFFFFFC) != 0 && v5 <= (unint64_t)v6)
    {
      v32 = bswap32(*v6);
    }
    else
    {
      v33 = 0;
      v32 = v7;
      do
      {
        v34 = (unsigned __int8 *)v6 + v33;
        v35 = v32 << 8;
        *(_DWORD *)(a3 + 24) = v35;
        v36 = 255;
        if ((unint64_t)v6 + v33 < v4 && (unint64_t)v34 >= v5)
          v36 = *v34;
        v32 = v36 | v35;
        *(_DWORD *)(a3 + 24) = v32;
        ++v33;
      }
      while ((_DWORD)v33 != 4);
    }
    *(_QWORD *)a3 = ++v6;
    v31 = (v32 >> v8) | v7;
    v7 = v32 << -(char)v8;
    if (!v8)
      v7 = 0;
    *(_DWORD *)(a3 + 24) = v7;
    *(_DWORD *)(a3 + 28) = v8;
    v29 = v4 - (_QWORD)v6;
    v30 = 8 * (v4 - (_DWORD)v6);
  }
  else
  {
    v30 = 8 * v29;
    v8 -= 32;
    v31 = v7;
  }
  *(_DWORD *)(a2 + 124) = v31;
  if (v30 + v8 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v44 = "Cannot read fallbackRoomGeometry.mRoomSurface";
LABEL_76:
    *exception = v44;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  *(_DWORD *)(a3 + 28) = v8 - 32;
  if (v8 - 32 < 0)
  {
    if ((v29 & ~(v29 >> 63) & 0xFFFFFFFC) != 0 && v5 <= (unint64_t)v6)
    {
      v37 = bswap32(*v6);
    }
    else
    {
      v38 = 0;
      v37 = v7;
      do
      {
        v39 = (unsigned __int8 *)v6 + v38;
        v40 = v37 << 8;
        *(_DWORD *)(a3 + 24) = v40;
        v41 = 255;
        if ((unint64_t)v6 + v38 < v4 && (unint64_t)v39 >= v5)
          v41 = *v39;
        v37 = v41 | v40;
        *(_DWORD *)(a3 + 24) = v37;
        ++v38;
      }
      while ((_DWORD)v38 != 4);
    }
    *(_QWORD *)a3 = v6 + 1;
    v7 |= v37 >> v8;
    v42 = v37 << -(char)v8;
    if (!v8)
      v42 = 0;
    *(_DWORD *)(a3 + 24) = v42;
    *(_DWORD *)(a3 + 28) = v8;
  }
  *(_DWORD *)(a2 + 128) = v7;
  return result;
}

void std::__destroy_at[abi:ne180100]<APAC::Metadata::GroupData,0>(uint64_t a1)
{
  APAC::Metadata::RendererData::RadiationPattern *v1;
  uint64_t v2;
  void *v3;

  v1 = (APAC::Metadata::RendererData::RadiationPattern *)(a1 + 39744);
  v2 = -40192;
  do
  {
    v3 = (void *)*((_QWORD *)v1 + 53);
    if (v3)
    {
      *((_QWORD *)v1 + 54) = v3;
      operator delete(v3);
    }
    APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern(v1);
    v1 = (APAC::Metadata::RendererData::RadiationPattern *)((char *)v1 - 1256);
    v2 += 1256;
  }
  while (v2);
}

uint64_t std::array<APAC::Metadata::GroupData::BlockData,32ul>::array(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _OWORD *v9;

  v1 = 0;
  v2 = 32;
  do
  {
    v3 = result + v1;
    *(_WORD *)v3 = 0;
    *(_BYTE *)(v3 + 2) = 0;
    *(_WORD *)(v3 + 4) = 0;
    *(_BYTE *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 85) = 0;
    *(_WORD *)(v3 + 124) = 0;
    *(_DWORD *)(v3 + 180) = 0;
    *(_BYTE *)(v3 + 576) = 0;
    *(_WORD *)(v3 + 578) = 0;
    *(_BYTE *)(v3 + 580) = 0;
    v4 = (_DWORD *)(result + v1 + 582);
    *(_DWORD *)(v3 + 728) = 0;
    *(_BYTE *)(v3 + 732) = 0;
    *(_DWORD *)(v3 + 736) = 0;
    *(_BYTE *)(v3 + 740) = 0;
    *(_DWORD *)(v3 + 744) = 0;
    *(_BYTE *)(v3 + 748) = 0;
    *(_DWORD *)(v3 + 752) = 0;
    *(_BYTE *)(v3 + 756) = 0;
    *(_BYTE *)(v3 + 760) = 0;
    *(_DWORD *)(v3 + 764) = 0;
    *(_BYTE *)(v3 + 768) = 0;
    *(_DWORD *)(v3 + 772) = 0;
    *(_BYTE *)(v3 + 776) = 0;
    *(_DWORD *)(v3 + 780) = 0;
    *(_BYTE *)(v3 + 784) = 0;
    *(_DWORD *)((char *)v4 + 3) = 0;
    *v4 = 0;
    *(_QWORD *)(v3 + 712) = 0;
    *(_QWORD *)(result + v1 + 717) = 0;
    *(_WORD *)(v3 + 788) = 0;
    *(_DWORD *)(v3 + 792) = 0;
    *(_BYTE *)(v3 + 800) = 0;
    *(_WORD *)(v3 + 802) = 0;
    *(_BYTE *)(v3 + 804) = 0;
    *(_DWORD *)(result + v1 + 806) = 0;
    *(_WORD *)(v3 + 810) = 0;
    *(_BYTE *)(v3 + 816) = 0;
    v5 = (_OWORD *)(result + v1 + 820);
    v6 = (_OWORD *)(result + v1 + 984);
    *v5 = 0uLL;
    v5[1] = 0uLL;
    v5[2] = 0uLL;
    v5[3] = 0uLL;
    v5[4] = 0uLL;
    v5[5] = 0uLL;
    v5[6] = 0uLL;
    v5[7] = 0uLL;
    v5[8] = 0uLL;
    *(_OWORD *)((char *)v5 + 142) = 0uLL;
    *(_DWORD *)(v3 + 1048) = 0;
    *(_WORD *)(v3 + 1052) = 0;
    *(_DWORD *)(v3 + 74) = 0;
    *(_OWORD *)(v3 + 58) = 0uLL;
    *(_OWORD *)(v3 + 42) = 0uLL;
    *(_OWORD *)(v3 + 26) = 0uLL;
    *(_OWORD *)(v3 + 10) = 0uLL;
    *(_QWORD *)(v3 + 128) = 0;
    *(_QWORD *)(v3 + 136) = 0;
    *(_QWORD *)(v3 + 142) = 0;
    *(_BYTE *)(v3 + 160) = 0;
    *(_QWORD *)(v3 + 152) = 0;
    *(_QWORD *)(v3 + 169) = 0;
    *(_QWORD *)(v3 + 164) = 0;
    *(_WORD *)(v3 + 1032) = 0;
    v6[1] = 0uLL;
    v6[2] = 0uLL;
    *v6 = 0uLL;
    *(_WORD *)(v3 + 1044) = 0;
    *(_QWORD *)(result + v1 + 1036) = 0;
    *(_BYTE *)(v3 + 1054) = 1;
    v7 = result + v1 + 1055;
    v8 = (_QWORD *)(result + v1 + 1108);
    *(_QWORD *)((char *)v8 + 5) = 0;
    *v8 = 0;
    *(_DWORD *)(v3 + 1152) = 0;
    *(_WORD *)(v3 + 1156) = 0;
    *(_QWORD *)(result + v1 + 1165) = 0;
    *(_QWORD *)(v3 + 1160) = 0;
    *(_BYTE *)(v3 + 1204) = 0;
    *(_BYTE *)(v3 + 1208) = 0;
    *(_DWORD *)(result + v1 + 1210) = 0;
    *(_BYTE *)(v3 + 1214) = 0;
    *(_DWORD *)(v3 + 1216) = 0;
    v9 = (_OWORD *)(result + v1 + 1224);
    *(_DWORD *)(v7 + 47) = 0;
    *(_OWORD *)(v7 + 16) = 0uLL;
    *(_OWORD *)(v7 + 32) = 0uLL;
    *(_OWORD *)v7 = 0uLL;
    v1 += 1256;
    *v9 = 0uLL;
    v9[1] = 0uLL;
    --v2;
  }
  while (v2);
  return result;
}

void APAC::MetadataBitStreamParser::parseAuthoringInformation(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  int v88;
  _QWORD *exception;
  const char *v90;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v90 = "Cannot read authorInfo.mAuthoringToolNameIndex";
    goto LABEL_145;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 29;
  v9 = v6 - 3;
  *(_DWORD *)(a3 + 28) = v6 - 3;
  if (v6 - 3 < 0)
  {
    v11 = *(unsigned int **)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) != 0)
    {
      v12 = v11 >= v4;
      v13 = v11 == v4;
    }
    else
    {
      v12 = 1;
      v13 = 0;
    }
    if (!v13 && v12)
    {
      v14 = 0;
      do
      {
        v15 = (unsigned __int8 *)v4 + v14;
        v16 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v16;
        v17 = 255;
        if ((unint64_t)v4 + v14 < v3 && v15 >= (unsigned __int8 *)v11)
          v17 = *v15;
        v7 = v17 | v16;
        *(_DWORD *)(a3 + 24) = v7;
        ++v14;
      }
      while ((_DWORD)v14 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v7 << (3 - v6);
    v19 = v6 + 29;
    *(_DWORD *)(a3 + 28) = v19;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> v19;
    if (v19)
      v10 = v18;
    else
      v10 = 0;
    if (v19)
      v9 = v19;
    else
      v9 = 0;
  }
  else
  {
    v10 = 8 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *a2 = v8;
  if (v9 + 8 * ((int)v3 - (int)v4) <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v90 = "Cannot read authorInfo.mAuthoringToolVersion.mMajor";
    goto LABEL_145;
  }
  v20 = HIBYTE(v10);
  v21 = v9 - 8;
  *(_DWORD *)(a3 + 28) = v9 - 8;
  if (v9 - 8 < 0)
  {
    v23 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v23 <= (unint64_t)v4)
    {
      v10 = bswap32(*v4);
    }
    else
    {
      v24 = 0;
      do
      {
        v25 = (unsigned __int8 *)v4 + v24;
        v26 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v26;
        v27 = 255;
        if ((unint64_t)v4 + v24 < v3 && (unint64_t)v25 >= v23)
          v27 = *v25;
        v10 = v27 | v26;
        *(_DWORD *)(a3 + 24) = v10;
        ++v24;
      }
      while ((_DWORD)v24 != 4);
    }
    v28 = v10 << (8 - v9);
    v29 = v9 + 24;
    *(_DWORD *)(a3 + 28) = v29;
    *(_QWORD *)a3 = ++v4;
    v20 |= v10 >> v29;
    if (v29)
      v22 = v28;
    else
      v22 = 0;
    if (v29)
      v21 = v29;
    else
      v21 = 0;
  }
  else
  {
    v22 = v10 << 8;
  }
  *(_DWORD *)(a3 + 24) = v22;
  a2[1] = v20;
  if (v21 + 8 * ((int)v3 - (int)v4) <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v90 = "Cannot read authorInfo.mAuthoringToolVersion.mMinor";
    goto LABEL_145;
  }
  v30 = HIBYTE(v22);
  v31 = v21 - 8;
  *(_DWORD *)(a3 + 28) = v21 - 8;
  if (v21 - 8 < 0)
  {
    v33 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v33 <= (unint64_t)v4)
    {
      v22 = bswap32(*v4);
    }
    else
    {
      v34 = 0;
      do
      {
        v35 = (unsigned __int8 *)v4 + v34;
        v36 = v22 << 8;
        *(_DWORD *)(a3 + 24) = v36;
        v37 = 255;
        if ((unint64_t)v4 + v34 < v3 && (unint64_t)v35 >= v33)
          v37 = *v35;
        v22 = v37 | v36;
        *(_DWORD *)(a3 + 24) = v22;
        ++v34;
      }
      while ((_DWORD)v34 != 4);
    }
    v38 = v22 << (8 - v21);
    v39 = v21 + 24;
    *(_DWORD *)(a3 + 28) = v39;
    *(_QWORD *)a3 = ++v4;
    v30 |= v22 >> v39;
    if (v39)
      v32 = v38;
    else
      v32 = 0;
    if (v39)
      v31 = v39;
    else
      v31 = 0;
  }
  else
  {
    v32 = v22 << 8;
  }
  *(_DWORD *)(a3 + 24) = v32;
  a2[2] = v30;
  if (v31 + 8 * ((int)v3 - (int)v4) <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v90 = "Cannot read authorInfo.mAuthoringToolVersion.mPatch";
    goto LABEL_145;
  }
  v40 = HIBYTE(v32);
  v41 = v31 - 8;
  *(_DWORD *)(a3 + 28) = v31 - 8;
  if (v31 - 8 < 0)
  {
    v43 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v43 <= (unint64_t)v4)
    {
      v32 = bswap32(*v4);
    }
    else
    {
      v44 = 0;
      do
      {
        v45 = (unsigned __int8 *)v4 + v44;
        v46 = v32 << 8;
        *(_DWORD *)(a3 + 24) = v46;
        v47 = 255;
        if ((unint64_t)v4 + v44 < v3 && (unint64_t)v45 >= v43)
          v47 = *v45;
        v32 = v47 | v46;
        *(_DWORD *)(a3 + 24) = v32;
        ++v44;
      }
      while ((_DWORD)v44 != 4);
    }
    v48 = v32 << (8 - v31);
    v49 = v31 + 24;
    *(_DWORD *)(a3 + 28) = v49;
    *(_QWORD *)a3 = ++v4;
    v40 |= v32 >> v49;
    if (v49)
      v42 = v48;
    else
      v42 = 0;
    if (v49)
      v41 = v49;
    else
      v41 = 0;
  }
  else
  {
    v42 = v32 << 8;
  }
  *(_DWORD *)(a3 + 24) = v42;
  a2[3] = v40;
  if (v41 + 8 * ((int)v3 - (int)v4) <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v90 = "Cannot read authorInfo.mRendererNameIndex";
    goto LABEL_145;
  }
  v50 = v42 >> 29;
  v51 = v41 - 3;
  *(_DWORD *)(a3 + 28) = v41 - 3;
  if (v41 - 3 < 0)
  {
    v53 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v53 <= (unint64_t)v4)
    {
      v42 = bswap32(*v4);
    }
    else
    {
      v54 = 0;
      do
      {
        v55 = (unsigned __int8 *)v4 + v54;
        v56 = v42 << 8;
        *(_DWORD *)(a3 + 24) = v56;
        v57 = 255;
        if ((unint64_t)v4 + v54 < v3 && (unint64_t)v55 >= v53)
          v57 = *v55;
        v42 = v57 | v56;
        *(_DWORD *)(a3 + 24) = v42;
        ++v54;
      }
      while ((_DWORD)v54 != 4);
    }
    v58 = v42 << (3 - v41);
    v59 = v41 + 29;
    *(_DWORD *)(a3 + 28) = v59;
    *(_QWORD *)a3 = ++v4;
    v50 |= v42 >> v59;
    if (v59)
      v52 = v58;
    else
      v52 = 0;
    if (v59)
      v51 = v59;
    else
      v51 = 0;
  }
  else
  {
    v52 = 8 * v42;
  }
  *(_DWORD *)(a3 + 24) = v52;
  a2[4] = v50;
  if (v51 + 8 * ((int)v3 - (int)v4) <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v90 = "Cannot read authorInfo.mRendererVersion.mMajor";
    goto LABEL_145;
  }
  v60 = HIBYTE(v52);
  v61 = v51 - 8;
  *(_DWORD *)(a3 + 28) = v51 - 8;
  if (v51 - 8 < 0)
  {
    v63 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v63 <= (unint64_t)v4)
    {
      v52 = bswap32(*v4);
    }
    else
    {
      v64 = 0;
      do
      {
        v65 = (unsigned __int8 *)v4 + v64;
        v66 = v52 << 8;
        *(_DWORD *)(a3 + 24) = v66;
        v67 = 255;
        if ((unint64_t)v4 + v64 < v3 && (unint64_t)v65 >= v63)
          v67 = *v65;
        v52 = v67 | v66;
        *(_DWORD *)(a3 + 24) = v52;
        ++v64;
      }
      while ((_DWORD)v64 != 4);
    }
    v68 = v52 << (8 - v51);
    v69 = v51 + 24;
    *(_DWORD *)(a3 + 28) = v69;
    *(_QWORD *)a3 = ++v4;
    v60 |= v52 >> v69;
    if (v69)
      v62 = v68;
    else
      v62 = 0;
    if (v69)
      v61 = v69;
    else
      v61 = 0;
  }
  else
  {
    v62 = v52 << 8;
  }
  *(_DWORD *)(a3 + 24) = v62;
  a2[5] = v60;
  if (v61 + 8 * ((int)v3 - (int)v4) <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v90 = "Cannot read authorInfo.mRendererVersion.mMinor";
    goto LABEL_145;
  }
  v70 = HIBYTE(v62);
  v71 = v61 - 8;
  *(_DWORD *)(a3 + 28) = v61 - 8;
  if (v61 - 8 < 0)
  {
    v73 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v73 <= (unint64_t)v4)
    {
      v62 = bswap32(*v4);
    }
    else
    {
      v74 = 0;
      do
      {
        v75 = (unsigned __int8 *)v4 + v74;
        v76 = v62 << 8;
        *(_DWORD *)(a3 + 24) = v76;
        v77 = 255;
        if ((unint64_t)v4 + v74 < v3 && (unint64_t)v75 >= v73)
          v77 = *v75;
        v62 = v77 | v76;
        *(_DWORD *)(a3 + 24) = v62;
        ++v74;
      }
      while ((_DWORD)v74 != 4);
    }
    v78 = v62 << (8 - v61);
    v79 = v61 + 24;
    *(_DWORD *)(a3 + 28) = v79;
    *(_QWORD *)a3 = ++v4;
    v70 |= v62 >> v79;
    if (v79)
      v72 = v78;
    else
      v72 = 0;
    if (v79)
      v71 = v79;
    else
      v71 = 0;
  }
  else
  {
    v72 = v62 << 8;
  }
  *(_DWORD *)(a3 + 24) = v72;
  a2[6] = v70;
  if (v71 + 8 * ((int)v3 - (int)v4) <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v90 = "Cannot read authorInfo.mRendererVersion.mPatch";
LABEL_145:
    *exception = v90;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v80 = HIBYTE(v72);
  *(_DWORD *)(a3 + 28) = v71 - 8;
  if (v71 - 8 < 0)
  {
    v82 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v82 <= (unint64_t)v4)
    {
      v72 = bswap32(*v4);
    }
    else
    {
      v83 = 0;
      do
      {
        v84 = (unsigned __int8 *)v4 + v83;
        v85 = v72 << 8;
        *(_DWORD *)(a3 + 24) = v85;
        v86 = 255;
        if ((unint64_t)v4 + v83 < v3 && (unint64_t)v84 >= v82)
          v86 = *v84;
        v72 = v86 | v85;
        *(_DWORD *)(a3 + 24) = v72;
        ++v83;
      }
      while ((_DWORD)v83 != 4);
    }
    v87 = v72 << (8 - v71);
    v88 = v71 + 24;
    *(_DWORD *)(a3 + 28) = v88;
    *(_QWORD *)a3 = v4 + 1;
    v80 |= v72 >> v88;
    if (v88)
      v81 = v87;
    else
      v81 = 0;
  }
  else
  {
    v81 = v72 << 8;
  }
  *(_DWORD *)(a3 + 24) = v81;
  a2[7] = v80;
}

void APAC::MetadataBitStreamParser::parseReferenceScreen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned int v57;
  int v58;
  int v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned int v69;
  int v70;
  int v71;
  int v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned int v85;
  int v86;
  int v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  _QWORD *exception;
  const char *v96;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v96 = "Cannot read refScreen.mAspectRatio";
    goto LABEL_159;
  }
  v7 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a3 + 28) = v6 - 32;
  if (v6 - 32 < 0)
  {
    v10 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v10 > (unint64_t)v4)
    {
      v12 = 0;
      v16 = v7;
      do
      {
        v13 = (unsigned __int8 *)v4 + v12;
        v14 = v16 << 8;
        *(_DWORD *)(a3 + 24) = v14;
        v15 = 255;
        if ((unint64_t)v4 + v12 < v3 && (unint64_t)v13 >= v10)
          v15 = *v13;
        v16 = v15 | v14;
        *(_DWORD *)(a3 + 24) = v16;
        ++v12;
      }
      while ((_DWORD)v12 != 4);
    }
    else
    {
      v16 = bswap32(*v4);
    }
    *(_QWORD *)a3 = ++v4;
    v9 = (v16 >> v6) | v7;
    v7 = v16 << -(char)v6;
    if (!v6)
      v7 = 0;
    *(_DWORD *)(a3 + 24) = v7;
    *(_DWORD *)(a3 + 28) = v6;
    v5 = v3 - (_QWORD)v4;
    v8 = 8 * (v3 - (_DWORD)v4);
  }
  else
  {
    v8 = 8 * v5;
    v6 -= 32;
    v9 = v7;
  }
  *(_DWORD *)a2 = v9;
  if ((v8 + v6 < 0) ^ __OFADD__(v8, v6) | (v8 + v6 == 0))
  {
    exception = __cxa_allocate_exception(8uLL);
    v96 = "Cannot read refScreen.mIsCartesian";
    goto LABEL_159;
  }
  v17 = v7 >> 31;
  v18 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v20 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v20 > (unint64_t)v4)
    {
      v22 = 0;
      do
      {
        v23 = (unsigned __int8 *)v4 + v22;
        v24 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v24;
        v25 = 255;
        if ((unint64_t)v4 + v22 < v3 && (unint64_t)v23 >= v20)
          v25 = *v23;
        v7 = v25 | v24;
        *(_DWORD *)(a3 + 24) = v7;
        ++v22;
      }
      while ((_DWORD)v22 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v27 = v6 + 31;
    v26 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v17 |= v7 >> (v6 + 31);
    if (v6 == -31)
      v19 = 0;
    else
      v19 = v7 << (1 - v6);
    if (v26)
      v18 = 0;
    else
      v18 = v27;
  }
  else
  {
    v19 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v19;
  *(_BYTE *)(a2 + 4) = v17 != 0;
  v28 = v3 - (_QWORD)v4;
  v29 = 8 * (v3 - (_DWORD)v4);
  v30 = v18 + v29;
  if (v17)
  {
    if (v30 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v96 = "Cannot read refScreen.mScreenCentrePosition.mX";
    }
    else
    {
      *(_DWORD *)(a3 + 28) = v18 - 32;
      if (v18 - 32 < 0)
      {
        v33 = v28 & ~(v28 >> 63);
        v34 = *(_QWORD *)(a3 + 8);
        if ((v33 & 0xFFFFFFFC) != 0 && v34 <= (unint64_t)v4)
        {
          v35 = bswap32(*v4);
        }
        else
        {
          v39 = 0;
          v35 = v19;
          do
          {
            v40 = (unsigned __int8 *)v4 + v39;
            v41 = v35 << 8;
            *(_DWORD *)(a3 + 24) = v41;
            v42 = 255;
            if ((unint64_t)v4 + v39 < v3 && (unint64_t)v40 >= v34)
              v42 = *v40;
            v35 = v42 | v41;
            *(_DWORD *)(a3 + 24) = v35;
            ++v39;
          }
          while ((_DWORD)v39 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v31 = (v35 >> v18) | v19;
        v19 = v35 << -(char)v18;
        if (!v18)
          v19 = 0;
        *(_DWORD *)(a3 + 24) = v19;
        *(_DWORD *)(a3 + 28) = v18;
        v28 = v3 - (_QWORD)v4;
        v29 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v18 -= 32;
        v31 = v19;
      }
      *(_DWORD *)(a2 + 8) = v31;
      if (v29 + v18 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v96 = "Cannot read refScreen.mScreenCentrePosition.mY";
      }
      else
      {
        *(_DWORD *)(a3 + 28) = v18 - 32;
        if (v18 - 32 < 0)
        {
          v44 = v28 & ~(v28 >> 63);
          v45 = *(_QWORD *)(a3 + 8);
          if ((v44 & 0xFFFFFFFC) != 0 && v45 <= (unint64_t)v4)
          {
            v46 = bswap32(*v4);
          }
          else
          {
            v47 = 0;
            v46 = v19;
            do
            {
              v48 = (unsigned __int8 *)v4 + v47;
              v49 = v46 << 8;
              *(_DWORD *)(a3 + 24) = v49;
              v50 = 255;
              if ((unint64_t)v4 + v47 < v3 && (unint64_t)v48 >= v45)
                v50 = *v48;
              v46 = v50 | v49;
              *(_DWORD *)(a3 + 24) = v46;
              ++v47;
            }
            while ((_DWORD)v47 != 4);
          }
          *(_QWORD *)a3 = ++v4;
          v43 = (v46 >> v18) | v19;
          v19 = v46 << -(char)v18;
          if (!v18)
            v19 = 0;
          *(_DWORD *)(a3 + 24) = v19;
          *(_DWORD *)(a3 + 28) = v18;
          v28 = v3 - (_QWORD)v4;
          v29 = 8 * (v3 - (_DWORD)v4);
        }
        else
        {
          v18 -= 32;
          v43 = v19;
        }
        *(_DWORD *)(a2 + 12) = v43;
        if (v29 + v18 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v96 = "Cannot read refScreen.mScreenCentrePosition.mZ";
        }
        else
        {
          *(_DWORD *)(a3 + 28) = v18 - 32;
          if (v18 - 32 < 0)
          {
            v52 = v28 & ~(v28 >> 63);
            v53 = *(_QWORD *)(a3 + 8);
            if ((v52 & 0xFFFFFFFC) != 0 && v53 <= (unint64_t)v4)
            {
              v54 = bswap32(*v4);
            }
            else
            {
              v55 = 0;
              v54 = v19;
              do
              {
                v56 = (unsigned __int8 *)v4 + v55;
                v57 = v54 << 8;
                *(_DWORD *)(a3 + 24) = v57;
                v58 = 255;
                if ((unint64_t)v4 + v55 < v3 && (unint64_t)v56 >= v53)
                  v58 = *v56;
                v54 = v58 | v57;
                *(_DWORD *)(a3 + 24) = v54;
                ++v55;
              }
              while ((_DWORD)v55 != 4);
            }
            *(_QWORD *)a3 = ++v4;
            v51 = (v54 >> v18) | v19;
            v19 = v54 << -(char)v18;
            if (!v18)
              v19 = 0;
            *(_DWORD *)(a3 + 24) = v19;
            *(_DWORD *)(a3 + 28) = v18;
            v28 = v3 - (_QWORD)v4;
            v29 = 8 * (v3 - (_DWORD)v4);
          }
          else
          {
            v18 -= 32;
            v51 = v19;
          }
          *(_DWORD *)(a2 + 16) = v51;
          if (v29 + v18 > 31)
          {
            *(_DWORD *)(a3 + 28) = v18 - 32;
            if (v18 - 32 < 0)
            {
              v59 = v28 & ~(v28 >> 63);
              v60 = *(_QWORD *)(a3 + 8);
              if ((v59 & 0xFFFFFFFC) != 0 && v60 <= (unint64_t)v4)
              {
                v61 = bswap32(*v4);
              }
              else
              {
                v62 = 0;
                v61 = v19;
                do
                {
                  v63 = (unsigned __int8 *)v4 + v62;
                  v64 = v61 << 8;
                  *(_DWORD *)(a3 + 24) = v64;
                  v65 = 255;
                  if ((unint64_t)v4 + v62 < v3 && (unint64_t)v63 >= v60)
                    v65 = *v63;
                  v61 = v65 | v64;
                  *(_DWORD *)(a3 + 24) = v61;
                  ++v62;
                }
                while ((_DWORD)v62 != 4);
              }
              *(_QWORD *)a3 = v4 + 1;
              v19 |= v61 >> v18;
              v66 = v61 << -(char)v18;
              if (!v18)
                v66 = 0;
              *(_DWORD *)(a3 + 24) = v66;
              *(_DWORD *)(a3 + 28) = v18;
            }
            *(_DWORD *)(a2 + 32) = v19;
            return;
          }
          exception = __cxa_allocate_exception(8uLL);
          v96 = "Cannot read refScreen.mScreenWidth.mX";
        }
      }
    }
LABEL_159:
    *exception = v96;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  if (v30 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v96 = "Cannot read refScreen.mScreenCentrePosition.mAzimuth";
    goto LABEL_159;
  }
  *(_DWORD *)(a3 + 28) = v18 - 32;
  if (v18 - 32 < 0)
  {
    v36 = v28 & ~(v28 >> 63);
    v37 = *(_QWORD *)(a3 + 8);
    if ((v36 & 0xFFFFFFFC) != 0 && v37 <= (unint64_t)v4)
    {
      v38 = bswap32(*v4);
    }
    else
    {
      v67 = 0;
      v38 = v19;
      do
      {
        v68 = (unsigned __int8 *)v4 + v67;
        v69 = v38 << 8;
        *(_DWORD *)(a3 + 24) = v69;
        v70 = 255;
        if ((unint64_t)v4 + v67 < v3 && (unint64_t)v68 >= v37)
          v70 = *v68;
        v38 = v70 | v69;
        *(_DWORD *)(a3 + 24) = v38;
        ++v67;
      }
      while ((_DWORD)v67 != 4);
    }
    *(_QWORD *)a3 = ++v4;
    v32 = (v38 >> v18) | v19;
    v19 = v38 << -(char)v18;
    if (!v18)
      v19 = 0;
    *(_DWORD *)(a3 + 24) = v19;
    *(_DWORD *)(a3 + 28) = v18;
    v28 = v3 - (_QWORD)v4;
    v29 = 8 * (v3 - (_DWORD)v4);
  }
  else
  {
    v18 -= 32;
    v32 = v19;
  }
  *(_DWORD *)(a2 + 20) = v32;
  if (v29 + v18 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v96 = "Cannot read refScreen.mScreenCentrePosition.mElevation";
    goto LABEL_159;
  }
  *(_DWORD *)(a3 + 28) = v18 - 32;
  if (v18 - 32 < 0)
  {
    v72 = v28 & ~(v28 >> 63);
    v73 = *(_QWORD *)(a3 + 8);
    if ((v72 & 0xFFFFFFFC) != 0 && v73 <= (unint64_t)v4)
    {
      v74 = bswap32(*v4);
    }
    else
    {
      v75 = 0;
      v74 = v19;
      do
      {
        v76 = (unsigned __int8 *)v4 + v75;
        v77 = v74 << 8;
        *(_DWORD *)(a3 + 24) = v77;
        v78 = 255;
        if ((unint64_t)v4 + v75 < v3 && (unint64_t)v76 >= v73)
          v78 = *v76;
        v74 = v78 | v77;
        *(_DWORD *)(a3 + 24) = v74;
        ++v75;
      }
      while ((_DWORD)v75 != 4);
    }
    *(_QWORD *)a3 = ++v4;
    v71 = (v74 >> v18) | v19;
    v19 = v74 << -(char)v18;
    if (!v18)
      v19 = 0;
    *(_DWORD *)(a3 + 24) = v19;
    *(_DWORD *)(a3 + 28) = v18;
    v28 = v3 - (_QWORD)v4;
    v29 = 8 * (v3 - (_DWORD)v4);
  }
  else
  {
    v18 -= 32;
    v71 = v19;
  }
  *(_DWORD *)(a2 + 24) = v71;
  if (v29 + v18 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v96 = "Cannot read refScreen.mScreenCentrePosition.mRadius";
    goto LABEL_159;
  }
  *(_DWORD *)(a3 + 28) = v18 - 32;
  if (v18 - 32 < 0)
  {
    v80 = v28 & ~(v28 >> 63);
    v81 = *(_QWORD *)(a3 + 8);
    if ((v80 & 0xFFFFFFFC) != 0 && v81 <= (unint64_t)v4)
    {
      v82 = bswap32(*v4);
    }
    else
    {
      v83 = 0;
      v82 = v19;
      do
      {
        v84 = (unsigned __int8 *)v4 + v83;
        v85 = v82 << 8;
        *(_DWORD *)(a3 + 24) = v85;
        v86 = 255;
        if ((unint64_t)v4 + v83 < v3 && (unint64_t)v84 >= v81)
          v86 = *v84;
        v82 = v86 | v85;
        *(_DWORD *)(a3 + 24) = v82;
        ++v83;
      }
      while ((_DWORD)v83 != 4);
    }
    *(_QWORD *)a3 = ++v4;
    v79 = (v82 >> v18) | v19;
    v19 = v82 << -(char)v18;
    if (!v18)
      v19 = 0;
    *(_DWORD *)(a3 + 24) = v19;
    *(_DWORD *)(a3 + 28) = v18;
    v28 = v3 - (_QWORD)v4;
    v29 = 8 * (v3 - (_DWORD)v4);
  }
  else
  {
    v18 -= 32;
    v79 = v19;
  }
  *(_DWORD *)(a2 + 28) = v79;
  if (v29 + v18 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v96 = "Cannot read refScreen.mScreenWidth.mAzimuth";
    goto LABEL_159;
  }
  *(_DWORD *)(a3 + 28) = v18 - 32;
  if (v18 - 32 < 0)
  {
    v87 = v28 & ~(v28 >> 63);
    v88 = *(_QWORD *)(a3 + 8);
    if ((v87 & 0xFFFFFFFC) != 0 && v88 <= (unint64_t)v4)
    {
      v89 = bswap32(*v4);
    }
    else
    {
      v90 = 0;
      v89 = v19;
      do
      {
        v91 = (unsigned __int8 *)v4 + v90;
        v92 = v89 << 8;
        *(_DWORD *)(a3 + 24) = v92;
        v93 = 255;
        if ((unint64_t)v4 + v90 < v3 && (unint64_t)v91 >= v88)
          v93 = *v91;
        v89 = v93 | v92;
        *(_DWORD *)(a3 + 24) = v89;
        ++v90;
      }
      while ((_DWORD)v90 != 4);
    }
    *(_QWORD *)a3 = v4 + 1;
    v19 |= v89 >> v18;
    v94 = v89 << -(char)v18;
    if (!v18)
      v94 = 0;
    *(_DWORD *)(a3 + 24) = v94;
    *(_DWORD *)(a3 + 28) = v18;
  }
  *(_DWORD *)(a2 + 36) = v19;
}

BOOL APAC::MetadataBitStreamParser::parseDBMD(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  int v88;
  _BYTE *v89;
  uint64_t v90;
  _BOOL8 result;
  _QWORD *exception;
  const char *v93;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v93 = "Cannot read dbmd.mSurroundDownmix";
    goto LABEL_167;
  }
  v8 = *(_DWORD *)(a3 + 24);
  v9 = v8 >> 30;
  v10 = v6 - 2;
  *(_DWORD *)(a3 + 28) = v6 - 2;
  if (v6 - 2 < 0)
  {
    v12 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v12 > (unint64_t)v4)
    {
      v14 = 0;
      do
      {
        v15 = (unsigned __int8 *)v4 + v14;
        v16 = v8 << 8;
        *(_DWORD *)(a3 + 24) = v16;
        v17 = 255;
        if ((unint64_t)v4 + v14 < v3 && (unint64_t)v15 >= v12)
          v17 = *v15;
        v8 = v17 | v16;
        *(_DWORD *)(a3 + 24) = v8;
        ++v14;
      }
      while ((_DWORD)v14 != 4);
    }
    else
    {
      v8 = bswap32(*v4);
    }
    v18 = v8 << (2 - v6);
    v19 = v6 + 30;
    *(_DWORD *)(a3 + 28) = v19;
    *(_QWORD *)a3 = ++v4;
    v9 |= v8 >> v19;
    if (v19)
      v11 = v18;
    else
      v11 = 0;
    if (v19)
      v10 = v19;
    else
      v10 = 0;
  }
  else
  {
    v11 = 4 * v8;
  }
  *(_DWORD *)(a3 + 24) = v11;
  *a2 = v9;
  if (v10 + 8 * ((int)v3 - (int)v4) <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v93 = "Cannot read dbmd.mSurroundToStereoDownmix";
    goto LABEL_167;
  }
  v20 = v11 >> 30;
  v21 = v10 - 2;
  *(_DWORD *)(a3 + 28) = v10 - 2;
  if (v10 - 2 < 0)
  {
    v23 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v23 <= (unint64_t)v4)
    {
      v11 = bswap32(*v4);
    }
    else
    {
      v24 = 0;
      do
      {
        v25 = (unsigned __int8 *)v4 + v24;
        v26 = v11 << 8;
        *(_DWORD *)(a3 + 24) = v26;
        v27 = 255;
        if ((unint64_t)v4 + v24 < v3 && (unint64_t)v25 >= v23)
          v27 = *v25;
        v11 = v27 | v26;
        *(_DWORD *)(a3 + 24) = v11;
        ++v24;
      }
      while ((_DWORD)v24 != 4);
    }
    v28 = v11 << (2 - v10);
    v29 = v10 + 30;
    *(_DWORD *)(a3 + 28) = v29;
    *(_QWORD *)a3 = ++v4;
    v20 |= v11 >> v29;
    if (v29)
      v22 = v28;
    else
      v22 = 0;
    if (v29)
      v21 = v29;
    else
      v21 = 0;
  }
  else
  {
    v22 = 4 * v11;
  }
  *(_DWORD *)(a3 + 24) = v22;
  a2[1] = v20;
  if (v21 + 8 * ((int)v3 - (int)v4) <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v93 = "Cannot read dbmd.mPositionAdjustment";
    goto LABEL_167;
  }
  v30 = v22 >> 29;
  v31 = v21 - 3;
  *(_DWORD *)(a3 + 28) = v21 - 3;
  if (v21 - 3 < 0)
  {
    v33 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v33 <= (unint64_t)v4)
    {
      v22 = bswap32(*v4);
    }
    else
    {
      v34 = 0;
      do
      {
        v35 = (unsigned __int8 *)v4 + v34;
        v36 = v22 << 8;
        *(_DWORD *)(a3 + 24) = v36;
        v37 = 255;
        if ((unint64_t)v4 + v34 < v3 && (unint64_t)v35 >= v33)
          v37 = *v35;
        v22 = v37 | v36;
        *(_DWORD *)(a3 + 24) = v22;
        ++v34;
      }
      while ((_DWORD)v34 != 4);
    }
    v38 = v22 << (3 - v21);
    v39 = v21 + 29;
    *(_DWORD *)(a3 + 28) = v39;
    *(_QWORD *)a3 = ++v4;
    v30 |= v22 >> v39;
    if (v39)
      v32 = v38;
    else
      v32 = 0;
    if (v39)
      v31 = v39;
    else
      v31 = 0;
  }
  else
  {
    v32 = 8 * v22;
  }
  v40 = 0;
  *(_DWORD *)(a3 + 24) = v32;
  a2[2] = v30;
  v41 = *(_QWORD *)(a3 + 8);
  v42 = a2 + 12;
  do
  {
    if (v31 + 8 * ((int)v3 - (int)v4) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v93 = "Cannot read dbmd.mIsAutoTrim[cfg]";
      goto LABEL_167;
    }
    v43 = v32 >> 31;
    *(_DWORD *)(a3 + 28) = v31 - 1;
    if (v31 - 1 < 0)
    {
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v41 <= (unint64_t)v4)
      {
        v32 = bswap32(*v4);
      }
      else
      {
        v44 = 0;
        do
        {
          v45 = (unsigned __int8 *)v4 + v44;
          v46 = v32 << 8;
          *(_DWORD *)(a3 + 24) = v46;
          v47 = 255;
          if ((unint64_t)v4 + v44 < v3 && (unint64_t)v45 >= v41)
            v47 = *v45;
          v32 = v47 | v46;
          *(_DWORD *)(a3 + 24) = v32;
          ++v44;
        }
        while ((_DWORD)v44 != 4);
      }
      v48 = v32 << (1 - v31);
      v31 += 31;
      *(_DWORD *)(a3 + 28) = v31;
      *(_QWORD *)a3 = ++v4;
      v43 |= v32 >> v31;
      if (v31)
        v32 = v48;
      else
        v32 = 0;
      if (!v31)
        v31 = 0;
    }
    else
    {
      v32 *= 2;
      --v31;
    }
    *(_DWORD *)(a3 + 24) = v32;
    a2[v40 + 3] = v43 != 0;
    if (!v43)
    {
      v49 = v3 - (_QWORD)v4;
      if (v31 + 8 * ((int)v3 - (int)v4) <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v93 = "Cannot read dbmd.mMixingGains[cfg].mFrontGain";
        goto LABEL_167;
      }
      *(_DWORD *)(a3 + 28) = v31 - 32;
      if (v31 - 32 < 0)
      {
        if ((v49 & ~(v49 >> 63) & 0xFFFFFFFC) != 0 && v41 <= (unint64_t)v4)
        {
          v52 = bswap32(*v4);
        }
        else
        {
          v53 = 0;
          v52 = v32;
          do
          {
            v54 = (unsigned __int8 *)v4 + v53;
            v55 = v52 << 8;
            *(_DWORD *)(a3 + 24) = v55;
            v56 = 255;
            if ((unint64_t)v4 + v53 < v3 && (unint64_t)v54 >= v41)
              v56 = *v54;
            v52 = v56 | v55;
            *(_DWORD *)(a3 + 24) = v52;
            ++v53;
          }
          while ((_DWORD)v53 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v51 = (v52 >> v31) | v32;
        v32 = v52 << -(char)v31;
        if (!v31)
          v32 = 0;
        *(_DWORD *)(a3 + 24) = v32;
        *(_DWORD *)(a3 + 28) = v31;
        v49 = v3 - (_QWORD)v4;
        v50 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v50 = 8 * v49;
        v31 -= 32;
        v51 = v32;
      }
      *(_DWORD *)&v42[20 * v40] = v51;
      if (v50 + v31 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v93 = "Cannot read dbmd.mMixingGains[cfg].mBackGain";
        goto LABEL_167;
      }
      *(_DWORD *)(a3 + 28) = v31 - 32;
      if (v31 - 32 < 0)
      {
        if ((v49 & ~(v49 >> 63) & 0xFFFFFFFC) != 0 && v41 <= (unint64_t)v4)
        {
          v58 = bswap32(*v4);
        }
        else
        {
          v59 = 0;
          v58 = v32;
          do
          {
            v60 = (unsigned __int8 *)v4 + v59;
            v61 = v58 << 8;
            *(_DWORD *)(a3 + 24) = v61;
            v62 = 255;
            if ((unint64_t)v4 + v59 < v3 && (unint64_t)v60 >= v41)
              v62 = *v60;
            v58 = v62 | v61;
            *(_DWORD *)(a3 + 24) = v58;
            ++v59;
          }
          while ((_DWORD)v59 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v57 = (v58 >> v31) | v32;
        v32 = v58 << -(char)v31;
        if (!v31)
          v32 = 0;
        *(_DWORD *)(a3 + 24) = v32;
        *(_DWORD *)(a3 + 28) = v31;
        v49 = v3 - (_QWORD)v4;
        v50 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v31 -= 32;
        v57 = v32;
      }
      *(_DWORD *)&v42[20 * v40 + 4] = v57;
      if (v50 + v31 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v93 = "Cannot read dbmd.mMixingGains[cfg].mTopGain";
        goto LABEL_167;
      }
      *(_DWORD *)(a3 + 28) = v31 - 32;
      if (v31 - 32 < 0)
      {
        if ((v49 & ~(v49 >> 63) & 0xFFFFFFFC) != 0 && v41 <= (unint64_t)v4)
        {
          v64 = bswap32(*v4);
        }
        else
        {
          v65 = 0;
          v64 = v32;
          do
          {
            v66 = (unsigned __int8 *)v4 + v65;
            v67 = v64 << 8;
            *(_DWORD *)(a3 + 24) = v67;
            v68 = 255;
            if ((unint64_t)v4 + v65 < v3 && (unint64_t)v66 >= v41)
              v68 = *v66;
            v64 = v68 | v67;
            *(_DWORD *)(a3 + 24) = v64;
            ++v65;
          }
          while ((_DWORD)v65 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v63 = (v64 >> v31) | v32;
        v32 = v64 << -(char)v31;
        if (!v31)
          v32 = 0;
        *(_DWORD *)(a3 + 24) = v32;
        *(_DWORD *)(a3 + 28) = v31;
        v49 = v3 - (_QWORD)v4;
        v50 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v31 -= 32;
        v63 = v32;
      }
      *(_DWORD *)&v42[20 * v40 + 8] = v63;
      if (v50 + v31 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v93 = "Cannot read dbmd.mMixingGains[cfg].mEarLevelBalance";
        goto LABEL_167;
      }
      *(_DWORD *)(a3 + 28) = v31 - 32;
      if (v31 - 32 < 0)
      {
        if ((v49 & ~(v49 >> 63) & 0xFFFFFFFC) != 0 && v41 <= (unint64_t)v4)
        {
          v70 = bswap32(*v4);
        }
        else
        {
          v71 = 0;
          v70 = v32;
          do
          {
            v72 = (unsigned __int8 *)v4 + v71;
            v73 = v70 << 8;
            *(_DWORD *)(a3 + 24) = v73;
            v74 = 255;
            if ((unint64_t)v4 + v71 < v3 && (unint64_t)v72 >= v41)
              v74 = *v72;
            v70 = v74 | v73;
            *(_DWORD *)(a3 + 24) = v70;
            ++v71;
          }
          while ((_DWORD)v71 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v69 = (v70 >> v31) | v32;
        v32 = v70 << -(char)v31;
        if (!v31)
          v32 = 0;
        *(_DWORD *)(a3 + 24) = v32;
        *(_DWORD *)(a3 + 28) = v31;
        v49 = v3 - (_QWORD)v4;
        v50 = 8 * (v3 - (_DWORD)v4);
      }
      else
      {
        v31 -= 32;
        v69 = v32;
      }
      *(_DWORD *)&v42[20 * v40 + 12] = v69;
      if (v50 + v31 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v93 = "Cannot read dbmd.mMixingGains[cfg].mHeightBalance";
        goto LABEL_167;
      }
      *(_DWORD *)(a3 + 28) = v31 - 32;
      if (v31 - 32 < 0)
      {
        if ((v49 & ~(v49 >> 63) & 0xFFFFFFFC) != 0 && v41 <= (unint64_t)v4)
        {
          v76 = bswap32(*v4);
        }
        else
        {
          v77 = 0;
          v76 = v32;
          do
          {
            v78 = (unsigned __int8 *)v4 + v77;
            v79 = v76 << 8;
            *(_DWORD *)(a3 + 24) = v79;
            v80 = 255;
            if ((unint64_t)v4 + v77 < v3 && (unint64_t)v78 >= v41)
              v80 = *v78;
            v76 = v80 | v79;
            *(_DWORD *)(a3 + 24) = v76;
            ++v77;
          }
          while ((_DWORD)v77 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v75 = (v76 >> v31) | v32;
        v32 = v76 << -(char)v31;
        if (!v31)
          v32 = 0;
        *(_DWORD *)(a3 + 24) = v32;
        *(_DWORD *)(a3 + 28) = v31;
      }
      else
      {
        v31 -= 32;
        v75 = v32;
      }
      *(_DWORD *)&v42[20 * v40 + 16] = v75;
    }
    ++v40;
  }
  while (v40 != 9);
  if (v31 + 8 * ((int)v3 - (int)v4) < 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v93 = "Cannot read dbmd.mNumChannels";
LABEL_167:
    *exception = v93;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v81 = v32 >> 25;
  *(_DWORD *)(a3 + 28) = v31 - 7;
  if (v31 - 7 < 0)
  {
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v41 <= (unint64_t)v4)
    {
      v32 = bswap32(*v4);
    }
    else
    {
      v83 = 0;
      do
      {
        v84 = (unsigned __int8 *)v4 + v83;
        v85 = v32 << 8;
        *(_DWORD *)(a3 + 24) = v85;
        v86 = 255;
        if ((unint64_t)v4 + v83 < v3 && (unint64_t)v84 >= v41)
          v86 = *v84;
        v32 = v86 | v85;
        *(_DWORD *)(a3 + 24) = v32;
        ++v83;
      }
      while ((_DWORD)v83 != 4);
    }
    v87 = v32 << (7 - v31);
    v88 = v31 + 25;
    *(_DWORD *)(a3 + 28) = v88;
    *(_QWORD *)a3 = v4 + 1;
    v81 |= v32 >> v88;
    if (v88)
      v82 = v87;
    else
      v82 = 0;
  }
  else
  {
    v82 = v32 << 7;
  }
  *(_DWORD *)(a3 + 24) = v82;
  a2[192] = v81 + 1;
  v89 = a2 + 193;
  v90 = v81 + 1;
  do
  {
    result = AT::TBitstreamReader<unsigned int>::GetBit(a3);
    *v89++ = result;
    --v90;
  }
  while (v90);
  return result;
}

void APAC::MetadataBitStreamParser::parseBinauralization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  _QWORD *exception;
  const char *v79;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v79 = "Cannot read binaural.mIsDirectBinauralization";
    goto LABEL_137;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v6 + 31;
    v17 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> (v6 + 31);
    if (v6 == -31)
      v10 = 0;
    else
      v10 = v7 << (1 - v6);
    if (v17)
      v9 = 0;
    else
      v9 = v18;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8 != 0;
  if (v8)
  {
    if (v9 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v79 = "Cannot read binaural.mChannelLayoutTag";
      goto LABEL_137;
    }
    *(_DWORD *)(a3 + 28) = v9 - 32;
    if (v9 - 32 < 0)
    {
      v20 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v20 <= (unint64_t)v4)
      {
        v21 = bswap32(*v4);
      }
      else
      {
        v22 = 0;
        v21 = v10;
        do
        {
          v23 = (unsigned __int8 *)v4 + v22;
          v24 = v21 << 8;
          *(_DWORD *)(a3 + 24) = v24;
          v25 = 255;
          if ((unint64_t)v4 + v22 < v3 && (unint64_t)v23 >= v20)
            v25 = *v23;
          v21 = v25 | v24;
          *(_DWORD *)(a3 + 24) = v21;
          ++v22;
        }
        while ((_DWORD)v22 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v19 = (v21 >> v9) | v10;
      v10 = v21 << -(char)v9;
      if (!v9)
        v10 = 0;
      *(_DWORD *)(a3 + 24) = v10;
      *(_DWORD *)(a3 + 28) = v9;
    }
    else
    {
      v9 -= 32;
      v19 = v10;
    }
    *(_DWORD *)(a2 + 4) = v19;
  }
  if (v9 + 8 * ((int)v3 - (int)v4) <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v79 = "Cannot read binaural.mHRTFType";
    goto LABEL_137;
  }
  v26 = v10 >> 29;
  v27 = v9 - 3;
  *(_DWORD *)(a3 + 28) = v9 - 3;
  if (v9 - 3 < 0)
  {
    v29 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v29 <= (unint64_t)v4)
    {
      v10 = bswap32(*v4);
    }
    else
    {
      v30 = 0;
      do
      {
        v31 = (unsigned __int8 *)v4 + v30;
        v32 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v32;
        v33 = 255;
        if ((unint64_t)v4 + v30 < v3 && (unint64_t)v31 >= v29)
          v33 = *v31;
        v10 = v33 | v32;
        *(_DWORD *)(a3 + 24) = v10;
        ++v30;
      }
      while ((_DWORD)v30 != 4);
    }
    v34 = v10 << (3 - v9);
    v35 = v9 + 29;
    *(_DWORD *)(a3 + 28) = v35;
    *(_QWORD *)a3 = ++v4;
    v26 |= v10 >> v35;
    if (v35)
      v28 = v34;
    else
      v28 = 0;
    if (v35)
      v27 = v35;
    else
      v27 = 0;
  }
  else
  {
    v28 = 8 * v10;
  }
  *(_DWORD *)(a3 + 24) = v28;
  *(_BYTE *)(a2 + 8) = v26;
  if (v26 != 2)
  {
    if (v26 != 1)
      return;
    if (v27 + 8 * ((int)v3 - (int)v4) > 7)
    {
      v36 = HIBYTE(v28);
      *(_DWORD *)(a3 + 28) = v27 - 8;
      if (v27 - 8 < 0)
      {
        v41 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v41 <= (unint64_t)v4)
        {
          v28 = bswap32(*v4);
        }
        else
        {
          v43 = 0;
          do
          {
            v44 = (unsigned __int8 *)v4 + v43;
            v45 = v28 << 8;
            *(_DWORD *)(a3 + 24) = v45;
            v46 = 255;
            if ((unint64_t)v4 + v43 < v3 && (unint64_t)v44 >= v41)
              v46 = *v44;
            v28 = v46 | v45;
            *(_DWORD *)(a3 + 24) = v28;
            ++v43;
          }
          while ((_DWORD)v43 != 4);
        }
        v47 = v28 << (8 - v27);
        v48 = v27 + 24;
        *(_DWORD *)(a3 + 28) = v48;
        *(_QWORD *)a3 = v4 + 1;
        v36 |= v28 >> v48;
        if (v48)
          v37 = v47;
        else
          v37 = 0;
      }
      else
      {
        v37 = v28 << 8;
      }
      *(_DWORD *)(a3 + 24) = v37;
      *(_BYTE *)(a2 + 9) = v36;
      return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v79 = "Cannot read binaural.mPredefinedIR_ID";
LABEL_137:
    *exception = v79;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  if (v27 + 8 * ((int)v3 - (int)v4) <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v79 = "Cannot read binaural.mDataLocationIndex";
    goto LABEL_137;
  }
  v38 = v28 >> 30;
  v39 = v27 - 2;
  *(_DWORD *)(a3 + 28) = v27 - 2;
  if (v27 - 2 < 0)
  {
    v42 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v42 <= (unint64_t)v4)
    {
      v28 = bswap32(*v4);
    }
    else
    {
      v49 = 0;
      do
      {
        v50 = (unsigned __int8 *)v4 + v49;
        v51 = v28 << 8;
        *(_DWORD *)(a3 + 24) = v51;
        v52 = 255;
        if ((unint64_t)v4 + v49 < v3 && (unint64_t)v50 >= v42)
          v52 = *v50;
        v28 = v52 | v51;
        *(_DWORD *)(a3 + 24) = v28;
        ++v49;
      }
      while ((_DWORD)v49 != 4);
    }
    *(_QWORD *)a3 = ++v4;
    v39 = v27 + 30;
    v38 |= v28 >> (v27 + 30);
    if (v27 == -30)
    {
      v53 = 0;
      v40 = 0;
      *(_BYTE *)(a2 + 14) = v38;
      *(_QWORD *)(a3 + 24) = 0xFFFFFFF700000000;
      goto LABEL_87;
    }
    v40 = v28 << (2 - v27);
  }
  else
  {
    v40 = 4 * v28;
  }
  *(_BYTE *)(a2 + 14) = v38;
  v53 = v40 >> 23;
  v54 = v39 - 9;
  *(_DWORD *)(a3 + 24) = v40;
  *(_DWORD *)(a3 + 28) = v39 - 9;
  if (v39 - 9 >= 0)
  {
    v55 = v40 << 9;
    goto LABEL_97;
  }
  v42 = *(_QWORD *)(a3 + 8);
LABEL_87:
  if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
    && v42 <= (unint64_t)v4)
  {
    v40 = bswap32(*v4);
  }
  else
  {
    v56 = 0;
    do
    {
      v57 = (unsigned __int8 *)v4 + v56;
      v58 = v40 << 8;
      *(_DWORD *)(a3 + 24) = v58;
      v59 = 255;
      if ((unint64_t)v4 + v56 < v3 && (unint64_t)v57 >= v42)
        v59 = *v57;
      v40 = v59 | v58;
      *(_DWORD *)(a3 + 24) = v40;
      ++v56;
    }
    while ((_DWORD)v56 != 4);
  }
  *(_QWORD *)a3 = ++v4;
  v54 = v39 + 23;
  v53 |= v40 >> (v39 + 23);
  if (v39 == -23)
  {
    v60 = 0;
    v55 = 0;
    *(_WORD *)(a2 + 10) = v53;
    *(_QWORD *)(a3 + 24) = 0xFFFFFFF700000000;
    goto LABEL_101;
  }
  v55 = v40 << (9 - v39);
LABEL_97:
  *(_WORD *)(a2 + 10) = v53;
  v60 = v55 >> 23;
  v61 = v54 - 9;
  *(_DWORD *)(a3 + 24) = v55;
  *(_DWORD *)(a3 + 28) = v54 - 9;
  if (v54 - 9 >= 0)
  {
    v62 = v55 << 9;
    goto LABEL_115;
  }
  v42 = *(_QWORD *)(a3 + 8);
LABEL_101:
  if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
    && v42 <= (unint64_t)v4)
  {
    v55 = bswap32(*v4);
  }
  else
  {
    v63 = 0;
    do
    {
      v64 = (unsigned __int8 *)v4 + v63;
      v65 = v55 << 8;
      *(_DWORD *)(a3 + 24) = v65;
      v66 = 255;
      if ((unint64_t)v4 + v63 < v3 && (unint64_t)v64 >= v42)
        v66 = *v64;
      v55 = v66 | v65;
      *(_DWORD *)(a3 + 24) = v55;
      ++v63;
    }
    while ((_DWORD)v63 != 4);
  }
  v67 = v55 << (9 - v54);
  v68 = v54 + 23;
  *(_DWORD *)(a3 + 28) = v68;
  *(_QWORD *)a3 = ++v4;
  v60 |= v55 >> v68;
  if (v68)
    v62 = v67;
  else
    v62 = 0;
  if (v68)
    v61 = v68;
  else
    v61 = 0;
LABEL_115:
  *(_DWORD *)(a3 + 24) = v62;
  *(_WORD *)(a2 + 12) = v60;
  if (v61 + 8 * ((int)v3 - (int)v4) <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v79 = "Cannot read binaural.mFallbackCustomHRTF.mHRTFType";
    goto LABEL_137;
  }
  v69 = v62 >> 29;
  *(_DWORD *)(a3 + 28) = v61 - 3;
  if (v61 - 3 < 0)
  {
    v71 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v71 <= (unint64_t)v4)
    {
      v62 = bswap32(*v4);
    }
    else
    {
      v72 = 0;
      do
      {
        v73 = (unsigned __int8 *)v4 + v72;
        v74 = v62 << 8;
        *(_DWORD *)(a3 + 24) = v74;
        v75 = 255;
        if ((unint64_t)v4 + v72 < v3 && (unint64_t)v73 >= v71)
          v75 = *v73;
        v62 = v75 | v74;
        *(_DWORD *)(a3 + 24) = v62;
        ++v72;
      }
      while ((_DWORD)v72 != 4);
    }
    v76 = v62 << (3 - v61);
    v77 = v61 + 29;
    *(_DWORD *)(a3 + 28) = v77;
    *(_QWORD *)a3 = v4 + 1;
    v69 |= v62 >> v77;
    if (v77)
      v70 = v76;
    else
      v70 = 0;
  }
  else
  {
    v70 = 8 * v62;
  }
  *(_DWORD *)(a3 + 24) = v70;
  *(_BYTE *)(a2 + 15) = v69;
}

{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  _QWORD *exception;
  const char *v46;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v46 = "Cannot read binaural.isDirectBinauralization";
    goto LABEL_74;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v6 + 31;
    v17 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> (v6 + 31);
    if (v6 == -31)
      v10 = 0;
    else
      v10 = v7 << (1 - v6);
    if (v17)
      v9 = 0;
    else
      v9 = v18;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8 != 0;
  if (!v8)
  {
    if (v9 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v46 = "Cannot read binaural.channelLayoutTag";
      goto LABEL_74;
    }
    *(_DWORD *)(a3 + 28) = v9 - 32;
    if (v9 - 32 < 0)
    {
      v20 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v20 <= (unint64_t)v4)
      {
        v21 = bswap32(*v4);
      }
      else
      {
        v22 = 0;
        v21 = v10;
        do
        {
          v23 = (unsigned __int8 *)v4 + v22;
          v24 = v21 << 8;
          *(_DWORD *)(a3 + 24) = v24;
          v25 = 255;
          if ((unint64_t)v4 + v22 < v3 && (unint64_t)v23 >= v20)
            v25 = *v23;
          v21 = v25 | v24;
          *(_DWORD *)(a3 + 24) = v21;
          ++v22;
        }
        while ((_DWORD)v22 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v19 = (v21 >> v9) | v10;
      v10 = v21 << -(char)v9;
      if (!v9)
        v10 = 0;
      *(_DWORD *)(a3 + 24) = v10;
      *(_DWORD *)(a3 + 28) = v9;
    }
    else
    {
      v9 -= 32;
      v19 = v10;
    }
    *(_DWORD *)(a2 + 4) = v19;
  }
  if (v9 + 8 * ((int)v3 - (int)v4) <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v46 = "Cannot read binaural.HRTFType";
    goto LABEL_74;
  }
  v26 = v10 >> 29;
  v27 = v9 - 3;
  *(_DWORD *)(a3 + 28) = v9 - 3;
  if (v9 - 3 < 0)
  {
    v29 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v29 <= (unint64_t)v4)
    {
      v10 = bswap32(*v4);
    }
    else
    {
      v30 = 0;
      do
      {
        v31 = (unsigned __int8 *)v4 + v30;
        v32 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v32;
        v33 = 255;
        if ((unint64_t)v4 + v30 < v3 && (unint64_t)v31 >= v29)
          v33 = *v31;
        v10 = v33 | v32;
        *(_DWORD *)(a3 + 24) = v10;
        ++v30;
      }
      while ((_DWORD)v30 != 4);
    }
    v34 = v10 << (3 - v9);
    v35 = v9 + 29;
    *(_DWORD *)(a3 + 28) = v35;
    *(_QWORD *)a3 = ++v4;
    v26 |= v10 >> v35;
    if (v35)
      v28 = v34;
    else
      v28 = 0;
    if (v35)
      v27 = v35;
    else
      v27 = 0;
  }
  else
  {
    v28 = 8 * v10;
  }
  *(_DWORD *)(a3 + 24) = v28;
  *(_BYTE *)(a2 + 8) = v26;
  if (v26 == 1)
  {
    if (v27 + 8 * ((int)v3 - (int)v4) > 3)
    {
      v36 = v28 >> 28;
      *(_DWORD *)(a3 + 28) = v27 - 4;
      if (v27 - 4 < 0)
      {
        v38 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v38 <= (unint64_t)v4)
        {
          v28 = bswap32(*v4);
        }
        else
        {
          v39 = 0;
          do
          {
            v40 = (unsigned __int8 *)v4 + v39;
            v41 = v28 << 8;
            *(_DWORD *)(a3 + 24) = v41;
            v42 = 255;
            if ((unint64_t)v4 + v39 < v3 && (unint64_t)v40 >= v38)
              v42 = *v40;
            v28 = v42 | v41;
            *(_DWORD *)(a3 + 24) = v28;
            ++v39;
          }
          while ((_DWORD)v39 != 4);
        }
        v43 = v28 << (4 - v27);
        v44 = v27 + 28;
        *(_DWORD *)(a3 + 28) = v44;
        *(_QWORD *)a3 = v4 + 1;
        v36 |= v28 >> v44;
        if (v44)
          v37 = v43;
        else
          v37 = 0;
      }
      else
      {
        v37 = 16 * v28;
      }
      *(_DWORD *)(a3 + 24) = v37;
      *(_BYTE *)(a2 + 9) = v36;
      return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v46 = "Cannot read binaural.codeBookID";
LABEL_74:
    *exception = v46;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

void APAC::MetadataBitStreamParser::parseSPAD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  int v31;
  _QWORD *exception;

  v4 = *(_QWORD *)(a4 + 16);
  v5 = *(unsigned int **)a4;
  v6 = v4 - *(_QWORD *)a4;
  v7 = *(_DWORD *)(a4 + 28);
  if (v7 + 8 * (int)v6 <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Cannot read spad.mDataLocationIndex";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v8 = *(_DWORD *)(a4 + 24);
  v9 = v8 >> 30;
  v10 = v7 - 2;
  *(_DWORD *)(a4 + 28) = v7 - 2;
  if (v7 - 2 < 0)
  {
    v12 = v6 & ~(v6 >> 63) & 0xFFFFFFFC;
    v13 = *(_QWORD *)(a4 + 8);
    if (v12)
      v14 = v13 > (unint64_t)v5;
    else
      v14 = 1;
    if (v14)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v5 + v15;
        v17 = v8 << 8;
        *(_DWORD *)(a4 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v5 + v15 < v4 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v8 = v18 | v17;
        *(_DWORD *)(a4 + 24) = v8;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v8 = bswap32(*v5);
    }
    *(_QWORD *)a4 = ++v5;
    v10 = v7 + 30;
    v9 |= v8 >> (v7 + 30);
    if (v7 == -30)
    {
      v19 = 0;
      v11 = 0;
      *(_BYTE *)a2 = v9;
      *(_QWORD *)(a4 + 24) = 0xFFFFFFF700000000;
      goto LABEL_20;
    }
    v11 = v8 << (2 - v7);
  }
  else
  {
    v11 = 4 * v8;
  }
  *(_BYTE *)a2 = v9;
  v19 = v11 >> 23;
  v20 = v10 - 9;
  *(_DWORD *)(a4 + 24) = v11;
  *(_DWORD *)(a4 + 28) = v10 - 9;
  if (v10 - 9 >= 0)
  {
    v21 = v11 << 9;
    goto LABEL_30;
  }
  v13 = *(_QWORD *)(a4 + 8);
LABEL_20:
  if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
    && v13 <= (unint64_t)v5)
  {
    v11 = bswap32(*v5);
  }
  else
  {
    v22 = 0;
    do
    {
      v23 = (unsigned __int8 *)v5 + v22;
      v24 = v11 << 8;
      *(_DWORD *)(a4 + 24) = v24;
      v25 = 255;
      if ((unint64_t)v5 + v22 < v4 && (unint64_t)v23 >= v13)
        v25 = *v23;
      v11 = v25 | v24;
      *(_DWORD *)(a4 + 24) = v11;
      ++v22;
    }
    while ((_DWORD)v22 != 4);
  }
  *(_QWORD *)a4 = ++v5;
  v20 = v10 + 23;
  v19 |= v11 >> (v10 + 23);
  if (v10 == -23)
  {
    v26 = 0;
    v21 = 0;
    *(_WORD *)(a2 + 2) = v19;
    *(_QWORD *)(a4 + 24) = 0xFFFFFFF700000000;
    goto LABEL_34;
  }
  v21 = v11 << (9 - v10);
LABEL_30:
  *(_WORD *)(a2 + 2) = v19;
  v26 = v21 >> 23;
  *(_DWORD *)(a4 + 24) = v21;
  *(_DWORD *)(a4 + 28) = v20 - 9;
  if (v20 - 9 >= 0)
  {
    v27 = v21 << 9;
    goto LABEL_45;
  }
  v13 = *(_QWORD *)(a4 + 8);
LABEL_34:
  if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
    && v13 <= (unint64_t)v5)
  {
    v21 = bswap32(*v5);
  }
  else
  {
    v28 = 0;
    do
    {
      v29 = (unsigned __int8 *)v5 + v28;
      v30 = v21 << 8;
      *(_DWORD *)(a4 + 24) = v30;
      v31 = 255;
      if ((unint64_t)v5 + v28 < v4 && (unint64_t)v29 >= v13)
        v31 = *v29;
      v21 = v31 | v30;
      *(_DWORD *)(a4 + 24) = v21;
      ++v28;
    }
    while ((_DWORD)v28 != 4);
  }
  *(_DWORD *)(a4 + 28) = v20 + 23;
  *(_QWORD *)a4 = v5 + 1;
  v26 |= v21 >> (v20 + 23);
  if (v20 == -23)
    v27 = 0;
  else
    v27 = v21 << (9 - v20);
LABEL_45:
  *(_DWORD *)(a4 + 24) = v27;
  *(_WORD *)(a2 + 4) = v26;
  APAC::MetadataBitStreamParser::parseFallbackSPAD(a1, a2 + 8, a3, a4);
}

void APAC::MetadataBitStreamParser::parseDistanceAttenuation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  _QWORD *exception;
  const char *v56;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v56 = "Cannot read distAttnParams.mAttnLawIndex";
    goto LABEL_82;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 29;
  v9 = v6 - 3;
  *(_DWORD *)(a3 + 28) = v6 - 3;
  if (v6 - 3 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v6 + 29;
    v17 = v6 == -29;
    *(_DWORD *)(a3 + 28) = v6 + 29;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> (v6 + 29);
    if (v6 == -29)
      v10 = 0;
    else
      v10 = v7 << (3 - v6);
    if (v17)
      v9 = 0;
    else
      v9 = v18;
  }
  else
  {
    v10 = 8 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8;
  v19 = v3 - (_QWORD)v4;
  if (v9 + 8 * ((int)v3 - (int)v4) <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v56 = "Cannot read distAttnParams.mDistNorm";
    goto LABEL_82;
  }
  *(_DWORD *)(a3 + 28) = v9 - 32;
  if (v9 - 32 < 0)
  {
    v22 = v19 & ~(v19 >> 63);
    v23 = *(_QWORD *)(a3 + 8);
    if ((v22 & 0xFFFFFFFC) != 0 && v23 <= (unint64_t)v4)
    {
      v24 = bswap32(*v4);
    }
    else
    {
      v25 = 0;
      v24 = v10;
      do
      {
        v26 = (unsigned __int8 *)v4 + v25;
        v27 = v24 << 8;
        *(_DWORD *)(a3 + 24) = v27;
        v28 = 255;
        if ((unint64_t)v4 + v25 < v3 && (unint64_t)v26 >= v23)
          v28 = *v26;
        v24 = v28 | v27;
        *(_DWORD *)(a3 + 24) = v24;
        ++v25;
      }
      while ((_DWORD)v25 != 4);
    }
    *(_QWORD *)a3 = ++v4;
    v21 = (v24 >> v9) | v10;
    v10 = v24 << -(char)v9;
    if (!v9)
      v10 = 0;
    *(_DWORD *)(a3 + 24) = v10;
    *(_DWORD *)(a3 + 28) = v9;
    v19 = v3 - (_QWORD)v4;
    v20 = 8 * (v3 - (_DWORD)v4);
  }
  else
  {
    v20 = 8 * v19;
    v9 -= 32;
    v21 = v10;
  }
  *(_DWORD *)(a2 + 4) = v21;
  if (v20 + v9 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v56 = "Cannot read distAttnParams.mRefDistance";
    goto LABEL_82;
  }
  *(_DWORD *)(a3 + 28) = v9 - 32;
  if (v9 - 32 < 0)
  {
    v30 = v19 & ~(v19 >> 63);
    v31 = *(_QWORD *)(a3 + 8);
    if ((v30 & 0xFFFFFFFC) != 0 && v31 <= (unint64_t)v4)
    {
      v32 = bswap32(*v4);
    }
    else
    {
      v33 = 0;
      v32 = v10;
      do
      {
        v34 = (unsigned __int8 *)v4 + v33;
        v35 = v32 << 8;
        *(_DWORD *)(a3 + 24) = v35;
        v36 = 255;
        if ((unint64_t)v4 + v33 < v3 && (unint64_t)v34 >= v31)
          v36 = *v34;
        v32 = v36 | v35;
        *(_DWORD *)(a3 + 24) = v32;
        ++v33;
      }
      while ((_DWORD)v33 != 4);
    }
    *(_QWORD *)a3 = ++v4;
    v29 = (v32 >> v9) | v10;
    v10 = v32 << -(char)v9;
    if (!v9)
      v10 = 0;
    *(_DWORD *)(a3 + 24) = v10;
    *(_DWORD *)(a3 + 28) = v9;
    v19 = v3 - (_QWORD)v4;
    v20 = 8 * (v3 - (_DWORD)v4);
  }
  else
  {
    v9 -= 32;
    v29 = v10;
  }
  *(_DWORD *)(a2 + 8) = v29;
  if (v20 + v9 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v56 = "Cannot read distAttnParams.mMaxDistance";
    goto LABEL_82;
  }
  *(_DWORD *)(a3 + 28) = v9 - 32;
  if (v9 - 32 < 0)
  {
    v38 = v19 & ~(v19 >> 63);
    v39 = *(_QWORD *)(a3 + 8);
    if ((v38 & 0xFFFFFFFC) != 0 && v39 <= (unint64_t)v4)
    {
      v40 = bswap32(*v4);
    }
    else
    {
      v41 = 0;
      v40 = v10;
      do
      {
        v42 = (unsigned __int8 *)v4 + v41;
        v43 = v40 << 8;
        *(_DWORD *)(a3 + 24) = v43;
        v44 = 255;
        if ((unint64_t)v4 + v41 < v3 && (unint64_t)v42 >= v39)
          v44 = *v42;
        v40 = v44 | v43;
        *(_DWORD *)(a3 + 24) = v40;
        ++v41;
      }
      while ((_DWORD)v41 != 4);
    }
    *(_QWORD *)a3 = ++v4;
    v37 = (v40 >> v9) | v10;
    v10 = v40 << -(char)v9;
    if (!v9)
      v10 = 0;
    *(_DWORD *)(a3 + 24) = v10;
    *(_DWORD *)(a3 + 28) = v9;
    v19 = v3 - (_QWORD)v4;
    v20 = 8 * (v3 - (_DWORD)v4);
  }
  else
  {
    v9 -= 32;
    v37 = v10;
  }
  *(_DWORD *)(a2 + 12) = v37;
  if ((v20 + v9 < 0) ^ __OFADD__(v20, v9) | (v20 + v9 == 0))
  {
    exception = __cxa_allocate_exception(8uLL);
    v56 = "Cannot read distAttnParams.mAttnNormIndex";
LABEL_82:
    *exception = v56;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v45 = v10 >> 31;
  *(_DWORD *)(a3 + 28) = v9 - 1;
  if (v9 - 1 < 0)
  {
    v47 = v19 & ~(v19 >> 63);
    v48 = *(_QWORD *)(a3 + 8);
    if ((v47 & 0xFFFFFFFC) != 0 && v48 <= (unint64_t)v4)
    {
      v10 = bswap32(*v4);
    }
    else
    {
      v49 = 0;
      do
      {
        v50 = (unsigned __int8 *)v4 + v49;
        v51 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v51;
        v52 = 255;
        if ((unint64_t)v4 + v49 < v3 && (unint64_t)v50 >= v48)
          v52 = *v50;
        v10 = v52 | v51;
        *(_DWORD *)(a3 + 24) = v10;
        ++v49;
      }
      while ((_DWORD)v49 != 4);
    }
    v53 = v10 << (1 - v9);
    v54 = v9 + 31;
    *(_DWORD *)(a3 + 28) = v54;
    *(_QWORD *)a3 = v4 + 1;
    v45 |= v10 >> v54;
    if (v54)
      v46 = v53;
    else
      v46 = 0;
  }
  else
  {
    v46 = 2 * v10;
  }
  *(_DWORD *)(a3 + 24) = v46;
  *(_BYTE *)(a2 + 16) = v45 != 0;
}

void APAC::MetadataBitStreamParser::parseGenericRenderingConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  int v61;
  BOOL v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  _QWORD *exception;
  const char *v74;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v74 = "Cannot read cfg.mHasPreset";
    goto LABEL_118;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v6 + 31;
    v17 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> (v6 + 31);
    if (v6 == -31)
      v10 = 0;
    else
      v10 = v7 << (1 - v6);
    if (v17)
      v9 = 0;
    else
      v9 = v18;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8 != 0;
  v19 = v3 - (_QWORD)v4;
  v20 = v9 + 8 * (v3 - (_DWORD)v4);
  if (v8)
  {
    if (v20 > 10)
    {
      v21 = v10 >> 21;
      *(_DWORD *)(a3 + 28) = v9 - 11;
      if (v9 - 11 < 0)
      {
        v26 = *(_QWORD *)(a3 + 8);
        if ((v19 & ~(v19 >> 63) & 0xFFFFFFFC) != 0 && v26 <= (unint64_t)v4)
        {
          v10 = bswap32(*v4);
        }
        else
        {
          v28 = 0;
          do
          {
            v29 = (unsigned __int8 *)v4 + v28;
            v30 = v10 << 8;
            *(_DWORD *)(a3 + 24) = v30;
            v31 = 255;
            if ((unint64_t)v4 + v28 < v3 && (unint64_t)v29 >= v26)
              v31 = *v29;
            v10 = v31 | v30;
            *(_DWORD *)(a3 + 24) = v10;
            ++v28;
          }
          while ((_DWORD)v28 != 4);
        }
        v32 = v10 << (11 - v9);
        v33 = v9 + 21;
        *(_DWORD *)(a3 + 28) = v33;
        *(_QWORD *)a3 = v4 + 1;
        v21 |= v10 >> v33;
        if (v33)
          v22 = v32;
        else
          v22 = 0;
      }
      else
      {
        v22 = v10 << 11;
      }
      *(_DWORD *)(a3 + 24) = v22;
      *(_WORD *)(a2 + 2) = v21;
      return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v74 = "Cannot read cfg.mPresetIndex";
LABEL_118:
    *exception = v74;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  if (v20 <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v74 = "Cannot read cfg.mDataLocationIndex";
    goto LABEL_118;
  }
  v23 = v10 >> 30;
  v24 = v9 - 2;
  *(_DWORD *)(a3 + 28) = v9 - 2;
  if (v9 - 2 < 0)
  {
    v27 = *(_QWORD *)(a3 + 8);
    if ((v19 & ~(v19 >> 63) & 0xFFFFFFFC) != 0 && v27 <= (unint64_t)v4)
    {
      v10 = bswap32(*v4);
    }
    else
    {
      v34 = 0;
      do
      {
        v35 = (unsigned __int8 *)v4 + v34;
        v36 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v36;
        v37 = 255;
        if ((unint64_t)v4 + v34 < v3 && (unint64_t)v35 >= v27)
          v37 = *v35;
        v10 = v37 | v36;
        *(_DWORD *)(a3 + 24) = v10;
        ++v34;
      }
      while ((_DWORD)v34 != 4);
    }
    *(_QWORD *)a3 = ++v4;
    v24 = v9 + 30;
    v23 |= v10 >> (v9 + 30);
    if (v9 == -30)
    {
      v38 = 0;
      v25 = 0;
      *(_BYTE *)(a2 + 4) = v23;
      *(_QWORD *)(a3 + 24) = 0xFFFFFFF700000000;
      goto LABEL_53;
    }
    v25 = v10 << (2 - v9);
  }
  else
  {
    v25 = 4 * v10;
  }
  *(_BYTE *)(a2 + 4) = v23;
  v38 = v25 >> 23;
  v39 = v24 - 9;
  *(_DWORD *)(a3 + 24) = v25;
  *(_DWORD *)(a3 + 28) = v24 - 9;
  if (v24 - 9 >= 0)
  {
    v40 = v25 << 9;
    goto LABEL_63;
  }
  v27 = *(_QWORD *)(a3 + 8);
LABEL_53:
  if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
    && v27 <= (unint64_t)v4)
  {
    v25 = bswap32(*v4);
  }
  else
  {
    v41 = 0;
    do
    {
      v42 = (unsigned __int8 *)v4 + v41;
      v43 = v25 << 8;
      *(_DWORD *)(a3 + 24) = v43;
      v44 = 255;
      if ((unint64_t)v4 + v41 < v3 && (unint64_t)v42 >= v27)
        v44 = *v42;
      v25 = v44 | v43;
      *(_DWORD *)(a3 + 24) = v25;
      ++v41;
    }
    while ((_DWORD)v41 != 4);
  }
  *(_QWORD *)a3 = ++v4;
  v39 = v24 + 23;
  v38 |= v25 >> (v24 + 23);
  if (v24 == -23)
  {
    v45 = 0;
    v40 = 0;
    *(_WORD *)(a2 + 6) = v38;
    *(_QWORD *)(a3 + 24) = 0xFFFFFFF700000000;
    goto LABEL_67;
  }
  v40 = v25 << (9 - v24);
LABEL_63:
  *(_WORD *)(a2 + 6) = v38;
  v45 = v40 >> 23;
  v46 = v39 - 9;
  *(_DWORD *)(a3 + 24) = v40;
  *(_DWORD *)(a3 + 28) = v39 - 9;
  if (v39 - 9 >= 0)
  {
    v47 = v40 << 9;
    goto LABEL_81;
  }
  v27 = *(_QWORD *)(a3 + 8);
LABEL_67:
  if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
    && v27 <= (unint64_t)v4)
  {
    v40 = bswap32(*v4);
  }
  else
  {
    v48 = 0;
    do
    {
      v49 = (unsigned __int8 *)v4 + v48;
      v50 = v40 << 8;
      *(_DWORD *)(a3 + 24) = v50;
      v51 = 255;
      if ((unint64_t)v4 + v48 < v3 && (unint64_t)v49 >= v27)
        v51 = *v49;
      v40 = v51 | v50;
      *(_DWORD *)(a3 + 24) = v40;
      ++v48;
    }
    while ((_DWORD)v48 != 4);
  }
  v52 = v40 << (9 - v39);
  v53 = v39 + 23;
  *(_DWORD *)(a3 + 28) = v53;
  *(_QWORD *)a3 = ++v4;
  v45 |= v40 >> v53;
  if (v53)
    v47 = v52;
  else
    v47 = 0;
  if (v53)
    v46 = v53;
  else
    v46 = 0;
LABEL_81:
  *(_DWORD *)(a3 + 24) = v47;
  *(_WORD *)(a2 + 8) = v45;
  if (v46 + 8 * ((int)v3 - (int)v4) <= 10)
  {
    exception = __cxa_allocate_exception(8uLL);
    v74 = "Cannot read cfg.mFallbackIndex";
    goto LABEL_118;
  }
  v54 = v47 >> 21;
  v55 = v46 - 11;
  *(_DWORD *)(a3 + 28) = v46 - 11;
  if (v46 - 11 < 0)
  {
    v57 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v57 <= (unint64_t)v4)
    {
      v47 = bswap32(*v4);
    }
    else
    {
      v58 = 0;
      do
      {
        v59 = (unsigned __int8 *)v4 + v58;
        v60 = v47 << 8;
        *(_DWORD *)(a3 + 24) = v60;
        v61 = 255;
        if ((unint64_t)v4 + v58 < v3 && (unint64_t)v59 >= v57)
          v61 = *v59;
        v47 = v61 | v60;
        *(_DWORD *)(a3 + 24) = v47;
        ++v58;
      }
      while ((_DWORD)v58 != 4);
    }
    v63 = v46 + 21;
    v62 = v46 == -21;
    *(_DWORD *)(a3 + 28) = v46 + 21;
    *(_QWORD *)a3 = ++v4;
    v54 |= v47 >> (v46 + 21);
    if (v46 == -21)
      v56 = 0;
    else
      v56 = v47 << (11 - v46);
    if (v62)
      v55 = 0;
    else
      v55 = v63;
  }
  else
  {
    v56 = v47 << 11;
  }
  *(_DWORD *)(a3 + 24) = v56;
  *(_WORD *)(a2 + 10) = v54;
  if (v55 + 8 * ((int)v3 - (int)v4) <= 16)
  {
    exception = __cxa_allocate_exception(8uLL);
    v74 = "Cannot read cfg.mDataByteSize";
    goto LABEL_118;
  }
  v64 = v56 >> 15;
  *(_DWORD *)(a3 + 28) = v55 - 17;
  if (v55 - 17 < 0)
  {
    v66 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v66 <= (unint64_t)v4)
    {
      v56 = bswap32(*v4);
    }
    else
    {
      v67 = 0;
      do
      {
        v68 = (unsigned __int8 *)v4 + v67;
        v69 = v56 << 8;
        *(_DWORD *)(a3 + 24) = v69;
        v70 = 255;
        if ((unint64_t)v4 + v67 < v3 && (unint64_t)v68 >= v66)
          v70 = *v68;
        v56 = v70 | v69;
        *(_DWORD *)(a3 + 24) = v56;
        ++v67;
      }
      while ((_DWORD)v67 != 4);
    }
    v71 = v56 << (17 - v55);
    v72 = v55 + 15;
    *(_DWORD *)(a3 + 28) = v72;
    *(_QWORD *)a3 = v4 + 1;
    v64 |= v56 >> v72;
    if (v72)
      v65 = v71;
    else
      v65 = 0;
  }
  else
  {
    v65 = v56 << 17;
  }
  *(_DWORD *)(a3 + 24) = v65;
  *(_DWORD *)(a2 + 12) = v64;
}

void APAC::MetadataBitStreamParser::parseChannelBedHeadphoneMetadata(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  unsigned int *v18;
  unsigned __int8 v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  unint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  char *v54;
  char *v55;
  _BYTE *v56;
  _BYTE *v57;
  char v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int v70;
  int v71;
  int v72;
  int v73;

  v6 = *(_DWORD *)(a3 + 24);
  v5 = *(_DWORD *)(a3 + 28);
  v7 = v6 >> 28;
  v8 = v5 - 4;
  *(_DWORD *)(a3 + 28) = v5 - 4;
  if (v5 - 4 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v10 = *(_QWORD *)(a3 + 16);
    v12 = *(unsigned int **)a3;
    if ((((_DWORD)v10 - *(_DWORD *)a3) & ~((uint64_t)(v10 - *(_QWORD *)a3) >> 63) & 0xFFFFFFFC) == 0
      || v11 > (unint64_t)v12)
    {
      v14 = 0;
      do
      {
        v15 = (unsigned __int8 *)v12 + v14;
        v16 = v6 << 8;
        *(_DWORD *)(a3 + 24) = v16;
        v17 = 255;
        if ((unint64_t)v12 + v14 < v10 && (unint64_t)v15 >= v11)
          v17 = *v15;
        v6 = v17 | v16;
        *(_DWORD *)(a3 + 24) = v6;
        ++v14;
      }
      while ((_DWORD)v14 != 4);
    }
    else
    {
      v6 = bswap32(*v12);
    }
    v18 = v12 + 1;
    *(_QWORD *)a3 = v12 + 1;
    v8 = v5 + 28;
    v7 |= v6 >> (v5 + 28);
    if (v5 == -28)
    {
      v20 = 0;
      v9 = 0;
      v19 = v7 + 1;
      *a2 = v19;
      *(_QWORD *)(a3 + 24) = 0xFFFFFFF800000000;
      goto LABEL_19;
    }
    v9 = v6 << (4 - v5);
  }
  else
  {
    v9 = 16 * v6;
  }
  v19 = v7 + 1;
  *a2 = v19;
  v20 = HIBYTE(v9);
  v21 = v8 - 8;
  *(_DWORD *)(a3 + 24) = v9;
  *(_DWORD *)(a3 + 28) = v8 - 8;
  if (v8 - 8 >= 0)
  {
    v22 = v9 << 8;
    goto LABEL_35;
  }
  v11 = *(_QWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a3 + 16);
  v18 = *(unsigned int **)a3;
LABEL_19:
  if ((((_DWORD)v10 - (_DWORD)v18) & ~((uint64_t)(v10 - (_QWORD)v18) >> 63) & 0xFFFFFFFC) == 0
    || v11 > (unint64_t)v18)
  {
    v24 = 0;
    do
    {
      v25 = (unsigned __int8 *)v18 + v24;
      v26 = v9 << 8;
      *(_DWORD *)(a3 + 24) = v26;
      v27 = 255;
      if ((unint64_t)v18 + v24 < v10 && (unint64_t)v25 >= v11)
        v27 = *v25;
      v9 = v27 | v26;
      *(_DWORD *)(a3 + 24) = v9;
      ++v24;
    }
    while ((_DWORD)v24 != 4);
  }
  else
  {
    v9 = bswap32(*v18);
  }
  v28 = v9 << (8 - v8);
  v29 = v8 + 24;
  *(_DWORD *)(a3 + 28) = v29;
  *(_QWORD *)a3 = v18 + 1;
  v20 |= v9 >> v29;
  if (v29)
    v22 = v28;
  else
    v22 = 0;
  if (v29)
    v21 = v29;
  else
    v21 = 0;
LABEL_35:
  *(_DWORD *)(a3 + 24) = v22;
  a2[1] = v20 + 1;
  if (((v20 + 1) & 0x100) != 0)
  {
    v30 = -8;
  }
  else
  {
    v31 = 0;
    do
    {
      v33 = *(_DWORD *)(a3 + 24);
      v32 = *(_DWORD *)(a3 + 28);
      v34 = v33 >> 29;
      *(_DWORD *)(a3 + 28) = v32 - 3;
      if (v32 - 3 < 0)
      {
        v37 = *(_QWORD *)(a3 + 8);
        v36 = *(_QWORD *)(a3 + 16);
        v38 = *(unsigned int **)a3;
        if ((((_DWORD)v36 - *(_DWORD *)a3) & ~((uint64_t)(v36 - *(_QWORD *)a3) >> 63) & 0xFFFFFFFC) == 0
          || v37 > (unint64_t)v38)
        {
          v40 = 0;
          do
          {
            v41 = (unsigned __int8 *)v38 + v40;
            v42 = v33 << 8;
            *(_DWORD *)(a3 + 24) = v42;
            v43 = 255;
            if ((unint64_t)v38 + v40 < v36 && (unint64_t)v41 >= v37)
              v43 = *v41;
            v33 = v43 | v42;
            *(_DWORD *)(a3 + 24) = v33;
            ++v40;
          }
          while ((_DWORD)v40 != 4);
        }
        else
        {
          v33 = bswap32(*v38);
        }
        v44 = v33 << (3 - v32);
        v45 = v32 + 29;
        *(_DWORD *)(a3 + 28) = v45;
        *(_QWORD *)a3 = v38 + 1;
        v34 |= v33 >> v45;
        if (v45)
          v35 = v44;
        else
          v35 = 0;
      }
      else
      {
        v35 = 8 * v33;
      }
      *(_DWORD *)(a3 + 24) = v35;
      v47 = (_BYTE *)*((_QWORD *)a2 + 2);
      v46 = *((_QWORD *)a2 + 3);
      if ((unint64_t)v47 >= v46)
      {
        v49 = *((_QWORD *)a2 + 1);
        v50 = &v47[-v49];
        v51 = (uint64_t)&v47[-v49 + 1];
        if (v51 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v52 = v46 - v49;
        if (2 * v52 > v51)
          v51 = 2 * v52;
        if (v52 >= 0x3FFFFFFFFFFFFFFFLL)
          v53 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v53 = v51;
        if (v53)
          v54 = (char *)operator new(v53);
        else
          v54 = 0;
        v55 = &v50[(_QWORD)v54];
        v56 = &v50[(_QWORD)v54];
        *v56 = v34;
        v48 = v56 + 1;
        if (v47 != (_BYTE *)v49)
        {
          v57 = &v47[~v49];
          do
          {
            v58 = *--v47;
            (v57--)[(_QWORD)v54] = v58;
          }
          while (v47 != (_BYTE *)v49);
          v55 = v54;
        }
        *((_QWORD *)a2 + 1) = v55;
        *((_QWORD *)a2 + 2) = v48;
        *((_QWORD *)a2 + 3) = &v54[v53];
        if (v49)
          operator delete((void *)v49);
      }
      else
      {
        *v47 = v34;
        v48 = v47 + 1;
      }
      *((_QWORD *)a2 + 2) = v48;
      ++v31;
      v59 = a2[1];
    }
    while (v31 < v59);
    v19 = *a2;
    v21 = *(_DWORD *)(a3 + 28);
    v30 = -3 * v59 - 8;
  }
  v60 = v30 + 8 * v19;
  v61 = v60 - v21;
  if (v60 > v21)
  {
    *(_QWORD *)(a3 + 24) = 0;
    v21 = 0;
    if (v61 >= 0x20)
    {
      *(_QWORD *)a3 += (v61 >> 3) & 0x1FFFFFFC;
      v60 = v61 & 0x1F;
    }
    else
    {
      v60 = v61;
    }
  }
  if ((v60 - 33) >= 0xFFFFFFE0)
  {
    v62 = *(_DWORD *)(a3 + 24);
    v63 = v21 - v60;
    *(_DWORD *)(a3 + 28) = v63;
    if (v63 < 0)
    {
      v66 = *(_QWORD *)(a3 + 8);
      v65 = *(_QWORD *)(a3 + 16);
      v67 = *(unsigned int **)a3;
      if ((((_DWORD)v65 - *(_DWORD *)a3) & ~((uint64_t)(v65 - *(_QWORD *)a3) >> 63) & 0xFFFFFFFC) != 0
        && v66 <= (unint64_t)v67)
      {
        v62 = bswap32(*v67);
      }
      else
      {
        v68 = 0;
        do
        {
          v69 = (unsigned __int8 *)v67 + v68;
          v70 = v62 << 8;
          *(_DWORD *)(a3 + 24) = v70;
          v71 = 255;
          if ((unint64_t)v67 + v68 < v65 && (unint64_t)v69 >= v66)
            v71 = *v69;
          v62 = v71 | v70;
          *(_DWORD *)(a3 + 24) = v62;
          ++v68;
        }
        while ((_DWORD)v68 != 4);
      }
      v72 = v62 << -(char)v63;
      v73 = v63 + 32;
      *(_DWORD *)(a3 + 28) = v73;
      *(_QWORD *)a3 = v67 + 1;
      if (v73)
        v64 = v72;
      else
        v64 = 0;
    }
    else
    {
      v64 = v62 << v60;
    }
    *(_DWORD *)(a3 + 24) = v64;
  }
}

void APAC::MetadataBitStreamParser::parseFallbackSPAD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned __int8 *v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  _QWORD *exception;
  const char *v105;

  v6 = 0;
  v8 = *(_QWORD *)(a4 + 8);
  v7 = *(_QWORD *)(a4 + 16);
  v9 = *(unsigned int **)a4;
  v10 = a2 + 2;
  v12 = *(_DWORD *)(a4 + 24);
  v11 = *(_DWORD *)(a4 + 28);
  do
  {
    if (v11 + 8 * ((int)v7 - (int)v9) <= 7)
    {
      exception = __cxa_allocate_exception(8uLL);
      v105 = "Cannot read fallback.mDeviceID[n]";
      goto LABEL_172;
    }
    v13 = HIBYTE(v12);
    *(_DWORD *)(a4 + 28) = v11 - 8;
    if (v11 - 8 < 0)
    {
      if ((((_DWORD)v7 - (_DWORD)v9) & ~((uint64_t)(v7 - (_QWORD)v9) >> 63) & 0xFFFFFFFC) != 0
        && v8 <= (unint64_t)v9)
      {
        v12 = bswap32(*v9);
      }
      else
      {
        v14 = 0;
        do
        {
          v15 = (unsigned __int8 *)v9 + v14;
          v16 = v12 << 8;
          *(_DWORD *)(a4 + 24) = v16;
          v17 = 255;
          if ((unint64_t)v9 + v14 < v7 && (unint64_t)v15 >= v8)
            v17 = *v15;
          v12 = v17 | v16;
          *(_DWORD *)(a4 + 24) = v12;
          ++v14;
        }
        while ((_DWORD)v14 != 4);
      }
      v18 = v12 << (8 - v11);
      v11 += 24;
      *(_DWORD *)(a4 + 28) = v11;
      *(_QWORD *)a4 = ++v9;
      v13 |= v12 >> v11;
      if (v11)
        v12 = v18;
      else
        v12 = 0;
      if (!v11)
        v11 = 0;
    }
    else
    {
      v12 <<= 8;
      v11 -= 8;
    }
    *(_DWORD *)(a4 + 24) = v12;
    *(_BYTE *)(v10 + v6) = v13;
    if (!(_BYTE)v13)
      break;
    ++v6;
  }
  while (v6 != 8);
  if (v11 + 8 * ((int)v7 - (int)v9) <= 3)
  {
    exception = __cxa_allocate_exception(8uLL);
    v105 = "Cannot read fallback.mOrientation";
    goto LABEL_172;
  }
  v19 = v12 >> 28;
  v20 = v11 - 4;
  *(_DWORD *)(a4 + 28) = v11 - 4;
  if (v11 - 4 < 0)
  {
    if ((((_DWORD)v7 - (_DWORD)v9) & ~((uint64_t)(v7 - (_QWORD)v9) >> 63) & 0xFFFFFFFC) != 0
      && v8 <= (unint64_t)v9)
    {
      v12 = bswap32(*v9);
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = (unsigned __int8 *)v9 + v22;
        v24 = v12 << 8;
        *(_DWORD *)(a4 + 24) = v24;
        v25 = 255;
        if ((unint64_t)v9 + v22 < v7 && (unint64_t)v23 >= v8)
          v25 = *v23;
        v12 = v25 | v24;
        *(_DWORD *)(a4 + 24) = v12;
        ++v22;
      }
      while ((_DWORD)v22 != 4);
    }
    v26 = v12 << (4 - v11);
    v27 = v11 + 28;
    *(_DWORD *)(a4 + 28) = v27;
    *(_QWORD *)a4 = ++v9;
    v19 |= v12 >> v27;
    if (v27)
      v21 = v26;
    else
      v21 = 0;
    if (v27)
      v20 = v27;
    else
      v20 = 0;
  }
  else
  {
    v21 = 16 * v12;
  }
  *(_DWORD *)(a4 + 24) = v21;
  *(_BYTE *)a2 = v19;
  if (v20 + 8 * ((int)v7 - (int)v9) <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v105 = "Cannot read fallback.mNumMicrophones";
    goto LABEL_172;
  }
  v28 = HIBYTE(v21);
  *(_DWORD *)(a4 + 28) = v20 - 8;
  if (v20 - 8 < 0)
  {
    if ((((_DWORD)v7 - (_DWORD)v9) & ~((uint64_t)(v7 - (_QWORD)v9) >> 63) & 0xFFFFFFFC) != 0
      && v8 <= (unint64_t)v9)
    {
      v21 = bswap32(*v9);
    }
    else
    {
      v30 = 0;
      do
      {
        v31 = (unsigned __int8 *)v9 + v30;
        v32 = v21 << 8;
        *(_DWORD *)(a4 + 24) = v32;
        v33 = 255;
        if ((unint64_t)v9 + v30 < v7 && (unint64_t)v31 >= v8)
          v33 = *v31;
        v21 = v33 | v32;
        *(_DWORD *)(a4 + 24) = v21;
        ++v30;
      }
      while ((_DWORD)v30 != 4);
    }
    *(_DWORD *)(a4 + 28) = v20 + 24;
    *(_QWORD *)a4 = v9 + 1;
    v28 |= v21 >> (v20 + 24);
    if (v20 == -24)
      v29 = 0;
    else
      v29 = v21 << (8 - v20);
  }
  else
  {
    v29 = v21 << 8;
  }
  *(_DWORD *)(a4 + 24) = v29;
  *(_BYTE *)(a2 + 1) = v28;
  v34 = v28;
  if (a3)
  {
    v35 = *(_QWORD *)(a2 + 16);
    v36 = *(char **)(a2 + 24);
    if (v28 <= (unint64_t)&v36[-v35])
    {
      if (v28 < (unint64_t)&v36[-v35])
        *(_QWORD *)(a2 + 24) = v35 + v28;
    }
    else
    {
      v37 = *(_QWORD *)(a2 + 32);
      if (v37 - (uint64_t)v36 >= v28 - (unint64_t)&v36[-v35])
      {
        bzero(*(void **)(a2 + 24), v28 - (_QWORD)&v36[-v35]);
        *(_QWORD *)(a2 + 24) = v34 + v35;
      }
      else
      {
        v38 = v37 - v35;
        v39 = 2 * v38;
        if (2 * v38 <= v28)
          v39 = v28;
        if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
          v40 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        v41 = (char *)operator new(v40);
        v42 = &v41[v40];
        v43 = &v41[v34];
        bzero(&v36[(_QWORD)v41 - v35], v34 - (_QWORD)&v36[-v35]);
        if (v36 == (char *)v35)
        {
          v41 = &v36[(_QWORD)v41 - v35];
        }
        else
        {
          v44 = &v36[~v35];
          do
          {
            v45 = *--v36;
            (v44--)[(_QWORD)v41] = v45;
          }
          while (v36 != (char *)v35);
        }
        *(_QWORD *)(a2 + 16) = v41;
        *(_QWORD *)(a2 + 24) = v43;
        *(_QWORD *)(a2 + 32) = v42;
        if (v35)
          operator delete((void *)v35);
      }
    }
    std::vector<float>::resize((char **)(a2 + 40), v34);
    std::vector<float>::resize((char **)(a2 + 64), v34);
    std::vector<float>::resize((char **)(a2 + 88), v34);
    v46 = *(_QWORD *)(a2 + 112);
    v47 = *(char **)(a2 + 120);
    if (v34 <= (unint64_t)&v47[-v46])
    {
      if (v34 < (unint64_t)&v47[-v46])
        *(_QWORD *)(a2 + 120) = v46 + v34;
    }
    else
    {
      v48 = *(_QWORD *)(a2 + 128);
      if (v48 - (uint64_t)v47 >= v34 - (unint64_t)&v47[-v46])
      {
        bzero(*(void **)(a2 + 120), v34 - (_QWORD)&v47[-v46]);
        *(_QWORD *)(a2 + 120) = v34 + v46;
      }
      else
      {
        v49 = v48 - v46;
        v50 = 2 * v49;
        if (2 * v49 <= v34)
          v50 = v34;
        if (v49 >= 0x3FFFFFFFFFFFFFFFLL)
          v51 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        v52 = (char *)operator new(v51);
        v53 = &v52[v51];
        v54 = &v52[v34];
        bzero(&v47[(_QWORD)v52 - v46], v34 - (_QWORD)&v47[-v46]);
        if (v47 == (char *)v46)
        {
          v52 = &v47[(_QWORD)v52 - v46];
        }
        else
        {
          v55 = &v47[~v46];
          do
          {
            v56 = *--v47;
            (v55--)[(_QWORD)v52] = v56;
          }
          while (v47 != (char *)v46);
        }
        *(_QWORD *)(a2 + 112) = v52;
        *(_QWORD *)(a2 + 120) = v54;
        *(_QWORD *)(a2 + 128) = v53;
        if (v46)
          operator delete((void *)v46);
      }
    }
  }
  if ((_DWORD)v34)
  {
    v57 = 0;
    v58 = *(_DWORD *)(a4 + 24);
    v59 = *(_DWORD *)(a4 + 28);
    v61 = *(_QWORD *)(a4 + 8);
    v60 = *(_QWORD *)(a4 + 16);
    v62 = *(unsigned int **)a4;
    v63 = *(_QWORD *)(a2 + 16);
    v64 = *(_QWORD *)(a2 + 40);
    v65 = *(_QWORD *)(a2 + 64);
    v66 = *(_QWORD *)(a2 + 88);
    v67 = *(_QWORD *)(a2 + 112);
    while (1)
    {
      if (v59 + 8 * ((int)v60 - (int)v62) <= 3)
      {
        exception = __cxa_allocate_exception(8uLL);
        v105 = "Cannot read fallback.mMicType[n]";
        goto LABEL_172;
      }
      v68 = v58 >> 28;
      v69 = v59 - 4;
      *(_DWORD *)(a4 + 28) = v59 - 4;
      if (v59 - 4 < 0)
      {
        if ((((_DWORD)v60 - (_DWORD)v62) & ~((uint64_t)(v60 - (_QWORD)v62) >> 63) & 0xFFFFFFFC) != 0
          && v61 <= (unint64_t)v62)
        {
          v58 = bswap32(*v62);
        }
        else
        {
          v71 = 0;
          do
          {
            v72 = (unsigned __int8 *)v62 + v71;
            v73 = v58 << 8;
            *(_DWORD *)(a4 + 24) = v73;
            v74 = 255;
            if ((unint64_t)v62 + v71 < v60 && (unint64_t)v72 >= v61)
              v74 = *v72;
            v58 = v74 | v73;
            *(_DWORD *)(a4 + 24) = v58;
            ++v71;
          }
          while ((_DWORD)v71 != 4);
        }
        v75 = v58 << (4 - v59);
        v76 = v59 + 28;
        *(_DWORD *)(a4 + 28) = v76;
        *(_QWORD *)a4 = ++v62;
        v68 |= v58 >> v76;
        if (v76)
          v70 = v75;
        else
          v70 = 0;
        if (v76)
          v69 = v76;
        else
          v69 = 0;
      }
      else
      {
        v70 = 16 * v58;
      }
      *(_DWORD *)(a4 + 24) = v70;
      *(_BYTE *)(v63 + v57) = v68;
      v77 = v60 - (_QWORD)v62;
      if (v69 + 8 * ((int)v60 - (int)v62) <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v105 = "Cannot read fallback.mMicPosAzimuth[n]";
        goto LABEL_172;
      }
      *(_DWORD *)(a4 + 28) = v69 - 32;
      if (v69 - 32 < 0)
      {
        if ((v77 & ~(v77 >> 63) & 0xFFFFFFFC) != 0 && v61 <= (unint64_t)v62)
        {
          v80 = bswap32(*v62);
        }
        else
        {
          v81 = 0;
          v80 = v70;
          do
          {
            v82 = (unsigned __int8 *)v62 + v81;
            v83 = v80 << 8;
            *(_DWORD *)(a4 + 24) = v83;
            v84 = 255;
            if ((unint64_t)v62 + v81 < v60 && (unint64_t)v82 >= v61)
              v84 = *v82;
            v80 = v84 | v83;
            *(_DWORD *)(a4 + 24) = v80;
            ++v81;
          }
          while ((_DWORD)v81 != 4);
        }
        *(_QWORD *)a4 = ++v62;
        v79 = (v80 >> v69) | v70;
        v70 = v80 << -(char)v69;
        if (!v69)
          v70 = 0;
        *(_DWORD *)(a4 + 24) = v70;
        *(_DWORD *)(a4 + 28) = v69;
        v77 = v60 - (_QWORD)v62;
        v78 = 8 * (v60 - (_DWORD)v62);
      }
      else
      {
        v78 = 8 * v77;
        v69 -= 32;
        v79 = v70;
      }
      *(_DWORD *)(v64 + 4 * v57) = v79;
      if (v78 + v69 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v105 = "Cannot read fallback.mMicPosElevation[n]";
        goto LABEL_172;
      }
      *(_DWORD *)(a4 + 28) = v69 - 32;
      if (v69 - 32 < 0)
      {
        if ((v77 & ~(v77 >> 63) & 0xFFFFFFFC) != 0 && v61 <= (unint64_t)v62)
        {
          v86 = bswap32(*v62);
        }
        else
        {
          v87 = 0;
          v86 = v70;
          do
          {
            v88 = (unsigned __int8 *)v62 + v87;
            v89 = v86 << 8;
            *(_DWORD *)(a4 + 24) = v89;
            v90 = 255;
            if ((unint64_t)v62 + v87 < v60 && (unint64_t)v88 >= v61)
              v90 = *v88;
            v86 = v90 | v89;
            *(_DWORD *)(a4 + 24) = v86;
            ++v87;
          }
          while ((_DWORD)v87 != 4);
        }
        *(_QWORD *)a4 = ++v62;
        v85 = (v86 >> v69) | v70;
        v70 = v86 << -(char)v69;
        if (!v69)
          v70 = 0;
        *(_DWORD *)(a4 + 24) = v70;
        *(_DWORD *)(a4 + 28) = v69;
        v77 = v60 - (_QWORD)v62;
        v78 = 8 * (v60 - (_DWORD)v62);
      }
      else
      {
        v69 -= 32;
        v85 = v70;
      }
      *(_DWORD *)(v65 + 4 * v57) = v85;
      if (v78 + v69 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v105 = "Cannot read fallback.mMicPosRadius[n]";
        goto LABEL_172;
      }
      *(_DWORD *)(a4 + 28) = v69 - 32;
      if (v69 - 32 < 0)
      {
        if ((v77 & ~(v77 >> 63) & 0xFFFFFFFC) != 0 && v61 <= (unint64_t)v62)
        {
          v92 = bswap32(*v62);
        }
        else
        {
          v93 = 0;
          v92 = v70;
          do
          {
            v94 = (unsigned __int8 *)v62 + v93;
            v95 = v92 << 8;
            *(_DWORD *)(a4 + 24) = v95;
            v96 = 255;
            if ((unint64_t)v62 + v93 < v60 && (unint64_t)v94 >= v61)
              v96 = *v94;
            v92 = v96 | v95;
            *(_DWORD *)(a4 + 24) = v92;
            ++v93;
          }
          while ((_DWORD)v93 != 4);
        }
        *(_QWORD *)a4 = ++v62;
        v91 = (v92 >> v69) | v70;
        v70 = v92 << -(char)v69;
        if (!v69)
          v70 = 0;
        *(_DWORD *)(a4 + 24) = v70;
        *(_DWORD *)(a4 + 28) = v69;
        v77 = v60 - (_QWORD)v62;
        v78 = 8 * (v60 - (_DWORD)v62);
      }
      else
      {
        v69 -= 32;
        v91 = v70;
      }
      *(_DWORD *)(v66 + 4 * v57) = v91;
      if (v78 + v69 <= 2)
        break;
      v97 = v70 >> 29;
      v59 = v69 - 3;
      *(_DWORD *)(a4 + 28) = v69 - 3;
      if (v69 - 3 < 0)
      {
        if ((v77 & ~(v77 >> 63) & 0xFFFFFFFC) != 0 && v61 <= (unint64_t)v62)
        {
          v70 = bswap32(*v62);
        }
        else
        {
          v98 = 0;
          do
          {
            v99 = (unsigned __int8 *)v62 + v98;
            v100 = v70 << 8;
            *(_DWORD *)(a4 + 24) = v100;
            v101 = 255;
            if ((unint64_t)v62 + v98 < v60 && (unint64_t)v99 >= v61)
              v101 = *v99;
            v70 = v101 | v100;
            *(_DWORD *)(a4 + 24) = v70;
            ++v98;
          }
          while ((_DWORD)v98 != 4);
        }
        v102 = v70 << (3 - v69);
        v103 = v69 + 29;
        *(_DWORD *)(a4 + 28) = v103;
        *(_QWORD *)a4 = ++v62;
        v97 |= v70 >> v103;
        if (v103)
          v58 = v102;
        else
          v58 = 0;
        if (v103)
          v59 = v103;
        else
          v59 = 0;
      }
      else
      {
        v58 = 8 * v70;
      }
      *(_DWORD *)(a4 + 24) = v58;
      *(_BYTE *)(v67 + v57++) = v97;
      if (v57 == v34)
        return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v105 = "Cannot read fallback.mMicDirection[n]";
LABEL_172:
    *exception = v105;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

void APAC::MetadataBitStreamParser::parseGroupDynamicData(uint64_t a1, BOOL *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  _BYTE *v31;
  _QWORD *exception;
  const char *v33;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v33 = "Cannot read grpDD.hasData";
    goto LABEL_41;
  }
  v9 = *(_DWORD *)(a3 + 24);
  v10 = v9 >> 31;
  v11 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v13 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v13 > (unint64_t)v4)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v4 + v15;
        v17 = v9 << 8;
        *(_DWORD *)(a3 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v4 + v15 < v3 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v9 = v18 | v17;
        *(_DWORD *)(a3 + 24) = v9;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v9 = bswap32(*v4);
    }
    v20 = v6 + 31;
    v19 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v10 |= v9 >> (v6 + 31);
    if (v6 == -31)
      v12 = 0;
    else
      v12 = v9 << (1 - v6);
    if (v19)
      v11 = 0;
    else
      v11 = v20;
  }
  else
  {
    v12 = 2 * v9;
  }
  *(_DWORD *)(a3 + 24) = v12;
  *a2 = v10 != 0;
  if (v10)
  {
    if (v11 + 8 * ((int)v3 - (int)v4) > 6)
    {
      v21 = v12 >> 25;
      *(_DWORD *)(a3 + 28) = v11 - 7;
      if (v11 - 7 < 0)
      {
        v23 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v23 <= (unint64_t)v4)
        {
          v12 = bswap32(*v4);
        }
        else
        {
          v24 = 0;
          do
          {
            v25 = (unsigned __int8 *)v4 + v24;
            v26 = v12 << 8;
            *(_DWORD *)(a3 + 24) = v26;
            v27 = 255;
            if ((unint64_t)v4 + v24 < v3 && (unint64_t)v25 >= v23)
              v27 = *v25;
            v12 = v27 | v26;
            *(_DWORD *)(a3 + 24) = v12;
            ++v24;
          }
          while ((_DWORD)v24 != 4);
        }
        v28 = v12 << (7 - v11);
        v29 = v11 + 25;
        *(_DWORD *)(a3 + 28) = v29;
        *(_QWORD *)a3 = v4 + 1;
        v21 |= v12 >> v29;
        if (v29)
          v22 = v28;
        else
          v22 = 0;
      }
      else
      {
        v22 = v12 << 7;
      }
      *(_DWORD *)(a3 + 24) = v22;
      a2[1] = v21;
      if ((_BYTE)v21)
      {
        v30 = 0;
        v31 = a2 + 4;
        do
        {
          APAC::MetadataBitStreamParser::parseDynamicGroup(a1, v31, a3);
          ++v30;
          v31 += 256;
        }
        while (v30 < a2[1]);
      }
      return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v33 = "Cannot read grpDD.groupCount";
LABEL_41:
    *exception = v33;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

void APAC::MetadataBitStreamParser::parseSceneComponenentDynamicData(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *exception;
  const char *v43;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v43 = "Cannot read scDD.ASCCount";
LABEL_45:
    *exception = v43;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v9 = *(_DWORD *)(a3 + 24);
  v10 = v9 >> 25;
  *(_DWORD *)(a3 + 28) = v6 - 7;
  if (v6 - 7 < 0)
  {
    v12 = v5 & ~(v5 >> 63) & 0xFFFFFFFC;
    v13 = *(_QWORD *)(a3 + 8);
    if (v12)
      v14 = v13 > (unint64_t)v4;
    else
      v14 = 1;
    if (v14)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v4 + v15;
        v17 = v9 << 8;
        *(_DWORD *)(a3 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v4 + v15 < v3 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v9 = v18 | v17;
        *(_DWORD *)(a3 + 24) = v9;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v9 = bswap32(*v4);
    }
    v19 = v9 << (7 - v6);
    v20 = v6 + 25;
    *(_DWORD *)(a3 + 28) = v20;
    *(_QWORD *)a3 = v4 + 1;
    v10 |= v9 >> v20;
    if (v20)
      v11 = v19;
    else
      v11 = 0;
  }
  else
  {
    v11 = v9 << 7;
  }
  *(_DWORD *)(a3 + 24) = v11;
  *a2 = v10;
  if ((_BYTE)v10)
  {
    v21 = 0;
    while (1)
    {
      v22 = *(_QWORD *)(a3 + 16);
      v23 = *(unsigned int **)a3;
      v24 = v22 - *(_QWORD *)a3;
      v25 = *(_DWORD *)(a3 + 28);
      if (v25 + 8 * (int)v24 <= 1)
      {
        exception = __cxa_allocate_exception(8uLL);
        v43 = "Cannot read scDD.ASCData[n].ASCType";
        goto LABEL_45;
      }
      v26 = *(_DWORD *)(a3 + 24);
      v27 = v26 >> 30;
      *(_DWORD *)(a3 + 28) = v25 - 2;
      if (v25 - 2 < 0)
      {
        v29 = v24 & ~(v24 >> 63) & 0xFFFFFFFC;
        v30 = *(_QWORD *)(a3 + 8);
        if (!v29 || v30 > (unint64_t)v23)
        {
          v32 = 0;
          do
          {
            v33 = (unsigned __int8 *)v23 + v32;
            v34 = v26 << 8;
            *(_DWORD *)(a3 + 24) = v34;
            v35 = 255;
            if ((unint64_t)v23 + v32 < v22 && (unint64_t)v33 >= v30)
              v35 = *v33;
            v26 = v35 | v34;
            *(_DWORD *)(a3 + 24) = v26;
            ++v32;
          }
          while ((_DWORD)v32 != 4);
        }
        else
        {
          v26 = bswap32(*v23);
        }
        v36 = v26 << (2 - v25);
        v37 = v25 + 30;
        *(_DWORD *)(a3 + 28) = v37;
        *(_QWORD *)a3 = v23 + 1;
        v27 |= v26 >> v37;
        v28 = v37 ? v36 : 0;
      }
      else
      {
        v28 = 4 * v26;
      }
      *(_DWORD *)(a3 + 24) = v28;
      a2[9752 * v21 + 4] = v27;
      if (v27 == 2)
        break;
      if (v27 == 1)
      {
        APAC::MetadataBitStreamParser::parseObjectMetadata(a1, (uint64_t)&a2[9752 * v21 + 72], a3);
        goto LABEL_42;
      }
      if (!(_BYTE)v27)
      {
        v38 = (uint64_t)&a2[9752 * v21 + 8];
LABEL_40:
        APAC::MetadataBitStreamParser::parseCommonDynamicMetadata(a1, v38, a3);
      }
LABEL_42:
      v39 = &a2[9752 * v21];
      APAC::MetadataBitStreamParser::parseProprietaryDynamicData(a1, (uint64_t)(v39 + 7576), a3);
      APAC::MetadataBitStreamParser::parseExtendedData(v40, (uint64_t)(v39 + 7700), a3);
      APAC::MetadataBitStreamParser::parseExtendedData(v41, (uint64_t)(v39 + 8728), a3);
      if (++v21 >= (unint64_t)*a2)
        return;
    }
    v38 = (uint64_t)&a2[9752 * v21 + 40];
    goto LABEL_40;
  }
}

void APAC::MetadataBitStreamParser::parseExtendedData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  _QWORD *exception;
  const char *v40;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v40 = "Cannot read extData.hasData";
    goto LABEL_58;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v17 = v7 << (1 - v6);
    v18 = v6 + 31;
    *(_DWORD *)(a3 + 28) = v18;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> v18;
    if (v18)
      v10 = v17;
    else
      v10 = 0;
    if (v18)
      v9 = v18;
    else
      v9 = 0;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8 != 0;
  if (v8)
  {
    if (v9 + 8 * ((int)v3 - (int)v4) <= 9)
    {
      exception = __cxa_allocate_exception(8uLL);
      v40 = "Cannot read extData.chunkSize";
    }
    else
    {
      v19 = v10 >> 22;
      v20 = v9 - 10;
      *(_DWORD *)(a3 + 28) = v9 - 10;
      if (v9 - 10 < 0)
      {
        v22 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v22 <= (unint64_t)v4)
        {
          v10 = bswap32(*v4);
        }
        else
        {
          v23 = 0;
          do
          {
            v24 = (unsigned __int8 *)v4 + v23;
            v25 = v10 << 8;
            *(_DWORD *)(a3 + 24) = v25;
            v26 = 255;
            if ((unint64_t)v4 + v23 < v3 && (unint64_t)v24 >= v22)
              v26 = *v24;
            v10 = v26 | v25;
            *(_DWORD *)(a3 + 24) = v10;
            ++v23;
          }
          while ((_DWORD)v23 != 4);
        }
        v27 = v10 << (10 - v9);
        v28 = v9 + 22;
        *(_DWORD *)(a3 + 28) = v28;
        *(_QWORD *)a3 = ++v4;
        v19 |= v10 >> v28;
        if (v28)
          v21 = v27;
        else
          v21 = 0;
        if (v28)
          v20 = v28;
        else
          v20 = 0;
      }
      else
      {
        v21 = v10 << 10;
      }
      v29 = 0;
      *(_DWORD *)(a3 + 24) = v21;
      *(_WORD *)(a2 + 2) = v19;
      v30 = (unsigned __int16)v19;
      v31 = *(_QWORD *)(a3 + 8);
      v32 = (v30 + 1);
      while (v20 + 8 * ((int)v3 - (int)v4) > 7)
      {
        v33 = HIBYTE(v21);
        *(_DWORD *)(a3 + 28) = v20 - 8;
        if (v20 - 8 < 0)
        {
          if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
            && v31 <= (unint64_t)v4)
          {
            v21 = bswap32(*v4);
          }
          else
          {
            v34 = 0;
            do
            {
              v35 = (unsigned __int8 *)v4 + v34;
              v36 = v21 << 8;
              *(_DWORD *)(a3 + 24) = v36;
              v37 = 255;
              if ((unint64_t)v4 + v34 < v3 && (unint64_t)v35 >= v31)
                v37 = *v35;
              v21 = v37 | v36;
              *(_DWORD *)(a3 + 24) = v21;
              ++v34;
            }
            while ((_DWORD)v34 != 4);
          }
          v38 = v21 << (8 - v20);
          v20 += 24;
          *(_DWORD *)(a3 + 28) = v20;
          *(_QWORD *)a3 = ++v4;
          v33 |= v21 >> v20;
          if (v20)
            v21 = v38;
          else
            v21 = 0;
          if (!v20)
            v20 = 0;
        }
        else
        {
          v21 <<= 8;
          v20 -= 8;
        }
        *(_DWORD *)(a3 + 24) = v21;
        *(_BYTE *)(a2 + v29++ + 4) = v33;
        if (v29 == v32)
          return;
      }
      exception = __cxa_allocate_exception(8uLL);
      v40 = "Cannot read extData.dataChunk[n]";
    }
LABEL_58:
    *exception = v40;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

void APAC::MetadataBitStreamParser::parseCommonDynamicMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  int v43;
  BOOL v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned int v86;
  int v87;
  BOOL v88;
  int v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  _QWORD *exception;
  const char *v98;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v98 = "Cannot read cmmMd.hasADMMetadata";
    goto LABEL_180;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v6 + 31;
    v17 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> (v6 + 31);
    if (v6 == -31)
      v10 = 0;
    else
      v10 = v7 << (1 - v6);
    if (v17)
      v9 = 0;
    else
      v9 = v18;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8 != 0;
  if (v8)
  {
    if (v9 + 8 * ((int)v3 - (int)v4) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v98 = "Cannot read cmmMd.absoluteDistance.hasData";
      goto LABEL_180;
    }
    v19 = v10 >> 31;
    v20 = v9 - 1;
    *(_DWORD *)(a3 + 28) = v9 - 1;
    if (v9 - 1 < 0)
    {
      v22 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v22 <= (unint64_t)v4)
      {
        v10 = bswap32(*v4);
      }
      else
      {
        v23 = 0;
        do
        {
          v24 = (unsigned __int8 *)v4 + v23;
          v25 = v10 << 8;
          *(_DWORD *)(a3 + 24) = v25;
          v26 = 255;
          if ((unint64_t)v4 + v23 < v3 && (unint64_t)v24 >= v22)
            v26 = *v24;
          v10 = v26 | v25;
          *(_DWORD *)(a3 + 24) = v10;
          ++v23;
        }
        while ((_DWORD)v23 != 4);
      }
      v27 = v10 << (1 - v9);
      v28 = v9 + 31;
      *(_DWORD *)(a3 + 28) = v28;
      *(_QWORD *)a3 = ++v4;
      v19 |= v10 >> v28;
      if (v28)
        v21 = v27;
      else
        v21 = 0;
      if (v28)
        v20 = v28;
      else
        v20 = 0;
    }
    else
    {
      v21 = 2 * v10;
    }
    *(_DWORD *)(a3 + 24) = v21;
    *(_BYTE *)(a2 + 4) = v19 != 0;
    if (v19)
    {
      if (v20 + 8 * ((int)v3 - (int)v4) <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v98 = "Cannot read cmmMd.absoluteDistance.distance";
        goto LABEL_180;
      }
      *(_DWORD *)(a3 + 28) = v20 - 32;
      if (v20 - 32 < 0)
      {
        v30 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v30 <= (unint64_t)v4)
        {
          v31 = bswap32(*v4);
        }
        else
        {
          v32 = 0;
          v31 = v21;
          do
          {
            v33 = (unsigned __int8 *)v4 + v32;
            v34 = v31 << 8;
            *(_DWORD *)(a3 + 24) = v34;
            v35 = 255;
            if ((unint64_t)v4 + v32 < v3 && (unint64_t)v33 >= v30)
              v35 = *v33;
            v31 = v35 | v34;
            *(_DWORD *)(a3 + 24) = v31;
            ++v32;
          }
          while ((_DWORD)v32 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v29 = (v31 >> v20) | v21;
        v21 = v31 << -(char)v20;
        if (!v20)
          v21 = 0;
        *(_DWORD *)(a3 + 24) = v21;
        *(_DWORD *)(a3 + 28) = v20;
      }
      else
      {
        v20 -= 32;
        v29 = v21;
      }
      *(_DWORD *)(a2 + 8) = v29;
    }
    if (v20 + 8 * ((int)v3 - (int)v4) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v98 = "Cannot read cmmMd.gain.hasData";
      goto LABEL_180;
    }
    v36 = v21 >> 31;
    v37 = v20 - 1;
    *(_DWORD *)(a3 + 28) = v20 - 1;
    if (v20 - 1 < 0)
    {
      v39 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v39 <= (unint64_t)v4)
      {
        v21 = bswap32(*v4);
      }
      else
      {
        v40 = 0;
        do
        {
          v41 = (unsigned __int8 *)v4 + v40;
          v42 = v21 << 8;
          *(_DWORD *)(a3 + 24) = v42;
          v43 = 255;
          if ((unint64_t)v4 + v40 < v3 && (unint64_t)v41 >= v39)
            v43 = *v41;
          v21 = v43 | v42;
          *(_DWORD *)(a3 + 24) = v21;
          ++v40;
        }
        while ((_DWORD)v40 != 4);
      }
      v45 = v20 + 31;
      v44 = v20 == -31;
      *(_DWORD *)(a3 + 28) = v20 + 31;
      *(_QWORD *)a3 = ++v4;
      v36 |= v21 >> (v20 + 31);
      if (v20 == -31)
        v38 = 0;
      else
        v38 = v21 << (1 - v20);
      if (v44)
        v37 = 0;
      else
        v37 = v45;
    }
    else
    {
      v38 = 2 * v21;
    }
    *(_DWORD *)(a3 + 24) = v38;
    *(_BYTE *)(a2 + 12) = v36 != 0;
    if (v36)
    {
      if (v37 + 8 * ((int)v3 - (int)v4) <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v98 = "Cannot read cmmMd.gain.isDB";
        goto LABEL_180;
      }
      v46 = v38 >> 31;
      *(_DWORD *)(a3 + 28) = v37 - 1;
      if (v37 - 1 < 0)
      {
        v47 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v47 <= (unint64_t)v4)
        {
          v38 = bswap32(*v4);
        }
        else
        {
          v48 = 0;
          do
          {
            v49 = (unsigned __int8 *)v4 + v48;
            v50 = v38 << 8;
            *(_DWORD *)(a3 + 24) = v50;
            v51 = 255;
            if ((unint64_t)v4 + v48 < v3 && (unint64_t)v49 >= v47)
              v51 = *v49;
            v38 = v51 | v50;
            *(_DWORD *)(a3 + 24) = v38;
            ++v48;
          }
          while ((_DWORD)v48 != 4);
        }
        v52 = v38 << (1 - v37);
        v37 += 31;
        *(_DWORD *)(a3 + 28) = v37;
        *(_QWORD *)a3 = ++v4;
        v46 |= v38 >> v37;
        if (v37)
          v38 = v52;
        else
          v38 = 0;
        if (!v37)
          v37 = 0;
      }
      else
      {
        v38 *= 2;
        --v37;
      }
      *(_DWORD *)(a3 + 24) = v38;
      *(_BYTE *)(a2 + 13) = v46 != 0;
      if (v37 + 8 * ((int)v3 - (int)v4) <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v98 = "Cannot read cmmMd.gain.gain";
        goto LABEL_180;
      }
      *(_DWORD *)(a3 + 28) = v37 - 32;
      if (v37 - 32 < 0)
      {
        v54 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v54 <= (unint64_t)v4)
        {
          v55 = bswap32(*v4);
        }
        else
        {
          v56 = 0;
          v55 = v38;
          do
          {
            v57 = (unsigned __int8 *)v4 + v56;
            v58 = v55 << 8;
            *(_DWORD *)(a3 + 24) = v58;
            v59 = 255;
            if ((unint64_t)v4 + v56 < v3 && (unint64_t)v57 >= v54)
              v59 = *v57;
            v55 = v59 | v58;
            *(_DWORD *)(a3 + 24) = v55;
            ++v56;
          }
          while ((_DWORD)v56 != 4);
        }
        *(_QWORD *)a3 = ++v4;
        v53 = (v55 >> v37) | v38;
        v38 = v55 << -(char)v37;
        if (!v37)
          v38 = 0;
        *(_DWORD *)(a3 + 24) = v38;
        *(_DWORD *)(a3 + 28) = v37;
      }
      else
      {
        v37 -= 32;
        v53 = v38;
      }
      *(_DWORD *)(a2 + 16) = v53;
    }
    if (v37 + 8 * ((int)v3 - (int)v4) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v98 = "Cannot read cmmMd.headLocked";
      goto LABEL_180;
    }
    v60 = v38 >> 31;
    v61 = v37 - 1;
    *(_DWORD *)(a3 + 28) = v37 - 1;
    if (v37 - 1 < 0)
    {
      v63 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v63 <= (unint64_t)v4)
      {
        v38 = bswap32(*v4);
      }
      else
      {
        v64 = 0;
        do
        {
          v65 = (unsigned __int8 *)v4 + v64;
          v66 = v38 << 8;
          *(_DWORD *)(a3 + 24) = v66;
          v67 = 255;
          if ((unint64_t)v4 + v64 < v3 && (unint64_t)v65 >= v63)
            v67 = *v65;
          v38 = v67 | v66;
          *(_DWORD *)(a3 + 24) = v38;
          ++v64;
        }
        while ((_DWORD)v64 != 4);
      }
      v68 = v38 << (1 - v37);
      v69 = v37 + 31;
      *(_DWORD *)(a3 + 28) = v69;
      *(_QWORD *)a3 = ++v4;
      v60 |= v38 >> v69;
      if (v69)
        v62 = v68;
      else
        v62 = 0;
      if (v69)
        v61 = v69;
      else
        v61 = 0;
    }
    else
    {
      v62 = 2 * v38;
    }
    *(_DWORD *)(a3 + 24) = v62;
    *(_BYTE *)(a2 + 22) = v60 != 0;
    if (v61 + 8 * ((int)v3 - (int)v4) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v98 = "Cannot read cmmMd.headphoneVirtualize.hasData";
      goto LABEL_180;
    }
    v70 = v62 >> 31;
    v71 = v61 - 1;
    *(_DWORD *)(a3 + 28) = v61 - 1;
    if (v61 - 1 < 0)
    {
      v73 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v73 <= (unint64_t)v4)
      {
        v62 = bswap32(*v4);
      }
      else
      {
        v74 = 0;
        do
        {
          v75 = (unsigned __int8 *)v4 + v74;
          v76 = v62 << 8;
          *(_DWORD *)(a3 + 24) = v76;
          v77 = 255;
          if ((unint64_t)v4 + v74 < v3 && (unint64_t)v75 >= v73)
            v77 = *v75;
          v62 = v77 | v76;
          *(_DWORD *)(a3 + 24) = v62;
          ++v74;
        }
        while ((_DWORD)v74 != 4);
      }
      v78 = v62 << (1 - v61);
      v79 = v61 + 31;
      *(_DWORD *)(a3 + 28) = v79;
      *(_QWORD *)a3 = ++v4;
      v70 |= v62 >> v79;
      if (v79)
        v72 = v78;
      else
        v72 = 0;
      if (v79)
        v71 = v79;
      else
        v71 = 0;
    }
    else
    {
      v72 = 2 * v62;
    }
    *(_DWORD *)(a3 + 24) = v72;
    *(_BYTE *)(a2 + 24) = v70 != 0;
    if (v70)
    {
      if (v71 + 8 * ((int)v3 - (int)v4) <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v98 = "Cannot read cmmMd.headphoneVirtualize.bypass";
      }
      else
      {
        v80 = v72 >> 31;
        v81 = v71 - 1;
        *(_DWORD *)(a3 + 28) = v71 - 1;
        if (v71 - 1 < 0)
        {
          v83 = *(_QWORD *)(a3 + 8);
          if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
            && v83 <= (unint64_t)v4)
          {
            v72 = bswap32(*v4);
          }
          else
          {
            v84 = 0;
            do
            {
              v85 = (unsigned __int8 *)v4 + v84;
              v86 = v72 << 8;
              *(_DWORD *)(a3 + 24) = v86;
              v87 = 255;
              if ((unint64_t)v4 + v84 < v3 && (unint64_t)v85 >= v83)
                v87 = *v85;
              v72 = v87 | v86;
              *(_DWORD *)(a3 + 24) = v72;
              ++v84;
            }
            while ((_DWORD)v84 != 4);
          }
          v89 = v71 + 31;
          v88 = v71 == -31;
          *(_DWORD *)(a3 + 28) = v71 + 31;
          *(_QWORD *)a3 = ++v4;
          v80 |= v72 >> (v71 + 31);
          if (v71 == -31)
            v82 = 0;
          else
            v82 = v72 << (1 - v71);
          if (v88)
            v81 = 0;
          else
            v81 = v89;
        }
        else
        {
          v82 = 2 * v72;
        }
        *(_DWORD *)(a3 + 24) = v82;
        *(_BYTE *)(a2 + 25) = v80 != 0;
        if (v81 + 8 * ((int)v3 - (int)v4) > 31)
        {
          *(_DWORD *)(a3 + 28) = v81 - 32;
          if (v81 - 32 < 0)
          {
            v90 = *(_QWORD *)(a3 + 8);
            if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
              && v90 <= (unint64_t)v4)
            {
              v91 = bswap32(*v4);
            }
            else
            {
              v92 = 0;
              v91 = v82;
              do
              {
                v93 = (unsigned __int8 *)v4 + v92;
                v94 = v91 << 8;
                *(_DWORD *)(a3 + 24) = v94;
                v95 = 255;
                if ((unint64_t)v4 + v92 < v3 && (unint64_t)v93 >= v90)
                  v95 = *v93;
                v91 = v95 | v94;
                *(_DWORD *)(a3 + 24) = v91;
                ++v92;
              }
              while ((_DWORD)v92 != 4);
            }
            *(_QWORD *)a3 = v4 + 1;
            v82 |= v91 >> v81;
            v96 = v91 << -(char)v81;
            if (!v81)
              v96 = 0;
            *(_DWORD *)(a3 + 24) = v96;
            *(_DWORD *)(a3 + 28) = v81;
          }
          *(_DWORD *)(a2 + 28) = v82;
          return;
        }
        exception = __cxa_allocate_exception(8uLL);
        v98 = "Cannot read cmmMd.headphoneVirtualize.DRR";
      }
LABEL_180:
      *exception = v98;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
  }
}

void APAC::MetadataBitStreamParser::parseObjectMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t i;
  unint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  int v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  _QWORD *exception;
  const char *v60;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v60 = "Cannot read objMd.objectID";
    goto LABEL_78;
  }
  v9 = *(_DWORD *)(a3 + 24);
  v10 = v9 >> 25;
  v11 = v6 - 7;
  *(_DWORD *)(a3 + 28) = v6 - 7;
  if (v6 - 7 < 0)
  {
    v13 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v13 > (unint64_t)v4)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v4 + v15;
        v17 = v9 << 8;
        *(_DWORD *)(a3 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v4 + v15 < v3 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v9 = v18 | v17;
        *(_DWORD *)(a3 + 24) = v9;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v9 = bswap32(*v4);
    }
    v20 = v6 + 25;
    v19 = v6 == -25;
    *(_DWORD *)(a3 + 28) = v6 + 25;
    *(_QWORD *)a3 = ++v4;
    v10 |= v9 >> (v6 + 25);
    if (v6 == -25)
      v12 = 0;
    else
      v12 = v9 << (7 - v6);
    if (v19)
      v11 = 0;
    else
      v11 = v20;
  }
  else
  {
    v12 = v9 << 7;
  }
  *(_DWORD *)(a3 + 24) = v12;
  *(_BYTE *)a2 = v10;
  if (v11 + 8 * ((int)v3 - (int)v4) <= 3)
  {
    exception = __cxa_allocate_exception(8uLL);
    v60 = "Cannot read objMd.numBlocks";
LABEL_78:
    *exception = v60;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v21 = v12 >> 28;
  *(_DWORD *)(a3 + 28) = v11 - 4;
  if (v11 - 4 < 0)
  {
    v23 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v23 <= (unint64_t)v4)
    {
      v12 = bswap32(*v4);
    }
    else
    {
      v24 = 0;
      do
      {
        v25 = (unsigned __int8 *)v4 + v24;
        v26 = v12 << 8;
        *(_DWORD *)(a3 + 24) = v26;
        v27 = 255;
        if ((unint64_t)v4 + v24 < v3 && (unint64_t)v25 >= v23)
          v27 = *v25;
        v12 = v27 | v26;
        *(_DWORD *)(a3 + 24) = v12;
        ++v24;
      }
      while ((_DWORD)v24 != 4);
    }
    v28 = v12 << (4 - v11);
    v29 = v11 + 28;
    *(_DWORD *)(a3 + 28) = v29;
    *(_QWORD *)a3 = v4 + 1;
    v21 |= v12 >> v29;
    if (v29)
      v22 = v28;
    else
      v22 = 0;
  }
  else
  {
    v22 = 16 * v12;
  }
  *(_DWORD *)(a3 + 24) = v22;
  *(_BYTE *)(a2 + 1) = v21;
  LODWORD(v30) = v21;
  if ((_BYTE)v21)
  {
    for (i = 0; i < v30; ++i)
    {
      v32 = *(_QWORD *)(a3 + 16);
      v33 = *(unsigned int **)a3;
      v34 = v32 - *(_QWORD *)a3;
      v35 = *(_DWORD *)(a3 + 28);
      if (v35 + 8 * (int)v34 <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v60 = "Cannot read objMd.blockData[n].isNewBlk";
        goto LABEL_78;
      }
      v36 = *(_DWORD *)(a3 + 24);
      v37 = v36 >> 31;
      v38 = v35 - 1;
      *(_DWORD *)(a3 + 28) = v35 - 1;
      if (v35 - 1 < 0)
      {
        v40 = *(_QWORD *)(a3 + 8);
        if ((v34 & ~(v34 >> 63) & 0xFFFFFFFC) == 0 || v40 > (unint64_t)v33)
        {
          v42 = 0;
          do
          {
            v43 = (unsigned __int8 *)v33 + v42;
            v44 = v36 << 8;
            *(_DWORD *)(a3 + 24) = v44;
            v45 = 255;
            if ((unint64_t)v33 + v42 < v32 && (unint64_t)v43 >= v40)
              v45 = *v43;
            v36 = v45 | v44;
            *(_DWORD *)(a3 + 24) = v36;
            ++v42;
          }
          while ((_DWORD)v42 != 4);
        }
        else
        {
          v36 = bswap32(*v33);
        }
        v47 = v35 + 31;
        v46 = v35 == -31;
        *(_DWORD *)(a3 + 28) = v35 + 31;
        *(_QWORD *)a3 = ++v33;
        v37 |= v36 >> (v35 + 31);
        if (v35 == -31)
          v39 = 0;
        else
          v39 = v36 << (1 - v35);
        if (v46)
          v38 = 0;
        else
          v38 = v47;
      }
      else
      {
        v39 = 2 * v36;
      }
      *(_DWORD *)(a3 + 24) = v39;
      v48 = a2 + 500 * i;
      *(_BYTE *)(v48 + 4) = v37 != 0;
      v49 = v48 + 4;
      if (i)
      {
        if (i >= (v30 - 1))
        {
          *(_WORD *)(a2 + 500 * i + 6) = 0;
        }
        else
        {
          if (v38 + 8 * ((int)v32 - (int)v33) <= 9)
          {
            exception = __cxa_allocate_exception(8uLL);
            v60 = "Cannot read objMd.blockData[n].rtime";
            goto LABEL_78;
          }
          v50 = v39 >> 22;
          *(_DWORD *)(a3 + 28) = v38 - 10;
          if (v38 - 10 < 0)
          {
            v52 = *(_QWORD *)(a3 + 8);
            if ((((_DWORD)v32 - (_DWORD)v33) & ~((uint64_t)(v32 - (_QWORD)v33) >> 63) & 0xFFFFFFFC) != 0
              && v52 <= (unint64_t)v33)
            {
              v39 = bswap32(*v33);
            }
            else
            {
              v53 = 0;
              do
              {
                v54 = (unsigned __int8 *)v33 + v53;
                v55 = v39 << 8;
                *(_DWORD *)(a3 + 24) = v55;
                v56 = 255;
                if ((unint64_t)v33 + v53 < v32 && (unint64_t)v54 >= v52)
                  v56 = *v54;
                v39 = v56 | v55;
                *(_DWORD *)(a3 + 24) = v39;
                ++v53;
              }
              while ((_DWORD)v53 != 4);
            }
            v57 = v39 << (10 - v38);
            v58 = v38 + 22;
            *(_DWORD *)(a3 + 28) = v58;
            *(_QWORD *)a3 = v33 + 1;
            v50 |= v39 >> v58;
            if (v58)
              v51 = v57;
            else
              v51 = 0;
          }
          else
          {
            v51 = v39 << 10;
          }
          *(_DWORD *)(a3 + 24) = v51;
          *(_WORD *)(a2 + 500 * i + 6) = v50;
        }
      }
      else
      {
        *(_WORD *)(a2 + 6) = 0;
      }
      APAC::MetadataBitStreamParser::parseBlockData(a1, v49, 513, a3);
      v30 = *(unsigned __int8 *)(a2 + 1);
    }
  }
}

void APAC::MetadataBitStreamParser::parseProprietaryDynamicData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned int v64;
  int v65;
  int v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  unsigned __int8 *v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  _QWORD *exception;
  const char *v93;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v93 = "Cannot read pDD.hasData";
    goto LABEL_135;
  }
  v9 = *(_DWORD *)(a3 + 24);
  v10 = v9 >> 31;
  v11 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v13 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v13 > (unint64_t)v4)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v4 + v15;
        v17 = v9 << 8;
        *(_DWORD *)(a3 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v4 + v15 < v3 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v9 = v18 | v17;
        *(_DWORD *)(a3 + 24) = v9;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v9 = bswap32(*v4);
    }
    v20 = v6 + 31;
    v19 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v10 |= v9 >> (v6 + 31);
    if (v6 == -31)
      v12 = 0;
    else
      v12 = v9 << (1 - v6);
    if (v19)
      v11 = 0;
    else
      v11 = v20;
  }
  else
  {
    v12 = 2 * v9;
  }
  *(_DWORD *)(a3 + 24) = v12;
  *(_BYTE *)a2 = v10 != 0;
  if (!v10)
    return;
  if (v11 + 8 * ((int)v3 - (int)v4) <= 4)
  {
    exception = __cxa_allocate_exception(8uLL);
    v93 = "Cannot read pDD.numParameters";
LABEL_135:
    *exception = v93;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v21 = v12 >> 27;
  *(_DWORD *)(a3 + 28) = v11 - 5;
  if (v11 - 5 < 0)
  {
    v23 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v23 <= (unint64_t)v4)
    {
      v12 = bswap32(*v4);
    }
    else
    {
      v24 = 0;
      do
      {
        v25 = (unsigned __int8 *)v4 + v24;
        v26 = v12 << 8;
        *(_DWORD *)(a3 + 24) = v26;
        v27 = 255;
        if ((unint64_t)v4 + v24 < v3 && (unint64_t)v25 >= v23)
          v27 = *v25;
        v12 = v27 | v26;
        *(_DWORD *)(a3 + 24) = v12;
        ++v24;
      }
      while ((_DWORD)v24 != 4);
    }
    v28 = v12 << (5 - v11);
    v29 = v11 + 27;
    *(_DWORD *)(a3 + 28) = v29;
    *(_QWORD *)a3 = v4 + 1;
    v21 |= v12 >> v29;
    if (v29)
      v22 = v28;
    else
      v22 = 0;
  }
  else
  {
    v22 = 32 * v12;
  }
  *(_DWORD *)(a3 + 24) = v22;
  *(_BYTE *)(a2 + 1) = v21;
  if ((_BYTE)v21)
  {
    v30 = 0;
    while (1)
    {
      v31 = *(_QWORD *)(a3 + 16);
      v32 = *(unsigned int **)a3;
      v33 = v31 - *(_QWORD *)a3;
      v34 = *(_DWORD *)(a3 + 28);
      if (v34 + 8 * (int)v33 <= 4)
      {
        exception = __cxa_allocate_exception(8uLL);
        v93 = "Cannot read pDD.paramIndexList[n]";
        goto LABEL_135;
      }
      v35 = *(_DWORD *)(a3 + 24);
      v36 = v35 >> 27;
      v37 = v34 - 5;
      *(_DWORD *)(a3 + 28) = v34 - 5;
      if (v34 - 5 < 0)
      {
        v39 = *(_QWORD *)(a3 + 8);
        if ((v33 & ~(v33 >> 63) & 0xFFFFFFFC) == 0 || v39 > (unint64_t)v32)
        {
          v41 = 0;
          do
          {
            v42 = (unsigned __int8 *)v32 + v41;
            v43 = v35 << 8;
            *(_DWORD *)(a3 + 24) = v43;
            v44 = 255;
            if ((unint64_t)v32 + v41 < v31 && (unint64_t)v42 >= v39)
              v44 = *v42;
            v35 = v44 | v43;
            *(_DWORD *)(a3 + 24) = v35;
            ++v41;
          }
          while ((_DWORD)v41 != 4);
        }
        else
        {
          v35 = bswap32(*v32);
        }
        v46 = v34 + 27;
        v45 = v34 == -27;
        *(_DWORD *)(a3 + 28) = v34 + 27;
        *(_QWORD *)a3 = ++v32;
        v36 |= v35 >> (v34 + 27);
        if (v34 == -27)
          v38 = 0;
        else
          v38 = v35 << (5 - v34);
        if (v45)
          v37 = 0;
        else
          v37 = v46;
      }
      else
      {
        v38 = 32 * v35;
      }
      *(_DWORD *)(a3 + 24) = v38;
      *(_BYTE *)(a2 + v30 + 90) = v36;
      switch((char)v36)
      {
        case 0:
          v47 = v31 - (_QWORD)v32;
          if (v37 + 8 * ((int)v31 - (int)v32) <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v93 = "Cannot read pDD.lookDirection.azimuth";
            goto LABEL_135;
          }
          *(_DWORD *)(a3 + 28) = v37 - 32;
          if (v37 - 32 < 0)
          {
            v56 = v47 & ~(v47 >> 63);
            v57 = *(_QWORD *)(a3 + 8);
            if ((v56 & 0xFFFFFFFC) != 0 && v57 <= (unint64_t)v32)
            {
              v58 = bswap32(*v32);
            }
            else
            {
              v62 = 0;
              v58 = v38;
              do
              {
                v63 = (unsigned __int8 *)v32 + v62;
                v64 = v58 << 8;
                *(_DWORD *)(a3 + 24) = v64;
                v65 = 255;
                if ((unint64_t)v32 + v62 < v31 && (unint64_t)v63 >= v57)
                  v65 = *v63;
                v58 = v65 | v64;
                *(_DWORD *)(a3 + 24) = v58;
                ++v62;
              }
              while ((_DWORD)v62 != 4);
            }
            *(_QWORD *)a3 = ++v32;
            v49 = (v58 >> v37) | v38;
            v38 = v58 << -(char)v37;
            if (!v37)
              v38 = 0;
            *(_DWORD *)(a3 + 24) = v38;
            *(_DWORD *)(a3 + 28) = v37;
            v47 = v31 - (_QWORD)v32;
            v48 = 8 * (v31 - (_DWORD)v32);
          }
          else
          {
            v48 = 8 * v47;
            v37 -= 32;
            v49 = v38;
          }
          *(_DWORD *)(a2 + 4) = v49;
          if (v48 + v37 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v93 = "Cannot read pDD.lookDirection.elevation";
            goto LABEL_135;
          }
          *(_DWORD *)(a3 + 28) = v37 - 32;
          if (v37 - 32 < 0)
          {
            v66 = v47 & ~(v47 >> 63);
            v67 = *(_QWORD *)(a3 + 8);
            if ((v66 & 0xFFFFFFFC) != 0 && v67 <= (unint64_t)v32)
            {
              v68 = bswap32(*v32);
            }
            else
            {
              v87 = 0;
              v68 = v38;
              do
              {
                v88 = (unsigned __int8 *)v32 + v87;
                v89 = v68 << 8;
                *(_DWORD *)(a3 + 24) = v89;
                v90 = 255;
                if ((unint64_t)v32 + v87 < v31 && (unint64_t)v88 >= v67)
                  v90 = *v88;
                v68 = v90 | v89;
                *(_DWORD *)(a3 + 24) = v68;
                ++v87;
              }
              while ((_DWORD)v87 != 4);
            }
            *(_QWORD *)a3 = v32 + 1;
            v38 |= v68 >> v37;
            v91 = v68 << -(char)v37;
            if (!v37)
              v91 = 0;
            *(_DWORD *)(a3 + 24) = v91;
            *(_DWORD *)(a3 + 28) = v37;
          }
          *(_DWORD *)(a2 + 8) = v38;
LABEL_132:
          if (++v30 >= (unint64_t)*(unsigned __int8 *)(a2 + 1))
            return;
          break;
        case 1:
          APAC::MetadataBitStreamParser::parseAudioSceneMaskingZone(a1, a2 + 12, a3);
          goto LABEL_132;
        case 2:
          if (v37 + 8 * ((int)v31 - (int)v32) <= 2)
          {
            exception = __cxa_allocate_exception(8uLL);
            v93 = "Cannot read pDD.preferredDoF";
            goto LABEL_135;
          }
          v50 = v38 >> 29;
          *(_DWORD *)(a3 + 28) = v37 - 3;
          if (v37 - 3 < 0)
          {
            v59 = *(_QWORD *)(a3 + 8);
            if ((((_DWORD)v31 - (_DWORD)v32) & ~((uint64_t)(v31 - (_QWORD)v32) >> 63) & 0xFFFFFFFC) != 0
              && v59 <= (unint64_t)v32)
            {
              v38 = bswap32(*v32);
            }
            else
            {
              v69 = 0;
              do
              {
                v70 = (unsigned __int8 *)v32 + v69;
                v71 = v38 << 8;
                *(_DWORD *)(a3 + 24) = v71;
                v72 = 255;
                if ((unint64_t)v32 + v69 < v31 && (unint64_t)v70 >= v59)
                  v72 = *v70;
                v38 = v72 | v71;
                *(_DWORD *)(a3 + 24) = v38;
                ++v69;
              }
              while ((_DWORD)v69 != 4);
            }
            v73 = v38 << (3 - v37);
            v74 = v37 + 29;
            *(_DWORD *)(a3 + 28) = v74;
            *(_QWORD *)a3 = v32 + 1;
            v50 |= v38 >> v74;
            if (v74)
              v51 = v73;
            else
              v51 = 0;
          }
          else
          {
            v51 = 8 * v38;
          }
          *(_DWORD *)(a3 + 24) = v51;
          *(_BYTE *)(a2 + 44) = v50;
          goto LABEL_132;
        case 3:
          APAC::MetadataBitStreamParser::parseParametricReverb(a1, a2 + 48, a3);
          goto LABEL_132;
        case 4:
          if (v37 + 8 * ((int)v31 - (int)v32) <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v93 = "Cannot read pDD.headLocked";
            goto LABEL_135;
          }
          v52 = v38 >> 31;
          *(_DWORD *)(a3 + 28) = v37 - 1;
          if (v37 - 1 < 0)
          {
            v60 = *(_QWORD *)(a3 + 8);
            if ((((_DWORD)v31 - (_DWORD)v32) & ~((uint64_t)(v31 - (_QWORD)v32) >> 63) & 0xFFFFFFFC) != 0
              && v60 <= (unint64_t)v32)
            {
              v38 = bswap32(*v32);
            }
            else
            {
              v75 = 0;
              do
              {
                v76 = (unsigned __int8 *)v32 + v75;
                v77 = v38 << 8;
                *(_DWORD *)(a3 + 24) = v77;
                v78 = 255;
                if ((unint64_t)v32 + v75 < v31 && (unint64_t)v76 >= v60)
                  v78 = *v76;
                v38 = v78 | v77;
                *(_DWORD *)(a3 + 24) = v38;
                ++v75;
              }
              while ((_DWORD)v75 != 4);
            }
            v79 = v38 << (1 - v37);
            v80 = v37 + 31;
            *(_DWORD *)(a3 + 28) = v80;
            *(_QWORD *)a3 = v32 + 1;
            v52 |= v38 >> v80;
            if (v80)
              v53 = v79;
            else
              v53 = 0;
          }
          else
          {
            v53 = 2 * v38;
          }
          *(_DWORD *)(a3 + 24) = v53;
          *(_BYTE *)(a2 + 88) = v52 != 0;
          goto LABEL_132;
        case 5:
          if (v37 + 8 * ((int)v31 - (int)v32) <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v93 = "Cannot read pDD.parallax";
            goto LABEL_135;
          }
          v54 = v38 >> 31;
          *(_DWORD *)(a3 + 28) = v37 - 1;
          if (v37 - 1 < 0)
          {
            v61 = *(_QWORD *)(a3 + 8);
            if ((((_DWORD)v31 - (_DWORD)v32) & ~((uint64_t)(v31 - (_QWORD)v32) >> 63) & 0xFFFFFFFC) != 0
              && v61 <= (unint64_t)v32)
            {
              v38 = bswap32(*v32);
            }
            else
            {
              v81 = 0;
              do
              {
                v82 = (unsigned __int8 *)v32 + v81;
                v83 = v38 << 8;
                *(_DWORD *)(a3 + 24) = v83;
                v84 = 255;
                if ((unint64_t)v32 + v81 < v31 && (unint64_t)v82 >= v61)
                  v84 = *v82;
                v38 = v84 | v83;
                *(_DWORD *)(a3 + 24) = v38;
                ++v81;
              }
              while ((_DWORD)v81 != 4);
            }
            v85 = v38 << (1 - v37);
            v86 = v37 + 31;
            *(_DWORD *)(a3 + 28) = v86;
            *(_QWORD *)a3 = v32 + 1;
            v54 |= v38 >> v86;
            if (v86)
              v55 = v85;
            else
              v55 = 0;
          }
          else
          {
            v55 = 2 * v38;
          }
          *(_DWORD *)(a3 + 24) = v55;
          *(_BYTE *)(a2 + 89) = v54 != 0;
          goto LABEL_132;
        default:
          goto LABEL_132;
      }
    }
  }
}

void APAC::MetadataBitStreamParser::parseAudioSceneMaskingZone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;
  uint64_t v108;
  unsigned __int8 *v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  unint64_t v113;
  unsigned int *v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  int v118;
  unint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  int v131;
  unint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned __int8 *v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  unint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  int v144;
  unint64_t v145;
  unsigned int v146;
  uint64_t v147;
  unsigned __int8 *v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  unint64_t v152;
  unsigned int *v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  int v157;
  unint64_t v158;
  unsigned int v159;
  uint64_t v160;
  unsigned __int8 *v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  unint64_t v165;
  unsigned int *v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  int v170;
  unint64_t v171;
  unsigned int v172;
  uint64_t v173;
  unsigned __int8 *v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  _QWORD *exception;
  const char *v179;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(unsigned int **)a3;
  v6 = v4 - *(_QWORD *)a3;
  v7 = *(_DWORD *)(a3 + 28);
  if (v7 + 8 * (int)v6 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v179 = "Cannot read mZ.isZoneDefined";
    goto LABEL_217;
  }
  v9 = *(_DWORD *)(a3 + 24);
  v10 = v9 >> 31;
  v11 = v7 - 1;
  *(_DWORD *)(a3 + 28) = v7 - 1;
  if (v7 - 1 < 0)
  {
    v13 = *(_QWORD *)(a3 + 8);
    if ((v6 & ~(v6 >> 63) & 0xFFFFFFFC) == 0 || v13 > (unint64_t)v5)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v5 + v15;
        v17 = v9 << 8;
        *(_DWORD *)(a3 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v5 + v15 < v4 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v9 = v18 | v17;
        *(_DWORD *)(a3 + 24) = v9;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v9 = bswap32(*v5);
    }
    v19 = v9 << (1 - v7);
    v20 = v7 + 31;
    *(_DWORD *)(a3 + 28) = v20;
    *(_QWORD *)a3 = ++v5;
    v10 |= v9 >> v20;
    if (v20)
      v12 = v19;
    else
      v12 = 0;
    if (v20)
      v11 = v20;
    else
      v11 = 0;
  }
  else
  {
    v12 = 2 * v9;
  }
  *(_DWORD *)(a3 + 24) = v12;
  *(_BYTE *)a2 = v10 != 0;
  if (v10)
  {
    if (v11 + 8 * ((int)v4 - (int)v5) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v179 = "Cannot read mZ.keepPreviousZone";
      goto LABEL_217;
    }
    v21 = v12 >> 31;
    v22 = v11 - 1;
    *(_DWORD *)(a3 + 28) = v11 - 1;
    if (v11 - 1 < 0)
    {
      v24 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
        && v24 <= (unint64_t)v5)
      {
        v12 = bswap32(*v5);
      }
      else
      {
        v25 = 0;
        do
        {
          v26 = (unsigned __int8 *)v5 + v25;
          v27 = v12 << 8;
          *(_DWORD *)(a3 + 24) = v27;
          v28 = 255;
          if ((unint64_t)v5 + v25 < v4 && (unint64_t)v26 >= v24)
            v28 = *v26;
          v12 = v28 | v27;
          *(_DWORD *)(a3 + 24) = v12;
          ++v25;
        }
        while ((_DWORD)v25 != 4);
      }
      v29 = v12 << (1 - v11);
      v30 = v11 + 31;
      *(_DWORD *)(a3 + 28) = v30;
      *(_QWORD *)a3 = ++v5;
      v21 |= v12 >> v30;
      v23 = v30 ? v29 : 0;
      v22 = v30 ? v30 : 0;
    }
    else
    {
      v23 = 2 * v12;
    }
    *(_DWORD *)(a3 + 24) = v23;
    *(_BYTE *)(a2 + 1) = v21 != 0;
    if (!v21)
    {
      if (v22 + 8 * ((int)v4 - (int)v5) <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v179 = "Cannot read mZ.usePreDefinedZone";
        goto LABEL_217;
      }
      v31 = v23 >> 31;
      v32 = v22 - 1;
      *(_DWORD *)(a3 + 28) = v22 - 1;
      if (v22 - 1 < 0)
      {
        v34 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
          && v34 <= (unint64_t)v5)
        {
          v23 = bswap32(*v5);
        }
        else
        {
          v35 = 0;
          do
          {
            v36 = (unsigned __int8 *)v5 + v35;
            v37 = v23 << 8;
            *(_DWORD *)(a3 + 24) = v37;
            v38 = 255;
            if ((unint64_t)v5 + v35 < v4 && (unint64_t)v36 >= v34)
              v38 = *v36;
            v23 = v38 | v37;
            *(_DWORD *)(a3 + 24) = v23;
            ++v35;
          }
          while ((_DWORD)v35 != 4);
        }
        v40 = v22 + 31;
        v39 = v22 == -31;
        *(_DWORD *)(a3 + 28) = v22 + 31;
        *(_QWORD *)a3 = ++v5;
        v31 |= v23 >> (v22 + 31);
        if (v22 == -31)
          v33 = 0;
        else
          v33 = v23 << (1 - v22);
        if (v39)
          v32 = 0;
        else
          v32 = v40;
      }
      else
      {
        v33 = 2 * v23;
      }
      *(_DWORD *)(a3 + 24) = v33;
      *(_BYTE *)(a2 + 2) = v31 != 0;
      v41 = v4 - (_QWORD)v5;
      v42 = v32 + 8 * (v4 - (_DWORD)v5);
      if (v31)
      {
        if (v42 > 3)
        {
          v43 = v33 >> 28;
          *(_DWORD *)(a3 + 28) = v32 - 4;
          if (v32 - 4 < 0)
          {
            v48 = *(_QWORD *)(a3 + 8);
            if ((v41 & ~(v41 >> 63) & 0xFFFFFFFC) != 0 && v48 <= (unint64_t)v5)
            {
              v33 = bswap32(*v5);
            }
            else
            {
              v50 = 0;
              do
              {
                v51 = (unsigned __int8 *)v5 + v50;
                v52 = v33 << 8;
                *(_DWORD *)(a3 + 24) = v52;
                v53 = 255;
                if ((unint64_t)v5 + v50 < v4 && (unint64_t)v51 >= v48)
                  v53 = *v51;
                v33 = v53 | v52;
                *(_DWORD *)(a3 + 24) = v33;
                ++v50;
              }
              while ((_DWORD)v50 != 4);
            }
            v44 = v33 << (4 - v32);
            v54 = v32 + 28;
            *(_DWORD *)(a3 + 28) = v54;
            *(_QWORD *)a3 = v5 + 1;
            v43 |= v33 >> v54;
            if (!v54)
              v44 = 0;
          }
          else
          {
            v44 = 16 * v33;
          }
          *(_DWORD *)(a3 + 24) = v44;
          *(_BYTE *)(a2 + 4) = v43;
          return;
        }
        exception = __cxa_allocate_exception(8uLL);
        v179 = "Cannot read mZ.zoneIndex";
LABEL_217:
        *exception = v179;
        __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
      }
      if (v42 <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v179 = "Cannot read mZ.cartesian";
        goto LABEL_217;
      }
      v45 = v33 >> 31;
      v46 = v32 - 1;
      *(_DWORD *)(a3 + 28) = v32 - 1;
      if (v32 - 1 < 0)
      {
        v49 = *(_QWORD *)(a3 + 8);
        if ((v41 & ~(v41 >> 63) & 0xFFFFFFFC) != 0 && v49 <= (unint64_t)v5)
        {
          v33 = bswap32(*v5);
        }
        else
        {
          v55 = 0;
          do
          {
            v56 = (unsigned __int8 *)v5 + v55;
            v57 = v33 << 8;
            *(_DWORD *)(a3 + 24) = v57;
            v58 = 255;
            if ((unint64_t)v5 + v55 < v4 && (unint64_t)v56 >= v49)
              v58 = *v56;
            v33 = v58 | v57;
            *(_DWORD *)(a3 + 24) = v33;
            ++v55;
          }
          while ((_DWORD)v55 != 4);
        }
        v59 = v33 << (1 - v32);
        v60 = v32 + 31;
        *(_DWORD *)(a3 + 28) = v60;
        *(_QWORD *)a3 = ++v5;
        v45 |= v33 >> v60;
        if (v60)
          v47 = v59;
        else
          v47 = 0;
        if (v60)
          v46 = v60;
        else
          v46 = 0;
      }
      else
      {
        v47 = 2 * v33;
      }
      *(_DWORD *)(a3 + 24) = v47;
      *(_BYTE *)(a2 + 3) = v45 != 0;
      v61 = v46 + 8 * (v4 - (_DWORD)v5);
      if (v45)
      {
        if (v61 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v179 = "Cannot read mZ.co_tu.cartesian.minX";
          goto LABEL_217;
        }
        *(_DWORD *)(a3 + 28) = v46 - 32;
        if (v46 - 32 < 0)
        {
          v62 = *(_QWORD *)(a3 + 8);
          if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
            && v62 <= (unint64_t)v5)
          {
            v63 = bswap32(*v5);
          }
          else
          {
            v108 = 0;
            v63 = v47;
            do
            {
              v109 = (unsigned __int8 *)v5 + v108;
              v110 = v63 << 8;
              *(_DWORD *)(a3 + 24) = v110;
              v111 = 255;
              if ((unint64_t)v5 + v108 < v4 && (unint64_t)v109 >= v62)
                v111 = *v109;
              v63 = v111 | v110;
              *(_DWORD *)(a3 + 24) = v63;
              ++v108;
            }
            while ((_DWORD)v108 != 4);
          }
          *(_QWORD *)a3 = v5 + 1;
          v47 |= v63 >> v46;
          v112 = v63 << -(char)v46;
          if (!v46)
            v112 = 0;
          *(_DWORD *)(a3 + 24) = v112;
          *(_DWORD *)(a3 + 28) = v46;
        }
        *(_DWORD *)(a2 + 8) = v47;
        v113 = *(_QWORD *)(a3 + 16);
        v114 = *(unsigned int **)a3;
        v115 = v113 - *(_QWORD *)a3;
        v116 = *(_DWORD *)(a3 + 28);
        if (v116 + 8 * (int)v115 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v179 = "Cannot read mZ.co_tu.cartesian.maxX";
          goto LABEL_217;
        }
        v117 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 28) = v116 - 32;
        if (v116 - 32 < 0)
        {
          v118 = v115 & ~(v115 >> 63);
          v119 = *(_QWORD *)(a3 + 8);
          if ((v118 & 0xFFFFFFFC) != 0 && v119 <= (unint64_t)v114)
          {
            v120 = bswap32(*v114);
          }
          else
          {
            v121 = 0;
            v120 = v117;
            do
            {
              v122 = (unsigned __int8 *)v114 + v121;
              v123 = v120 << 8;
              *(_DWORD *)(a3 + 24) = v123;
              v124 = 255;
              if ((unint64_t)v114 + v121 < v113 && (unint64_t)v122 >= v119)
                v124 = *v122;
              v120 = v124 | v123;
              *(_DWORD *)(a3 + 24) = v120;
              ++v121;
            }
            while ((_DWORD)v121 != 4);
          }
          *(_QWORD *)a3 = v114 + 1;
          v117 |= v120 >> v116;
          v125 = v120 << -(char)v116;
          if (!v116)
            v125 = 0;
          *(_DWORD *)(a3 + 24) = v125;
          *(_DWORD *)(a3 + 28) = v116;
        }
        *(_DWORD *)(a2 + 12) = v117;
        v126 = *(_QWORD *)(a3 + 16);
        v127 = *(unsigned int **)a3;
        v128 = v126 - *(_QWORD *)a3;
        v129 = *(_DWORD *)(a3 + 28);
        if (v129 + 8 * (int)v128 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v179 = "Cannot read mZ.co_tu.cartesian.minY";
          goto LABEL_217;
        }
        v130 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 28) = v129 - 32;
        if (v129 - 32 < 0)
        {
          v131 = v128 & ~(v128 >> 63);
          v132 = *(_QWORD *)(a3 + 8);
          if ((v131 & 0xFFFFFFFC) != 0 && v132 <= (unint64_t)v127)
          {
            v133 = bswap32(*v127);
          }
          else
          {
            v134 = 0;
            v133 = v130;
            do
            {
              v135 = (unsigned __int8 *)v127 + v134;
              v136 = v133 << 8;
              *(_DWORD *)(a3 + 24) = v136;
              v137 = 255;
              if ((unint64_t)v127 + v134 < v126 && (unint64_t)v135 >= v132)
                v137 = *v135;
              v133 = v137 | v136;
              *(_DWORD *)(a3 + 24) = v133;
              ++v134;
            }
            while ((_DWORD)v134 != 4);
          }
          *(_QWORD *)a3 = v127 + 1;
          v130 |= v133 >> v129;
          v138 = v133 << -(char)v129;
          if (!v129)
            v138 = 0;
          *(_DWORD *)(a3 + 24) = v138;
          *(_DWORD *)(a3 + 28) = v129;
        }
        *(_DWORD *)(a2 + 16) = v130;
        v139 = *(_QWORD *)(a3 + 16);
        v140 = *(unsigned int **)a3;
        v141 = v139 - *(_QWORD *)a3;
        v142 = *(_DWORD *)(a3 + 28);
        if (v142 + 8 * (int)v141 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v179 = "Cannot read mZ.co_tu.cartesian.maxY";
          goto LABEL_217;
        }
        v143 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 28) = v142 - 32;
        if (v142 - 32 < 0)
        {
          v144 = v141 & ~(v141 >> 63);
          v145 = *(_QWORD *)(a3 + 8);
          if ((v144 & 0xFFFFFFFC) != 0 && v145 <= (unint64_t)v140)
          {
            v146 = bswap32(*v140);
          }
          else
          {
            v147 = 0;
            v146 = v143;
            do
            {
              v148 = (unsigned __int8 *)v140 + v147;
              v149 = v146 << 8;
              *(_DWORD *)(a3 + 24) = v149;
              v150 = 255;
              if ((unint64_t)v140 + v147 < v139 && (unint64_t)v148 >= v145)
                v150 = *v148;
              v146 = v150 | v149;
              *(_DWORD *)(a3 + 24) = v146;
              ++v147;
            }
            while ((_DWORD)v147 != 4);
          }
          *(_QWORD *)a3 = v140 + 1;
          v143 |= v146 >> v142;
          v151 = v146 << -(char)v142;
          if (!v142)
            v151 = 0;
          *(_DWORD *)(a3 + 24) = v151;
          *(_DWORD *)(a3 + 28) = v142;
        }
        *(_DWORD *)(a2 + 20) = v143;
        v152 = *(_QWORD *)(a3 + 16);
        v153 = *(unsigned int **)a3;
        v154 = v152 - *(_QWORD *)a3;
        v155 = *(_DWORD *)(a3 + 28);
        if (v155 + 8 * (int)v154 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v179 = "Cannot read mZ.co_tu.cartesian.minZ";
          goto LABEL_217;
        }
        v156 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 28) = v155 - 32;
        if (v155 - 32 < 0)
        {
          v157 = v154 & ~(v154 >> 63);
          v158 = *(_QWORD *)(a3 + 8);
          if ((v157 & 0xFFFFFFFC) != 0 && v158 <= (unint64_t)v153)
          {
            v159 = bswap32(*v153);
          }
          else
          {
            v160 = 0;
            v159 = v156;
            do
            {
              v161 = (unsigned __int8 *)v153 + v160;
              v162 = v159 << 8;
              *(_DWORD *)(a3 + 24) = v162;
              v163 = 255;
              if ((unint64_t)v153 + v160 < v152 && (unint64_t)v161 >= v158)
                v163 = *v161;
              v159 = v163 | v162;
              *(_DWORD *)(a3 + 24) = v159;
              ++v160;
            }
            while ((_DWORD)v160 != 4);
          }
          *(_QWORD *)a3 = v153 + 1;
          v156 |= v159 >> v155;
          v164 = v159 << -(char)v155;
          if (!v155)
            v164 = 0;
          *(_DWORD *)(a3 + 24) = v164;
          *(_DWORD *)(a3 + 28) = v155;
        }
        *(_DWORD *)(a2 + 24) = v156;
        v165 = *(_QWORD *)(a3 + 16);
        v166 = *(unsigned int **)a3;
        v167 = v165 - *(_QWORD *)a3;
        v168 = *(_DWORD *)(a3 + 28);
        if (v168 + 8 * (int)v167 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v179 = "Cannot read mZ.co_tu.cartesian.maxZ";
          goto LABEL_217;
        }
        v169 = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 28) = v168 - 32;
        if (v168 - 32 < 0)
        {
          v170 = v167 & ~(v167 >> 63);
          v171 = *(_QWORD *)(a3 + 8);
          if ((v170 & 0xFFFFFFFC) != 0 && v171 <= (unint64_t)v166)
          {
            v172 = bswap32(*v166);
          }
          else
          {
            v173 = 0;
            v172 = v169;
            do
            {
              v174 = (unsigned __int8 *)v166 + v173;
              v175 = v172 << 8;
              *(_DWORD *)(a3 + 24) = v175;
              v176 = 255;
              if ((unint64_t)v166 + v173 < v165 && (unint64_t)v174 >= v171)
                v176 = *v174;
              v172 = v176 | v175;
              *(_DWORD *)(a3 + 24) = v172;
              ++v173;
            }
            while ((_DWORD)v173 != 4);
          }
          *(_QWORD *)a3 = v166 + 1;
          v169 |= v172 >> v168;
          v177 = v172 << -(char)v168;
          if (!v168)
            v177 = 0;
          *(_DWORD *)(a3 + 24) = v177;
          *(_DWORD *)(a3 + 28) = v168;
        }
        *(_DWORD *)(a2 + 28) = v169;
      }
      else
      {
        if (v61 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v179 = "Cannot read mZ.co_tu.spherical.minAzimuth";
          goto LABEL_217;
        }
        *(_DWORD *)(a3 + 28) = v46 - 32;
        if (v46 - 32 < 0)
        {
          AT::TBitstreamReader<unsigned int>::FillCacheFrom(a3, v5);
          v65 = *(_DWORD *)(a3 + 24);
          v64 = *(_DWORD *)(a3 + 28);
          v66 = v64 + 32;
          v39 = v64 == -32;
          *(_QWORD *)a3 += 4;
          v47 |= v65 >> v64;
          v67 = v65 << -(char)v64;
          if (v39)
            v67 = 0;
          *(_DWORD *)(a3 + 24) = v67;
          *(_DWORD *)(a3 + 28) = v66;
        }
        *(_DWORD *)(a2 + 8) = v47;
        v68 = *(unsigned int **)a3;
        v69 = *(_DWORD *)(a3 + 28);
        if ((int)(v69 + 8 * (*(_DWORD *)(a3 + 16) - *(_QWORD *)a3)) <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v179 = "Cannot read mZ.co_tu.spherical.maxAzimuth";
          goto LABEL_217;
        }
        v70 = *(_DWORD *)(a3 + 24);
        v71 = v69 - 32;
        *(_DWORD *)(a3 + 28) = v71;
        if (v71 < 0)
        {
          AT::TBitstreamReader<unsigned int>::FillCacheFrom(a3, v68);
          v73 = *(_DWORD *)(a3 + 24);
          v72 = *(_DWORD *)(a3 + 28);
          v74 = v72 + 32;
          v39 = v72 == -32;
          *(_QWORD *)a3 += 4;
          v70 |= v73 >> v72;
          v75 = v73 << -(char)v72;
          if (v39)
            v75 = 0;
          *(_DWORD *)(a3 + 24) = v75;
          *(_DWORD *)(a3 + 28) = v74;
        }
        *(_DWORD *)(a2 + 12) = v70;
        v76 = *(unsigned int **)a3;
        v77 = *(_DWORD *)(a3 + 28);
        if ((int)(v77 + 8 * (*(_DWORD *)(a3 + 16) - *(_QWORD *)a3)) <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v179 = "Cannot read mZ.co_tu.spherical.minElevation";
          goto LABEL_217;
        }
        v78 = *(_DWORD *)(a3 + 24);
        v79 = v77 - 32;
        *(_DWORD *)(a3 + 28) = v79;
        if (v79 < 0)
        {
          AT::TBitstreamReader<unsigned int>::FillCacheFrom(a3, v76);
          v81 = *(_DWORD *)(a3 + 24);
          v80 = *(_DWORD *)(a3 + 28);
          v82 = v80 + 32;
          v39 = v80 == -32;
          *(_QWORD *)a3 += 4;
          v78 |= v81 >> v80;
          v83 = v81 << -(char)v80;
          if (v39)
            v83 = 0;
          *(_DWORD *)(a3 + 24) = v83;
          *(_DWORD *)(a3 + 28) = v82;
        }
        *(_DWORD *)(a2 + 16) = v78;
        v84 = *(unsigned int **)a3;
        v85 = *(_DWORD *)(a3 + 28);
        if ((int)(v85 + 8 * (*(_DWORD *)(a3 + 16) - *(_QWORD *)a3)) <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v179 = "Cannot read mZ.co_tu.spherical.maxElevation";
          goto LABEL_217;
        }
        v86 = *(_DWORD *)(a3 + 24);
        v87 = v85 - 32;
        *(_DWORD *)(a3 + 28) = v87;
        if (v87 < 0)
        {
          AT::TBitstreamReader<unsigned int>::FillCacheFrom(a3, v84);
          v89 = *(_DWORD *)(a3 + 24);
          v88 = *(_DWORD *)(a3 + 28);
          v90 = v88 + 32;
          v39 = v88 == -32;
          *(_QWORD *)a3 += 4;
          v86 |= v89 >> v88;
          v91 = v89 << -(char)v88;
          if (v39)
            v91 = 0;
          *(_DWORD *)(a3 + 24) = v91;
          *(_DWORD *)(a3 + 28) = v90;
        }
        *(_DWORD *)(a2 + 20) = v86;
        v92 = *(unsigned int **)a3;
        v93 = *(_DWORD *)(a3 + 28);
        if ((int)(v93 + 8 * (*(_DWORD *)(a3 + 16) - *(_QWORD *)a3)) <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v179 = "Cannot read mZ.co_tu.spherical.minDistance";
          goto LABEL_217;
        }
        v94 = *(_DWORD *)(a3 + 24);
        v95 = v93 - 32;
        *(_DWORD *)(a3 + 28) = v95;
        if (v95 < 0)
        {
          AT::TBitstreamReader<unsigned int>::FillCacheFrom(a3, v92);
          v97 = *(_DWORD *)(a3 + 24);
          v96 = *(_DWORD *)(a3 + 28);
          v98 = v96 + 32;
          v39 = v96 == -32;
          *(_QWORD *)a3 += 4;
          v94 |= v97 >> v96;
          v99 = v97 << -(char)v96;
          if (v39)
            v99 = 0;
          *(_DWORD *)(a3 + 24) = v99;
          *(_DWORD *)(a3 + 28) = v98;
        }
        *(_DWORD *)(a2 + 24) = v94;
        v100 = *(unsigned int **)a3;
        v101 = *(_DWORD *)(a3 + 28);
        if ((int)(v101 + 8 * (*(_DWORD *)(a3 + 16) - *(_QWORD *)a3)) <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v179 = "Cannot read mZ.co_tu.spherical.maxDistance";
          goto LABEL_217;
        }
        v102 = *(_DWORD *)(a3 + 24);
        v103 = v101 - 32;
        *(_DWORD *)(a3 + 28) = v103;
        if (v103 < 0)
        {
          AT::TBitstreamReader<unsigned int>::FillCacheFrom(a3, v100);
          v105 = *(_DWORD *)(a3 + 24);
          v104 = *(_DWORD *)(a3 + 28);
          v106 = v104 + 32;
          v39 = v104 == -32;
          *(_QWORD *)a3 += 4;
          v102 |= v105 >> v104;
          v107 = v105 << -(char)v104;
          if (v39)
            v107 = 0;
          *(_DWORD *)(a3 + 24) = v107;
          *(_DWORD *)(a3 + 28) = v106;
        }
        *(_DWORD *)(a2 + 28) = v102;
      }
    }
  }
}

void APAC::MetadataBitStreamParser::parseBlockData(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned __int8 *v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  int v96;
  BOOL v97;
  int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  unsigned int v122;
  int v123;
  BOOL v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  unint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned int v134;
  int v135;
  int v136;
  int v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  unsigned __int8 *v141;
  unsigned int v142;
  int v143;
  int v144;
  int v145;
  unint64_t v146;
  unsigned int v147;
  uint64_t v148;
  unsigned __int8 *v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  unint64_t v155;
  uint64_t v156;
  unsigned __int8 *v157;
  unsigned int v158;
  int v159;
  BOOL v160;
  int v161;
  unsigned int v162;
  unint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  int v169;
  unint64_t v170;
  unsigned int v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  unint64_t v179;
  uint64_t v180;
  unsigned __int8 *v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  int v185;
  int v186;
  unint64_t v187;
  unsigned int v188;
  uint64_t v189;
  unsigned __int8 *v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  unint64_t v196;
  uint64_t v197;
  unsigned __int8 *v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  int v202;
  unsigned int v203;
  unint64_t v204;
  uint64_t v205;
  unsigned __int8 *v206;
  unsigned int v207;
  int v208;
  unsigned int v209;
  int v210;
  unint64_t v211;
  unsigned int v212;
  uint64_t v213;
  unsigned __int8 *v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  int v218;
  unsigned int v219;
  unint64_t v220;
  uint64_t v221;
  unsigned __int8 *v222;
  unsigned int v223;
  int v224;
  BOOL v225;
  int v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  unint64_t v231;
  unsigned int v232;
  uint64_t v233;
  unsigned __int8 *v234;
  unsigned int v235;
  int v236;
  int v237;
  int v238;
  unint64_t v239;
  unsigned int v240;
  uint64_t v241;
  unsigned __int8 *v242;
  unsigned int v243;
  int v244;
  unsigned int v245;
  int v246;
  unsigned int v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unsigned __int8 *v251;
  unsigned int v252;
  int v253;
  unsigned int v254;
  int v255;
  BOOL v256;
  int v257;
  unsigned int v258;
  unint64_t v259;
  uint64_t v260;
  unsigned __int8 *v261;
  unsigned int v262;
  int v263;
  unsigned int v264;
  unsigned int v265;
  unint64_t v266;
  uint64_t v267;
  unsigned __int8 *v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unsigned __int8 *v278;
  unsigned int v279;
  int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  unint64_t v284;
  uint64_t v285;
  unsigned __int8 *v286;
  unsigned int v287;
  int v288;
  unsigned int v289;
  int v290;
  unsigned int v291;
  unint64_t v292;
  uint64_t v293;
  unsigned __int8 *v294;
  unsigned int v295;
  int v296;
  unsigned int v297;
  int v298;
  unint64_t v299;
  unsigned int v300;
  uint64_t v301;
  unsigned __int8 *v302;
  unsigned int v303;
  int v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  int v308;
  unsigned int v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unsigned __int8 *v313;
  unsigned int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  unint64_t v319;
  unsigned int *v320;
  uint64_t v321;
  int v322;
  int v323;
  unsigned int v324;
  uint64_t v325;
  unint64_t v326;
  BOOL v327;
  uint64_t v328;
  unsigned __int8 *v329;
  unsigned int v330;
  int v331;
  unsigned int v332;
  uint64_t v333;
  unint64_t v334;
  BOOL v335;
  uint64_t v336;
  unsigned __int8 *v337;
  unsigned int v338;
  int v339;
  unsigned int v340;
  unsigned int v341;
  uint64_t v342;
  _DWORD *v343;
  unint64_t v344;
  unsigned int *v345;
  uint64_t v346;
  int v347;
  unsigned int v348;
  uint64_t v349;
  unint64_t v350;
  BOOL v351;
  uint64_t v352;
  unsigned __int8 *v353;
  unsigned int v354;
  int v355;
  unsigned int v356;
  unsigned int v357;
  unint64_t v358;
  unsigned int *v359;
  uint64_t v360;
  int v361;
  unsigned int v362;
  int v363;
  unint64_t v364;
  unsigned int v365;
  uint64_t v366;
  unsigned __int8 *v367;
  unsigned int v368;
  int v369;
  unsigned int v370;
  unint64_t v371;
  unsigned int *v372;
  uint64_t v373;
  int v374;
  unsigned int v375;
  int v376;
  unint64_t v377;
  unsigned int v378;
  uint64_t v379;
  unsigned __int8 *v380;
  unsigned int v381;
  int v382;
  unsigned int v383;
  unint64_t v384;
  unsigned int *v385;
  uint64_t v386;
  int v387;
  unsigned int v388;
  int v389;
  unint64_t v390;
  unsigned int v391;
  uint64_t v392;
  unsigned __int8 *v393;
  unsigned int v394;
  int v395;
  unsigned int v396;
  unint64_t v397;
  unsigned int *v398;
  uint64_t v399;
  int v400;
  unsigned int v401;
  int v402;
  unint64_t v403;
  unsigned int v404;
  uint64_t v405;
  unsigned __int8 *v406;
  unsigned int v407;
  int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  uint64_t v412;
  _DWORD *v413;
  unint64_t v414;
  unsigned int *v415;
  uint64_t v416;
  int v417;
  unsigned int v418;
  uint64_t v419;
  unint64_t v420;
  BOOL v421;
  uint64_t v422;
  unsigned __int8 *v423;
  unsigned int v424;
  int v425;
  unsigned int v426;
  unsigned int v427;
  unint64_t v428;
  unsigned int *v429;
  uint64_t v430;
  int v431;
  unsigned int v432;
  int v433;
  unint64_t v434;
  unsigned int v435;
  uint64_t v436;
  unsigned __int8 *v437;
  unsigned int v438;
  int v439;
  unsigned int v440;
  unint64_t v441;
  unsigned int *v442;
  uint64_t v443;
  int v444;
  unsigned int v445;
  int v446;
  unint64_t v447;
  unsigned int v448;
  uint64_t v449;
  unsigned __int8 *v450;
  unsigned int v451;
  int v452;
  unsigned int v453;
  uint64_t v454;
  unsigned __int8 *v455;
  unsigned int v456;
  int v457;
  unsigned int v458;
  int v459;
  unsigned int v460;
  int v461;
  unsigned int v462;
  unint64_t v463;
  uint64_t v464;
  unsigned __int8 *v465;
  unsigned int v466;
  int v467;
  BOOL v468;
  int v469;
  unsigned int v470;
  int v471;
  unsigned int v472;
  int v473;
  uint64_t v474;
  int v475;
  unint64_t v476;
  unsigned int *v477;
  uint64_t v478;
  int v479;
  unsigned int v480;
  unsigned int v481;
  int v482;
  unsigned int v483;
  unint64_t v484;
  uint64_t v486;
  unsigned __int8 *v487;
  unsigned int v488;
  int v489;
  BOOL v490;
  int v491;
  uint64_t v492;
  int v493;
  unsigned int v494;
  int v495;
  unint64_t v496;
  unsigned int v497;
  int v498;
  unint64_t v499;
  unint64_t v500;
  unsigned int v501;
  uint64_t v502;
  unsigned __int8 *v503;
  unsigned int v504;
  int v505;
  int v506;
  int v507;
  uint64_t v508;
  unsigned __int8 *v509;
  unsigned int v510;
  int v511;
  unsigned int v512;
  uint64_t v513;
  _DWORD *v514;
  unint64_t v515;
  unsigned int *v516;
  uint64_t v517;
  int v518;
  unsigned int v519;
  int v520;
  unint64_t v521;
  unsigned int v522;
  uint64_t v523;
  unsigned __int8 *v524;
  unsigned int v525;
  int v526;
  unsigned int v527;
  unint64_t v528;
  unsigned int *v529;
  uint64_t v530;
  int v531;
  unsigned int v532;
  int v533;
  unint64_t v534;
  unsigned int v535;
  uint64_t v536;
  unsigned __int8 *v537;
  unsigned int v538;
  int v539;
  unsigned int v540;
  unint64_t v541;
  unsigned int *v542;
  uint64_t v543;
  int v544;
  unsigned int v545;
  int v546;
  unint64_t v547;
  unsigned int v548;
  uint64_t v549;
  unsigned __int8 *v550;
  unsigned int v551;
  int v552;
  unsigned int v553;
  unint64_t v554;
  unsigned int *v555;
  uint64_t v556;
  int v557;
  unsigned int v558;
  int v559;
  unint64_t v560;
  unsigned int v561;
  uint64_t v562;
  unsigned __int8 *v563;
  unsigned int v564;
  int v565;
  unsigned int v566;
  unint64_t v567;
  unsigned int *v568;
  uint64_t v569;
  int v570;
  unsigned int v571;
  int v572;
  unint64_t v573;
  unsigned int v574;
  uint64_t v575;
  unsigned __int8 *v576;
  unsigned int v577;
  int v578;
  unsigned int v579;
  uint64_t v580;
  unsigned __int8 *v581;
  unsigned int v582;
  int v583;
  unsigned int v584;
  uint64_t v585;
  _DWORD *v586;
  unint64_t v587;
  unsigned int *v588;
  uint64_t v589;
  int v590;
  unsigned int v591;
  int v592;
  unint64_t v593;
  unsigned int v594;
  uint64_t v595;
  unsigned __int8 *v596;
  unsigned int v597;
  int v598;
  unsigned int v599;
  unint64_t v600;
  unsigned int *v601;
  uint64_t v602;
  int v603;
  unsigned int v604;
  int v605;
  unint64_t v606;
  unsigned int v607;
  uint64_t v608;
  unsigned __int8 *v609;
  unsigned int v610;
  int v611;
  unsigned int v612;
  unint64_t v613;
  unsigned int *v614;
  uint64_t v615;
  int v616;
  unsigned int v617;
  int v618;
  unint64_t v619;
  unsigned int v620;
  uint64_t v621;
  unsigned __int8 *v622;
  unsigned int v623;
  int v624;
  unsigned int v625;
  _QWORD *exception;
  const char *v627;

  if (!*(_BYTE *)a2)
    return;
  v5 = *(_QWORD *)(a4 + 16);
  v6 = *(unsigned int **)a4;
  v7 = v5 - *(_QWORD *)a4;
  v8 = *(_DWORD *)(a4 + 28);
  if (v8 + 8 * (int)v7 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.cartesian";
    goto LABEL_935;
  }
  v11 = (_DWORD *)(a4 + 24);
  v10 = *(_DWORD *)(a4 + 24);
  v12 = v10 >> 31;
  v13 = v8 - 1;
  *(_DWORD *)(a4 + 28) = v8 - 1;
  if (v8 - 1 < 0)
  {
    v15 = *(_QWORD *)(a4 + 8);
    if ((v7 & ~(v7 >> 63) & 0xFFFFFFFC) == 0 || v15 > (unint64_t)v6)
    {
      v17 = 0;
      do
      {
        v18 = (unsigned __int8 *)v6 + v17;
        v19 = v10 << 8;
        *v11 = v19;
        v20 = 255;
        if ((unint64_t)v6 + v17 < v5 && (unint64_t)v18 >= v15)
          v20 = *v18;
        v10 = v20 | v19;
        *v11 = v10;
        ++v17;
      }
      while ((_DWORD)v17 != 4);
    }
    else
    {
      v10 = bswap32(*v6);
    }
    v22 = v8 + 31;
    v21 = v8 == -31;
    *(_DWORD *)(a4 + 28) = v8 + 31;
    *(_QWORD *)a4 = ++v6;
    v12 |= v10 >> (v8 + 31);
    if (v8 == -31)
      v14 = 0;
    else
      v14 = v10 << (1 - v8);
    if (v21)
      v13 = 0;
    else
      v13 = v22;
  }
  else
  {
    v14 = 2 * v10;
  }
  *v11 = v14;
  *(_BYTE *)(a2 + 4) = v12 != 0;
  v23 = v5 - (_QWORD)v6;
  v24 = v13 + 8 * (v5 - (_DWORD)v6);
  if (v12)
  {
    if (v24 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.position.co_ut.cartesian.X";
      goto LABEL_935;
    }
    *(_DWORD *)(a4 + 28) = v13 - 32;
    if (v13 - 32 < 0)
    {
      v25 = *(_QWORD *)(a4 + 8);
      if ((v23 & ~(v23 >> 63) & 0xFFFFFFFC) != 0 && v25 <= (unint64_t)v6)
      {
        v26 = bswap32(*v6);
      }
      else
      {
        v29 = 0;
        v26 = v14;
        do
        {
          v30 = (unsigned __int8 *)v6 + v29;
          v31 = v26 << 8;
          *v11 = v31;
          v32 = 255;
          if ((unint64_t)v6 + v29 < v5 && (unint64_t)v30 >= v25)
            v32 = *v30;
          v26 = v32 | v31;
          *v11 = v26;
          ++v29;
        }
        while ((_DWORD)v29 != 4);
      }
      *(_QWORD *)a4 = v6 + 1;
      v14 |= v26 >> v13;
      v33 = v26 << -(char)v13;
      if (!v13)
        v33 = 0;
      *(_DWORD *)(a4 + 24) = v33;
      *(_DWORD *)(a4 + 28) = v13;
    }
    *(_DWORD *)(a2 + 8) = v14;
    v34 = *(_QWORD *)(a4 + 16);
    v35 = *(unsigned int **)a4;
    v36 = v34 - *(_QWORD *)a4;
    v37 = *(_DWORD *)(a4 + 28);
    if (v37 + 8 * (int)v36 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.position.co_ut.cartesian.Y";
      goto LABEL_935;
    }
    v38 = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 28) = v37 - 32;
    if (v37 - 32 < 0)
    {
      v39 = v36 & ~(v36 >> 63);
      v40 = *(_QWORD *)(a4 + 8);
      if ((v39 & 0xFFFFFFFC) != 0 && v40 <= (unint64_t)v35)
      {
        v41 = bswap32(*v35);
      }
      else
      {
        v42 = 0;
        v41 = v38;
        do
        {
          v43 = (unsigned __int8 *)v35 + v42;
          v44 = v41 << 8;
          *v11 = v44;
          v45 = 255;
          if ((unint64_t)v35 + v42 < v34 && (unint64_t)v43 >= v40)
            v45 = *v43;
          v41 = v45 | v44;
          *v11 = v41;
          ++v42;
        }
        while ((_DWORD)v42 != 4);
      }
      *(_QWORD *)a4 = v35 + 1;
      v38 |= v41 >> v37;
      v46 = v41 << -(char)v37;
      if (!v37)
        v46 = 0;
      *(_DWORD *)(a4 + 24) = v46;
      *(_DWORD *)(a4 + 28) = v37;
    }
    *(_DWORD *)(a2 + 12) = v38;
    v47 = *(_QWORD *)(a4 + 16);
    v48 = *(unsigned int **)a4;
    v49 = v47 - *(_QWORD *)a4;
    v50 = *(_DWORD *)(a4 + 28);
    if (v50 + 8 * (int)v49 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.position.co_ut.cartesian.Z";
      goto LABEL_935;
    }
    v51 = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 28) = v50 - 32;
    if (v50 - 32 < 0)
    {
      v52 = *(_QWORD *)(a4 + 8);
      if ((v49 & ~(v49 >> 63) & 0xFFFFFFFC) == 0 || v52 > (unint64_t)v48)
      {
        v53 = 0;
        v54 = v51;
        do
        {
          v55 = (unsigned __int8 *)v48 + v53;
          v56 = v54 << 8;
          *v11 = v56;
          v57 = 255;
          if ((unint64_t)v48 + v53 < v47 && (unint64_t)v55 >= v52)
            v57 = *v55;
          v54 = v57 | v56;
          *v11 = v54;
          ++v53;
        }
        while ((_DWORD)v53 != 4);
        goto LABEL_94;
      }
LABEL_88:
      v54 = bswap32(*v48);
LABEL_94:
      *(_DWORD *)(a4 + 28) = v50;
      *(_QWORD *)a4 = v48 + 1;
      v51 |= v54 >> v50;
      if (v50)
        v83 = v54 << -(char)v50;
      else
        v83 = 0;
      *v11 = v83;
    }
  }
  else
  {
    if (v24 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.position.co_ut.spherical.azimuth";
      goto LABEL_935;
    }
    *(_DWORD *)(a4 + 28) = v13 - 32;
    if (v13 - 32 < 0)
    {
      v27 = *(_QWORD *)(a4 + 8);
      if ((v23 & ~(v23 >> 63) & 0xFFFFFFFC) != 0 && v27 <= (unint64_t)v6)
      {
        v28 = bswap32(*v6);
      }
      else
      {
        v58 = 0;
        v28 = v14;
        do
        {
          v59 = (unsigned __int8 *)v6 + v58;
          v60 = v28 << 8;
          *v11 = v60;
          v61 = 255;
          if ((unint64_t)v6 + v58 < v5 && (unint64_t)v59 >= v27)
            v61 = *v59;
          v28 = v61 | v60;
          *v11 = v28;
          ++v58;
        }
        while ((_DWORD)v58 != 4);
      }
      *(_QWORD *)a4 = v6 + 1;
      v14 |= v28 >> v13;
      v62 = v28 << -(char)v13;
      if (!v13)
        v62 = 0;
      *(_DWORD *)(a4 + 24) = v62;
      *(_DWORD *)(a4 + 28) = v13;
    }
    *(_DWORD *)(a2 + 8) = v14;
    v63 = *(_QWORD *)(a4 + 16);
    v64 = *(unsigned int **)a4;
    v65 = v63 - *(_QWORD *)a4;
    v66 = *(_DWORD *)(a4 + 28);
    if (v66 + 8 * (int)v65 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.position.co_ut.spherical.elevation";
      goto LABEL_935;
    }
    v67 = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 28) = v66 - 32;
    if (v66 - 32 < 0)
    {
      v68 = v65 & ~(v65 >> 63);
      v69 = *(_QWORD *)(a4 + 8);
      if ((v68 & 0xFFFFFFFC) != 0 && v69 <= (unint64_t)v64)
      {
        v70 = bswap32(*v64);
      }
      else
      {
        v71 = 0;
        v70 = v67;
        do
        {
          v72 = (unsigned __int8 *)v64 + v71;
          v73 = v70 << 8;
          *v11 = v73;
          v74 = 255;
          if ((unint64_t)v64 + v71 < v63 && (unint64_t)v72 >= v69)
            v74 = *v72;
          v70 = v74 | v73;
          *v11 = v70;
          ++v71;
        }
        while ((_DWORD)v71 != 4);
      }
      *(_QWORD *)a4 = v64 + 1;
      v67 |= v70 >> v66;
      v75 = v70 << -(char)v66;
      if (!v66)
        v75 = 0;
      *(_DWORD *)(a4 + 24) = v75;
      *(_DWORD *)(a4 + 28) = v66;
    }
    *(_DWORD *)(a2 + 12) = v67;
    v76 = *(_QWORD *)(a4 + 16);
    v48 = *(unsigned int **)a4;
    v77 = v76 - *(_QWORD *)a4;
    v50 = *(_DWORD *)(a4 + 28);
    if (v50 + 8 * (int)v77 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.position.co_ut.spherical.distance";
      goto LABEL_935;
    }
    v51 = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 28) = v50 - 32;
    if (v50 - 32 < 0)
    {
      v78 = *(_QWORD *)(a4 + 8);
      if ((v77 & ~(v77 >> 63) & 0xFFFFFFFC) == 0 || v78 > (unint64_t)v48)
      {
        v79 = 0;
        v54 = v51;
        do
        {
          v80 = (unsigned __int8 *)v48 + v79;
          v81 = v54 << 8;
          *v11 = v81;
          v82 = 255;
          if ((unint64_t)v48 + v79 < v76 && (unint64_t)v80 >= v78)
            v82 = *v80;
          v54 = v82 | v81;
          *v11 = v54;
          ++v79;
        }
        while ((_DWORD)v79 != 4);
        goto LABEL_94;
      }
      goto LABEL_88;
    }
  }
  *(_DWORD *)(a2 + 16) = v51;
  v84 = *(_QWORD *)(a4 + 16);
  v85 = *(unsigned int **)a4;
  v86 = v84 - *(_QWORD *)a4;
  v87 = *(_DWORD *)(a4 + 28);
  if (v87 + 8 * (int)v86 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.hasADMMetadata";
    goto LABEL_935;
  }
  v88 = *(_DWORD *)(a4 + 24);
  v89 = v88 >> 31;
  v90 = v87 - 1;
  *(_DWORD *)(a4 + 28) = v87 - 1;
  if (v87 - 1 < 0)
  {
    v92 = *(_QWORD *)(a4 + 8);
    if ((v86 & ~(v86 >> 63) & 0xFFFFFFFC) != 0 && v92 <= (unint64_t)v85)
    {
      v88 = bswap32(*v85);
    }
    else
    {
      v93 = 0;
      do
      {
        v94 = (unsigned __int8 *)v85 + v93;
        v95 = v88 << 8;
        *v11 = v95;
        v96 = 255;
        if ((unint64_t)v85 + v93 < v84 && (unint64_t)v94 >= v92)
          v96 = *v94;
        v88 = v96 | v95;
        *v11 = v88;
        ++v93;
      }
      while ((_DWORD)v93 != 4);
    }
    v98 = v87 + 31;
    v97 = v87 == -31;
    *(_DWORD *)(a4 + 28) = v87 + 31;
    *(_QWORD *)a4 = ++v85;
    v89 |= v88 >> (v87 + 31);
    if (v87 == -31)
      v91 = 0;
    else
      v91 = v88 << (1 - v87);
    if (v97)
      v90 = 0;
    else
      v90 = v98;
  }
  else
  {
    v91 = 2 * v88;
  }
  *v11 = v91;
  *(_BYTE *)(a2 + 20) = v89 != 0;
  if (!v89)
    return;
  if (v90 + 8 * ((int)v84 - (int)v85) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.absoluteDistance.hasData";
    goto LABEL_935;
  }
  v99 = v91 >> 31;
  v100 = v90 - 1;
  *(_DWORD *)(a4 + 28) = v90 - 1;
  if (v90 - 1 < 0)
  {
    v102 = *(_QWORD *)(a4 + 8);
    if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
      && v102 <= (unint64_t)v85)
    {
      v91 = bswap32(*v85);
    }
    else
    {
      v103 = 0;
      do
      {
        v104 = (unsigned __int8 *)v85 + v103;
        v105 = v91 << 8;
        *v11 = v105;
        v106 = 255;
        if ((unint64_t)v85 + v103 < v84 && (unint64_t)v104 >= v102)
          v106 = *v104;
        v91 = v106 | v105;
        *v11 = v91;
        ++v103;
      }
      while ((_DWORD)v103 != 4);
    }
    v107 = v91 << (1 - v90);
    v108 = v90 + 31;
    *(_DWORD *)(a4 + 28) = v108;
    *(_QWORD *)a4 = ++v85;
    v99 |= v91 >> v108;
    if (v108)
      v101 = v107;
    else
      v101 = 0;
    if (v108)
      v100 = v108;
    else
      v100 = 0;
  }
  else
  {
    v101 = 2 * v91;
  }
  *v11 = v101;
  *(_BYTE *)(a2 + 24) = v99 != 0;
  if (v99)
  {
    if (v100 + 8 * ((int)v84 - (int)v85) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.absoluteDistance.distance";
      goto LABEL_935;
    }
    *(_DWORD *)(a4 + 28) = v100 - 32;
    if (v100 - 32 < 0)
    {
      v110 = *(_QWORD *)(a4 + 8);
      if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
        && v110 <= (unint64_t)v85)
      {
        v111 = bswap32(*v85);
      }
      else
      {
        v112 = 0;
        v111 = v101;
        do
        {
          v113 = (unsigned __int8 *)v85 + v112;
          v114 = v111 << 8;
          *v11 = v114;
          v115 = 255;
          if ((unint64_t)v85 + v112 < v84 && (unint64_t)v113 >= v110)
            v115 = *v113;
          v111 = v115 | v114;
          *v11 = v111;
          ++v112;
        }
        while ((_DWORD)v112 != 4);
      }
      *(_QWORD *)a4 = ++v85;
      v109 = (v111 >> v100) | v101;
      v101 = v111 << -(char)v100;
      if (!v100)
        v101 = 0;
      *(_DWORD *)(a4 + 24) = v101;
      *(_DWORD *)(a4 + 28) = v100;
    }
    else
    {
      v100 -= 32;
      v109 = v101;
    }
    *(_DWORD *)(a2 + 28) = v109;
  }
  if (v100 + 8 * ((int)v84 - (int)v85) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.spread.hasData";
    goto LABEL_935;
  }
  v116 = v101 >> 31;
  v117 = v100 - 1;
  *(_DWORD *)(a4 + 28) = v100 - 1;
  if (v100 - 1 < 0)
  {
    v119 = *(_QWORD *)(a4 + 8);
    if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
      && v119 <= (unint64_t)v85)
    {
      v101 = bswap32(*v85);
    }
    else
    {
      v120 = 0;
      do
      {
        v121 = (unsigned __int8 *)v85 + v120;
        v122 = v101 << 8;
        *v11 = v122;
        v123 = 255;
        if ((unint64_t)v85 + v120 < v84 && (unint64_t)v121 >= v119)
          v123 = *v121;
        v101 = v123 | v122;
        *v11 = v101;
        ++v120;
      }
      while ((_DWORD)v120 != 4);
    }
    v125 = v100 + 31;
    v124 = v100 == -31;
    *(_DWORD *)(a4 + 28) = v100 + 31;
    *(_QWORD *)a4 = ++v85;
    v116 |= v101 >> (v100 + 31);
    if (v100 == -31)
      v118 = 0;
    else
      v118 = v101 << (1 - v100);
    if (v124)
      v117 = 0;
    else
      v117 = v125;
  }
  else
  {
    v118 = 2 * v101;
  }
  *v11 = v118;
  *(_BYTE *)(a2 + 32) = v116 != 0;
  if (v116)
  {
    v126 = v84 - (_QWORD)v85;
    if (v117 + 8 * ((int)v84 - (int)v85) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.spread.width";
      goto LABEL_935;
    }
    *(_DWORD *)(a4 + 28) = v117 - 32;
    if (v117 - 32 < 0)
    {
      v129 = v126 & ~(v126 >> 63);
      v130 = *(_QWORD *)(a4 + 8);
      if ((v129 & 0xFFFFFFFC) != 0 && v130 <= (unint64_t)v85)
      {
        v131 = bswap32(*v85);
      }
      else
      {
        v132 = 0;
        v131 = v118;
        do
        {
          v133 = (unsigned __int8 *)v85 + v132;
          v134 = v131 << 8;
          *v11 = v134;
          v135 = 255;
          if ((unint64_t)v85 + v132 < v84 && (unint64_t)v133 >= v130)
            v135 = *v133;
          v131 = v135 | v134;
          *v11 = v131;
          ++v132;
        }
        while ((_DWORD)v132 != 4);
      }
      *(_QWORD *)a4 = ++v85;
      v128 = (v131 >> v117) | v118;
      v118 = v131 << -(char)v117;
      if (!v117)
        v118 = 0;
      *(_DWORD *)(a4 + 24) = v118;
      *(_DWORD *)(a4 + 28) = v117;
      v126 = v84 - (_QWORD)v85;
      v127 = 8 * (v84 - (_DWORD)v85);
    }
    else
    {
      v127 = 8 * v126;
      v117 -= 32;
      v128 = v118;
    }
    *(_DWORD *)(a2 + 36) = v128;
    if (v127 + v117 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.spread.height";
      goto LABEL_935;
    }
    *(_DWORD *)(a4 + 28) = v117 - 32;
    if (v117 - 32 < 0)
    {
      v137 = v126 & ~(v126 >> 63);
      v138 = *(_QWORD *)(a4 + 8);
      if ((v137 & 0xFFFFFFFC) != 0 && v138 <= (unint64_t)v85)
      {
        v139 = bswap32(*v85);
      }
      else
      {
        v140 = 0;
        v139 = v118;
        do
        {
          v141 = (unsigned __int8 *)v85 + v140;
          v142 = v139 << 8;
          *v11 = v142;
          v143 = 255;
          if ((unint64_t)v85 + v140 < v84 && (unint64_t)v141 >= v138)
            v143 = *v141;
          v139 = v143 | v142;
          *v11 = v139;
          ++v140;
        }
        while ((_DWORD)v140 != 4);
      }
      *(_QWORD *)a4 = ++v85;
      v136 = (v139 >> v117) | v118;
      v118 = v139 << -(char)v117;
      if (!v117)
        v118 = 0;
      *(_DWORD *)(a4 + 24) = v118;
      *(_DWORD *)(a4 + 28) = v117;
      v126 = v84 - (_QWORD)v85;
      v127 = 8 * (v84 - (_DWORD)v85);
    }
    else
    {
      v117 -= 32;
      v136 = v118;
    }
    *(_DWORD *)(a2 + 40) = v136;
    if (v127 + v117 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.spread.depth";
      goto LABEL_935;
    }
    *(_DWORD *)(a4 + 28) = v117 - 32;
    if (v117 - 32 < 0)
    {
      v145 = v126 & ~(v126 >> 63);
      v146 = *(_QWORD *)(a4 + 8);
      if ((v145 & 0xFFFFFFFC) != 0 && v146 <= (unint64_t)v85)
      {
        v147 = bswap32(*v85);
      }
      else
      {
        v148 = 0;
        v147 = v118;
        do
        {
          v149 = (unsigned __int8 *)v85 + v148;
          v150 = v147 << 8;
          *v11 = v150;
          v151 = 255;
          if ((unint64_t)v85 + v148 < v84 && (unint64_t)v149 >= v146)
            v151 = *v149;
          v147 = v151 | v150;
          *v11 = v147;
          ++v148;
        }
        while ((_DWORD)v148 != 4);
      }
      *(_QWORD *)a4 = ++v85;
      v144 = (v147 >> v117) | v118;
      v118 = v147 << -(char)v117;
      if (!v117)
        v118 = 0;
      *(_DWORD *)(a4 + 24) = v118;
      *(_DWORD *)(a4 + 28) = v117;
    }
    else
    {
      v117 -= 32;
      v144 = v118;
    }
    *(_DWORD *)(a2 + 44) = v144;
  }
  if (v117 + 8 * ((int)v84 - (int)v85) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.gain.hasData";
    goto LABEL_935;
  }
  v152 = v118 >> 31;
  v153 = v117 - 1;
  *(_DWORD *)(a4 + 28) = v117 - 1;
  if (v117 - 1 < 0)
  {
    v155 = *(_QWORD *)(a4 + 8);
    if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
      && v155 <= (unint64_t)v85)
    {
      v118 = bswap32(*v85);
    }
    else
    {
      v156 = 0;
      do
      {
        v157 = (unsigned __int8 *)v85 + v156;
        v158 = v118 << 8;
        *v11 = v158;
        v159 = 255;
        if ((unint64_t)v85 + v156 < v84 && (unint64_t)v157 >= v155)
          v159 = *v157;
        v118 = v159 | v158;
        *v11 = v118;
        ++v156;
      }
      while ((_DWORD)v156 != 4);
    }
    v161 = v117 + 31;
    v160 = v117 == -31;
    *(_DWORD *)(a4 + 28) = v117 + 31;
    *(_QWORD *)a4 = ++v85;
    v152 |= v118 >> (v117 + 31);
    if (v117 == -31)
      v154 = 0;
    else
      v154 = v118 << (1 - v117);
    if (v160)
      v153 = 0;
    else
      v153 = v161;
  }
  else
  {
    v154 = 2 * v118;
  }
  *v11 = v154;
  *(_BYTE *)(a2 + 48) = v152 != 0;
  if (v152)
  {
    if (v153 + 8 * ((int)v84 - (int)v85) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.gain.isDB";
      goto LABEL_935;
    }
    v162 = v154 >> 31;
    *(_DWORD *)(a4 + 28) = v153 - 1;
    if (v153 - 1 < 0)
    {
      v163 = *(_QWORD *)(a4 + 8);
      if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
        && v163 <= (unint64_t)v85)
      {
        v154 = bswap32(*v85);
      }
      else
      {
        v164 = 0;
        do
        {
          v165 = (unsigned __int8 *)v85 + v164;
          v166 = v154 << 8;
          *v11 = v166;
          v167 = 255;
          if ((unint64_t)v85 + v164 < v84 && (unint64_t)v165 >= v163)
            v167 = *v165;
          v154 = v167 | v166;
          *v11 = v154;
          ++v164;
        }
        while ((_DWORD)v164 != 4);
      }
      v168 = v154 << (1 - v153);
      v153 += 31;
      *(_DWORD *)(a4 + 28) = v153;
      *(_QWORD *)a4 = ++v85;
      v162 |= v154 >> v153;
      if (v153)
        v154 = v168;
      else
        v154 = 0;
      if (!v153)
        v153 = 0;
    }
    else
    {
      v154 *= 2;
      --v153;
    }
    *v11 = v154;
    *(_BYTE *)(a2 + 49) = v162 != 0;
    if (v153 + 8 * ((int)v84 - (int)v85) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.gain.gain";
      goto LABEL_935;
    }
    *(_DWORD *)(a4 + 28) = v153 - 32;
    if (v153 - 32 < 0)
    {
      v170 = *(_QWORD *)(a4 + 8);
      if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
        && v170 <= (unint64_t)v85)
      {
        v171 = bswap32(*v85);
      }
      else
      {
        v172 = 0;
        v171 = v154;
        do
        {
          v173 = (unsigned __int8 *)v85 + v172;
          v174 = v171 << 8;
          *v11 = v174;
          v175 = 255;
          if ((unint64_t)v85 + v172 < v84 && (unint64_t)v173 >= v170)
            v175 = *v173;
          v171 = v175 | v174;
          *v11 = v171;
          ++v172;
        }
        while ((_DWORD)v172 != 4);
      }
      *(_QWORD *)a4 = ++v85;
      v169 = (v171 >> v153) | v154;
      v154 = v171 << -(char)v153;
      if (!v153)
        v154 = 0;
      *(_DWORD *)(a4 + 24) = v154;
      *(_DWORD *)(a4 + 28) = v153;
    }
    else
    {
      v153 -= 32;
      v169 = v154;
    }
    *(_DWORD *)(a2 + 52) = v169;
  }
  if (v153 + 8 * ((int)v84 - (int)v85) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.diffuse.hasData";
    goto LABEL_935;
  }
  v176 = v154 >> 31;
  v177 = v153 - 1;
  *(_DWORD *)(a4 + 28) = v153 - 1;
  if (v153 - 1 < 0)
  {
    v179 = *(_QWORD *)(a4 + 8);
    if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
      && v179 <= (unint64_t)v85)
    {
      v154 = bswap32(*v85);
    }
    else
    {
      v180 = 0;
      do
      {
        v181 = (unsigned __int8 *)v85 + v180;
        v182 = v154 << 8;
        *v11 = v182;
        v183 = 255;
        if ((unint64_t)v85 + v180 < v84 && (unint64_t)v181 >= v179)
          v183 = *v181;
        v154 = v183 | v182;
        *v11 = v154;
        ++v180;
      }
      while ((_DWORD)v180 != 4);
    }
    v184 = v154 << (1 - v153);
    v185 = v153 + 31;
    *(_DWORD *)(a4 + 28) = v185;
    *(_QWORD *)a4 = ++v85;
    v176 |= v154 >> v185;
    if (v185)
      v178 = v184;
    else
      v178 = 0;
    if (v185)
      v177 = v185;
    else
      v177 = 0;
  }
  else
  {
    v178 = 2 * v154;
  }
  *v11 = v178;
  *(_BYTE *)(a2 + 56) = v176 != 0;
  if (v176)
  {
    if (v177 + 8 * ((int)v84 - (int)v85) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.diffuse.diffuse";
      goto LABEL_935;
    }
    *(_DWORD *)(a4 + 28) = v177 - 32;
    if (v177 - 32 < 0)
    {
      v187 = *(_QWORD *)(a4 + 8);
      if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
        && v187 <= (unint64_t)v85)
      {
        v188 = bswap32(*v85);
      }
      else
      {
        v189 = 0;
        v188 = v178;
        do
        {
          v190 = (unsigned __int8 *)v85 + v189;
          v191 = v188 << 8;
          *v11 = v191;
          v192 = 255;
          if ((unint64_t)v85 + v189 < v84 && (unint64_t)v190 >= v187)
            v192 = *v190;
          v188 = v192 | v191;
          *v11 = v188;
          ++v189;
        }
        while ((_DWORD)v189 != 4);
      }
      *(_QWORD *)a4 = ++v85;
      v186 = (v188 >> v177) | v178;
      v178 = v188 << -(char)v177;
      if (!v177)
        v178 = 0;
      *(_DWORD *)(a4 + 24) = v178;
      *(_DWORD *)(a4 + 28) = v177;
    }
    else
    {
      v177 -= 32;
      v186 = v178;
    }
    *(_DWORD *)(a2 + 60) = v186;
  }
  if (v177 + 8 * ((int)v84 - (int)v85) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.channelLock.channelLock";
    goto LABEL_935;
  }
  v193 = v178 >> 31;
  v194 = v177 - 1;
  *(_DWORD *)(a4 + 28) = v177 - 1;
  if (v177 - 1 < 0)
  {
    v196 = *(_QWORD *)(a4 + 8);
    if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
      && v196 <= (unint64_t)v85)
    {
      v178 = bswap32(*v85);
    }
    else
    {
      v197 = 0;
      do
      {
        v198 = (unsigned __int8 *)v85 + v197;
        v199 = v178 << 8;
        *v11 = v199;
        v200 = 255;
        if ((unint64_t)v85 + v197 < v84 && (unint64_t)v198 >= v196)
          v200 = *v198;
        v178 = v200 | v199;
        *v11 = v178;
        ++v197;
      }
      while ((_DWORD)v197 != 4);
    }
    v201 = v178 << (1 - v177);
    v202 = v177 + 31;
    *(_DWORD *)(a4 + 28) = v202;
    *(_QWORD *)a4 = ++v85;
    v193 |= v178 >> v202;
    if (v202)
      v195 = v201;
    else
      v195 = 0;
    if (v202)
      v194 = v202;
    else
      v194 = 0;
  }
  else
  {
    v195 = 2 * v178;
  }
  *v11 = v195;
  *(_BYTE *)(a2 + 64) = v193 != 0;
  if (v193)
  {
    if (v194 + 8 * ((int)v84 - (int)v85) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.channelLock.hasMaxDistance";
      goto LABEL_935;
    }
    v203 = v195 >> 31;
    *(_DWORD *)(a4 + 28) = v194 - 1;
    if (v194 - 1 < 0)
    {
      v204 = *(_QWORD *)(a4 + 8);
      if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
        && v204 <= (unint64_t)v85)
      {
        v195 = bswap32(*v85);
      }
      else
      {
        v205 = 0;
        do
        {
          v206 = (unsigned __int8 *)v85 + v205;
          v207 = v195 << 8;
          *v11 = v207;
          v208 = 255;
          if ((unint64_t)v85 + v205 < v84 && (unint64_t)v206 >= v204)
            v208 = *v206;
          v195 = v208 | v207;
          *v11 = v195;
          ++v205;
        }
        while ((_DWORD)v205 != 4);
      }
      v209 = v195 << (1 - v194);
      v194 += 31;
      *(_DWORD *)(a4 + 28) = v194;
      *(_QWORD *)a4 = ++v85;
      v203 |= v195 >> v194;
      if (v194)
        v195 = v209;
      else
        v195 = 0;
      if (!v194)
        v194 = 0;
    }
    else
    {
      v195 *= 2;
      --v194;
    }
    *v11 = v195;
    *(_BYTE *)(a2 + 65) = v203 != 0;
    if (v203)
    {
      if (v194 + 8 * ((int)v84 - (int)v85) <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v627 = "Cannot read blkData.channelLock.maxDistance";
        goto LABEL_935;
      }
      *(_DWORD *)(a4 + 28) = v194 - 32;
      if (v194 - 32 < 0)
      {
        v211 = *(_QWORD *)(a4 + 8);
        if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
          && v211 <= (unint64_t)v85)
        {
          v212 = bswap32(*v85);
        }
        else
        {
          v213 = 0;
          v212 = v195;
          do
          {
            v214 = (unsigned __int8 *)v85 + v213;
            v215 = v212 << 8;
            *v11 = v215;
            v216 = 255;
            if ((unint64_t)v85 + v213 < v84 && (unint64_t)v214 >= v211)
              v216 = *v214;
            v212 = v216 | v215;
            *v11 = v212;
            ++v213;
          }
          while ((_DWORD)v213 != 4);
        }
        *(_QWORD *)a4 = ++v85;
        v210 = (v212 >> v194) | v195;
        v195 = v212 << -(char)v194;
        if (!v194)
          v195 = 0;
        *(_DWORD *)(a4 + 24) = v195;
        *(_DWORD *)(a4 + 28) = v194;
      }
      else
      {
        v194 -= 32;
        v210 = v195;
      }
      *(_DWORD *)(a2 + 68) = v210;
    }
  }
  if (v194 + 8 * ((int)v84 - (int)v85) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.objectDivergence.hasData";
    goto LABEL_935;
  }
  v217 = v195 >> 31;
  v218 = v194 - 1;
  *(_DWORD *)(a4 + 28) = v194 - 1;
  if (v194 - 1 < 0)
  {
    v220 = *(_QWORD *)(a4 + 8);
    if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
      && v220 <= (unint64_t)v85)
    {
      v195 = bswap32(*v85);
    }
    else
    {
      v221 = 0;
      do
      {
        v222 = (unsigned __int8 *)v85 + v221;
        v223 = v195 << 8;
        *v11 = v223;
        v224 = 255;
        if ((unint64_t)v85 + v221 < v84 && (unint64_t)v222 >= v220)
          v224 = *v222;
        v195 = v224 | v223;
        *v11 = v195;
        ++v221;
      }
      while ((_DWORD)v221 != 4);
    }
    v226 = v194 + 31;
    v225 = v194 == -31;
    *(_DWORD *)(a4 + 28) = v194 + 31;
    *(_QWORD *)a4 = ++v85;
    v217 |= v195 >> (v194 + 31);
    if (v194 == -31)
      v219 = 0;
    else
      v219 = v195 << (1 - v194);
    if (v225)
      v218 = 0;
    else
      v218 = v226;
  }
  else
  {
    v219 = 2 * v195;
  }
  *v11 = v219;
  *(_BYTE *)(a2 + 72) = v217 != 0;
  if (v217)
  {
    v227 = v84 - (_QWORD)v85;
    if (v218 + 8 * ((int)v84 - (int)v85) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.objectDivergence.objectDivergence";
      goto LABEL_935;
    }
    *(_DWORD *)(a4 + 28) = v218 - 32;
    if (v218 - 32 < 0)
    {
      v230 = v227 & ~(v227 >> 63);
      v231 = *(_QWORD *)(a4 + 8);
      if ((v230 & 0xFFFFFFFC) != 0 && v231 <= (unint64_t)v85)
      {
        v232 = bswap32(*v85);
      }
      else
      {
        v233 = 0;
        v232 = v219;
        do
        {
          v234 = (unsigned __int8 *)v85 + v233;
          v235 = v232 << 8;
          *v11 = v235;
          v236 = 255;
          if ((unint64_t)v85 + v233 < v84 && (unint64_t)v234 >= v231)
            v236 = *v234;
          v232 = v236 | v235;
          *v11 = v232;
          ++v233;
        }
        while ((_DWORD)v233 != 4);
      }
      *(_QWORD *)a4 = ++v85;
      v229 = (v232 >> v218) | v219;
      v219 = v232 << -(char)v218;
      if (!v218)
        v219 = 0;
      *(_DWORD *)(a4 + 24) = v219;
      *(_DWORD *)(a4 + 28) = v218;
      v227 = v84 - (_QWORD)v85;
      v228 = 8 * (v84 - (_DWORD)v85);
    }
    else
    {
      v228 = 8 * v227;
      v218 -= 32;
      v229 = v219;
    }
    *(_DWORD *)(a2 + 76) = v229;
    if (v228 + v218 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.objectDivergence.positionOrAzimuthRange";
      goto LABEL_935;
    }
    *(_DWORD *)(a4 + 28) = v218 - 32;
    if (v218 - 32 < 0)
    {
      v238 = v227 & ~(v227 >> 63);
      v239 = *(_QWORD *)(a4 + 8);
      if ((v238 & 0xFFFFFFFC) != 0 && v239 <= (unint64_t)v85)
      {
        v240 = bswap32(*v85);
      }
      else
      {
        v241 = 0;
        v240 = v219;
        do
        {
          v242 = (unsigned __int8 *)v85 + v241;
          v243 = v240 << 8;
          *v11 = v243;
          v244 = 255;
          if ((unint64_t)v85 + v241 < v84 && (unint64_t)v242 >= v239)
            v244 = *v242;
          v240 = v244 | v243;
          *v11 = v240;
          ++v241;
        }
        while ((_DWORD)v241 != 4);
      }
      *(_QWORD *)a4 = ++v85;
      v237 = (v240 >> v218) | v219;
      v219 = v240 << -(char)v218;
      if (!v218)
        v219 = 0;
      *(_DWORD *)(a4 + 24) = v219;
      *(_DWORD *)(a4 + 28) = v218;
    }
    else
    {
      v218 -= 32;
      v237 = v219;
    }
    *(_DWORD *)(a2 + 88) = v237;
  }
  if (v218 + 8 * ((int)v84 - (int)v85) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.screenRef";
    goto LABEL_935;
  }
  v245 = v219 >> 31;
  v246 = v218 - 1;
  *(_DWORD *)(a4 + 28) = v218 - 1;
  if (v218 - 1 < 0)
  {
    v249 = *(_QWORD *)(a4 + 8);
    v248 = *(_QWORD *)(a4 + 16);
    if ((((_DWORD)v248 - (_DWORD)v85) & ~((uint64_t)(v248 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
      && v249 <= (unint64_t)v85)
    {
      v219 = bswap32(*v85);
    }
    else
    {
      v250 = 0;
      do
      {
        v251 = (unsigned __int8 *)v85 + v250;
        v252 = v219 << 8;
        *v11 = v252;
        v253 = 255;
        if ((unint64_t)v85 + v250 < v248 && (unint64_t)v251 >= v249)
          v253 = *v251;
        v219 = v253 | v252;
        *v11 = v219;
        ++v250;
      }
      while ((_DWORD)v250 != 4);
    }
    v254 = v219 << (1 - v218);
    v255 = v218 + 31;
    *(_DWORD *)(a4 + 28) = v255;
    *(_QWORD *)a4 = ++v85;
    v245 |= v219 >> v255;
    if (v255)
      v247 = v254;
    else
      v247 = 0;
    if (v255)
      v246 = v255;
    else
      v246 = 0;
  }
  else
  {
    v247 = 2 * v219;
  }
  *v11 = v247;
  *(_BYTE *)(a2 + 92) = v245 != 0;
  v256 = a3 == 1 && HIBYTE(a3) == 1;
  v257 = v256;
  if (v256)
  {
    if (v246 + 8 * ((int)v84 - (int)v85) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.importance.hasData";
      goto LABEL_935;
    }
    v258 = v247 >> 31;
    *(_DWORD *)(a4 + 28) = v246 - 1;
    if (v246 - 1 < 0)
    {
      v259 = *(_QWORD *)(a4 + 8);
      if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
        && v259 <= (unint64_t)v85)
      {
        v247 = bswap32(*v85);
      }
      else
      {
        v260 = 0;
        do
        {
          v261 = (unsigned __int8 *)v85 + v260;
          v262 = v247 << 8;
          *v11 = v262;
          v263 = 255;
          if ((unint64_t)v85 + v260 < v84 && (unint64_t)v261 >= v259)
            v263 = *v261;
          v247 = v263 | v262;
          *v11 = v247;
          ++v260;
        }
        while ((_DWORD)v260 != 4);
      }
      v264 = v247 << (1 - v246);
      v246 += 31;
      *(_DWORD *)(a4 + 28) = v246;
      *(_QWORD *)a4 = ++v85;
      v258 |= v247 >> v246;
      if (v246)
        v247 = v264;
      else
        v247 = 0;
      if (!v246)
        v246 = 0;
    }
    else
    {
      v247 *= 2;
      --v246;
    }
    *v11 = v247;
    *(_BYTE *)(a2 + 93) = v258 != 0;
    if (v258)
    {
      if (v246 + 8 * ((int)v84 - (int)v85) <= 3)
      {
        exception = __cxa_allocate_exception(8uLL);
        v627 = "Cannot read blkData.importance.importance";
        goto LABEL_935;
      }
      v265 = v247 >> 28;
      *(_DWORD *)(a4 + 28) = v246 - 4;
      if (v246 - 4 < 0)
      {
        v266 = *(_QWORD *)(a4 + 8);
        if ((((_DWORD)v84 - (_DWORD)v85) & ~((uint64_t)(v84 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
          && v266 <= (unint64_t)v85)
        {
          v247 = bswap32(*v85);
        }
        else
        {
          v267 = 0;
          do
          {
            v268 = (unsigned __int8 *)v85 + v267;
            v269 = v247 << 8;
            *v11 = v269;
            v270 = 255;
            if ((unint64_t)v85 + v267 < v84 && (unint64_t)v268 >= v266)
              v270 = *v268;
            v247 = v270 | v269;
            *v11 = v247;
            ++v267;
          }
          while ((_DWORD)v267 != 4);
        }
        v271 = v247 << (4 - v246);
        v246 += 28;
        *(_DWORD *)(a4 + 28) = v246;
        *(_QWORD *)a4 = ++v85;
        v265 |= v247 >> v246;
        if (v246)
          v247 = v271;
        else
          v247 = 0;
        if (!v246)
          v246 = 0;
      }
      else
      {
        v247 *= 16;
        v246 -= 4;
      }
      *v11 = v247;
      *(_BYTE *)(a2 + 94) = v265;
    }
  }
  if (v246 + 8 * ((int)v84 - (int)v85) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.headLocked";
    goto LABEL_935;
  }
  v272 = v247 >> 31;
  v273 = v246 - 1;
  *(_DWORD *)(a4 + 28) = v246 - 1;
  if (v246 - 1 < 0)
  {
    v276 = *(_QWORD *)(a4 + 8);
    v275 = *(_QWORD *)(a4 + 16);
    if ((((_DWORD)v275 - (_DWORD)v85) & ~((uint64_t)(v275 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
      && v276 <= (unint64_t)v85)
    {
      v247 = bswap32(*v85);
      *v11 = v247;
    }
    else
    {
      v277 = 0;
      do
      {
        v278 = (unsigned __int8 *)v85 + v277;
        v279 = v247 << 8;
        *v11 = v279;
        v280 = 255;
        if ((unint64_t)v85 + v277 < v275 && (unint64_t)v278 >= v276)
          v280 = *v278;
        v247 = v280 | v279;
        *v11 = v247;
        ++v277;
      }
      while ((_DWORD)v277 != 4);
    }
    *(_QWORD *)a4 = ++v85;
    v273 = v246 + 31;
    *(_DWORD *)(a4 + 28) = v246 + 31;
    v272 |= v247 >> (v246 + 31);
    if (v246 == -31)
    {
      v274 = 0;
      *v11 = 0;
    }
    else
    {
      v274 = v247 << (1 - v246);
      *v11 = v274;
    }
  }
  else
  {
    v274 = 2 * v247;
    *(_DWORD *)(a4 + 24) = v274;
    v275 = *(_QWORD *)(a4 + 16);
  }
  *(_BYTE *)(a2 + 95) = v272 != 0;
  if (v273 + 8 * ((int)v275 - (int)v85) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.headphoneVirtualize.hasData";
    goto LABEL_935;
  }
  v281 = v274 >> 31;
  v282 = v273 - 1;
  *(_DWORD *)(a4 + 28) = v273 - 1;
  if (v273 - 1 < 0)
  {
    v284 = *(_QWORD *)(a4 + 8);
    if ((((_DWORD)v275 - (_DWORD)v85) & ~((uint64_t)(v275 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
      && v284 <= (unint64_t)v85)
    {
      v274 = bswap32(*v85);
    }
    else
    {
      v285 = 0;
      do
      {
        v286 = (unsigned __int8 *)v85 + v285;
        v287 = v274 << 8;
        *v11 = v287;
        v288 = 255;
        if ((unint64_t)v85 + v285 < v275 && (unint64_t)v286 >= v284)
          v288 = *v286;
        v274 = v288 | v287;
        *v11 = v274;
        ++v285;
      }
      while ((_DWORD)v285 != 4);
    }
    v289 = v274 << (1 - v273);
    v290 = v273 + 31;
    *(_DWORD *)(a4 + 28) = v290;
    *(_QWORD *)a4 = ++v85;
    v281 |= v274 >> v290;
    if (v290)
      v283 = v289;
    else
      v283 = 0;
    if (v290)
      v282 = v290;
    else
      v282 = 0;
  }
  else
  {
    v283 = 2 * v274;
  }
  *v11 = v283;
  *(_BYTE *)(a2 + 96) = v281 != 0;
  if (v281)
  {
    if (v282 + 8 * ((int)v275 - (int)v85) <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.headphoneVirtualize.bypass";
      goto LABEL_935;
    }
    v291 = v283 >> 31;
    *(_DWORD *)(a4 + 28) = v282 - 1;
    if (v282 - 1 < 0)
    {
      v292 = *(_QWORD *)(a4 + 8);
      if ((((_DWORD)v275 - (_DWORD)v85) & ~((uint64_t)(v275 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
        && v292 <= (unint64_t)v85)
      {
        v283 = bswap32(*v85);
      }
      else
      {
        v293 = 0;
        do
        {
          v294 = (unsigned __int8 *)v85 + v293;
          v295 = v283 << 8;
          *v11 = v295;
          v296 = 255;
          if ((unint64_t)v85 + v293 < v275 && (unint64_t)v294 >= v292)
            v296 = *v294;
          v283 = v296 | v295;
          *v11 = v283;
          ++v293;
        }
        while ((_DWORD)v293 != 4);
      }
      v297 = v283 << (1 - v282);
      v282 += 31;
      *(_DWORD *)(a4 + 28) = v282;
      *(_QWORD *)a4 = ++v85;
      v291 |= v283 >> v282;
      if (v282)
        v283 = v297;
      else
        v283 = 0;
      if (!v282)
        v282 = 0;
    }
    else
    {
      v283 *= 2;
      --v282;
    }
    *v11 = v283;
    *(_BYTE *)(a2 + 97) = v291 != 0;
    if (v282 + 8 * ((int)v275 - (int)v85) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v627 = "Cannot read blkData.headphoneVirtualize.DRR";
      goto LABEL_935;
    }
    *(_DWORD *)(a4 + 28) = v282 - 32;
    if (v282 - 32 < 0)
    {
      v299 = *(_QWORD *)(a4 + 8);
      if ((((_DWORD)v275 - (_DWORD)v85) & ~((uint64_t)(v275 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
        && v299 <= (unint64_t)v85)
      {
        v300 = bswap32(*v85);
      }
      else
      {
        v301 = 0;
        v300 = v283;
        do
        {
          v302 = (unsigned __int8 *)v85 + v301;
          v303 = v300 << 8;
          *v11 = v303;
          v304 = 255;
          if ((unint64_t)v85 + v301 < v275 && (unint64_t)v302 >= v299)
            v304 = *v302;
          v300 = v304 | v303;
          *v11 = v300;
          ++v301;
        }
        while ((_DWORD)v301 != 4);
      }
      *(_QWORD *)a4 = ++v85;
      v298 = (v300 >> v282) | v283;
      v283 = v300 << -(char)v282;
      if (!v282)
        v283 = 0;
      *(_DWORD *)(a4 + 24) = v283;
      *(_DWORD *)(a4 + 28) = v282;
    }
    else
    {
      v282 -= 32;
      v298 = v283;
    }
    *(_DWORD *)(a2 + 100) = v298;
  }
  if (v257)
  {
    if (v282 + 8 * ((int)v275 - (int)v85) > 3)
    {
      v305 = v283 >> 28;
      *(_DWORD *)(a4 + 28) = v282 - 4;
      if (v282 - 4 < 0)
      {
        v310 = *(_QWORD *)(a4 + 8);
        if ((((_DWORD)v275 - (_DWORD)v85) & ~((uint64_t)(v275 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
          && v310 <= (unint64_t)v85)
        {
          v283 = bswap32(*v85);
        }
        else
        {
          v312 = 0;
          do
          {
            v313 = (unsigned __int8 *)v85 + v312;
            v314 = v283 << 8;
            *v11 = v314;
            v315 = 255;
            if ((unint64_t)v85 + v312 < v275 && (unint64_t)v313 >= v310)
              v315 = *v313;
            v283 = v315 | v314;
            *v11 = v283;
            ++v312;
          }
          while ((_DWORD)v312 != 4);
        }
        v306 = v283 << (4 - v282);
        *(_DWORD *)(a4 + 28) = v282 + 28;
        *(_QWORD *)a4 = v85 + 1;
        v305 |= v283 >> (v282 + 28);
        if (v282 == -28)
          v306 = 0;
      }
      else
      {
        v306 = 16 * v283;
      }
      *v11 = v306;
      *(_BYTE *)(a2 + 106) = v305;
      v316 = v305;
      if ((_BYTE)v305)
      {
        v317 = 0;
        v318 = *(unsigned __int8 *)(a2 + 4);
        while (1)
        {
          v319 = *(_QWORD *)(a4 + 16);
          v320 = *(unsigned int **)a4;
          v321 = v319 - *(_QWORD *)a4;
          v322 = *(_DWORD *)(a4 + 28);
          v323 = v322 + 8 * v321;
          if (v318)
          {
            if (v323 <= 31)
              goto LABEL_888;
            v324 = *(_DWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 28) = v322 - 32;
            if (v322 - 32 < 0)
            {
              v325 = v321 & ~(v321 >> 63) & 0xFFFFFFFC;
              v326 = *(_QWORD *)(a4 + 8);
              if (v325)
                v327 = v326 > (unint64_t)v320;
              else
                v327 = 1;
              if (v327)
              {
                v328 = 0;
                v340 = v324;
                do
                {
                  v329 = (unsigned __int8 *)v320 + v328;
                  v330 = v340 << 8;
                  *v11 = v330;
                  v331 = 255;
                  if ((unint64_t)v320 + v328 < v319 && (unint64_t)v329 >= v326)
                    v331 = *v329;
                  v340 = v331 | v330;
                  *v11 = v340;
                  ++v328;
                }
                while ((_DWORD)v328 != 4);
              }
              else
              {
                v340 = bswap32(*v320);
              }
              *(_QWORD *)a4 = v320 + 1;
              v324 |= v340 >> v322;
              v341 = v340 << -(char)v322;
              if (!v322)
                v341 = 0;
              *(_DWORD *)(a4 + 24) = v341;
              *(_DWORD *)(a4 + 28) = v322;
            }
            v342 = a2 + 24 * v317;
            *(_DWORD *)(v342 + 140) = v324;
            v343 = (_DWORD *)(v342 + 140);
            v344 = *(_QWORD *)(a4 + 16);
            v345 = *(unsigned int **)a4;
            v346 = v344 - *(_QWORD *)a4;
            v347 = *(_DWORD *)(a4 + 28);
            if (v347 + 8 * (int)v346 <= 31)
              goto LABEL_889;
            v348 = *(_DWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 28) = v347 - 32;
            if (v347 - 32 < 0)
            {
              v349 = v346 & ~(v346 >> 63) & 0xFFFFFFFC;
              v350 = *(_QWORD *)(a4 + 8);
              if (v349)
                v351 = v350 > (unint64_t)v345;
              else
                v351 = 1;
              if (v351)
              {
                v352 = 0;
                v356 = v348;
                do
                {
                  v353 = (unsigned __int8 *)v345 + v352;
                  v354 = v356 << 8;
                  *v11 = v354;
                  v355 = 255;
                  if ((unint64_t)v345 + v352 < v344 && (unint64_t)v353 >= v350)
                    v355 = *v353;
                  v356 = v355 | v354;
                  *v11 = v356;
                  ++v352;
                }
                while ((_DWORD)v352 != 4);
              }
              else
              {
                v356 = bswap32(*v345);
              }
              *(_QWORD *)a4 = v345 + 1;
              v348 |= v356 >> v347;
              v357 = v356 << -(char)v347;
              if (!v347)
                v357 = 0;
              *(_DWORD *)(a4 + 24) = v357;
              *(_DWORD *)(a4 + 28) = v347;
            }
            v343[1] = v348;
            v358 = *(_QWORD *)(a4 + 16);
            v359 = *(unsigned int **)a4;
            v360 = v358 - *(_QWORD *)a4;
            v361 = *(_DWORD *)(a4 + 28);
            if (v361 + 8 * (int)v360 <= 31)
              goto LABEL_890;
            v362 = *(_DWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 28) = v361 - 32;
            if (v361 - 32 < 0)
            {
              v363 = v360 & ~(v360 >> 63);
              v364 = *(_QWORD *)(a4 + 8);
              if ((v363 & 0xFFFFFFFC) != 0 && v364 <= (unint64_t)v359)
              {
                v365 = bswap32(*v359);
              }
              else
              {
                v366 = 0;
                v365 = v362;
                do
                {
                  v367 = (unsigned __int8 *)v359 + v366;
                  v368 = v365 << 8;
                  *v11 = v368;
                  v369 = 255;
                  if ((unint64_t)v359 + v366 < v358 && (unint64_t)v367 >= v364)
                    v369 = *v367;
                  v365 = v369 | v368;
                  *v11 = v365;
                  ++v366;
                }
                while ((_DWORD)v366 != 4);
              }
              *(_QWORD *)a4 = v359 + 1;
              v362 |= v365 >> v361;
              v370 = v365 << -(char)v361;
              if (!v361)
                v370 = 0;
              *(_DWORD *)(a4 + 24) = v370;
              *(_DWORD *)(a4 + 28) = v361;
            }
            v343[2] = v362;
            v371 = *(_QWORD *)(a4 + 16);
            v372 = *(unsigned int **)a4;
            v373 = v371 - *(_QWORD *)a4;
            v374 = *(_DWORD *)(a4 + 28);
            if (v374 + 8 * (int)v373 <= 31)
              goto LABEL_891;
            v375 = *(_DWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 28) = v374 - 32;
            if (v374 - 32 < 0)
            {
              v376 = v373 & ~(v373 >> 63);
              v377 = *(_QWORD *)(a4 + 8);
              if ((v376 & 0xFFFFFFFC) != 0 && v377 <= (unint64_t)v372)
              {
                v378 = bswap32(*v372);
              }
              else
              {
                v379 = 0;
                v378 = v375;
                do
                {
                  v380 = (unsigned __int8 *)v372 + v379;
                  v381 = v378 << 8;
                  *v11 = v381;
                  v382 = 255;
                  if ((unint64_t)v372 + v379 < v371 && (unint64_t)v380 >= v377)
                    v382 = *v380;
                  v378 = v382 | v381;
                  *v11 = v378;
                  ++v379;
                }
                while ((_DWORD)v379 != 4);
              }
              *(_QWORD *)a4 = v372 + 1;
              v375 |= v378 >> v374;
              v383 = v378 << -(char)v374;
              if (!v374)
                v383 = 0;
              *(_DWORD *)(a4 + 24) = v383;
              *(_DWORD *)(a4 + 28) = v374;
            }
            v343[3] = v375;
            v384 = *(_QWORD *)(a4 + 16);
            v385 = *(unsigned int **)a4;
            v386 = v384 - *(_QWORD *)a4;
            v387 = *(_DWORD *)(a4 + 28);
            if (v387 + 8 * (int)v386 <= 31)
              goto LABEL_892;
            v388 = *(_DWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 28) = v387 - 32;
            if (v387 - 32 < 0)
            {
              v389 = v386 & ~(v386 >> 63);
              v390 = *(_QWORD *)(a4 + 8);
              if ((v389 & 0xFFFFFFFC) != 0 && v390 <= (unint64_t)v385)
              {
                v391 = bswap32(*v385);
              }
              else
              {
                v392 = 0;
                v391 = v388;
                do
                {
                  v393 = (unsigned __int8 *)v385 + v392;
                  v394 = v391 << 8;
                  *v11 = v394;
                  v395 = 255;
                  if ((unint64_t)v385 + v392 < v384 && (unint64_t)v393 >= v390)
                    v395 = *v393;
                  v391 = v395 | v394;
                  *v11 = v391;
                  ++v392;
                }
                while ((_DWORD)v392 != 4);
              }
              *(_QWORD *)a4 = v385 + 1;
              v388 |= v391 >> v387;
              v396 = v391 << -(char)v387;
              if (!v387)
                v396 = 0;
              *(_DWORD *)(a4 + 24) = v396;
              *(_DWORD *)(a4 + 28) = v387;
            }
            v343[4] = v388;
            v397 = *(_QWORD *)(a4 + 16);
            v398 = *(unsigned int **)a4;
            v399 = v397 - *(_QWORD *)a4;
            v400 = *(_DWORD *)(a4 + 28);
            if (v400 + 8 * (int)v399 <= 31)
              goto LABEL_893;
            v401 = *(_DWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 28) = v400 - 32;
            if (v400 - 32 < 0)
            {
              v402 = v399 & ~(v399 >> 63);
              v403 = *(_QWORD *)(a4 + 8);
              if ((v402 & 0xFFFFFFFC) != 0 && v403 <= (unint64_t)v398)
              {
                v404 = bswap32(*v398);
              }
              else
              {
                v405 = 0;
                v404 = v401;
                do
                {
                  v406 = (unsigned __int8 *)v398 + v405;
                  v407 = v404 << 8;
                  *v11 = v407;
                  v408 = 255;
                  if ((unint64_t)v398 + v405 < v397 && (unint64_t)v406 >= v403)
                    v408 = *v406;
                  v404 = v408 | v407;
                  *v11 = v404;
                  ++v405;
                }
                while ((_DWORD)v405 != 4);
              }
              *(_QWORD *)a4 = v398 + 1;
              v401 |= v404 >> v400;
              v409 = v404 << -(char)v400;
              if (!v400)
                v409 = 0;
              *(_DWORD *)(a4 + 24) = v409;
              *(_DWORD *)(a4 + 28) = v400;
            }
            v343[5] = v401;
          }
          else
          {
            if (v323 <= 31)
              goto LABEL_894;
            v332 = *(_DWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 28) = v322 - 32;
            if (v322 - 32 < 0)
            {
              v333 = v321 & ~(v321 >> 63) & 0xFFFFFFFC;
              v334 = *(_QWORD *)(a4 + 8);
              if (v333)
                v335 = v334 > (unint64_t)v320;
              else
                v335 = 1;
              if (v335)
              {
                v336 = 0;
                v410 = v332;
                do
                {
                  v337 = (unsigned __int8 *)v320 + v336;
                  v338 = v410 << 8;
                  *v11 = v338;
                  v339 = 255;
                  if ((unint64_t)v320 + v336 < v319 && (unint64_t)v337 >= v334)
                    v339 = *v337;
                  v410 = v339 | v338;
                  *v11 = v410;
                  ++v336;
                }
                while ((_DWORD)v336 != 4);
              }
              else
              {
                v410 = bswap32(*v320);
              }
              *(_QWORD *)a4 = v320 + 1;
              v332 |= v410 >> v322;
              v411 = v410 << -(char)v322;
              if (!v322)
                v411 = 0;
              *(_DWORD *)(a4 + 24) = v411;
              *(_DWORD *)(a4 + 28) = v322;
            }
            v412 = a2 + 24 * v317;
            *(_DWORD *)(v412 + 140) = v332;
            v413 = (_DWORD *)(v412 + 140);
            v414 = *(_QWORD *)(a4 + 16);
            v415 = *(unsigned int **)a4;
            v416 = v414 - *(_QWORD *)a4;
            v417 = *(_DWORD *)(a4 + 28);
            if (v417 + 8 * (int)v416 <= 31)
              goto LABEL_895;
            v418 = *(_DWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 28) = v417 - 32;
            if (v417 - 32 < 0)
            {
              v419 = v416 & ~(v416 >> 63) & 0xFFFFFFFC;
              v420 = *(_QWORD *)(a4 + 8);
              if (v419)
                v421 = v420 > (unint64_t)v415;
              else
                v421 = 1;
              if (v421)
              {
                v422 = 0;
                v426 = v418;
                do
                {
                  v423 = (unsigned __int8 *)v415 + v422;
                  v424 = v426 << 8;
                  *v11 = v424;
                  v425 = 255;
                  if ((unint64_t)v415 + v422 < v414 && (unint64_t)v423 >= v420)
                    v425 = *v423;
                  v426 = v425 | v424;
                  *v11 = v426;
                  ++v422;
                }
                while ((_DWORD)v422 != 4);
              }
              else
              {
                v426 = bswap32(*v415);
              }
              *(_QWORD *)a4 = v415 + 1;
              v418 |= v426 >> v417;
              v427 = v426 << -(char)v417;
              if (!v417)
                v427 = 0;
              *(_DWORD *)(a4 + 24) = v427;
              *(_DWORD *)(a4 + 28) = v417;
            }
            v413[1] = v418;
            v428 = *(_QWORD *)(a4 + 16);
            v429 = *(unsigned int **)a4;
            v430 = v428 - *(_QWORD *)a4;
            v431 = *(_DWORD *)(a4 + 28);
            if (v431 + 8 * (int)v430 <= 31)
              goto LABEL_896;
            v432 = *(_DWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 28) = v431 - 32;
            if (v431 - 32 < 0)
            {
              v433 = v430 & ~(v430 >> 63);
              v434 = *(_QWORD *)(a4 + 8);
              if ((v433 & 0xFFFFFFFC) != 0 && v434 <= (unint64_t)v429)
              {
                v435 = bswap32(*v429);
              }
              else
              {
                v436 = 0;
                v435 = v432;
                do
                {
                  v437 = (unsigned __int8 *)v429 + v436;
                  v438 = v435 << 8;
                  *v11 = v438;
                  v439 = 255;
                  if ((unint64_t)v429 + v436 < v428 && (unint64_t)v437 >= v434)
                    v439 = *v437;
                  v435 = v439 | v438;
                  *v11 = v435;
                  ++v436;
                }
                while ((_DWORD)v436 != 4);
              }
              *(_QWORD *)a4 = v429 + 1;
              v432 |= v435 >> v431;
              v440 = v435 << -(char)v431;
              if (!v431)
                v440 = 0;
              *(_DWORD *)(a4 + 24) = v440;
              *(_DWORD *)(a4 + 28) = v431;
            }
            v413[2] = v432;
            v441 = *(_QWORD *)(a4 + 16);
            v442 = *(unsigned int **)a4;
            v443 = v441 - *(_QWORD *)a4;
            v444 = *(_DWORD *)(a4 + 28);
            if (v444 + 8 * (int)v443 <= 31)
              goto LABEL_897;
            v445 = *(_DWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 28) = v444 - 32;
            if (v444 - 32 < 0)
            {
              v446 = v443 & ~(v443 >> 63);
              v447 = *(_QWORD *)(a4 + 8);
              if ((v446 & 0xFFFFFFFC) != 0 && v447 <= (unint64_t)v442)
              {
                v448 = bswap32(*v442);
              }
              else
              {
                v449 = 0;
                v448 = v445;
                do
                {
                  v450 = (unsigned __int8 *)v442 + v449;
                  v451 = v448 << 8;
                  *v11 = v451;
                  v452 = 255;
                  if ((unint64_t)v442 + v449 < v441 && (unint64_t)v450 >= v447)
                    v452 = *v450;
                  v448 = v452 | v451;
                  *v11 = v448;
                  ++v449;
                }
                while ((_DWORD)v449 != 4);
              }
              *(_QWORD *)a4 = v442 + 1;
              v445 |= v448 >> v444;
              v453 = v448 << -(char)v444;
              if (!v444)
                v453 = 0;
              *(_DWORD *)(a4 + 24) = v453;
              *(_DWORD *)(a4 + 28) = v444;
            }
            v413[3] = v445;
          }
          if (++v317 == v316)
            return;
        }
      }
      return;
    }
    goto LABEL_929;
  }
  if (a3 != 1 || HIBYTE(a3) != 2)
    return;
  if (v282 + 8 * ((int)v275 - (int)v85) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.zoneExclusion.isZoneDefined";
    goto LABEL_935;
  }
  v307 = v283 >> 31;
  v308 = v282 - 1;
  *(_DWORD *)(a4 + 28) = v282 - 1;
  if (v282 - 1 < 0)
  {
    v311 = *(_QWORD *)(a4 + 8);
    if ((((_DWORD)v275 - (_DWORD)v85) & ~((uint64_t)(v275 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
      && v311 <= (unint64_t)v85)
    {
      v283 = bswap32(*v85);
    }
    else
    {
      v454 = 0;
      do
      {
        v455 = (unsigned __int8 *)v85 + v454;
        v456 = v283 << 8;
        *v11 = v456;
        v457 = 255;
        if ((unint64_t)v85 + v454 < v275 && (unint64_t)v455 >= v311)
          v457 = *v455;
        v283 = v457 | v456;
        *v11 = v283;
        ++v454;
      }
      while ((_DWORD)v454 != 4);
    }
    v458 = v283 << (1 - v282);
    v459 = v282 + 31;
    *(_DWORD *)(a4 + 28) = v459;
    *(_QWORD *)a4 = ++v85;
    v307 |= v283 >> v459;
    if (v459)
      v309 = v458;
    else
      v309 = 0;
    if (v459)
      v308 = v459;
    else
      v308 = 0;
  }
  else
  {
    v309 = 2 * v283;
  }
  *v11 = v309;
  *(_BYTE *)(a2 + 104) = v307 != 0;
  if (!v307)
    return;
  if (v308 + 8 * ((int)v275 - (int)v85) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.zoneExclusion.keepPreviousZone";
LABEL_935:
    *exception = v627;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v460 = v309 >> 31;
  v461 = v308 - 1;
  *(_DWORD *)(a4 + 28) = v308 - 1;
  if (v308 - 1 < 0)
  {
    v463 = *(_QWORD *)(a4 + 8);
    if ((((_DWORD)v275 - (_DWORD)v85) & ~((uint64_t)(v275 - (_QWORD)v85) >> 63) & 0xFFFFFFFC) != 0
      && v463 <= (unint64_t)v85)
    {
      v309 = bswap32(*v85);
    }
    else
    {
      v464 = 0;
      do
      {
        v465 = (unsigned __int8 *)v85 + v464;
        v466 = v309 << 8;
        *v11 = v466;
        v467 = 255;
        if ((unint64_t)v85 + v464 < v275 && (unint64_t)v465 >= v463)
          v467 = *v465;
        v309 = v467 | v466;
        *v11 = v309;
        ++v464;
      }
      while ((_DWORD)v464 != 4);
    }
    v469 = v308 + 31;
    v468 = v308 == -31;
    *(_DWORD *)(a4 + 28) = v308 + 31;
    *(_QWORD *)a4 = ++v85;
    v460 |= v309 >> (v308 + 31);
    if (v308 == -31)
      v462 = 0;
    else
      v462 = v309 << (1 - v308);
    if (v468)
      v461 = 0;
    else
      v461 = v469;
  }
  else
  {
    v462 = 2 * v309;
  }
  *v11 = v462;
  *(_BYTE *)(a2 + 105) = v460 != 0;
  if (v460)
    return;
  if (v461 + 8 * ((int)v275 - (int)v85) <= 3)
  {
LABEL_929:
    exception = __cxa_allocate_exception(8uLL);
    v627 = "Cannot read blkData.zoneExclusion.numZones";
    goto LABEL_935;
  }
  v470 = v462 >> 28;
  *(_DWORD *)(a4 + 28) = v461 - 4;
  if (v461 - 4 < 0)
  {
    AT::TBitstreamReader<unsigned int>::FillCacheFrom(a4, v85);
    *(_QWORD *)a4 += 4;
    v472 = *(_DWORD *)(a4 + 24);
    v473 = *(_DWORD *)(a4 + 28);
    v470 |= v472 >> v473;
    *(_DWORD *)(a4 + 28) = v473 + 32;
    if (v473 == -32)
      v471 = 0;
    else
      v471 = v472 << -(char)v473;
  }
  else
  {
    v471 = 16 * v462;
  }
  *v11 = v471;
  *(_BYTE *)(a2 + 106) = v470;
  if ((_BYTE)v470)
  {
    v474 = 0;
    v475 = *(unsigned __int8 *)(a2 + 4);
    do
    {
      v476 = *(_QWORD *)(a4 + 16);
      v477 = *(unsigned int **)a4;
      v478 = v476 - *(_QWORD *)a4;
      v479 = *(_DWORD *)(a4 + 28);
      if (v479 + 8 * (int)v478 <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v627 = "Cannot read blkData.zoneExclusion.usePreDefinedZone[w]";
        goto LABEL_935;
      }
      v480 = *(_DWORD *)(a4 + 24);
      v481 = v480 >> 31;
      v482 = v479 - 1;
      *(_DWORD *)(a4 + 28) = v479 - 1;
      if (v479 - 1 < 0)
      {
        v484 = *(_QWORD *)(a4 + 8);
        if ((v478 & ~(v478 >> 63) & 0xFFFFFFFC) == 0 || v484 > (unint64_t)v477)
        {
          v486 = 0;
          do
          {
            v487 = (unsigned __int8 *)v477 + v486;
            v488 = v480 << 8;
            *v11 = v488;
            v489 = 255;
            if ((unint64_t)v477 + v486 < v476 && (unint64_t)v487 >= v484)
              v489 = *v487;
            v480 = v489 | v488;
            *v11 = v480;
            ++v486;
          }
          while ((_DWORD)v486 != 4);
        }
        else
        {
          v480 = bswap32(*v477);
        }
        v491 = v479 + 31;
        v490 = v479 == -31;
        *(_DWORD *)(a4 + 28) = v479 + 31;
        *(_QWORD *)a4 = ++v477;
        v481 |= v480 >> (v479 + 31);
        if (v479 == -31)
          v483 = 0;
        else
          v483 = v480 << (1 - v479);
        if (v490)
          v482 = 0;
        else
          v482 = v491;
      }
      else
      {
        v483 = 2 * v480;
      }
      *v11 = v483;
      *(_BYTE *)(a2 + v474 + 107) = v481 != 0;
      v492 = v476 - (_QWORD)v477;
      v493 = v482 + 8 * (v476 - (_DWORD)v477);
      if (v481)
      {
        if (v493 <= 3)
        {
          exception = __cxa_allocate_exception(8uLL);
          v627 = "Cannot read blkData.zoneExclusion.zoneIndex[w]";
          goto LABEL_935;
        }
        v494 = v483 >> 28;
        *(_DWORD *)(a4 + 28) = v482 - 4;
        if (v482 - 4 < 0)
        {
          v498 = v492 & ~(v492 >> 63);
          v499 = *(_QWORD *)(a4 + 8);
          if ((v498 & 0xFFFFFFFC) != 0 && v499 <= (unint64_t)v477)
          {
            v483 = bswap32(*v477);
          }
          else
          {
            v502 = 0;
            do
            {
              v503 = (unsigned __int8 *)v477 + v502;
              v504 = v483 << 8;
              *v11 = v504;
              v505 = 255;
              if ((unint64_t)v477 + v502 < v476 && (unint64_t)v503 >= v499)
                v505 = *v503;
              v483 = v505 | v504;
              *v11 = v483;
              ++v502;
            }
            while ((_DWORD)v502 != 4);
          }
          v506 = v483 << (4 - v482);
          v507 = v482 + 28;
          *(_DWORD *)(a4 + 28) = v507;
          *(_QWORD *)a4 = v477 + 1;
          v494 |= v483 >> v507;
          if (v507)
            v495 = v506;
          else
            v495 = 0;
        }
        else
        {
          v495 = 16 * v483;
        }
        *v11 = v495;
        *(_BYTE *)(a2 + v474 + 122) = v494;
      }
      else if (v475)
      {
        if (v493 <= 31)
        {
LABEL_888:
          exception = __cxa_allocate_exception(8uLL);
          v627 = "Cannot read blkData.zoneExclusion.zone[w].co_tu.cartesian.minX";
          goto LABEL_935;
        }
        *(_DWORD *)(a4 + 28) = v482 - 32;
        if (v482 - 32 < 0)
        {
          v496 = *(_QWORD *)(a4 + 8);
          if ((v492 & ~(v492 >> 63) & 0xFFFFFFFC) != 0 && v496 <= (unint64_t)v477)
          {
            v497 = bswap32(*v477);
          }
          else
          {
            v508 = 0;
            v497 = v483;
            do
            {
              v509 = (unsigned __int8 *)v477 + v508;
              v510 = v497 << 8;
              *v11 = v510;
              v511 = 255;
              if ((unint64_t)v477 + v508 < v476 && (unint64_t)v509 >= v496)
                v511 = *v509;
              v497 = v511 | v510;
              *v11 = v497;
              ++v508;
            }
            while ((_DWORD)v508 != 4);
          }
          *(_QWORD *)a4 = v477 + 1;
          v483 |= v497 >> v482;
          v512 = v497 << -(char)v482;
          if (!v482)
            v512 = 0;
          *(_DWORD *)(a4 + 24) = v512;
          *(_DWORD *)(a4 + 28) = v482;
        }
        v513 = a2 + 24 * v474;
        *(_DWORD *)(v513 + 140) = v483;
        v514 = (_DWORD *)(v513 + 140);
        v515 = *(_QWORD *)(a4 + 16);
        v516 = *(unsigned int **)a4;
        v517 = v515 - *(_QWORD *)a4;
        v518 = *(_DWORD *)(a4 + 28);
        if (v518 + 8 * (int)v517 <= 31)
        {
LABEL_889:
          exception = __cxa_allocate_exception(8uLL);
          v627 = "Cannot read blkData.zoneExclusion.zone[w].co_tu.cartesian.maxX";
          goto LABEL_935;
        }
        v519 = *(_DWORD *)(a4 + 24);
        *(_DWORD *)(a4 + 28) = v518 - 32;
        if (v518 - 32 < 0)
        {
          v520 = v517 & ~(v517 >> 63);
          v521 = *(_QWORD *)(a4 + 8);
          if ((v520 & 0xFFFFFFFC) != 0 && v521 <= (unint64_t)v516)
          {
            v522 = bswap32(*v516);
          }
          else
          {
            v523 = 0;
            v522 = v519;
            do
            {
              v524 = (unsigned __int8 *)v516 + v523;
              v525 = v522 << 8;
              *v11 = v525;
              v526 = 255;
              if ((unint64_t)v516 + v523 < v515 && (unint64_t)v524 >= v521)
                v526 = *v524;
              v522 = v526 | v525;
              *v11 = v522;
              ++v523;
            }
            while ((_DWORD)v523 != 4);
          }
          *(_QWORD *)a4 = v516 + 1;
          v519 |= v522 >> v518;
          v527 = v522 << -(char)v518;
          if (!v518)
            v527 = 0;
          *(_DWORD *)(a4 + 24) = v527;
          *(_DWORD *)(a4 + 28) = v518;
        }
        v514[1] = v519;
        v528 = *(_QWORD *)(a4 + 16);
        v529 = *(unsigned int **)a4;
        v530 = v528 - *(_QWORD *)a4;
        v531 = *(_DWORD *)(a4 + 28);
        if (v531 + 8 * (int)v530 <= 31)
        {
LABEL_890:
          exception = __cxa_allocate_exception(8uLL);
          v627 = "Cannot read blkData.zoneExclusion.zone[w].co_tu.cartesian.minY";
          goto LABEL_935;
        }
        v532 = *(_DWORD *)(a4 + 24);
        *(_DWORD *)(a4 + 28) = v531 - 32;
        if (v531 - 32 < 0)
        {
          v533 = v530 & ~(v530 >> 63);
          v534 = *(_QWORD *)(a4 + 8);
          if ((v533 & 0xFFFFFFFC) != 0 && v534 <= (unint64_t)v529)
          {
            v535 = bswap32(*v529);
          }
          else
          {
            v536 = 0;
            v535 = v532;
            do
            {
              v537 = (unsigned __int8 *)v529 + v536;
              v538 = v535 << 8;
              *v11 = v538;
              v539 = 255;
              if ((unint64_t)v529 + v536 < v528 && (unint64_t)v537 >= v534)
                v539 = *v537;
              v535 = v539 | v538;
              *v11 = v535;
              ++v536;
            }
            while ((_DWORD)v536 != 4);
          }
          *(_QWORD *)a4 = v529 + 1;
          v532 |= v535 >> v531;
          v540 = v535 << -(char)v531;
          if (!v531)
            v540 = 0;
          *(_DWORD *)(a4 + 24) = v540;
          *(_DWORD *)(a4 + 28) = v531;
        }
        v514[2] = v532;
        v541 = *(_QWORD *)(a4 + 16);
        v542 = *(unsigned int **)a4;
        v543 = v541 - *(_QWORD *)a4;
        v544 = *(_DWORD *)(a4 + 28);
        if (v544 + 8 * (int)v543 <= 31)
        {
LABEL_891:
          exception = __cxa_allocate_exception(8uLL);
          v627 = "Cannot read blkData.zoneExclusion.zone[w].co_tu.cartesian.maxY";
          goto LABEL_935;
        }
        v545 = *(_DWORD *)(a4 + 24);
        *(_DWORD *)(a4 + 28) = v544 - 32;
        if (v544 - 32 < 0)
        {
          v546 = v543 & ~(v543 >> 63);
          v547 = *(_QWORD *)(a4 + 8);
          if ((v546 & 0xFFFFFFFC) != 0 && v547 <= (unint64_t)v542)
          {
            v548 = bswap32(*v542);
          }
          else
          {
            v549 = 0;
            v548 = v545;
            do
            {
              v550 = (unsigned __int8 *)v542 + v549;
              v551 = v548 << 8;
              *v11 = v551;
              v552 = 255;
              if ((unint64_t)v542 + v549 < v541 && (unint64_t)v550 >= v547)
                v552 = *v550;
              v548 = v552 | v551;
              *v11 = v548;
              ++v549;
            }
            while ((_DWORD)v549 != 4);
          }
          *(_QWORD *)a4 = v542 + 1;
          v545 |= v548 >> v544;
          v553 = v548 << -(char)v544;
          if (!v544)
            v553 = 0;
          *(_DWORD *)(a4 + 24) = v553;
          *(_DWORD *)(a4 + 28) = v544;
        }
        v514[3] = v545;
        v554 = *(_QWORD *)(a4 + 16);
        v555 = *(unsigned int **)a4;
        v556 = v554 - *(_QWORD *)a4;
        v557 = *(_DWORD *)(a4 + 28);
        if (v557 + 8 * (int)v556 <= 31)
        {
LABEL_892:
          exception = __cxa_allocate_exception(8uLL);
          v627 = "Cannot read blkData.zoneExclusion.zone[w].co_tu.cartesian.minZ";
          goto LABEL_935;
        }
        v558 = *(_DWORD *)(a4 + 24);
        *(_DWORD *)(a4 + 28) = v557 - 32;
        if (v557 - 32 < 0)
        {
          v559 = v556 & ~(v556 >> 63);
          v560 = *(_QWORD *)(a4 + 8);
          if ((v559 & 0xFFFFFFFC) != 0 && v560 <= (unint64_t)v555)
          {
            v561 = bswap32(*v555);
          }
          else
          {
            v562 = 0;
            v561 = v558;
            do
            {
              v563 = (unsigned __int8 *)v555 + v562;
              v564 = v561 << 8;
              *v11 = v564;
              v565 = 255;
              if ((unint64_t)v555 + v562 < v554 && (unint64_t)v563 >= v560)
                v565 = *v563;
              v561 = v565 | v564;
              *v11 = v561;
              ++v562;
            }
            while ((_DWORD)v562 != 4);
          }
          *(_QWORD *)a4 = v555 + 1;
          v558 |= v561 >> v557;
          v566 = v561 << -(char)v557;
          if (!v557)
            v566 = 0;
          *(_DWORD *)(a4 + 24) = v566;
          *(_DWORD *)(a4 + 28) = v557;
        }
        v514[4] = v558;
        v567 = *(_QWORD *)(a4 + 16);
        v568 = *(unsigned int **)a4;
        v569 = v567 - *(_QWORD *)a4;
        v570 = *(_DWORD *)(a4 + 28);
        if (v570 + 8 * (int)v569 <= 31)
        {
LABEL_893:
          exception = __cxa_allocate_exception(8uLL);
          v627 = "Cannot read blkData.zoneExclusion.zone[w].co_tu.cartesian.maxZ";
          goto LABEL_935;
        }
        v571 = *(_DWORD *)(a4 + 24);
        *(_DWORD *)(a4 + 28) = v570 - 32;
        if (v570 - 32 < 0)
        {
          v572 = v569 & ~(v569 >> 63);
          v573 = *(_QWORD *)(a4 + 8);
          if ((v572 & 0xFFFFFFFC) != 0 && v573 <= (unint64_t)v568)
          {
            v574 = bswap32(*v568);
          }
          else
          {
            v575 = 0;
            v574 = v571;
            do
            {
              v576 = (unsigned __int8 *)v568 + v575;
              v577 = v574 << 8;
              *v11 = v577;
              v578 = 255;
              if ((unint64_t)v568 + v575 < v567 && (unint64_t)v576 >= v573)
                v578 = *v576;
              v574 = v578 | v577;
              *v11 = v574;
              ++v575;
            }
            while ((_DWORD)v575 != 4);
          }
          *(_QWORD *)a4 = v568 + 1;
          v571 |= v574 >> v570;
          v579 = v574 << -(char)v570;
          if (!v570)
            v579 = 0;
          *(_DWORD *)(a4 + 24) = v579;
          *(_DWORD *)(a4 + 28) = v570;
        }
        v514[5] = v571;
      }
      else
      {
        if (v493 <= 31)
        {
LABEL_894:
          exception = __cxa_allocate_exception(8uLL);
          v627 = "Cannot read blkData.zoneExclusion.zone[w].co_tu.spherical.minAzimuth";
          goto LABEL_935;
        }
        *(_DWORD *)(a4 + 28) = v482 - 32;
        if (v482 - 32 < 0)
        {
          v500 = *(_QWORD *)(a4 + 8);
          if ((v492 & ~(v492 >> 63) & 0xFFFFFFFC) != 0 && v500 <= (unint64_t)v477)
          {
            v501 = bswap32(*v477);
          }
          else
          {
            v580 = 0;
            v501 = v483;
            do
            {
              v581 = (unsigned __int8 *)v477 + v580;
              v582 = v501 << 8;
              *v11 = v582;
              v583 = 255;
              if ((unint64_t)v477 + v580 < v476 && (unint64_t)v581 >= v500)
                v583 = *v581;
              v501 = v583 | v582;
              *v11 = v501;
              ++v580;
            }
            while ((_DWORD)v580 != 4);
          }
          *(_QWORD *)a4 = v477 + 1;
          v483 |= v501 >> v482;
          v584 = v501 << -(char)v482;
          if (!v482)
            v584 = 0;
          *(_DWORD *)(a4 + 24) = v584;
          *(_DWORD *)(a4 + 28) = v482;
        }
        v585 = a2 + 24 * v474;
        *(_DWORD *)(v585 + 140) = v483;
        v586 = (_DWORD *)(v585 + 140);
        v587 = *(_QWORD *)(a4 + 16);
        v588 = *(unsigned int **)a4;
        v589 = v587 - *(_QWORD *)a4;
        v590 = *(_DWORD *)(a4 + 28);
        if (v590 + 8 * (int)v589 <= 31)
        {
LABEL_895:
          exception = __cxa_allocate_exception(8uLL);
          v627 = "Cannot read blkData.zoneExclusion.zone[w].co_tu.spherical.maxAzimuth";
          goto LABEL_935;
        }
        v591 = *(_DWORD *)(a4 + 24);
        *(_DWORD *)(a4 + 28) = v590 - 32;
        if (v590 - 32 < 0)
        {
          v592 = v589 & ~(v589 >> 63);
          v593 = *(_QWORD *)(a4 + 8);
          if ((v592 & 0xFFFFFFFC) != 0 && v593 <= (unint64_t)v588)
          {
            v594 = bswap32(*v588);
          }
          else
          {
            v595 = 0;
            v594 = v591;
            do
            {
              v596 = (unsigned __int8 *)v588 + v595;
              v597 = v594 << 8;
              *v11 = v597;
              v598 = 255;
              if ((unint64_t)v588 + v595 < v587 && (unint64_t)v596 >= v593)
                v598 = *v596;
              v594 = v598 | v597;
              *v11 = v594;
              ++v595;
            }
            while ((_DWORD)v595 != 4);
          }
          *(_QWORD *)a4 = v588 + 1;
          v591 |= v594 >> v590;
          v599 = v594 << -(char)v590;
          if (!v590)
            v599 = 0;
          *(_DWORD *)(a4 + 24) = v599;
          *(_DWORD *)(a4 + 28) = v590;
        }
        v586[1] = v591;
        v600 = *(_QWORD *)(a4 + 16);
        v601 = *(unsigned int **)a4;
        v602 = v600 - *(_QWORD *)a4;
        v603 = *(_DWORD *)(a4 + 28);
        if (v603 + 8 * (int)v602 <= 31)
        {
LABEL_896:
          exception = __cxa_allocate_exception(8uLL);
          v627 = "Cannot read blkData.zoneExclusion.zone[w].co_tu.spherical.minElevation";
          goto LABEL_935;
        }
        v604 = *(_DWORD *)(a4 + 24);
        *(_DWORD *)(a4 + 28) = v603 - 32;
        if (v603 - 32 < 0)
        {
          v605 = v602 & ~(v602 >> 63);
          v606 = *(_QWORD *)(a4 + 8);
          if ((v605 & 0xFFFFFFFC) != 0 && v606 <= (unint64_t)v601)
          {
            v607 = bswap32(*v601);
          }
          else
          {
            v608 = 0;
            v607 = v604;
            do
            {
              v609 = (unsigned __int8 *)v601 + v608;
              v610 = v607 << 8;
              *v11 = v610;
              v611 = 255;
              if ((unint64_t)v601 + v608 < v600 && (unint64_t)v609 >= v606)
                v611 = *v609;
              v607 = v611 | v610;
              *v11 = v607;
              ++v608;
            }
            while ((_DWORD)v608 != 4);
          }
          *(_QWORD *)a4 = v601 + 1;
          v604 |= v607 >> v603;
          v612 = v607 << -(char)v603;
          if (!v603)
            v612 = 0;
          *(_DWORD *)(a4 + 24) = v612;
          *(_DWORD *)(a4 + 28) = v603;
        }
        v586[2] = v604;
        v613 = *(_QWORD *)(a4 + 16);
        v614 = *(unsigned int **)a4;
        v615 = v613 - *(_QWORD *)a4;
        v616 = *(_DWORD *)(a4 + 28);
        if (v616 + 8 * (int)v615 <= 31)
        {
LABEL_897:
          exception = __cxa_allocate_exception(8uLL);
          v627 = "Cannot read blkData.zoneExclusion.zone[w].co_tu.spherical.maxElevation";
          goto LABEL_935;
        }
        v617 = *(_DWORD *)(a4 + 24);
        *(_DWORD *)(a4 + 28) = v616 - 32;
        if (v616 - 32 < 0)
        {
          v618 = v615 & ~(v615 >> 63);
          v619 = *(_QWORD *)(a4 + 8);
          if ((v618 & 0xFFFFFFFC) != 0 && v619 <= (unint64_t)v614)
          {
            v620 = bswap32(*v614);
          }
          else
          {
            v621 = 0;
            v620 = v617;
            do
            {
              v622 = (unsigned __int8 *)v614 + v621;
              v623 = v620 << 8;
              *v11 = v623;
              v624 = 255;
              if ((unint64_t)v614 + v621 < v613 && (unint64_t)v622 >= v619)
                v624 = *v622;
              v620 = v624 | v623;
              *v11 = v620;
              ++v621;
            }
            while ((_DWORD)v621 != 4);
          }
          *(_QWORD *)a4 = v614 + 1;
          v617 |= v620 >> v616;
          v625 = v620 << -(char)v616;
          if (!v616)
            v625 = 0;
          *(_DWORD *)(a4 + 24) = v625;
          *(_DWORD *)(a4 + 28) = v616;
        }
        v586[3] = v617;
      }
      ++v474;
    }
    while (v474 != v470);
  }
}

void APAC::MetadataBitStreamParser::parseDynamicGroup(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  int v46;
  BOOL v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  _QWORD *exception;
  const char *v67;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v67 = "Cannot read dG.groupID";
    goto LABEL_115;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 25;
  v9 = v6 - 7;
  *(_DWORD *)(a3 + 28) = v6 - 7;
  if (v6 - 7 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v17 = v7 << (7 - v6);
    v18 = v6 + 25;
    *(_DWORD *)(a3 + 28) = v18;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> v18;
    if (v18)
      v10 = v17;
    else
      v10 = 0;
    if (v18)
      v9 = v18;
    else
      v9 = 0;
  }
  else
  {
    v10 = v7 << 7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *a2 = v8;
  if (v9 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v67 = "Cannot read dG.isGlobal";
    goto LABEL_115;
  }
  v19 = v10 >> 31;
  v20 = v9 - 1;
  *(_DWORD *)(a3 + 28) = v9 - 1;
  if (v9 - 1 < 0)
  {
    v22 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v22 <= (unint64_t)v4)
    {
      v10 = bswap32(*v4);
    }
    else
    {
      v23 = 0;
      do
      {
        v24 = (unsigned __int8 *)v4 + v23;
        v25 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v25;
        v26 = 255;
        if ((unint64_t)v4 + v23 < v3 && (unint64_t)v24 >= v22)
          v26 = *v24;
        v10 = v26 | v25;
        *(_DWORD *)(a3 + 24) = v10;
        ++v23;
      }
      while ((_DWORD)v23 != 4);
    }
    v27 = v10 << (1 - v9);
    v28 = v9 + 31;
    *(_DWORD *)(a3 + 28) = v28;
    *(_QWORD *)a3 = ++v4;
    v19 |= v10 >> v28;
    if (v28)
      v21 = v27;
    else
      v21 = 0;
    if (v28)
      v20 = v28;
    else
      v20 = 0;
  }
  else
  {
    v21 = 2 * v10;
  }
  *(_DWORD *)(a3 + 24) = v21;
  a2[1] = v19 != 0;
  if (!v19)
  {
    if (v20 + 8 * ((int)v3 - (int)v4) <= 6)
    {
      exception = __cxa_allocate_exception(8uLL);
      v67 = "Cannot read dG.memberCount";
    }
    else
    {
      v29 = v21 >> 25;
      v30 = v20 - 7;
      *(_DWORD *)(a3 + 28) = v20 - 7;
      if (v20 - 7 < 0)
      {
        v32 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v32 <= (unint64_t)v4)
        {
          v21 = bswap32(*v4);
        }
        else
        {
          v33 = 0;
          do
          {
            v34 = (unsigned __int8 *)v4 + v33;
            v35 = v21 << 8;
            *(_DWORD *)(a3 + 24) = v35;
            v36 = 255;
            if ((unint64_t)v4 + v33 < v3 && (unint64_t)v34 >= v32)
              v36 = *v34;
            v21 = v36 | v35;
            *(_DWORD *)(a3 + 24) = v21;
            ++v33;
          }
          while ((_DWORD)v33 != 4);
        }
        v37 = v21 << (7 - v20);
        v38 = v20 + 25;
        *(_DWORD *)(a3 + 28) = v38;
        *(_QWORD *)a3 = ++v4;
        v29 |= v21 >> v38;
        if (v38)
          v31 = v37;
        else
          v31 = 0;
        if (v38)
          v30 = v38;
        else
          v30 = 0;
      }
      else
      {
        v31 = v21 << 7;
      }
      *(_DWORD *)(a3 + 24) = v31;
      a2[2] = v29;
      if (v30 + 8 * ((int)v3 - (int)v4) <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v67 = "Cannot read dG.hasConjunctMembers";
      }
      else
      {
        v39 = v31 >> 31;
        v40 = v30 - 1;
        *(_DWORD *)(a3 + 28) = v30 - 1;
        if (v30 - 1 < 0)
        {
          v42 = *(_QWORD *)(a3 + 8);
          if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
            && v42 <= (unint64_t)v4)
          {
            v31 = bswap32(*v4);
          }
          else
          {
            v43 = 0;
            do
            {
              v44 = (unsigned __int8 *)v4 + v43;
              v45 = v31 << 8;
              *(_DWORD *)(a3 + 24) = v45;
              v46 = 255;
              if ((unint64_t)v4 + v43 < v3 && (unint64_t)v44 >= v42)
                v46 = *v44;
              v31 = v46 | v45;
              *(_DWORD *)(a3 + 24) = v31;
              ++v43;
            }
            while ((_DWORD)v43 != 4);
          }
          v48 = v30 + 31;
          v47 = v30 == -31;
          *(_DWORD *)(a3 + 28) = v30 + 31;
          *(_QWORD *)a3 = ++v4;
          v39 |= v31 >> (v30 + 31);
          if (v30 == -31)
            v41 = 0;
          else
            v41 = v31 << (1 - v30);
          if (v47)
            v40 = 0;
          else
            v40 = v48;
        }
        else
        {
          v41 = 2 * v31;
        }
        *(_DWORD *)(a3 + 24) = v41;
        a2[3] = v39 != 0;
        if (v39)
        {
          if (v40 + 8 * ((int)v3 - (int)v4) > 6)
          {
            v49 = v41 >> 25;
            *(_DWORD *)(a3 + 28) = v40 - 7;
            if (v40 - 7 < 0)
            {
              v59 = *(_QWORD *)(a3 + 8);
              if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
                && v59 <= (unint64_t)v4)
              {
                v41 = bswap32(*v4);
              }
              else
              {
                v60 = 0;
                do
                {
                  v61 = (unsigned __int8 *)v4 + v60;
                  v62 = v41 << 8;
                  *(_DWORD *)(a3 + 24) = v62;
                  v63 = 255;
                  if ((unint64_t)v4 + v60 < v3 && (unint64_t)v61 >= v59)
                    v63 = *v61;
                  v41 = v63 | v62;
                  *(_DWORD *)(a3 + 24) = v41;
                  ++v60;
                }
                while ((_DWORD)v60 != 4);
              }
              v64 = v41 << (7 - v40);
              v65 = v40 + 25;
              *(_DWORD *)(a3 + 28) = v65;
              *(_QWORD *)a3 = v4 + 1;
              v49 |= v41 >> v65;
              if (v65)
                v50 = v64;
              else
                v50 = 0;
            }
            else
            {
              v50 = v41 << 7;
            }
            *(_DWORD *)(a3 + 24) = v50;
            a2[4] = v49;
            return;
          }
          exception = __cxa_allocate_exception(8uLL);
          v67 = "Cannot read dG.startASCID";
        }
        else
        {
          if (!(_BYTE)v29)
            return;
          v51 = 0;
          v52 = *(_QWORD *)(a3 + 8);
          while (v40 + 8 * ((int)v3 - (int)v4) > 6)
          {
            v53 = v41 >> 25;
            *(_DWORD *)(a3 + 28) = v40 - 7;
            if (v40 - 7 < 0)
            {
              if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
                && v52 <= (unint64_t)v4)
              {
                v41 = bswap32(*v4);
              }
              else
              {
                v54 = 0;
                do
                {
                  v55 = (unsigned __int8 *)v4 + v54;
                  v56 = v41 << 8;
                  *(_DWORD *)(a3 + 24) = v56;
                  v57 = 255;
                  if ((unint64_t)v4 + v54 < v3 && (unint64_t)v55 >= v52)
                    v57 = *v55;
                  v41 = v57 | v56;
                  *(_DWORD *)(a3 + 24) = v41;
                  ++v54;
                }
                while ((_DWORD)v54 != 4);
              }
              v58 = v41 << (7 - v40);
              v40 += 25;
              *(_DWORD *)(a3 + 28) = v40;
              *(_QWORD *)a3 = ++v4;
              v53 |= v41 >> v40;
              if (v40)
                v41 = v58;
              else
                v41 = 0;
              if (!v40)
                v40 = 0;
            }
            else
            {
              v41 <<= 7;
              v40 -= 7;
            }
            *(_DWORD *)(a3 + 24) = v41;
            a2[v51++ + 5] = v53;
            if (v51 == v29)
              return;
          }
          exception = __cxa_allocate_exception(8uLL);
          v67 = "Cannot read dG.ASCIDList[n]";
        }
      }
    }
LABEL_115:
    *exception = v67;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

void APAC::MetadataBitStreamParser::parseReferenceScreen(uint64_t a1, BOOL *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *exception;
  const char *v33;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v33 = "Cannot read refScreen.hasData";
    goto LABEL_41;
  }
  v9 = *(_DWORD *)(a3 + 24);
  v10 = v9 >> 31;
  v11 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v13 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v13 > (unint64_t)v4)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v4 + v15;
        v17 = v9 << 8;
        *(_DWORD *)(a3 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v4 + v15 < v3 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v9 = v18 | v17;
        *(_DWORD *)(a3 + 24) = v9;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v9 = bswap32(*v4);
    }
    v20 = v6 + 31;
    v19 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v10 |= v9 >> (v6 + 31);
    if (v6 == -31)
      v12 = 0;
    else
      v12 = v9 << (1 - v6);
    if (v19)
      v11 = 0;
    else
      v11 = v20;
  }
  else
  {
    v12 = 2 * v9;
  }
  *(_DWORD *)(a3 + 24) = v12;
  *a2 = v10 != 0;
  if (v10)
  {
    if (v11 + 8 * ((int)v3 - (int)v4) > 3)
    {
      v21 = v12 >> 28;
      *(_DWORD *)(a3 + 28) = v11 - 4;
      if (v11 - 4 < 0)
      {
        v23 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v23 <= (unint64_t)v4)
        {
          v12 = bswap32(*v4);
        }
        else
        {
          v24 = 0;
          do
          {
            v25 = (unsigned __int8 *)v4 + v24;
            v26 = v12 << 8;
            *(_DWORD *)(a3 + 24) = v26;
            v27 = 255;
            if ((unint64_t)v4 + v24 < v3 && (unint64_t)v25 >= v23)
              v27 = *v25;
            v12 = v27 | v26;
            *(_DWORD *)(a3 + 24) = v12;
            ++v24;
          }
          while ((_DWORD)v24 != 4);
        }
        v28 = v12 << (4 - v11);
        v29 = v11 + 28;
        *(_DWORD *)(a3 + 28) = v29;
        *(_QWORD *)a3 = v4 + 1;
        v21 |= v12 >> v29;
        if (v29)
          v22 = v28;
        else
          v22 = 0;
      }
      else
      {
        v22 = 16 * v12;
      }
      *(_DWORD *)(a3 + 24) = v22;
      a2[1] = v21;
      if ((_BYTE)v21)
      {
        v30 = 0;
        v31 = (uint64_t)(a2 + 4);
        do
        {
          APAC::MetadataBitStreamParser::parseScreenData(a1, v31, a3);
          ++v30;
          v31 += 28;
        }
        while (v30 < a2[1]);
      }
      return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v33 = "Cannot read refScreen.APCount";
LABEL_41:
    *exception = v33;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

void APAC::MetadataBitStreamParser::parseCodeBookData(uint64_t a1, BOOL *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  _QWORD *exception;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Cannot read cbD.hasData";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v10 = v5 & ~(v5 >> 63) & 0xFFFFFFFC;
    v11 = *(_QWORD *)(a3 + 8);
    if (v10)
      v12 = v11 > (unint64_t)v4;
    else
      v12 = 1;
    if (v12)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v17 = v7 << (1 - v6);
    v18 = v6 + 31;
    *(_DWORD *)(a3 + 28) = v18;
    *(_QWORD *)a3 = v4 + 1;
    v8 |= v7 >> v18;
    if (v18)
      v9 = v17;
    else
      v9 = 0;
  }
  else
  {
    v9 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v9;
  *a2 = v8 != 0;
}

void APAC::MetadataBitStreamParser::parseGroupStaticData(uint64_t a1, BOOL *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  _BYTE *v31;
  _QWORD *exception;
  const char *v33;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v33 = "Cannot read grpSD.hasData";
    goto LABEL_41;
  }
  v9 = *(_DWORD *)(a3 + 24);
  v10 = v9 >> 31;
  v11 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v13 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v13 > (unint64_t)v4)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v4 + v15;
        v17 = v9 << 8;
        *(_DWORD *)(a3 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v4 + v15 < v3 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v9 = v18 | v17;
        *(_DWORD *)(a3 + 24) = v9;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v9 = bswap32(*v4);
    }
    v20 = v6 + 31;
    v19 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v10 |= v9 >> (v6 + 31);
    if (v6 == -31)
      v12 = 0;
    else
      v12 = v9 << (1 - v6);
    if (v19)
      v11 = 0;
    else
      v11 = v20;
  }
  else
  {
    v12 = 2 * v9;
  }
  *(_DWORD *)(a3 + 24) = v12;
  *a2 = v10 != 0;
  if (v10)
  {
    if (v11 + 8 * ((int)v3 - (int)v4) > 6)
    {
      v21 = v12 >> 25;
      *(_DWORD *)(a3 + 28) = v11 - 7;
      if (v11 - 7 < 0)
      {
        v23 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v23 <= (unint64_t)v4)
        {
          v12 = bswap32(*v4);
        }
        else
        {
          v24 = 0;
          do
          {
            v25 = (unsigned __int8 *)v4 + v24;
            v26 = v12 << 8;
            *(_DWORD *)(a3 + 24) = v26;
            v27 = 255;
            if ((unint64_t)v4 + v24 < v3 && (unint64_t)v25 >= v23)
              v27 = *v25;
            v12 = v27 | v26;
            *(_DWORD *)(a3 + 24) = v12;
            ++v24;
          }
          while ((_DWORD)v24 != 4);
        }
        v28 = v12 << (7 - v11);
        v29 = v11 + 25;
        *(_DWORD *)(a3 + 28) = v29;
        *(_QWORD *)a3 = v4 + 1;
        v21 |= v12 >> v29;
        if (v29)
          v22 = v28;
        else
          v22 = 0;
      }
      else
      {
        v22 = v12 << 7;
      }
      *(_DWORD *)(a3 + 24) = v22;
      a2[1] = v21;
      if ((_BYTE)v21)
      {
        v30 = 0;
        v31 = a2 + 4;
        do
        {
          APAC::MetadataBitStreamParser::parseStaticGroup(a1, v31, a3);
          ++v30;
          v31 += 216;
        }
        while (v30 < a2[1]);
      }
      return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v33 = "Cannot read grpSD.groupCount";
LABEL_41:
    *exception = v33;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

void APAC::MetadataBitStreamParser::parseSceneComponenentStaticData(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *exception;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Cannot read scSD.ASCCount";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v9 = *(_DWORD *)(a3 + 24);
  v10 = v9 >> 25;
  *(_DWORD *)(a3 + 28) = v6 - 7;
  if (v6 - 7 < 0)
  {
    v12 = v5 & ~(v5 >> 63) & 0xFFFFFFFC;
    v13 = *(_QWORD *)(a3 + 8);
    if (v12)
      v14 = v13 > (unint64_t)v4;
    else
      v14 = 1;
    if (v14)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v4 + v15;
        v17 = v9 << 8;
        *(_DWORD *)(a3 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v4 + v15 < v3 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v9 = v18 | v17;
        *(_DWORD *)(a3 + 24) = v9;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v9 = bswap32(*v4);
    }
    v19 = v9 << (7 - v6);
    v20 = v6 + 25;
    *(_DWORD *)(a3 + 28) = v20;
    *(_QWORD *)a3 = v4 + 1;
    v10 |= v9 >> v20;
    if (v20)
      v11 = v19;
    else
      v11 = 0;
  }
  else
  {
    v11 = v9 << 7;
  }
  *(_DWORD *)(a3 + 24) = v11;
  *a2 = v10;
  if ((_BYTE)v10)
  {
    v21 = 0;
    v22 = (uint64_t)(a2 + 4);
    do
    {
      APAC::MetadataBitStreamParser::parseASCStaticData(a1, v22, a3);
      ++v21;
      v22 += 1144;
    }
    while (v21 < *a2);
  }
}

void APAC::MetadataBitStreamParser::parseASCStaticData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned int v57;
  int v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  unsigned int v106;
  int v107;
  BOOL v108;
  int v109;
  int v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *exception;
  const char *v129;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v129 = "Cannot read sD.sceneComponentID";
    goto LABEL_213;
  }
  v9 = *(_DWORD *)(a3 + 24);
  v10 = v9 >> 25;
  v11 = v6 - 7;
  *(_DWORD *)(a3 + 28) = v6 - 7;
  if (v6 - 7 < 0)
  {
    v13 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v13 > (unint64_t)v4)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v4 + v15;
        v17 = v9 << 8;
        *(_DWORD *)(a3 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v4 + v15 < v3 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v9 = v18 | v17;
        *(_DWORD *)(a3 + 24) = v9;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v9 = bswap32(*v4);
    }
    v19 = v9 << (7 - v6);
    v20 = v6 + 25;
    *(_DWORD *)(a3 + 28) = v20;
    *(_QWORD *)a3 = ++v4;
    v10 |= v9 >> v20;
    if (v20)
      v12 = v19;
    else
      v12 = 0;
    if (v20)
      v11 = v20;
    else
      v11 = 0;
  }
  else
  {
    v12 = v9 << 7;
  }
  *(_DWORD *)(a3 + 24) = v12;
  *(_BYTE *)a2 = v10;
  if (v11 + 8 * ((int)v3 - (int)v4) <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v129 = "Cannot read sD.sceneComponentType";
    goto LABEL_213;
  }
  v21 = v12 >> 30;
  v22 = v11 - 2;
  *(_DWORD *)(a3 + 28) = v11 - 2;
  if (v11 - 2 < 0)
  {
    v24 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v24 <= (unint64_t)v4)
    {
      v12 = bswap32(*v4);
    }
    else
    {
      v25 = 0;
      do
      {
        v26 = (unsigned __int8 *)v4 + v25;
        v27 = v12 << 8;
        *(_DWORD *)(a3 + 24) = v27;
        v28 = 255;
        if ((unint64_t)v4 + v25 < v3 && (unint64_t)v26 >= v24)
          v28 = *v26;
        v12 = v28 | v27;
        *(_DWORD *)(a3 + 24) = v12;
        ++v25;
      }
      while ((_DWORD)v25 != 4);
    }
    v29 = v12 << (2 - v11);
    v30 = v11 + 30;
    *(_DWORD *)(a3 + 28) = v30;
    *(_QWORD *)a3 = ++v4;
    v21 |= v12 >> v30;
    if (v30)
      v23 = v29;
    else
      v23 = 0;
    if (v30)
      v22 = v30;
    else
      v22 = 0;
  }
  else
  {
    v23 = 4 * v12;
  }
  *(_DWORD *)(a3 + 24) = v23;
  *(_BYTE *)(a2 + 1) = v21;
  if (v22 + 8 * ((int)v3 - (int)v4) <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v129 = "Cannot read sD.startChannelIndex";
    goto LABEL_213;
  }
  v31 = v23 >> 25;
  v32 = v22 - 7;
  *(_DWORD *)(a3 + 28) = v22 - 7;
  if (v22 - 7 < 0)
  {
    v34 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v34 <= (unint64_t)v4)
    {
      v23 = bswap32(*v4);
    }
    else
    {
      v35 = 0;
      do
      {
        v36 = (unsigned __int8 *)v4 + v35;
        v37 = v23 << 8;
        *(_DWORD *)(a3 + 24) = v37;
        v38 = 255;
        if ((unint64_t)v4 + v35 < v3 && (unint64_t)v36 >= v34)
          v38 = *v36;
        v23 = v38 | v37;
        *(_DWORD *)(a3 + 24) = v23;
        ++v35;
      }
      while ((_DWORD)v35 != 4);
    }
    v39 = v23 << (7 - v22);
    v40 = v22 + 25;
    *(_DWORD *)(a3 + 28) = v40;
    *(_QWORD *)a3 = ++v4;
    v31 |= v23 >> v40;
    if (v40)
      v33 = v39;
    else
      v33 = 0;
    if (v40)
      v32 = v40;
    else
      v32 = 0;
  }
  else
  {
    v33 = v23 << 7;
  }
  *(_DWORD *)(a3 + 24) = v33;
  *(_BYTE *)(a2 + 2) = v31;
  if (v32 + 8 * ((int)v3 - (int)v4) <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v129 = "Cannot read sD.rendererSubType";
    goto LABEL_213;
  }
  v41 = v33 >> 29;
  v42 = v32 - 3;
  *(_DWORD *)(a3 + 28) = v32 - 3;
  if (v32 - 3 < 0)
  {
    v44 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v44 <= (unint64_t)v4)
    {
      v33 = bswap32(*v4);
    }
    else
    {
      v45 = 0;
      do
      {
        v46 = (unsigned __int8 *)v4 + v45;
        v47 = v33 << 8;
        *(_DWORD *)(a3 + 24) = v47;
        v48 = 255;
        if ((unint64_t)v4 + v45 < v3 && (unint64_t)v46 >= v44)
          v48 = *v46;
        v33 = v48 | v47;
        *(_DWORD *)(a3 + 24) = v33;
        ++v45;
      }
      while ((_DWORD)v45 != 4);
    }
    v49 = v33 << (3 - v32);
    v50 = v32 + 29;
    *(_DWORD *)(a3 + 28) = v50;
    *(_QWORD *)a3 = ++v4;
    v41 |= v33 >> v50;
    if (v50)
      v43 = v49;
    else
      v43 = 0;
    if (v50)
      v42 = v50;
    else
      v42 = 0;
  }
  else
  {
    v43 = 8 * v33;
  }
  *(_DWORD *)(a3 + 24) = v43;
  *(_BYTE *)(a2 + 3) = v41;
  if (v42 + 8 * ((int)v3 - (int)v4) <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v129 = "Cannot read sD.rendererVersion";
    goto LABEL_213;
  }
  v51 = HIBYTE(v43);
  v52 = v42 - 8;
  *(_DWORD *)(a3 + 28) = v42 - 8;
  if (v42 - 8 < 0)
  {
    v54 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v54 <= (unint64_t)v4)
    {
      v43 = bswap32(*v4);
    }
    else
    {
      v55 = 0;
      do
      {
        v56 = (unsigned __int8 *)v4 + v55;
        v57 = v43 << 8;
        *(_DWORD *)(a3 + 24) = v57;
        v58 = 255;
        if ((unint64_t)v4 + v55 < v3 && (unint64_t)v56 >= v54)
          v58 = *v56;
        v43 = v58 | v57;
        *(_DWORD *)(a3 + 24) = v43;
        ++v55;
      }
      while ((_DWORD)v55 != 4);
    }
    v60 = v42 + 24;
    v59 = v42 == -24;
    *(_DWORD *)(a3 + 28) = v42 + 24;
    *(_QWORD *)a3 = ++v4;
    v51 |= v43 >> (v42 + 24);
    if (v42 == -24)
      v53 = 0;
    else
      v53 = v43 << (8 - v42);
    if (v59)
      v52 = 0;
    else
      v52 = v60;
  }
  else
  {
    v53 = v43 << 8;
  }
  *(_DWORD *)(a3 + 24) = v53;
  *(_BYTE *)(a2 + 4) = v51;
  v61 = v3 - (_QWORD)v4;
  if (v52 + 8 * ((int)v3 - (int)v4) <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v129 = "Cannot read sD.channelLayoutTag";
    goto LABEL_213;
  }
  *(_DWORD *)(a3 + 28) = v52 - 32;
  if (v52 - 32 < 0)
  {
    v64 = *(_QWORD *)(a3 + 8);
    if ((v61 & ~(v61 >> 63) & 0xFFFFFFFC) != 0 && v64 <= (unint64_t)v4)
    {
      v65 = bswap32(*v4);
    }
    else
    {
      v66 = 0;
      v65 = v53;
      do
      {
        v67 = (unsigned __int8 *)v4 + v66;
        v68 = v65 << 8;
        *(_DWORD *)(a3 + 24) = v68;
        v69 = 255;
        if ((unint64_t)v4 + v66 < v3 && (unint64_t)v67 >= v64)
          v69 = *v67;
        v65 = v69 | v68;
        *(_DWORD *)(a3 + 24) = v65;
        ++v66;
      }
      while ((_DWORD)v66 != 4);
    }
    *(_QWORD *)a3 = ++v4;
    v63 = (v65 >> v52) | v53;
    v53 = v65 << -(char)v52;
    if (!v52)
      v53 = 0;
    *(_DWORD *)(a3 + 24) = v53;
    *(_DWORD *)(a3 + 28) = v52;
    v61 = v3 - (_QWORD)v4;
    v62 = 8 * (v3 - (_DWORD)v4);
  }
  else
  {
    v62 = 8 * v61;
    v52 -= 32;
    v63 = v53;
  }
  *(_DWORD *)(a2 + 8) = v63;
  if (v62 + v52 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v129 = "Cannot read sD.HOAOrder";
    goto LABEL_213;
  }
  v70 = v53 >> 29;
  v71 = v52 - 3;
  *(_DWORD *)(a3 + 28) = v52 - 3;
  if (v52 - 3 < 0)
  {
    v73 = *(_QWORD *)(a3 + 8);
    if ((v61 & ~(v61 >> 63) & 0xFFFFFFFC) != 0 && v73 <= (unint64_t)v4)
    {
      v53 = bswap32(*v4);
    }
    else
    {
      v74 = 0;
      do
      {
        v75 = (unsigned __int8 *)v4 + v74;
        v76 = v53 << 8;
        *(_DWORD *)(a3 + 24) = v76;
        v77 = 255;
        if ((unint64_t)v4 + v74 < v3 && (unint64_t)v75 >= v73)
          v77 = *v75;
        v53 = v77 | v76;
        *(_DWORD *)(a3 + 24) = v53;
        ++v74;
      }
      while ((_DWORD)v74 != 4);
    }
    v78 = v53 << (3 - v52);
    v79 = v52 + 29;
    *(_DWORD *)(a3 + 28) = v79;
    *(_QWORD *)a3 = ++v4;
    v70 |= v53 >> v79;
    if (v79)
      v72 = v78;
    else
      v72 = 0;
    if (v79)
      v71 = v79;
    else
      v71 = 0;
  }
  else
  {
    v72 = 8 * v53;
  }
  *(_DWORD *)(a3 + 24) = v72;
  *(_BYTE *)(a2 + 12) = v70;
  if (v71 + 8 * ((int)v3 - (int)v4) <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v129 = "Cannot read sD.HOAOrdering";
    goto LABEL_213;
  }
  v80 = v72 >> 30;
  v81 = v71 - 2;
  *(_DWORD *)(a3 + 28) = v71 - 2;
  if (v71 - 2 < 0)
  {
    v83 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v83 <= (unint64_t)v4)
    {
      v72 = bswap32(*v4);
    }
    else
    {
      v84 = 0;
      do
      {
        v85 = (unsigned __int8 *)v4 + v84;
        v86 = v72 << 8;
        *(_DWORD *)(a3 + 24) = v86;
        v87 = 255;
        if ((unint64_t)v4 + v84 < v3 && (unint64_t)v85 >= v83)
          v87 = *v85;
        v72 = v87 | v86;
        *(_DWORD *)(a3 + 24) = v72;
        ++v84;
      }
      while ((_DWORD)v84 != 4);
    }
    v88 = v72 << (2 - v71);
    v89 = v71 + 30;
    *(_DWORD *)(a3 + 28) = v89;
    *(_QWORD *)a3 = ++v4;
    v80 |= v72 >> v89;
    if (v89)
      v82 = v88;
    else
      v82 = 0;
    if (v89)
      v81 = v89;
    else
      v81 = 0;
  }
  else
  {
    v82 = 4 * v72;
  }
  *(_DWORD *)(a3 + 24) = v82;
  *(_BYTE *)(a2 + 13) = v80;
  if (v81 + 8 * ((int)v3 - (int)v4) <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v129 = "Cannot read sD.HOANormalization";
    goto LABEL_213;
  }
  v90 = v82 >> 30;
  v91 = v81 - 2;
  *(_DWORD *)(a3 + 28) = v81 - 2;
  if (v81 - 2 < 0)
  {
    v93 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v93 <= (unint64_t)v4)
    {
      v82 = bswap32(*v4);
    }
    else
    {
      v94 = 0;
      do
      {
        v95 = (unsigned __int8 *)v4 + v94;
        v96 = v82 << 8;
        *(_DWORD *)(a3 + 24) = v96;
        v97 = 255;
        if ((unint64_t)v4 + v94 < v3 && (unint64_t)v95 >= v93)
          v97 = *v95;
        v82 = v97 | v96;
        *(_DWORD *)(a3 + 24) = v82;
        ++v94;
      }
      while ((_DWORD)v94 != 4);
    }
    v98 = v82 << (2 - v81);
    v99 = v81 + 30;
    *(_DWORD *)(a3 + 28) = v99;
    *(_QWORD *)a3 = ++v4;
    v90 |= v82 >> v99;
    if (v99)
      v92 = v98;
    else
      v92 = 0;
    if (v99)
      v91 = v99;
    else
      v91 = 0;
  }
  else
  {
    v92 = 4 * v82;
  }
  *(_DWORD *)(a3 + 24) = v92;
  *(_BYTE *)(a2 + 14) = v90;
  if (v91 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v129 = "Cannot read sD.NFCRefDist.hasData";
    goto LABEL_213;
  }
  v100 = v92 >> 31;
  v101 = v91 - 1;
  *(_DWORD *)(a3 + 28) = v91 - 1;
  if (v91 - 1 < 0)
  {
    v103 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v103 <= (unint64_t)v4)
    {
      v92 = bswap32(*v4);
    }
    else
    {
      v104 = 0;
      do
      {
        v105 = (unsigned __int8 *)v4 + v104;
        v106 = v92 << 8;
        *(_DWORD *)(a3 + 24) = v106;
        v107 = 255;
        if ((unint64_t)v4 + v104 < v3 && (unint64_t)v105 >= v103)
          v107 = *v105;
        v92 = v107 | v106;
        *(_DWORD *)(a3 + 24) = v92;
        ++v104;
      }
      while ((_DWORD)v104 != 4);
    }
    v109 = v91 + 31;
    v108 = v91 == -31;
    *(_DWORD *)(a3 + 28) = v91 + 31;
    *(_QWORD *)a3 = ++v4;
    v100 |= v92 >> (v91 + 31);
    if (v91 == -31)
      v102 = 0;
    else
      v102 = v92 << (1 - v91);
    if (v108)
      v101 = 0;
    else
      v101 = v109;
  }
  else
  {
    v102 = 2 * v92;
  }
  *(_DWORD *)(a3 + 24) = v102;
  *(_BYTE *)(a2 + 16) = v100 != 0;
  if (v100)
  {
    if (v101 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v129 = "Cannot read sD.NFCRefDist.nfcRefDist";
LABEL_213:
      *exception = v129;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    *(_DWORD *)(a3 + 28) = v101 - 32;
    if (v101 - 32 < 0)
    {
      v111 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v111 <= (unint64_t)v4)
      {
        v112 = bswap32(*v4);
      }
      else
      {
        v113 = 0;
        v112 = v102;
        do
        {
          v114 = (unsigned __int8 *)v4 + v113;
          v115 = v112 << 8;
          *(_DWORD *)(a3 + 24) = v115;
          v116 = 255;
          if ((unint64_t)v4 + v113 < v3 && (unint64_t)v114 >= v111)
            v116 = *v114;
          v112 = v116 | v115;
          *(_DWORD *)(a3 + 24) = v112;
          ++v113;
        }
        while ((_DWORD)v113 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v110 = (v112 >> v101) | v102;
      v102 = v112 << -(char)v101;
      if (!v101)
        v102 = 0;
      *(_DWORD *)(a3 + 24) = v102;
      *(_DWORD *)(a3 + 28) = v101;
    }
    else
    {
      v101 -= 32;
      v110 = v102;
    }
    *(_DWORD *)(a2 + 20) = v110;
  }
  if (v101 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v129 = "Cannot read sD.screenRef";
    goto LABEL_213;
  }
  v117 = v102 >> 31;
  *(_DWORD *)(a3 + 28) = v101 - 1;
  if (v101 - 1 < 0)
  {
    v119 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v119 <= (unint64_t)v4)
    {
      v102 = bswap32(*v4);
    }
    else
    {
      v120 = 0;
      do
      {
        v121 = (unsigned __int8 *)v4 + v120;
        v122 = v102 << 8;
        *(_DWORD *)(a3 + 24) = v122;
        v123 = 255;
        if ((unint64_t)v4 + v120 < v3 && (unint64_t)v121 >= v119)
          v123 = *v121;
        v102 = v123 | v122;
        *(_DWORD *)(a3 + 24) = v102;
        ++v120;
      }
      while ((_DWORD)v120 != 4);
    }
    v124 = v102 << (1 - v101);
    v125 = v101 + 31;
    *(_DWORD *)(a3 + 28) = v125;
    *(_QWORD *)a3 = v4 + 1;
    v117 |= v102 >> v125;
    if (v125)
      v118 = v124;
    else
      v118 = 0;
  }
  else
  {
    v118 = 2 * v102;
  }
  *(_DWORD *)(a3 + 24) = v118;
  *(_BYTE *)(a2 + 24) = v117 != 0;
  APAC::MetadataBitStreamParser::parseProprietaryStaticData(a1, a2 + 28, a3);
  APAC::MetadataBitStreamParser::parseDolbyStaticData(v126, (BOOL *)(a2 + 112), a3);
  APAC::MetadataBitStreamParser::parseExtendedData(v127, a2 + 114, a3);
}

void APAC::MetadataBitStreamParser::parseProprietaryStaticData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  BOOL v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned int v100;
  int v101;
  int v102;
  int v103;
  unint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  int v109;
  int v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  _QWORD *exception;
  const char *v119;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v119 = "Cannot read pSD.hasData";
    goto LABEL_180;
  }
  v9 = *(_DWORD *)(a3 + 24);
  v10 = v9 >> 31;
  v11 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v13 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v13 > (unint64_t)v4)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v4 + v15;
        v17 = v9 << 8;
        *(_DWORD *)(a3 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v4 + v15 < v3 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v9 = v18 | v17;
        *(_DWORD *)(a3 + 24) = v9;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v9 = bswap32(*v4);
    }
    v20 = v6 + 31;
    v19 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v10 |= v9 >> (v6 + 31);
    if (v6 == -31)
      v12 = 0;
    else
      v12 = v9 << (1 - v6);
    if (v19)
      v11 = 0;
    else
      v11 = v20;
  }
  else
  {
    v12 = 2 * v9;
  }
  *(_DWORD *)(a3 + 24) = v12;
  *(_BYTE *)a2 = v10 != 0;
  if (!v10)
    return;
  if (v11 + 8 * ((int)v3 - (int)v4) <= 4)
  {
    exception = __cxa_allocate_exception(8uLL);
    v119 = "Cannot read pSD.numParameters";
LABEL_180:
    *exception = v119;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v21 = v12 >> 27;
  *(_DWORD *)(a3 + 28) = v11 - 5;
  if (v11 - 5 < 0)
  {
    v23 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v23 <= (unint64_t)v4)
    {
      v12 = bswap32(*v4);
    }
    else
    {
      v24 = 0;
      do
      {
        v25 = (unsigned __int8 *)v4 + v24;
        v26 = v12 << 8;
        *(_DWORD *)(a3 + 24) = v26;
        v27 = 255;
        if ((unint64_t)v4 + v24 < v3 && (unint64_t)v25 >= v23)
          v27 = *v25;
        v12 = v27 | v26;
        *(_DWORD *)(a3 + 24) = v12;
        ++v24;
      }
      while ((_DWORD)v24 != 4);
    }
    v28 = v12 << (5 - v11);
    v29 = v11 + 27;
    *(_DWORD *)(a3 + 28) = v29;
    *(_QWORD *)a3 = v4 + 1;
    v21 |= v12 >> v29;
    if (v29)
      v22 = v28;
    else
      v22 = 0;
  }
  else
  {
    v22 = 32 * v12;
  }
  *(_DWORD *)(a3 + 24) = v22;
  *(_BYTE *)(a2 + 1) = v21;
  if ((_BYTE)v21)
  {
    v30 = 0;
    while (1)
    {
      v31 = *(_QWORD *)(a3 + 16);
      v32 = *(unsigned int **)a3;
      v33 = v31 - *(_QWORD *)a3;
      v34 = *(_DWORD *)(a3 + 28);
      if (v34 + 8 * (int)v33 <= 4)
      {
        exception = __cxa_allocate_exception(8uLL);
        v119 = "Cannot read pSD.paramIndexList[n]";
        goto LABEL_180;
      }
      v35 = *(_DWORD *)(a3 + 24);
      v36 = v35 >> 27;
      v37 = v34 - 5;
      *(_DWORD *)(a3 + 28) = v34 - 5;
      if (v34 - 5 < 0)
      {
        v39 = *(_QWORD *)(a3 + 8);
        if ((v33 & ~(v33 >> 63) & 0xFFFFFFFC) == 0 || v39 > (unint64_t)v32)
        {
          v41 = 0;
          do
          {
            v42 = (unsigned __int8 *)v32 + v41;
            v43 = v35 << 8;
            *(_DWORD *)(a3 + 24) = v43;
            v44 = 255;
            if ((unint64_t)v32 + v41 < v31 && (unint64_t)v42 >= v39)
              v44 = *v42;
            v35 = v44 | v43;
            *(_DWORD *)(a3 + 24) = v35;
            ++v41;
          }
          while ((_DWORD)v41 != 4);
        }
        else
        {
          v35 = bswap32(*v32);
        }
        v46 = v34 + 27;
        v45 = v34 == -27;
        *(_DWORD *)(a3 + 28) = v34 + 27;
        *(_QWORD *)a3 = ++v32;
        v36 |= v35 >> (v34 + 27);
        if (v34 == -27)
          v38 = 0;
        else
          v38 = v35 << (5 - v34);
        if (v45)
          v37 = 0;
        else
          v37 = v46;
      }
      else
      {
        v38 = 32 * v35;
      }
      *(_DWORD *)(a3 + 24) = v38;
      *(_BYTE *)(a2 + v30 + 52) = v36;
      switch((char)v36)
      {
        case 0:
          if (v37 + 8 * ((int)v31 - (int)v32) <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v119 = "Cannot read pSD.isComplexSH";
            goto LABEL_180;
          }
          v47 = v38 >> 31;
          *(_DWORD *)(a3 + 28) = v37 - 1;
          if (v37 - 1 < 0)
          {
            v60 = *(_QWORD *)(a3 + 8);
            if ((((_DWORD)v31 - (_DWORD)v32) & ~((uint64_t)(v31 - (_QWORD)v32) >> 63) & 0xFFFFFFFC) != 0
              && v60 <= (unint64_t)v32)
            {
              v38 = bswap32(*v32);
            }
            else
            {
              v68 = 0;
              do
              {
                v69 = (unsigned __int8 *)v32 + v68;
                v70 = v38 << 8;
                *(_DWORD *)(a3 + 24) = v70;
                v71 = 255;
                if ((unint64_t)v32 + v68 < v31 && (unint64_t)v69 >= v60)
                  v71 = *v69;
                v38 = v71 | v70;
                *(_DWORD *)(a3 + 24) = v38;
                ++v68;
              }
              while ((_DWORD)v68 != 4);
            }
            v72 = v38 << (1 - v37);
            v73 = v37 + 31;
            *(_DWORD *)(a3 + 28) = v73;
            *(_QWORD *)a3 = v32 + 1;
            v47 |= v38 >> v73;
            if (v73)
              v48 = v72;
            else
              v48 = 0;
          }
          else
          {
            v48 = 2 * v38;
          }
          *(_DWORD *)(a3 + 24) = v48;
          *(_BYTE *)(a2 + 2) = v47 != 0;
          goto LABEL_177;
        case 1:
          if (v37 + 8 * ((int)v31 - (int)v32) <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v119 = "Cannot read pSD.isCSPhase";
            goto LABEL_180;
          }
          v49 = v38 >> 31;
          *(_DWORD *)(a3 + 28) = v37 - 1;
          if (v37 - 1 < 0)
          {
            v61 = *(_QWORD *)(a3 + 8);
            if ((((_DWORD)v31 - (_DWORD)v32) & ~((uint64_t)(v31 - (_QWORD)v32) >> 63) & 0xFFFFFFFC) != 0
              && v61 <= (unint64_t)v32)
            {
              v38 = bswap32(*v32);
            }
            else
            {
              v74 = 0;
              do
              {
                v75 = (unsigned __int8 *)v32 + v74;
                v76 = v38 << 8;
                *(_DWORD *)(a3 + 24) = v76;
                v77 = 255;
                if ((unint64_t)v32 + v74 < v31 && (unint64_t)v75 >= v61)
                  v77 = *v75;
                v38 = v77 | v76;
                *(_DWORD *)(a3 + 24) = v38;
                ++v74;
              }
              while ((_DWORD)v74 != 4);
            }
            v78 = v38 << (1 - v37);
            v79 = v37 + 31;
            *(_DWORD *)(a3 + 28) = v79;
            *(_QWORD *)a3 = v32 + 1;
            v49 |= v38 >> v79;
            if (v79)
              v50 = v78;
            else
              v50 = 0;
          }
          else
          {
            v50 = 2 * v38;
          }
          *(_DWORD *)(a3 + 24) = v50;
          *(_BYTE *)(a2 + 3) = v49 != 0;
          goto LABEL_177;
        case 2:
          if (v37 + 8 * ((int)v31 - (int)v32) <= 1)
          {
            exception = __cxa_allocate_exception(8uLL);
            v119 = "Cannot read pSD.productionCoordinate";
            goto LABEL_180;
          }
          v51 = v38 >> 30;
          *(_DWORD *)(a3 + 28) = v37 - 2;
          if (v37 - 2 < 0)
          {
            v62 = *(_QWORD *)(a3 + 8);
            if ((((_DWORD)v31 - (_DWORD)v32) & ~((uint64_t)(v31 - (_QWORD)v32) >> 63) & 0xFFFFFFFC) != 0
              && v62 <= (unint64_t)v32)
            {
              v38 = bswap32(*v32);
            }
            else
            {
              v80 = 0;
              do
              {
                v81 = (unsigned __int8 *)v32 + v80;
                v82 = v38 << 8;
                *(_DWORD *)(a3 + 24) = v82;
                v83 = 255;
                if ((unint64_t)v32 + v80 < v31 && (unint64_t)v81 >= v62)
                  v83 = *v81;
                v38 = v83 | v82;
                *(_DWORD *)(a3 + 24) = v38;
                ++v80;
              }
              while ((_DWORD)v80 != 4);
            }
            v84 = v38 << (2 - v37);
            v85 = v37 + 30;
            *(_DWORD *)(a3 + 28) = v85;
            *(_QWORD *)a3 = v32 + 1;
            v51 |= v38 >> v85;
            if (v85)
              v52 = v84;
            else
              v52 = 0;
          }
          else
          {
            v52 = 4 * v38;
          }
          *(_DWORD *)(a3 + 24) = v52;
          *(_BYTE *)(a2 + 4) = v51;
          goto LABEL_177;
        case 3:
          APAC::MetadataBitStreamParser::parseSceneReverb(a1, a2 + 6, a3);
          goto LABEL_177;
        case 4:
          if (v37 + 8 * ((int)v31 - (int)v32) <= 1)
          {
            exception = __cxa_allocate_exception(8uLL);
            v119 = "Cannot read pSD.postProcReverbIndex";
            goto LABEL_180;
          }
          v53 = v38 >> 30;
          *(_DWORD *)(a3 + 28) = v37 - 2;
          if (v37 - 2 < 0)
          {
            v63 = *(_QWORD *)(a3 + 8);
            if ((((_DWORD)v31 - (_DWORD)v32) & ~((uint64_t)(v31 - (_QWORD)v32) >> 63) & 0xFFFFFFFC) != 0
              && v63 <= (unint64_t)v32)
            {
              v38 = bswap32(*v32);
            }
            else
            {
              v86 = 0;
              do
              {
                v87 = (unsigned __int8 *)v32 + v86;
                v88 = v38 << 8;
                *(_DWORD *)(a3 + 24) = v88;
                v89 = 255;
                if ((unint64_t)v32 + v86 < v31 && (unint64_t)v87 >= v63)
                  v89 = *v87;
                v38 = v89 | v88;
                *(_DWORD *)(a3 + 24) = v38;
                ++v86;
              }
              while ((_DWORD)v86 != 4);
            }
            v90 = v38 << (2 - v37);
            v91 = v37 + 30;
            *(_DWORD *)(a3 + 28) = v91;
            *(_QWORD *)a3 = v32 + 1;
            v53 |= v38 >> v91;
            if (v91)
              v54 = v90;
            else
              v54 = 0;
          }
          else
          {
            v54 = 4 * v38;
          }
          *(_DWORD *)(a3 + 24) = v54;
          *(_BYTE *)(a2 + 14) = v53;
          goto LABEL_177;
        case 5:
          APAC::MetadataBitStreamParser::parseRadiationPattern(a1, a2 + 16, a3);
          goto LABEL_177;
        case 6:
          APAC::MetadataBitStreamParser::parseBinauralization(a1, a2 + 24, a3);
          goto LABEL_177;
        case 7:
          if (v37 + 8 * ((int)v31 - (int)v32) <= 3)
          {
            exception = __cxa_allocate_exception(8uLL);
            v119 = "Cannot read pSD.HCFilterCodeBookID";
            goto LABEL_180;
          }
          v55 = v38 >> 28;
          *(_DWORD *)(a3 + 28) = v37 - 4;
          if (v37 - 4 < 0)
          {
            v64 = *(_QWORD *)(a3 + 8);
            if ((((_DWORD)v31 - (_DWORD)v32) & ~((uint64_t)(v31 - (_QWORD)v32) >> 63) & 0xFFFFFFFC) != 0
              && v64 <= (unint64_t)v32)
            {
              v38 = bswap32(*v32);
            }
            else
            {
              v92 = 0;
              do
              {
                v93 = (unsigned __int8 *)v32 + v92;
                v94 = v38 << 8;
                *(_DWORD *)(a3 + 24) = v94;
                v95 = 255;
                if ((unint64_t)v32 + v92 < v31 && (unint64_t)v93 >= v64)
                  v95 = *v93;
                v38 = v95 | v94;
                *(_DWORD *)(a3 + 24) = v38;
                ++v92;
              }
              while ((_DWORD)v92 != 4);
            }
            v96 = v38 << (4 - v37);
            v97 = v37 + 28;
            *(_DWORD *)(a3 + 28) = v97;
            *(_QWORD *)a3 = v32 + 1;
            v55 |= v38 >> v97;
            if (v97)
              v56 = v96;
            else
              v56 = 0;
          }
          else
          {
            v56 = 16 * v38;
          }
          *(_DWORD *)(a3 + 24) = v56;
          *(_BYTE *)(a2 + 36) = v55;
          goto LABEL_177;
        case 8:
          v57 = v31 - (_QWORD)v32;
          if (v37 + 8 * ((int)v31 - (int)v32) <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v119 = "Cannot read pSD.hoaRotation.pitch";
            goto LABEL_180;
          }
          *(_DWORD *)(a3 + 28) = v37 - 32;
          if (v37 - 32 < 0)
          {
            v65 = v57 & ~(v57 >> 63);
            v66 = *(_QWORD *)(a3 + 8);
            if ((v65 & 0xFFFFFFFC) != 0 && v66 <= (unint64_t)v32)
            {
              v67 = bswap32(*v32);
            }
            else
            {
              v98 = 0;
              v67 = v38;
              do
              {
                v99 = (unsigned __int8 *)v32 + v98;
                v100 = v67 << 8;
                *(_DWORD *)(a3 + 24) = v100;
                v101 = 255;
                if ((unint64_t)v32 + v98 < v31 && (unint64_t)v99 >= v66)
                  v101 = *v99;
                v67 = v101 | v100;
                *(_DWORD *)(a3 + 24) = v67;
                ++v98;
              }
              while ((_DWORD)v98 != 4);
            }
            *(_QWORD *)a3 = ++v32;
            v59 = (v67 >> v37) | v38;
            v38 = v67 << -(char)v37;
            if (!v37)
              v38 = 0;
            *(_DWORD *)(a3 + 24) = v38;
            *(_DWORD *)(a3 + 28) = v37;
            v57 = v31 - (_QWORD)v32;
            v58 = 8 * (v31 - (_DWORD)v32);
          }
          else
          {
            v58 = 8 * v57;
            v37 -= 32;
            v59 = v38;
          }
          *(_DWORD *)(a2 + 40) = v59;
          if (v58 + v37 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v119 = "Cannot read pSD.hoaRotation.yaw";
            goto LABEL_180;
          }
          *(_DWORD *)(a3 + 28) = v37 - 32;
          if (v37 - 32 < 0)
          {
            v103 = v57 & ~(v57 >> 63);
            v104 = *(_QWORD *)(a3 + 8);
            if ((v103 & 0xFFFFFFFC) != 0 && v104 <= (unint64_t)v32)
            {
              v105 = bswap32(*v32);
            }
            else
            {
              v106 = 0;
              v105 = v38;
              do
              {
                v107 = (unsigned __int8 *)v32 + v106;
                v108 = v105 << 8;
                *(_DWORD *)(a3 + 24) = v108;
                v109 = 255;
                if ((unint64_t)v32 + v106 < v31 && (unint64_t)v107 >= v104)
                  v109 = *v107;
                v105 = v109 | v108;
                *(_DWORD *)(a3 + 24) = v105;
                ++v106;
              }
              while ((_DWORD)v106 != 4);
            }
            *(_QWORD *)a3 = ++v32;
            v102 = (v105 >> v37) | v38;
            v38 = v105 << -(char)v37;
            if (!v37)
              v38 = 0;
            *(_DWORD *)(a3 + 24) = v38;
            *(_DWORD *)(a3 + 28) = v37;
            v57 = v31 - (_QWORD)v32;
            v58 = 8 * (v31 - (_DWORD)v32);
          }
          else
          {
            v37 -= 32;
            v102 = v38;
          }
          *(_DWORD *)(a2 + 44) = v102;
          if (v58 + v37 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v119 = "Cannot read pSD.hoaRotation.roll";
            goto LABEL_180;
          }
          *(_DWORD *)(a3 + 28) = v37 - 32;
          if (v37 - 32 < 0)
          {
            v110 = v57 & ~(v57 >> 63);
            v111 = *(_QWORD *)(a3 + 8);
            if ((v110 & 0xFFFFFFFC) != 0 && v111 <= (unint64_t)v32)
            {
              v112 = bswap32(*v32);
            }
            else
            {
              v113 = 0;
              v112 = v38;
              do
              {
                v114 = (unsigned __int8 *)v32 + v113;
                v115 = v112 << 8;
                *(_DWORD *)(a3 + 24) = v115;
                v116 = 255;
                if ((unint64_t)v32 + v113 < v31 && (unint64_t)v114 >= v111)
                  v116 = *v114;
                v112 = v116 | v115;
                *(_DWORD *)(a3 + 24) = v112;
                ++v113;
              }
              while ((_DWORD)v113 != 4);
            }
            *(_QWORD *)a3 = v32 + 1;
            v38 |= v112 >> v37;
            v117 = v112 << -(char)v37;
            if (!v37)
              v117 = 0;
            *(_DWORD *)(a3 + 24) = v117;
            *(_DWORD *)(a3 + 28) = v37;
          }
          *(_DWORD *)(a2 + 48) = v38;
LABEL_177:
          if (++v30 >= (unint64_t)*(unsigned __int8 *)(a2 + 1))
            return;
          break;
        default:
          goto LABEL_177;
      }
    }
  }
}

void APAC::MetadataBitStreamParser::parseDolbyStaticData(uint64_t a1, BOOL *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  _QWORD *exception;
  const char *v29;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v29 = "Cannot read pDolby.hasData";
    goto LABEL_39;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v6 + 31;
    v17 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> (v6 + 31);
    if (v6 == -31)
      v10 = 0;
    else
      v10 = v7 << (1 - v6);
    if (v17)
      v9 = 0;
    else
      v9 = v18;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *a2 = v8 != 0;
  if (v8)
  {
    if (v9 + 8 * ((int)v3 - (int)v4) > 1)
    {
      v19 = v10 >> 30;
      *(_DWORD *)(a3 + 28) = v9 - 2;
      if (v9 - 2 < 0)
      {
        v21 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v21 <= (unint64_t)v4)
        {
          v10 = bswap32(*v4);
        }
        else
        {
          v22 = 0;
          do
          {
            v23 = (unsigned __int8 *)v4 + v22;
            v24 = v10 << 8;
            *(_DWORD *)(a3 + 24) = v24;
            v25 = 255;
            if ((unint64_t)v4 + v22 < v3 && (unint64_t)v23 >= v21)
              v25 = *v23;
            v10 = v25 | v24;
            *(_DWORD *)(a3 + 24) = v10;
            ++v22;
          }
          while ((_DWORD)v22 != 4);
        }
        v26 = v10 << (2 - v9);
        v27 = v9 + 30;
        *(_DWORD *)(a3 + 28) = v27;
        *(_QWORD *)a3 = v4 + 1;
        v19 |= v10 >> v27;
        if (v27)
          v20 = v26;
        else
          v20 = 0;
      }
      else
      {
        v20 = 4 * v10;
      }
      *(_DWORD *)(a3 + 24) = v20;
      a2[1] = v19;
      return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v29 = "Cannot read pDolby.headphoneRenderingData";
LABEL_39:
    *exception = v29;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

void APAC::MetadataBitStreamParser::parseRadiationPattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  _QWORD *exception;
  const char *v39;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v39 = "Cannot read rP.isPHASE";
    goto LABEL_58;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v17 = v7 << (1 - v6);
    v18 = v6 + 31;
    *(_DWORD *)(a3 + 28) = v18;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> v18;
    if (v18)
      v10 = v17;
    else
      v10 = 0;
    if (v18)
      v9 = v18;
    else
      v9 = 0;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8 != 0;
  if (!v8)
  {
    if (v9 + 8 * ((int)v3 - (int)v4) <= 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      v39 = "Cannot read rP.AuSMProcIndex";
      goto LABEL_58;
    }
    v19 = v10 >> 29;
    v20 = v9 - 3;
    *(_DWORD *)(a3 + 28) = v9 - 3;
    if (v9 - 3 < 0)
    {
      v22 = *(_QWORD *)(a3 + 8);
      if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
        && v22 <= (unint64_t)v4)
      {
        v10 = bswap32(*v4);
      }
      else
      {
        v23 = 0;
        do
        {
          v24 = (unsigned __int8 *)v4 + v23;
          v25 = v10 << 8;
          *(_DWORD *)(a3 + 24) = v25;
          v26 = 255;
          if ((unint64_t)v4 + v23 < v3 && (unint64_t)v24 >= v22)
            v26 = *v24;
          v10 = v26 | v25;
          *(_DWORD *)(a3 + 24) = v10;
          ++v23;
        }
        while ((_DWORD)v23 != 4);
      }
      v27 = v10 << (3 - v9);
      v28 = v9 + 29;
      *(_DWORD *)(a3 + 28) = v28;
      *(_QWORD *)a3 = ++v4;
      v19 |= v10 >> v28;
      if (v28)
        v21 = v27;
      else
        v21 = 0;
      if (v28)
        v20 = v28;
      else
        v20 = 0;
    }
    else
    {
      v21 = 8 * v10;
    }
    *(_DWORD *)(a3 + 24) = v21;
    *(_BYTE *)(a2 + 1) = v19;
    if (v19 == 1)
    {
      if (v20 + 8 * ((int)v3 - (int)v4) > 9)
      {
        v29 = v21 >> 22;
        *(_DWORD *)(a3 + 28) = v20 - 10;
        if (v20 - 10 < 0)
        {
          v31 = *(_QWORD *)(a3 + 8);
          if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
            && v31 <= (unint64_t)v4)
          {
            v21 = bswap32(*v4);
          }
          else
          {
            v32 = 0;
            do
            {
              v33 = (unsigned __int8 *)v4 + v32;
              v34 = v21 << 8;
              *(_DWORD *)(a3 + 24) = v34;
              v35 = 255;
              if ((unint64_t)v4 + v32 < v3 && (unint64_t)v33 >= v31)
                v35 = *v33;
              v21 = v35 | v34;
              *(_DWORD *)(a3 + 24) = v21;
              ++v32;
            }
            while ((_DWORD)v32 != 4);
          }
          v36 = v21 << (10 - v20);
          v37 = v20 + 22;
          *(_DWORD *)(a3 + 28) = v37;
          *(_QWORD *)a3 = v4 + 1;
          v29 |= v21 >> v37;
          if (v37)
            v30 = v36;
          else
            v30 = 0;
        }
        else
        {
          v30 = v21 << 10;
        }
        *(_DWORD *)(a3 + 24) = v30;
        *(_WORD *)(a2 + 2) = v29;
        return;
      }
      exception = __cxa_allocate_exception(8uLL);
      v39 = "Cannot read rP.sourceType";
LABEL_58:
      *exception = v39;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
  }
}

void APAC::MetadataBitStreamParser::parseStaticGroup(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  int v46;
  BOOL v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  _QWORD *exception;
  const char *v67;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v67 = "Cannot read sG.groupID";
    goto LABEL_115;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 25;
  v9 = v6 - 7;
  *(_DWORD *)(a3 + 28) = v6 - 7;
  if (v6 - 7 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v17 = v7 << (7 - v6);
    v18 = v6 + 25;
    *(_DWORD *)(a3 + 28) = v18;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> v18;
    if (v18)
      v10 = v17;
    else
      v10 = 0;
    if (v18)
      v9 = v18;
    else
      v9 = 0;
  }
  else
  {
    v10 = v7 << 7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *a2 = v8;
  if (v9 + 8 * ((int)v3 - (int)v4) <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v67 = "Cannot read sG.isGlobal";
    goto LABEL_115;
  }
  v19 = v10 >> 31;
  v20 = v9 - 1;
  *(_DWORD *)(a3 + 28) = v9 - 1;
  if (v9 - 1 < 0)
  {
    v22 = *(_QWORD *)(a3 + 8);
    if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
      && v22 <= (unint64_t)v4)
    {
      v10 = bswap32(*v4);
    }
    else
    {
      v23 = 0;
      do
      {
        v24 = (unsigned __int8 *)v4 + v23;
        v25 = v10 << 8;
        *(_DWORD *)(a3 + 24) = v25;
        v26 = 255;
        if ((unint64_t)v4 + v23 < v3 && (unint64_t)v24 >= v22)
          v26 = *v24;
        v10 = v26 | v25;
        *(_DWORD *)(a3 + 24) = v10;
        ++v23;
      }
      while ((_DWORD)v23 != 4);
    }
    v27 = v10 << (1 - v9);
    v28 = v9 + 31;
    *(_DWORD *)(a3 + 28) = v28;
    *(_QWORD *)a3 = ++v4;
    v19 |= v10 >> v28;
    if (v28)
      v21 = v27;
    else
      v21 = 0;
    if (v28)
      v20 = v28;
    else
      v20 = 0;
  }
  else
  {
    v21 = 2 * v10;
  }
  *(_DWORD *)(a3 + 24) = v21;
  a2[1] = v19 != 0;
  if (!v19)
  {
    if (v20 + 8 * ((int)v3 - (int)v4) <= 6)
    {
      exception = __cxa_allocate_exception(8uLL);
      v67 = "Cannot read sG.memberCount";
    }
    else
    {
      v29 = v21 >> 25;
      v30 = v20 - 7;
      *(_DWORD *)(a3 + 28) = v20 - 7;
      if (v20 - 7 < 0)
      {
        v32 = *(_QWORD *)(a3 + 8);
        if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
          && v32 <= (unint64_t)v4)
        {
          v21 = bswap32(*v4);
        }
        else
        {
          v33 = 0;
          do
          {
            v34 = (unsigned __int8 *)v4 + v33;
            v35 = v21 << 8;
            *(_DWORD *)(a3 + 24) = v35;
            v36 = 255;
            if ((unint64_t)v4 + v33 < v3 && (unint64_t)v34 >= v32)
              v36 = *v34;
            v21 = v36 | v35;
            *(_DWORD *)(a3 + 24) = v21;
            ++v33;
          }
          while ((_DWORD)v33 != 4);
        }
        v37 = v21 << (7 - v20);
        v38 = v20 + 25;
        *(_DWORD *)(a3 + 28) = v38;
        *(_QWORD *)a3 = ++v4;
        v29 |= v21 >> v38;
        if (v38)
          v31 = v37;
        else
          v31 = 0;
        if (v38)
          v30 = v38;
        else
          v30 = 0;
      }
      else
      {
        v31 = v21 << 7;
      }
      *(_DWORD *)(a3 + 24) = v31;
      a2[2] = v29;
      if (v30 + 8 * ((int)v3 - (int)v4) <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v67 = "Cannot read sG.hasConjunctMembers";
      }
      else
      {
        v39 = v31 >> 31;
        v40 = v30 - 1;
        *(_DWORD *)(a3 + 28) = v30 - 1;
        if (v30 - 1 < 0)
        {
          v42 = *(_QWORD *)(a3 + 8);
          if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
            && v42 <= (unint64_t)v4)
          {
            v31 = bswap32(*v4);
          }
          else
          {
            v43 = 0;
            do
            {
              v44 = (unsigned __int8 *)v4 + v43;
              v45 = v31 << 8;
              *(_DWORD *)(a3 + 24) = v45;
              v46 = 255;
              if ((unint64_t)v4 + v43 < v3 && (unint64_t)v44 >= v42)
                v46 = *v44;
              v31 = v46 | v45;
              *(_DWORD *)(a3 + 24) = v31;
              ++v43;
            }
            while ((_DWORD)v43 != 4);
          }
          v48 = v30 + 31;
          v47 = v30 == -31;
          *(_DWORD *)(a3 + 28) = v30 + 31;
          *(_QWORD *)a3 = ++v4;
          v39 |= v31 >> (v30 + 31);
          if (v30 == -31)
            v41 = 0;
          else
            v41 = v31 << (1 - v30);
          if (v47)
            v40 = 0;
          else
            v40 = v48;
        }
        else
        {
          v41 = 2 * v31;
        }
        *(_DWORD *)(a3 + 24) = v41;
        a2[3] = v39 != 0;
        if (v39)
        {
          if (v40 + 8 * ((int)v3 - (int)v4) > 6)
          {
            v49 = v41 >> 25;
            *(_DWORD *)(a3 + 28) = v40 - 7;
            if (v40 - 7 < 0)
            {
              v59 = *(_QWORD *)(a3 + 8);
              if ((((_DWORD)v3 - (_DWORD)v4) & ~((uint64_t)(v3 - (_QWORD)v4) >> 63) & 0xFFFFFFFC) != 0
                && v59 <= (unint64_t)v4)
              {
                v41 = bswap32(*v4);
              }
              else
              {
                v60 = 0;
                do
                {
                  v61 = (unsigned __int8 *)v4 + v60;
                  v62 = v41 << 8;
                  *(_DWORD *)(a3 + 24) = v62;
                  v63 = 255;
                  if ((unint64_t)v4 + v60 < v3 && (unint64_t)v61 >= v59)
                    v63 = *v61;
                  v41 = v63 | v62;
                  *(_DWORD *)(a3 + 24) = v41;
                  ++v60;
                }
                while ((_DWORD)v60 != 4);
              }
              v64 = v41 << (7 - v40);
              v65 = v40 + 25;
              *(_DWORD *)(a3 + 28) = v65;
              *(_QWORD *)a3 = v4 + 1;
              v49 |= v41 >> v65;
              if (v65)
                v50 = v64;
              else
                v50 = 0;
            }
            else
            {
              v50 = v41 << 7;
            }
            *(_DWORD *)(a3 + 24) = v50;
            a2[4] = v49;
            goto LABEL_108;
          }
          exception = __cxa_allocate_exception(8uLL);
          v67 = "Cannot read sG.startASCID";
        }
        else
        {
          if (!(_BYTE)v29)
            goto LABEL_108;
          v51 = 0;
          v52 = *(_QWORD *)(a3 + 8);
          while (1)
          {
            v53 = v3 - (_QWORD)v4;
            if (v40 + 8 * ((int)v3 - (int)v4) <= 6)
              break;
            v54 = v41 >> 25;
            a1 = (v40 - 7);
            *(_DWORD *)(a3 + 28) = a1;
            if (v40 - 7 < 0)
            {
              a1 = v53 >> 63;
              if ((v53 & ~(v53 >> 63) & 0xFFFFFFFC) != 0 && v52 <= (unint64_t)v4)
              {
                v41 = bswap32(*v4);
              }
              else
              {
                v55 = 0;
                do
                {
                  v56 = (unsigned __int8 *)v4 + v55;
                  v57 = v41 << 8;
                  *(_DWORD *)(a3 + 24) = v57;
                  a1 = 255;
                  if ((unint64_t)v4 + v55 < v3 && (unint64_t)v56 >= v52)
                    a1 = *v56;
                  v41 = a1 | v57;
                  *(_DWORD *)(a3 + 24) = v41;
                  ++v55;
                }
                while ((_DWORD)v55 != 4);
              }
              v58 = v41 << (7 - v40);
              v40 += 25;
              *(_DWORD *)(a3 + 28) = v40;
              *(_QWORD *)a3 = ++v4;
              v54 |= v41 >> v40;
              if (v40)
                v41 = v58;
              else
                v41 = 0;
              if (!v40)
                v40 = 0;
            }
            else
            {
              v41 <<= 7;
              v40 -= 7;
            }
            *(_DWORD *)(a3 + 24) = v41;
            a2[v51++ + 5] = v54;
            if (v51 == v29)
              goto LABEL_108;
          }
          exception = __cxa_allocate_exception(8uLL);
          v67 = "Cannot read sG.ASCIDList[m]";
        }
      }
    }
LABEL_115:
    *exception = v67;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
LABEL_108:
  APAC::MetadataBitStreamParser::parseProprietaryStaticData(a1, (uint64_t)(a2 + 132), a3);
}

void APAC::MetadataBitStreamParser::parseScreenData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  int v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned __int8 *v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unint64_t v95;
  unsigned int *v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  int v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned __int8 *v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unint64_t v108;
  unsigned int *v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  int v113;
  unint64_t v114;
  unsigned int v115;
  uint64_t v116;
  unsigned __int8 *v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  unint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unsigned __int8 *v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  _QWORD *exception;
  const char *v135;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v135 = "Cannot read sD.hasData";
    goto LABEL_171;
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  v9 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v11 > (unint64_t)v4)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v18 = v6 + 31;
    v17 = v6 == -31;
    *(_DWORD *)(a3 + 28) = v6 + 31;
    *(_QWORD *)a3 = ++v4;
    v8 |= v7 >> (v6 + 31);
    if (v6 == -31)
      v10 = 0;
    else
      v10 = v7 << (1 - v6);
    if (v17)
      v9 = 0;
    else
      v9 = v18;
  }
  else
  {
    v10 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)a2 = v8 != 0;
  if (v8)
  {
    v19 = v3 - (_QWORD)v4;
    if (v9 + 8 * ((int)v3 - (int)v4) <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v135 = "Cannot read sD.aspectRatio";
      goto LABEL_171;
    }
    *(_DWORD *)(a3 + 28) = v9 - 32;
    if (v9 - 32 < 0)
    {
      v22 = *(_QWORD *)(a3 + 8);
      if ((v19 & ~(v19 >> 63) & 0xFFFFFFFC) != 0 && v22 <= (unint64_t)v4)
      {
        v23 = bswap32(*v4);
      }
      else
      {
        v24 = 0;
        v23 = v10;
        do
        {
          v25 = (unsigned __int8 *)v4 + v24;
          v26 = v23 << 8;
          *(_DWORD *)(a3 + 24) = v26;
          v27 = 255;
          if ((unint64_t)v4 + v24 < v3 && (unint64_t)v25 >= v22)
            v27 = *v25;
          v23 = v27 | v26;
          *(_DWORD *)(a3 + 24) = v23;
          ++v24;
        }
        while ((_DWORD)v24 != 4);
      }
      *(_QWORD *)a3 = ++v4;
      v21 = (v23 >> v9) | v10;
      v10 = v23 << -(char)v9;
      if (!v9)
        v10 = 0;
      *(_DWORD *)(a3 + 24) = v10;
      *(_DWORD *)(a3 + 28) = v9;
      v19 = v3 - (_QWORD)v4;
      v20 = 8 * (v3 - (_DWORD)v4);
    }
    else
    {
      v20 = 8 * v19;
      v9 -= 32;
      v21 = v10;
    }
    *(_DWORD *)(a2 + 4) = v21;
    if ((v20 + v9 < 0) ^ __OFADD__(v20, v9) | (v20 + v9 == 0))
    {
      exception = __cxa_allocate_exception(8uLL);
      v135 = "Cannot read sD.cartesian";
      goto LABEL_171;
    }
    v28 = v10 >> 31;
    v29 = v9 - 1;
    *(_DWORD *)(a3 + 28) = v9 - 1;
    if (v9 - 1 < 0)
    {
      v31 = *(_QWORD *)(a3 + 8);
      if ((v19 & ~(v19 >> 63) & 0xFFFFFFFC) != 0 && v31 <= (unint64_t)v4)
      {
        v10 = bswap32(*v4);
      }
      else
      {
        v32 = 0;
        do
        {
          v33 = (unsigned __int8 *)v4 + v32;
          v34 = v10 << 8;
          *(_DWORD *)(a3 + 24) = v34;
          v35 = 255;
          if ((unint64_t)v4 + v32 < v3 && (unint64_t)v33 >= v31)
            v35 = *v33;
          v10 = v35 | v34;
          *(_DWORD *)(a3 + 24) = v10;
          ++v32;
        }
        while ((_DWORD)v32 != 4);
      }
      v37 = v9 + 31;
      v36 = v9 == -31;
      *(_DWORD *)(a3 + 28) = v9 + 31;
      *(_QWORD *)a3 = ++v4;
      v28 |= v10 >> (v9 + 31);
      if (v9 == -31)
        v30 = 0;
      else
        v30 = v10 << (1 - v9);
      if (v36)
        v29 = 0;
      else
        v29 = v37;
    }
    else
    {
      v30 = 2 * v10;
    }
    *(_DWORD *)(a3 + 24) = v30;
    *(_BYTE *)(a2 + 1) = v28 != 0;
    v38 = v3 - (_QWORD)v4;
    v39 = v29 + 8 * (v3 - (_DWORD)v4);
    if (v28)
    {
      if (v39 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v135 = "Cannot read sD.screenCentrePosition.co_ut.cartesian.X";
      }
      else
      {
        *(_DWORD *)(a3 + 28) = v29 - 32;
        if (v29 - 32 < 0)
        {
          v40 = v38 & ~(v38 >> 63);
          v41 = *(_QWORD *)(a3 + 8);
          if ((v40 & 0xFFFFFFFC) != 0 && v41 <= (unint64_t)v4)
          {
            v42 = bswap32(*v4);
          }
          else
          {
            v46 = 0;
            v42 = v30;
            do
            {
              v47 = (unsigned __int8 *)v4 + v46;
              v48 = v42 << 8;
              *(_DWORD *)(a3 + 24) = v48;
              v49 = 255;
              if ((unint64_t)v4 + v46 < v3 && (unint64_t)v47 >= v41)
                v49 = *v47;
              v42 = v49 | v48;
              *(_DWORD *)(a3 + 24) = v42;
              ++v46;
            }
            while ((_DWORD)v46 != 4);
          }
          *(_QWORD *)a3 = v4 + 1;
          v30 |= v42 >> v29;
          v50 = v42 << -(char)v29;
          if (!v29)
            v50 = 0;
          *(_DWORD *)(a3 + 24) = v50;
          *(_DWORD *)(a3 + 28) = v29;
        }
        *(_DWORD *)(a2 + 8) = v30;
        v51 = *(_QWORD *)(a3 + 16);
        v52 = *(unsigned int **)a3;
        v53 = v51 - *(_QWORD *)a3;
        v54 = *(_DWORD *)(a3 + 28);
        if (v54 + 8 * (int)v53 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v135 = "Cannot read sD.screenCentrePosition.co_ut.cartesian.Y";
        }
        else
        {
          v55 = *(_DWORD *)(a3 + 24);
          *(_DWORD *)(a3 + 28) = v54 - 32;
          if (v54 - 32 < 0)
          {
            v56 = v53 & ~(v53 >> 63);
            v57 = *(_QWORD *)(a3 + 8);
            if ((v56 & 0xFFFFFFFC) != 0 && v57 <= (unint64_t)v52)
            {
              v58 = bswap32(*v52);
            }
            else
            {
              v59 = 0;
              v58 = v55;
              do
              {
                v60 = (unsigned __int8 *)v52 + v59;
                v61 = v58 << 8;
                *(_DWORD *)(a3 + 24) = v61;
                v62 = 255;
                if ((unint64_t)v52 + v59 < v51 && (unint64_t)v60 >= v57)
                  v62 = *v60;
                v58 = v62 | v61;
                *(_DWORD *)(a3 + 24) = v58;
                ++v59;
              }
              while ((_DWORD)v59 != 4);
            }
            *(_QWORD *)a3 = v52 + 1;
            v55 |= v58 >> v54;
            v63 = v58 << -(char)v54;
            if (!v54)
              v63 = 0;
            *(_DWORD *)(a3 + 24) = v63;
            *(_DWORD *)(a3 + 28) = v54;
          }
          *(_DWORD *)(a2 + 12) = v55;
          v64 = *(_QWORD *)(a3 + 16);
          v65 = *(unsigned int **)a3;
          v66 = v64 - *(_QWORD *)a3;
          v67 = *(_DWORD *)(a3 + 28);
          if (v67 + 8 * (int)v66 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v135 = "Cannot read sD.screenCentrePosition.co_ut.cartesian.Z";
          }
          else
          {
            v68 = *(_DWORD *)(a3 + 24);
            *(_DWORD *)(a3 + 28) = v67 - 32;
            if (v67 - 32 < 0)
            {
              v69 = v66 & ~(v66 >> 63);
              v70 = *(_QWORD *)(a3 + 8);
              if ((v69 & 0xFFFFFFFC) != 0 && v70 <= (unint64_t)v65)
              {
                v71 = bswap32(*v65);
              }
              else
              {
                v72 = 0;
                v71 = v68;
                do
                {
                  v73 = (unsigned __int8 *)v65 + v72;
                  v74 = v71 << 8;
                  *(_DWORD *)(a3 + 24) = v74;
                  v75 = 255;
                  if ((unint64_t)v65 + v72 < v64 && (unint64_t)v73 >= v70)
                    v75 = *v73;
                  v71 = v75 | v74;
                  *(_DWORD *)(a3 + 24) = v71;
                  ++v72;
                }
                while ((_DWORD)v72 != 4);
              }
              *(_QWORD *)a3 = v65 + 1;
              v68 |= v71 >> v67;
              v76 = v71 << -(char)v67;
              if (!v67)
                v76 = 0;
              *(_DWORD *)(a3 + 24) = v76;
              *(_DWORD *)(a3 + 28) = v67;
            }
            *(_DWORD *)(a2 + 16) = v68;
            v77 = *(_QWORD *)(a3 + 16);
            v78 = *(unsigned int **)a3;
            v79 = v77 - *(_QWORD *)a3;
            v80 = *(_DWORD *)(a3 + 28);
            if (v80 + 8 * (int)v79 > 31)
            {
              v81 = *(_DWORD *)(a3 + 24);
              *(_DWORD *)(a3 + 28) = v80 - 32;
              if (v80 - 32 < 0)
              {
                v82 = v79 & ~(v79 >> 63);
                v83 = *(_QWORD *)(a3 + 8);
                if ((v82 & 0xFFFFFFFC) != 0 && v83 <= (unint64_t)v78)
                {
                  v84 = bswap32(*v78);
                }
                else
                {
                  v85 = 0;
                  v84 = v81;
                  do
                  {
                    v86 = (unsigned __int8 *)v78 + v85;
                    v87 = v84 << 8;
                    *(_DWORD *)(a3 + 24) = v87;
                    v88 = 255;
                    if ((unint64_t)v78 + v85 < v77 && (unint64_t)v86 >= v83)
                      v88 = *v86;
                    v84 = v88 | v87;
                    *(_DWORD *)(a3 + 24) = v84;
                    ++v85;
                  }
                  while ((_DWORD)v85 != 4);
                }
                *(_QWORD *)a3 = v78 + 1;
                v81 |= v84 >> v80;
                v89 = v84 << -(char)v80;
                if (!v80)
                  v89 = 0;
                *(_DWORD *)(a3 + 24) = v89;
                *(_DWORD *)(a3 + 28) = v80;
              }
              *(_DWORD *)(a2 + 20) = v81;
              return;
            }
            exception = __cxa_allocate_exception(8uLL);
            v135 = "Cannot read sD.screenWidth.X";
          }
        }
      }
LABEL_171:
      *exception = v135;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    if (v39 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v135 = "Cannot read sD.screenCentrePosition.co_ut.spherical.azimuth";
      goto LABEL_171;
    }
    *(_DWORD *)(a3 + 28) = v29 - 32;
    if (v29 - 32 < 0)
    {
      v43 = v38 & ~(v38 >> 63);
      v44 = *(_QWORD *)(a3 + 8);
      if ((v43 & 0xFFFFFFFC) != 0 && v44 <= (unint64_t)v4)
      {
        v45 = bswap32(*v4);
      }
      else
      {
        v90 = 0;
        v45 = v30;
        do
        {
          v91 = (unsigned __int8 *)v4 + v90;
          v92 = v45 << 8;
          *(_DWORD *)(a3 + 24) = v92;
          v93 = 255;
          if ((unint64_t)v4 + v90 < v3 && (unint64_t)v91 >= v44)
            v93 = *v91;
          v45 = v93 | v92;
          *(_DWORD *)(a3 + 24) = v45;
          ++v90;
        }
        while ((_DWORD)v90 != 4);
      }
      *(_QWORD *)a3 = v4 + 1;
      v30 |= v45 >> v29;
      v94 = v45 << -(char)v29;
      if (!v29)
        v94 = 0;
      *(_DWORD *)(a3 + 24) = v94;
      *(_DWORD *)(a3 + 28) = v29;
    }
    *(_DWORD *)(a2 + 8) = v30;
    v95 = *(_QWORD *)(a3 + 16);
    v96 = *(unsigned int **)a3;
    v97 = v95 - *(_QWORD *)a3;
    v98 = *(_DWORD *)(a3 + 28);
    if (v98 + 8 * (int)v97 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v135 = "Cannot read sD.screenCentrePosition.co_ut.spherical.elevation";
      goto LABEL_171;
    }
    v99 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 28) = v98 - 32;
    if (v98 - 32 < 0)
    {
      v100 = v97 & ~(v97 >> 63);
      v101 = *(_QWORD *)(a3 + 8);
      if ((v100 & 0xFFFFFFFC) != 0 && v101 <= (unint64_t)v96)
      {
        v102 = bswap32(*v96);
      }
      else
      {
        v103 = 0;
        v102 = v99;
        do
        {
          v104 = (unsigned __int8 *)v96 + v103;
          v105 = v102 << 8;
          *(_DWORD *)(a3 + 24) = v105;
          v106 = 255;
          if ((unint64_t)v96 + v103 < v95 && (unint64_t)v104 >= v101)
            v106 = *v104;
          v102 = v106 | v105;
          *(_DWORD *)(a3 + 24) = v102;
          ++v103;
        }
        while ((_DWORD)v103 != 4);
      }
      *(_QWORD *)a3 = v96 + 1;
      v99 |= v102 >> v98;
      v107 = v102 << -(char)v98;
      if (!v98)
        v107 = 0;
      *(_DWORD *)(a3 + 24) = v107;
      *(_DWORD *)(a3 + 28) = v98;
    }
    *(_DWORD *)(a2 + 12) = v99;
    v108 = *(_QWORD *)(a3 + 16);
    v109 = *(unsigned int **)a3;
    v110 = v108 - *(_QWORD *)a3;
    v111 = *(_DWORD *)(a3 + 28);
    if (v111 + 8 * (int)v110 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v135 = "Cannot read sD.screenCentrePosition.co_ut.spherical.distance";
      goto LABEL_171;
    }
    v112 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 28) = v111 - 32;
    if (v111 - 32 < 0)
    {
      v113 = v110 & ~(v110 >> 63);
      v114 = *(_QWORD *)(a3 + 8);
      if ((v113 & 0xFFFFFFFC) != 0 && v114 <= (unint64_t)v109)
      {
        v115 = bswap32(*v109);
      }
      else
      {
        v116 = 0;
        v115 = v112;
        do
        {
          v117 = (unsigned __int8 *)v109 + v116;
          v118 = v115 << 8;
          *(_DWORD *)(a3 + 24) = v118;
          v119 = 255;
          if ((unint64_t)v109 + v116 < v108 && (unint64_t)v117 >= v114)
            v119 = *v117;
          v115 = v119 | v118;
          *(_DWORD *)(a3 + 24) = v115;
          ++v116;
        }
        while ((_DWORD)v116 != 4);
      }
      *(_QWORD *)a3 = v109 + 1;
      v112 |= v115 >> v111;
      v120 = v115 << -(char)v111;
      if (!v111)
        v120 = 0;
      *(_DWORD *)(a3 + 24) = v120;
      *(_DWORD *)(a3 + 28) = v111;
    }
    *(_DWORD *)(a2 + 16) = v112;
    v121 = *(_QWORD *)(a3 + 16);
    v122 = *(unsigned int **)a3;
    v123 = v121 - *(_QWORD *)a3;
    v124 = *(_DWORD *)(a3 + 28);
    if (v124 + 8 * (int)v123 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v135 = "Cannot read sD.screenWidth.azimuth";
      goto LABEL_171;
    }
    v125 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 28) = v124 - 32;
    if (v124 - 32 < 0)
    {
      v126 = v123 & ~(v123 >> 63);
      v127 = *(_QWORD *)(a3 + 8);
      if ((v126 & 0xFFFFFFFC) != 0 && v127 <= (unint64_t)v122)
      {
        v128 = bswap32(*v122);
      }
      else
      {
        v129 = 0;
        v128 = v125;
        do
        {
          v130 = (unsigned __int8 *)v122 + v129;
          v131 = v128 << 8;
          *(_DWORD *)(a3 + 24) = v131;
          v132 = 255;
          if ((unint64_t)v122 + v129 < v121 && (unint64_t)v130 >= v127)
            v132 = *v130;
          v128 = v132 | v131;
          *(_DWORD *)(a3 + 24) = v128;
          ++v129;
        }
        while ((_DWORD)v129 != 4);
      }
      *(_QWORD *)a3 = v122 + 1;
      v125 |= v128 >> v124;
      v133 = v128 << -(char)v124;
      if (!v124)
        v133 = 0;
      *(_DWORD *)(a3 + 24) = v133;
      *(_DWORD *)(a3 + 28) = v124;
    }
    *(_DWORD *)(a2 + 24) = v125;
  }
}

void APAC::MetadataBitStreamParser::parseConfig(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  _QWORD v9[3];
  uint64_t v10;

  v9[0] = a2;
  v9[1] = a2;
  v9[2] = &a2[a3];
  v10 = 0;
  if ((a2 & 3) != 0)
  {
    v4 = 0;
    v5 = a2 + 1;
    v6 = a2;
    do
    {
      if (v6 >= &a2[a3])
        v7 = 255;
      else
        v7 = *v6;
      v4 = v7 | (v4 << 8);
      ++v6;
    }
    while ((v5++ & 3) != 0);
    v9[0] = &a2[((a2 ^ 3) & 3) + 1];
    LODWORD(v10) = v4 << ((8 * ((a2 ^ 3) & 3)) ^ 0x18);
    HIDWORD(v10) = 8 * ((a2 ^ 3) & 3) + 8;
  }
  APAC::MetadataBitStreamParser::parseMetadataConfig(a1, a4, (uint64_t)v9);
}

void APAC::MetadataBitStreamParser::parseMetadataConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  _QWORD *exception;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Cannot read mdCfg.mRendererMetadataConfigPresent";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v7 = *(_DWORD *)(a3 + 24);
  v8 = v7 >> 31;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v10 = v5 & ~(v5 >> 63) & 0xFFFFFFFC;
    v11 = *(_QWORD *)(a3 + 8);
    if (v10)
      v12 = v11 > (unint64_t)v4;
    else
      v12 = 1;
    if (v12)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int8 *)v4 + v13;
        v15 = v7 << 8;
        *(_DWORD *)(a3 + 24) = v15;
        v16 = 255;
        if ((unint64_t)v4 + v13 < v3 && (unint64_t)v14 >= v11)
          v16 = *v14;
        v7 = v16 | v15;
        *(_DWORD *)(a3 + 24) = v7;
        ++v13;
      }
      while ((_DWORD)v13 != 4);
    }
    else
    {
      v7 = bswap32(*v4);
    }
    v17 = v7 << (1 - v6);
    v18 = v6 + 31;
    *(_DWORD *)(a3 + 28) = v18;
    *(_QWORD *)a3 = v4 + 1;
    v8 |= v7 >> v18;
    if (v18)
      v9 = v17;
    else
      v9 = 0;
  }
  else
  {
    v9 = 2 * v7;
  }
  *(_DWORD *)(a3 + 24) = v9;
  *(_BYTE *)(a2 + 1) = v8 != 0;
  if (v8)
    APAC::MetadataBitStreamParser::parseRendererMetadataConfig(a1, a2 + 8, a3);
}

void APAC::MetadataBitStreamParser::parseRendererMetadataConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  BOOL v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  BOOL *v98;
  _QWORD *exception;
  const char *v100;
  char *v101;
  char *v102;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned int **)a3;
  v5 = v3 - *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 28);
  if (v6 + 8 * (int)v5 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v100 = "Cannot read rMdCfg.mGlobalConfig.mHasData";
    goto LABEL_85;
  }
  v9 = *(_DWORD *)(a3 + 24);
  v10 = v9 >> 31;
  v11 = v6 - 1;
  *(_DWORD *)(a3 + 28) = v6 - 1;
  if (v6 - 1 < 0)
  {
    v13 = *(_QWORD *)(a3 + 8);
    if ((v5 & ~(v5 >> 63) & 0xFFFFFFFC) == 0 || v13 > (unint64_t)v4)
    {
      v15 = 0;
      do
      {
        v16 = (unsigned __int8 *)v4 + v15;
        v17 = v9 << 8;
        *(_DWORD *)(a3 + 24) = v17;
        v18 = 255;
        if ((unint64_t)v4 + v15 < v3 && (unint64_t)v16 >= v13)
          v18 = *v16;
        v9 = v18 | v17;
        *(_DWORD *)(a3 + 24) = v9;
        ++v15;
      }
      while ((_DWORD)v15 != 4);
    }
    else
    {
      v9 = bswap32(*v4);
    }
    v19 = v9 << (1 - v6);
    v20 = v6 + 31;
    *(_DWORD *)(a3 + 28) = v20;
    *(_QWORD *)a3 = v4 + 1;
    v10 |= v9 >> v20;
    if (v20)
      v12 = v19;
    else
      v12 = 0;
    if (v20)
      v11 = v20;
    else
      v11 = 0;
  }
  else
  {
    v12 = 2 * v9;
  }
  *(_DWORD *)(a3 + 24) = v12;
  *(_BYTE *)(a2 + 8) = v10 != 0;
  v21 = a2 + 8;
  if (v10)
  {
    APAC::MetadataBitStreamParser::parseGlobalConfig(a1, v21, 1, a3);
    v12 = *(_DWORD *)(a3 + 24);
    v11 = *(_DWORD *)(a3 + 28);
  }
  v22 = v12 >> 21;
  *(_DWORD *)(a3 + 28) = v11 - 11;
  if (v11 - 11 < 0)
  {
    v25 = *(_QWORD *)(a3 + 8);
    v24 = *(_QWORD *)(a3 + 16);
    v26 = *(unsigned int **)a3;
    if ((((_DWORD)v24 - *(_DWORD *)a3) & ~((uint64_t)(v24 - *(_QWORD *)a3) >> 63) & 0xFFFFFFFC) != 0
      && v25 <= (unint64_t)v26)
    {
      v12 = bswap32(*v26);
    }
    else
    {
      v27 = 0;
      do
      {
        v28 = (unsigned __int8 *)v26 + v27;
        v29 = v12 << 8;
        *(_DWORD *)(a3 + 24) = v29;
        v30 = 255;
        if ((unint64_t)v26 + v27 < v24 && (unint64_t)v28 >= v25)
          v30 = *v28;
        v12 = v30 | v29;
        *(_DWORD *)(a3 + 24) = v12;
        ++v27;
      }
      while ((_DWORD)v27 != 4);
    }
    v31 = v12 << (11 - v11);
    v32 = v11 + 21;
    *(_DWORD *)(a3 + 28) = v32;
    *(_QWORD *)a3 = v26 + 1;
    v22 |= v12 >> v32;
    if (v32)
      v23 = v31;
    else
      v23 = 0;
  }
  else
  {
    v23 = v12 << 11;
  }
  *(_DWORD *)(a3 + 24) = v23;
  *(_WORD *)a2 = v22;
  v33 = (unsigned __int16)v22;
  std::vector<APAC::Metadata::GroupConfig>::resize(a2 + 4776, v33);
  v35 = *(_QWORD *)(a2 + 4808);
  v36 = *(_QWORD *)(a2 + 4800);
  v37 = 0x6F96F96F96F96F97 * ((v35 - v36) >> 5);
  v38 = v33 - v37;
  if (v33 <= v37)
  {
    if (v33 >= v37)
      goto LABEL_62;
    v79 = v36 + 1248 * v33;
    while (v35 != v79)
    {
      v35 -= 1248;
      std::__destroy_at[abi:ne180100]<APAC::Metadata::RendererData,0>((_QWORD *)v35);
    }
    goto LABEL_59;
  }
  v39 = *(_QWORD *)(a2 + 4816);
  if (0x6F96F96F96F96F97 * ((v39 - v35) >> 5) >= v38)
  {
    v79 = v35 + 1248 * v38;
    do
    {
      bzero((void *)v35, 0x4C0uLL);
      *(_BYTE *)(v35 + 1046) = 1;
      v80 = v35 + 1100;
      *(_QWORD *)(v35 + 1100) = 0;
      *(_QWORD *)(v35 + 1105) = 0;
      *(_QWORD *)(v35 + 1152) = 0;
      *(_QWORD *)(v35 + 1157) = 0;
      *(_OWORD *)(v35 + 1047) = 0u;
      *(_OWORD *)(v35 + 1063) = 0u;
      *(_OWORD *)(v35 + 1079) = 0u;
      *(_OWORD *)(v35 + 1216) = 0u;
      *(_OWORD *)(v35 + 1232) = 0u;
      v35 += 1248;
      *(_DWORD *)(v80 - 6) = 0;
    }
    while (v35 != v79);
LABEL_59:
    *(_QWORD *)(a2 + 4808) = v79;
    goto LABEL_62;
  }
  v40 = 0x6F96F96F96F96F97 * ((v39 - v36) >> 5);
  v41 = 2 * v40;
  if (2 * v40 <= v33)
    v41 = v33;
  if (v40 >= 0x1A41A41A41A41ALL)
    v42 = 0x34834834834834;
  else
    v42 = v41;
  if (v42 > 0x34834834834834)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v43 = (char *)operator new(1248 * v42);
  v44 = &v43[1248 * v37];
  v45 = &v43[1248 * v33];
  v46 = v44;
  do
  {
    bzero(v46, 0x4C0uLL);
    v46[1046] = 1;
    v47 = v46 + 1100;
    *(_QWORD *)(v46 + 1100) = 0;
    *(_QWORD *)(v46 + 1105) = 0;
    *((_QWORD *)v46 + 144) = 0;
    *(_QWORD *)(v46 + 1157) = 0;
    *(_OWORD *)(v46 + 1047) = 0u;
    *(_OWORD *)(v46 + 1063) = 0u;
    *(_OWORD *)(v46 + 1079) = 0u;
    *((_OWORD *)v46 + 76) = 0u;
    *((_OWORD *)v46 + 77) = 0u;
    v46 += 1248;
    *(_DWORD *)(v47 - 6) = 0;
  }
  while (v46 != v45);
  v48 = &v43[1248 * v42];
  v49 = *(_QWORD **)(a2 + 4808);
  v50 = *(_QWORD **)(a2 + 4800);
  if (v49 == v50)
  {
    *(_QWORD *)(a2 + 4800) = v44;
    *(_QWORD *)(a2 + 4808) = v45;
    *(_QWORD *)(a2 + 4816) = v48;
    if (!v49)
      goto LABEL_62;
    goto LABEL_61;
  }
  v101 = v48;
  v102 = v44;
  v51 = 0;
  do
  {
    v52 = &v102[v51 * 8];
    v53 = &v49[v51];
    v34 = memcpy(&v102[v51 * 8 - 1248], &v49[v51 - 156], 0x314uLL);
    v54 = (uint64_t)&v102[v51 * 8 - 456];
    v55 = v49[v51 - 57];
    *(_DWORD *)(v54 + 8) = v49[v51 - 56];
    *(_QWORD *)v54 = v55;
    v56 = v49[v51 - 55];
    v57 = &v102[v51 * 8 - 432];
    v58 = (uint64_t)&v49[v51 - 54];
    *((_QWORD *)v57 + 1) = 0;
    *((_QWORD *)v57 + 2) = 0;
    *((_QWORD *)v52 - 55) = v56;
    *(_QWORD *)v57 = 0;
    *(_OWORD *)v57 = *(_OWORD *)v58;
    *((_QWORD *)v52 - 52) = v49[v51 - 52];
    *(v53 - 53) = 0;
    *(_QWORD *)v58 = 0;
    v59 = &v102[v51 * 8 - 408];
    v60 = (uint64_t)&v49[v51 - 51];
    *(_QWORD *)(v58 + 16) = 0;
    *((_QWORD *)v59 + 2) = 0;
    *(_QWORD *)v59 = 0;
    *((_QWORD *)v52 - 50) = 0;
    *(_OWORD *)v59 = *(_OWORD *)v60;
    *((_QWORD *)v52 - 49) = v49[v51 - 49];
    *(v53 - 50) = 0;
    *(_QWORD *)v60 = 0;
    *(_QWORD *)(v60 + 16) = 0;
    v61 = &v102[v51 * 8 - 384];
    v62 = (uint64_t)&v49[v51 - 48];
    *((_QWORD *)v61 + 2) = 0;
    *(_QWORD *)v61 = 0;
    *((_QWORD *)v52 - 47) = 0;
    *(_OWORD *)v61 = *(_OWORD *)v62;
    *((_QWORD *)v52 - 46) = v49[v51 - 46];
    *(v53 - 47) = 0;
    *(_QWORD *)v62 = 0;
    *(_QWORD *)(v62 + 16) = 0;
    v63 = &v102[v51 * 8 - 360];
    v64 = (uint64_t)&v49[v51 - 45];
    *((_QWORD *)v63 + 2) = 0;
    *(_QWORD *)v63 = 0;
    *((_QWORD *)v52 - 44) = 0;
    *(_OWORD *)v63 = *(_OWORD *)v64;
    *((_QWORD *)v52 - 43) = v49[v51 - 43];
    *(v53 - 44) = 0;
    *(_QWORD *)v64 = 0;
    v65 = &v102[v51 * 8 - 336];
    v66 = (uint64_t)&v49[v51 - 42];
    *(_QWORD *)(v64 + 16) = 0;
    *((_QWORD *)v65 + 2) = 0;
    *(_QWORD *)v65 = 0;
    *((_QWORD *)v52 - 41) = 0;
    *(_OWORD *)v65 = *(_OWORD *)v66;
    *((_QWORD *)v52 - 40) = v49[v51 - 40];
    *(v53 - 41) = 0;
    *(_QWORD *)v66 = 0;
    *(_QWORD *)(v66 + 16) = 0;
    v67 = &v102[v51 * 8 - 312];
    v68 = (uint64_t)&v49[v51 - 39];
    *((_QWORD *)v67 + 2) = 0;
    *(_QWORD *)v67 = 0;
    *((_QWORD *)v52 - 38) = 0;
    *(_OWORD *)v67 = *(_OWORD *)v68;
    *((_QWORD *)v52 - 37) = v49[v51 - 37];
    *(v53 - 38) = 0;
    *(_QWORD *)v68 = 0;
    *(_QWORD *)(v68 + 16) = 0;
    *((_QWORD *)v52 - 36) = v49[v51 - 36];
    LOWORD(v67) = v49[v51 - 35];
    v69 = &v102[v51 * 8 - 272];
    *((_QWORD *)v52 - 32) = 0;
    *(_QWORD *)v69 = 0;
    *((_QWORD *)v69 + 1) = 0;
    *((_WORD *)v52 - 140) = (_WORD)v67;
    *(_OWORD *)v69 = *(_OWORD *)&v49[v51 - 34];
    *((_QWORD *)v52 - 32) = v49[v51 - 32];
    *(v53 - 33) = 0;
    *(v53 - 34) = 0;
    *(v53 - 32) = 0;
    *((_QWORD *)v52 - 30) = 0;
    *((_QWORD *)v52 - 29) = 0;
    *((_QWORD *)v52 - 31) = 0;
    *(_OWORD *)(v52 - 248) = *(_OWORD *)&v49[v51 - 31];
    *((_QWORD *)v52 - 29) = v49[v51 - 29];
    *(v53 - 31) = 0;
    *(v53 - 30) = 0;
    *(v53 - 29) = 0;
    v70 = *(_OWORD *)&v49[v51 - 16];
    v71 = *(_OWORD *)&v49[v51 - 22];
    v72 = *(_OWORD *)&v49[v51 - 20];
    *((_OWORD *)v52 - 9) = *(_OWORD *)&v49[v51 - 18];
    *((_OWORD *)v52 - 8) = v70;
    *((_OWORD *)v52 - 11) = v71;
    *((_OWORD *)v52 - 10) = v72;
    v73 = *(_OWORD *)((char *)&v49[v51 - 8] - 3);
    v75 = *(_OWORD *)&v49[v51 - 12];
    v74 = *(_OWORD *)&v49[v51 - 10];
    *((_OWORD *)v52 - 7) = *(_OWORD *)&v49[v51 - 14];
    *((_OWORD *)v52 - 6) = v75;
    *((_OWORD *)v52 - 5) = v74;
    *(_OWORD *)(v52 - 67) = v73;
    v77 = *(_OWORD *)&v49[v51 - 26];
    v76 = *(_OWORD *)&v49[v51 - 24];
    *((_OWORD *)v52 - 14) = *(_OWORD *)&v49[v51 - 28];
    *((_OWORD *)v52 - 13) = v77;
    *((_OWORD *)v52 - 12) = v76;
    LODWORD(v67) = v49[v51 - 5];
    *((_QWORD *)v52 - 6) = v49[v51 - 6];
    *((_QWORD *)v52 - 3) = 0;
    *((_QWORD *)v52 - 2) = 0;
    *((_QWORD *)v52 - 4) = 0;
    *((_DWORD *)v52 - 10) = (_DWORD)v67;
    *((_OWORD *)v52 - 2) = *(_OWORD *)&v49[v51 - 4];
    *((_QWORD *)v52 - 2) = v49[v51 - 2];
    *(v53 - 4) = 0;
    *(v53 - 3) = 0;
    *(v53 - 2) = 0;
    *((_QWORD *)v52 - 1) = v49[v51 - 1];
    v51 -= 156;
  }
  while (&v49[v51] != v50);
  v78 = *(_QWORD **)(a2 + 4800);
  v49 = *(_QWORD **)(a2 + 4808);
  *(_QWORD *)(a2 + 4800) = &v102[v51 * 8];
  *(_QWORD *)(a2 + 4808) = v45;
  *(_QWORD *)(a2 + 4816) = v101;
  if (v49 != v78)
  {
    do
    {
      v49 -= 156;
      std::__destroy_at[abi:ne180100]<APAC::Metadata::RendererData,0>(v49);
    }
    while (v49 != v78);
    v49 = v78;
  }
  if (v49)
LABEL_61:
    operator delete(v49);
LABEL_62:
  if ((_DWORD)v33)
  {
    v81 = 0;
    while (1)
    {
      APAC::MetadataBitStreamParser::parseGroupConfig((uint64_t)v34, *(_QWORD *)(a2 + 4776) + 48 * v81, 1, a3);
      v82 = *(_QWORD *)(a3 + 16);
      v83 = *(unsigned int **)a3;
      v84 = v82 - *(_QWORD *)a3;
      v85 = *(_DWORD *)(a3 + 28);
      if (v85 + 8 * (int)v84 <= 0)
        break;
      v86 = *(_DWORD *)(a3 + 24);
      v87 = v86 >> 31;
      *(_DWORD *)(a3 + 28) = v85 - 1;
      if (v85 - 1 < 0)
      {
        v89 = v84 & ~(v84 >> 63) & 0xFFFFFFFC;
        v90 = *(_QWORD *)(a3 + 8);
        if (v89)
          v91 = v90 > (unint64_t)v83;
        else
          v91 = 1;
        if (v91)
        {
          v92 = 0;
          do
          {
            v93 = (unsigned __int8 *)v83 + v92;
            v94 = v86 << 8;
            *(_DWORD *)(a3 + 24) = v94;
            v95 = 255;
            if ((unint64_t)v83 + v92 < v82 && (unint64_t)v93 >= v90)
              v95 = *v93;
            v86 = v95 | v94;
            *(_DWORD *)(a3 + 24) = v86;
            ++v92;
          }
          while ((_DWORD)v92 != 4);
        }
        else
        {
          v86 = bswap32(*v83);
        }
        v96 = v86 << (1 - v85);
        v97 = v85 + 31;
        *(_DWORD *)(a3 + 28) = v97;
        *(_QWORD *)a3 = v83 + 1;
        v87 |= v86 >> v97;
        if (v97)
          v88 = v96;
        else
          v88 = 0;
      }
      else
      {
        v88 = 2 * v86;
      }
      *(_DWORD *)(a3 + 24) = v88;
      v98 = (BOOL *)(*(_QWORD *)(a2 + 4800) + 1248 * v81);
      *v98 = v87 != 0;
      if (v87)
        APAC::MetadataBitStreamParser::parseRendererData((unint64_t)v34, (uint64_t)v98, 1, a3);
      if (++v81 == v33)
        return;
    }
    exception = __cxa_allocate_exception(8uLL);
    v100 = "Cannot read rMdCfg.mRendererData[gp].mHasData";
LABEL_85:
    *exception = v100;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
}

uint64_t TBitstreamWriter<unsigned short>::Flush(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;

  v1 = result;
  v2 = *(_DWORD *)(result + 28);
  if ((v2 & 7) != 0)
  {
    result = AT::TBitstreamWriter<unsigned short>::PutBits(result, 0, *(_DWORD *)(result + 28) & 7);
    v2 = *(_DWORD *)(v1 + 28);
  }
  if (v2 == 16)
  {
    v3 = *(_QWORD *)(v1 + 8);
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 8);
    v4 = 8 - v2;
    do
    {
      *(_BYTE *)v3 = *(unsigned __int16 *)(v1 + 24) >> v4;
      v3 = *(_QWORD *)(v1 + 8) + 1;
      *(_QWORD *)(v1 + 8) = v3;
      v4 -= 8;
    }
    while (v4 != -8);
  }
  *(_DWORD *)(v1 + 28) = 16;
  *(_DWORD *)(v1 + 32) = v3 & 1;
  return result;
}

void APComponent_NSExtension::~APComponent_NSExtension(APComponent_NSExtension *this)
{
  APComponent_NSExtension::~APComponent_NSExtension(this);
  JUMPOUT(0x193FFE460);
}

{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = off_1E2908AA0;
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v2 = (const void *)*((_QWORD *)this + 24);
  if (v2)
    CFRelease(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  APComponent::~APComponent((APComponent *)this);
}

id APComponent_NSExtension::getExtension(APComponent_NSExtension *this)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 21);
  if (!v2)
  {
    objc_msgSend(MEMORY[0x1E0CB35D8], "extensionWithIdentifier:error:", *((_QWORD *)this + 20), 0);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v3;

    v2 = (void *)*((_QWORD *)this + 21);
  }
  return v2;
}

_QWORD *create_shared_APComponent_Remote<RemoteV2Instance>(_OWORD *a1, uint64_t a2, unsigned int a3, CFTypeRef *a4, int a5, uint64_t a6, CFTypeRef *a7, const void **a8)
{
  std::__shared_weak_count_vtbl *v16;
  CFTypeRef v17;
  const void *v18;
  _QWORD *v19;
  CFTypeRef v20;
  CFTypeRef v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  __int128 v27;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *result;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[24];
  _BYTE *v43;
  CFTypeRef cf;
  CFTypeRef v45;
  _BYTE v46[24];
  _BYTE *v47;
  _BYTE v48[24];
  _BYTE *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v16 = (std::__shared_weak_count_vtbl *)operator new();
  std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::__value_func[abi:ne180100]((uint64_t)v42, a6);
  v17 = *a7;
  if (*a7)
    CFRetain(*a7);
  cf = v17;
  v18 = *a8;
  if (v18)
    CFRetain(v18);
  v45 = v18;
  v47 = 0;
  v19 = operator new(0x38uLL);
  *v19 = &off_1E2913710;
  std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::__value_func[abi:ne180100]((uint64_t)(v19 + 1), (uint64_t)v42);
  v20 = cf;
  if (cf)
    CFRetain(cf);
  v21 = v45;
  v19[5] = v20;
  v19[6] = v21;
  v45 = 0;
  v49 = v19;
  v47 = 0;
  APComponent::APComponent((uint64_t)v16, 1, 50, a2, a3, a4, a5, (uint64_t)v48);
  v22 = v49;
  if (v49 == v48)
  {
    v23 = 4;
    v22 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_12;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_12:
  v16->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E2907F68;
  v24 = (void *)*a7;
  if (v24)
    CFRetain(v24);
  v16[4].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v25 = (std::__shared_weak_count *)operator new();
  v25->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917E18;
  v25->__shared_weak_owners_ = 0;
  v25[1].__vftable = v16;
  *(_QWORD *)&v27 = v16;
  *((_QWORD *)&v27 + 1) = v25;
  on_zero_shared = (std::__shared_weak_count *)v16->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    v40 = v27;
    p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    v16->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v16;
    v16->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v25;
    std::__shared_weak_count::__release_weak(on_zero_shared);
    v27 = v40;
  }
  else
  {
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v33 = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v16->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v16;
    v16->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v25;
  }
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    v41 = v27;
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v27 = v41;
  }
LABEL_27:
  *a1 = v27;
  v36 = v47;
  if (v47 == v46)
  {
    v37 = 4;
    v36 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_32;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_32:
  if (v45)
    CFRelease(v45);
  if (cf)
    CFRelease(cf);
  result = v43;
  if (v43 == v42)
  {
    v39 = 4;
    result = v42;
  }
  else
  {
    if (!v43)
      return result;
    v39 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v39))();
}

void sub_18F0A5F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1}::~ArrayRef(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (_QWORD *)a1[3];
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void std::__shared_ptr_pointer<APComponent_RemoteV2 *,std::shared_ptr<APComponent_RemoteV2>::__shared_ptr_default_delete<APComponent_RemoteV2,APComponent_RemoteV2>,std::allocator<APComponent_RemoteV2>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<APComponent_RemoteV2 *,std::shared_ptr<APComponent_RemoteV2>::__shared_ptr_default_delete<APComponent_RemoteV2,APComponent_RemoteV2>,std::allocator<APComponent_RemoteV2>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void APComponent_RemoteV2::~APComponent_RemoteV2(APComponent *this)
{
  const void *v2;

  *(_QWORD *)this = off_1E2907F68;
  v2 = (const void *)*((_QWORD *)this + 20);
  if (v2)
    CFRelease(v2);
  APComponent::~APComponent(this);
}

{
  const void *v2;

  *(_QWORD *)this = off_1E2907F68;
  v2 = (const void *)*((_QWORD *)this + 20);
  if (v2)
    CFRelease(v2);
  APComponent::~APComponent(this);
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1},std::allocator<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__func(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_1E2913710;
  v2 = (const void *)a1[6];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (_QWORD *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void std::__function::__func<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1},std::allocator<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__func(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_1E2913710;
  v2 = (const void *)a1[6];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (_QWORD *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1},std::allocator<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = &off_1E2913710;
  std::__compressed_pair_elem<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_18F0A626C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1},std::allocator<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913710;
  return std::__compressed_pair_elem<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1},std::allocator<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1},std::allocator<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::destroy[abi:ne180100]((_QWORD *)(a1 + 8));
}

void std::__function::__func<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1},std::allocator<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::destroy_deallocate(_QWORD *a1)
{
  std::__function::__alloc_func<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1},std::allocator<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::destroy[abi:ne180100](a1 + 1);
  operator delete(a1);
}

uint64_t *std::__function::__func<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1},std::allocator<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::operator()(uint64_t a1, const AudioComponentDescription **a2)
{
  const AudioComponentDescription *v3;
  void *v4;
  uint64_t *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  AudioComponentDescription v22;
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", *(_QWORD *)(a1 + 48));
  v5 = (uint64_t *)operator new();
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v23, a1 + 8);
  v6 = *(void **)(a1 + 40);
  v7 = v4;
  v8 = v6;
  std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v23);
  v9 = v8;
  v10 = v7;
  AUv3InstanceBase::AUv3InstanceBase((AUv3InstanceBase *)v5, v3);
  *v5 = (uint64_t)&off_1E2904E88;
  v22 = *v3;
  std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::__value_func[abi:ne180100]((uint64_t)v27, (uint64_t)v25);
  AUHostingServiceClient::create(v5 + 50, &v22, v9, (uint64_t)v27, v10);
  v13 = v28;
  if (v28 == v27)
  {
    v14 = 4;
    v13 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v13 + 8 * v14))(v13, v11, v12);
LABEL_6:

  v17 = v26;
  if (v26 == v25)
  {
    v18 = 4;
    v17 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_11;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v17 + 8 * v18))(v17, v15, v16);
LABEL_11:
  *v5 = (uint64_t)&off_1E2906AE8;
  v19 = v24;
  if (v24 == v23)
  {
    v20 = 4;
    v19 = v23;
    goto LABEL_15;
  }
  if (v24)
  {
    v20 = 5;
LABEL_15:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v19 + 8 * v20))(v19, v15, v16);
  }

  return v5 + 1;
}

void sub_18F0A64A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  id *v23;
  void *v24;
  void *v25;
  void *v26;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v28 = a23;
  if (a23 == &a20)
  {
    v29 = 4;
    v28 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  AUv3InstanceBase::~AUv3InstanceBase(v23);

  v30 = a19;
  if (a19 == &a16)
  {
    v31 = 4;
    v30 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_11:
  v32 = a15;
  if (a15 == &a12)
  {
    v33 = 4;
    v32 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_16;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_16:
  MEMORY[0x193FFE460](v23, 0x10A1C4002A128E6);

  _Unwind_Resume(a1);
}

void RemoteV2Instance::~RemoteV2Instance(AUHostingServiceClient **this)
{
  *this = (AUHostingServiceClient *)&off_1E2904E88;
  std::unique_ptr<AUHostingServiceClient>::reset[abi:ne180100](this + 50, 0);
  AUv3InstanceBase::~AUv3InstanceBase((id *)this);
}

{
  *this = (AUHostingServiceClient *)&off_1E2904E88;
  std::unique_ptr<AUHostingServiceClient>::reset[abi:ne180100](this + 50, 0);
  AUv3InstanceBase::~AUv3InstanceBase((id *)this);
  JUMPOUT(0x193FFE460);
}

uint64_t AUv3InstanceXPC::Open(AUv3InstanceXPC *this, OpaqueAudioComponentInstance *a2)
{
  AUHostingServiceClient *v3;
  id v5;
  AUAudioUnit_RemoteV2 *v6;
  AUHostingServiceClient *v7;
  AUAudioUnit *v8;
  id v9;
  AUHostingServiceClient *v10;
  BOOL v11;
  os_log_t v12;
  uint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  id v17;
  __int128 v18;
  int v19;
  AUHostingServiceClient *v20;
  AudioComponentDescription v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = (AUHostingServiceClient *)*((_QWORD *)this + 50);
  if (v3 && (v21 = *(AudioComponentDescription *)((char *)this + 48), AUHostingServiceClient::loadRemotely(v3, &v21)))
  {
    v5 = *(id *)(*((_QWORD *)this + 50) + 72);
    v6 = [AUAudioUnit_RemoteV2 alloc];
    v7 = (AUHostingServiceClient *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = 0;
    v20 = v7;
    v18 = *((_OWORD *)this + 3);
    v19 = *((_DWORD *)this + 16);
    v17 = 0;
    v8 = -[AUAudioUnit_RemoteV2 initWithXPCService:componentDescription:instance:instanceUUID:error:](v6, "initWithXPCService:componentDescription:instance:instanceUUID:error:", &v20, &v18, a2, v5, &v17);
    v9 = v17;
    v10 = v20;
    v20 = 0;
    if (v10)
    {
      AUHostingServiceClient::~AUHostingServiceClient(v10);
      MEMORY[0x193FFE460]();
    }
    if (v8)
      v11 = v9 == 0;
    else
      v11 = 0;
    if (v11)
    {
      AUv3InstanceBase::DoOpen(this, a2, v8);
      v13 = 0;
    }
    else
    {
      if (gAudioComponentLogCategory)
      {
        v12 = *(os_log_t *)gAudioComponentLogCategory;
      }
      else
      {
        v14 = (_QWORD *)operator new();
        v14[1] = 0;
        v12 = os_log_create("com.apple.coreaudio", "audiocomp");
        *v14 = v12;
        gAudioComponentLogCategory = (uint64_t)v14;
      }
      v15 = objc_retainAutorelease(v12);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v23 = "AUNSExtension.mm";
        v24 = 1024;
        v25 = 490;
        v26 = 2112;
        v27 = v9;
        _os_log_impl(&dword_18EE07000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to open AudioUnit remotely: %@", buf, 0x1Cu);
      }
      (*(void (**)(AUv3InstanceXPC *))(*(_QWORD *)this + 8))(this);
      if (v9)
        v13 = objc_msgSend(v9, "code");
      else
        v13 = 4294956421;
    }

  }
  else
  {
    (*(void (**)(AUv3InstanceXPC *, OpaqueAudioComponentInstance *))(*(_QWORD *)this + 8))(this, a2);
    return 4294956421;
  }
  return v13;
}

void sub_18F0A685C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void AUv3InstanceXPC::OpenAsync(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[4];
  id v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a4;
  dispatch_get_global_queue(0, 0);
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN15AUv3InstanceXPC9OpenAsyncEP28OpaqueAudioComponentInstancejU13block_pointerFvS1_iE_block_invoke;
  block[3] = &unk_1E2922038;
  v11 = a1;
  v12 = a2;
  v10 = v6;
  v8 = v6;
  dispatch_async(v7, block);

}

uint64_t RemoteV2Instance::isRemoteV2(RemoteV2Instance *this)
{
  return 1;
}

uint64_t ___ZN15AUv3InstanceXPC9OpenAsyncEP28OpaqueAudioComponentInstancejU13block_pointerFvS1_iE_block_invoke(uint64_t a1)
{
  uint64_t v2;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)))
  {
    v2 = 0;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 48);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v2);
}

void AUv3InstanceBase::~AUv3InstanceBase(id *this)
{
  id *v2;
  id WeakRetained;
  id v4;
  id v5;
  void **v6;

  *this = off_1E2906710;
  v2 = this + 25;
  if (*((_BYTE *)this + 280))
  {
    WeakRetained = objc_loadWeakRetained(this + 25);
    objc_msgSend(WeakRetained, "removeObserver:forKeyPath:context:", this[34], CFSTR("parameterTree"), 0);

  }
  v4 = this[34];
  this[34] = 0;

  objc_destroyWeak(this + 41);
  std::__tree<std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUParameterGroup * {__strong}>>>::destroy(this[38]);

  v6 = this + 31;
  std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = this + 28;
  std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100](&v6);
  objc_destroyWeak(v2);

  AUv3RenderAdapter::~AUv3RenderAdapter((AUv3RenderAdapter *)(this + 17));
  v5 = this[16];
  this[16] = 0;
  if (v5)
    (*(void (**)(id))(*(_QWORD *)v5 + 8))(v5);
  v6 = this + 13;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);

}

void AUv3InstanceXPC::~AUv3InstanceXPC(AUHostingServiceClient **this)
{
  *this = (AUHostingServiceClient *)&off_1E2904E88;
  std::unique_ptr<AUHostingServiceClient>::reset[abi:ne180100](this + 50, 0);
  AUv3InstanceBase::~AUv3InstanceBase((id *)this);
}

{
  *this = (AUHostingServiceClient *)&off_1E2904E88;
  std::unique_ptr<AUHostingServiceClient>::reset[abi:ne180100](this + 50, 0);
  AUv3InstanceBase::~AUv3InstanceBase((id *)this);
  JUMPOUT(0x193FFE460);
}

void std::__function::__alloc_func<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1},std::allocator<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::destroy[abi:ne180100](_QWORD *a1)
{
  const void *v2;
  const void *v3;
  _QWORD *v4;

  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (_QWORD *)a1[3];
  if (v4 == a1)
  {
    (*(void (**)(_QWORD *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 40))(a1[3]);
  }
}

uint64_t std::__compressed_pair_elem<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<APComponent> create_shared_APComponent_Remote<RemoteV2Instance>(AudioComponentDescription const&,AUComponentFlags,applesauce::CF::StringRef const&,unsigned int,std::function<NSXPCConnection * ()(NSUUID *)>,applesauce::CF::ArrayRef const&,applesauce::CF::StringRef)::{lambda(AudioComponentDescription const*)#1} const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;

  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1, a2);
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
    CFRetain(*(CFTypeRef *)(a2 + 32));
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(const void **)(a2 + 40);
  if (v5)
    CFRetain(v5);
  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

void AUAudioUnitSubclassInstance::~AUAudioUnitSubclassInstance(id *this)
{
  AUv3InstanceBase::~AUv3InstanceBase(this);
  JUMPOUT(0x193FFE460);
}

uint64_t AUAudioUnitSubclassInstance::Open(Class *this, OpaqueAudioComponentInstance *a2)
{
  id v4;
  AUAudioUnit *v5;
  id v6;
  uint64_t v7;
  os_log_t v8;
  _QWORD *v9;
  NSObject *v10;
  id v12;
  __int128 v13;
  int v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc(this[50]);
  v13 = *((_OWORD *)this + 3);
  v14 = *((_DWORD *)this + 16);
  v12 = 0;
  v5 = (AUAudioUnit *)objc_msgSend(v4, "initWithComponentDescription:error:", &v13, &v12);
  v6 = v12;
  if (v5)
  {
    AUv3InstanceBase::DoOpen((AUv3InstanceBase *)this, a2, v5);
    v7 = 0;
  }
  else
  {
    if (gAudioComponentLogCategory)
    {
      v8 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      v9[1] = 0;
      v8 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v9 = v8;
      gAudioComponentLogCategory = (uint64_t)v9;
    }
    v10 = objc_retainAutorelease(v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v16 = "AUNSExtension.mm";
      v17 = 1024;
      v18 = 354;
      v19 = 2112;
      v20 = v6;
      _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to open AudioUnit extension: %@", buf, 0x1Cu);
    }
    (*((void (**)(Class *))*this + 1))(this);
    if (objc_msgSend(v6, "code"))
      v7 = objc_msgSend(v6, "code");
    else
      v7 = 0xFFFFFFFFLL;
  }

  return v7;
}

void sub_18F0A6DDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void AUAudioUnitSubclassInstance::OpenAsync(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void (**v7)(id, _QWORD, uint64_t);

  v7 = a4;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2);
  v7[2](v7, a2, v6);

}

void sub_18F0A6E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t initInterAppAudioLogging()
{
  if (initInterAppAudioLogging::once != -1)
    dispatch_once(&initInterAppAudioLogging::once, &__block_literal_global_10577);
  return kInterAppAudioScope;
}

os_log_t __initInterAppAudioLogging_block_invoke()
{
  _QWORD *v0;
  _QWORD *v1;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  *v0 = os_log_create("com.apple.coreaudio", "i-aa");
  kInterAppAudioScope = (uint64_t)v0;
  v1 = (_QWORD *)operator new();
  v1[1] = 0;
  result = os_log_create("com.apple.coreaudio", "auext");
  *v1 = result;
  kAUExtensionScope = (uint64_t)v1;
  return result;
}

void std::__function::__func<APComponent_NSExtension::APComponent_NSExtension(AudioComponentRegistrationInfo const&,NSString *,NSExtension *)::$_0,std::allocator<APComponent_NSExtension::APComponent_NSExtension(AudioComponentRegistrationInfo const&,NSString *,NSExtension *)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<APComponent_NSExtension::APComponent_NSExtension(AudioComponentRegistrationInfo const&,NSString *,NSExtension *)::$_0,std::allocator<APComponent_NSExtension::APComponent_NSExtension(AudioComponentRegistrationInfo const&,NSString *,NSExtension *)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915B58;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<APComponent_NSExtension::APComponent_NSExtension(AudioComponentRegistrationInfo const&,NSString *,NSExtension *)::$_0,std::allocator<APComponent_NSExtension::APComponent_NSExtension(AudioComponentRegistrationInfo const&,NSString *,NSExtension *)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::operator()(uint64_t a1, const AudioComponentDescription **a2)
{
  const AudioComponentDescription *v2;
  id *v3;
  id v4;
  AUv3InstanceBase *v5;
  id v6;

  v2 = *a2;
  v3 = *(id **)(a1 + 8);
  v4 = (id)(*((uint64_t (**)(id *))*v3 + 4))(v3);
  if (v3[21])
  {
    v5 = (AUv3InstanceBase *)operator new();
    v6 = v3[21];
    AUv3InstanceBase::AUv3InstanceBase(v5, v2);
    *(_QWORD *)v5 = &off_1E2908220;
    *((_QWORD *)v5 + 50) = v6;
  }
  else
  {
    v5 = 0;
  }
  if (v5)
    return (_QWORD *)((char *)v5 + 8);
  else
    return 0;
}

void sub_18F0A703C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  MEMORY[0x193FFE460](v1, 0x10A1C406BDEE126);
  _Unwind_Resume(a1);
}

void AUNSExtensionInstance::~AUNSExtensionInstance(id *this)
{

  AUv3InstanceBase::~AUv3InstanceBase(this);
}

{

  AUv3InstanceBase::~AUv3InstanceBase(this);
  JUMPOUT(0x193FFE460);
}

uint64_t AUNSExtensionInstance::Open(AUNSExtensionInstance *this, OpaqueAudioComponentInstance *a2)
{
  if (this)
    (*(void (**)(AUNSExtensionInstance *, OpaqueAudioComponentInstance *))(*(_QWORD *)this + 8))(this, a2);
  return 4294967292;
}

void AUNSExtensionInstance::OpenAsync(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;

  v7 = a4;
  v8 = *(_QWORD *)(a1 + 400);
  v14 = *(_OWORD *)(a1 + 48);
  v15 = *(_DWORD *)(a1 + 64);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN21AUNSExtensionInstance9OpenAsyncEP28OpaqueAudioComponentInstancejU13block_pointerFvS1_iE_block_invoke;
  v10[3] = &unk_1E2922010;
  v11 = v7;
  v12 = a1;
  v13 = a2;
  v9 = v7;
  +[AUAudioUnit_XH instantiateWithExtension:componentDescription:instance:options:completionHandler:](AUAudioUnit_XH, "instantiateWithExtension:componentDescription:instance:options:completionHandler:", v8, &v14, a2, a3, v10);

}

void sub_18F0A71AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void ___ZN21AUNSExtensionInstance9OpenAsyncEP28OpaqueAudioComponentInstancejU13block_pointerFvS1_iE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  AUAudioUnit *v5;
  id v6;
  os_log_t v7;
  _QWORD *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (gAudioComponentLogCategory)
    {
      v7 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v8 = (_QWORD *)operator new();
      v8[1] = 0;
      v7 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v8 = v7;
      gAudioComponentLogCategory = (uint64_t)v8;
    }
    v9 = objc_retainAutorelease(v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315650;
      v11 = "AUNSExtension.mm";
      v12 = 1024;
      v13 = 104;
      v14 = 2112;
      v15 = v6;
      _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to open AudioUnit extension: %@", (uint8_t *)&v10, 0x1Cu);
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, objc_msgSend(v6, "code"));
  }
  else
  {
    AUv3InstanceBase::DoOpen(*(AUv3InstanceBase **)(a1 + 40), *(OpaqueAudioComponentInstance **)(a1 + 48), v5);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_18F0A7344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

OSStatus AudioUnitExtensionSetComponentList(CFStringRef extensionIdentifier, CFArrayRef audioComponentInfo)
{
  OSStatus v4;
  __CFBundle *MainBundle;
  const __CFString *Identifier;
  const __CFString *v7;
  os_log_t v8;
  os_log_t v9;
  _QWORD *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  _QWORD *v16;
  NSObject *v17;
  _BYTE v18[18];
  __int16 v19;
  CFStringRef v20;
  __int16 v21;
  const __CFString *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (getenv("DYLD_FRAMEWORK_PATH"))
  {
LABEL_2:
    GlobalComponentPluginMgr((uint64_t *)v18);
    v4 = AudioComponentMgr_NSExtension::setExtensionComponentList(*(AudioComponentMgr_NSExtension **)&v18[8], &extensionIdentifier->isa, (NSArray *)audioComponentInfo);
    if (*(_QWORD *)v18)
      std::recursive_mutex::unlock(*(std::recursive_mutex **)v18);
    return v4;
  }
  MainBundle = CFBundleGetMainBundle();
  if (MainBundle && (Identifier = CFBundleGetIdentifier(MainBundle)) != 0)
  {
    v7 = Identifier;
    if (CFStringHasPrefix(extensionIdentifier, Identifier))
      goto LABEL_2;
    if (gAudioComponentLogCategory)
    {
      v8 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v16 = (_QWORD *)operator new();
      v16[1] = 0;
      v8 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v16 = v8;
      gAudioComponentLogCategory = (uint64_t)v16;
    }
    v4 = 1885696621;
    v17 = objc_retainAutorelease(v8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v18 = 136315906;
      *(_QWORD *)&v18[4] = "AUNSExtension.mm";
      *(_WORD *)&v18[12] = 1024;
      *(_DWORD *)&v18[14] = 397;
      v19 = 2112;
      v20 = extensionIdentifier;
      v21 = 2112;
      v22 = v7;
      v12 = "%25s:%-5d AudioUnitExtensionSetComponentList: failing because the extension identifier \"%@\" is not prefixe"
            "d by the main bundle ID \"%@\".";
      v13 = v17;
      v14 = 38;
      goto LABEL_14;
    }
  }
  else
  {
    if (gAudioComponentLogCategory)
    {
      v9 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v10 = (_QWORD *)operator new();
      v10[1] = 0;
      v9 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v10 = v9;
      gAudioComponentLogCategory = (uint64_t)v10;
    }
    v4 = 1651401791;
    v11 = objc_retainAutorelease(v9);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v18 = 136315394;
      *(_QWORD *)&v18[4] = "AUNSExtension.mm";
      *(_WORD *)&v18[12] = 1024;
      *(_DWORD *)&v18[14] = 392;
      v12 = "%25s:%-5d AudioUnitExtensionSetComponentList: failing because there is no main bundle or it has no identifier.";
      v13 = v11;
      v14 = 18;
LABEL_14:
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, v12, v18, v14);
    }
  }
  return v4;
}

void sub_18F0A75AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9)
    std::recursive_mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

CFArrayRef AudioUnitExtensionCopyComponentList(CFStringRef extensionIdentifier)
{
  void *v2;
  id v3;
  std::recursive_mutex *v5[2];

  GlobalComponentPluginMgr((uint64_t *)v5);
  AudioComponentMgr_NSExtension::getExtensionComponentList((AudioComponentMgr_NSExtension *)v5[1], &extensionIdentifier->isa);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5[0])
    std::recursive_mutex::unlock(v5[0]);
  if (v2)
    v3 = v2;

  return (CFArrayRef)v2;
}

void sub_18F0A7628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9)
    std::recursive_mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *create_shared_APComponent_RemoteV2(_OWORD *a1, uint64_t a2, CFTypeRef *a3, int a4, CFTypeRef *a5)
{
  _QWORD *result;
  uint64_t v6;
  const void *v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v7 = 0;
  create_shared_APComponent_Remote<RemoteV2Instance>(a1, a2, 0xFFFFFFFF, a3, a4, (uint64_t)v8, a5, &v7);
  result = v9;
  if (v9 == v8)
  {
    v6 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_18F0A76E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  applesauce::CF::StringRef::~StringRef((const void **)&a9);
  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(a1);
}

void create_shared_APComponent_RemoteV2WithExistingConnection(_OWORD *a1, uint64_t a2, void **a3, const void **a4)
{
  xpc_object_t v8;
  void *v9;
  const void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  CFTypeRef v15;
  void *v16;
  CFTypeRef cf;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  CFRetain(&stru_1E2923288);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, &stru_1E2923288);
  applesauce::xpc::object::object(&v16, *a3);
  v19 = 0;
  v18[0] = &off_1E2913830;
  v18[1] = v16;
  v8 = xpc_null_create();
  v9 = v16;
  v16 = v8;

  v19 = v18;
  v15 = 0;
  v10 = *a4;
  if (v10)
    CFRetain(v10);
  v14 = v10;
  create_shared_APComponent_Remote<RemoteV2Instance>(a1, a2, 0x20u, &cf, 0, (uint64_t)v18, &v15, &v14);
  if (v10)
    CFRelease(v10);
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_10;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_10:
  v13 = v16;
  v16 = 0;

  if (cf)
    CFRelease(cf);
}

void sub_18F0A7880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0,std::allocator<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0>,NSXPCConnection * ()(NSUUID *)>::~__func(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = &off_1E2913830;
  *(_QWORD *)(a1 + 8) = 0;

  return a1;
}

void std::__function::__func<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0,std::allocator<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0>,NSXPCConnection * ()(NSUUID *)>::~__func(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = &off_1E2913830;
  *(_QWORD *)(a1 + 8) = 0;

  JUMPOUT(0x193FFE460);
}

void **std::__function::__func<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0,std::allocator<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0>,NSXPCConnection * ()(NSUUID *)>::__clone(uint64_t a1)
{
  void **v2;

  v2 = (void **)operator new(0x10uLL);
  *v2 = &off_1E2913830;
  applesauce::xpc::object::object(v2 + 1, *(void **)(a1 + 8));
  return v2;
}

void **std::__function::__func<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0,std::allocator<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0>,NSXPCConnection * ()(NSUUID *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E2913830;
  return applesauce::xpc::object::object((void **)(a2 + 8), *(void **)(a1 + 8));
}

void std::__function::__func<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0,std::allocator<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0>,NSXPCConnection * ()(NSUUID *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

void std::__function::__func<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0,std::allocator<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0>,NSXPCConnection * ()(NSUUID *)>::destroy_deallocate(id *a1)
{
  id v2;

  v2 = a1[1];
  a1[1] = 0;

  operator delete(a1);
}

id std::__function::__func<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0,std::allocator<create_shared_APComponent_RemoteV2WithExistingConnection(AudioComponentDescription const&,applesauce::xpc::endpoint,applesauce::CF::StringRef)::$_0>,NSXPCConnection * ()(NSUUID *)>::operator()(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;

  v2 = (void *)objc_opt_new();
  v3 = *(id *)(a1 + 8);
  objc_msgSend(v2, "_setEndpoint:", v3);

  v4 = (void *)objc_msgSend((id)objc_opt_new(), "initWithListenerEndpoint:", v2);
  return v4;
}

void sub_18F0A7AC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *AUMetadata_log_category(void)
{
  unsigned __int8 v0;

  {
    qword_1EE145AA8 = 0;
    AUMetadata_log_category(void)::gLog = (uint64_t)os_log_create("com.apple.coreaudio", "AudioMetadata");
  }
  return &AUMetadata_log_category(void)::gLog;
}

void AudioMetadataFrame::AudioMetadataFrame(AudioMetadataFrame *this)
{
  _QWORD *v1;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v1 = (_QWORD *)MEMORY[0x1E0DDB4F0];
  if (!*MEMORY[0x1E0DDB4F0])
  {
    MEMORY[0x193FFDC98]();
    if (!*v1)
      __break(1u);
  }
}

void sub_18F0A7B98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](void *a1)
{
  caulk::rt_safe_memory_resource *result;

  result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
  if (*MEMORY[0x1E0DDB4F0])
    return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, a1);
  __break(1u);
  return result;
}

_QWORD *AudioMetadataFrame::AudioMetadataFrame(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void AudioMetadataFrame::~AudioMetadataFrame(AudioMetadataFrame *this)
{
  void *v2;

  v2 = *(void **)this;
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v2);
  }
}

{
  void *v2;

  v2 = *(void **)this;
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v2);
  }
}

uint64_t *AudioMetadataFrame::begin_new(uint64_t *result, unsigned int *__src)
{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int i;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  size_t v12;
  unsigned int *v13;
  char *v14;

  v3 = result;
  v4 = __src + 11;
  for (i = __src[10]; i; --i)
    v4 = (unsigned int *)((char *)v4 + v4[2]);
  v6 = (char *)v4 - (char *)__src;
  v7 = result[2];
  v8 = (char *)*result;
  if (v7 - *result < (char *)v4 - (char *)__src)
  {
    if (v8)
    {
      result[1] = (uint64_t)v8;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v8);
      v7 = 0;
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
    }
    if ((v6 & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = 2 * v7;
    if (2 * v7 <= v6)
      v9 = (char *)v4 - (char *)__src;
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    result = (uint64_t *)std::vector<char,caulk::rt_allocator<char>>::__vallocate[abi:ne180100](v3, v10);
    v8 = (char *)v3[1];
    goto LABEL_19;
  }
  v11 = (_BYTE *)result[1];
  v12 = v11 - v8;
  if (v11 - v8 >= v6)
  {
LABEL_19:
    if (v4 != __src)
      result = (uint64_t *)memmove(v8, __src, (char *)v4 - (char *)__src);
    v14 = &v8[v6];
    goto LABEL_22;
  }
  v13 = (unsigned int *)((char *)__src + v12);
  if (v11 != v8)
  {
    result = (uint64_t *)memmove((void *)*result, __src, v12);
    v8 = (char *)v3[1];
  }
  if (v4 != v13)
    result = (uint64_t *)memmove(v8, v13, (char *)v4 - (char *)v13);
  v14 = &v8[(char *)v4 - (char *)v13];
LABEL_22:
  v3[1] = (uint64_t)v14;
  return result;
}

uint64_t std::vector<char,caulk::rt_allocator<char>>::__vallocate[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  if (a2 < 0)
LABEL_5:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (!*MEMORY[0x1E0DDB4F0])
  {
    __break(1u);
    goto LABEL_5;
  }
  result = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
  *a1 = result;
  a1[1] = result;
  a1[2] = result + a2;
  return result;
}

uint64_t AudioMetadataFrame::append(uint64_t result, char *__src)
{
  uint64_t *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  caulk::concurrent::message *v6;

  if (*((_DWORD *)__src + 2) == 40)
  {
    v2 = (uint64_t *)result;
    AudioMetadataFrame::append(AudioMetadataEvent const&)::gInvalidEventCount = 0;
    result = (uint64_t)std::vector<char,caulk::rt_allocator<char>>::__insert_with_size[abi:ne180100]<char const*,char const*>(result, *(char **)(result + 8), __src, __src + 40, 40);
    v3 = *v2;
    if (!*v2 || (unint64_t)(v2[1] - v3) <= 0x2B)
      std::terminate();
    v4 = (int *)(v3 + 40);
  }
  else
  {
    if (AudioMetadataFrame::append(AudioMetadataEvent const&)::gInvalidEventCount > 0x1F3)
      return result;
    v5 = _os_log_pack_size();
    result = caulk::deferred_logger::create_message((caulk::deferred_logger *)gCADefaultDeferredLog, v5 + 88, 16);
    if (result)
    {
      v6 = (caulk::concurrent::message *)result;
      *(_WORD *)_os_log_pack_fill() = 0;
      result = caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gCADefaultDeferredLog + 16), v6);
    }
    v4 = &AudioMetadataFrame::append(AudioMetadataEvent const&)::gInvalidEventCount;
  }
  ++*v4;
  return result;
}

char *std::vector<char,caulk::rt_allocator<char>>::__insert_with_size[abi:ne180100]<char const*,char const*>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  char v24;
  _BYTE *v25;
  char *v26;
  _BYTE *v27;
  char v28;
  char *v29;
  _BYTE *v30;
  char *v31;
  char v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  char *v36;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v6 = a5;
  v7 = __src;
  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(v9 - v10) < a5)
  {
    v11 = *(char **)a1;
    v12 = v10 - *(_QWORD *)a1 + a5;
    if (v12 >= 0)
    {
      v13 = v9 - (_QWORD)v11;
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (!v14)
      {
        v15 = 0;
LABEL_26:
        v25 = (_BYTE *)(v15 + v5 - v11);
        v26 = &v25[v6];
        v27 = v25;
        do
        {
          v28 = *v7++;
          *v27++ = v28;
          --v6;
        }
        while (v6);
        v29 = *(char **)a1;
        v30 = v25;
        if (*(char **)a1 != v5)
        {
          v31 = v5;
          v30 = v25;
          do
          {
            v32 = *--v31;
            *--v30 = v32;
          }
          while (v31 != v29);
        }
        v33 = v15 + v14;
        v34 = *(_BYTE **)(a1 + 8);
        v35 = v34 - v5;
        if (v34 != v5)
          memmove(v26, v5, v34 - v5);
        v36 = *(char **)a1;
        *(_QWORD *)a1 = v30;
        *(_QWORD *)(a1 + 8) = &v26[v35];
        *(_QWORD *)(a1 + 16) = v33;
        if (v36)
          std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v36);
        return v25;
      }
      if (*MEMORY[0x1E0DDB4F0])
      {
        v15 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
        goto LABEL_26;
      }
      __break(1u);
    }
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  v16 = v10 - (_QWORD)__dst;
  if ((uint64_t)(v10 - (_QWORD)__dst) >= a5)
  {
    v17 = &__src[a5];
    v19 = *(_BYTE **)(a1 + 8);
LABEL_18:
    v20 = &v5[v6];
    v21 = &v19[-v6];
    v22 = v19;
    if ((unint64_t)&v19[-v6] < v10)
    {
      v23 = v6 + v10 - (_QWORD)v19;
      v22 = v19;
      do
      {
        v24 = *v21++;
        *v22++ = v24;
        --v23;
      }
      while (v23);
    }
    *(_QWORD *)(a1 + 8) = v22;
    if (v19 != v20)
      memmove(&v5[v6], v5, v19 - v20);
    if (v17 != v7)
      memmove(v5, v7, v17 - v7);
    return v5;
  }
  v17 = &__src[v16];
  v18 = a4 - &__src[v16];
  if (a4 != &__src[v16])
    memmove(*(void **)(a1 + 8), &__src[v16], a4 - &__src[v16]);
  v19 = (_BYTE *)(v10 + v18);
  *(_QWORD *)(a1 + 8) = v10 + v18;
  if (v16 >= 1)
    goto LABEL_18;
  return v5;
}

unint64_t *AudioMetadataFrame::insert(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char *v6;
  unint64_t v7;

  if (a3)
    v6 = (char *)AudioMetadataFrame::eventToImplIter(a1, a3);
  else
    v6 = (char *)a1[1];
  std::vector<char,caulk::rt_allocator<char>>::__insert_with_size[abi:ne180100]<char const*,char const*>((uint64_t)a1, v6, (char *)a4, (char *)(a4 + *(unsigned int *)(a4 + 8)), *(unsigned int *)(a4 + 8));
  v7 = *a1;
  if (!*a1 || a1[1] - v7 <= 0x2B)
    std::terminate();
  ++*(_DWORD *)(v7 + 40);
  return a1;
}

unint64_t AudioMetadataFrame::eventToImplIter(unint64_t *a1, unint64_t a2)
{
  if (*a1 >= a2 || a2 - *a1 > a1[1] - *a1)
    std::terminate();
  return a2;
}

uint64_t AudioMetadataFrame::erase(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  uint64_t v12;

  v3 = *a1;
  if (!*a1 || a1[1] - v3 <= 0x2B || !a3 || !*(_DWORD *)(v3 + 40))
    std::terminate();
  v7 = (char *)AudioMetadataFrame::eventToImplIter(a1, a3);
  v8 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v8)
  {
    v9 = v7;
    v10 = &v7[v8];
    v11 = (_BYTE *)a1[1];
    v12 = v11 - v10;
    if (v11 != v10)
      memmove(v7, v10, v11 - v10);
    a1[1] = (unint64_t)&v9[v12];
  }
  --*(_DWORD *)(v3 + 40);
  return a2;
}

BOOL AudioMetadataFrame::overlapsTimeRange(double **this, double a2, double a3)
{
  double *v3;
  double v4;
  double v5;
  _BOOL4 v6;

  v3 = *this;
  if (!*this || (unint64_t)((char *)this[1] - (char *)v3) <= 0x2B)
    std::terminate();
  v4 = *v3;
  v5 = v3[1];
  v6 = *v3 < a3;
  return v4 + v5 > a2 && v6;
}

CA::MetadataFrameQueue *CA::MetadataFrameQueue::MetadataFrameQueue(CA::MetadataFrameQueue *this)
{
  _QWORD *v2;
  CA::MetadataFrameQueue *result;

  *(_QWORD *)this = this;
  *((_QWORD *)this + 1) = this;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v2 = (_QWORD *)MEMORY[0x1E0DDB4F0];
  if (*MEMORY[0x1E0DDB4F0])
    return this;
  result = (CA::MetadataFrameQueue *)MEMORY[0x193FFDC98]();
  if (*v2)
    return this;
  __break(1u);
  return result;
}

void sub_18F0A82C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  caulk::rt_safe_memory_resource *v3;

  v3 = (caulk::rt_safe_memory_resource *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    std::allocator_traits<caulk::rt_allocator<AudioMetadataEvent const*>>::deallocate[abi:ne180100](v3, (uint64_t)(v1[5] - (_QWORD)v3) >> 3);
  }
  std::__list_imp<AudioMetadataFrame,caulk::rt_allocator<AudioMetadataFrame>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<AudioMetadataFrame,caulk::rt_allocator<AudioMetadataFrame>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    while (result != v1)
    {
      v4 = (_QWORD *)result[1];
      std::__list_imp<AudioMetadataFrame,caulk::rt_allocator<AudioMetadataFrame>>::__delete_node[abi:ne180100]<>(result);
      result = v4;
    }
  }
  return result;
}

caulk::rt_safe_memory_resource *std::__list_imp<AudioMetadataFrame,caulk::rt_allocator<AudioMetadataFrame>>::__delete_node[abi:ne180100]<>(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v2);
  }
  return std::allocator_traits<caulk::rt_allocator<std::__list_node<AudioMetadataFrame,void *>>>::deallocate[abi:ne180100](a1);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<std::__list_node<AudioMetadataFrame,void *>>>::deallocate[abi:ne180100](void *a1)
{
  caulk::rt_safe_memory_resource *result;

  result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
  if (*MEMORY[0x1E0DDB4F0])
    return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, a1);
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AudioMetadataEvent const*>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 61))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *CA::MetadataFrameQueue::appendFrame(CA::MetadataFrameQueue *this, double **a2)
{
  double *v4;
  double *v5;
  caulk::rt_safe_memory_resource *result;
  _QWORD *v7;
  double *v8;
  double *v9;
  size_t v10;
  char *v11;
  uint64_t v12;

  if (*((_QWORD *)this + 2))
  {
    v4 = *(double **)(*(_QWORD *)this + 16);
    if (!v4
      || *(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v4 <= 0x2BuLL
      || (v5 = *a2) == 0
      || (unint64_t)((char *)a2[1] - (char *)v5) <= 0x2B
      || *v5 < *v4 + v4[1])
    {
      std::terminate();
    }
  }
  result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
  if (*MEMORY[0x1E0DDB4F0])
  {
    v7 = (_QWORD *)caulk::rt_safe_memory_resource::rt_allocate(result);
    *v7 = 0;
    v7[1] = 0;
    v9 = *a2;
    v8 = a2[1];
    v7[2] = 0;
    result = (caulk::rt_safe_memory_resource *)(v7 + 2);
    v7[3] = 0;
    v7[4] = 0;
    v10 = (char *)v8 - (char *)v9;
    if (v8 != v9)
    {
      std::vector<char,caulk::rt_allocator<char>>::__vallocate[abi:ne180100]((uint64_t *)result, (char *)v8 - (char *)v9);
      v11 = (char *)v7[3];
      result = (caulk::rt_safe_memory_resource *)memmove(v11, v9, v10);
      v7[3] = &v11[v10];
    }
    v7[1] = this;
    v12 = *(_QWORD *)this;
    *v7 = *(_QWORD *)this;
    *(_QWORD *)(v12 + 8) = v7;
    *(_QWORD *)this = v7;
    ++*((_QWORD *)this + 2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_18F0A8520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  void *v9;

  std::__exception_guard_exceptions<std::vector<char,caulk::rt_allocator<char>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  std::allocator_traits<caulk::rt_allocator<std::__list_node<AudioMetadataFrame,void *>>>::deallocate[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<char,caulk::rt_allocator<char>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***a1)
{
  void **v2;
  void *v3;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = **a1;
    if (v3)
    {
      v2[1] = v3;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v3);
    }
  }
  return a1;
}

uint64_t *CA::MetadataFrameQueue::eraseBefore(CA::MetadataFrameQueue *this, double a2)
{
  uint64_t *result;
  double *v4;
  uint64_t v6;
  uint64_t *v7;

  result = (uint64_t *)*((_QWORD *)this + 1);
  v4 = (double *)result[2];
  if (!v4 || (unint64_t)(result[3] - (_QWORD)v4) < 0x2C)
LABEL_6:
    std::terminate();
  while (*v4 + v4[1] <= a2)
  {
    v6 = *result;
    v7 = (uint64_t *)result[1];
    *(_QWORD *)(v6 + 8) = v7;
    *(_QWORD *)result[1] = v6;
    --*((_QWORD *)this + 2);
    std::__list_imp<AudioMetadataFrame,caulk::rt_allocator<AudioMetadataFrame>>::__delete_node[abi:ne180100]<>(result);
    v4 = (double *)v7[2];
    if (v4)
    {
      result = v7;
      if ((unint64_t)(v7[3] - (_QWORD)v4) >= 0x2C)
        continue;
    }
    goto LABEL_6;
  }
  return result;
}

uint64_t CA::MetadataFrameQueue::extract(CA::MetadataFrameQueue *this, double a2, double a3, AudioMetadataFrame *a4)
{
  uint64_t v8;
  unsigned int v9;
  double v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char *v16;
  uint64_t v17;
  double v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  BOOL v33;
  double *v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t result;
  char **v40;
  char **v41;
  char *v42;
  _QWORD v43[3];
  __int16 v44;
  __int128 v45;

  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)this + 1);
  if ((CA::MetadataFrameQueue *)v8 == this)
    goto LABEL_52;
  v9 = 0;
  v10 = a2 + a3;
  do
  {
    if (!AudioMetadataFrame::overlapsTimeRange((double **)(v8 + 16), a2, a2 + a3))
    {
      v34 = *(double **)(v8 + 16);
      if (v34 && *(_QWORD *)(v8 + 24) - (_QWORD)v34 > 0x2BuLL)
      {
        if (*v34 < a2)
          goto LABEL_46;
        break;
      }
      goto LABEL_57;
    }
    v11 = (_QWORD *)*((_QWORD *)this + 4);
    v12 = (char *)v11 - *((_QWORD *)this + 3);
    v14 = *(_QWORD *)(v8 + 16);
    v13 = *(_QWORD *)(v8 + 24);
    v15 = (unint64_t)(v13 - v14) < 0x2C || v14 == 0;
    v16 = (char *)v11 - *((_QWORD *)this + 3);
    if (v15)
      goto LABEL_40;
    v17 = v14 + 44;
    do
    {
      v18 = *(double *)(v17 + 12);
      if (v18 >= a2 && v18 < v10)
      {
        v20 = *((_QWORD *)this + 5);
        if ((unint64_t)v11 < v20)
        {
          *v11++ = v17;
LABEL_33:
          *((_QWORD *)this + 4) = v11;
          v13 = *(_QWORD *)(v8 + 24);
          goto LABEL_34;
        }
        v21 = *((_QWORD *)this + 3);
        v22 = ((uint64_t)v11 - v21) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v23 = v20 - v21;
        v24 = v23 >> 2;
        if (v23 >> 2 <= (unint64_t)(v22 + 1))
          v24 = v22 + 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (!v25)
        {
          v26 = 0;
LABEL_27:
          v27 = (_QWORD *)(v26 + 8 * v22);
          *v27 = v17;
          v11 = v27 + 1;
          v29 = *((_QWORD *)this + 3);
          v28 = *((_QWORD *)this + 4);
          if (v28 == v29)
          {
            *(_QWORD *)&v31 = vdupq_n_s64(v28).u64[0];
          }
          else
          {
            do
            {
              v30 = *(_QWORD *)(v28 - 8);
              v28 -= 8;
              *--v27 = v30;
            }
            while (v28 != v29);
            v31 = *(_OWORD *)((char *)this + 24);
          }
          *((_QWORD *)this + 3) = v27;
          *((_QWORD *)this + 4) = v11;
          v32 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v26 + 8 * v25;
          if ((_QWORD)v31)
            std::allocator_traits<caulk::rt_allocator<AudioMetadataEvent const*>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v31, (v32 - (uint64_t)v31) >> 3);
          goto LABEL_33;
        }
        if (!(v25 >> 61) && *MEMORY[0x1E0DDB4F0])
        {
          v26 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
          goto LABEL_27;
        }
        __break(1u);
LABEL_57:
        std::terminate();
      }
LABEL_34:
      v33 = v17 + (unint64_t)*(unsigned int *)(v17 + 8) >= v13 - 1 || v17 == 0;
      v17 += *(unsigned int *)(v17 + 8);
    }
    while (!v33);
    v16 = (char *)v11 - *((_QWORD *)this + 3);
LABEL_40:
    if (v16 > v12)
      ++v9;
LABEL_46:
    v8 = *(_QWORD *)(v8 + 8);
  }
  while ((CA::MetadataFrameQueue *)v8 != this);
  if (v9 >= 2)
  {
    v35 = *((_QWORD *)this + 3);
    v36 = (uint64_t *)*((_QWORD *)this + 4);
    v37 = 126 - 2 * __clz((uint64_t)((uint64_t)v36 - v35) >> 3);
    if (v36 == (uint64_t *)v35)
      v38 = 0;
    else
      v38 = v37;
    std::__introsort<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**,false>(v35, v36, v38, 1);
  }
LABEL_52:
  *(double *)v43 = a2;
  *(double *)&v43[1] = a3;
  v43[2] = 0;
  v44 = 3;
  v45 = xmmword_18F117470;
  result = (uint64_t)AudioMetadataFrame::begin_new((uint64_t *)a4, (unsigned int *)v43);
  v41 = (char **)*((_QWORD *)this + 3);
  v40 = (char **)*((_QWORD *)this + 4);
  while (v41 != v40)
  {
    v42 = *v41++;
    result = AudioMetadataFrame::append((uint64_t)a4, v42);
  }
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *k;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t *j;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t *v56;
  BOOL v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t *v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = a2 - i;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v45 = *v8;
        v46 = *i;
        v47 = *(_DWORD *)(*v8 + 4);
        v48 = *(_DWORD *)(*i + 4);
        if (v47 == v48)
        {
          if (*(double *)(v45 + 12) >= *(double *)(v46 + 12))
            return result;
        }
        else if (v47 >= v48)
        {
          return result;
        }
        *i = v45;
        *v8 = v46;
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(i, i + 1, a2 - 1);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(i, i + 1, i + 2, a2 - 1);
      case 5uLL:
        v49 = i + 1;
        v50 = i + 2;
        v51 = i + 3;
        result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(i, i + 1, i + 2, i + 3);
        v52 = *v8;
        v53 = i[3];
        v54 = *(_DWORD *)(*v8 + 4);
        v55 = *(_DWORD *)(v53 + 4);
        if (v54 == v55)
        {
          if (*(double *)(v52 + 12) >= *(double *)(v53 + 12))
            return result;
        }
        else if (v54 >= v55)
        {
          return result;
        }
        *v51 = v52;
        *v8 = v53;
        v108 = *v51;
        v109 = *v50;
        v110 = *(_DWORD *)(*v51 + 4);
        v111 = *(_DWORD *)(*v50 + 4);
        if (v110 == v111)
        {
          if (*(double *)(v108 + 12) >= *(double *)(v109 + 12))
            return result;
        }
        else if (v110 >= v111)
        {
          return result;
        }
        *v50 = v108;
        *v51 = v109;
        v120 = *v49;
        v121 = *(_DWORD *)(*v49 + 4);
        if (v110 == v121)
        {
          if (*(double *)(v108 + 12) >= *(double *)(v120 + 12))
            return result;
        }
        else if (v110 >= v121)
        {
          return result;
        }
        i[1] = v108;
        i[2] = v120;
        v122 = *i;
        v123 = *(_DWORD *)(*i + 4);
        if (v110 == v123)
        {
          if (*(double *)(v108 + 12) >= *(double *)(v122 + 12))
            return result;
        }
        else if (v110 >= v123)
        {
          return result;
        }
        *i = v108;
        i[1] = v122;
        return result;
      default:
        if (v10 <= 191)
        {
          v56 = i + 1;
          v58 = i == a2 || v56 == a2;
          if ((a4 & 1) == 0)
          {
            if (v58)
              return result;
            while (1)
            {
              v112 = v7;
              v7 = v56;
              v114 = *v112;
              v113 = v112[1];
              v115 = *(_DWORD *)(v113 + 4);
              v116 = *(_DWORD *)(*v112 + 4);
              if (v115 == v116)
              {
                if (*(double *)(v113 + 12) < *(double *)(v114 + 12))
                  goto LABEL_194;
              }
              else if (v115 < v116)
              {
                do
                {
LABEL_194:
                  while (1)
                  {
                    v117 = v112;
                    v118 = *--v112;
                    v112[2] = v114;
                    v114 = v118;
                    v119 = *(_DWORD *)(v118 + 4);
                    if (v115 != v119)
                      break;
                    if (*(double *)(v113 + 12) >= *(double *)(v114 + 12))
                      goto LABEL_198;
                  }
                }
                while (v115 < v119);
LABEL_198:
                *v117 = v113;
              }
              v56 = v7 + 1;
              if (v7 + 1 == a2)
                return result;
            }
          }
          if (v58)
            return result;
          v59 = 0;
          v60 = i;
LABEL_113:
          v61 = v60;
          v60 = v56;
          v63 = *v61;
          v62 = v61[1];
          v64 = *(_DWORD *)(v62 + 4);
          v65 = *(_DWORD *)(*v61 + 4);
          if (v64 == v65)
          {
            if (*(double *)(v62 + 12) >= *(double *)(v63 + 12))
              goto LABEL_127;
          }
          else if (v64 >= v65)
          {
            goto LABEL_127;
          }
          v61[1] = v63;
          v66 = i;
          if (v61 == i)
            goto LABEL_126;
          v67 = v59;
          while (1)
          {
            v68 = *(uint64_t *)((char *)i + v67 - 8);
            v69 = *(_DWORD *)(v68 + 4);
            if (v64 == v69)
            {
              if (*(double *)(v62 + 12) >= *(double *)(v68 + 12))
              {
                v66 = v61;
                goto LABEL_126;
              }
            }
            else if (v64 >= v69)
            {
              v66 = (uint64_t *)((char *)i + v67);
LABEL_126:
              *v66 = v62;
LABEL_127:
              v56 = v60 + 1;
              v59 += 8;
              if (v60 + 1 == a2)
                return result;
              goto LABEL_113;
            }
            --v61;
            *(uint64_t *)((char *)i + v67) = v68;
            v67 -= 8;
            if (!v67)
            {
              v66 = i;
              goto LABEL_126;
            }
          }
        }
        if (!a3)
        {
          if (i == a2)
            return result;
          v70 = (v11 - 2) >> 1;
          v71 = v70;
          while (2)
          {
            v72 = v71;
            if (v70 < v71)
              goto LABEL_156;
            v73 = (2 * v71) | 1;
            v74 = &i[v73];
            if (2 * v72 + 2 >= (uint64_t)v11)
              goto LABEL_138;
            v75 = v74[1];
            result = *(unsigned int *)(*v74 + 4);
            v76 = *(_DWORD *)(v75 + 4);
            if ((_DWORD)result == v76)
            {
              if (*(double *)(*v74 + 12) >= *(double *)(v75 + 12))
              {
LABEL_138:
                v77 = *v74;
                v78 = i[v72];
                v79 = *(_DWORD *)(*v74 + 4);
                v80 = *(_DWORD *)(v78 + 4);
                if (v79 == v80)
                {
                  if (*(double *)(v77 + 12) < *(double *)(v78 + 12))
                    goto LABEL_156;
LABEL_142:
                  i[v72] = v77;
                  if (v70 < v73)
                  {
LABEL_143:
                    v81 = v74;
LABEL_155:
                    *v81 = v78;
                    goto LABEL_156;
                  }
                  while (2)
                  {
                    v82 = 2 * v73;
                    v73 = (2 * v73) | 1;
                    v81 = &i[v73];
                    v83 = v82 + 2;
                    if (v83 < (uint64_t)v11)
                    {
                      v84 = v81[1];
                      v85 = *(_DWORD *)(*v81 + 4);
                      v86 = *(_DWORD *)(v84 + 4);
                      if (v85 == v86)
                      {
                        if (*(double *)(*v81 + 12) >= *(double *)(v84 + 12))
                          goto LABEL_150;
                      }
                      else if (v85 >= v86)
                      {
                        goto LABEL_150;
                      }
                      ++v81;
                      v73 = v83;
                    }
LABEL_150:
                    v87 = *v81;
                    result = *(unsigned int *)(*v81 + 4);
                    if ((_DWORD)result == v80)
                    {
                      if (*(double *)(v87 + 12) < *(double *)(v78 + 12))
                        goto LABEL_143;
                    }
                    else if (result < v80)
                    {
                      goto LABEL_143;
                    }
                    *v74 = v87;
                    v74 = v81;
                    if (v70 < v73)
                      goto LABEL_155;
                    continue;
                  }
                }
                if (v79 >= v80)
                  goto LABEL_142;
LABEL_156:
                v71 = v72 - 1;
                if (v72)
                  continue;
                v88 = (unint64_t)v10 >> 3;
                while (2)
                {
                  v89 = 0;
                  v90 = *i;
                  v91 = i;
LABEL_159:
                  v92 = v91;
                  v91 += v89 + 1;
                  v93 = 2 * v89;
                  v89 = (2 * v89) | 1;
                  v94 = v93 + 2;
                  if (v94 < v88)
                  {
                    v95 = v91[1];
                    result = *(unsigned int *)(*v91 + 4);
                    v96 = *(_DWORD *)(v95 + 4);
                    if ((_DWORD)result == v96)
                    {
                      if (*(double *)(*v91 + 12) >= *(double *)(v95 + 12))
                        goto LABEL_165;
                    }
                    else if (result >= v96)
                    {
                      goto LABEL_165;
                    }
                    ++v91;
                    v89 = v94;
                  }
LABEL_165:
                  *v92 = *v91;
                  if (v89 > (uint64_t)((unint64_t)(v88 - 2) >> 1))
                  {
                    if (v91 == --a2)
                      goto LABEL_179;
                    *v91 = *a2;
                    *a2 = v90;
                    v97 = (char *)v91 - (char *)i + 8;
                    if (v97 >= 9)
                    {
                      v98 = ((unint64_t)v97 >> 3) - 2;
                      v99 = v98 >> 1;
                      v100 = &i[v98 >> 1];
                      v101 = *v100;
                      v90 = *v91;
                      v102 = *(_DWORD *)(*v100 + 4);
                      v103 = *(_DWORD *)(*v91 + 4);
                      if (v102 == v103)
                      {
                        if (*(double *)(v101 + 12) >= *(double *)(v90 + 12))
                          goto LABEL_180;
LABEL_172:
                        *v91 = v101;
                        if (v98 >= 2)
                        {
                          do
                          {
                            v104 = v99 - 1;
                            v99 = (v99 - 1) >> 1;
                            v91 = &i[v99];
                            v105 = *v91;
                            v106 = *(_DWORD *)(*v91 + 4);
                            if (v106 == v103)
                            {
                              if (*(double *)(v105 + 12) >= *(double *)(v90 + 12))
                                goto LABEL_173;
                            }
                            else if (v106 >= v103)
                            {
                              goto LABEL_173;
                            }
                            *v100 = v105;
                            v100 = &i[v99];
                          }
                          while (v104 > 1);
                        }
                        else
                        {
LABEL_173:
                          v91 = v100;
                        }
LABEL_179:
                        *v91 = v90;
                      }
                      else if (v102 < v103)
                      {
                        goto LABEL_172;
                      }
                    }
LABEL_180:
                    if (v88-- <= 2)
                      return result;
                    continue;
                  }
                  goto LABEL_159;
                }
              }
            }
            else if (result >= v76)
            {
              goto LABEL_138;
            }
            break;
          }
          ++v74;
          v73 = 2 * v72 + 2;
          goto LABEL_138;
        }
        v12 = v11 >> 1;
        v13 = &i[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(&v7[v11 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(v7, &v7[v11 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(v7 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        if ((a4 & 1) == 0)
        {
          v17 = *(v7 - 1);
          v18 = *(_DWORD *)(v17 + 4);
          v16 = *(_DWORD *)(v15 + 4);
          if (v18 == v16)
          {
            v16 = *(_DWORD *)(v17 + 4);
            if (*(double *)(v17 + 12) < *(double *)(v15 + 12))
              goto LABEL_23;
          }
          else if (v18 < v16)
          {
            goto LABEL_23;
          }
          v19 = *v8;
          v20 = *(_DWORD *)(*v8 + 4);
          if (v16 == v20)
          {
            if (*(double *)(v15 + 12) < *(double *)(v19 + 12))
              goto LABEL_65;
          }
          else if (v16 < v20)
          {
LABEL_65:
            for (i = v7 + 1; ; ++i)
            {
              v36 = *(_DWORD *)(*i + 4);
              if (v16 == v36)
              {
                if (*(double *)(v15 + 12) < *(double *)(*i + 12))
                  goto LABEL_71;
              }
              else if (v16 < v36)
              {
                goto LABEL_71;
              }
            }
          }
          for (i = v7 + 1; i < a2; ++i)
          {
            v21 = *(_DWORD *)(*i + 4);
            if (v16 == v21)
            {
              if (*(double *)(v15 + 12) < *(double *)(*i + 12))
                break;
            }
            else if (v16 < v21)
            {
              break;
            }
          }
LABEL_71:
          j = a2;
          if (i < a2)
          {
            for (j = a2 - 1; ; --j)
            {
              if (v16 == v20)
              {
                if (*(double *)(v15 + 12) >= *(double *)(v19 + 12))
                  break;
              }
              else if (v16 >= v20)
              {
                break;
              }
              v38 = *(j - 1);
              v19 = v38;
              v20 = *(_DWORD *)(v38 + 4);
            }
          }
          if (i >= j)
            goto LABEL_90;
          v39 = *i;
          v40 = *j;
          do
          {
            *i++ = v40;
            *j = v39;
            while (1)
            {
              v39 = *i;
              v41 = *(_DWORD *)(*i + 4);
              if (v16 == v41)
                break;
              if (v16 < v41)
                goto LABEL_87;
LABEL_85:
              ++i;
            }
            if (*(double *)(v15 + 12) >= *(double *)(v39 + 12))
              goto LABEL_85;
            do
            {
LABEL_87:
              while (1)
              {
                v42 = *--j;
                v40 = v42;
                v43 = *(_DWORD *)(v42 + 4);
                if (v16 == v43)
                  break;
                if (v16 >= v43)
                  goto LABEL_89;
              }
            }
            while (*(double *)(v15 + 12) < *(double *)(v40 + 12));
LABEL_89:
            ;
          }
          while (i < j);
LABEL_90:
          v44 = i - 1;
          if (i - 1 != v7)
            *v7 = *v44;
          a4 = 0;
          *v44 = v15;
          continue;
        }
        v16 = *(_DWORD *)(v15 + 4);
LABEL_23:
        v22 = v7 + 1;
        while (2)
        {
          v23 = *v22;
          v24 = *(_DWORD *)(*v22 + 4);
          if (v24 == v16)
          {
            if (*(double *)(v23 + 12) >= *(double *)(v15 + 12))
              break;
            goto LABEL_28;
          }
          if (v24 < v16)
          {
LABEL_28:
            ++v22;
            continue;
          }
          break;
        }
        v25 = v22 - 1;
        k = a2 - 1;
        if (v22 - 1 != v7)
        {
          while (1)
          {
            v27 = *(_DWORD *)(*k + 4);
            if (v27 == v16)
            {
              if (*(double *)(*k + 12) < *(double *)(v15 + 12))
                goto LABEL_44;
            }
            else if (v27 < v16)
            {
              goto LABEL_44;
            }
            --k;
          }
        }
        k = a2;
        if (v22 < a2)
        {
          for (k = a2 - 1; ; --k)
          {
            v28 = *(_DWORD *)(*k + 4);
            if (v28 == v16)
            {
              if (v22 >= k || *(double *)(*k + 12) < *(double *)(v15 + 12))
                break;
            }
            else if (v22 >= k || v28 < v16)
            {
              break;
            }
          }
        }
LABEL_44:
        if (v22 >= k)
          goto LABEL_58;
        v29 = *k;
        v30 = (unint64_t)v22;
        v31 = k;
        while (2)
        {
          *(_QWORD *)v30 = v29;
          v30 += 8;
          *v31 = v23;
          while (2)
          {
            v23 = *(_QWORD *)v30;
            v32 = *(_DWORD *)(*(_QWORD *)v30 + 4);
            if (v32 == v16)
            {
              if (*(double *)(v23 + 12) >= *(double *)(v15 + 12))
                break;
              goto LABEL_51;
            }
            if (v32 < v16)
            {
LABEL_51:
              v30 += 8;
              continue;
            }
            break;
          }
          v25 = (uint64_t *)(v30 - 8);
          do
          {
            while (1)
            {
              v33 = *--v31;
              v29 = v33;
              v34 = *(_DWORD *)(v33 + 4);
              if (v34 != v16)
                break;
              if (*(double *)(v29 + 12) < *(double *)(v15 + 12))
                goto LABEL_57;
            }
          }
          while (v34 >= v16);
LABEL_57:
          if (v30 < (unint64_t)v31)
            continue;
          break;
        }
LABEL_58:
        if (v25 != v7)
          *v7 = *v25;
        *v25 = v15;
        if (v22 < k)
        {
LABEL_63:
          result = std::__introsort<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**,false>(v7, v25, a3, a4 & 1);
          a4 = 0;
          i = v25 + 1;
          continue;
        }
        v35 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(v7, v25);
        i = v25 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(v25 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v35)
            continue;
          goto LABEL_63;
        }
        a2 = v25;
        if (!v35)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 4);
  v6 = *(_DWORD *)(*result + 4);
  if (v5 != v6)
  {
    if (v5 >= v6)
      goto LABEL_3;
LABEL_7:
    v9 = *a3;
    v10 = *(_DWORD *)(*a3 + 4);
    if (v10 == v5)
    {
      if (*(double *)(v9 + 12) >= *(double *)(v3 + 12))
      {
LABEL_9:
        *result = v3;
        *a2 = v4;
        v11 = *a3;
        v12 = *(_DWORD *)(*a3 + 4);
        if (v12 == v6)
        {
          if (*(double *)(v11 + 12) >= *(double *)(v4 + 12))
            return result;
        }
        else if (v12 >= v6)
        {
          return result;
        }
        *a2 = v11;
LABEL_20:
        *a3 = v4;
        return result;
      }
    }
    else if (v10 >= v5)
    {
      goto LABEL_9;
    }
    *result = v9;
    goto LABEL_20;
  }
  if (*(double *)(v3 + 12) < *(double *)(v4 + 12))
    goto LABEL_7;
LABEL_3:
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 4);
  if (v8 == v5)
  {
    if (*(double *)(v7 + 12) >= *(double *)(v3 + 12))
      return result;
  }
  else if (v8 >= v5)
  {
    return result;
  }
  *a2 = v7;
  *a3 = v3;
  v13 = *a2;
  v14 = *result;
  v15 = *(_DWORD *)(*a2 + 4);
  v16 = *(_DWORD *)(*result + 4);
  if (v15 == v16)
  {
    if (*(double *)(v13 + 12) < *(double *)(v14 + 12))
      goto LABEL_22;
  }
  else if (v15 < v16)
  {
LABEL_22:
    *result = v13;
    *a2 = v14;
  }
  return result;
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = *(_DWORD *)(*a4 + 4);
  v12 = *(_DWORD *)(*a3 + 4);
  if (v11 == v12)
  {
    if (*(double *)(v9 + 12) >= *(double *)(v10 + 12))
      return result;
  }
  else if (v11 >= v12)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v10;
  v13 = *a3;
  v14 = *a2;
  v15 = *(_DWORD *)(*a3 + 4);
  v16 = *(_DWORD *)(*a2 + 4);
  if (v15 == v16)
  {
    if (*(double *)(v13 + 12) >= *(double *)(v14 + 12))
      return result;
  }
  else if (v15 >= v16)
  {
    return result;
  }
  *a2 = v13;
  *a3 = v14;
  v17 = *a2;
  v18 = *a1;
  v19 = *(_DWORD *)(*a2 + 4);
  v20 = *(_DWORD *)(*a1 + 4);
  if (v19 != v20)
  {
    if (v19 >= v20)
      return result;
    goto LABEL_13;
  }
  if (*(double *)(v17 + 12) < *(double *)(v18 + 12))
  {
LABEL_13:
    *a1 = v17;
    *a2 = v18;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(_DWORD *)(v6 + 4);
      v9 = *(_DWORD *)(*a1 + 4);
      if (v8 == v9)
      {
        if (*(double *)(v6 + 12) >= *(double *)(v7 + 12))
          return result;
      }
      else if (v8 >= v9)
      {
        return result;
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v10 = a1 + 1;
      v11 = a1 + 2;
      v12 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(a1, a1 + 1, a1 + 2, a1 + 3);
      v13 = *(a2 - 1);
      v14 = a1[3];
      v15 = *(_DWORD *)(v13 + 4);
      v16 = *(_DWORD *)(v14 + 4);
      if (v15 == v16)
      {
        if (*(double *)(v13 + 12) >= *(double *)(v14 + 12))
          return 1;
      }
      else if (v15 >= v16)
      {
        return 1;
      }
      *v12 = v13;
      *(a2 - 1) = v14;
      v29 = *v12;
      v30 = *v11;
      v31 = *(_DWORD *)(*v12 + 4);
      v32 = *(_DWORD *)(*v11 + 4);
      if (v31 == v32)
      {
        if (*(double *)(v29 + 12) >= *(double *)(v30 + 12))
          return 1;
      }
      else if (v31 >= v32)
      {
        return 1;
      }
      *v11 = v29;
      *v12 = v30;
      v33 = *v10;
      v34 = *(_DWORD *)(*v10 + 4);
      if (v31 == v34)
      {
        if (*(double *)(v29 + 12) >= *(double *)(v33 + 12))
          return 1;
      }
      else if (v31 >= v34)
      {
        return 1;
      }
      a1[1] = v29;
      a1[2] = v33;
      v35 = *a1;
      v36 = *(_DWORD *)(*a1 + 4);
      if (v31 == v36)
      {
        if (*(double *)(v29 + 12) >= *(double *)(v35 + 12))
          return 1;
      }
      else if (v31 >= v36)
      {
        return 1;
      }
      *a1 = v29;
      a1[1] = v35;
      return 1;
    default:
      v17 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CA::MetadataFrameQueue::extract(double,double,AudioMetadataFrame &)::$_0 &,AudioMetadataEvent const**>(a1, a1 + 1, a1 + 2);
      v18 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v19 = 0;
      v20 = 0;
      break;
  }
  do
  {
    v21 = *v18;
    v22 = *v17;
    v23 = *(_DWORD *)(*v18 + 4);
    v24 = *(_DWORD *)(*v17 + 4);
    if (v23 == v24)
    {
      if (*(double *)(v21 + 12) >= *(double *)(v22 + 12))
        goto LABEL_25;
    }
    else if (v23 >= v24)
    {
      goto LABEL_25;
    }
    *v18 = v22;
    v25 = a1;
    if (v17 == a1)
      goto LABEL_24;
    v26 = v19;
    while (1)
    {
      v27 = *(uint64_t *)((char *)a1 + v26 + 8);
      v28 = *(_DWORD *)(v27 + 4);
      if (v23 == v28)
      {
        if (*(double *)(v21 + 12) >= *(double *)(v27 + 12))
        {
          v25 = (uint64_t *)((char *)a1 + v26 + 16);
          goto LABEL_24;
        }
        goto LABEL_21;
      }
      if (v23 >= v28)
        break;
LABEL_21:
      --v17;
      *(uint64_t *)((char *)a1 + v26 + 16) = v27;
      v26 -= 8;
      if (v26 == -16)
      {
        v25 = a1;
        goto LABEL_24;
      }
    }
    v25 = v17;
LABEL_24:
    *v25 = v21;
    if (++v20 == 8)
      return v18 + 1 == a2;
LABEL_25:
    v17 = v18;
    v19 += 8;
    ++v18;
  }
  while (v18 != a2);
  return 1;
}

void *AUInstanceBase::LookupMethod(AUInstanceBase *this)
{
  int v1;
  void *result;

  v1 = (_DWORD)this - 1;
  result = AUIB_Initialize;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = AUIB_Uninitialize;
      break;
    case 2:
      result = AUIB_GetPropertyInfo;
      break;
    case 3:
      result = AUIB_GetProperty;
      break;
    case 4:
      result = AUIB_SetProperty;
      break;
    case 5:
      result = AUIB_GetParameter;
      break;
    case 6:
      result = AUIB_SetParameter;
      break;
    case 7:
    case 11:
    case 12:
    case 18:
      goto LABEL_5;
    case 8:
      result = AUIB_Reset;
      break;
    case 9:
      result = AUIB_AddPropertyListener;
      break;
    case 10:
      result = AUIB_RemovePropertyListener;
      break;
    case 13:
      result = AUIB_Render;
      break;
    case 14:
      result = AUIB_AddRenderNotify;
      break;
    case 15:
      result = AUIB_RemoveRenderNotify;
      break;
    case 16:
      result = AUIB_ScheduleParameters;
      break;
    case 17:
      result = AUIB_RemovePropertyListenerWithUserData;
      break;
    case 19:
      result = AUIB_Process;
      break;
    case 20:
      result = AUIB_ProcessMultiple;
      break;
    default:
      if (AUIB_Initialize == 0x7FFF)
        result = AUIB_OpenAsync;
      else
LABEL_5:
        result = 0;
      break;
  }
  return result;
}

uint64_t AUIB_OpenAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
    v7 = a1 - 8;
  else
    v7 = 0;
  v8 = *(NSObject **)gAUInstanceLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v10 = 136315650;
    v11 = "AUInstanceBase.cpp";
    v12 = 1024;
    v13 = 69;
    v14 = 2048;
    v15 = v7;
    _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p OpenAsync", (uint8_t *)&v10, 0x1Cu);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, a2, a3, a4);
}

uint64_t AUIB_ScheduleParameters(char *a1, const AudioUnitParameterEvent *a2, int a3)
{
  if (!a3)
    return 0;
  if (!a2)
    return 4294967246;
  if (a1)
    return (*(uint64_t (**)(char *))(*((_QWORD *)a1 - 1) + 168))(a1 - 8);
  return (*(uint64_t (**)(_QWORD))(MEMORY[0] + 168))(0);
}

uint64_t AUIB_ProcessMultiple(char *a1, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, unsigned int a5, const AudioBufferList **a6, unsigned int a7, AudioBufferList **a8)
{
  uint64_t result;
  char *v10;
  int v11;

  result = 4294967246;
  if (a3 && a6 && a8)
  {
    if (!a2)
      a2 = (unsigned int *)&v11;
    v11 = 0;
    if (a1)
      v10 = a1 - 8;
    else
      v10 = 0;
    return (*(uint64_t (**)(char *, unsigned int *))(*(_QWORD *)v10 + 160))(v10, a2);
  }
  return result;
}

uint64_t AUIB_Process(char *a1, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, AudioBufferList *a5)
{
  uint64_t v5;
  char *v6;
  int v8;
  AudioBufferList *v9;

  v9 = a5;
  v5 = 4294967246;
  if (a3 && a5)
  {
    if (!a2)
      a2 = (unsigned int *)&v8;
    v8 = 0;
    if (a1)
      v6 = a1 - 8;
    else
      v6 = 0;
    return (*(uint64_t (**)(char *, unsigned int *))(*(_QWORD *)v6 + 160))(v6, a2);
  }
  return v5;
}

uint64_t AUIB_Render(char *a1, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, unsigned int a5, AudioBufferList *a6)
{
  uint64_t v6;
  char *v7;
  int v9;

  v6 = 4294967246;
  if (a3 && a6)
  {
    if (!a2)
      a2 = (unsigned int *)&v9;
    v9 = 0;
    if (a1)
      v7 = a1 - 8;
    else
      v7 = 0;
    return (*(uint64_t (**)(char *, unsigned int *))(*(_QWORD *)v7 + 152))(v7, a2);
  }
  return v6;
}

uint64_t AUIB_SetParameter(char *a1, __n128 a2)
{
  char *v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return (*(uint64_t (**)(char *, __n128))(*(_QWORD *)v2 + 144))(v2, a2);
}

uint64_t AUIB_GetParameter(char *a1, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  if (!a5)
    return 4294967246;
  if (a1)
    return (*(uint64_t (**)(char *))(*((_QWORD *)a1 - 1) + 136))(a1 - 8);
  return (*(uint64_t (**)(_QWORD))(MEMORY[0] + 136))(0);
}

uint64_t AUIB_RemoveRenderNotify(char *a1, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a3)
{
  if (!a2)
    return 4294967246;
  if (a1)
    return (*(uint64_t (**)(char *))(*((_QWORD *)a1 - 1) + 128))(a1 - 8);
  return (*(uint64_t (**)(_QWORD))(MEMORY[0] + 128))(0);
}

uint64_t AUIB_AddRenderNotify(char *a1, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a3)
{
  if (!a2)
    return 4294967246;
  if (a1)
    return (*(uint64_t (**)(char *))(*((_QWORD *)a1 - 1) + 120))(a1 - 8);
  return (*(uint64_t (**)(_QWORD))(MEMORY[0] + 120))(0);
}

uint64_t AUIB_RemovePropertyListenerWithUserData(char *a1, unsigned int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4)
{
  if (!a3)
    return 4294967246;
  if (a1)
    return (*(uint64_t (**)(char *))(*((_QWORD *)a1 - 1) + 112))(a1 - 8);
  return (*(uint64_t (**)(_QWORD))(MEMORY[0] + 112))(0);
}

uint64_t AUIB_RemovePropertyListener(char *a1, unsigned int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int))
{
  if (!a3)
    return 4294967246;
  if (a1)
    return (*(uint64_t (**)(char *))(*((_QWORD *)a1 - 1) + 112))(a1 - 8);
  return (*(uint64_t (**)(_QWORD))(MEMORY[0] + 112))(0);
}

uint64_t AUIB_AddPropertyListener(char *a1, unsigned int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4)
{
  if (!a3)
    return 4294967246;
  if (a1)
    return (*(uint64_t (**)(char *))(*((_QWORD *)a1 - 1) + 104))(a1 - 8);
  return (*(uint64_t (**)(_QWORD))(MEMORY[0] + 104))(0);
}

uint64_t AUIB_SetProperty(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  char *v5;

  if (a1)
    v5 = a1 - 8;
  else
    v5 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, const void *))(*(_QWORD *)v5 + 96))(v5, a2, a3, a4, a5);
}

uint64_t AUIB_GetProperty(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unsigned int *a6)
{
  char *v7;
  uint64_t result;
  NSObject *v9;
  char *v10;
  char v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v13 = "AUInstanceBase.cpp";
      v14 = 1024;
      v15 = 130;
      v16 = 2080;
      v17 = "AudioUnitGetProperty: null size pointer";
      v9 = MEMORY[0x1E0C81028];
LABEL_16:
      _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_debug_string: %s", buf, 0x1Cu);
    }
    return 4294967246;
  }
  if (a5)
  {
    if (*a6)
    {
      if (a1)
        v7 = a1 - 8;
      else
        v7 = 0;
      return (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 88))(v7);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v13 = "AUInstanceBase.cpp";
      v14 = 1024;
      v15 = 137;
      v16 = 2080;
      v17 = "AudioUnitGetProperty: zero size on entry";
      v9 = MEMORY[0x1E0C81028];
      goto LABEL_16;
    }
    return 4294967246;
  }
  *(_DWORD *)buf = 0;
  v11 = 0;
  if (a1)
    v10 = a1 - 8;
  else
    v10 = 0;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint8_t *, char *))(*(_QWORD *)v10 + 80))(v10, a2, a3, a4, buf, &v11);
  *a6 = *(_DWORD *)buf;
  return result;
}

uint64_t AUIB_GetPropertyInfo(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned __int8 *a6)
{
  char *v8;
  uint64_t result;
  unsigned __int8 v10;
  unsigned int v11;

  v11 = 0;
  v10 = 0;
  if (a1)
    v8 = a1 - 8;
  else
    v8 = 0;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, unsigned int *, unsigned __int8 *))(*(_QWORD *)v8 + 80))(v8, a2, a3, a4, &v11, &v10);
  if (a5)
    *a5 = v11;
  if (a6)
    *a6 = v10;
  return result;
}

uint64_t AUIB_Reset(char *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    v5 = a1 - 8;
  else
    v5 = 0;
  v6 = *(NSObject **)gAUInstanceLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v8 = 136315650;
    v9 = "AUInstanceBase.cpp";
    v10 = 1024;
    v11 = 107;
    v12 = 2048;
    v13 = v5;
    _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p Reset", (uint8_t *)&v8, 0x1Cu);
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, a2, a3);
}

uint64_t AUIB_Uninitialize(char *a1)
{
  char *v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = a1 - 8;
  else
    v1 = 0;
  v2 = *(NSObject **)gAUInstanceLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v4 = 136315650;
    v5 = "AUInstanceBase.cpp";
    v6 = 1024;
    v7 = 99;
    v8 = 2048;
    v9 = v1;
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p Uninitialize", (uint8_t *)&v4, 0x1Cu);
  }
  (*(void (**)(char *))(*(_QWORD *)v1 + 64))(v1);
  return 0;
}

uint64_t AUIB_Initialize(char *a1)
{
  char *v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = a1 - 8;
  else
    v1 = 0;
  v2 = *(NSObject **)gAUInstanceLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v4 = 136315650;
    v5 = "AUInstanceBase.cpp";
    v6 = 1024;
    v7 = 92;
    v8 = 2048;
    v9 = v1;
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p Initialize", (uint8_t *)&v4, 0x1Cu);
  }
  return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 56))(v1);
}

uint64_t gAUInstanceLog(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(gAUInstanceLog(void)::onceflag);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(gAUInstanceLog(void)::onceflag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<gAUInstanceLog(void)::$_0 &&>>);
  }
  return gAUInstanceLog(void)::global;
}

os_log_t std::__call_once_proxy[abi:ne180100]<std::tuple<gAUInstanceLog(void)::$_0 &&>>()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  result = os_log_create("com.apple.coreaudio", "auib");
  gAUInstanceLog(void)::global = (uint64_t)v0;
  *v0 = result;
  v0[1] = 6;
  return result;
}

uint64_t (*AUInstanceBase::LookupMethod_Music(AUInstanceBase *this))(char *a1)
{
  switch((_DWORD)this)
  {
    case 0x101:
      return AUIB_MIDIEvent;
    case 0x107:
      return (uint64_t (*)(char *))AUIB_MIDIEventList;
    case 0x102:
      return (uint64_t (*)(char *))AUIB_SysEx;
  }
  return (uint64_t (*)(char *))AUInstanceBase::LookupMethod(this);
}

uint64_t AUIB_MIDIEventList(char *a1, uint64_t a2, const MIDIEventList *a3)
{
  char *v3;

  if (a1)
    v3 = a1 - 8;
  else
    v3 = 0;
  return (*(uint64_t (**)(char *, uint64_t, const MIDIEventList *))(*(_QWORD *)v3 + 208))(v3, a2, a3);
}

uint64_t AUIB_SysEx(char *a1, const unsigned __int8 *a2)
{
  char *v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return (*(uint64_t (**)(char *, const unsigned __int8 *))(*(_QWORD *)v2 + 200))(v2, a2);
}

uint64_t AUIB_MIDIEvent(char *a1)
{
  if (a1)
    return (*(uint64_t (**)(char *))(*((_QWORD *)a1 - 1) + 192))(a1 - 8);
  else
    return (*(uint64_t (**)(_QWORD))(MEMORY[0] + 192))(0);
}

uint64_t (*AUInstanceBase::LookupMethod_Output(AUInstanceBase *this))(char *a1)
{
  if ((_DWORD)this == 513)
    return AUIB_Start;
  if ((_DWORD)this == 514)
    return AUIB_Stop;
  return (uint64_t (*)(char *))AUInstanceBase::LookupMethod(this);
}

uint64_t AUIB_Stop(char *a1)
{
  if (a1)
    return (*(uint64_t (**)(char *))(*((_QWORD *)a1 - 1) + 184))(a1 - 8);
  else
    return (*(uint64_t (**)(_QWORD))(MEMORY[0] + 184))(0);
}

uint64_t AUIB_Start(char *a1)
{
  if (a1)
    return (*(uint64_t (**)(char *))(*((_QWORD *)a1 - 1) + 176))(a1 - 8);
  else
    return (*(uint64_t (**)(_QWORD))(MEMORY[0] + 176))(0);
}

uint64_t AUIB_Open(char *a1, OpaqueAudioComponentInstance *a2)
{
  char *v3;
  NSObject *v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1)
    v3 = a1 - 8;
  else
    v3 = 0;
  v4 = *(NSObject **)gAUInstanceLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v6 = 136315650;
    v7 = "AUInstanceBase.cpp";
    v8 = 1024;
    v9 = 76;
    v10 = 2048;
    v11 = v3;
    _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p Open", (uint8_t *)&v6, 0x1Cu);
  }
  return (*(uint64_t (**)(char *, OpaqueAudioComponentInstance *))(*(_QWORD *)v3 + 32))(v3, a2);
}

uint64_t AUIB_Close(char *a1)
{
  char *v1;
  NSObject *v2;
  uint64_t v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = a1 - 8;
  else
    v1 = 0;
  v2 = *(NSObject **)gAUInstanceLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v5 = 136315650;
    v6 = "AUInstanceBase.cpp";
    v7 = 1024;
    v8 = 83;
    v9 = 2048;
    v10 = v1;
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p Close", (uint8_t *)&v5, 0x1Cu);
  }
  v3 = (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 48))(v1);
  (*(void (**)(char *))(*(_QWORD *)v1 + 8))(v1);
  return v3;
}

uint64_t std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    ExtendedAudioBufferList_Destroy(*(std::pmr **)a1);
  return a1;
}

OpaqueExtAudioFile *AudioConverterCapturer::setDecompressionCookie(AudioConverterCapturer *this, const void *inPropertyData, UInt32 a3)
{
  OpaqueExtAudioFile *result;

  if (*((_DWORD *)this + 8) == 1819304813)
    std::terminate();
  if (*((_QWORD *)this + 13))
    return (OpaqueExtAudioFile *)AudioFileSetProperty(*((AudioFileID *)this + 13), 0x6D676963u, a3, inPropertyData);
  result = (OpaqueExtAudioFile *)*((_QWORD *)this + 14);
  if (result)
    return (OpaqueExtAudioFile *)ExtAudioFileSetProperty(result, 0x6D676963u, a3, inPropertyData);
  return result;
}

OpaqueExtAudioFile *AudioConverterCapturer::write(AudioConverterCapturer *this, const AudioBufferList *ioData, const AudioStreamPacketDescription *inPacketDescriptions, UInt32 a4)
{
  OpaqueExtAudioFile *result;
  UInt32 mDataByteSize;
  UInt32 v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  UInt32 v15;
  const AudioBufferList *v16;
  void *mData;
  UInt32 v19;
  uint64_t v20;
  UInt32 v21;
  UInt32 v22;
  const AudioBufferList *v23;
  unsigned int *v24;
  unsigned int v25;
  char v26;
  UInt32 ioPropertyDataSize[2];
  UInt32 mNumberBuffers;
  char v29;

  result = (OpaqueExtAudioFile *)*((_QWORD *)this + 14);
  if (result)
  {
    if (*((_DWORD *)this + 8) != 1819304813)
      goto LABEL_28;
    mDataByteSize = ioData->mBuffers[0].mDataByteSize;
    v8 = *((_DWORD *)this + 12);
    if (v8 > mDataByteSize)
      return result;
    v9 = mDataByteSize / v8;
    if (*((_BYTE *)this + 129))
    {
      v10 = *((_DWORD *)this + 22) * v9;
      if (v10 > *((_DWORD *)this + 33))
      {
        if (*((_BYTE *)this + 144))
        {
          ExtendedAudioBufferList_Destroy(*((std::pmr **)this + 17));
          *((_BYTE *)this + 144) = 0;
        }
        CA::AudioBuffers::AudioBuffers((AudioConverterCapturer *)((char *)this + 136), (const AudioStreamBasicDescription *)((char *)this + 64), v10);
        *((_BYTE *)this + 144) = 1;
        *((_DWORD *)this + 33) = v9;
      }
      v11 = CA::AudioBuffers::Prepare(*((CA::AudioBuffers **)this + 17), *((_DWORD *)this + 23), v10);
      v12 = *((_QWORD *)this + 19);
      *(_QWORD *)ioPropertyDataSize = ioData;
      mNumberBuffers = ioData->mNumberBuffers;
      v29 = 0;
      v24 = v11;
      v25 = *v11;
      v26 = 0;
      (*(void (**)(uint64_t, uint64_t, UInt32 *, unsigned int **))(*(_QWORD *)v12 + 160))(v12, v9, ioPropertyDataSize, &v24);
      if (!*((_BYTE *)this + 128))
      {
LABEL_22:
        result = (OpaqueExtAudioFile *)*((_QWORD *)this + 14);
        v22 = v9;
        v23 = (const AudioBufferList *)v11;
LABEL_24:
        result = (OpaqueExtAudioFile *)ExtAudioFileWrite(result, v22, v23);
        goto LABEL_25;
      }
      if (*((_QWORD *)this + 15))
      {
LABEL_13:
        result = (OpaqueExtAudioFile *)*((_QWORD *)this + 14);
        v15 = v9;
        v16 = (const AudioBufferList *)v11;
LABEL_21:
        result = (OpaqueExtAudioFile *)ExtAudioFileWriteAsync(result, v15, v16);
LABEL_25:
        v20 = *((_QWORD *)this + 15) + v9;
        goto LABEL_26;
      }
      ioPropertyDataSize[0] = 4;
      LODWORD(v24) = 0;
      if (!ExtAudioFileGetProperty(*((ExtAudioFileRef *)this + 14), 0x696F6273u, ioPropertyDataSize, &v24))
      {
        v13 = v11[3];
        v14 = v13 >= v24;
        *((_BYTE *)this + 128) = v13 < v24;
        if (!v14)
          goto LABEL_13;
        goto LABEL_22;
      }
LABEL_28:
      std::terminate();
    }
    if (*((_BYTE *)this + 128))
    {
      if (*((_QWORD *)this + 15))
        goto LABEL_20;
      ioPropertyDataSize[0] = 4;
      LODWORD(v24) = 0;
      if (ExtAudioFileGetProperty(result, 0x696F6273u, ioPropertyDataSize, &v24))
        goto LABEL_28;
      v21 = ioData->mBuffers[0].mDataByteSize;
      result = (OpaqueExtAudioFile *)*((_QWORD *)this + 14);
      v14 = v21 >= v24;
      *((_BYTE *)this + 128) = v21 < v24;
      if (!v14)
      {
LABEL_20:
        v15 = v9;
        v16 = ioData;
        goto LABEL_21;
      }
    }
    v22 = v9;
    v23 = ioData;
    goto LABEL_24;
  }
  mData = ioData->mBuffers[0].mData;
  v19 = ioData->mBuffers[0].mDataByteSize;
  ioPropertyDataSize[0] = a4;
  result = (OpaqueExtAudioFile *)AudioFileWritePackets(*((AudioFileID *)this + 13), 0, v19, inPacketDescriptions, *((_QWORD *)this + 15), ioPropertyDataSize, mData);
  if ((_DWORD)result)
    return result;
  v20 = *((_QWORD *)this + 15) + ioPropertyDataSize[0];
LABEL_26:
  *((_QWORD *)this + 15) = v20;
  return result;
}

uint64_t acv2::CBRConverter::GetPropertyInfo(acv2::CBRConverter *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t result;
  unsigned __int16 v5;
  int v6;

  result = 1886547824;
  if (a2 <= 1836016242)
  {
    if (a2 != 1667850867 && a2 != 1668244083)
    {
      v6 = 1835623027;
      goto LABEL_11;
    }
  }
  else if (a2 > 2020175986)
  {
    if (a2 != 2020569203)
    {
      v5 = 28787;
      goto LABEL_10;
    }
  }
  else if (a2 != 1836016243)
  {
    v5 = 25203;
LABEL_10:
    v6 = v5 | 0x78690000;
LABEL_11:
    if (a2 != v6)
      return result;
  }
  if (a3)
    *a3 = 4;
  result = 0;
  if (a4)
    *a4 = 0;
  return result;
}

void sub_18F0AA864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F0AA90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18F0AAD3C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_18F0AB250(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<APComponent_FromBundle_Base *,std::shared_ptr<APComponent_FromBundle_Base>::__shared_ptr_default_delete<APComponent_FromBundle_Base,APComponent_FromBundle_Base>,std::allocator<APComponent_FromBundle_Base>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<APComponent_FromBundle_Base *,std::shared_ptr<APComponent_FromBundle_Base>::__shared_ptr_default_delete<APComponent_FromBundle_Base,APComponent_FromBundle_Base>,std::allocator<APComponent_FromBundle_Base>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_18F0AB38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)_ACPluginDBDirectory;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18F0AB448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F0AB580(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18F0AB61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F0ABCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void ****a19, uint64_t a20,uint64_t a21,uint64_t a22,void ***a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45)
{
  a19 = &a23;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a23 = &a45;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a45 = (void **)&a35;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a45);
  a45 = (void **)&a39;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a45);

  _Unwind_Resume(a1);
}

void sub_18F0ABFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18F0AC1E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F0AC494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_18F0AC610(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

double modDate(NSString *a1)
{
  NSString *v1;
  void *v2;
  void *v3;
  double v4;
  void *v5;
  void *v6;
  double v7;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "attributesOfItemAtPath:error:", v1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = 0.0;
  if (v3)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2A88]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      objc_msgSend(v5, "timeIntervalSinceReferenceDate");
      v4 = v7;

    }
  }

  return v4;
}

void sub_18F0AC73C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t eventStreamCallback(const __FSEventStream *a1, void *a2, unint64_t a3, void *a4, const unsigned int *a5, const unint64_t *a6)
{
  return objc_msgSend(a2, "eventStreamCallback:flags:", a4, a5);
}

void sub_18F0AC85C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F0AC8B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F0AC994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18F0ACA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F0ACE30(_Unwind_Exception *a1)
{
  unint64_t v1;

  STACK[0x270] = v1;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_18F0AD0CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AudioFileAllowListFilter::AudioFileAllowListFilter(__CFDictionary const*)::$_0::__invoke(CFNumberRef number, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;

  v3 = v4;
  std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(a2, *(char **)(a2 + 8), v4, v5, (v5 - v4) >> 2);
  if (v3)
    operator delete(v3);
}

void sub_18F0AD20C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AudioFileAllowListFilter::AudioFileAllowListFilter(__CFDictionary const*)::$_1::__invoke(__CFString *a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;

  v3 = v4;
  std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(a2, *(char **)(a2 + 8), v4, v5, (v5 - v4) >> 2);
  if (v3)
    operator delete(v3);
}

void sub_18F0AD290(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::addNewTypes(__int32 **a1, const void *a2, uint64_t a3, __int32 **a4)
{
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  __int32 v10;
  __int32 *v11;
  __int32 *v12;
  unint64_t v13;
  __int32 *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int32 v20;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, a2, a3, (a3 - (uint64_t)a2) >> 2);
  v6 = *a4;
  v7 = a4[1];
  if (*a4 != v7)
  {
    v8 = *a1;
    v9 = a1[1];
    do
    {
      v10 = *v6;
      v11 = wmemchr(v8, *v6, v9 - v8);
      if (v11)
        v12 = v11;
      else
        v12 = v9;
      v9 = a1[1];
      if (v12 == v9)
      {
        v13 = (unint64_t)a1[2];
        if ((unint64_t)v12 >= v13)
        {
          v14 = *a1;
          v15 = v9 - *a1;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v17 = v13 - (_QWORD)v14;
          if (v17 >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v18);
          else
            v19 = 0;
          v8 = (__int32 *)(v18 + 4 * v15);
          *v8 = v10;
          v9 = v8 + 1;
          while (v12 != v14)
          {
            v20 = *--v12;
            *--v8 = v20;
          }
          *a1 = v8;
          a1[1] = v9;
          a1[2] = (__int32 *)(v18 + 4 * v19);
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v12 = v10;
          v9 = v12 + 1;
        }
        a1[1] = v9;
      }
      ++v6;
    }
    while (v6 != v7);
  }
}

