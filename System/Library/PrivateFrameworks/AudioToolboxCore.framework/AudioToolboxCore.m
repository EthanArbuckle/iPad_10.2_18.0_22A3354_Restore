BOOL TOpaqueObject<AudioConverterAPI,OpaqueAudioConverter *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AudioConverterAPI>::sRTTI || a2 == (void *)MEMORY[0x1E0DDEC88];
}

uint64_t CreateACQDispatchID@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2;

  do
    v2 = __ldaxr((unsigned int *)&CreateACQDispatchID::s_dispatchSeqNum);
  while (__stlxr(v2 + 1, (unsigned int *)&CreateACQDispatchID::s_dispatchSeqNum));
  *(_DWORD *)a1 = v2;
  return clock_gettime(_CLOCK_REALTIME, (timespec *)(a1 + 8));
}

OSStatus AudioComponentGetDescription(AudioComponent inComponent, AudioComponentDescription *outDesc)
{
  uint64_t (***v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  OSStatus result;
  __int128 v7;

  if (!inComponent)
    return -3000;
  v3 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(AudioComponent))inComponent)(inComponent);
  if (!v3)
    return -3000;
  v4 = (**v3)(v3);
  if (!outDesc)
    return 0;
  v5 = v4;
  result = 0;
  v7 = *(_OWORD *)(v5 + 36);
  outDesc->componentFlagsMask = *(_DWORD *)(v5 + 52);
  *(_OWORD *)&outDesc->componentType = v7;
  return result;
}

uint64_t ExtendedAudioBufferList_Create(_anonymous_namespace_::EABLImpl *a1, int a2)
{
}

uint64_t DSPGraph::Box::asAUBox(DSPGraph::Box *this)
{
  return 0;
}

__n128 DSPGraph::AUBox::desc@<Q0>(DSPGraph::AUBox *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  a2[1].n128_u32[0] = *((_DWORD *)this + 210);
  result = *(__n128 *)((char *)this + 824);
  *a2 = result;
  return result;
}

uint64_t DSPGraph::Graph::numOutputs(DSPGraph::Graph *this)
{
  return (*((_QWORD *)this + 39) - *((_QWORD *)this + 38)) >> 3;
}

void DSPGraph::GraphOutput::copyOutput(DSPGraph::GraphOutput *this)
{
  DSPGraph::RingBuffer *v2;
  int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  char v10;

  v2 = (DSPGraph::GraphOutput *)((char *)this + 808);
  v3 = *((_DWORD *)this + 209);
  v4 = (*(uint64_t (**)(DSPGraph::GraphOutput *))(*(_QWORD *)this + 672))(this) * v3;
  v5 = (unsigned int *)*((_QWORD *)this + 106);
  v6 = DSPGraph::GraphOutput::preflight(this);
  v7 = *v5;
  if (v6 < *v5)
    v7 = v6;
  if (v4 >= v7)
    v4 = v7;
  *((double *)this + 107) = *((double *)this + 107) + (double)v4;
  **((_DWORD **)this + 106) = v4;
  v8 = (*(uint64_t (**)(DSPGraph::GraphOutput *))(*(_QWORD *)this + 672))(this);
  v9 = *(_QWORD *)(*((_QWORD *)this + 106) + 72);
  v10 = 0;
  DSPGraph::RingBuffer::read(v2, v4 / v8, v4 / v8, (DSPGraph::SimpleABL *)&v9);
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&v9);
}

void sub_18EE094F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *DSPGraph::Graph::processAll(DSPGraph::Graph *this)
{
  uint64_t CurrentTimeInNanos;
  caulk::concurrent::details::lf_read_sync_write_impl *v3;
  DSPGraph::Buffer **v4;
  DSPGraph::Buffer **v5;
  DSPGraph::IsoGroup **v6;
  DSPGraph::IsoGroup **v7;
  DSPGraph::GraphInput **v8;
  DSPGraph::GraphInput **v9;
  DSPGraph::IsoGroup **v10;
  DSPGraph::IsoGroup **v11;
  DSPGraph::GraphOutput **v12;
  DSPGraph::GraphOutput **v13;
  int v14;
  caulk::concurrent::details::lf_read_sync_write_impl *v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD v25[2];
  DSPGraph::Graph *v26;
  int v27;

  v25[0] = (char *)this + 1024;
  if (*((_QWORD *)this + 131))
    CurrentTimeInNanos = DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::GetCurrentTimeInNanos();
  else
    CurrentTimeInNanos = 0;
  v25[1] = CurrentTimeInNanos;
  v26 = this;
  atomic_store(1u, (unsigned __int8 *)this + 464);
  v3 = (caulk::concurrent::details::lf_read_sync_write_impl *)*((_QWORD *)this + 85);
  v27 = *((_DWORD *)this + 172);
  _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_5GraphEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(v3, (uint64_t *)&v26);
  v4 = (DSPGraph::Buffer **)*((_QWORD *)this + 24);
  v5 = (DSPGraph::Buffer **)*((_QWORD *)this + 25);
  while (v4 != v5)
  {
    DSPGraph::Buffer::setByteSize(*v4, *((_DWORD *)*v4 + 25));
    ++v4;
  }
  if (*((_BYTE *)this + 766))
  {
    v6 = (DSPGraph::IsoGroup **)*((_QWORD *)this + 32);
    v7 = (DSPGraph::IsoGroup **)*((_QWORD *)this + 33);
    while (v6 != v7)
      DSPGraph::IsoGroup::processAll(*v6++);
  }
  else
  {
    v8 = (DSPGraph::GraphInput **)*((_QWORD *)this + 35);
    v9 = (DSPGraph::GraphInput **)*((_QWORD *)this + 36);
    while (v8 != v9)
      DSPGraph::GraphInput::copyInput(*v8++);
    v10 = (DSPGraph::IsoGroup **)*((_QWORD *)this + 32);
    v11 = (DSPGraph::IsoGroup **)*((_QWORD *)this + 33);
    while (v10 != v11)
      DSPGraph::IsoGroup::processAll(*v10++);
    v12 = (DSPGraph::GraphOutput **)*((_QWORD *)this + 38);
    v13 = (DSPGraph::GraphOutput **)*((_QWORD *)this + 39);
    while (v12 != v13)
      DSPGraph::GraphOutput::copyOutput(*v12++);
  }
  v14 = *((_DWORD *)this + 172);
  v15 = (caulk::concurrent::details::lf_read_sync_write_impl *)(*((_QWORD *)this + 85) + 64);
  v26 = this;
  v27 = v14;
  _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_5GraphEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(v15, (uint64_t *)&v26);
  v16 = (_QWORD *)*((_QWORD *)this + 124);
  v17 = (_QWORD *)*((_QWORD *)this + 125);
  while (v16 != v17)
  {
    v18 = (unsigned int *)v16[1];
    v19 = (unsigned int *)v16[2];
    while (v18 != v19)
    {
      v20 = *v18;
      (*(void (**)(DSPGraph::Graph *, uint64_t))(*(_QWORD *)this + 48))(this, v20);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v16 + 40))(*v16, v20);
      ++v18;
    }
    v21 = (unsigned int *)v16[4];
    v22 = (unsigned int *)v16[5];
    while (v21 != v22)
    {
      v23 = *((_QWORD *)v21 + 1);
      LODWORD(v26) = v21[4] - v23;
      (*(void (**)(DSPGraph::Graph *, _QWORD, DSPGraph::Graph **, uint64_t))(*(_QWORD *)this + 72))(this, *v21, &v26, v23);
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)*v16 + 56))(*v16, *v21, v26, v23);
      v21 += 8;
    }
    v16 += 7;
  }
  *((_QWORD *)this + 88) += *((_QWORD *)this + 90);
  atomic_store(0, (unsigned __int8 *)this + 464);
  return DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::~DoTimePoint(v25);
}

void sub_18EE09700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  atomic_store(0, (unsigned __int8 *)(v9 + 464));
  DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::~DoTimePoint(&a9);
  _Unwind_Resume(a1);
}

double DSPGraph::IsoGroup::process(DSPGraph::IsoGroup *this, uint64_t a2)
{
  uint64_t **i;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  double result;

  for (i = (uint64_t **)*((_QWORD *)this + 14); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, uint64_t))(*i[2] + 704))(i[2], a2);
  v5 = (uint64_t *)*((_QWORD *)this + 28);
  v6 = (uint64_t *)*((_QWORD *)this + 29);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 464))(v7, a2);
  }
  result = *((double *)this + 32) + (double)a2;
  *((double *)this + 32) = result;
  return result;
}

uint64_t DSPGraph::GraphOutput::preflight(DSPGraph::GraphOutput *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 704);
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 304);
  v4 = (*(uint64_t (**)(DSPGraph::GraphOutput *))(*(_QWORD *)this + 672))(this);
  LODWORD(v2) = (v2 + v3 * (unint64_t)v4 - 1)
              / (v3
               * (unint64_t)v4)
              * (*(uint64_t (**)(DSPGraph::GraphOutput *))(*(_QWORD *)this + 672))(this);
  v5 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)(v5 + 704);
  v7 = *(_QWORD *)(v5 + 720);
  v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 304);
  v9 = (*(uint64_t (**)(DSPGraph::GraphOutput *))(*(_QWORD *)this + 672))(this);
  return ((v6 + v7 + v8 * (unint64_t)v9 - 1) / (v8 * (unint64_t)v9))
       * (*(unsigned int (**)(DSPGraph::GraphOutput *))(*(_QWORD *)this + 672))(this)
       - v2;
}

uint64_t DSPGraph::GraphOutput::ringBufferFramesPerPacket(DSPGraph::GraphOutput *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 64;
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "in");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1426, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 20);
}

void sub_18EE09928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::SingleRateLPCMConverterBox::process(DSPGraph::SingleRateLPCMConverterBox *this, int a2)
{
  uint64_t v3;
  char *v4;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t result;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  uint64_t *v39;
  __int128 v40;
  uint64_t v41;
  int v42;

  v4 = (char *)this + 88;
  v3 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "out");
    v30 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v30 = (_QWORD *)*v30;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v37, v30, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v40, 1418, &v38, &v37);
  }
  v6 = *(_DWORD **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) + 56) + 80);
  if (*v6)
  {
    v7 = 0;
    v8 = 3;
    do
    {
      v9 = *((_QWORD *)this + 11);
      if (*((_QWORD *)this + 12) == v9)
      {
        std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v38, "out");
        v29 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v29 = (_QWORD *)*v29;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v37, v29, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
        DSPGraph::ThrowException(1919837985, &v40, 1418, &v38, &v37);
      }
      v6[v8] = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120) + 24)
             * a2;
      ++v7;
      v8 += 4;
    }
    while (v7 < *v6);
  }
  v10 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "in");
    v31 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v31 = (_QWORD *)*v31;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v37, v31, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v40, 1410, &v38, &v37);
  }
  v11 = *((_QWORD *)this + 97);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  v13 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "out");
    v32 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v32 = (_QWORD *)*v32;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v37, v32, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v40, 1418, &v38, &v37);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v15 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13) + 56) + 80);
  v42 = a2;
  *(_QWORD *)&v37 = v14;
  v41 = v15;
  *(_QWORD *)&v38 = &v42;
  *((_QWORD *)&v38 + 1) = &v37;
  v39 = &v41;
  *(_QWORD *)&v40 = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertComplexBuffer::$_0>;
  *((_QWORD *)&v40 + 1) = &v38;
  with_resolved(v11, (uint64_t (**)(uint64_t, uint64_t))&v40);
  v16 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v16)
  {
    std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "in");
    v33 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v33 = (_QWORD *)*v33;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v37, v33, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v40, 1410, &v38, &v37);
  }
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  v18 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v18)
  {
    std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "out");
    v34 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v34 = (_QWORD *)*v34;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v37, v34, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v40, 1418, &v38, &v37);
  }
  v19 = *(_QWORD *)(v17 + 56);
  v20 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18) + 56);
  v21 = *(_OWORD *)(v19 + 8);
  v22 = *(_OWORD *)(v19 + 24);
  v23 = *(_OWORD *)(v19 + 40);
  *(_OWORD *)(v20 + 56) = *(_OWORD *)(v19 + 56);
  *(_OWORD *)(v20 + 40) = v23;
  *(_OWORD *)(v20 + 24) = v22;
  *(_OWORD *)(v20 + 8) = v21;
  v24 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v24)
  {
    std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "in");
    v35 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v35 = (_QWORD *)*v35;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v37, v35, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v40, 1410, &v38, &v37);
  }
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
  v26 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v26)
  {
    std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "out");
    v36 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v36 = (_QWORD *)*v36;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v37, v36, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v40, 1418, &v38, &v37);
  }
  v27 = *(_DWORD *)(*(_QWORD *)(v25 + 56) + 72);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
  *(_DWORD *)(*(_QWORD *)(result + 56) + 72) = v27;
  return result;
}

void sub_18EE09EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GraphInput::preflight(DSPGraph::GraphInput *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 704);
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 304);
  v4 = (*(uint64_t (**)(DSPGraph::GraphInput *))(*(_QWORD *)this + 672))(this);
  LODWORD(v2) = (v2 + v3 * (unint64_t)v4 - 1)
              / (v3
               * (unint64_t)v4)
              * (*(uint64_t (**)(DSPGraph::GraphInput *))(*(_QWORD *)this + 672))(this);
  v5 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)(v5 + 704);
  v7 = *(_QWORD *)(v5 + 720);
  v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 304);
  v9 = (*(uint64_t (**)(DSPGraph::GraphInput *))(*(_QWORD *)this + 672))(this);
  return ((v6 + v7 + v8 * (unint64_t)v9 - 1) / (v8 * (unint64_t)v9))
       * (*(unsigned int (**)(DSPGraph::GraphInput *))(*(_QWORD *)this + 672))(this)
       - v2;
}

uint64_t DSPGraph::GraphInput::ringBufferFramesPerPacket(DSPGraph::GraphInput *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "out");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1434, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 20);
}

void sub_18EE0A0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

_QWORD *DSPGraph::Box::doProcess(DSPGraph::Box *this, uint64_t a2)
{
  uint64_t CurrentTimeInNanos;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  DSPGraph::Buffer *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  caulk::concurrent::details::lf_read_sync_write_impl *v20;
  _BYTE **v21;
  _BYTE **v22;
  DSPGraph::FileInjector **v23;
  DSPGraph::FileInjector **v24;
  unint64_t i;
  unint64_t *v26;
  unint64_t *v27;
  caulk::concurrent::details::lf_read_sync_write_impl *v28;
  unsigned int v29;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v32 = (char *)this + 640;
  if (*((_QWORD *)this + 83))
    CurrentTimeInNanos = DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::GetCurrentTimeInNanos();
  else
    CurrentTimeInNanos = 0;
  v33 = CurrentTimeInNanos;
  if (*((_BYTE *)this + 744))
  {
    v5 = *((_QWORD *)this + 11);
    v6 = *((_QWORD *)this + 12) - v5;
    if ((v6 & 0x1FFFFFFFE0) != 0)
    {
      v7 = 0;
      v8 = 0;
      v9 = v6 >> 5;
      do
      {
        if (v9 <= v8)
        {
          std::string::basic_string[abi:ne180100]<0>(&v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v35, "out");
          v31 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v31 = (_QWORD *)*v31;
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v34, v31, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, v8, v32, v33);
          DSPGraph::ThrowException(1919837985, &v36, 1418, &v35, &v34);
        }
        v10 = v5 + v7;
        v11 = *(DSPGraph::Buffer **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + v7) + 40))(v5 + v7) + 56);
        v12 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) + 120) + 8);
        v13 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) + 120);
        if (v12 == 1819304813)
        {
          v14 = *(_DWORD *)(v13 + 24);
          v15 = a2;
        }
        else
        {
          if (*(_DWORD *)(v13 + 8) != 1718773105)
          {
            v16 = *((_DWORD *)v11 + 25);
            goto LABEL_14;
          }
          v15 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) + 120) + 24);
          v14 = 2 * a2;
        }
        v16 = v14 * v15;
LABEL_14:
        DSPGraph::Buffer::setByteSize(v11, v16);
        ++v8;
        v5 = *((_QWORD *)this + 11);
        v9 = (*((_QWORD *)this + 12) - v5) >> 5;
        v7 += 32;
      }
      while (v8 < v9);
    }
    v17 = (unsigned int *)((char *)this + 768);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 | 0x80000000, v17));
    v19 = *(_QWORD *)this;
    if (v18)
    {
      (*(void (**)(DSPGraph::Box *))(v19 + 480))(this);
      (*(void (**)(DSPGraph::Box *))(*(_QWORD *)this + 488))(this);
      v20 = (caulk::concurrent::details::lf_read_sync_write_impl *)*((_QWORD *)this + 92);
      *(_QWORD *)&v36 = this;
      DWORD2(v36) = a2;
      _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_3BoxEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(v20, (uint64_t *)&v36);
      (*(void (**)(DSPGraph::Box *, uint64_t))(*(_QWORD *)this + 472))(this, a2);
      v21 = (_BYTE **)*((_QWORD *)this + 25);
      v22 = (_BYTE **)*((_QWORD *)this + 26);
      while (v21 != v22)
      {
        if (((*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) & 0x1FFFFFFFE0) != 0
          || ((*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) & 0x1FFFFFFFE0) != 0)
        {
          DSPGraph::FileRecorder::record(*v21, a2);
        }
        ++v21;
      }
      v23 = (DSPGraph::FileInjector **)*((_QWORD *)this + 28);
      v24 = (DSPGraph::FileInjector **)*((_QWORD *)this + 29);
      while (v23 != v24)
        DSPGraph::FileInjector::inject(*v23++, a2);
      caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal((unsigned __int128 *)this + 35);
      for (i = atomic_load((unint64_t *)this + 45); ; i = atomic_load(v27))
      {
        v26 = (unint64_t *)(i & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t *)((char *)this + 520) == v26)
          break;
        v27 = v26 + 3;
        atomic_load(v26 + 3);
        if (*(_BYTE *)(*v26 + 28))
          (*(void (**)(unint64_t, _QWORD, uint64_t))(*(_QWORD *)*v26 + 64))(*v26, *(_QWORD *)(*(_QWORD *)(*v26 + 8) + 56), a2);
      }
      caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal((unsigned __int128 *)this + 35);
      v28 = (caulk::concurrent::details::lf_read_sync_write_impl *)(*((_QWORD *)this + 92) + 64);
      *(_QWORD *)&v36 = this;
      DWORD2(v36) = a2;
      _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_3BoxEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(v28, (uint64_t *)&v36);
    }
    else
    {
      (*(void (**)(DSPGraph::Box *, uint64_t))(v19 + 472))(this, a2);
    }
    do
      v29 = __ldaxr(v17);
    while (__stlxr(v29 & 0x7FFFFFFF, v17));
  }
  return DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::~DoTimePoint(&v32);
}

void sub_18EE0A46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  unsigned int *v31;
  unsigned int v33;

  do
    v33 = __ldaxr(v31);
  while (__stlxr(v33 & 0x7FFFFFFF, v31));
  DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::~DoTimePoint(&a12);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Port::wire(DSPGraph::Port *this)
{
  return *((_QWORD *)this + 2);
}

unsigned int **DSPGraph::SimpleABL::setByteSize(unsigned int **this, int a2)
{
  unsigned int *v2;
  uint64_t v3;
  _DWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = *this;
  if (!*this)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "setByteSize");
    std::string::basic_string[abi:ne180100]<0>(&v5, "null internal ABL");
    DSPGraph::ThrowException(1768843553, &v7, 588, &v6, &v5);
  }
  v3 = *v2;
  if ((_DWORD)v3)
  {
    v4 = v2 + 3;
    do
    {
      *v4 = a2;
      v4 += 4;
      --v3;
    }
    while (v3);
  }
  return this;
}

void sub_18EE0A598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

unsigned int **DSPGraph::Buffer::setByteSize(DSPGraph::Buffer *this, unsigned int a2)
{
  NSObject *v5;
  int v6;
  uint8_t buf[4];
  unsigned int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 25) < a2)
  {
    if (DSPGraph::getLog(void)::onceToken != -1)
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8423);
    v5 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_FAULT))
    {
      v6 = *((_DWORD *)this + 25);
      *(_DWORD *)buf = 67109376;
      v8 = a2;
      v9 = 1024;
      v10 = v6;
      _os_log_fault_impl(&dword_18EE07000, v5, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: DSPGraph buffer byte size %u is larger than byte capacity %u", buf, 0xEu);
    }
    snprintf((char *)buf, 0x400uLL, "DSPGraph assertion failure: DSPGraph buffer byte size %u is larger than byte capacity %u", a2, *((_DWORD *)this + 25));
    __break(1u);
  }
  return DSPGraph::SimpleABL::setByteSize((unsigned int **)this + 10, a2);
}

_QWORD *DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::~DoTimePoint(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v5;

  v2 = *a1;
  if (*(_QWORD *)(*a1 + 24))
  {
    v5 = (double)(unint64_t)(DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::GetCurrentTimeInNanos()
                                  - a1[1]);
    v3 = *(_QWORD *)(v2 + 24);
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, double *))(*(_QWORD *)v3 + 48))(v3, &v5);
  }
  return a1;
}

void DSPGraph::AUBox::process(DSPGraph::AUBox *this, UInt32 a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  AudioBufferList *v16;
  _DWORD *v17;
  OSStatus v18;
  uint64_t v19;
  vDSP_Length v20;
  uint64_t i;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  DSPGraph::Buffer *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  OSStatus v34;
  uint64_t *v35;
  uint64_t *v36;
  AudioUnitRenderActionFlags v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  int v48;
  __int128 v49;
  AudioTimeStamp __C;
  AudioUnitRenderActionFlags ioActionFlags;
  __int128 v52;
  __int128 v53;

  v4 = (*(uint64_t (**)(DSPGraph::AUBox *))(*(_QWORD *)this + 64))(this);
  v5 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  if (v4)
  {
    if (v6 == v5)
    {
      std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v53, "in");
      v44 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v44 = (_QWORD *)*v44;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v52, v44, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, (__int128 *)&__C, 1410, &v53, &v52);
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v8 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v8)
    {
      std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v53, "out");
      v46 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v46 = (_QWORD *)*v46;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v52, v46, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, (__int128 *)&__C, 1418, &v53, &v52);
    }
    v9 = *(_QWORD *)(v7 + 56);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v11 = *(_QWORD *)(v10 + 56);
    if (v11 != v9)
    {
      DSPGraph::Buffer::copyFrom(*(DSPGraph::Buffer **)(v10 + 56), (DSPGraph::Buffer *)v9);
      v12 = *(_OWORD *)(v9 + 8);
      v13 = *(_OWORD *)(v9 + 24);
      v14 = *(_OWORD *)(v9 + 40);
      *(_OWORD *)(v11 + 56) = *(_OWORD *)(v9 + 56);
      *(_OWORD *)(v11 + 40) = v14;
      *(_OWORD *)(v11 + 24) = v13;
      *(_OWORD *)(v11 + 8) = v12;
      *(_DWORD *)(v11 + 72) = *(_DWORD *)(v9 + 72);
    }
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(*((_QWORD *)this + 2) + 256);
    v15 = v11 + 8;
    v16 = *(AudioBufferList **)(v15 + 72);
    v17 = (_DWORD *)(v15 + 64);
    v18 = AudioUnitProcess(*((AudioUnit *)this + 106), (AudioUnitRenderActionFlags *)(v15 + 64), (const AudioTimeStamp *)v15, a2, v16);
    if (v18)
    {
      v48 = v18;
      std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v53, "process");
      std::operator+<char>();
      DSPGraph::ThrowException(v48, (__int128 *)&__C, 1892, &v53, &v52);
    }
    if ((*(_BYTE *)v17 & 0x10) != 0 && v16->mNumberBuffers)
    {
      v19 = 0;
      v20 = a2;
      for (i = 16; ; i += 16)
      {
        LODWORD(__C.mSampleTime) = 0;
        vDSP_maxmgv(*(const float **)((char *)&v16->mNumberBuffers + i), 1, (float *)&__C, v20);
        if (*(float *)&__C.mSampleTime != 0.0)
          break;
        if (++v19 >= (unint64_t)v16->mNumberBuffers)
          return;
      }
      *v17 &= ~0x10u;
    }
  }
  else
  {
    if (v6 == v5)
    {
      v5 = *((_QWORD *)this + 9);
    }
    else
    {
      v22 = 0;
      v23 = 0;
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 97) + 8 * v23++) = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + v22) + 40))(v5 + v22)
                                                                                + 56)
                                                                    + 80);
        v5 = *((_QWORD *)this + 8);
        v6 = *((_QWORD *)this + 9);
        v22 += 32;
      }
      while (v23 < (v6 - v5) >> 5);
    }
    v24 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) != v24)
    {
      v25 = 0;
      v26 = 0;
      do
      {
        v27 = v24 + v25;
        v28 = *(DSPGraph::Buffer **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v24 + v25) + 40))(v24 + v25) + 56);
        *(_QWORD *)(*((_QWORD *)this + 100) + 8 * v26) = *((_QWORD *)v28 + 10);
        v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
        DSPGraph::Buffer::setByteSize(v28, *(_DWORD *)(*(_QWORD *)(v29 + 120) + 24) * a2);
        ++v26;
        v24 = *((_QWORD *)this + 11);
        v25 += 32;
      }
      while (v26 < (*((_QWORD *)this + 12) - v24) >> 5);
      v5 = *((_QWORD *)this + 8);
      v6 = *((_QWORD *)this + 9);
    }
    if (v6 == v5)
    {
      std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v53, "in");
      v45 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v45 = (_QWORD *)*v45;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v52, v45, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, (__int128 *)&__C, 1410, &v53, &v52);
    }
    v30 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 56);
    ioActionFlags = 0;
    v31 = *(_OWORD *)(v30 + 24);
    v32 = *(_OWORD *)(v30 + 56);
    v33 = *(_OWORD *)(v30 + 8);
    *(_OWORD *)&__C.mSMPTETime.mSubframes = *(_OWORD *)(v30 + 40);
    *(_OWORD *)&__C.mSMPTETime.mHours = v32;
    *(_OWORD *)&__C.mSampleTime = v33;
    *(_OWORD *)&__C.mRateScalar = v31;
    __C.mSampleTime = *(Float64 *)(*((_QWORD *)this + 2) + 256);
    v34 = AudioUnitProcessMultiple(*((AudioUnit *)this + 106), &ioActionFlags, &__C, a2, (*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, *((const AudioBufferList ***)this + 97), (*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, *((AudioBufferList ***)this + 100));
    if (v34)
    {
      v47 = v34;
      std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v52, "process");
      std::operator+<char>();
      DSPGraph::ThrowException(v47, &v53, 1926, &v52, &v49);
    }
    v35 = (uint64_t *)*((_QWORD *)this + 11);
    v36 = (uint64_t *)*((_QWORD *)this + 12);
    if (v35 != v36)
    {
      v37 = ioActionFlags;
      v38 = v35;
      do
      {
        v39 = *v38;
        v38 += 4;
        v40 = *(_QWORD *)((*(uint64_t (**)(void))(v39 + 40))() + 56);
        v42 = *(_OWORD *)&__C.mSMPTETime.mSubframes;
        v41 = *(_OWORD *)&__C.mSMPTETime.mHours;
        v43 = *(_OWORD *)&__C.mRateScalar;
        *(_OWORD *)(v40 + 8) = *(_OWORD *)&__C.mSampleTime;
        *(_OWORD *)(v40 + 24) = v43;
        *(_OWORD *)(v40 + 40) = v42;
        *(_OWORD *)(v40 + 56) = v41;
        *(_DWORD *)(v40 + 72) = v37;
      }
      while (v38 != v36);
    }
  }
}

void sub_18EE0AC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 73) < 0)
    operator delete(*(void **)(v23 - 96));
  if (*(char *)(v23 - 49) < 0)
    operator delete(*(void **)(v23 - 72));
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

OSStatus AudioUnitProcess(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  uint64_t v6;
  uint64_t (***v9)(_QWORD);
  uint64_t (***v10)(_QWORD);
  uint64_t (*v11)(uint64_t (**)(_QWORD), AudioUnitRenderActionFlags *, const AudioTimeStamp *, uint64_t, AudioBufferList *);

  if (!inUnit)
    return -50;
  v6 = *(_QWORD *)&inNumberFrames;
  v9 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v9)
    return -4;
  v10 = v9;
  if (*(_WORD *)((**v9)(v9) + 38) == 24949)
  {
    v11 = *(uint64_t (**)(uint64_t (**)(_QWORD), AudioUnitRenderActionFlags *, const AudioTimeStamp *, uint64_t, AudioBufferList *))(*(_QWORD *)((**v10)(v10) + 112) + 128);
    if (v11)
      return v11(v10[3], ioActionFlags, inTimeStamp, v6, ioData);
    return -4;
  }
  return -3000;
}

uint64_t DSPGraph::AUBox::canProcessInPlace(DSPGraph::AUBox *this)
{
  return *((unsigned __int8 *)this + 856);
}

OSStatus AudioUnitSetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (***v11)(_QWORD);
  uint64_t (***v12)(_QWORD);
  uint64_t v13;
  uint64_t (**v14)(_QWORD);
  _OWORD *v16;
  uint64_t (**v17)(_QWORD);
  uint64_t (**v18)(_QWORD);
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t (**v22)(_QWORD);
  uint64_t (**v23)(_QWORD);
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  uint64_t (**v29)(_QWORD);
  uint64_t (**v30)(_QWORD);
  uint64_t (**v31)(_QWORD);
  int v32;
  uint64_t (**v33)(_QWORD);
  void *v34;
  uint64_t (**v35)(_QWORD);
  _BYTE *v36;
  uint64_t (**v37)(_QWORD);
  uint64_t aBlock;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t (***v42)(_QWORD);
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;

  if (!inUnit)
    return -50;
  v6 = *(_QWORD *)&inDataSize;
  v8 = *(_QWORD *)&inElement;
  v9 = *(_QWORD *)&inScope;
  v10 = *(_QWORD *)&inID;
  v11 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v11)
    return 560947818;
  v12 = v11;
  if (*(_WORD *)((**v11)(v11) + 38) != 24949)
    return -3000;
  if (!*(_QWORD *)(*(_QWORD *)((**v12)(v12) + 112) + 32))
    return -4;
  if (!v12[3])
    return -66740;
  v13 = *(_QWORD *)((**v12)(v12) + 112);
  if (!*((_BYTE *)v12 + 88) || (v10 - 48) > 0x11 || ((0x28001u >> (v10 - 48)) & 1) == 0)
    return (*(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t, const void *, uint64_t))(v13 + 32))(v12[3], v10, v9, v8, inData, v6);
  v14 = v12[3];
  if ((_DWORD)v10 == 48)
  {
    v16 = v12 + 15;
    if (inData)
    {
      *v16 = *(_OWORD *)inData;
    }
    else
    {
      *(_QWORD *)v16 = 0;
      v12[16] = 0;
    }
  }
  else
  {
    if ((_DWORD)v10 != 63)
    {
      if ((_DWORD)v10 == 65)
      {
        if ((_DWORD)v6 != 4)
          return -10851;
        *((_DWORD *)v12 + 26) = *(_DWORD *)inData;
        (*(void (**)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t, const void *, uint64_t))(v13 + 32))(v14, 65, v9, v8, inData, 4);
      }
      return 0;
    }
    if (inData)
    {
      v17 = (uint64_t (**)(_QWORD))_Block_copy(*(const void **)inData);
      v18 = v12[17];
      v12[17] = v17;
    }
    else
    {
      v18 = v12[17];
      v12[17] = 0;
    }

  }
  if (v12[17])
  {
    if (*((_DWORD *)v12 + 26))
    {
      v19 = (std::__shared_weak_count *)operator new(0xB40uLL);
      v19->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917AD0;
      bzero(&v19[1], 0xB24uLL);
      aBlock = MEMORY[0x1E0C809B0];
      v39 = 3321888768;
      v40 = ___ZN12APMIDIRouter17handleSetPropertyEPvRK23AudioUnitPluginDispatchjjjPKvj_block_invoke_2;
      v41 = &__block_descriptor_56_ea8_40c55_ZTSNSt3__110shared_ptrIN4MIDI20DynamicMIDIConverterEEE_e61_i28__0q8C16r__MIDIEventList_iI_1_MIDIEventPacket_QI_64I____20l;
      v42 = v12 + 11;
      v43 = v19 + 1;
      v44 = v19;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      v22 = (uint64_t (**)(_QWORD))_Block_copy(&aBlock);
      v23 = v12[20];
      v12[20] = v22;

      v24 = v44;
      if (v44)
      {
        v25 = (unint64_t *)&v44->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      v28 = 1;
      goto LABEL_45;
    }
    v29 = v12[15];
    v28 = 1;
  }
  else
  {
    v29 = v12[15];
    v28 = v29 != 0;
    if (*((_DWORD *)v12 + 26))
      goto LABEL_45;
  }
  if (!v29)
    return -4;
  aBlock = MEMORY[0x1E0C809B0];
  v39 = 3221225472;
  v40 = ___ZN12APMIDIRouter17handleSetPropertyEPvRK23AudioUnitPluginDispatchjjjPKvj_block_invoke;
  v41 = &__block_descriptor_40_e61_i28__0q8C16r__MIDIEventList_iI_1_MIDIEventPacket_QI_64I____20l;
  v42 = v12 + 11;
  v30 = (uint64_t (**)(_QWORD))_Block_copy(&aBlock);
  v31 = v12[20];
  v12[20] = v30;

LABEL_45:
  (*(void (**)(uint64_t (**)(_QWORD), uint64_t, _QWORD, uint64_t, uint64_t (***)(_QWORD), uint64_t))(v13 + 32))(v14, 63, 0, v8, v12 + 20, 8);
  v32 = *((_DWORD *)v12 + 26);
  if (v32 == 2)
  {
    if (v12[17])
    {
      v34 = (void *)operator new();
      bzero(v34, 0x824uLL);
      v35 = v12[22];
      v12[22] = (uint64_t (**)(_QWORD))v34;
      if (v35)
        MEMORY[0x193FFE460](v35, 0x1000C40C4F964E4);
      v33 = (uint64_t (**)(_QWORD))APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_2::__invoke;
      goto LABEL_58;
    }
  }
  else if (v32 == 1)
  {
    if (v12[17])
    {
      v36 = (_BYTE *)operator new();
      *v36 = 0;
      v37 = v12[21];
      v12[21] = (uint64_t (**)(_QWORD))v36;
      if (v37)
        MEMORY[0x193FFE460](v37, 0xC400A2AC0F1);
      v33 = (uint64_t (**)(_QWORD))APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_1::__invoke;
      goto LABEL_58;
    }
  }
  else
  {
    if (v32)
      goto LABEL_59;
    if (v12[15])
    {
      v33 = (uint64_t (**)(_QWORD))APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_0::__invoke;
LABEL_58:
      v12[18] = v33;
      v12[19] = (uint64_t (**)(_QWORD))(v12 + 11);
LABEL_59:
      if (v28)
        (*(void (**)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t (***)(_QWORD), uint64_t))(v13 + 32))(v14, 48, v9, v8, v12 + 18, 16);
      return 0;
    }
  }
  return -4;
}

uint64_t APComponentInstance::GetComponent(APComponentInstance *this)
{
  return *((_QWORD *)this + 1);
}

OSStatus AudioConverterConvertBuffer(AudioConverterRef inAudioConverter, UInt32 inInputDataSize, const void *inInputData, UInt32 *ioOutputDataSize, void *outOutputData)
{
  _QWORD v6[4];
  uint64_t (*v7[3])(uint64_t, uint64_t);
  void *v8;
  UInt32 *v9;
  const void *v10;
  UInt32 v11;

  v11 = inInputDataSize;
  v9 = ioOutputDataSize;
  v10 = inInputData;
  v8 = outOutputData;
  v6[0] = &v11;
  v6[1] = &v10;
  v6[2] = &v9;
  v6[3] = &v8;
  v7[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertBuffer::$_0>;
  v7[1] = (uint64_t (*)(uint64_t, uint64_t))v6;
  return with_resolved((int)inAudioConverter, v7);
}

uint64_t with_resolved(int a1, uint64_t (**a2)(uint64_t, uint64_t))
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v7[32];
  unsigned int *v8;
  char v9;
  uint64_t v10;

  ResolvedOpaqueRef<AudioConverterAPI>::ResolvedOpaqueRef((uint64_t)v7, a1);
  v3 = v10;
  if (v10)
    LODWORD(a2) = (*a2)((uint64_t)(a2 + 1), v10);
  if (v9)
  {
    v4 = v8;
    if (v8)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
    }
  }
  if (v3)
    return a2;
  else
    return 4294967246;
}

void sub_18EE0B31C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EE0B2E0);
}

void sub_18EE0B344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, char a15)
{
  unsigned int v15;

  if (a15 && a14)
  {
    do
      v15 = __ldaxr(a14);
    while (__stlxr(v15 - 1, a14));
  }
  _Unwind_Resume(a1);
}

uint64_t ResolvedOpaqueRef<AudioConverterAPI>::ResolvedOpaqueRef(uint64_t a1, int a2)
{
  int v4;

  v4 = a2;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*MEMORY[0x1E0DDEC68])
  {
    std::optional<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::scoped_lookup>::emplace[abi:ne180100]<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>&,unsigned int const&,void>(a1, *MEMORY[0x1E0DDEC68], &v4);
    if (*(_BYTE *)(a1 + 24))
      *(_QWORD *)(a1 + 48) = BaseOpaqueObject::checkRTTI();
  }
  return a1;
}

void sub_18EE0B3D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if (*(_BYTE *)(v1 + 40))
  {
    v2 = *(unsigned int **)(v1 + 32);
    if (v2)
    {
      do
        v3 = __ldaxr(v2);
      while (__stlxr(v3 - 1, v2));
      if (*(_BYTE *)(v1 + 24))
        *(_BYTE *)(v1 + 24) = 0;
      *(_QWORD *)(v1 + 32) = 0;
    }
  }
  _Unwind_Resume(a1);
}

unint64_t acv2::AudioConverterV2::convertBuffer(acv2::AudioConverterV2 *this, unsigned int a2, const void *a3, unsigned int *a4, void *a5)
{
  int v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  caulk::concurrent::message *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t message;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  caulk::concurrent::message *v33;
  char v34[4];
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  acv2::AudioConverterV2 *v41;
  unsigned int **v42;
  unsigned int *v43;
  __int128 v44;
  _BYTE v45[4];
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  char v53;
  AudioBufferList v54;
  _QWORD v55[3];
  char v56;
  int v57;
  _QWORD v58[2];

  v43 = a4;
  if (*((_BYTE *)this + 12))
  {
    v41 = this;
    v42 = &v43;
    goto LABEL_4;
  }
  v9 = *((unsigned __int8 *)this + 12);
  v41 = this;
  v42 = &v43;
  if (v9 || !*((_BYTE *)this + 13))
  {
LABEL_4:
    v34[0] = 0;
    v40 = 0;
    if (a3)
      goto LABEL_5;
LABEL_30:
    v25 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v25 + 88, 16);
    if (!message)
      goto LABEL_51;
LABEL_50:
    v33 = (caulk::concurrent::message *)message;
    *(_WORD *)_os_log_pack_fill() = 0;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v33);
    goto LABEL_51;
  }
  v23 = *((unsigned int *)this + 4);
  v24 = *((unsigned int *)this + 5);
  v46 = 2740;
  v47 = v23;
  v48 = v24;
  v49 = 0;
  v50 = 0;
  kdebug_trace();
  v34[0] = 1;
  v35 = 2740;
  v36 = v23;
  v37 = v24;
  v38 = 0;
  v39 = 0;
  v45[0] = 0;
  v40 = 1;
  AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v45);
  if (!a3)
    goto LABEL_30;
LABEL_5:
  v10 = v43;
  if (!v43)
  {
    v30 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v30 + 88, 16);
    if (message)
      goto LABEL_50;
    goto LABEL_51;
  }
  if (!a5)
  {
    v31 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v31 + 88, 16);
    if (message)
      goto LABEL_50;
    goto LABEL_51;
  }
  v11 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v11 + 82))
  {
    v32 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v32 + 88, 16);
    if (!message)
      goto LABEL_51;
    goto LABEL_50;
  }
  if (*(_BYTE *)(v11 + 80) || *(_BYTE *)(v11 + 81))
  {
    v29 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v29 + 88, 16);
    if (message)
      goto LABEL_50;
LABEL_51:
    v15 = 4294967246;
    goto LABEL_25;
  }
  v58[0] = a3;
  v58[1] = a2;
  v12 = *(unsigned __int8 *)(v11 + 449);
  if (*(_BYTE *)(v11 + 449))
    v13 = mach_absolute_time();
  else
    v13 = 0;
  v14 = *v10;
  if (*v10)
  {
    v15 = 1869627199;
    v16 = *(_DWORD *)(v11 + 16);
    if (v16)
    {
      if (*(_DWORD *)(v11 + 24))
      {
        v17 = *(_DWORD *)(v11 + 56);
        if (v17)
        {
          if (*(_DWORD *)(v11 + 64))
          {
            v18 = a2 / v16;
            v57 = a2 / v16;
            if (v14 / v17 >= a2 / v16)
            {
              v56 = 0;
              v55[0] = &v56;
              v55[1] = v58;
              v55[2] = &v57;
              *(_QWORD *)&v54.mNumberBuffers = 1;
              v54.mBuffers[0].mNumberChannels = *(_DWORD *)(v11 + 68);
              v54.mBuffers[0].mDataByteSize = v17 * v18;
              v54.mBuffers[0].mData = a5;
              ACBaseAudioSpan::ACBaseAudioSpan((ACBaseAudioSpan *)v45, v18, &v54, 0);
              *(_QWORD *)&v44 = caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterChain::ConvertBuffer(std::span<unsigned char const,18446744073709551615ul>,void *,unsigned int &)::$_0>;
              *((_QWORD *)&v44 + 1) = v55;
              v15 = acv2::AudioConverterChain::ProduceOutput(v11, &v44, (ACBaseAudioSpan *)v45);
              *v10 = v47;
              if (v12)
              {
                v27 = mach_absolute_time() - v13;
                ++*(_DWORD *)(v11 + 456);
                v28 = *(_QWORD *)(v11 + 472);
                *(_QWORD *)(v11 + 464) += v27;
                if (v28 > v27)
                  *(_QWORD *)(v11 + 472) = v27;
                if (*(_QWORD *)(v11 + 480) < v27)
                  *(_QWORD *)(v11 + 480) = v27;
              }
              if ((v15 & 0xFF00000000) != 0)
                v15 = 0;
              else
                v15 = v15;
              if (v53 && v51)
              {
                v52 = v51;
                std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v51);
              }
            }
            else
            {
              v15 = 1768846202;
            }
          }
        }
      }
    }
  }
  else
  {
    v15 = 1869902714;
    v19 = _os_log_pack_size();
    v20 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v19 + 88, 16);
    if (v20)
    {
      v21 = (caulk::concurrent::message *)v20;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v21);
    }
  }
  if (*((_BYTE *)this + 28) && *v43)
  {
    *((_BYTE *)this + 28) = 0;
    kdebug_trace();
  }
LABEL_25:
  if (v40)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v34);
  applesauce::raii::v1::detail::ScopeGuard<acv2::AudioConverterV2::convertBuffer(unsigned int,void const*,unsigned int *,void *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard();
  return v15;
}

void sub_18EE0B910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a15)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a10);
  applesauce::raii::v1::detail::ScopeGuard<acv2::AudioConverterV2::convertBuffer(unsigned int,void const*,unsigned int *,void *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard();
  _Unwind_Resume(a1);
}

uint64_t acv2::AudioConverterV2::convertComplexBuffer(acv2::AudioConverterV2 *this, int a2, const AudioBufferList *a3, AudioBufferList *a4)
{
  int v7;
  uint64_t v8;
  int v9;
  UInt32 v10;
  uint64_t v11;
  uint64_t v12;
  caulk::concurrent::message *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  void **p_mData;
  uint64_t v20;
  unsigned int v21;
  void **v22;
  AudioStreamPacketDescription *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t message;
  uint64_t v37;
  uint64_t v38;
  caulk::concurrent::message *v39;
  uint64_t v40;
  void *v41;
  UInt32 mDataByteSize;
  uint64_t v43;
  uint64_t v44;
  caulk::concurrent::message *v45;
  uint64_t v46;
  void *v47;
  UInt32 v48;
  uint64_t v49;
  uint64_t v50;
  caulk::concurrent::message *v51;
  uint64_t v52;
  uint64_t v53;
  caulk::concurrent::message *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  UInt32 mNumberBuffers;
  UInt32 v59;
  __int128 v60;
  _DWORD v61[2];
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  char v68;
  _QWORD v69[3];
  char v70;
  char v71[4];
  int v72;
  uint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  acv2::AudioConverterV2 *v78;
  int *v79;
  const AudioBufferList *v80;
  int v81;

  v81 = a2;
  v80 = a3;
  if (*((_BYTE *)this + 12))
  {
    v78 = this;
    v79 = &v81;
    goto LABEL_4;
  }
  v7 = *((unsigned __int8 *)this + 12);
  v78 = this;
  v79 = &v81;
  if (v7 || !*((_BYTE *)this + 13))
  {
LABEL_4:
    v71[0] = 0;
    v77 = 0;
    if (a3)
      goto LABEL_5;
LABEL_55:
    v35 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v35 + 88, 16);
    if (message)
      goto LABEL_65;
    goto LABEL_61;
  }
  v33 = *((unsigned int *)this + 4);
  v34 = (unsigned int *)*((unsigned int *)this + 5);
  v61[1] = 2740;
  v62 = v33;
  v63 = v34;
  v64 = 0;
  v65 = 0;
  kdebug_trace();
  v71[0] = 1;
  v72 = 2740;
  v73 = v33;
  v74 = v34;
  v75 = 0;
  v76 = 0;
  LOBYTE(v61[0]) = 0;
  v77 = 1;
  AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v61);
  if (!a3)
    goto LABEL_55;
LABEL_5:
  if (!a4)
  {
    v49 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v49 + 88, 16);
    if (message)
      goto LABEL_65;
    goto LABEL_61;
  }
  v8 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v8 + 82))
  {
    v50 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v50 + 88, 16);
    if (message)
    {
LABEL_65:
      v51 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v51);
    }
LABEL_61:
    v31 = 4294967246;
    goto LABEL_50;
  }
  if ((*(_BYTE *)(v8 + 12) & 0x20) == 0)
  {
    if (a3->mNumberBuffers == 1)
    {
      v9 = 1;
      goto LABEL_11;
    }
LABEL_66:
    v52 = _os_log_pack_size();
    v53 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v52 + 88, 16);
    if (v53)
    {
      v54 = (caulk::concurrent::message *)v53;
      v55 = _os_log_pack_fill();
      v56 = *((_QWORD *)this + 4);
      if ((*(_BYTE *)(v56 + 12) & 0x20) != 0)
        v57 = *(_DWORD *)(v56 + 28);
      else
        v57 = 1;
      mNumberBuffers = a3->mNumberBuffers;
      *(_DWORD *)v55 = 67109376;
      *(_DWORD *)(v55 + 4) = v57;
      *(_WORD *)(v55 + 8) = 1024;
      *(_DWORD *)(v55 + 10) = mNumberBuffers;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v54);
    }
    goto LABEL_61;
  }
  v9 = *(_DWORD *)(v8 + 28);
  if (v9 != a3->mNumberBuffers)
    goto LABEL_66;
LABEL_11:
  if ((*(_BYTE *)(v8 + 52) & 0x20) != 0)
  {
    v10 = *(_DWORD *)(v8 + 68);
    if (v10 != a4->mNumberBuffers)
    {
LABEL_13:
      v11 = _os_log_pack_size();
      v12 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v11 + 88, 16);
      if (v12)
      {
        v13 = (caulk::concurrent::message *)v12;
        v14 = _os_log_pack_fill();
        v15 = *((_QWORD *)this + 4);
        if ((*(_BYTE *)(v15 + 52) & 0x20) != 0)
          v16 = *(_DWORD *)(v15 + 68);
        else
          v16 = 1;
        v59 = a4->mNumberBuffers;
        *(_DWORD *)v14 = 67109376;
        *(_DWORD *)(v14 + 4) = v16;
        *(_WORD *)(v14 + 8) = 1024;
        *(_DWORD *)(v14 + 10) = v59;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v13);
      }
      goto LABEL_61;
    }
  }
  else
  {
    v10 = a4->mNumberBuffers;
    if (a4->mNumberBuffers != 1)
      goto LABEL_13;
  }
  if (v9)
  {
    v17 = 0;
    v18 = *(_DWORD *)(v8 + 24) * v81;
    p_mData = &a3->mBuffers[0].mData;
    while (*p_mData && *((_DWORD *)p_mData - 1) >= v18)
    {
      ++v17;
      p_mData += 2;
      if (v9 == v17)
        goto LABEL_22;
    }
    v37 = _os_log_pack_size();
    v38 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v37 + 88, 16);
    if (v38)
    {
      v39 = (caulk::concurrent::message *)v38;
      v40 = _os_log_pack_fill();
      v41 = *p_mData;
      mDataByteSize = a3->mBuffers[v17].mDataByteSize;
      *(_DWORD *)v40 = 67109888;
      *(_DWORD *)(v40 + 4) = v17;
      *(_WORD *)(v40 + 8) = 2048;
      *(_QWORD *)(v40 + 10) = v41;
      *(_WORD *)(v40 + 18) = 1024;
      *(_DWORD *)(v40 + 20) = mDataByteSize;
      *(_WORD *)(v40 + 24) = 1024;
      *(_DWORD *)(v40 + 26) = v18;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v39);
    }
    goto LABEL_61;
  }
LABEL_22:
  if (v10)
  {
    v20 = 0;
    v21 = *(_DWORD *)(v8 + 64) * v81;
    v22 = &a4->mBuffers[0].mData;
    while (*v22 && *((_DWORD *)v22 - 1) >= v21)
    {
      ++v20;
      v22 += 2;
      if (v10 == v20)
        goto LABEL_27;
    }
    v43 = _os_log_pack_size();
    v44 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v43 + 88, 16);
    if (v44)
    {
      v45 = (caulk::concurrent::message *)v44;
      v46 = _os_log_pack_fill();
      v47 = *v22;
      v48 = a4->mBuffers[v20].mDataByteSize;
      *(_DWORD *)v46 = 67109888;
      *(_DWORD *)(v46 + 4) = v20;
      *(_WORD *)(v46 + 8) = 2048;
      *(_QWORD *)(v46 + 10) = v47;
      *(_WORD *)(v46 + 18) = 1024;
      *(_DWORD *)(v46 + 20) = v48;
      *(_WORD *)(v46 + 24) = 1024;
      *(_DWORD *)(v46 + 26) = v21;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v45);
    }
    goto LABEL_61;
  }
LABEL_27:
  CrashIfClientProvidedBogusAudioBufferList();
  CrashIfClientProvidedBogusAudioBufferList();
  if (*(_DWORD *)(*((_QWORD *)this + 4) + 48) == 1885564203
    && a4->mBuffers[a4->mNumberBuffers].mNumberChannels == 1094863915)
  {
    v23 = (AudioStreamPacketDescription *)(a4[-2].mBuffers[0].mDataByteSize != 0);
  }
  else
  {
    v23 = 0;
  }
  v70 = 0;
  v69[0] = &v70;
  v69[1] = &v80;
  v69[2] = &v81;
  ACBaseAudioSpan::ACBaseAudioSpan((ACBaseAudioSpan *)v61, v81, a4, v23);
  v24 = *((_QWORD *)this + 4);
  *(_QWORD *)&v60 = caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterV2::convertComplexBuffer(unsigned int,AudioBufferList const*,AudioBufferList*)::$_1>;
  *((_QWORD *)&v60 + 1) = v69;
  v25 = acv2::AudioConverterChain::ProduceOutput(v24, &v60, (ACBaseAudioSpan *)v61);
  if ((v25 & 0xFF00000000) != 0)
    v26 = 0;
  else
    v26 = v25;
  v27 = *v63;
  if ((_DWORD)v27)
  {
    v28 = v62;
    v29 = v63 + 3;
    do
    {
      *v29 = v28;
      v29 += 4;
      --v27;
    }
    while (v27);
  }
  if (v61[0] == v81)
    v30 = 0;
  else
    v30 = 1768846202;
  if (v26)
    v31 = v26;
  else
    v31 = v30;
  if (*((_BYTE *)this + 28) && a4->mNumberBuffers && a4->mBuffers[0].mDataByteSize)
  {
    *((_BYTE *)this + 28) = 0;
    kdebug_trace();
  }
  if (v68 && v66)
  {
    v67 = v66;
    std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v66);
  }
LABEL_50:
  if (v77)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v71);
  applesauce::raii::v1::detail::ScopeGuard<acv2::AudioConverterV2::convertComplexBuffer(unsigned int,AudioBufferList const*,AudioBufferList*)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard();
  return v31;
}

void sub_18EE0C01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  if (*(_BYTE *)(v24 - 104))
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)(v24 - 144));
  applesauce::raii::v1::detail::ScopeGuard<acv2::AudioConverterV2::convertComplexBuffer(unsigned int,AudioBufferList const*,AudioBufferList*)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard();
  _Unwind_Resume(a1);
}

void AT::ScopedTrace::~ScopedTrace(AT::ScopedTrace *this)
{
  if (*(_BYTE *)this)
    kdebug_trace();
}

void DSPGraph::IsoGroup::processAll(DSPGraph::IsoGroup *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!*((_DWORD *)this + 66))
  {
    DSPGraph::IsoGroup::process(this, 1);
    return;
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 720) + *(_QWORD *)(*((_QWORD *)this + 1) + 704);
  v3 = *((_QWORD *)this + 36);
  if (v2 <= v3)
  {
    if (*((_DWORD *)this + 67) != 1)
      return;
    v4 = 0;
    goto LABEL_10;
  }
  v4 = (v2 + ~v3 + *((_QWORD *)this + 37)) / *((_QWORD *)this + 37);
  if (*((_DWORD *)this + 67) == 1)
  {
LABEL_10:
    DSPGraph::IsoGroup::process(this, v4);
    *((_QWORD *)this + 36) += *((_QWORD *)this + 37) * v4;
    return;
  }
  for (; (_DWORD)v4; LODWORD(v4) = v4 - 1)
  {
    DSPGraph::IsoGroup::process(this, *((unsigned int *)this + 67));
    *((_QWORD *)this + 36) += *((_QWORD *)this + 37);
  }
}

void DSPGraph::GraphInput::process(DSPGraph::GraphInput *this, uint64_t a2, double a3, double a4)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  unsigned int *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = a2;
  v6 = *((_QWORD *)this + 110);
  if (v6)
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v6 + 96))(v6, a2, *(_QWORD *)(*((_QWORD *)this + 106) + 72), *((unsigned __int8 *)this + 912), (uint64_t)*(double *)(*((_QWORD *)this + 106) + 8));
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 764))
    goto LABEL_4;
  v11 = v4 / (*(unsigned int (**)(DSPGraph::GraphInput *))(*(_QWORD *)this + 672))(this);
  if (!*(_BYTE *)(*((_QWORD *)this + 1) + 766))
  {
    v29 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v29)
    {
      std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v38, "out");
      v34 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v34 = (_QWORD *)*v34;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v37, v34, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v39, 1418, &v38, &v37);
    }
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
    DSPGraph::RingBuffer::read((DSPGraph::GraphInput *)((char *)this + 808), v11, v11, (DSPGraph::SimpleABL *)(*(_QWORD *)(v30 + 56) + 80));
LABEL_4:
    v7 = *((_QWORD *)this + 2);
    v8 = *(double *)(v7 + 256);
    if (*((_BYTE *)this + 856))
    {
      LODWORD(a4) = *(_DWORD *)(v7 + 264);
      v9 = llround((v8 - *((double *)this + 109)) / (double)*(unint64_t *)&a4 * 24000000.0)
         + *((_QWORD *)this + 108);
      v10 = 3;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v23 = (uint64_t *)*((_QWORD *)this + 11);
    v24 = (uint64_t *)*((_QWORD *)this + 12);
    if (v23 != v24)
    {
      v25 = *(_DWORD *)(*((_QWORD *)this + 106) + 4);
      v26 = v23;
      do
      {
        v27 = *v26;
        v26 += 4;
        v28 = *(_QWORD *)((*(uint64_t (**)(void))(v27 + 40))() + 56);
        *(double *)(v28 + 8) = v8;
        *(_QWORD *)(v28 + 16) = v9;
        *(_QWORD *)(v28 + 56) = 0;
        *(_OWORD *)(v28 + 40) = 0u;
        *(_OWORD *)(v28 + 24) = 0u;
        *(_DWORD *)(v28 + 64) = v10;
        *(_DWORD *)(v28 + 68) = 0;
        *(_DWORD *)(v28 + 72) = v25;
      }
      while (v26 != v24);
    }
    return;
  }
  v35 = *(unsigned int **)(*((_QWORD *)this + 106) + 72);
  LOBYTE(v36) = 0;
  v12 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "out");
    v31 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v31 = (_QWORD *)*v31;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v37, v31, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0, v35, v36);
    DSPGraph::ThrowException(1919837985, &v39, 1418, &v38, &v37);
  }
  v13 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) + 56);
  v14 = (*(uint64_t (**)(DSPGraph::GraphInput *))(*(_QWORD *)this + 656))(this);
  DSPGraph::SimpleABL::copy(&v35, (DSPGraph::SimpleABL *)(v13 + 80), 0, 0, v14 * v11, 1);
  v15 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v15)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "out");
    v32 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v32 = (_QWORD *)*v32;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v37, v32, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0, v35, v36);
    DSPGraph::ThrowException(1919837985, &v39, 1418, &v38, &v37);
  }
  v16 = *((_QWORD *)this + 106);
  v17 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15) + 56);
  v18 = *(_OWORD *)(v16 + 8);
  v19 = *(_OWORD *)(v16 + 24);
  v20 = *(_OWORD *)(v16 + 40);
  *(_OWORD *)(v17 + 56) = *(_OWORD *)(v16 + 56);
  *(_OWORD *)(v17 + 40) = v20;
  *(_OWORD *)(v17 + 24) = v19;
  *(_OWORD *)(v17 + 8) = v18;
  v21 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v21)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v38, "out");
    v33 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v33 = (_QWORD *)*v33;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v37, v33, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0, v35, v36);
    DSPGraph::ThrowException(1919837985, &v39, 1418, &v38, &v37);
  }
  v22 = *(_DWORD *)(*((_QWORD *)this + 106) + 4);
  *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21) + 56) + 72) = v22;
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&v35);
}

void sub_18EE0C5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&a12);
  _Unwind_Resume(a1);
}

OSStatus AudioUnitProcessMultiple(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inNumberFrames, UInt32 inNumberInputBufferLists, const AudioBufferList **inInputBufferLists, UInt32 inNumberOutputBufferLists, AudioBufferList **ioOutputBufferLists)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t (***v15)(_QWORD);
  uint64_t (***v16)(_QWORD);
  uint64_t (*v17)(uint64_t (**)(_QWORD), AudioUnitRenderActionFlags *, const AudioTimeStamp *, uint64_t, uint64_t, const AudioBufferList **, uint64_t, AudioBufferList **);

  if (!inUnit)
    return -50;
  v9 = *(_QWORD *)&inNumberOutputBufferLists;
  v11 = *(_QWORD *)&inNumberInputBufferLists;
  v12 = *(_QWORD *)&inNumberFrames;
  v15 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v15)
    return -4;
  v16 = v15;
  if (*(_WORD *)((**v15)(v15) + 38) == 24949)
  {
    v17 = *(uint64_t (**)(uint64_t (**)(_QWORD), AudioUnitRenderActionFlags *, const AudioTimeStamp *, uint64_t, uint64_t, const AudioBufferList **, uint64_t, AudioBufferList **))(*(_QWORD *)((**v16)(v16) + 112) + 136);
    if (v17)
      return v17(v16[3], ioActionFlags, inTimeStamp, v12, v11, inInputBufferLists, v9, ioOutputBufferLists);
    return -4;
  }
  return -3000;
}

DSPGraph::ParameterTap **DSPGraph::Box::processParameterTaps(DSPGraph::ParameterTap **this)
{
  DSPGraph::ParameterTap *v1;
  DSPGraph::ParameterTap *v2;
  DSPGraph::Box *v3;

  v1 = this[19];
  v2 = this[20];
  if (v1 != v2)
  {
    v3 = (DSPGraph::Box *)this;
    do
    {
      this = (DSPGraph::ParameterTap **)DSPGraph::ParameterTap::process(v1, v3);
      v1 = (DSPGraph::ParameterTap *)((char *)v1 + 40);
    }
    while (v1 != v2);
  }
  return this;
}

DSPGraph::PropertyTap **DSPGraph::Box::processPropertyTaps(DSPGraph::PropertyTap **this)
{
  DSPGraph::PropertyTap *v1;
  DSPGraph::PropertyTap *v2;
  DSPGraph::Box *v3;

  v1 = this[22];
  v2 = this[23];
  if (v1 != v2)
  {
    v3 = (DSPGraph::Box *)this;
    do
    {
      this = (DSPGraph::PropertyTap **)DSPGraph::PropertyTap::process(v1, v3);
      v1 = (DSPGraph::PropertyTap *)((char *)v1 + 64);
    }
    while (v1 != v2);
  }
  return this;
}

unsigned __int128 *caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal(unsigned __int128 *result)
{
  unsigned __int128 v1;
  unint64_t v2;
  uint64_t v3;
  unsigned __int128 v4;
  int v5;
  unsigned __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  do
    v1 = __ldaxp(result);
  while (__stlxp(v1, result));
  do
  {
    while (1)
    {
      v4 = __ldaxp(result);
      v3 = *((_QWORD *)&v4 + 1);
      v2 = v4;
      v5 = (_QWORD)v4 != (_QWORD)v1;
      if (*((_QWORD *)&v4 + 1) != *((_QWORD *)&v1 + 1))
        ++v5;
      if (!v5)
        break;
      if (!__stlxp(v4, result))
        goto LABEL_8;
    }
  }
  while (__stlxp(__PAIR128__((DWORD2(v1) + 1), v1), result));
LABEL_8:
  if ((_QWORD)v4 != (_QWORD)v1 || *((_QWORD *)&v4 + 1) != *((_QWORD *)&v1 + 1))
  {
    while (1)
    {
      while (1)
      {
        v7 = __ldaxp(result);
        v8 = (_QWORD)v7 != v2;
        if (*((_QWORD *)&v7 + 1) != v3)
          ++v8;
        if (!v8)
          break;
        if (!__stlxp(v7, result))
          goto LABEL_18;
      }
      if (!__stlxp(__PAIR128__((v3 + 1), v2), result))
      {
LABEL_18:
        v9 = *((_QWORD *)&v7 + 1) ^ v3;
        v10 = v7 ^ v2;
        v3 = v7 >> 64;
        v2 = v7;
        if (!(v10 | v9))
          return result;
      }
    }
  }
  return result;
}

unsigned __int128 *caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(unsigned __int128 *result)
{
  unint64_t v1;
  int v2;
  unsigned __int128 v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int128 v9;
  int v10;

  do
  {
    v3 = __ldaxp(result);
    v2 = DWORD2(v3);
    v1 = v3;
  }
  while (__stlxp(v3, result));
  v4 = HIDWORD(*((_QWORD *)&v3 + 1));
  while (1)
  {
    v5 = v2 - 1;
    v6 = v2 - 1;
    v7 = v2 <= 1 ? 0 : v1;
    v8 = v2 | (unint64_t)(v4 << 32);
    do
    {
      while (1)
      {
        v9 = __ldaxp(result);
        v2 = DWORD2(v9);
        v10 = (_QWORD)v9 != v1;
        if (*((_QWORD *)&v9 + 1) != v8)
          ++v10;
        if (!v10)
          break;
        if (!__stlxp(v9, result))
          goto LABEL_13;
      }
    }
    while (__stlxp(__PAIR128__(v6, v7), result));
LABEL_13:
    if (!((unint64_t)v9 ^ v1 | *((_QWORD *)&v9 + 1) ^ v8))
      break;
    v4 = HIDWORD(*((_QWORD *)&v9 + 1));
    v1 = v9;
  }
  if (!v5)
  {
    if (v1)
      return (unsigned __int128 *)caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::free_node_chain_now((caulk::alloc::base_allocator *)result, v1);
  }
  return result;
}

uint64_t DSPGraph::NonFiniteProtectionBox::process(int64x2_t *this, unsigned int a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  __n128 v13;
  unsigned __int32 v14;
  uint64_t v15;
  char v16;
  float v17;
  const float *v18;
  float *v19;
  uint64_t v20;
  const float *v21;
  unsigned __int8 v22;
  unsigned __int32 v23;
  unsigned int v24;
  unsigned __int8 v25;
  unsigned __int32 v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t result;
  int64x2_t *v45;
  int64x2_t *v46;
  int64x2_t *v47;
  int64x2_t *v48;
  int64x2_t *v49;
  int64x2_t *v50;
  int64x2_t *v51;
  int64x2_t *v52;
  char v53;
  __int128 v55;
  __int128 __B;
  __int128 __C;

  v3 = atomic_load(&this[50].u8[9]);
  v6 = this + 4;
  v4 = this[4].i64[0];
  v5 = v6->i64[1];
  if ((v3 & 1) != 0)
  {
    if (v5 == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&__B, "in");
      v50 = this + 2;
      if (this[3].i8[7] < 0)
        v50 = (int64x2_t *)v50->i64[0];
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v55, v50, (this[4].i64[1] - this[4].i64[0]) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &__C, 1410, &__B, &v55);
    }
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v29 = this[5].i64[1];
    if (this[6].i64[0] == v29)
    {
      std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&__B, "out");
      v52 = this + 2;
      if (this[3].i8[7] < 0)
        v52 = (int64x2_t *)v52->i64[0];
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v55, v52, (this[6].i64[0] - this[5].i64[1]) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &__C, 1418, &__B, &v55);
    }
    v30 = (_QWORD *)(*(_QWORD *)(v28 + 56) + 80);
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
    DSPGraph::SimpleABL::copy(v30, (DSPGraph::SimpleABL *)(*(_QWORD *)(v31 + 56) + 80), 1);
  }
  else
  {
    if (v5 == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&__B, "in");
      v49 = this + 2;
      if (this[3].i8[7] < 0)
        v49 = (int64x2_t *)v49->i64[0];
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v55, v49, (this[4].i64[1] - this[4].i64[0]) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &__C, 1410, &__B, &v55);
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v8 = this[5].i64[1];
    if (this[6].i64[0] == v8)
    {
      std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&__B, "out");
      v51 = this + 2;
      if (this[3].i8[7] < 0)
        v51 = (int64x2_t *)v51->i64[0];
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v55, v51, (this[6].i64[0] - this[5].i64[1]) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &__C, 1418, &__B, &v55);
    }
    v9 = *(unsigned int **)(*(_QWORD *)(v7 + 56) + 80);
    v10 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) + 56) + 80);
    v11 = *v9;
    v12 = COERCE_FLOAT(atomic_load(&this[48].u32[1]));
    v13.n128_f32[0] = __exp10f(v12 * 0.05);
    if ((_DWORD)v11)
    {
      v14 = v13.n128_u32[0];
      v53 = 0;
      v15 = 0;
      v16 = 0;
      v17 = -v13.n128_f32[0];
      do
      {
        v18 = *(const float **)&v9[4 * v15 + 4];
        v19 = *(float **)(v10 + 16 * v15 + 16);
        LODWORD(__C) = 0;
        vDSP_sve(v18, 1, (float *)&__C, a2);
        if ((__C & 0x7FFFFFFF) >= 0x7F800000)
        {
          if (a2)
          {
            v20 = 4 * a2;
            v21 = v18;
            do
            {
              if ((*(_DWORD *)v21 & 0x7FFFFFFFu) >= 0x7F800000)
                *v21 = 0.0;
              ++v21;
              v20 -= 4;
            }
            while (v20);
          }
          v16 = 1;
        }
        LODWORD(__C) = v14;
        *(float *)&__B = v17;
        LODWORD(v55) = 0;
        vDSP_maxmgv(v18, 1, (float *)&v55, a2);
        v13.n128_u32[0] = v55;
        if (*(float *)&v55 <= *(float *)&__C)
        {
          if (v18 != v19)
            memcpy(v19, v18, 4 * a2);
        }
        else
        {
          v53 = 1;
          vDSP_vclip(v18, 1, (const float *)&__B, (const float *)&__C, v19, 1, a2);
        }
        ++v15;
      }
      while (v15 != v11);
      if ((v16 & 1) != 0)
      {
        ++this[50].i32[0];
        v22 = atomic_load(&this[50].u8[10]);
        if ((v22 & 1) != 0)
        {
          v23 = this[50].u32[0];
          v24 = atomic_load(&this[50].u32[3]);
          if (!(v23 % v24))
            DSPGraph::NonFiniteProtectionBox::addEvent(this, 0);
        }
      }
      if ((v53 & 1) != 0)
      {
        ++this[50].i32[1];
        v25 = atomic_load(&this[50].u8[10]);
        if ((v25 & 1) != 0)
        {
          v26 = this[50].u32[1];
          v27 = atomic_load(&this[50].u32[3]);
          if (!(v26 % v27))
            DSPGraph::NonFiniteProtectionBox::addEvent(this, 1);
        }
      }
    }
  }
  v32 = this[4].i64[0];
  if (this[4].i64[1] == v32)
  {
    std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__B, "in");
    v45 = this + 2;
    if (this[3].i8[7] < 0)
      v45 = (int64x2_t *)v45->i64[0];
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v55, v45, (this[4].i64[1] - this[4].i64[0]) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__C, 1410, &__B, &v55);
  }
  v33 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v32 + 40))(v32, v13);
  v34 = this[5].i64[1];
  if (this[6].i64[0] == v34)
  {
    std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__B, "out");
    v46 = this + 2;
    if (this[3].i8[7] < 0)
      v46 = (int64x2_t *)v46->i64[0];
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v55, v46, (this[6].i64[0] - this[5].i64[1]) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__C, 1418, &__B, &v55);
  }
  v35 = *(_QWORD *)(v33 + 56);
  v36 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34) + 56);
  v37 = *(_OWORD *)(v35 + 8);
  v38 = *(_OWORD *)(v35 + 24);
  v39 = *(_OWORD *)(v35 + 40);
  *(_OWORD *)(v36 + 56) = *(_OWORD *)(v35 + 56);
  *(_OWORD *)(v36 + 40) = v39;
  *(_OWORD *)(v36 + 24) = v38;
  *(_OWORD *)(v36 + 8) = v37;
  v40 = this[4].i64[0];
  if (this[4].i64[1] == v40)
  {
    std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__B, "in");
    v47 = this + 2;
    if (this[3].i8[7] < 0)
      v47 = (int64x2_t *)v47->i64[0];
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v55, v47, (this[4].i64[1] - this[4].i64[0]) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__C, 1410, &__B, &v55);
  }
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  v42 = this[5].i64[1];
  if (this[6].i64[0] == v42)
  {
    std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__B, "out");
    v48 = this + 2;
    if (this[3].i8[7] < 0)
      v48 = (int64x2_t *)v48->i64[0];
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v55, v48, (this[6].i64[0] - this[5].i64[1]) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__C, 1418, &__B, &v55);
  }
  v43 = *(_DWORD *)(*(_QWORD *)(v41 + 56) + 72);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
  *(_DWORD *)(*(_QWORD *)(result + 56) + 72) = v43;
  return result;
}

void sub_18EE0D028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ChannelSplitterBox::process(DSPGraph::ChannelSplitterBox *this, int a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  unsigned int v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v4 = (char *)this + 64;
  v3 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v41, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v40, "in");
    v37 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v37 = (_QWORD *)*v37;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v39, v37, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v41, 1410, &v40, &v39);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v41, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v40, "in");
    v38 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v38 = (_QWORD *)*v38;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v39, v38, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v41, 1410, &v40, &v39);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80);
  v9 = *((_QWORD *)this + 12) - *((_QWORD *)this + 11);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if ((v9 & 0x1FFFFFFFE0) != 0)
  {
    v11 = 0;
    v12 = 0;
    v13 = ((4 * a2) << (*(_DWORD *)(*(_QWORD *)(result + 120) + 8) == 1718773105));
    v14 = (v9 >> 5);
    do
    {
      v15 = *((_QWORD *)this + 11);
      if (v11 >= (*((_QWORD *)this + 12) - v15) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(&v41, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v40, "out");
        v36 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v36 = (_QWORD *)*v36;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v39, v36, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, v11);
        DSPGraph::ThrowException(1919837985, &v41, 1418, &v40, &v39);
      }
      v16 = *(unsigned int **)(*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v15 + 32 * v11)
                                                                                       + 40))(v15 + 32 * v11)
                                         + 56)
                             + 80);
      v17 = *v16;
      if ((_DWORD)v17)
      {
        v18 = (void **)(v16 + 4);
        do
        {
          *((_DWORD *)v18 - 1) = v13;
          v19 = *(void **)(v8 + 16 * v12 + 16);
          if (v19 != *v18)
            memcpy(*v18, v19, v13);
          ++v12;
          v18 += 2;
          --v17;
        }
        while (v17);
      }
      v20 = *((_QWORD *)this + 8);
      if (*((_QWORD *)this + 9) == v20)
      {
        std::string::basic_string[abi:ne180100]<0>(&v41, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v40, "in");
        v32 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v32 = (_QWORD *)*v32;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v39, v32, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
        DSPGraph::ThrowException(1919837985, &v41, 1410, &v40, &v39);
      }
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
      v22 = *((_QWORD *)this + 11);
      if (v11 >= (*((_QWORD *)this + 12) - v22) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(&v41, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v40, "out");
        v35 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v35 = (_QWORD *)*v35;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v39, v35, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, v11);
        DSPGraph::ThrowException(1919837985, &v41, 1418, &v40, &v39);
      }
      v23 = *(_QWORD *)(v21 + 56);
      v24 = *(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v22 + 32 * v11) + 40))(v22 + 32 * v11)
                      + 56);
      v25 = *(_OWORD *)(v23 + 8);
      v26 = *(_OWORD *)(v23 + 24);
      v27 = *(_OWORD *)(v23 + 40);
      *(_OWORD *)(v24 + 56) = *(_OWORD *)(v23 + 56);
      *(_OWORD *)(v24 + 40) = v27;
      *(_OWORD *)(v24 + 24) = v26;
      *(_OWORD *)(v24 + 8) = v25;
      v28 = *((_QWORD *)this + 8);
      if (*((_QWORD *)this + 9) == v28)
      {
        std::string::basic_string[abi:ne180100]<0>(&v41, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v40, "in");
        v33 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v33 = (_QWORD *)*v33;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v39, v33, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
        DSPGraph::ThrowException(1919837985, &v41, 1410, &v40, &v39);
      }
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
      v30 = *((_QWORD *)this + 11);
      if (v11 >= (*((_QWORD *)this + 12) - v30) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(&v41, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v40, "out");
        v34 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v34 = (_QWORD *)*v34;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v39, v34, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, v11);
        DSPGraph::ThrowException(1919837985, &v41, 1418, &v40, &v39);
      }
      v31 = *(_DWORD *)(*(_QWORD *)(v29 + 56) + 72);
      result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v30 + 32 * v11) + 40))(v30 + 32 * v11);
      *(_DWORD *)(*(_QWORD *)(result + 56) + 72) = v31;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

void sub_18EE0D5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ChannelJoinerBox::process(DSPGraph::ChannelJoinerBox *this, unsigned int a2)
{
  DSPGraph::ChannelJoinerBox *v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  void **v25;
  const void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t result;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  DSPGraph::ChannelJoinerBox *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v2 = this;
  v4 = (char *)this + 88;
  v3 = *((_QWORD *)this + 11);
  v50 = v2;
  if (*((_QWORD *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v52, "out");
    v43 = (_QWORD *)((char *)v2 + 32);
    if (*((char *)v2 + 55) < 0)
      v43 = (_QWORD *)*v43;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v51, v43, (uint64_t)(*((_QWORD *)v2 + 12) - *((_QWORD *)v2 + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v53, 1418, &v52, &v51);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *((_QWORD *)v2 + 11);
  if (*((_QWORD *)v2 + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v52, "out");
    v44 = (_QWORD *)((char *)v2 + 32);
    if (*((char *)v2 + 55) < 0)
      v44 = (_QWORD *)*v44;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v51, v44, (uint64_t)(*((_QWORD *)v2 + 12) - *((_QWORD *)v2 + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v53, 1418, &v52, &v51);
  }
  v8 = *(unsigned int **)(*(_QWORD *)(v6 + 56) + 80);
  v9 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) + 120) + 8) == 1718773105;
  v10 = *((_QWORD *)v2 + 8);
  v11 = *((_QWORD *)v2 + 9);
  if (((v11 - v10) & 0x1FFFFFFFE0) != 0)
  {
    v12 = 0;
    v13 = 0;
    v14 = (4 * a2) << v9;
    v15 = (v11 - v10) >> 5;
    LOBYTE(v16) = 1;
    do
    {
      if (v15 <= v12)
      {
        std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v52, "in");
        v41 = (_QWORD *)((char *)v50 + 32);
        if (*((char *)v50 + 55) < 0)
          v41 = (_QWORD *)*v41;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v51, v41, (uint64_t)(*((_QWORD *)v50 + 9) - *((_QWORD *)v50 + 8)) >> 5, v12);
        DSPGraph::ThrowException(1919837985, &v53, 1410, &v52, &v51);
      }
      v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v10 + 32 * v12) + 40))(v10 + 32 * v12);
      v18 = *((_QWORD *)v2 + 8);
      if (v12 >= (*((_QWORD *)v2 + 9) - v18) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v52, "in");
        v42 = (_QWORD *)((char *)v50 + 32);
        if (*((char *)v50 + 55) < 0)
          v42 = (_QWORD *)*v42;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v51, v42, (uint64_t)(*((_QWORD *)v50 + 9) - *((_QWORD *)v50 + 8)) >> 5, v12);
        DSPGraph::ThrowException(1919837985, &v53, 1410, &v52, &v51);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 80);
      v20 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v18 + 32 * v12) + 40))(v18 + 32 * v12);
      v21 = *((_QWORD *)v2 + 8);
      if (v12 >= (*((_QWORD *)v2 + 9) - v21) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v52, "in");
        v40 = (_QWORD *)((char *)v50 + 32);
        if (*((char *)v50 + 55) < 0)
          v40 = (_QWORD *)*v40;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v51, v40, (uint64_t)(*((_QWORD *)v50 + 9) - *((_QWORD *)v50 + 8)) >> 5, v12);
        DSPGraph::ThrowException(1919837985, &v53, 1410, &v52, &v51);
      }
      v22 = *(_QWORD *)(v20 + 120);
      v23 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v21 + 32 * v12) + 40))(v21 + 32 * v12)
                                  + 56)
                      + 72);
      if (*(_DWORD *)(v22 + 28))
      {
        v24 = 0;
        v25 = (void **)&v8[4 * v13 + 4];
        v26 = (const void **)(v19 + 16);
        do
        {
          if (v13 + v24 >= *v8)
            __assert_rtn("process", "DSPGraph_Box.cpp", 3441, "outBufferIndex < outABL->mNumberBuffers");
          *((_DWORD *)v25 - 1) = v14;
          if ((v23 & 0x10) != 0)
          {
            bzero(*v25, v14);
          }
          else if (*v26 != *v25)
          {
            memcpy(*v25, *v26, v14);
          }
          ++v24;
          v25 += 2;
          v26 += 2;
        }
        while (v24 < *(unsigned int *)(v22 + 28));
        v13 = (v13 + v24);
        v2 = v50;
      }
      v16 &= (v23 & 0x10) >> 4;
      ++v12;
      v10 = *((_QWORD *)v2 + 8);
      v11 = *((_QWORD *)v2 + 9);
      v15 = (v11 - v10) >> 5;
    }
    while (v12 < v15);
  }
  else
  {
    LOBYTE(v16) = 1;
  }
  if (v11 == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v52, "in");
    v45 = (_QWORD *)((char *)v50 + 32);
    if (*((char *)v50 + 55) < 0)
      v45 = (_QWORD *)*v45;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v51, v45, (uint64_t)(*((_QWORD *)v50 + 9) - *((_QWORD *)v50 + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v53, 1410, &v52, &v51);
  }
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  v28 = *((_QWORD *)v2 + 11);
  if (*((_QWORD *)v2 + 12) == v28)
  {
    std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v52, "out");
    v46 = (_QWORD *)((char *)v50 + 32);
    if (*((char *)v50 + 55) < 0)
      v46 = (_QWORD *)*v46;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v51, v46, (uint64_t)(*((_QWORD *)v50 + 12) - *((_QWORD *)v50 + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v53, 1418, &v52, &v51);
  }
  v29 = *(_QWORD *)(v27 + 56);
  v30 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28) + 56);
  v31 = *(_OWORD *)(v29 + 8);
  v32 = *(_OWORD *)(v29 + 24);
  v33 = *(_OWORD *)(v29 + 40);
  *(_OWORD *)(v30 + 56) = *(_OWORD *)(v29 + 56);
  *(_OWORD *)(v30 + 40) = v33;
  *(_OWORD *)(v30 + 24) = v32;
  *(_OWORD *)(v30 + 8) = v31;
  v34 = *((_QWORD *)v2 + 8);
  if (*((_QWORD *)v2 + 9) == v34)
  {
    std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v52, "in");
    v47 = (_QWORD *)((char *)v50 + 32);
    if (*((char *)v50 + 55) < 0)
      v47 = (_QWORD *)*v47;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v51, v47, (uint64_t)(*((_QWORD *)v50 + 9) - *((_QWORD *)v50 + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v53, 1410, &v52, &v51);
  }
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
  v36 = *((_QWORD *)v2 + 11);
  if (*((_QWORD *)v2 + 12) == v36)
  {
    std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v52, "out");
    v48 = (_QWORD *)((char *)v50 + 32);
    if (*((char *)v50 + 55) < 0)
      v48 = (_QWORD *)*v48;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v51, v48, (uint64_t)(*((_QWORD *)v50 + 12) - *((_QWORD *)v50 + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v53, 1418, &v52, &v51);
  }
  v37 = *(_DWORD *)(*(_QWORD *)(v35 + 56) + 72);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
  *(_DWORD *)(*(_QWORD *)(result + 56) + 72) = v37;
  if ((v16 & 1) == 0)
  {
    v39 = *((_QWORD *)v2 + 11);
    if (*((_QWORD *)v2 + 12) == v39)
    {
      std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v52, "out");
      v49 = (_QWORD *)((char *)v50 + 32);
      if (*((char *)v50 + 55) < 0)
        v49 = (_QWORD *)*v49;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v51, v49, (uint64_t)(*((_QWORD *)v50 + 12) - *((_QWORD *)v50 + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v53, 1418, &v52, &v51);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
    *(_DWORD *)(*(_QWORD *)(result + 56) + 72) &= ~0x10u;
  }
  return result;
}

void sub_18EE0DDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterV2::reset(acv2::AudioConverterV2 *this)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v1 + 400))
    return 0;
  v3 = *(_QWORD **)(v1 + 104);
  v4 = *(_QWORD **)(v1 + 112);
  while (v3 != v4)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
    if ((_DWORD)result)
      return result;
    v5 = *(_QWORD *)(*v3 + 104);
    if (v5)
    {
      *(_DWORD *)(v5 + 24) = 0;
      *(_DWORD *)(v5 + 32) = 0;
      ACBaseAudioSpan::resetMetadataEvents((uint64_t *)(v5 + 24));
      *(_DWORD *)(v5 + 128) = 0;
      v6 = v5 + 128;
      *(_DWORD *)(v6 + 8) = 0;
      ACBaseAudioSpan::resetMetadataEvents((uint64_t *)v6);
    }
    ++v3;
  }
  result = 0;
  *(_WORD *)(v1 + 400) = 0;
  *(_BYTE *)(v1 + 402) = 0;
  return result;
}

uint64_t acv2::CBRConverter::Reset(acv2::CBRConverter *this)
{
  return 0;
}

uint64_t acv2::CodecConverter::Reset(acv2::CodecConverter *this)
{
  int v2;
  uint64_t v3;
  const void *v4;
  const void *v6;

  *((_DWORD *)this + 100) = 0;
  *((_DWORD *)this + 102) = 0;
  ACBaseAudioSpan::resetMetadataEvents((uint64_t *)this + 50);
  v2 = *((unsigned __int8 *)this + 380);
  if (*((_BYTE *)this + 380))
    v2 = *((_DWORD *)this + 93);
  *((_DWORD *)this + 96) = v2;
  *((_BYTE *)this + 388) = 0;
  *((_BYTE *)this + 199) = 0;
  *((_WORD *)this + 101) = 0;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  v3 = *((_QWORD *)this + 89);
  if (v3)
  {
    *(_OWORD *)(v3 + 152) = 0uLL;
    *(_OWORD *)(v3 + 136) = 0uLL;
    *(_OWORD *)(v3 + 120) = 0uLL;
    *(_OWORD *)(v3 + 104) = 0uLL;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v6, "");
  v4 = (const void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v6;
  v6 = v4;
  if (v4)
    CFRelease(v4);
  return AudioCodecReset(*((AudioCodec *)this + 21));
}

OSStatus AudioCodecReset(AudioCodec inCodec)
{
  uint64_t (***v1)(_QWORD);
  uint64_t (***v2)(_QWORD);
  uint64_t (*v3)(_QWORD);

  if (!inCodec)
    return -50;
  v1 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioCodec))(*(_QWORD *)inCodec + 8))(inCodec);
  if (!v1)
    return 560947818;
  v2 = v1;
  v3 = *(uint64_t (**)(_QWORD))(*(_QWORD *)((**v1)(v1) + 112) + 56);
  if (v3)
    return v3(v2[3]);
  else
    return -4;
}

uint64_t acv2::SampleRateConverter::Reset(acv2::SampleRateConverter *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 20) + 96))(*((_QWORD *)this + 20));
}

uint64_t acv2::Resampler2Wrapper::Reset(acv2::Resampler2Wrapper *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = (uint64_t *)*((_QWORD *)this + 3);
  v3 = (uint64_t *)*((_QWORD *)this + 4);
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
  }
  *((_BYTE *)this + 52) = 0;
  return 0;
}

uint64_t Resampler2::Reset(void **this)
{
  uint64_t result;
  double v3;
  double v4;

  bzero(this[10], 4 * *((unsigned int *)this + 19));
  bzero(this[11], 4 * *((unsigned int *)this + 19));
  *((_DWORD *)this + 18) = 0;
  this[20] = 0;
  *((_DWORD *)this + 26) = 0;
  *((_BYTE *)this + 132) = 0;
  result = (*((uint64_t (**)(void **, _QWORD))*this + 12))(this, *((unsigned int *)this + 30));
  v3 = 0.0;
  if (!*((_BYTE *)this + 264))
  {
    v4 = *((double *)this + 20);
    result = (*((uint64_t (**)(void **, double))*this + 19))(this, 0.0);
    v3 = -1.0 - (v4 + (double)(result >> 1));
  }
  *((double *)this + 17) = v3;
  this[34] = 0;
  return result;
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioStreamBasicDescription *a2)
{
  CAFormatter::CAFormatter(this, a2);
}

{
  int16x8_t v3;
  void **v4;
  _OWORD v5[2];
  uint64_t v6;
  void *__p[2];
  char v8;

  v3 = *(int16x8_t *)&a2->mBytesPerPacket;
  v5[0] = *(_OWORD *)&a2->mSampleRate;
  v5[1] = v3;
  v6 = *(_QWORD *)&a2->mBitsPerChannel;
  CA::StreamDescription::AsString((CA::StreamDescription *)__p, v5, *(double *)v5, v3);
  if (v8 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  CAFormatter::Init(this, (const char *)v4);
  if (v8 < 0)
    operator delete(__p[0]);
}

void DSPGraph::Exception::~Exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E29132D8;
  if (SHIBYTE(this[11].__vftable) < 0)
    operator delete(this[9].__vftable);
  if (SHIBYTE(this[8].__vftable) < 0)
    operator delete(this[6].__vftable);
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[2].__vftable);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)off_1E29132D8;
  if (SHIBYTE(this[11].__vftable) < 0)
    operator delete(this[9].__vftable);
  if (SHIBYTE(this[8].__vftable) < 0)
    operator delete(this[6].__vftable);
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[2].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x193FFE460);
}

uint64_t acv2::ConverterRegistry::GetInputFormats(acv2::ConverterRegistry *this, const unsigned int *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD **v8;
  BOOL v9;
  _QWORD **v11;
  _QWORD *v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v11 = &v12;
  acv2::ConverterRegistry::GetInputFormatsSet((uint64_t)this, (uint64_t *)&v11);
  v5 = 561211770;
  if (a2 && *a2 == 4 * (_DWORD)v13)
  {
    v6 = (uint64_t)v11;
    if (v11 != &v12)
    {
      do
      {
        *a3 = *(_DWORD *)(v6 + 28);
        v7 = *(_QWORD **)(v6 + 8);
        if (v7)
        {
          do
          {
            v8 = (_QWORD **)v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = *(_QWORD ***)(v6 + 16);
            v9 = *v8 == (_QWORD *)v6;
            v6 = (uint64_t)v8;
          }
          while (!v9);
        }
        ++a3;
        v6 = (uint64_t)v8;
      }
      while (v8 != &v12);
    }
    v5 = 0;
  }
  return v5;
}

void sub_18EE0E288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  _Unwind_Resume(a1);
}

void ___ZN22AudioComponentMgr_Base41postLocalRegistrationsChangedNotificationEv_block_invoke()
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("com.apple.coreaudio.AudioComponentLocalRegistrationsChanged"), 0, 0, 1u);
}

uint64_t acv2::CodecConverter::AppendNewInput(acv2::CodecConverter *this, const AudioBufferList *inBufferList, UInt32 *ioNumberPackets, UInt32 *outBytesConsumed, const AudioStreamPacketDescription *inPacketDescription)
{
  const AudioBufferList *v8;
  AudioBufferList *v10;
  unint64_t v11;
  char *v12;
  UInt32 v13;
  UInt32 v14;
  uint64_t appended;
  int v16;
  uint64_t v20;
  UInt32 v21;
  UInt32 v22;
  BOOL v23;
  uint64_t v25;
  uint64_t message;
  caulk::concurrent::message *v27;
  _DWORD *v28;

  v8 = inBufferList;
  v10 = (AudioBufferList *)*((_QWORD *)this + 41);
  if (v10 != inBufferList)
  {
    v11 = (16 * inBufferList->mNumberBuffers) | 8;
    v12 = (char *)*((_QWORD *)this + 42);
    if (v11 <= v12 - (char *)v10)
    {
      if (v11 < v12 - (char *)v10)
      {
        v12 = (char *)v10 + v11;
        *((_QWORD *)this + 42) = (char *)v10 + v11;
      }
    }
    else
    {
      std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 328), v11 - (v12 - (char *)v10));
      v10 = (AudioBufferList *)*((_QWORD *)this + 41);
      v12 = (char *)*((_QWORD *)this + 42);
    }
    memcpy(v10, v8, v12 - (char *)v10);
    v8 = (const AudioBufferList *)*((_QWORD *)this + 41);
  }
  v13 = *outBytesConsumed;
  v14 = *ioNumberPackets;
  if ((*((_BYTE *)this + 28) & 0x20) != 0 && *((_DWORD *)this + 11) >= 2u)
  {
    appended = AudioCodecAppendInputBufferList(*((AudioCodec *)this + 21), v8, ioNumberPackets, inPacketDescription, outBytesConsumed);
  }
  else
  {
    v16 = *((_DWORD *)this + 6);
    if ((v16 == 1935767394 || v16 == 1935764850) && v14 == 1 && v13 == 0)
      *outBytesConsumed = 4;
    appended = AudioCodecAppendInputData(*((AudioCodec *)this + 21), v8->mBuffers[0].mData, outBytesConsumed, ioNumberPackets, inPacketDescription);
  }
  v20 = appended;
  v21 = *outBytesConsumed;
  if (v13 < *outBytesConsumed)
    v21 = v13;
  *outBytesConsumed = v21;
  v22 = *ioNumberPackets;
  if (v14 < *ioNumberPackets)
    v22 = v14;
  if (v22)
    v23 = 0;
  else
    v23 = v14 == 1;
  if (v23 && v13 == 0)
    v22 = 1;
  *ioNumberPackets = v22;
  if ((_DWORD)appended)
  {
    v25 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v25 + 88, 2);
    if (message)
    {
      v27 = (caulk::concurrent::message *)message;
      v28 = (_DWORD *)_os_log_pack_fill();
      *v28 = 67109120;
      v28[1] = v20;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v27);
    }
  }
  else
  {
    *((_QWORD *)this + 100) += v22;
    *((_QWORD *)this + 101) += *outBytesConsumed;
  }
  return v20;
}

OSStatus AudioCodecAppendInputData(AudioCodec inCodec, const void *inInputData, UInt32 *ioInputDataByteSize, UInt32 *ioNumberPackets, const AudioStreamPacketDescription *inPacketDescription)
{
  uint64_t (***v9)(_QWORD);
  uint64_t (***v10)(_QWORD);
  uint64_t (*v11)(uint64_t (**)(_QWORD), const void *, UInt32 *, UInt32 *, const AudioStreamPacketDescription *);

  if (!inCodec)
    return -50;
  v9 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioCodec))(*(_QWORD *)inCodec + 8))(inCodec);
  if (!v9)
    return 560947818;
  v10 = v9;
  v11 = *(uint64_t (**)(uint64_t (**)(_QWORD), const void *, UInt32 *, UInt32 *, const AudioStreamPacketDescription *))(*(_QWORD *)((**v9)(v9) + 112) + 40);
  if (v11)
    return v11(v10[3], inInputData, ioInputDataByteSize, ioNumberPackets, inPacketDescription);
  else
    return -4;
}

void IPCAURegistrar::ApplicationStateChangedNotificationCallback(IPCAURegistrar *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  NSObject *v6;
  _QWORD v7[6];

  v6 = *((_QWORD *)a2 + 28);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZN14IPCAURegistrar43ApplicationStateChangedNotificationCallbackEP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke;
  v7[3] = &__block_descriptor_48_e5_v8__0l;
  v7[4] = a2;
  v7[5] = a5;
  dispatch_sync(v6, v7);
}

const __CFNumber *GetNumber(const __CFDictionary *a1, const __CFString *a2, unsigned int *a3)
{
  const __CFNumber *result;
  const __CFNumber *v5;
  CFTypeID v6;

  *a3 = 0;
  result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v5 = result;
    v6 = CFGetTypeID(result);
    if (v6 == CFNumberGetTypeID())
      return (const __CFNumber *)(CFNumberGetValue(v5, kCFNumberSInt32Type, a3) != 0);
    else
      return 0;
  }
  return result;
}

void sub_18EE0E994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18EE0F050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v3 - 120));
  applesauce::CF::StringRef::~StringRef((const void **)(v3 - 112));

  _Unwind_Resume(a1);
}

applesauce::CF::ArrayRef *applesauce::CF::ArrayRef::ArrayRef(applesauce::CF::ArrayRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return this;
}

void sub_18EE0F260(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

void AudioComponentRegistrationInfo::~AudioComponentRegistrationInfo(AudioComponentRegistrationInfo *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const void *)*((_QWORD *)this + 7);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 6);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 5);
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 3);
  if (v5)
    CFRelease(v5);
}

uint64_t AudioComponentRegistrationInfo::AudioComponentRegistrationInfo(uint64_t a1, uint64_t a2, int a3, CFTypeRef *a4, int a5, const void **a6, const void **a7, const void **a8)
{
  int v13;
  CFTypeRef v14;
  const void *v15;
  const void *v16;
  const void *v17;

  v13 = *(_DWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 20) = a3;
  v14 = *a4;
  if (*a4)
    CFRetain(*a4);
  *(_QWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = a5;
  v15 = *a6;
  if (v15)
    CFRetain(v15);
  *(_QWORD *)(a1 + 40) = v15;
  v16 = *a7;
  if (v16)
    CFRetain(v16);
  *(_QWORD *)(a1 + 48) = v16;
  v17 = *a8;
  if (v17)
    CFRetain(v17);
  *(_QWORD *)(a1 + 56) = v17;
  return a1;
}

void APComponent_NSExtension::create_shared(APComponent_NSExtension *this, const AudioComponentRegistrationInfo *a2, NSString *a3, NSExtension *a4)
{
  NSExtension *v7;
  APComponent_NSExtension *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  NSString *v19;

  v19 = a3;
  v7 = a4;
  v8 = (APComponent_NSExtension *)operator new();
  APComponent_NSExtension::APComponent_NSExtension(v8, a2, v19, v7);
  *(_QWORD *)this = v8;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917E88;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  *((_QWORD *)this + 1) = v9;
  v11 = (std::__shared_weak_count *)*((_QWORD *)v8 + 2);
  if (v11)
  {
    if (v11->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    *((_QWORD *)v8 + 1) = v8;
    *((_QWORD *)v8 + 2) = v9;
    std::__shared_weak_count::__release_weak(v11);
  }
  else
  {
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v16 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    *((_QWORD *)v8 + 1) = v8;
    *((_QWORD *)v8 + 2) = v9;
  }
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_14:

}

void sub_18EE0F4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);

  _Unwind_Resume(a1);
}

void APComponent_NSExtension::APComponent_NSExtension(APComponent_NSExtension *this, const AudioComponentRegistrationInfo *a2, NSString *a3, NSExtension *a4)
{
  NSString *v7;
  NSExtension *v8;
  unsigned int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  NSString *v13;
  NSExtension *v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  *(_QWORD *)this = off_1E2908AA0;
  v9 = *((_DWORD *)a2 + 5);
  v10 = *((_DWORD *)a2 + 8);
  v16[0] = &off_1E2915B58;
  v16[1] = this;
  v17 = v16;
  APComponent::APComponent((uint64_t)this, 3, 70, (uint64_t)a2, v9, (CFTypeRef *)a2 + 3, v10, (uint64_t)v16);
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  *(_QWORD *)this = off_1E2908AA0;
  v13 = v7;
  *((_QWORD *)this + 20) = v13;
  v14 = v8;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = v14;
  v15 = *((_QWORD *)a2 + 5);
  if (v15)
    CFRetain(*((CFTypeRef *)a2 + 5));
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = v15;
  APComponent::setTags((APComponent *)this, *((CFTypeRef *)a2 + 7));

}

void sub_18EE0F680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void APComponent::setTags(APComponent *this, CFTypeRef cf)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t acv2::ConverterRegistry::GetInputFormatsSet(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t result;
  acv2::ConverterRegistry *v6;
  acv2::ConverterRegistry *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2 + 1;
  *a2 = (uint64_t)v4;
  a2[2] = 0;
  *v4 = 0;
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, 0x6C70636Du, 1819304813);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, 0x616C6177u, 1634492791);
  result = (uint64_t)std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, 0x756C6177u, 1970037111);
  if (!*(_BYTE *)(a1 + 64))
  {
    v6 = *(acv2::ConverterRegistry **)(a1 + 8);
    v7 = *(acv2::ConverterRegistry **)(a1 + 16);
    if ((acv2::ConverterRegistry::HaveDecoderFactory(v6, v7, 1634492791, 1819304813) & 1) == 0)
    {
      v8 = operator new();
      qmemcpy((void *)(v8 + 8), "walamcpledlnwalalppa", 20);
      *(_QWORD *)v8 = &off_1E290B2C0;
      acv2::ConverterRegistry::AddFactory((acv2::ConverterRegistry *)a1, (acv2::ConverterFactory *)v8);
      v6 = *(acv2::ConverterRegistry **)(a1 + 8);
      v7 = *(acv2::ConverterRegistry **)(a1 + 16);
    }
    if ((acv2::ConverterRegistry::HaveDecoderFactory(v6, v7, 1970037111, 1819304813) & 1) == 0)
    {
      v9 = operator new();
      qmemcpy((void *)(v9 + 8), "walumcpledlnwalulppa", 20);
      *(_QWORD *)v9 = &off_1E290B2C0;
      acv2::ConverterRegistry::AddFactory((acv2::ConverterRegistry *)a1, (acv2::ConverterFactory *)v9);
    }
    result = acv2::ConverterRegistry::MakeFactories((acv2::ConverterRegistry *)a1, 0, 1819304813, COERCE_DOUBLE(1633969507));
    *(_BYTE *)(a1 + 64) = 1;
  }
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  while (v11 != v10)
  {
    if (*(_DWORD *)(*(_QWORD *)v11 + 12) == 1819304813)
      result = (uint64_t)std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, *(_DWORD *)(*(_QWORD *)v11 + 8), *(_DWORD *)(*(_QWORD *)v11 + 8));
    v11 += 8;
  }
  return result;
}

void std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int>,`anonymous namespace'::BlockFormatRef>,std::__map_value_compare<std::tuple<unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int>,`anonymous namespace'::BlockFormatRef>,std::less<std::tuple<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int>,`anonymous namespace'::BlockFormatRef>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    operator delete(a1);
  }
}

uint64_t *std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,`anonymous namespace'::ElementRef<AudioMetadataObject>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,`anonymous namespace'::ElementRef<AudioMetadataObject>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,`anonymous namespace'::ElementRef<AudioMetadataObject>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

AudioComponent AudioComponentRegister(const AudioComponentDescription *inDesc, CFStringRef inName, UInt32 inVersion, AudioComponentFactoryFunction inFactory)
{
  OpaqueAudioComponent *v4;
  const AudioComponentDescription *v9;
  UInt32 componentFlags;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v15;
  unint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  CFTypeRef cf;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::recursive_mutex *v34[2];
  _QWORD v35[3];
  _QWORD *v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v4 = 0;
  v39 = *MEMORY[0x1E0C80C00];
  if (!inDesc || !inName || !inFactory)
    return v4;
  GlobalComponentPluginMgr((uint64_t *)v34);
  if (EmbeddedComponentManager::isComponentDescriptionVisible((EmbeddedComponentManager *)inDesc->componentFlags, v9))
  {
    componentFlags = inDesc->componentFlags;
    CFRetain(inName);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, inName);
    v35[0] = &off_1E29135A8;
    v35[1] = inFactory;
    v36 = v35;
    v11 = operator new();
    v12 = (uint64_t)v36;
    if (v36)
    {
      if (v36 == v35)
      {
        v38 = v37;
        (*(void (**)(_QWORD *, _BYTE *))(v35[0] + 24))(v35, v37);
LABEL_11:
        APComponent::APComponent(v11, 0, 100, (uint64_t)inDesc, componentFlags & 8, &cf, inVersion, (uint64_t)v37);
        v32 = v11;
        v13 = (std::__shared_weak_count *)operator new();
        v13->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917D00;
        v13->__shared_weak_owners_ = 0;
        v13[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
        v33 = v13;
        v15 = *(std::__shared_weak_count **)(v11 + 16);
        if (v15)
        {
          if (v15->__shared_owners_ != -1)
            goto LABEL_24;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
          p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v18 = __ldxr(p_shared_weak_owners);
          while (__stxr(v18 + 1, p_shared_weak_owners));
          *(_QWORD *)(v11 + 8) = v11;
          *(_QWORD *)(v11 + 16) = v13;
          std::__shared_weak_count::__release_weak(v15);
        }
        else
        {
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
          v20 = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          *(_QWORD *)(v11 + 8) = v11;
          *(_QWORD *)(v11 + 16) = v13;
        }
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
LABEL_24:
        v23 = v38;
        if (v38 == v37)
        {
          v24 = 4;
          v23 = v37;
        }
        else
        {
          if (!v38)
            goto LABEL_29;
          v24 = 5;
        }
        (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_29:
        v25 = v36;
        if (v36 == v35)
        {
          v26 = 4;
          v25 = v35;
        }
        else
        {
          if (!v36)
          {
LABEL_34:
            if (cf)
              CFRelease(cf);
            v4 = (OpaqueAudioComponent *)AudioComponentMgr_Base::addComponentLocally((uint64_t)v34[1], &v32);
            v27 = v33;
            if (v33)
            {
              v28 = (unint64_t *)&v33->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            goto LABEL_41;
          }
          v26 = 5;
        }
        (*(void (**)(void))(*v25 + 8 * v26))();
        goto LABEL_34;
      }
      v12 = (*(uint64_t (**)(void))(*v36 + 16))();
    }
    v38 = (_BYTE *)v12;
    goto LABEL_11;
  }
  v4 = 0;
LABEL_41:
  if (v34[0])
    std::recursive_mutex::unlock(v34[0]);
  return v4;
}

void sub_18EE0FD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::recursive_mutex *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AddACQEventWithIDImpl(__int128 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  __int128 v19;
  unsigned __int8 v20;
  uint64_t *v21;
  unint64_t v22;
  int v23;
  char *v24;
  char *v25;
  _BYTE *v26;
  __int128 v27;
  __uint64_t v28;
  timespec __tp;

  if (a3 && a4 && a5)
  {
    if (a2 == 2 || a2 == 1)
      kdebug_trace();
    clock_gettime(_CLOCK_REALTIME, &__tp);
    v28 = 0;
    pthread_threadid_np(0, &v28);
    GetACQEventManager();
    if (byte_1EE1656E8)
    {
      do
        v16 = __ldaxr(qword_1EE1476D0);
      while (__stlxr(v16 + 1, qword_1EE1476D0));
      v17 = &GetACQEventManager(void)::sACQEventManager[120 * (v16 & 0x3FF)];
      os_unfair_lock_lock((os_unfair_lock_t)v17 + 1000);
      *(timespec *)(v17 + 3944) = __tp;
      *((_DWORD *)v17 + 972) = a2;
      *((_QWORD *)v17 + 487) = a3;
      *((_QWORD *)v17 + 488) = a4;
      *((_QWORD *)v17 + 489) = a5;
      *((_DWORD *)v17 + 980) = a6;
      *((_QWORD *)v17 + 491) = a7;
      *((_QWORD *)v17 + 492) = a8;
      *((_QWORD *)v17 + 495) = v28;
      v18 = v17 + 3992;
      if (v17[3992])
        *v18 = 0;
      if (a1)
      {
        v19 = *a1;
        *((_QWORD *)v17 + 498) = *((_QWORD *)a1 + 2);
        *((_OWORD *)v17 + 248) = v19;
        *v18 = 1;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)v17 + 1000);
      caulk::semaphore::signal((caulk::semaphore *)&byte_1EE1476C0);
    }
    v20 = atomic_load((unsigned __int8 *)GetACQEventManager(void)::sACQEventManager);
    if ((v20 & 1) == 0)
    {
      v21 = &qword_1EE1467B0;
      if (a2)
        v21 = &qword_1EE146F38;
      do
        v22 = __ldaxr((unint64_t *)v21);
      while (__stlxr(v22 + 1, (unint64_t *)v21));
      v23 = v22 & 0xF;
      v24 = (char *)&unk_1EE1467B8;
      if (a2)
        v24 = (char *)&unk_1EE146F40;
      v25 = &v24[120 * v23];
      os_unfair_lock_lock((os_unfair_lock_t)v25 + 28);
      *(timespec *)(v25 + 56) = __tp;
      *(_DWORD *)v25 = a2;
      *((_QWORD *)v25 + 1) = a3;
      *((_QWORD *)v25 + 2) = a4;
      *((_QWORD *)v25 + 3) = a5;
      *((_DWORD *)v25 + 8) = a6;
      *((_QWORD *)v25 + 5) = a7;
      *((_QWORD *)v25 + 6) = a8;
      *((_QWORD *)v25 + 9) = v28;
      v26 = v25 + 104;
      if (v25[104])
        *v26 = 0;
      if (a1)
      {
        v27 = *a1;
        *((_QWORD *)v25 + 12) = *((_QWORD *)a1 + 2);
        *((_OWORD *)v25 + 5) = v27;
        *v26 = 1;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)v25 + 28);
    }
  }
}

void GetACQEventManager(void)
{
  unsigned __int8 v0;
  ACQEventManager *v1;

  if ((v0 & 1) == 0)
  {
    if ((_DWORD)v1)
    {
      ACQEventManager::ACQEventManager(v1);
    }
  }
}

void sub_18EE100E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GlobalComponentPluginMgr(uint64_t *a1)
{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void *)MEMORY[0x193FFEC70]();
  {
    v6 = operator new();
    caulk::synchronized<AudioComponentMgr_NSExtension,std::recursive_mutex,caulk::empty_atomic_interface<AudioComponentMgr_NSExtension>>::synchronized<>(v6);
    GlobalComponentPluginMgr(void)::sImpl = v6;
  }
  v4 = GlobalComponentPluginMgr(void)::sImpl;
  v5 = GlobalComponentPluginMgr(void)::sImpl + 64;
  std::recursive_mutex::lock((std::recursive_mutex *)GlobalComponentPluginMgr(void)::sImpl);
  *a1 = v4;
  a1[1] = v5;
  if ((GlobalComponentPluginMgr(void)::initialized & 1) == 0)
  {
    GlobalComponentPluginMgr(void)::initialized = 1;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v4 + 64);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_18EE101C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10A0C40F084F79CLL);
  _Unwind_Resume(a1);
}

BOOL EmbeddedComponentManager::isComponentDescriptionVisible(EmbeddedComponentManager *this, const AudioComponentDescription *a2)
{
  int AppBooleanValue;

  if ((this & ~tkqMjk4y) == 0)
    return 1;
  AppBooleanValue = gAllCodecsOK;
  if (gAllCodecsOK < 0)
  {
    AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("AllCodecsOK"), CFSTR("com.apple.coreaudio"), 0);
    gAllCodecsOK = AppBooleanValue;
  }
  return AppBooleanValue != 0;
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return this;
}

void sub_18EE102E4(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

uint64_t APComponent::APComponent(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5, CFTypeRef *a6, int a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  int v12;
  CFTypeRef v13;

  *(_QWORD *)a1 = off_1E2901070;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  v10 = *(_DWORD *)(a4 + 8);
  v11 = *(_DWORD *)(a4 + 12) & 0xFFFFFFE3 | (4 * ((a5 >> 2) & 7));
  v12 = *(_DWORD *)(a4 + 16);
  *(_QWORD *)(a1 + 36) = *(_QWORD *)a4;
  *(_DWORD *)(a1 + 44) = v10;
  *(_DWORD *)(a1 + 48) = v11;
  *(_DWORD *)(a1 + 52) = v12;
  *(_DWORD *)(a1 + 56) = a7;
  *(_DWORD *)(a1 + 60) = a3;
  v13 = *a6;
  if (*a6)
    CFRetain(*a6);
  *(_QWORD *)(a1 + 64) = v13;
  *(_BYTE *)(a1 + 72) = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 80, a8);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = 1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

void sub_18EE103BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;
  std::__shared_weak_count *v4;

  applesauce::CF::StringRef::~StringRef(v2);
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*),std::allocator<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*)>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E29135A8;
  a2[1] = v2;
  return result;
}

uint64_t AudioComponentMgr_Base::addComponentLocally(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  v3 = AudioComponentMgr_Base::_addComponent((char **)a1, a2);
  v4 = v3;
  v5 = (_QWORD *)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  v7 = *(uint64_t **)(a1 + 24);
  while (v6 != v7)
  {
    v8 = *v6;
    v6 += 2;
    *v5 = v8;
    v5 = (_QWORD *)(v8 + 24);
  }
  *v5 = 0;
  if (v3)
    dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_73);
  return v4;
}

uint64_t AudioComponentMgr_Base::_addComponent(char **a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  os_log_t v6;
  _QWORD *v9;
  char *SortedPosition;
  __int128 *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t result;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  NSObject *v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_DWORD *)(*a2 + 36);
  if (v3 == 1145392463 || *(_DWORD *)(*a2 + 40) == 1145392463 || *(_DWORD *)(*a2 + 44) == 1145392463)
  {
    if (gAudioComponentLogCategory)
    {
      v6 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v18 = (_QWORD *)operator new();
      v18[1] = 0;
      v6 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v18 = v6;
      gAudioComponentLogCategory = (uint64_t)v18;
    }
    v19 = objc_retainAutorelease(v6);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = 136315394;
      v21 = "AudioComponentPluginMgr.mm";
      v22 = 1024;
      v23 = 1139;
      _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Can't register component with 'DEMO' type, subtype, or manufacturer.", (uint8_t *)&v20, 0x12u);
    }
    return 0;
  }
  if (v3 == 1635087216)
  {
    if (!(*((unsigned int (**)(char **))*a1 + 14))(a1))
      return 0;
    v2 = *a2;
  }
  v9 = a1 + 2;
  SortedPosition = AudioComponentVector::findSortedPosition(a1[2], a1[3], (__int128 *)(v2 + 36));
  v11 = (__int128 *)SortedPosition;
  if (a1[3] == SortedPosition
    || (v12 = *(_DWORD **)SortedPosition,
        v13 = (_DWORD *)*a2,
        *(_DWORD *)(*(_QWORD *)SortedPosition + 36) != *(_DWORD *)(*a2 + 36))
    || v12[10] != v13[10]
    || v12[11] != v13[11]
    || v12[14] != v13[14])
  {
    v17 = a1 + 2;
    v16 = (unint64_t)v11;
    goto LABEL_23;
  }
  result = (*((uint64_t (**)(char **, char *, uint64_t *))*a1 + 12))(a1, SortedPosition, a2);
  if (result)
    return result;
  if (*(_DWORD *)(*a2 + 60) > *(_DWORD *)(*(_QWORD *)v11 + 60))
  {
    v15 = (char *)v11 - *v9;
    std::vector<std::shared_ptr<APComponent>>::erase[abi:ne180100]((uint64_t)v9, v11);
    v16 = (unint64_t)&v15[*v9];
    v17 = v9;
LABEL_23:
    AudioComponentVector::insertSorted(v17, v16, a2);
    return *a2;
  }
  return 0;
}

char *AudioComponentVector::findSortedPosition(char *a1, char *a2, __int128 *a3)
{
  char *v3;
  unint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  int v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v10 = *a3;
  v11 = *((_QWORD *)a3 + 2);
  v12 = 100;
  if (a2 != a1)
  {
    v3 = a1;
    v4 = (a2 - a1) >> 4;
    do
    {
      v5 = (uint64_t *)&v3[16 * (v4 >> 1)];
      v7 = *v5;
      v6 = (char *)(v5 + 2);
      v8 = APComponent::Key::sortCompare((_DWORD *)(v7 + 36), &v10, 0);
      if (v8 >= 0)
        v4 >>= 1;
      else
        v4 += ~(v4 >> 1);
      if (v8 < 0)
        v3 = v6;
    }
    while (v4);
    return v3;
  }
  return a2;
}

uint64_t APComponent::Key::sortCompare(_DWORD *a1, _DWORD *a2, char a3)
{
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  _BOOL4 v8;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v12;
  unsigned int v13;
  int AppBooleanValue;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;

  if (*a1 < *a2)
    result = 0xFFFFFFFFLL;
  else
    result = *a1 > *a2;
  if (!(_DWORD)result)
  {
    v6 = a1[1];
    v7 = a2[1];
    v20 = v6 >= v7;
    v8 = v6 > v7;
    result = v20 ? v8 : 0xFFFFFFFFLL;
    if (!(_DWORD)result)
    {
      v10 = a1[2];
      v11 = a2[2];
      v20 = v10 >= v11;
      v12 = v10 > v11;
      if (v20)
        v13 = v12;
      else
        v13 = -1;
      AppBooleanValue = reverseManufacturerSort(void)::gHWCodecsFirst;
      if (reverseManufacturerSort(void)::gHWCodecsFirst < 0)
      {
        AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("hw_codecs_first"), CFSTR("com.apple.coreaudio"), 0);
        reverseManufacturerSort(void)::gHWCodecsFirst = AppBooleanValue;
      }
      if (AppBooleanValue)
        result = -v13;
      else
        result = v13;
      if (!(_DWORD)result)
      {
        if ((a3 & 1) != 0)
          goto LABEL_23;
        v15 = a1[5];
        v16 = a2[5];
        v20 = v15 >= v16;
        v17 = v15 > v16;
        if (!v20)
          v17 = -1;
        if (!v17)
        {
LABEL_23:
          v18 = a1[6];
          v19 = a2[6];
          v20 = v18 >= v19;
          if (v18 <= v19)
            v21 = 0;
          else
            v21 = -1;
          if (v20)
            return v21;
          else
            return 1;
        }
        else
        {
          return -v17;
        }
      }
    }
  }
  return result;
}

_QWORD *AudioComponentVector::insertSorted(_QWORD *result, unint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  int64x2_t v40;
  char *v41;
  _QWORD *v42;

  v5 = result;
  v6 = result[1];
  v8 = result + 2;
  v7 = result[2];
  if (v6 >= v7)
  {
    v9 = *result;
    v10 = ((uint64_t)(v6 - *result) >> 4) + 1;
    if (v10 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = a2 - v9;
    v12 = (uint64_t)(a2 - v9) >> 4;
    v13 = v7 - v9;
    if (v13 >> 3 > v10)
      v10 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v10;
    v38 = v8;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v14);
    else
      v15 = 0;
    v19 = (uint64_t *)(v14 + 16 * v12);
    v35 = (char *)v14;
    *(_QWORD *)&v36 = v19;
    *((_QWORD *)&v36 + 1) = v19;
    v37 = (char *)(v14 + 16 * v15);
    if (v12 == v15)
    {
      if (v11 < 1)
      {
        if (v9 == a2)
          v21 = 1;
        else
          v21 = v11 >> 3;
        v42 = v8;
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v21);
        v24 = v36;
        v25 = *((_QWORD *)&v36 + 1) - v36;
        if (*((_QWORD *)&v36 + 1) == (_QWORD)v36)
        {
          v30 = vdupq_n_s64(v36);
          v27 = (unint64_t)&v22[16 * (v21 >> 2)];
        }
        else
        {
          v26 = v25 >> 4;
          v27 = (unint64_t)&v22[16 * (v21 >> 2) + (v25 & 0xFFFFFFFFFFFFFFF0)];
          v28 = 16 * v26;
          v29 = &v22[16 * (v21 >> 2)];
          do
          {
            *(_OWORD *)v29 = *(_OWORD *)v24;
            v29 += 16;
            *(_QWORD *)v24 = 0;
            *(_QWORD *)(v24 + 8) = 0;
            v24 += 16;
            v28 -= 16;
          }
          while (v28);
          v30 = (int64x2_t)v36;
        }
        v31 = v37;
        v39 = v35;
        v35 = v22;
        *(_QWORD *)&v36 = &v22[16 * (v21 >> 2)];
        v40 = v30;
        *((_QWORD *)&v36 + 1) = v27;
        v37 = &v22[16 * v23];
        v41 = v31;
        std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v39);
        v19 = (uint64_t *)*((_QWORD *)&v36 + 1);
      }
      else
      {
        v20 = v12 + 2;
        if (v12 >= -1)
          v20 = v12 + 1;
        v19 -= 2 * (v20 >> 1);
        *(_QWORD *)&v36 = v19;
        *((_QWORD *)&v36 + 1) = v19;
      }
    }
    *v19 = *a3;
    v32 = a3[1];
    v19[1] = v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v19 = (uint64_t *)*((_QWORD *)&v36 + 1);
    }
    *((_QWORD *)&v36 + 1) = v19 + 2;
    std::vector<std::shared_ptr<APComponent>>::__swap_out_circular_buffer(v5, &v35, (_QWORD *)a2);
    return (_QWORD *)std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v35);
  }
  else if (a2 == v6)
  {
    v16 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((_QWORD *)&v16 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    result[1] = a2 + 16;
  }
  else
  {
    std::vector<std::shared_ptr<APComponent>>::__move_range((uint64_t)result, a2, v6, (char *)(a2 + 16));
    if (a2 <= (unint64_t)a3)
      a3 += 2 * (v5[1] > (unint64_t)a3);
    return std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)a2, *a3, a3[1]);
  }
  return result;
}

void sub_18EE10A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<APComponent>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    result = (uint64_t)(v4 - 16);
    v7 = 16 * ((v4 - a4) >> 4);
    v8 = a2 - 16;
    do
    {
      result = std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](result, (__int128 *)(v8 + v7)) - 16;
      v7 -= 16;
    }
    while (v7);
  }
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::shared_ptr<APComponent>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__function::__func<APComponent_NSExtension::APComponent_NSExtension(AudioComponentRegistrationInfo const&,NSString *,NSExtension *)::$_0,std::allocator<APComponent_NSExtension::APComponent_NSExtension(AudioComponentRegistrationInfo const&,NSString *,NSExtension *)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915B58;
  a2[1] = v2;
  return result;
}

uint64_t AudioComponentMgr_NSExtension::hasSpeechSynthesizerSupport(AudioComponentMgr_NSExtension *this)
{
  return 1;
}

uint64_t AudioComponentMgr_NSExtension::handleDuplicateRegistrationAttempt(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    return 0;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  v27 = *a2;
  v28 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
  v11 = (v10 == 0) ^ ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 64))(*a3) != 0);
  if ((v11 & 1) != 0)
  {
    if (!v7)
      goto LABEL_31;
    goto LABEL_27;
  }
  std::shared_ptr<APComponent>::shared_ptr[abi:ne180100]<APComponent,void>(&v25, *(_QWORD *)(v6 + 8), *(std::__shared_weak_count **)(v6 + 16));
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 64))(v25);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 64))(*a3);
  if (v12)
  {
    std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(v12 + 200), *a3, a3[1]);
    std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(*a3 + 144), v25, (uint64_t)v26);
    v6 = v25;
    v14 = v26;
    if (!v26)
      goto LABEL_14;
  }
  else
  {
    std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(v13 + 200), v25, (uint64_t)v26);
    std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(*a3 + 144), *a3, a3[1]);
    v6 = *a3;
    v14 = (std::__shared_weak_count *)a3[1];
    if (!v14)
      goto LABEL_14;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
LABEL_14:
  v17 = v26;
  if (v26)
  {
    v18 = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v6 != v27)
    std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](a2, v6, (uint64_t)v14);
  if (v14)
  {
    v20 = (unint64_t *)&v14->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v7 = v28;
  if (v28)
  {
LABEL_27:
    v22 = (unint64_t *)&v7->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_31:
  if ((v11 & 1) != 0)
    return 0;
  return v6;
}

void sub_18EE10DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t APComponent::asExtensionComponent(APComponent *this)
{
  return 0;
}

uint64_t std::__shared_ptr_pointer<APComponent *,std::shared_ptr<APComponent>::__shared_ptr_default_delete<APComponent,APComponent>,std::allocator<APComponent>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void APComponent::~APComponent(APComponent *this)
{
  APComponent::~APComponent(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  const void *v3;
  APComponent *v4;
  uint64_t v5;
  const void *v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = off_1E2901070;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
    free(v2);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  v3 = (const void *)*((_QWORD *)this + 15);
  if (v3)
    CFRelease(v3);
  v4 = (APComponent *)*((_QWORD *)this + 13);
  if (v4 == (APComponent *)((char *)this + 80))
  {
    v5 = 4;
    v4 = (APComponent *)((char *)this + 80);
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_10:
  v6 = (const void *)*((_QWORD *)this + 8);
  if (v6)
    CFRelease(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

uint64_t caulk::synchronized<AudioComponentMgr_NSExtension,std::recursive_mutex,caulk::empty_atomic_interface<AudioComponentMgr_NSExtension>>::synchronized<>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  int out_token[3];

  v2 = MEMORY[0x193FFE25C]();
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_QWORD *)(v2 + 64) = &off_1E2908860;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_BYTE *)(v2 + 104) = 1;
  if (!gAudioComponentLogCategory)
  {
    v3 = (_QWORD *)operator new();
    v3[1] = 0;
    *v3 = os_log_create("com.apple.coreaudio", "audiocomp");
    gAudioComponentLogCategory = (uint64_t)v3;
  }
  out_token[0] = 0;
  dispatch_get_global_queue(0, 0);
  v4 = objc_claimAutoreleasedReturnValue();
  notify_register_dispatch("com.apple.coreaudio.list_components", out_token, v4, &__block_literal_global_1531);

  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_BYTE *)(a1 + 200) = 1;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 64) = &off_1E2909560;
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  return a1;
}

void sub_18EE11034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 80);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)v10);
  _Unwind_Resume(a1);
}

uint64_t AudioComponentMgr_RegistrarService::initPhase2(AudioComponentMgr_RegistrarService *this)
{
  EmbeddedComponentManager *v2;
  _QWORD block[5];

  v2 = (EmbeddedComponentManager *)EmbeddedComponentManager::registerInternalAudioUnits(this);
  EmbeddedComponentManager::registerInternalAudioCodecs(v2);
  *((_BYTE *)this + 80) = dyld_program_sdk_at_least();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN34AudioComponentMgr_RegistrarService27connectToRegistrationServerEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  if (AudioComponentMgr_RegistrarService::connectToRegistrationServer(void)::onceToken != -1)
    dispatch_once(&AudioComponentMgr_RegistrarService::connectToRegistrationServer(void)::onceToken, block);
  return (*(uint64_t (**)(AudioComponentMgr_RegistrarService *, _QWORD, _QWORD))(*(_QWORD *)this + 120))(this, 0, 0);
}

void EmbeddedComponentManager::registerInternalAudioCodecs(EmbeddedComponentManager *this)
{
  int v1;
  uint64_t v2;
  char *v3;
  size_t v4;
  const __CFAllocator *v5;
  size_t v6;
  const __CFURL *v7;
  const __CFURL *v8;
  __CFReadStream *v9;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  NSObject *Value;
  NSObject *v13;
  unsigned int v14;
  char *v15;
  const __CFString *ValueAtIndex;
  void *v17;
  void (*v18)(_QWORD);
  NSObject *v19;
  NSObject *v20;
  char *v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  NSObject *v25;
  char *v26;
  NSObject *v28;
  CFIndex Count;
  NSObject *v30;
  NSObject *v31;
  char v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  char *v40;
  char buffer[4];
  const char *v42;
  __int16 v43;
  int v44;
  UInt8 __dst[1024];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  memcpy(__dst, "/System/Library/Frameworks/AudioToolbox.framework", sizeof(__dst));
  v1 = strlen((const char *)__dst);
  v2 = (v1 + 1);
  __dst[v1] = 47;
  v3 = (char *)&__dst[v2];
  v4 = 1024 - v2;
  strncpy((char *)&__dst[v2], "Codecs.plist", 1024 - v2);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = strlen((const char *)__dst);
  v7 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], __dst, v6, 0);
  if (!v7)
  {
    v9 = 0;
    goto LABEL_9;
  }
  v8 = v7;
  v9 = CFReadStreamCreateWithFile(v5, v7);
  CFRelease(v8);
  if (!v9)
  {
LABEL_9:
    v13 = 0;
    goto LABEL_10;
  }
  if (!CFReadStreamOpen(v9))
  {
LABEL_33:
    v13 = 0;
    goto LABEL_34;
  }
  v10 = (const __CFDictionary *)CFPropertyListCreateWithStream(v5, v9, 0, 0, 0, 0);
  if (v10)
  {
    v11 = v10;
    Value = CFDictionaryGetValue(v10, CFSTR("codecList"));
    v13 = Value;
    if (Value)
    {
      CFRetain(Value);
    }
    else
    {
      v30 = CADefaultLog();
      if (v30)
      {
        v31 = v30;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buffer = 136315394;
          v42 = "EmbeddedAudioCodecLoader.cpp";
          v43 = 1024;
          v44 = 67;
          _os_log_impl(&dword_18EE07000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d couldn't get codec array from Codec plist property list\n", (uint8_t *)buffer, 0x12u);
        }
      }
    }
    CFRelease(v11);
    goto LABEL_34;
  }
  v28 = CADefaultLog();
  v13 = v28;
  if (v28)
  {
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buffer = 136315394;
      v42 = "EmbeddedAudioCodecLoader.cpp";
      v43 = 1024;
      v44 = 61;
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d couldn't get property list from Codec plist read stream\n", (uint8_t *)buffer, 0x12u);
    }
    goto LABEL_33;
  }
LABEL_34:
  CFReadStreamClose(v9);
  CFRelease(v9);
  if (v13)
  {
    Count = CFArrayGetCount((CFArrayRef)v13);
    if (Count < 0)
    {
LABEL_28:
      CFRelease(v13);
      return;
    }
    v9 = (__CFReadStream *)Count;
    v32 = 0;
    goto LABEL_11;
  }
  v9 = 0;
LABEL_10:
  v32 = 1;
LABEL_11:
  v14 = 1;
  do
  {
    v15 = "AudioCodecs";
    if (v14 != 1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, v14 - 2);
      if (!ValueAtIndex)
        break;
      v15 = buffer;
      if (!CFStringGetCString(ValueAtIndex, buffer, 256, 0x600u))
        break;
    }
    strncpy(v3, v15, v4);
    v17 = dlopen((const char *)__dst, 0);
    if (!v17)
    {
      v19 = CADefaultLog();
      if (!v19)
        continue;
      v20 = v19;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        continue;
      v21 = dlerror();
      *(_DWORD *)buf = 136315906;
      v34 = "EmbeddedAudioCodecLoader.cpp";
      v35 = 1024;
      v36 = 102;
      v37 = 2080;
      v38 = (const char *)__dst;
      v39 = 2080;
      v40 = v21;
      v22 = v20;
      v23 = "%25s:%-5d couldn't open library %s:\n%s";
LABEL_24:
      _os_log_impl(&dword_18EE07000, v22, OS_LOG_TYPE_ERROR, v23, buf, 0x26u);
      continue;
    }
    v18 = (void (*)(_QWORD))dlsym(v17, "RegisterExternalAudioCodecs");
    if (!v18)
    {
      v24 = CADefaultLog();
      if (!v24)
        continue;
      v25 = v24;
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        continue;
      v26 = dlerror();
      *(_DWORD *)buf = 136315906;
      v34 = "EmbeddedAudioCodecLoader.cpp";
      v35 = 1024;
      v36 = 108;
      v37 = 2080;
      v38 = "RegisterExternalAudioCodecs";
      v39 = 2080;
      v40 = v26;
      v22 = v25;
      v23 = "%25s:%-5d couldn't lookup symbol %s:\n%s";
      goto LABEL_24;
    }
    v18(0);
  }
  while ((uint64_t)v9 >= v14++);
  if ((v32 & 1) == 0)
    goto LABEL_28;
}

uint64_t EmbeddedComponentManager::registerInternalAudioUnits(EmbeddedComponentManager *this)
{
  __int16 v1;
  uint64_t AppBooleanValue;
  int v3;
  const void *v4;
  const __CFBoolean *v5;
  const __CFBoolean *v6;
  CFTypeID v7;
  unsigned int v8;
  SystemAUsSoftLink *v9;
  uint64_t v10;
  uint64_t AudioDSPManager;

  v1 = tkqMjk4y;
  AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("AllAUsPublic"), CFSTR("com.apple.coreaudio"), 0);
  v3 = 1;
  if ((AppBooleanValue & 1) == 0 && (v1 & 0xC000) == 0)
  {
    AppBooleanValue = (uint64_t)SecTaskCreateFromSelf(0);
    if (AppBooleanValue)
    {
      v4 = (const void *)AppBooleanValue;
      v5 = (const __CFBoolean *)SecTaskCopyValueForEntitlement((SecTaskRef)AppBooleanValue, CFSTR("com.apple.coreaudio.register-internal-aus"), 0);
      if (v5)
      {
        v6 = v5;
        v7 = CFGetTypeID(v5);
        if (v7 == CFBooleanGetTypeID() && CFBooleanGetValue(v6))
        {
          do
            v8 = __ldaxr((unsigned int *)&tkqMjk4y);
          while (__stlxr(v8 | 0x8000, (unsigned int *)&tkqMjk4y));
          v3 = 1;
        }
        else
        {
          v3 = 0;
        }
        CFRelease(v6);
      }
      else
      {
        v3 = 0;
      }
      CFRelease(v4);
    }
    else
    {
      v3 = 0;
    }
  }
  SystemAUsSoftLink::instance((SystemAUsSoftLink *)AppBooleanValue);
  v9 = (SystemAUsSoftLink *)SystemAUsSoftLink::instance(void)::global();
  SystemAUsSoftLink::instance(v9);
  off_1ECEF4ED0();
  if (v3)
    v10 = 3;
  else
    v10 = 1;
  AudioDSPManager = GetAudioDSPManager();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)AudioDSPManager + 24))(AudioDSPManager, v10);
}

void SystemAUsSoftLink::instance(SystemAUsSoftLink *this)
{
  unsigned __int8 v1;
  SystemAUsSoftLink *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      SystemAUsSoftLink::SystemAUsSoftLink(v2);
    }
  }
}

void sub_18EE11680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SystemAUsSoftLink::SystemAUsSoftLink(SystemAUsSoftLink *this)
{
  void *v1;
  void *v2;

  SystemAUsSoftLink::instance(void)::global = 0;
  off_1ECEF4ED0 = 0;
  off_1ECEF4ED8 = 0;
  v1 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libEmbeddedSystemAUs.dylib", 1);
  if (!v1)
    __assert_rtn("SystemAUsSoftLink", "AudioToolboxSoftLink.h", 58, "lib != nullptr");
  v2 = v1;
  DLSymbol<void ()(void)>::init(&SystemAUsSoftLink::instance(void)::global, v1, "RegisterAudioUnits_Toolbox");
  DLSymbol<void ()(void)>::init(&off_1ECEF4ED0, v2, "RegisterAudioUnits_Instruments");
  off_1ECEF4ED8 = dlsym(v2, "AudioOutputUnitPublish_Impl");
  if (!off_1ECEF4ED8)
    __assert_rtn("init", "DLSymbol.h", 23, "mImpl != nullptr");
}

void *DLSymbol<void ()(void)>::init(_QWORD *a1, void *__handle, char *__symbol)
{
  void *result;

  result = dlsym(__handle, __symbol);
  *a1 = result;
  if (!result)
    __assert_rtn("init", "DLSymbol.h", 23, "mImpl != nullptr");
  return result;
}

uint64_t GetAudioDSPManager()
{
  unsigned __int8 v0;

  {
    GetAudioDSPManager::instance = GetAudioDSPManager::$_0::operator()();
  }
  return GetAudioDSPManager::instance;
}

void sub_18EE11800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GetAudioDSPManager::$_0::operator()()
{
  void *v0;
  uint64_t (*v1)(void);
  AudioComponentMgr_RegistrarService *v3;
  BOOL v4;
  BOOL v5;

  v0 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (v0)
  {
    v1 = (uint64_t (*)(void))dlsym(v0, "GetAudioDSPManager");
    if (v1)
      return v1();
  }
  else
  {
    dlerror();
    abort_report_np();
  }
  dlerror();
  v3 = (AudioComponentMgr_RegistrarService *)abort_report_np();
  return AudioComponentMgr_RegistrarService::retrieveComponents(v3, v4, v5);
}

void AudioComponentMgr_RegistrarService::retrieveComponents(id *this, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[7];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];

  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v14[3] = CFAbsoluteTimeGetCurrent();
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  objc_msgSend(this[11], "synchronousRemoteObjectProxyWithErrorHandler:", &__block_literal_global_61);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id *))*this + 16))(this);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *((unsigned __int8 *)this + 80);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN34AudioComponentMgr_RegistrarService18retrieveComponentsEbb_block_invoke_62;
  v9[3] = &unk_1E29199E8;
  v9[4] = v14;
  v9[5] = &v10;
  v9[6] = this;
  objc_msgSend(v6, "getComponentList:linkedSDKRequiresEntitlement:includeExtensions:forceWaitForExtensions:reply:", v7, v8, a2, a3, v9);

  if (*((_BYTE *)v11 + 24) && (_DWORD)a2)
    *((_BYTE *)this + 96) = 1;

  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(v14, 8);
}

void sub_18EE119A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<MP4AOTSpecificBase *,std::shared_ptr<MP4AOTSpecificBase>::__shared_ptr_default_delete<MP4AOTSpecificBase,MP4AOTSpecificBase>,std::allocator<MP4AOTSpecificBase>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void MP4GASpecificConfig::~MP4GASpecificConfig(MP4GASpecificConfig *this)
{
  JUMPOUT(0x193FFE460);
}

const char *CAMemoryStream::Write(CAMemoryStream *this, void *a2, const char *a3)
{
  const char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v3 = a3;
  if ((int)a3 >= 1)
  {
    v6 = *((_QWORD *)this + 2);
    v7 = v6 + a3;
    if ((unint64_t)(v7 + 1) <= *((_QWORD *)this + 3))
    {
      v8 = (char *)*((_QWORD *)this + 1);
    }
    else
    {
      v8 = (char *)malloc_type_realloc(*((void **)this + 1), (v7 & 0xFFFFFFFFFFFFFF80) + 128, 0x2426ABB1uLL);
      if (!v8)
      {
        fwrite("realloc failed", 0xEuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        return (const char *)0xFFFFFFFFLL;
      }
      *((_QWORD *)this + 1) = v8;
      *((_QWORD *)this + 3) = (v7 & 0xFFFFFFFFFFFFFF80) + 128;
      v6 = *((_QWORD *)this + 2);
    }
    memcpy(&v8[v6], a2, v3);
    *((_QWORD *)this + 2) = v7;
  }
  return v3;
}

void AddACQEvent(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  AddACQEventWithIDImpl(0, a1, a2, a3, a4, a5, a6, a7);
}

OSStatus AudioConverterConvertComplexBuffer(AudioConverterRef inAudioConverter, UInt32 inNumberPCMFrames, const AudioBufferList *inInputData, AudioBufferList *outOutputData)
{
  _QWORD v5[3];
  uint64_t (*v6[3])(uint64_t, uint64_t);
  AudioBufferList *v7;
  const AudioBufferList *v8;
  UInt32 v9;

  v9 = inNumberPCMFrames;
  v7 = outOutputData;
  v8 = inInputData;
  v5[0] = &v9;
  v5[1] = &v8;
  v5[2] = &v7;
  v6[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertComplexBuffer::$_0>;
  v6[1] = (uint64_t (*)(uint64_t, uint64_t))v5;
  return with_resolved((int)inAudioConverter, v6);
}

BOOL TOpaqueObject<AudioFileHandle,OpaqueAudioFileID *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AudioFileHandle>::sRTTI || a2 == (void *)MEMORY[0x1E0DDEC88];
}

uint64_t acv2::CodecConverter::ProduceOutput(acv2::CodecConverter *this, ACAudioSpan *a2)
{
  BOOL v4;
  int v5;
  char *v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  UInt32 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  const AudioBufferList *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  AudioStreamPacketDescription *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  int appended;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  const AudioBufferList *v47;
  uint64_t mNumberBuffers;
  UInt32 v49;
  UInt32 *p_mDataByteSize;
  UInt32 v51;
  AudioConverterCapturer *v52;
  uint64_t v53;
  const AudioBufferList *v54;
  uint64_t v55;
  UInt32 v56;
  UInt32 *v57;
  UInt32 v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int v62;
  UInt32 v63;
  uint64_t v64;
  const AudioBufferList *v65;
  uint64_t v66;
  _QWORD *p_mData;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  unsigned int v75;
  unsigned int v76;
  __int128 v77;
  __int128 v78;
  unsigned int v79;
  unsigned __int8 v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t message;
  caulk::concurrent::message *v86;
  const ACAudioSpan *v87;
  unsigned __int8 v88;
  uint64_t v89;
  acv2::AudioConverterBase *v90;
  char *v92;
  double *v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  UInt32 outStatus;
  int __src[4];
  _OWORD v100[2];
  UInt32 outBytesConsumed[4];

  if (*((_BYTE *)this + 203) && !*((_DWORD *)this + 100))
  {
    v83 = 0;
    v82 = 0;
    v81 = 0x100000000;
    return v81 | v82 | v83;
  }
  if (!*((_DWORD *)a2 + 1))
  {
    v81 = 0;
    v82 = 1869902592;
    v83 = 122;
    return v81 | v82 | v83;
  }
  if (*((_BYTE *)this + 198))
    v4 = *((_QWORD *)a2 + 5) == 0;
  else
    v4 = 0;
  if (!v4)
  {
    v5 = *((_DWORD *)this + 18);
    acv2::CodecConverter::CheckInitialize(this, 0, 0);
    LOBYTE(v97) = 0;
    BYTE4(v97) = 1;
    if (*(_DWORD *)a2 >= *((_DWORD *)a2 + 1))
      goto LABEL_192;
    v6 = (char *)this + 216;
    v7 = (_DWORD *)((char *)this + 588);
    v92 = (char *)this + 560;
    v93 = (double *)((char *)this + 572);
    while (1)
    {
      ACBaseAudioSpan::setAfter((uint64_t)this + 216, (unsigned int *)a2);
      ACBaseAudioSpan::copyEmptyMetadataEventsFrom((uint64_t *)this + 27, a2);
      v8 = *((_DWORD *)this + 100);
      if (*((_BYTE *)this + 203))
      {
        if (v8)
        {
LABEL_14:
          if (v8 >= *((_DWORD *)this + 55))
            v9 = *((_DWORD *)this + 55);
          else
            v9 = *((_DWORD *)this + 100);
          ACBaseAudioSpan::append((unsigned int *)this + 54, (acv2::CodecConverter *)((char *)this + 400), v9, v5);
          if (*((_BYTE *)this + 304)
            && *v7
            && *((_DWORD *)this + 74)
            && *(_DWORD *)(*((_QWORD *)this + 36) + 28) >= *v7)
          {
            v10 = *((_OWORD *)this + 36);
            *(_OWORD *)__src = *(_OWORD *)v92;
            v100[0] = v10;
            *(_QWORD *)&v100[1] = *((_QWORD *)this + 74);
            DWORD1(v100[0]) = v9;
            *v93 = *v93 + (double)v9;
            *((_DWORD *)this + 145) -= v9;
            AudioMetadataFrame_AppendEvent((uint64_t *)this + 33, (char *)__src);
            *((_QWORD *)this + 36) += *(unsigned int *)(*((_QWORD *)this + 36) + 8);
            --*((_DWORD *)this + 74);
          }
          ACBaseAudioSpan::completeMetadataFrame((uint64_t *)this + 27);
          ACBaseAudioSpan::advanceConsume((unint64_t)this + 400, v9, v5);
        }
        v11 = 0x100000000;
LABEL_24:
        v96 = v11;
        caulk::expected<BOOL,int>::value((uint64_t)&v96);
        if ((_BYTE)v96)
        {
          v12 = 1;
        }
        else
        {
          caulk::expected<BOOL,int>::value((uint64_t)&v97);
          v12 = (_BYTE)v97 != 0;
        }
        LOBYTE(v97) = v12;
        if (!BYTE4(v97))
        {
          v13 = 1;
          goto LABEL_29;
        }
        goto LABEL_30;
      }
      if (v8)
        goto LABEL_14;
      v94 = 0;
      v95 = 1;
      while (1)
      {
        outStatus = 999;
        v22 = *((_DWORD *)this + 55);
        if (*((_BYTE *)this + 197))
        {
          v23 = *((_DWORD *)this + 90);
          v24 = *((_DWORD *)this + 55);
          if (v23)
            v24 = v22 / v23;
        }
        else
        {
          v24 = *((_DWORD *)this + 55);
        }
        if (v24 <= *((_DWORD *)this + 91))
          v25 = *((_DWORD *)this + 91);
        else
          v25 = v24;
        v26 = v25;
        if (*((_BYTE *)this + 196))
        {
          v27 = *((_DWORD *)this + 90);
          if (v27 <= 1)
            v27 = 1;
          v26 = v27 * v25;
        }
        v28 = v25;
        if (*((_BYTE *)this + 197))
        {
          v29 = *((_DWORD *)this + 90);
          if (v29 <= 1)
            v29 = 1;
          v28 = v29 * v25;
        }
        if (*((_BYTE *)this + 380) && !*((_BYTE *)this + 388) || (v30 = (char *)this + 216, v28 > v22))
        {
          v31 = (const AudioBufferList *)(*((_QWORD *)this + 63) + 48);
          if (*((_QWORD *)this + 64) == *((_QWORD *)this + 65))
            v32 = 0;
          else
            v32 = *((_QWORD *)this + 64);
          v33 = *((_QWORD *)this + 67);
          if (v33 == *((_QWORD *)this + 68))
            v33 = 0;
          v34 = *((_DWORD *)this + 98);
          v35 = (AudioStreamPacketDescription *)*((unsigned int *)this + 99);
          *((_QWORD *)this + 55) = v33;
          ACBaseAudioSpan::set((uint64_t *)this + 50, v31, v32, v34, v35);
          if (*((_BYTE *)this + 428))
          {
            v36 = (unsigned int *)*((_QWORD *)this + 52);
            if (v36[4 * *v36 + 2] == 1094863915)
            {
              v37 = *(v36 - 9);
              if ((_DWORD)v37)
              {
                *((_BYTE *)this + 560) = 1;
                v38 = (uint64_t *)((char *)v36 + v37 - 48);
                *(_DWORD *)((char *)this + 561) = 0;
                *((_DWORD *)this + 141) = 0;
                *((_DWORD *)this + 142) = 40;
                *v93 = 0.0;
                *((_DWORD *)this + 145) = 0;
                *((_DWORD *)this + 146) = 1;
                *(_QWORD *)((char *)this + 588) = 0;
                *((_DWORD *)this + 149) = 0;
                *(_OWORD *)__src = 0u;
                memset(v100, 0, 28);
                BYTE8(v100[0]) = 1;
                *(_QWORD *)&v100[1] = 0x10000002CLL;
                AudioMetadataFrame::begin_new(v38, (unsigned int *)__src);
                AudioMetadataFrame_AppendEvent(v38, v92);
              }
            }
          }
          ACBaseAudioSpan::copyEmptyMetadataEventsFrom((uint64_t *)this + 50, (acv2::CodecConverter *)((char *)this + 216));
          if (*((_DWORD *)this + 91) < v25)
            v25 = *((_DWORD *)this + 91);
          if (*((_BYTE *)this + 196))
          {
            v39 = *((_DWORD *)this + 90);
            if (v39 <= 1)
              v39 = 1;
            v26 = v39 * v25;
          }
          else
          {
            v26 = v25;
          }
          v30 = (char *)this + 400;
        }
        if (*((_BYTE *)this + 202))
        {
          appended = 0;
          goto LABEL_127;
        }
        if (!*((_BYTE *)this + 199))
        {
          if (ACv2Workarounds::fix84702776_86723525_86479548_89800354_SinglePacketDesc == 1)
          {
            v41 = *((unsigned __int8 *)this + 197);
            if (*((_BYTE *)this + 197))
            {
              v41 = *((_DWORD *)this + 10) == 0;
              if (!*((_DWORD *)this + 10))
                v26 = 1;
            }
          }
          else
          {
            v41 = 0;
          }
          v42 = *((_QWORD *)this + 13);
          if (v42 && ((v43 = *(_DWORD *)(v42 + 24)) != 0 || *(_DWORD *)(v42 + 128)))
          {
            v44 = *(_DWORD *)(v42 + 128) + v43;
            if (v41)
              v45 = 1;
            else
              v45 = v44;
            acv2::AudioConverterChain::ObtainInput((acv2::AudioConverterChain *)__src, *((acv2::AudioConverterBase **)this + 1), (uint64_t)this, v45);
            appended = v100[0];
            if (!LODWORD(v100[0]))
            {
              v46 = *(_QWORD *)__src;
              v47 = *(const AudioBufferList **)(*(_QWORD *)__src + 16);
              mNumberBuffers = v47->mNumberBuffers;
              v49 = *(_DWORD *)(*(_QWORD *)__src + 8);
              if ((_DWORD)mNumberBuffers)
              {
                p_mDataByteSize = &v47->mBuffers[0].mDataByteSize;
                do
                {
                  *p_mDataByteSize = v49;
                  p_mDataByteSize += 4;
                  --mNumberBuffers;
                }
                while (mNumberBuffers);
              }
              v51 = *(_DWORD *)v46;
              outBytesConsumed[0] = v49;
              outBytesConsumed[1] = v51;
              appended = acv2::CodecConverter::AppendNewInput(this, v47, &outBytesConsumed[1], outBytesConsumed, *(const AudioStreamPacketDescription **)(v46 + 32));
              LODWORD(v100[0]) = appended;
              v52 = (AudioConverterCapturer *)*((_QWORD *)this + 105);
              if (v52)
                AudioConverterCapturer::write(v52, v47, *(const AudioStreamPacketDescription **)(v46 + 32), outBytesConsumed[1]);
              acv2::AudioConverterChain::ConsumedInput(*((_QWORD **)this + 1), *(_DWORD *)v46, *(uint64_t *)&__src[2], outBytesConsumed[1]);
              goto LABEL_118;
            }
LABEL_101:
            v26 = 0;
          }
          else
          {
            acv2::AudioConverterChain::ObtainInput((acv2::AudioConverterChain *)__src, *((acv2::AudioConverterBase **)this + 1), (uint64_t)this, v26);
            appended = v100[0];
            if (LODWORD(v100[0]))
              goto LABEL_101;
            if (*((_BYTE *)this + 201))
            {
              v53 = *(_QWORD *)__src;
              if (*((_BYTE *)this + 197) && **(_DWORD **)__src && !*(_QWORD *)(*(_QWORD *)__src + 32))
              {
                appended = 561015652;
                goto LABEL_119;
              }
            }
            else
            {
              v53 = *(_QWORD *)__src;
            }
            v54 = *(const AudioBufferList **)(v53 + 16);
            v55 = v54->mNumberBuffers;
            v56 = *(_DWORD *)(v53 + 8);
            if ((_DWORD)v55)
            {
              v57 = &v54->mBuffers[0].mDataByteSize;
              do
              {
                *v57 = v56;
                v57 += 4;
                --v55;
              }
              while (v55);
            }
            v58 = *(_DWORD *)v53;
            outBytesConsumed[0] = v56;
            outBytesConsumed[1] = v58;
            if (v58)
            {
              appended = acv2::CodecConverter::AppendNewInput(this, v54, &outBytesConsumed[1], outBytesConsumed, *(const AudioStreamPacketDescription **)(v53 + 32));
              LODWORD(v100[0]) = appended;
              if (appended)
                goto LABEL_101;
            }
            else
            {
              appended = 0;
            }
            v59 = *(_DWORD *)v53;
            if (!*(_DWORD *)v53)
              *((_BYTE *)this + 199) = 1;
            acv2::AudioConverterChain::ConsumedInput(*((_QWORD **)this + 1), v59, *(uint64_t *)&__src[2], outBytesConsumed[1]);
LABEL_118:
            v26 = outBytesConsumed[1];
          }
LABEL_119:
          if (appended && !v26)
            goto LABEL_183;
          goto LABEL_121;
        }
        v26 = 0;
        appended = 0;
LABEL_121:
        v60 = v95;
        if (v26)
          v60 = 1;
        v95 = v60;
        v61 = v26 ? 1 : v94;
        v94 = v61;
LABEL_127:
        v62 = acv2::CodecConverter::ProduceOutput(ACAudioSpan &)::$_1::operator()((uint64_t)this, v25, (uint64_t)v30, &outStatus);
        v63 = outStatus;
        if (!v62 && outStatus == 4)
        {
          if (!*((_BYTE *)this + 199)
            || (v64 = *((_QWORD *)this + 13)) != 0 && (*(_DWORD *)(v64 + 24) || *(_DWORD *)(v64 + 128)))
          {
            v62 = 0;
          }
          else
          {
            __src[0] = 0;
            v65 = (const AudioBufferList *)*((_QWORD *)this + 41);
            v66 = *((_QWORD *)this + 42) - (_QWORD)v65 - 8;
            if (*((_QWORD *)this + 42) - (_QWORD)v65 != 8)
            {
              p_mData = &v65->mBuffers[0].mData;
              do
              {
                *p_mData = __src;
                *((_DWORD *)p_mData - 1) = 0;
                p_mData += 2;
                v66 -= 16;
              }
              while (v66);
            }
            *(_QWORD *)outBytesConsumed = 0;
            acv2::CodecConverter::AppendNewInput(this, v65, &outBytesConsumed[1], outBytesConsumed, 0);
            outStatus = 998;
            v62 = acv2::CodecConverter::ProduceOutput(ACAudioSpan &)::$_1::operator()((uint64_t)this, v25, (uint64_t)v30, &outStatus);
            if (!v62)
              *((_BYTE *)this + 203) = 1;
          }
          v63 = outStatus;
        }
        *((_BYTE *)this + 202) = v63 == 3;
        if (v63 == 1)
        {
          ++*((_DWORD *)this + 181);
          *(_DWORD *)v30 = 0;
          *((_DWORD *)v30 + 2) = 0;
          ACBaseAudioSpan::resetMetadataEvents((uint64_t *)v30);
          if (*((_DWORD *)this + 181) > 3u || *((_BYTE *)this + 196))
          {
            v95 = 0;
            v94 = 97;
          }
        }
        else
        {
          *((_DWORD *)this + 181) = 0;
        }
        if (*((_BYTE *)this + 203))
          *(_BYTE *)(*((_QWORD *)this + 1) + 402) = 1;
        if (v30 != v6)
        {
          if (*((_BYTE *)this + 380) && !*((_BYTE *)this + 388))
          {
            v68 = *((_DWORD *)this + 96) >= v62 ? v62 : *((_DWORD *)this + 96);
            if (v68)
            {
              ACBaseAudioSpan::advanceConsume((unint64_t)this + 400, v68, v5);
              v69 = *((_DWORD *)this + 96) - v68;
              *((_DWORD *)this + 96) = v69;
              if (!v69)
                *((_BYTE *)this + 388) = 1;
              v62 -= v68;
            }
          }
          if (v62)
          {
            v70 = *((_DWORD *)this + 100);
            v71 = *((_DWORD *)this + 55);
            if (v71 >= v70)
              v72 = v70;
            else
              v72 = v71;
            ACBaseAudioSpan::append((unsigned int *)this + 54, (acv2::CodecConverter *)((char *)this + 400), v72, v5);
            ACBaseAudioSpan::advanceConsume((unint64_t)this + 400, v72, v5);
            ACBaseAudioSpan::copyFilledMetadataEventsFrom((uint64_t)this + 216, (uint64_t)this + 400, v72 | 0x100000000);
            if (*((_BYTE *)this + 304))
            {
              v73 = *((_QWORD *)this + 33);
              if ((unint64_t)(*((_QWORD *)this + 34) - v73) >= 0x2C)
              {
                if (v73)
                {
                  v74 = (__int128 *)(v73 + 44);
                  v75 = *(_DWORD *)(v73 + 40);
                  if (v75 >= 2)
                  {
                    v76 = v75 - 1;
                    do
                    {
                      v74 = (__int128 *)((char *)v74 + *((unsigned int *)v74 + 2));
                      --v76;
                    }
                    while (v76);
                  }
                  v77 = *v74;
                  v78 = v74[1];
                  *((_QWORD *)this + 74) = *((_QWORD *)v74 + 4);
                  *(_OWORD *)v92 = v77;
                  *((_OWORD *)this + 36) = v78;
                  *v93 = *v93 + (double)v72;
                  *((_DWORD *)this + 145) -= v72;
                }
              }
            }
            ACBaseAudioSpan::completeMetadataFrame((uint64_t *)this + 27);
          }
          else if (*((_DWORD *)this + 96) && !*((_BYTE *)this + 203))
          {
            goto LABEL_176;
          }
        }
        if (*(_DWORD *)v6)
          goto LABEL_181;
        if (outStatus == 1)
          break;
        if (outStatus != 4 || *((_BYTE *)this + 203))
          goto LABEL_181;
LABEL_176:
        if (appended)
          goto LABEL_181;
      }
      if (*((_DWORD *)this + 181) <= 3u && !*((_BYTE *)this + 196))
        goto LABEL_176;
LABEL_181:
      if ((_BYTE)v95)
      {
        if (!appended)
        {
          v11 = v94 | 0x162616400;
          v7 = (_DWORD *)((char *)this + 588);
          goto LABEL_24;
        }
LABEL_183:
        v79 = appended & 0xFFFFFF00;
        v80 = appended;
        v7 = (_DWORD *)((char *)this + 588);
        goto LABEL_185;
      }
      v79 = 1650549760;
      v7 = (_DWORD *)((char *)this + 588);
      v80 = v94;
LABEL_185:
      v96 = v79 | v80;
      LODWORD(v97) = v79 | v80;
      if (!BYTE4(v97))
        goto LABEL_30;
      v13 = 0;
LABEL_29:
      BYTE4(v97) = v13;
LABEL_30:
      if (BYTE4(v96))
      {
        caulk::expected<BOOL,int>::value((uint64_t)&v96);
        v14 = (_BYTE)v96 != 0;
      }
      else
      {
        v14 = 0;
      }
      v15 = *(_DWORD *)v6;
      if (v14 || v15)
      {
        v16 = *((_DWORD *)this + 56);
        v17 = *(_DWORD *)a2;
        v18 = *((unsigned int *)a2 + 2);
        if (v15)
        {
          v19 = *((_QWORD *)a2 + 4);
          if (v19)
          {
            v20 = *(_DWORD *)a2;
            v21 = *(unsigned int *)v6;
            do
            {
              *(_QWORD *)(v19 + 16 * v20++) += v18;
              --v21;
            }
            while (v21);
          }
        }
        *(_DWORD *)a2 = v17 + v15;
        *((_DWORD *)a2 + 2) = v18 + v16;
        ACBaseAudioSpan::copyFilledMetadataEventsFrom((uint64_t)a2, (uint64_t)this + 216, 0);
        if (BYTE4(v97))
        {
          if (*(_DWORD *)a2 < *((_DWORD *)a2 + 1))
            continue;
        }
      }
LABEL_192:
      ACBaseAudioSpan::completeMetadataFrame((uint64_t *)a2);
      v88 = v97;
      v89 = (v97 & 0xFF00000000) != 0;
      if ((v97 & 0xFF00000000) != 0)
        v82 = 0;
      else
        v82 = v97 & 0xFFFFFF00;
      v90 = (acv2::AudioConverterBase *)*((_QWORD *)this + 19);
      if (v90)
        acv2::AudioConverterBase::writeCapture(v90, a2, v87);
      v81 = v89 << 32;
      v83 = v88;
      return v81 | v82 | v83;
    }
  }
  v82 = 1869627136;
  v84 = _os_log_pack_size();
  message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v84 + 88, 16);
  if (message)
  {
    v86 = (caulk::concurrent::message *)message;
    *(_WORD *)_os_log_pack_fill() = 0;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v86);
  }
  v81 = 0;
  v83 = 63;
  return v81 | v82 | v83;
}

void sub_18EE125A0(void *a1, int a2)
{
  if (a2 == 3)
    __cxa_begin_catch(a1);
  else
    __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EE12574);
}

unint64_t acv2::AudioConverterChain::ProduceOutput(uint64_t a1, __int128 *a2, ACBaseAudioSpan *this)
{
  __int128 v5;
  unsigned int *v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  BOOL v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t i;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  size_t v26;
  uint64_t v28;
  uint64_t message;
  caulk::concurrent::message *v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  void **v34;
  void *__p[2];
  unsigned __int8 v36;
  unint64_t v37;
  _QWORD v38[10];
  char v39;
  uint64_t v40;

  if (*(_QWORD *)(a1 + 104) == *(_QWORD *)(a1 + 112))
  {
    LOBYTE(v21) = 0;
    v19 = 0;
    LODWORD(v18) = 1869627199;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 240) = v5;
    LOBYTE(v37) = 0;
    BYTE4(v37) = 1;
    if (*(_DWORD *)this < *((_DWORD *)this + 1))
    {
      v6 = (unsigned int *)(a1 + 128);
      while (1)
      {
        ACBaseAudioSpan::setAfter(a1 + 128, (unsigned int *)this);
        ACBaseAudioSpan::copyEmptyMetadataEventsFrom((uint64_t *)(a1 + 128), this);
        v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 112) - 8) + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 112) - 8), a1 + 128);
        __p[0] = (void *)v7;
        if ((v7 & 0xFF00000000) == 0)
          break;
        caulk::expected<BOOL,int>::value((uint64_t)__p);
        if (LOBYTE(__p[0]))
        {
          v8 = 1;
        }
        else
        {
          caulk::expected<BOOL,int>::value((uint64_t)&v37);
          v8 = (_BYTE)v37 != 0;
        }
        LOBYTE(v37) = v8;
        if (!BYTE4(v37))
        {
          v9 = 1;
LABEL_12:
          BYTE4(v37) = v9;
        }
LABEL_13:
        if (BYTE4(__p[0]))
        {
          caulk::expected<BOOL,int>::value((uint64_t)__p);
          v10 = LOBYTE(__p[0]) != 0;
        }
        else
        {
          v10 = 0;
        }
        v11 = *v6;
        if (v10 || v11)
        {
          v12 = *(_DWORD *)(a1 + 136);
          v13 = *(_DWORD *)this;
          v14 = *((unsigned int *)this + 2);
          if (v11)
          {
            v15 = *((_QWORD *)this + 4);
            if (v15)
            {
              v16 = *(_DWORD *)this;
              v17 = *v6;
              do
              {
                *(_QWORD *)(v15 + 16 * v16++) += v14;
                --v17;
              }
              while (v17);
            }
          }
          *(_DWORD *)this = v13 + v11;
          *((_DWORD *)this + 2) = v14 + v12;
          ACBaseAudioSpan::copyFilledMetadataEventsFrom((uint64_t)this, a1 + 128, 0);
          if (BYTE4(v37))
          {
            if (*(_DWORD *)this < *((_DWORD *)this + 1))
              continue;
          }
        }
        goto LABEL_24;
      }
      LODWORD(v37) = v7;
      if (!BYTE4(v37))
        goto LABEL_13;
      v9 = 0;
      goto LABEL_12;
    }
LABEL_24:
    ACBaseAudioSpan::completeMetadataFrame((uint64_t *)this);
    v18 = v37;
    v19 = v37 >> 40;
    v20 = *(_DWORD *)this;
    *(_DWORD *)(a1 + 404) += *(_DWORD *)this;
    if ((v18 & 0xFF00000000) != 0)
    {
      v21 = HIDWORD(v18);
      if (v20 < *((_DWORD *)this + 1) && !*(_BYTE *)(a1 + 401) && !*(_BYTE *)(a1 + 402))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v37);
        v23 = *(_QWORD *)(a1 + 104);
        for (i = *(_QWORD *)(a1 + 112); v23 != i; v23 += 8)
        {
          (*(void (**)(void **__return_ptr))(**(_QWORD **)v23 + 64))(__p);
          if ((v36 & 0x80u) == 0)
            v24 = __p;
          else
            v24 = (void **)__p[0];
          if ((v36 & 0x80u) == 0)
            v25 = v36;
          else
            v25 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)v24, v25);
          if ((char)v36 < 0)
            operator delete(__p[0]);
        }
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v38);
        if ((char)v36 < 0)
        {
          v26 = strlen((const char *)__p[0]);
          operator delete(__p[0]);
        }
        else
        {
          v26 = strlen((const char *)__p);
        }
        v28 = _os_log_pack_size() + 88;
        message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v26 + v28 + 1, 17);
        if (message)
        {
          v30 = (caulk::concurrent::message *)message;
          v31 = _os_log_pack_fill();
          v32 = *(_DWORD *)this;
          v33 = *((_DWORD *)this + 1);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v38);
          if ((v36 & 0x80u) == 0)
            v34 = __p;
          else
            v34 = (void **)__p[0];
          stpcpy((char *)v30 + v28, (const char *)v34);
          *(_DWORD *)v31 = 67109634;
          *(_DWORD *)(v31 + 4) = v32;
          *(_WORD *)(v31 + 8) = 1024;
          *(_DWORD *)(v31 + 10) = v33;
          *(_WORD *)(v31 + 14) = 2080;
          *(_QWORD *)(v31 + 16) = (char *)v30 + v28;
          if ((char)v36 < 0)
            operator delete(__p[0]);
          caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v30);
        }
        v37 = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)((char *)&v38[-1] + *(_QWORD *)(v37 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v38[0] = MEMORY[0x1E0DE4FB8] + 16;
        if (v39 < 0)
          operator delete((void *)v38[8]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x193FFE3A0](&v40);
      }
    }
    else
    {
      LOBYTE(v21) = 0;
    }
  }
  return ((unint64_t)v21 << 32) | (v19 << 40) | v18;
}

void sub_18EE129E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t caulk::expected<BOOL,int>::value(uint64_t result)
{
  int *v1;
  _DWORD *exception;
  int v3;

  if (!*(_BYTE *)(result + 4))
  {
    v1 = (int *)result;
    exception = __cxa_allocate_exception(0x10uLL);
    v3 = *v1;
    *(_QWORD *)exception = &off_1E290B480;
    exception[2] = v3;
  }
  return result;
}

uint64_t ACBaseAudioSpan::setAfter(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  *(_DWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  v2 = **(unsigned int **)(result + 16);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = a2[2];
    v5 = 16 * v2;
    do
    {
      *(_QWORD *)(*(_QWORD *)(result + 16) + v3 + 16) = *(_QWORD *)(*((_QWORD *)a2 + 2) + v3 + 16) + v4;
      v3 += 16;
    }
    while (v5 != v3);
  }
  v6 = *((_QWORD *)a2 + 4);
  v7 = *a2;
  if (v6)
    *(_QWORD *)(result + 32) = v6 + 16 * v7;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
    *(_QWORD *)(result + 40) = v8 + 16 * v7;
  v9 = a2[2];
  *(_DWORD *)(result + 4) = a2[1] - v7;
  *(_DWORD *)(result + 12) = a2[3] - v9;
  return result;
}

uint64_t *ACBaseAudioSpan::completeMetadataFrame(uint64_t *this)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v8;

  if (*((_BYTE *)this + 88))
  {
    if (*((_BYTE *)this + 28))
    {
      v1 = (unsigned int *)this[2];
      if (v1[4 * *v1 + 2] == 1094863915)
      {
        v2 = *(v1 - 9);
        if ((_DWORD)v2)
        {
          v3 = (char *)v1 + v2;
          v6 = *((_QWORD *)v3 - 6);
          v5 = *((_QWORD *)v3 - 5);
          v4 = (uint64_t *)(v3 - 48);
          if ((unint64_t)(v5 - v6) >= 0x2C && v6 != 0)
          {
            v8 = (unsigned int *)this[6];
            if ((unint64_t)(this[7] - (_QWORD)v8) >= 0x2C)
            {
              if (v8)
                return AudioMetadataFrame::begin_new(v4, v8);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t acv2::CBRConverter::ProduceOutput(acv2::AudioConverterBase **this, ACAudioSpan *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  const ACAudioSpan *v11;
  acv2::AudioConverterBase *v12;
  unsigned int *v14;
  int v15[2];
  int v16;

  acv2::AudioConverterChain::ObtainInput((acv2::AudioConverterChain *)&v14, this[1], (uint64_t)this, *((_DWORD *)a2 + 1));
  v4 = v16;
  if (!v16)
  {
    v7 = v14;
    v8 = *((_DWORD *)a2 + 1);
    if (v8 >= *v14)
      v9 = *v14;
    else
      v9 = v8;
    if ((_DWORD)v9)
    {
      (*((void (**)(acv2::AudioConverterBase **, uint64_t, unsigned int *, char *))*this + 20))(this, v9, v14 + 4, (char *)a2 + 16);
      v10 = *((_DWORD *)this + 18);
      *(_DWORD *)a2 = v9;
      *((_DWORD *)a2 + 2) = ACBaseAudioSpan::sizeOfFirstPackets(a2, v9, v10);
      v12 = this[19];
      if (v12)
        acv2::AudioConverterBase::writeCapture(v12, a2, v11);
      v4 = acv2::AudioConverterChain::ConsumedInput(this[1], *v7, *(uint64_t *)v15, v9);
      if (v4)
        goto LABEL_2;
      v6 = 0;
      LOBYTE(v4) = 1;
    }
    else
    {
      LOBYTE(v4) = 0;
      v6 = 0;
    }
    v5 = 0x100000000;
    return v5 | v6 | v4;
  }
LABEL_2:
  v5 = 0;
  v6 = v4 & 0xFFFFFF00;
  return v5 | v6 | v4;
}

uint64_t acv2::AudioConverterChain::ConsumedInput(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t message;
  caulk::concurrent::message *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char __s[8];
  char v18;

  if (a3 || a2 <= a4)
  {
    v6 = 0;
    if (a3 && a4)
    {
      v8 = *(_DWORD *)(a3 + 24);
      v7 = a3 + 24;
      if (v8)
        v9 = v7;
      else
        v9 = v7 + 104;
      ACBaseAudioSpan::advanceConsume(v9, a4, *(_DWORD *)(v7 - 20));
      return 0;
    }
  }
  else
  {
    acv2::AudioConverterChain::description((acv2::AudioConverterChain *)__s, a1);
    if (v18 < 0)
    {
      v5 = strlen(*(const char **)__s);
      operator delete(*(void **)__s);
    }
    else
    {
      v5 = strlen(__s);
    }
    v6 = 2003329396;
    v10 = _os_log_pack_size() + 88;
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v5 + v10 + 1, 17);
    if (message)
    {
      v12 = (caulk::concurrent::message *)message;
      v13 = (char *)(message + v10);
      v14 = _os_log_pack_fill();
      acv2::AudioConverterChain::description((acv2::AudioConverterChain *)__s, a1);
      if (v18 >= 0)
        v15 = __s;
      else
        v15 = *(char **)__s;
      stpcpy(v13, v15);
      *(_DWORD *)v14 = 136315138;
      *(_QWORD *)(v14 + 4) = v13;
      if (v18 < 0)
        operator delete(*(void **)__s);
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v12);
    }
  }
  return v6;
}

void sub_18EE12DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t ACBaseAudioSpan::advanceConsume(unint64_t this, unsigned int a2, int a3)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (a2)
  {
    v4 = this;
    this = ACBaseAudioSpan::sizeOfFirstPackets((ACBaseAudioSpan *)this, a2, a3);
    v5 = *(unsigned int **)(v4 + 16);
    v6 = 16 * *v5;
    if (v6)
    {
      v7 = v5 + 4;
      do
      {
        *v7 += this;
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
    }
    v8 = *(_DWORD *)v4;
    v9 = *(_DWORD *)v4 - a2;
    *(_DWORD *)v4 = v9;
    *(_DWORD *)(v4 + 8) -= this;
    v10 = *(_QWORD *)(v4 + 32);
    if (v10)
    {
      v11 = (_QWORD *)(v10 + 16 * a2);
      *(_QWORD *)(v4 + 32) = v11;
      if (v8 != a2)
      {
        do
        {
          *v11 -= this;
          v11 += 2;
          --v9;
        }
        while (v9);
      }
    }
  }
  return this;
}

unint64_t ACBaseAudioSpan::sizeOfFirstPackets(ACBaseAudioSpan *this, unsigned int a2, int a3)
{
  unint64_t result;
  uint64_t v4;
  unsigned int v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);

  if (!a2)
    return 0;
  if (a3)
    return a3 * a2;
  v4 = *((_QWORD *)this + 4);
  v5 = *(_DWORD *)this;
  if (!v4)
  {
    if (v5 == a2)
      return *((unsigned int *)this + 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing packet descriptions");
LABEL_14:
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
LABEL_15:
    __cxa_throw(exception, v7, v8);
  }
  if (v5 < a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "invalid packet count");
    goto LABEL_14;
  }
  result = *(_QWORD *)(v4 + 16 * (a2 - 1)) + *(unsigned int *)(v4 + 16 * (a2 - 1) + 12);
  if (HIDWORD(result))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "numerical cast overflow: could not retain value in conversion type");
    v8 = (void (*)(void *))MEMORY[0x1E0DE4350];
    goto LABEL_15;
  }
  return result;
}

void sub_18EE12F6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ACBaseAudioSpan::ACBaseAudioSpan(ACBaseAudioSpan *this, int a2, AudioBufferList *a3, AudioStreamPacketDescription *a4)
{
  UInt32 mNumberBuffers;
  AudioStreamPacketDescription *mDataByteSize;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  mNumberBuffers = a3->mNumberBuffers;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 2) = a3;
  *((_DWORD *)this + 6) = mNumberBuffers;
  *((_BYTE *)this + 28) = (_BYTE)a4;
  *((_BYTE *)this + 88) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  if ((_DWORD)a4)
    _ZNSt3__18optionalI19ACMetadataContainerE7emplaceB8ne180100IJEvEERS1_DpOT_((uint64_t)this + 48);
  mDataByteSize = (AudioStreamPacketDescription *)a3->mBuffers[0].mDataByteSize;
  *((_QWORD *)this + 5) = 0;
  ACBaseAudioSpan::set((uint64_t *)this, a3, 0, a2, mDataByteSize);
}

void sub_18EE13004(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*(_BYTE *)(v1 + 88))
  {
    v4 = *v2;
    if (*v2)
    {
      *(_QWORD *)(v1 + 56) = v4;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::ObtainInput(acv2::AudioConverterChain *this, acv2::AudioConverterBase *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  acv2::AudioConverterChain *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  void *v20;
  const void *v21;
  BOOL v22;
  uint64_t result;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  _DWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  const ACAudioSpan *v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  acv2::AudioConverterChain *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t message;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  caulk::concurrent::message *v70;
  unsigned int v71;
  uint64_t v73;
  acv2::AudioConverterChain *v74;
  uint64_t v75;
  uint64_t v76;

  v4 = a4;
  v7 = this;
  v8 = *(_QWORD *)(a3 + 104);
  if (!v8)
  {
    v26 = *(_QWORD *)(a3 + 112);
    if (v26)
    {
      *(_DWORD *)v26 = 0;
      *(_DWORD *)(v26 + 8) = 0;
      ACBaseAudioSpan::resetMetadataEvents((uint64_t *)v26);
      v27 = *(_DWORD *)(a3 + 32) * v4;
      *(_DWORD *)(v26 + 4) = v4;
      *(_DWORD *)(v26 + 12) = v27;
    }
LABEL_29:
    v28 = *(_DWORD **)(a3 + 96);
    if (v28)
    {
      if (*(_QWORD *)(a3 + 104))
        goto LABEL_53;
      v29 = (int)v28[30];
      v30 = *((_QWORD *)a2 + 34);
      if (v29 < (*((_QWORD *)a2 + 35) - v30) >> 3)
      {
        v31 = *(_QWORD *)(v30 + 8 * v29);
        if (*(_DWORD *)v31 >= v4)
          v32 = v4;
        else
          v32 = *(_DWORD *)v31;
        LODWORD(v33) = v28[21];
        if ((v28[17] & 0x20) != 0)
          v33 = v33;
        else
          v33 = 1;
        v34 = (v28[20] * v32 + 15) & 0xFFFFFFF0;
        **(_DWORD **)(v31 + 24) = v33;
        v35 = *(_QWORD *)(v31 + 112);
        v75 = v35;
        if (v33 < 2)
        {
          v76 = v35;
          if (!(_DWORD)v33)
          {
LABEL_52:
            *(_DWORD *)(v31 + 8) = 0;
            v26 = v31 + 8;
            *(_DWORD *)(v26 + 8) = 0;
            ACBaseAudioSpan::resetMetadataEvents((uint64_t *)v26);
            *(_DWORD *)(v26 + 4) = v32;
            *(_DWORD *)(v26 + 12) = v34;
            v4 = *(_DWORD *)v26;
LABEL_53:
            result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v28 + 112))(v28, v26);
            if ((result & 0xFF00000000) != 0
              || (v40 = result, (v49 = *(_QWORD *)(a3 + 104)) != 0) && (*(_DWORD *)(v49 + 24) || *(_DWORD *)(v49 + 128))
              || *(_DWORD *)v26)
            {
LABEL_58:
              if (v8)
              {
                result = (uint64_t)ACSpanningInputBuffer::consolidateInput((ACSpanningInputBuffer *)v8, v4);
                v26 = result;
              }
              *(_QWORD *)v7 = v26;
              goto LABEL_61;
            }
LABEL_76:
            *(_DWORD *)v26 = 0;
            *(_DWORD *)(v26 + 8) = 0;
            result = (uint64_t)ACBaseAudioSpan::resetMetadataEvents((uint64_t *)v26);
            *(_QWORD *)v7 = 0;
            *((_QWORD *)v7 + 1) = 0;
            *((_DWORD *)v7 + 4) = v40;
            return result;
          }
        }
        else
        {
          v76 = v35 + ((v33 + 1) >> 1) * v34 + 32;
        }
        v46 = 0;
        v47 = 16;
        do
        {
          v48 = *(&v75 + (v46 & 1));
          *(_QWORD *)(*(_QWORD *)(v31 + 24) + v47) = v48;
          *(&v75 + (v46++ & 1)) = v48 + v34;
          v47 += 16;
        }
        while (v33 != v46);
        goto LABEL_52;
      }
LABEL_108:
      std::vector<std::unique_ptr<ACOutputBuffer>>::__throw_out_of_range[abi:ne180100]();
    }
    v36 = 1;
    *((_BYTE *)a2 + 400) = 1;
    v37 = (*((uint64_t (**)(char *, uint64_t))a2 + 30))((char *)a2 + 248, v26);
    v39 = v37;
    *((_BYTE *)a2 + 400) = 0;
    if ((v37 & 0xFF00000000) != 0)
    {
      v40 = v37 != 0;
      if ((_DWORD)v37 || *((_BYTE *)a2 + 401))
      {
        if ((_DWORD)v37)
        {
          v42 = *((_DWORD *)a2 + 4);
          if (v42)
          {
            v43 = v4;
            v44 = v7;
            v45 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 12);
            v41 = v45 / v42;
            if (v45 / v42 == (_DWORD)v37)
            {
              v41 = v37;
            }
            else
            {
              v73 = _os_log_pack_size();
              message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v73 + 88, 16);
              if (message)
              {
                v70 = (caulk::concurrent::message *)message;
                v51 = _os_log_pack_fill();
                *(_DWORD *)v51 = 67109888;
                *(_DWORD *)(v51 + 4) = v39;
                *(_WORD *)(v51 + 8) = 1024;
                *(_DWORD *)(v51 + 10) = v45;
                *(_WORD *)(v51 + 14) = 1024;
                *(_DWORD *)(v51 + 16) = v42;
                *(_WORD *)(v51 + 20) = 1024;
                *(_DWORD *)(v51 + 22) = v41;
                caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v70);
              }
            }
            v7 = v44;
            v4 = v43;
          }
          else
          {
            v41 = v37;
          }
        }
        else
        {
          v41 = 0;
        }
      }
      else
      {
        v41 = 0;
        *((_BYTE *)a2 + 401) = 1;
      }
      v52 = *((_QWORD *)a2 + 43);
      if (v52)
        v53 = *(unsigned int *)(v52 + 356) | 0x100000000;
      else
        v53 = 0;
      v54 = validateInputProcData((uint64_t)a2, *(unsigned int **)(v26 + 16), v41, *(_QWORD *)(v26 + 32), v53);
      if (v54)
      {
        v36 = 1;
        v40 = v54;
      }
      else
      {
        *(_DWORD *)v26 = v41;
        *(_DWORD *)(v26 + 4) = v41;
        if (v41)
          v55 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 12);
        else
          v55 = 0;
        v36 = 0;
        *(_DWORD *)(v26 + 8) = v55;
        *(_DWORD *)(v26 + 12) = v55;
        if (v8)
        {
          if (*(_QWORD *)(v26 + 32))
          {
            v36 = 0;
            if (!*(_DWORD *)(v8 + 4) && v8 + 128 == v26)
            {
              v56 = *(char **)(v8 + 160);
              if (v56 == *(char **)(v8 + 232))
              {
                v36 = 0;
              }
              else
              {
                v74 = v7;
                v57 = *(unsigned int *)(v8 + 128);
                v58 = *(_QWORD *)(v8 + 272);
                v59 = *(char **)(v8 + 256);
                v60 = (v58 - (uint64_t)v59) >> 4;
                if (v60 >= v57)
                {
                  v65 = *(_BYTE **)(v8 + 264);
                  v38 = (const ACAudioSpan *)(v65 - v59);
                  v66 = (v65 - v59) >> 4;
                  if (v66 >= v57)
                  {
                    v64 = 16 * v57;
                    if ((_DWORD)v57)
                      memmove(*(void **)(v8 + 256), v56, 16 * v57);
                    v7 = v74;
                  }
                  else
                  {
                    v71 = v4;
                    v68 = &v56[16 * v66];
                    if (v65 != v59)
                    {
                      memmove(v59, v56, (size_t)v38);
                      v68 = &v56[16 * v66];
                      v59 = *(char **)(v8 + 264);
                    }
                    v67 = &v56[16 * v57];
                    v64 = v67 - v68;
                    if (v66 != v57)
                      memmove(v59, v68, v67 - v68);
                    v7 = v74;
                    v4 = v71;
                  }
                }
                else
                {
                  v61 = v4;
                  if (v59)
                  {
                    *(_QWORD *)(v8 + 264) = v59;
                    std::allocator_traits<caulk::rt_allocator<AudioStreamPacketDescription>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v59, v60);
                    v58 = 0;
                    *(_QWORD *)(v8 + 256) = 0;
                    *(_QWORD *)(v8 + 264) = 0;
                    *(_QWORD *)(v8 + 272) = 0;
                  }
                  v62 = v58 >> 3;
                  if (v58 >> 3 <= v57)
                    v62 = v57;
                  if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
                    v63 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v63 = v62;
                  if (v63 >> 60)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  if (!*MEMORY[0x1E0DDB4F0])
                  {
                    __break(1u);
                    goto LABEL_108;
                  }
                  v59 = (char *)caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
                  *(_QWORD *)(v8 + 256) = v59;
                  *(_QWORD *)(v8 + 264) = v59;
                  *(_QWORD *)(v8 + 272) = &v59[16 * v63];
                  v64 = 16 * v57;
                  memmove(v59, v56, 16 * v57);
                  v7 = v74;
                  v4 = v61;
                }
                v36 = 0;
                *(_QWORD *)(v8 + 264) = &v59[v64];
                *(_QWORD *)(v8 + 160) = *(_QWORD *)(v8 + 256);
              }
            }
          }
        }
      }
    }
    else
    {
      v40 = v37;
    }
    *((_DWORD *)a2 + 102) += *(_DWORD *)v26;
    result = *((_QWORD *)a2 + 61);
    if (result)
      result = (uint64_t)acv2::AudioConverterBase::writeCapture((acv2::AudioConverterBase *)result, (AudioConverterCapturer *)v26, v38);
    if (!v36)
      goto LABEL_58;
    goto LABEL_76;
  }
  if (*(_DWORD *)v8 >= a4)
    v9 = a4;
  else
    v9 = *(_DWORD *)v8;
  v10 = *(_DWORD *)(v8 + 24);
  if (v10 >= v9)
  {
    result = v8 + 24;
  }
  else
  {
    if (!v10 && !*(_DWORD *)(v8 + 128))
    {
      ACBaseAudioSpan::set((uint64_t *)(v8 + 128), (const AudioBufferList *)(*(_QWORD *)(v8 + 16) + 48), *(_QWORD *)(v8 + 232), v9, (AudioStreamPacketDescription *)(*(_DWORD *)(v8 + 8) * v9));
LABEL_28:
      v26 = v8 + 128;
      goto LABEL_29;
    }
    v11 = *(_QWORD *)(v8 + 16);
    v12 = *(void **)(v8 + 232);
    v13 = *(_DWORD *)(v8 + 12);
    *(_DWORD *)(v8 + 28) = *(_DWORD *)v8;
    *(_DWORD *)(v8 + 36) = v13;
    v14 = **(unsigned int **)(v8 + 40);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = v11 + 64;
      v17 = 16 * v14;
      do
      {
        v18 = *(_QWORD *)(v8 + 40) + v15;
        v19 = *(const void **)(v18 + 16);
        v20 = *(void **)(v16 + v15);
        if (v19 != v20)
        {
          memmove(v20, v19, *(unsigned int *)(v8 + 32));
          v19 = *(const void **)(v16 + v15);
        }
        *(_QWORD *)(v18 + 16) = v19;
        v15 += 16;
      }
      while (v17 != v15);
    }
    v21 = *(const void **)(v8 + 56);
    if (v21)
      v22 = v21 == v12;
    else
      v22 = 1;
    if (!v22)
    {
      memmove(v12, v21, 16 * *(unsigned int *)(v8 + 24));
      *(_QWORD *)(v8 + 56) = v12;
    }
    result = (uint64_t)ACSpanningInputBuffer::consolidateInput((ACSpanningInputBuffer *)v8, v9);
    v7 = this;
    if (*(_DWORD *)result < v9)
    {
      if (v9 - *(_DWORD *)(v8 + 24) >= *(_DWORD *)v8)
        v24 = *(_DWORD *)v8;
      else
        v24 = v9 - *(_DWORD *)(v8 + 24);
      ACBaseAudioSpan::setAfter(v8 + 128, (unsigned int *)(v8 + 24));
      v25 = *(_DWORD *)(v8 + 8) * v24;
      *(_DWORD *)(v8 + 132) = v24;
      *(_DWORD *)(v8 + 140) = v25;
      v4 = a4;
      goto LABEL_28;
    }
  }
  *(_QWORD *)v7 = result;
LABEL_61:
  *((_QWORD *)v7 + 1) = v8;
  *((_DWORD *)v7 + 4) = 0;
  return result;
}

uint64_t *ACBaseAudioSpan::resetMetadataEvents(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  AudioMetadataFrame *v6;

  if (*((_BYTE *)this + 88))
  {
    v1 = (uint64_t)this;
    v2 = this + 6;
    if (*(_BYTE *)(v1 + 28) && (v3 = *(unsigned int **)(v1 + 16), v3[4 * *v3 + 2] == 1094863915))
    {
      v4 = *(v3 - 9);
      v5 = (uint64_t)v3 + v4 - 48;
      if ((_DWORD)v4)
        v6 = (AudioMetadataFrame *)v5;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    return ACMetadataContainer::resetMetadataEvents(v2, v6);
  }
  return this;
}

uint64_t *ACBaseAudioSpan::set(uint64_t *this, const AudioBufferList *a2, uint64_t a3, int a4, AudioStreamPacketDescription *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_DWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  v5 = *(unsigned int *)this[2];
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 16 * v5;
    do
    {
      *(_QWORD *)(this[2] + v6 + 16) = a2->mBuffers[v6 / 0x10].mData;
      v6 += 16;
    }
    while (v7 != v6);
  }
  this[4] = a3;
  *((_DWORD *)this + 1) = a4;
  *((_DWORD *)this + 3) = (_DWORD)a5;
  return ACBaseAudioSpan::resetMetadataEvents(this);
}

unsigned int *ACSpanningInputBuffer::consolidateInput(ACSpanningInputBuffer *this, unsigned int a2)
{
  int v3;
  unsigned int *v4;
  unsigned int v5;
  const ACBaseAudioSpan *v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v4 = (unsigned int *)((char *)this + 24);
  v3 = *((_DWORD *)this + 6);
  v6 = (ACSpanningInputBuffer *)((char *)this + 128);
  v5 = *((_DWORD *)this + 32);
  if (v3)
    v7 = 0;
  else
    v7 = v5 >= a2;
  if (v7 && !*((_QWORD *)this + 20))
    return (unsigned int *)((char *)this + 128);
  if (*(_DWORD *)this >= a2)
    v8 = a2;
  else
    v8 = *(_DWORD *)this;
  v9 = v8 - v3;
  if (v9 >= v5)
    v10 = *((_DWORD *)this + 32);
  else
    v10 = v9;
  if (v10)
  {
    if (!v3)
      ACBaseAudioSpan::set((uint64_t *)this + 3, (const AudioBufferList *)(*((_QWORD *)this + 2) + 48), *((_QWORD *)this + 29), *(_DWORD *)this, (AudioStreamPacketDescription *)*((unsigned int *)this + 3));
    ACBaseAudioSpan::append(v4, v6, v10, *((_DWORD *)this + 1));
    ACBaseAudioSpan::advanceConsume((unint64_t)v6, v10, *((_DWORD *)this + 1));
  }
  return v4;
}

uint64_t validateInputProcData(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t result;
  uint64_t v24;
  uint64_t message;
  caulk::concurrent::message *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  caulk::concurrent::messenger *v31;
  caulk::concurrent::message *v32;
  uint64_t v33;
  caulk::concurrent::message *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  caulk::concurrent::message *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  CrashIfClientProvidedBogusAudioBufferList();
  v10 = *a2;
  v11 = *(_DWORD *)(a1 + 28);
  if ((*(_BYTE *)(a1 + 12) & 0x20) == 0)
    v11 = 1;
  if ((_DWORD)v10 != v11)
  {
    v24 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v24 + 88, 16);
    if (!message)
      return 4294967246;
    v26 = (caulk::concurrent::message *)message;
    *(_WORD *)_os_log_pack_fill() = 0;
LABEL_29:
    v31 = *(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16);
    v32 = v26;
LABEL_30:
    caulk::concurrent::messenger::enqueue(v31, v32);
    return 4294967246;
  }
  v12 = a2[3];
  if (v10 >= 2)
  {
    v13 = (int *)(a2 + 7);
    v14 = 1;
    while (*v13 == (_DWORD)v12)
    {
      ++v14;
      v13 += 4;
      if (v10 == v14)
        goto LABEL_8;
    }
    v27 = _os_log_pack_size();
    v28 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v27 + 88, 16);
    if (!v28)
      return 4294967246;
    v26 = (caulk::concurrent::message *)v28;
    v29 = _os_log_pack_fill();
    v30 = *v13;
    *(_DWORD *)v29 = 67109632;
    *(_DWORD *)(v29 + 4) = v12;
    *(_WORD *)(v29 + 8) = 1024;
    *(_DWORD *)(v29 + 10) = v30;
    *(_WORD *)(v29 + 14) = 1024;
    *(_DWORD *)(v29 + 16) = v14;
    goto LABEL_29;
  }
LABEL_8:
  if (!a4)
    return 0;
  if (a3)
  {
    v15 = 0;
    v16 = 0;
    v17 = (unsigned int *)(a4 + 12);
    while (1)
    {
      v18 = *v17;
      if ((a5 & 0xFF00000000) != 0 && v18 > a5)
      {
        v42 = _os_log_pack_size();
        v43 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v42 + 88, 16);
        if (!v43)
          return 4294967246;
        v39 = (caulk::concurrent::message *)v43;
        v44 = _os_log_pack_fill();
        v45 = *v17;
        *(_DWORD *)v44 = 67109888;
        *(_DWORD *)(v44 + 4) = v15;
        *(_WORD *)(v44 + 8) = 1024;
        *(_DWORD *)(v44 + 10) = a3;
        *(_WORD *)(v44 + 14) = 1024;
        *(_DWORD *)(v44 + 16) = v45;
        *(_WORD *)(v44 + 20) = 1024;
        *(_DWORD *)(v44 + 22) = a5;
        v41 = gAudioConverterDeferredLog;
        goto LABEL_42;
      }
      v19 = *(_QWORD *)(v17 - 3);
      v20 = v19 + v18;
      v21 = v19 >= v16 && v19 <= v12;
      if (!v21 || v20 > v12)
        break;
      ++v15;
      v17 += 4;
      v16 = v19 + v18;
      if (a3 == v15)
      {
        if (v20 >= v12)
          return 0;
        if (a3 == 1)
        {
          result = 0;
          a2[3] = v20;
          return result;
        }
        goto LABEL_34;
      }
    }
    v37 = _os_log_pack_size();
    v38 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v37 + 88, 16);
    if (v38)
    {
      v39 = (caulk::concurrent::message *)v38;
      v40 = _os_log_pack_fill();
      *(_DWORD *)v40 = 67110144;
      *(_DWORD *)(v40 + 4) = v15;
      *(_WORD *)(v40 + 8) = 1024;
      *(_DWORD *)(v40 + 10) = a3;
      *(_WORD *)(v40 + 14) = 2048;
      *(_QWORD *)(v40 + 16) = v19;
      *(_WORD *)(v40 + 24) = 2048;
      *(_QWORD *)(v40 + 26) = v20;
      *(_WORD *)(v40 + 34) = 1024;
      *(_DWORD *)(v40 + 36) = v12;
      v41 = gAudioConverterDeferredLog;
LABEL_42:
      v31 = *(caulk::concurrent::messenger **)(v41 + 16);
      v32 = v39;
      goto LABEL_30;
    }
    return 4294967246;
  }
  if (!(_DWORD)v12)
    return 0;
  v20 = 0;
LABEL_34:
  v33 = _os_log_pack_size();
  result = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v33 + 88, 16);
  if (result)
  {
    v34 = (caulk::concurrent::message *)result;
    v35 = _os_log_pack_fill();
    v36 = a2[3];
    *(_DWORD *)v35 = 67109632;
    *(_DWORD *)(v35 + 4) = v36;
    *(_WORD *)(v35 + 8) = 1024;
    *(_DWORD *)(v35 + 10) = a3;
    *(_WORD *)(v35 + 14) = 2048;
    *(_QWORD *)(v35 + 16) = v20;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v34);
    return 0;
  }
  return result;
}

void acv2::Reinterleaver::ConvertBufferList(uint64_t a1, acv2::Reinterleaver *this, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  __int32 *v12;
  int v13;
  unsigned int v14;
  float32x2_t v15;
  float32x2_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  int v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  float32x2_t **v56;
  float32x2_t *v57;
  float32x2_t *v58;
  unsigned int v59;
  float32x2_t v60;
  float32x2_t v61;
  int **v62;
  uint64_t v63;
  uint64_t v64;
  float32x2x2_t v65;

  v8 = *(_DWORD *)(a1 + 80);
  if (!v8)
    goto LABEL_4;
  if ((*(_BYTE *)(a1 + 68) & 0x20) != 0)
  {
    v9 = 1;
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 84);
    if (!v9)
    {
LABEL_4:
      v10 = 0;
      goto LABEL_7;
    }
  }
  v10 = (unsigned __int8 *)(v8 / v9);
LABEL_7:
  v11 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  v12 = *(__int32 **)(*(_QWORD *)a4 + 16);
  if (*(_BYTE *)(a1 + 272))
  {
    v13 = *(_DWORD *)(a1 + 268);
    switch(v13)
    {
      case 3:
        DownmixStereoInterleavedInt32ToMono_Portable(*(int **)(*(_QWORD *)a3 + 16), *(_DWORD **)(*(_QWORD *)a4 + 16), this);
        break;
      case 2:
        DownmixStereoInterleavedInt16ToMono_ARM(*(__int16 **)(*(_QWORD *)a3 + 16), *(int16x8_t **)(*(_QWORD *)a4 + 16), this);
        break;
      case 1:
        if (this >= 2)
        {
          v14 = this >> 1;
          v15 = (float32x2_t)vdup_n_s32(0x3F3504F3u);
          do
          {
            v16.i32[0] = *(_DWORD *)v11;
            v17 = v11 + 16;
            v16.i32[1] = *(_DWORD *)(v11 + 12);
            *(float32x2_t *)v12 = vmul_f32(vadd_f32(*(float32x2_t *)(v11 + 4), v16), v15);
            v12 += 2;
            v11 += 16;
            --v14;
          }
          while (v14);
          v11 = v17;
        }
        if ((this & 1) != 0)
          *(float *)v12 = (float)(*(float *)v11 + *(float *)(v11 + 4)) * 0.70711;
        break;
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 276))
    {
      case 0:
        if ((*(_BYTE *)(a1 + 68) & 0x20) != 0)
        {
          v19 = *(_DWORD *)(a1 + 40);
          v18 = 1;
        }
        else
        {
          v18 = *(_DWORD *)(a1 + 84);
          v19 = *(_DWORD *)(a1 + 40);
          if (v18 == 2)
          {
            v20 = *(int **)(a1 + 192);
            v21 = *v20;
            v22 = v20[1];
            if (v21 != -1 && v21 == v22)
            {
              if ((_DWORD)v10 == 4)
              {
                UpmixMonoToStereoInterleaved32_ARM((int32x4_t *)(v11 + 4 * v21), v12, this);
                return;
              }
              if ((_DWORD)v10 == 2)
              {
                UpmixMonoToStereoInterleaved16_ARM((int16x8_t *)(v11 + 2 * v21), (__int16 *)v12, this);
                return;
              }
            }
            v18 = 2;
          }
          else if (v18 < 1)
          {
            return;
          }
        }
        v51 = 0;
        do
        {
          LODWORD(v52) = v51 + 1;
          v53 = v51;
          v54 = *(_QWORD *)(a1 + 192);
          v55 = *(_DWORD *)(v54 + 4 * v51);
          if (v55 == -1)
          {
            if ((int)v52 < v18)
            {
              v52 = (int)v52;
              while (*(_DWORD *)(v54 + 4 * v52) == -1)
              {
                if (v18 == ++v52)
                {
                  LODWORD(v52) = v18;
                  break;
                }
              }
            }
            acv2::Reinterleaver::Zero((uint64_t)this, (uint64_t)v12 + v53 * (uint64_t)(int)v10, (unsigned __int8 *)((v52 - v53) * (_DWORD)v10), v8);
          }
          else
          {
            if ((int)v52 < v18)
            {
              v52 = (int)v52;
              while (*(_DWORD *)(v54 + 4 * v52) == *(_DWORD *)(v54 + 4 * v52 - 4) + 1)
              {
                if (v18 == ++v52)
                {
                  LODWORD(v52) = v18;
                  break;
                }
              }
            }
            acv2::Reinterleaver::Blit((uint64_t)this, v11 + v55 * (uint64_t)(int)v10, (const unsigned __int8 *)v12 + v53 * (uint64_t)(int)v10, (unsigned __int8 *)((v52 - v53) * (_DWORD)v10), v19, v8);
          }
          v51 = v52;
        }
        while ((int)v52 < v18);
        break;
      case 1:
        if ((*(_BYTE *)(a1 + 68) & 0x20) != 0)
          v24 = 1;
        else
          v24 = *(unsigned int *)(a1 + 84);
        if (v10 <= 8 && ((1 << (char)v10) & 0x114) != 0)
        {
          if ((int)v24 >= 1)
          {
            v27 = 0;
            do
            {
              v28 = *(unsigned int *)(*(_QWORD *)(a1 + 192) + 4 * v27);
              if ((_DWORD)v28 == -1)
              {
                v29 = &acv2::Reinterleaver::sTempZeroBuffer;
                if (((_DWORD)v10 * (_DWORD)this) > 0x2000)
                  goto LABEL_81;
              }
              else
              {
                v29 = (uint64_t *)(*(_QWORD *)a3 + 16 * v28 + 16);
              }
              *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v27++) = *v29;
            }
            while (v24 != v27);
          }
          switch((_DWORD)v10)
          {
            case 8:
              TInterleaver_SIMD<PCMFloat64_SIMD>::Interleave(v24, *(const void ***)(a1 + 168), (char *)v12, (int)this);
              break;
            case 4:
              v56 = *(float32x2_t ***)(a1 + 168);
              if ((_DWORD)v24 == 2)
              {
                v58 = *v56;
                v57 = v56[1];
                if (this >= 2)
                {
                  v59 = this >> 1;
                  do
                  {
                    v60 = *v58++;
                    v65.val[0] = v60;
                    v61 = *v57++;
                    v65.val[1] = v61;
                    vst2_f32((float *)v12, v65);
                    v12 += 4;
                    --v59;
                  }
                  while (v59);
                }
                if ((this & 1) != 0)
                {
                  *v12 = v58->i32[0];
                  v12[1] = v57->i32[0];
                }
              }
              else
              {
                TInterleaver_SIMD<PCMSInt32_SIMD>::Interleave(v24, (const void **)v56, (char *)v12, (int)this);
              }
              break;
            case 2:
              TInterleaver_SIMD<PCMSInt16_SIMD>::Interleave(v24, *(const void ***)(a1 + 168), (char *)v12, (int)this);
              break;
          }
        }
        else
        {
LABEL_81:
          if ((int)v24 >= 1)
          {
            v46 = 0;
            do
            {
              LODWORD(v47) = v46 + 1;
              v48 = v46;
              v49 = *(_QWORD *)(a1 + 192);
              v50 = *(unsigned int *)(v49 + 4 * v46);
              if ((_DWORD)v50 == -1)
              {
                if ((int)v47 < (int)v24)
                {
                  v47 = (int)v47;
                  while (*(_DWORD *)(v49 + 4 * v47) == -1)
                  {
                    if (v24 == ++v47)
                    {
                      LODWORD(v47) = v24;
                      break;
                    }
                  }
                }
                acv2::Reinterleaver::Zero((uint64_t)this, (uint64_t)v12 + v48 * (uint64_t)(int)v10, (unsigned __int8 *)((v47 - v48) * (_DWORD)v10), v8);
              }
              else
              {
                acv2::Reinterleaver::Blit((uint64_t)this, *(_QWORD *)(*(_QWORD *)a3 + 16 * v50 + 16), (const unsigned __int8 *)v12 + v48 * (uint64_t)(int)v10, v10, (int)v10, v8);
              }
              v46 = v47;
            }
            while ((int)v47 < (int)v24);
          }
        }
        break;
      case 2:
        if ((*(_BYTE *)(a1 + 68) & 0x20) != 0)
          v25 = *(_DWORD *)(a1 + 84);
        else
          v25 = 1;
        if ((*(_BYTE *)(a1 + 28) & 0x20) != 0)
          v30 = 1;
        else
          v30 = *(unsigned int *)(a1 + 44);
        v37 = *(_DWORD *)(a1 + 40);
        v38 = ((_DWORD)v10 * (_DWORD)this);
        if (v10 <= 8 && ((1 << (char)v10) & 0x114) != 0 && *(_BYTE *)(a1 + 265))
        {
          if ((int)v30 >= 1)
          {
            v39 = 0;
            do
            {
              v40 = *(unsigned int *)(*(_QWORD *)(a1 + 240) + 4 * v39);
              if ((_DWORD)v40 == -1)
              {
                v41 = &acv2::Reinterleaver::sTempScratchBuffer;
                if (v38 > 0x2000)
                  goto LABEL_74;
              }
              else
              {
                v41 = (uint64_t *)(*(_QWORD *)a4 + 16 * v40 + 16);
              }
              *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v39++) = *v41;
            }
            while (v30 != v39);
          }
          switch((_DWORD)v10)
          {
            case 8:
              TDeinterleaver_SIMD<PCMFloat64_SIMD>::Deinterleave(v30, (char *)v11, *(void ***)(a1 + 168), (int)this);
              break;
            case 4:
              v62 = *(int ***)(a1 + 168);
              if ((_DWORD)v30 == 2)
                StereoDeinterleave32_Portable((int *)v11, *v62, v62[1], this);
              else
                TDeinterleaver_SIMD<PCMSInt32_SIMD>::Deinterleave(v30, (char *)v11, (void **)v62, (int)this);
              break;
            case 2:
              TDeinterleaver_SIMD<PCMSInt16_SIMD>::Deinterleave(v30, (char *)v11, *(void ***)(a1 + 168), (int)this);
              break;
          }
          if (v25 >= 1)
          {
            v63 = 0;
            v64 = 16;
            do
            {
              if (*(_DWORD *)(*(_QWORD *)(a1 + 192) + v63) == -1)
                bzero(*(void **)(*(_QWORD *)a4 + v64), v38);
              v63 += 4;
              v64 += 16;
            }
            while (4 * v25 != v63);
          }
        }
        else
        {
LABEL_74:
          if (v25 >= 1)
          {
            v42 = 0;
            v43 = 4 * v25;
            v44 = 16;
            do
            {
              v45 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + v42);
              if (v45 == -1)
                bzero(*(void **)(*(_QWORD *)a4 + v44), ((_DWORD)v10 * (_DWORD)this));
              else
                acv2::Reinterleaver::Blit((uint64_t)this, v11 + v45 * (uint64_t)(int)v10, *(const unsigned __int8 **)(*(_QWORD *)a4 + v44), v10, v37, (int)v10);
              v42 += 4;
              v44 += 16;
            }
            while (v43 != v42);
          }
        }
        break;
      case 3:
        if ((*(_BYTE *)(a1 + 68) & 0x20) != 0)
        {
          v26 = *(_DWORD *)(a1 + 84);
          if (v26 < 1)
            return;
        }
        else
        {
          v26 = 1;
        }
        v31 = 0;
        v32 = ((_DWORD)v10 * (_DWORD)this);
        v33 = 16;
        v34 = v26;
        do
        {
          v35 = *(void **)(*(_QWORD *)a4 + v33);
          v36 = *(unsigned int *)(*(_QWORD *)(a1 + 192) + 4 * v31);
          if ((_DWORD)v36 == -1)
            bzero(v35, v32);
          else
            memcpy(v35, *(const void **)(*(_QWORD *)a3 + 16 * v36 + 16), v32);
          ++v31;
          v33 += 16;
        }
        while (v34 != v31);
        break;
      default:
        return;
    }
  }
}

uint64_t acv2::PCMConverter2::ConvertBufferList(uint64_t result, int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = result;
  if ((*(_BYTE *)(result + 28) & 0x20) != 0)
    v7 = 1;
  else
    v7 = *(_DWORD *)(result + 44);
  v8 = *(unsigned int *)*a3;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = (v7 * a2);
    v11 = 16 * v8;
    do
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v6 + 168))(*(_QWORD *)(*a3 + v9 + 16), *(_QWORD *)(*a4 + v9 + 16), v10);
      v9 += 16;
    }
    while (v11 != v9);
  }
  return result;
}

int16x8_t *NativeInt16ToFloat32_ARM(int16x8_t *a1, float32x4_t *a2, unsigned int a3)
{
  return NativeInt16ToFloat32Scaled_ARM(a1, a2, a3, 0.000030518);
}

int16x8_t *NativeInt16ToFloat32Scaled_ARM(int16x8_t *result, float32x4_t *a2, unsigned int a3, float a4)
{
  char v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int16x8_t v8;
  int i;
  int v10;

  if ((a2 & 0xF) != 0 && a3)
  {
    v4 = (_BYTE)a2 + 4;
    do
    {
      v5 = result->i16[0];
      result = (int16x8_t *)((char *)result + 2);
      a2->f32[0] = (float)v5 * a4;
      a2 = (float32x4_t *)((char *)a2 + 4);
      v6 = a3 - 1;
      if ((v4 & 0xF) == 0)
        break;
      v4 += 4;
      --a3;
    }
    while (a3);
  }
  else
  {
    v6 = a3;
  }
  if (v6 >= 8)
  {
    v7 = v6 >> 3;
    do
    {
      v8 = *result++;
      *a2 = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v8.i8)), a4);
      a2[1] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v8)), a4);
      a2 += 2;
      --v7;
    }
    while (v7);
  }
  for (i = v6 & 7; i; --i)
  {
    v10 = result->i16[0];
    result = (int16x8_t *)((char *)result + 2);
    a2->f32[0] = (float)v10 * a4;
    a2 = (float32x4_t *)((char *)a2 + 4);
  }
  return result;
}

int *StereoDeinterleave32_Portable(int *result, int *a2, _DWORD *a3, unsigned int a4)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  if (a4 >= 2)
  {
    v4 = a4 >> 1;
    do
    {
      v5 = *result;
      v6 = result[1];
      v7 = result[2];
      v8 = result[3];
      result += 4;
      *a2 = v5;
      *a3 = v6;
      a2[1] = v7;
      a3[1] = v8;
      a2 += 2;
      a3 += 2;
      --v4;
    }
    while (v4);
  }
  if ((a4 & 1) != 0)
  {
    *a2 = *result;
    *a3 = result[1];
  }
  return result;
}

unint64_t TDeinterleaver_SIMD<PCMSInt32_SIMD>::Deinterleave(unint64_t result, char *a2, void **a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t *v11;
  void **v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  int32x4_t *v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t *v26;
  int32x4_t v27;
  int32x4_t v28;
  __int8 *v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int32x4_t *v37;
  int v38;
  int32x4_t v39;
  int32x4_t v40;
  int v41;
  uint64_t v42;
  int32x4_t *v43;
  void **v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  int v50;
  int32x4_t *v51;
  int32x4_t v52;
  int32x4_t *v53;
  int32x4_t v54;
  __int8 *v55;
  __int128 v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int v61;
  int32x4_t v62;
  int32x2_t *v63;
  _OWORD *v64;
  _OWORD *v65;
  int v66;
  int32x2_t *v67;
  int32x2_t v68;
  int32x2_t *v69;
  int32x2_t v70;
  int32x2_t *v71;
  int32x2_t v72;
  unint64_t *v73;
  __int128 v74;
  __int128 v75;
  int v76;
  int32x2_t v77;
  _DWORD *v78;
  uint64_t v79;
  char *v80;

  if (!(_DWORD)result)
    return result;
  if ((_DWORD)result == 1)
    return (unint64_t)memcpy(*a3, a2, 4 * a4);
  v4 = 0;
  v5 = a4 + 3;
  if (a4 >= 0)
    v6 = a4;
  else
    v6 = a4 + 3;
  v7 = v6 >> 2;
  v8 = (int)result;
  v9 = 2 * (int)result;
  v10 = 4 * (int)result;
  while ((int)result >= 8)
  {
    v11 = (int32x4_t *)&a2[4 * v4];
    v12 = &a3[v4];
    v13 = *v12;
    v14 = *(void **)((char *)a3 + ((8 * v4) | 8));
    v16 = v12[2];
    v15 = v12[3];
    v17 = v12[4];
    v18 = v12[5];
    v19 = v12[6];
    v20 = v12[7];
    if (v5 >= 7)
    {
      v21 = 0;
      v22 = v7;
      do
      {
        v23 = v11;
        v24 = *v11;
        v25 = v11[1];
        v26 = (int32x4_t *)((char *)v11 + v10);
        v27 = *v26;
        v28 = v26[1];
        v29 = &v26->i8[v10];
        v30 = *(_OWORD *)v29;
        v31 = *((_OWORD *)v29 + 1);
        v32 = &v29[v10];
        *(_QWORD *)&v33 = vzip1q_s32(v24, v27).u64[0];
        DWORD2(v33) = v30;
        HIDWORD(v33) = *(_OWORD *)v32;
        *(_QWORD *)&v34 = vtrn2q_s32(v24, v27).u64[0];
        DWORD2(v34) = DWORD1(v30);
        HIDWORD(v34) = HIDWORD(*(_QWORD *)v32);
        *(_QWORD *)&v35 = vzip2q_s32(v24, v27).u64[0];
        DWORD2(v35) = DWORD2(v30);
        HIDWORD(v35) = *((_QWORD *)v32 + 1);
        v24.i64[0] = vuzp2q_s32(vuzp2q_s32(v24, v27), v24).u64[0];
        v24.i32[2] = HIDWORD(v30);
        v24.i32[3] = HIDWORD(*(_OWORD *)v32);
        v27.i64[0] = vzip1q_s32(v25, v28).u64[0];
        v27.i32[2] = v31;
        v27.i32[3] = *((_OWORD *)v32 + 1);
        *(_QWORD *)&v30 = vtrn2q_s32(v25, v28).u64[0];
        DWORD2(v30) = DWORD1(v31);
        HIDWORD(v30) = HIDWORD(*((_QWORD *)v32 + 2));
        *(_QWORD *)&v36 = vzip2q_s32(v25, v28).u64[0];
        DWORD2(v36) = DWORD2(v31);
        HIDWORD(v36) = *((_QWORD *)v32 + 3);
        v25.i64[0] = vuzp2q_s32(vuzp2q_s32(v25, v28), v25).u64[0];
        v25.i64[1] = __PAIR64__(HIDWORD(*((_OWORD *)v32 + 1)), HIDWORD(v31));
        *(_OWORD *)&v13[v21] = v33;
        *(_OWORD *)&v14[v21] = v34;
        *(_OWORD *)&v16[v21] = v35;
        *(int32x4_t *)&v15[v21] = v24;
        *(int32x4_t *)&v17[v21] = v27;
        *(_OWORD *)&v18[v21] = v30;
        *(_OWORD *)&v19[v21] = v36;
        *(int32x4_t *)&v20[v21] = v25;
        v21 += 4;
        v11 = (int32x4_t *)&v32[v10];
        --v22;
      }
      while (v22);
      v11 = &v23[(unint64_t)v9 / 2];
      v13 = (_DWORD *)((char *)v13 + v21 * 4);
      v14 = (_DWORD *)((char *)v14 + v21 * 4);
      v16 = (_DWORD *)((char *)v16 + v21 * 4);
      v15 = (_DWORD *)((char *)v15 + v21 * 4);
      v17 = (_DWORD *)((char *)v17 + v21 * 4);
      v18 = (_DWORD *)((char *)v18 + v21 * 4);
      v19 = (_DWORD *)((char *)v19 + v21 * 4);
      v20 = (_DWORD *)((char *)v20 + v21 * 4);
    }
    if ((a4 & 3) != 0)
    {
      v37 = v11 + 1;
      v38 = a4 & 3;
      do
      {
        v39 = v37[-1];
        v40 = *v37;
        *v13++ = v39.i32[0];
        *v14++ = v39.i32[1];
        *v16++ = v39.i32[2];
        *v15++ = v39.i32[3];
        *v17++ = v40.i32[0];
        *v18++ = v40.i32[1];
        *v19++ = v40.i32[2];
        *v20++ = v40.i32[3];
        v37 = (int32x4_t *)((char *)v37 + v10);
        --v38;
      }
      while (v38);
    }
    v41 = -8;
    v42 = 8;
LABEL_32:
    v4 += v42;
    result = (result + v41);
    if (!(_DWORD)result)
      return result;
  }
  if ((int)result >= 4)
  {
    v43 = (int32x4_t *)&a2[4 * v4];
    v44 = &a3[v4];
    v45 = *v44;
    v46 = *(void **)((char *)a3 + ((8 * v4) | 8));
    v48 = v44[2];
    v47 = v44[3];
    if (v5 >= 7)
    {
      v49 = 0;
      v50 = v7;
      do
      {
        v51 = v43;
        v52 = *v43;
        v53 = (int32x4_t *)((char *)v43 + v10);
        v54 = *v53;
        v55 = &v53->i8[v10];
        v56 = *(_OWORD *)v55;
        v57 = &v55[v10];
        *(_QWORD *)&v58 = vzip1q_s32(v52, v54).u64[0];
        DWORD2(v58) = v56;
        HIDWORD(v58) = *(_OWORD *)v57;
        *(_QWORD *)&v59 = vtrn2q_s32(v52, v54).u64[0];
        DWORD2(v59) = DWORD1(v56);
        HIDWORD(v59) = HIDWORD(*(_QWORD *)v57);
        *(_QWORD *)&v60 = vzip2q_s32(v52, v54).u64[0];
        DWORD2(v60) = DWORD2(v56);
        HIDWORD(v60) = *((_QWORD *)v57 + 1);
        v52.i64[0] = vuzp2q_s32(vuzp2q_s32(v52, v54), v52).u64[0];
        v52.i32[2] = HIDWORD(v56);
        v52.i32[3] = HIDWORD(*(_OWORD *)v57);
        *(_OWORD *)&v45[v49] = v58;
        *(_OWORD *)&v46[v49] = v59;
        *(_OWORD *)&v48[v49] = v60;
        *(int32x4_t *)&v47[v49] = v52;
        v49 += 4;
        v43 = (int32x4_t *)&v57[v10];
        --v50;
      }
      while (v50);
      v43 = &v51[(unint64_t)v9 / 2];
      v47 = (_DWORD *)((char *)v47 + v49 * 4);
      v48 = (_DWORD *)((char *)v48 + v49 * 4);
      v46 = (_DWORD *)((char *)v46 + v49 * 4);
      v45 = (_DWORD *)((char *)v45 + v49 * 4);
    }
    v61 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        v62 = *v43;
        *v45++ = *v43;
        *v46++ = v62.i32[1];
        *v48++ = v62.i32[2];
        *v47++ = v62.i32[3];
        v43 = (int32x4_t *)((char *)v43 + v10);
        --v61;
      }
      while (v61);
    }
    v41 = -4;
    v42 = 4;
    goto LABEL_32;
  }
  if ((int)result >= 2)
  {
    v63 = (int32x2_t *)&a2[4 * v4];
    v64 = a3[v4];
    v65 = *(void **)((char *)a3 + ((8 * v4) | 8));
    v66 = v7;
    if (v5 >= 7)
    {
      do
      {
        v67 = v63;
        v68 = *v63;
        v69 = (int32x2_t *)((char *)v63 + v10);
        v70 = *v69;
        v71 = (int32x2_t *)((char *)v69 + v10);
        v72 = *v71;
        v73 = (unint64_t *)((char *)v71 + v10);
        *(int32x2_t *)&v74 = vzip1_s32(v68, v70);
        DWORD2(v74) = v72.i32[0];
        HIDWORD(v74) = *v73;
        *(int32x2_t *)&v75 = vzip2_s32(v68, v70);
        DWORD2(v75) = vdup_lane_s32(v72, 1).u32[0];
        HIDWORD(v75) = HIDWORD(*v73);
        *v64++ = v74;
        *v65++ = v75;
        v63 = (int32x2_t *)((char *)v73 + v10);
        --v66;
      }
      while (v66);
      v63 = &v67[v9];
    }
    v76 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        v77 = *v63;
        *(_DWORD *)v64 = *v63;
        v64 = (_OWORD *)((char *)v64 + 4);
        *(_DWORD *)v65 = v77.i32[1];
        v65 = (_OWORD *)((char *)v65 + 4);
        v63 = (int32x2_t *)((char *)v63 + v10);
        --v76;
      }
      while (v76);
    }
    v41 = -2;
    v42 = 2;
    goto LABEL_32;
  }
  if (a4)
  {
    v78 = a3[v4];
    v79 = 4 * v8;
    v80 = &a2[4 * v4];
    do
    {
      *v78++ = *(_DWORD *)v80;
      v80 += v79;
      --a4;
    }
    while (a4);
  }
  return result;
}

_OWORD *Float32ToNativeInt16Scaled_ARM(_OWORD *result, __n128 *a2, unsigned int a3, float a4, int32x4_t a5)
{
  unsigned int v5;
  float32x4_t v6;
  float32x4_t v7;
  int v8;
  float v9;

  if (a3 >= 8)
  {
    v5 = a3 >> 3;
    do
    {
      v6 = *(float32x4_t *)result;
      v7 = *((float32x4_t *)result + 1);
      result += 2;
      a5 = (int32x4_t)vqmovn_high_s32(vqmovn_s32(vcvtaq_s32_f32(vmulq_n_f32(v6, a4))), vcvtaq_s32_f32(vmulq_n_f32(v7, a4)));
      *a2++ = (__n128)a5;
      --v5;
    }
    while (v5);
  }
  v8 = a3 & 7;
  if ((a3 & 7) != 0)
  {
    do
    {
      v9 = *(float *)result;
      result = (_OWORD *)((char *)result + 4);
      a5.i32[0] = llroundf(v9 * a4);
      *(int16x4_t *)a5.i8 = vqmovn_s32(a5);
      a2->n128_u16[0] = a5.i16[0];
      a2 = (__n128 *)((char *)a2 + 2);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t acv2::BlockCopyConverter::ProduceOutput(acv2::BlockCopyConverter *this, ACAudioSpan *a2)
{
  int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  ACBaseAudioSpan *v10;
  int v11[2];
  int v12;

  if (!*((_DWORD *)this + 8))
    std::terminate();
  acv2::AudioConverterChain::ObtainInput((acv2::AudioConverterChain *)&v10, *((acv2::AudioConverterBase **)this + 1), (uint64_t)this, *((_DWORD *)a2 + 1));
  v4 = v12;
  if (v12
    || ((v5 = (unsigned int *)v10, *((_DWORD *)a2 + 1) >= *(_DWORD *)v10)
      ? (v6 = *(_DWORD *)v10)
      : (v6 = *((_DWORD *)a2 + 1)),
        ACBaseAudioSpan::append((unsigned int *)a2, v10, v6, *((_DWORD *)this + 18)),
        (v4 = acv2::AudioConverterChain::ConsumedInput(*((_QWORD **)this + 1), *v5, *(uint64_t *)v11, v6)) != 0))
  {
    v7 = 0;
    v8 = v4 & 0xFFFFFF00;
  }
  else
  {
    v8 = 0;
    LOBYTE(v4) = v6 != 0;
    v7 = 0x100000000;
  }
  return v7 | v8 | v4;
}

unsigned int *ACBaseAudioSpan::append(unsigned int *this, const ACBaseAudioSpan *a2, unsigned int a3, int a4)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  size_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;

  v6 = this;
  v7 = *((_QWORD *)this + 4);
  if (v7 && (v8 = *((_QWORD *)a2 + 4)) != 0)
  {
    v9 = *((_QWORD *)this + 2);
    if (*(_DWORD *)v9 != 1)
      std::terminate();
    if (a3)
    {
      v10 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16);
      v11 = *(_QWORD *)(v9 + 16);
      v12 = this[2];
      v13 = (char *)(v11 + v12);
      v14 = v7 + 16 * *this;
      v15 = (unsigned int *)(v8 + 12);
      v16 = a3;
      do
      {
        v17 = *v15;
        *(_QWORD *)v14 = v12;
        *(_DWORD *)(v14 + 8) = *(v15 - 1);
        *(_DWORD *)(v14 + 12) = v17;
        this = (unsigned int *)memmove(v13, (const void *)(v10 + *(_QWORD *)(v15 - 3)), v17);
        LODWORD(v12) = v6[2] + v17;
        v6[2] = v12;
        v13 += v17;
        v15 += 4;
        v14 += 16;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    this = (unsigned int *)ACBaseAudioSpan::sizeOfFirstPackets(a2, a3, a4);
    v18 = this;
    v19 = **((unsigned int **)v6 + 2);
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = 16 * v19;
      do
      {
        v22 = *(unsigned int **)(*((_QWORD *)a2 + 2) + v20 + 16);
        this = (unsigned int *)(*(_QWORD *)(*((_QWORD *)v6 + 2) + v20 + 16) + v6[2]);
        if (v22 != this)
          this = (unsigned int *)memmove(this, v22, v18);
        v20 += 16;
      }
      while (v21 != v20);
    }
    v6[2] += v18;
  }
  *v6 += a3;
  return this;
}

_OWORD *Float32ToNativeInt16_ARM(float *a1, __n128 *a2, unsigned int a3, double a4, int32x4_t a5)
{
  return Float32ToNativeInt16Scaled_ARM(a1, a2, a3, 32768.0, a5);
}

uint64_t acv2::CodecConverter::ProduceOutput(ACAudioSpan &)::$_1::operator()(uint64_t a1, UInt32 a2, uint64_t a3, UInt32 *outStatus)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  int64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  OSStatus v32;
  OSStatus v33;
  uint64_t v34;
  uint64_t v35;
  caulk::concurrent::message *v36;
  _DWORD *v37;
  uint64_t v38;
  unsigned int v39;
  void *v40;
  void *v41;
  size_t v42;
  uint64_t v43;
  uint64_t message;
  caulk::concurrent::message *v45;
  _DWORD *v46;
  UInt32 v47;
  uint64_t v48;
  AudioBufferList *v49;
  uint64_t mNumberBuffers;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  caulk::concurrent::message *v57;
  uint64_t v58;
  UInt32 *p_mDataByteSize;
  int v60;
  const ACAudioSpan *v61;
  acv2::AudioConverterBase *v62;
  void *v63;
  OSStatus PropertyInfo;
  uint64_t v65;
  uint64_t v66;
  caulk::concurrent::message *v67;
  _DWORD *v68;
  OSStatus Property;
  uint64_t v70;
  uint64_t v71;
  caulk::concurrent::message *v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *exception;
  UInt32 *v78;
  unsigned int *v79;
  UInt32 ioNumberPackets;
  AudioBufferList *ioOutputBufferLists;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  AudioUnitRenderActionFlags ioActionFlags;
  UInt32 ioOutputDataByteSize[12];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int **)(a3 + 16);
  v9 = *v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 16 * v9;
    do
    {
      v12 = *(unsigned int *)(a3 + 12);
      v13 = *(_QWORD *)(a3 + 16) + v10;
      *(_DWORD *)(v13 + 12) = v12;
      bzero(*(void **)(v13 + 16), v12);
      v10 += 16;
    }
    while (v11 != v10);
    v8 = *(unsigned int **)(a3 + 16);
  }
  v14 = v8[3];
  v15 = *(_QWORD *)(a1 + 712);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 + 40);
    v17 = v16 * *(_DWORD *)(v15 + 96);
    if (v17 >= v14)
      v17 = v8[3];
    v18 = v17 / v16 / *(_DWORD *)(v15 + 56) * *(_DWORD *)(v15 + 56);
    v14 = v18 * v16;
    v19 = CA::AudioBuffers::Prepare(**(CA::AudioBuffers ***)(v15 + 64), 1, v18 * v16);
    if (v19[4 * *v19 + 2] != 1094863915 || (v20 = *(v19 - 9), !(_DWORD)v20))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        ioOutputDataByteSize[0] = 136315394;
        *(_QWORD *)&ioOutputDataByteSize[1] = "PostDecodeRenderer.cpp";
        LOWORD(ioOutputDataByteSize[3]) = 1024;
        *(UInt32 *)((char *)&ioOutputDataByteSize[3] + 2) = 123;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  unable to get metadata frame from render EABL", (uint8_t *)ioOutputDataByteSize, 0x12u);
      }
      exception = __cxa_allocate_exception(4uLL);
      *exception = 2003329396;
    }
    v78 = outStatus;
    v79 = v19;
    v21 = (uint64_t *)((char *)v19 + v20 - 48);
    v22 = (void *)*v21;
    v23 = v21[1] - *v21;
    if (v23 >= 1)
    {
      bzero(v22, v23);
      v22 = (void *)*v21;
    }
    v21[1] = (uint64_t)v22;
    memset(ioOutputDataByteSize, 0, 44);
    LOBYTE(ioOutputDataByteSize[6]) = 1;
    *(_QWORD *)&ioOutputDataByteSize[8] = 0x10000002CLL;
    AudioMetadataFrame::begin_new(v21, ioOutputDataByteSize);
    v24 = 2 * ((v18 + *(_DWORD *)(v15 + 56) - 1) / *(_DWORD *)(v15 + 56));
    v25 = *(unsigned int *)(v15 + 100);
    if (v25 >= v24)
      v26 = v24;
    else
      v26 = v25;
    if ((_DWORD)v26)
    {
      v27 = 0;
      v28 = (*(_QWORD *)(v15 + 80) - *(_QWORD *)(v15 + 72)) / v25;
      do
      {
        v29 = *(_QWORD *)(v15 + 72) + v28 * v27;
        ioOutputBufferLists = (AudioBufferList *)1;
        v82 = 40;
        v83 = 0;
        v84 = 0x100000000;
        v85 = v28;
        v86 = v29;
        AudioMetadataFrame_AppendEvent(v21, (char *)&ioOutputBufferLists);
        ++v27;
        --v26;
      }
      while (v26);
    }
    v30 = *(_QWORD *)(a1 + 712);
    ioNumberPackets = a2;
    if (v30)
    {
      outStatus = v78;
      v8 = v79;
LABEL_23:
      v31 = (void **)v8;
      v32 = AudioCodecProduceOutputBufferList(*(AudioCodec *)(a1 + 168), (AudioBufferList *)v8, &ioNumberPackets, *(AudioStreamPacketDescription **)(a3 + 32), outStatus);
LABEL_24:
      v33 = v32;
      goto LABEL_25;
    }
    outStatus = v78;
    v8 = v79;
  }
  else
  {
    ioNumberPackets = a2;
  }
  if (*(_BYTE *)(a1 + 704) || (*(_BYTE *)(a1 + 68) & 0x20) != 0 && *(_DWORD *)(a1 + 84) >= 2u)
    goto LABEL_23;
  if (!*(_BYTE *)(a1 + 196) || *(_DWORD *)(a1 + 356) <= v14)
  {
    v31 = (void **)v8;
    v32 = AudioCodecProduceOutputPackets(*(AudioCodec *)(a1 + 168), *((void **)v8 + 2), v8 + 3, &ioNumberPackets, *(AudioStreamPacketDescription **)(a3 + 32), outStatus);
    goto LABEL_24;
  }
  v40 = *(void **)(a1 + 776);
  v41 = *(void **)(a1 + 784);
  v31 = (void **)v8;
  if (v40 == v41)
  {
    std::vector<unsigned char>::resize((std::vector<char> *)(a1 + 776), *(unsigned int *)(a1 + 356));
    v40 = *(void **)(a1 + 776);
    v41 = *(void **)(a1 + 784);
  }
  ioOutputDataByteSize[0] = (_DWORD)v41 - (_DWORD)v40;
  v33 = AudioCodecProduceOutputPackets(*(AudioCodec *)(a1 + 168), v40, ioOutputDataByteSize, &ioNumberPackets, *(AudioStreamPacketDescription **)(a3 + 32), outStatus);
  if (!v33)
  {
    v42 = ioOutputDataByteSize[0];
    if (ioOutputDataByteSize[0] <= *((_DWORD *)v31 + 3))
    {
      *((_DWORD *)v31 + 3) = ioOutputDataByteSize[0];
      memcpy(v31[2], *(const void **)(a1 + 776), v42);
      v33 = 0;
    }
    else
    {
      v33 = 560100710;
      v43 = _os_log_pack_size();
      message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v43 + 88, 17);
      if (message)
      {
        v45 = (caulk::concurrent::message *)message;
        v46 = (_DWORD *)_os_log_pack_fill();
        v47 = ioOutputDataByteSize[0];
        *v46 = 67109120;
        v46[1] = v47;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v45);
      }
    }
  }
LABEL_25:
  if (v33)
  {
    v34 = _os_log_pack_size();
    v35 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v34 + 88, 2);
    if (v35)
    {
      v36 = (caulk::concurrent::message *)v35;
      v37 = (_DWORD *)_os_log_pack_fill();
      *v37 = 67109120;
      v37[1] = v33;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v36);
    }
    v38 = 0;
    v39 = *((_DWORD *)v31 + 3);
  }
  else
  {
    v39 = *((_DWORD *)v31 + 3);
    if (*(_BYTE *)(a1 + 197))
      v38 = v39 / *(_DWORD *)(a1 + 72);
    else
      v38 = ioNumberPackets;
  }
  *(_QWORD *)(a1 + 816) += v38;
  *(_QWORD *)(a1 + 824) += v39;
  v48 = *(_QWORD *)(a1 + 712);
  if (v48)
  {
    v49 = *(AudioBufferList **)(a3 + 16);
    mNumberBuffers = v49->mNumberBuffers;
    if ((_DWORD)mNumberBuffers)
    {
      v51 = 0;
      v52 = 16 * mNumberBuffers;
      do
      {
        v53 = *(unsigned int *)(a3 + 12);
        v54 = *(_QWORD *)(a3 + 16) + v51;
        *(_DWORD *)(v54 + 12) = v53;
        bzero(*(void **)(v54 + 16), v53);
        v51 += 16;
      }
      while (v52 != v51);
      v49 = *(AudioBufferList **)(a3 + 16);
    }
    *(_QWORD *)ioOutputDataByteSize = v31;
    ioOutputBufferLists = v49;
    if ((_DWORD)v38)
    {
      ioActionFlags = 0;
      if (AudioUnitProcessMultiple(*(AudioUnit *)(v48 + 8), &ioActionFlags, (const AudioTimeStamp *)(v48 + 104), v38, 1u, (const AudioBufferList **)ioOutputDataByteSize, 1u, &ioOutputBufferLists))
      {
        v55 = _os_log_pack_size();
        v56 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v55 + 88, 16);
        if (v56)
        {
          v57 = (caulk::concurrent::message *)v56;
          *(_WORD *)_os_log_pack_fill() = 0;
          caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v57);
        }
        return 0;
      }
      *(double *)(v48 + 104) = *(double *)(v48 + 104) + (double)v38;
    }
    else
    {
      v58 = v49->mNumberBuffers;
      if ((_DWORD)v58)
      {
        p_mDataByteSize = &v49->mBuffers[0].mDataByteSize;
        do
        {
          *p_mDataByteSize = 0;
          p_mDataByteSize += 4;
          --v58;
        }
        while (v58);
      }
    }
  }
  v60 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)a3 = v38;
  *(_DWORD *)(a3 + 8) = ACBaseAudioSpan::sizeOfFirstPackets((ACBaseAudioSpan *)a3, v38, v60);
  v62 = *(acv2::AudioConverterBase **)(a1 + 848);
  if (v62)
    acv2::AudioConverterBase::writeCapture(v62, (AudioConverterCapturer *)a3, v61);
  if (*(_BYTE *)(a1 + 196))
  {
    v63 = *(void **)(a3 + 40);
    if (v63)
    {
      ioOutputDataByteSize[0] = 0;
      LOBYTE(ioOutputBufferLists) = 0;
      PropertyInfo = AudioCodecGetPropertyInfo(*(AudioCodec *)(a1 + 168), 0x706B7469u, ioOutputDataByteSize, (Boolean *)&ioOutputBufferLists);
      if (PropertyInfo)
      {
        v65 = _os_log_pack_size();
        v66 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v65 + 88, 16);
        if (!v66)
          return v38;
        v67 = (caulk::concurrent::message *)v66;
        v68 = (_DWORD *)_os_log_pack_fill();
LABEL_71:
        *v68 = 67109120;
        v68[1] = PropertyInfo;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v67);
        return v38;
      }
      if ((_DWORD)v38 != ioOutputDataByteSize[0] >> 4)
      {
        v74 = _os_log_pack_size();
        v75 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v74 + 88, 16);
        if (!v75)
          return v38;
        v67 = (caulk::concurrent::message *)v75;
        v68 = (_DWORD *)_os_log_pack_fill();
        PropertyInfo = 0;
        goto LABEL_71;
      }
      Property = AudioCodecGetProperty(*(AudioCodec *)(a1 + 168), 0x706B7469u, ioOutputDataByteSize, v63);
      if (Property)
      {
        v70 = _os_log_pack_size();
        v71 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v70 + 88, 16);
        if (v71)
        {
          v72 = (caulk::concurrent::message *)v71;
          v73 = (_DWORD *)_os_log_pack_fill();
          *v73 = 67109120;
          v73[1] = Property;
          caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v72);
        }
      }
    }
  }
  return v38;
}

OSStatus AudioCodecProduceOutputBufferList(AudioCodec inCodec, AudioBufferList *ioBufferList, UInt32 *ioNumberPackets, AudioStreamPacketDescription *outPacketDescription, UInt32 *outStatus)
{
  uint64_t (***v9)(_QWORD);
  uint64_t (***v10)(_QWORD);
  UInt32 mDataByteSize;
  int v12;
  OSStatus result;
  uint64_t (*v14)(uint64_t (**)(_QWORD), AudioBufferList *, UInt32 *, AudioStreamPacketDescription *, UInt32 *);

  if (!inCodec)
    return -50;
  v9 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioCodec))(*(_QWORD *)inCodec + 8))(inCodec);
  v10 = v9;
  if (ioBufferList && ioBufferList->mNumberBuffers)
  {
    mDataByteSize = ioBufferList->mBuffers[0].mDataByteSize;
    v12 = 1;
    if (!v9)
      goto LABEL_5;
  }
  else
  {
    v12 = 0;
    mDataByteSize = 0;
    if (!v9)
    {
LABEL_5:
      result = 560947818;
      if (!v12)
        return result;
      goto LABEL_13;
    }
  }
  v14 = *(uint64_t (**)(uint64_t (**)(_QWORD), AudioBufferList *, UInt32 *, AudioStreamPacketDescription *, UInt32 *))(*(_QWORD *)((**v9)(v9) + 112) + 72);
  if (v14)
  {
    result = v14(v10[3], ioBufferList, ioNumberPackets, outPacketDescription, outStatus);
    if (!v12)
      return result;
  }
  else
  {
    result = -4;
    if (!v12)
      return result;
  }
LABEL_13:
  if (ioBufferList->mBuffers[0].mDataByteSize > mDataByteSize)
  {
    _os_assert_log();
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t acv2::SampleRateConverter::ProduceOutput(acv2::SampleRateConverter *this, ACAudioSpan *a2)
{
  const ACAudioSpan *v4;
  uint64_t v5;
  acv2::AudioConverterBase *v6;

  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
  v6 = (acv2::AudioConverterBase *)*((_QWORD *)this + 19);
  if (v6)
    acv2::AudioConverterBase::writeCapture(v6, a2, v4);
  return v5;
}

uint64_t acv2::PCMConverterI1::ConvertBufferList(uint64_t result, int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = result;
  if ((*(_BYTE *)(result + 28) & 0x20) != 0)
    v7 = 1;
  else
    v7 = *(_DWORD *)(result + 44);
  v8 = *(unsigned int *)*a3;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = (v7 * a2);
    v11 = 16 * v8;
    do
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(v6 + 168))(*(_QWORD *)(*a3 + v9 + 16), *(_QWORD *)(*a4 + v9 + 16), v10, *(unsigned int *)(v6 + 176));
      v9 += 16;
    }
    while (v11 != v9);
  }
  return result;
}

uint32x4_t *NativeLowAlignedInt32ToFloat32_ARM(uint32x4_t *result, float32x4_t *a2, unsigned int a3, int a4)
{
  uint32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  uint32x4_t v7;
  float32x4_t *v8;
  uint32x4_t v9;
  uint32x4_t v10;
  __int32 v11;

  v4 = (uint32x4_t)vdupq_n_s32(32 - a4);
  if (a3 < 0x10)
  {
    if (a3 >= 4)
    {
      do
      {
        v10 = *result++;
        *a2++ = vcvtq_n_f32_s32((int32x4_t)vshlq_u32(v10, v4), 0x1FuLL);
        a3 -= 4;
      }
      while (a3 > 3);
    }
  }
  else
  {
    a3 -= 12;
    v5 = vcvtq_n_f32_s32((int32x4_t)vshlq_u32(*result, v4), 0x1FuLL);
    v6 = (int32x4_t)vshlq_u32(result[1], v4);
    v7 = result[2];
    result += 3;
    do
    {
      v8 = a2;
      *a2++ = v5;
      v5 = vcvtq_n_f32_s32(v6, 0x1FuLL);
      v6 = (int32x4_t)vshlq_u32(v7, v4);
      v9 = *result++;
      v7 = v9;
      a3 -= 4;
    }
    while (a3 > 3);
    *a2 = v5;
    a2[1] = vcvtq_n_f32_s32(v6, 0x1FuLL);
    a2[2] = vcvtq_n_f32_s32((int32x4_t)vshlq_u32(v7, v4), 0x1FuLL);
    a2 = v8 + 4;
  }
  for (; a3; --a3)
  {
    v11 = result->i32[0];
    result = (uint32x4_t *)((char *)result + 4);
    a2->f32[0] = (float)(v11 << (32 - a4)) * 4.6566e-10;
    a2 = (float32x4_t *)((char *)a2 + 4);
  }
  return result;
}

uint64_t acv2::Reinterleaver::Blit(uint64_t this, uint64_t a2, const unsigned __int8 *a3, unsigned __int8 *a4, int a5, int a6)
{
  uint64_t v6;
  __int128 *v7;
  const unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  __int128 *v11;
  int v12;
  __int128 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  const unsigned __int8 *v17;
  const unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  _OWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  const unsigned __int8 *v30;
  const unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  _DWORD *v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 v48;
  uint64_t v49;
  unsigned __int8 *v50;
  _WORD *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;

  LODWORD(v6) = (_DWORD)a4;
  if ((int)a4 >= 32)
  {
    v7 = (__int128 *)(a2 + 16);
    v8 = a3 + 16;
    v9 = a4;
    do
    {
      if ((_DWORD)this)
      {
        v10 = (unsigned __int8 *)v8;
        v11 = v7;
        v12 = this;
        do
        {
          v13 = *v11;
          *((_OWORD *)v10 - 1) = *(v11 - 1);
          *(_OWORD *)v10 = v13;
          v11 = (__int128 *)((char *)v11 + a5);
          v10 += a6;
          --v12;
        }
        while (v12);
      }
      LODWORD(v6) = v9 - 32;
      v7 += 2;
      v8 += 32;
      v14 = v9 <= 63;
      v9 -= 32;
    }
    while (!v14);
  }
  if ((int)v6 >= 24)
  {
    v15 = v6;
    v16 = a2 - v6;
    v17 = &a3[-v6];
    do
    {
      if ((_DWORD)this)
      {
        v18 = v17;
        v19 = v16;
        v20 = this;
        do
        {
          v21 = (unsigned __int8 *)&v18[(int)a4];
          v22 = *(_QWORD *)(v19 + (int)a4 + 16);
          *(_OWORD *)v21 = *(_OWORD *)(v19 + (int)a4);
          *((_QWORD *)v21 + 2) = v22;
          v19 += a5;
          v18 += a6;
          --v20;
        }
        while (v20);
      }
      v23 = v15 - 24;
      v16 += 24;
      v17 += 24;
      v14 = v15 <= 47;
      v15 -= 24;
    }
    while (!v14);
    LODWORD(v6) = v23;
  }
  if ((int)v6 >= 16)
  {
    v6 = v6;
    do
    {
      if ((_DWORD)this)
      {
        v24 = (unsigned __int8 *)&a3[(int)a4 - v6];
        v25 = (_OWORD *)(a2 + (int)a4 - v6);
        v26 = this;
        do
        {
          *(_OWORD *)v24 = *v25;
          v25 = (_OWORD *)((char *)v25 + a5);
          v24 += a6;
          --v26;
        }
        while (v26);
      }
      v27 = v6 - 16;
      v14 = v6 <= 31;
      v6 -= 16;
    }
    while (!v14);
    LODWORD(v6) = v27;
  }
  if ((int)v6 >= 12)
  {
    v28 = v6;
    v29 = a2 - v6;
    v30 = &a3[-v6];
    do
    {
      if ((_DWORD)this)
      {
        v31 = v30;
        v32 = v29;
        v33 = this;
        do
        {
          v34 = (unsigned __int8 *)&v31[(int)a4];
          v35 = *(_DWORD *)(v32 + (int)a4 + 8);
          *(_QWORD *)v34 = *(_QWORD *)(v32 + (int)a4);
          *((_DWORD *)v34 + 2) = v35;
          v32 += a5;
          v31 += a6;
          --v33;
        }
        while (v33);
      }
      v36 = v28 - 12;
      v29 += 12;
      v30 += 12;
      v14 = v28 <= 23;
      v28 -= 12;
    }
    while (!v14);
    LODWORD(v6) = v36;
  }
  if ((int)v6 >= 8)
  {
    v6 = v6;
    do
    {
      if ((_DWORD)this)
      {
        v37 = (unsigned __int8 *)&a3[(int)a4 - v6];
        v38 = (_QWORD *)(a2 + (int)a4 - v6);
        v39 = this;
        do
        {
          *(_QWORD *)v37 = *v38;
          v38 = (_QWORD *)((char *)v38 + a5);
          v37 += a6;
          --v39;
        }
        while (v39);
      }
      v40 = v6 - 8;
      v14 = v6 <= 15;
      v6 -= 8;
    }
    while (!v14);
    LODWORD(v6) = v40;
  }
  if ((int)v6 > 3)
  {
    v6 = v6;
    do
    {
      if ((_DWORD)this)
      {
        v41 = (unsigned __int8 *)&a3[(int)a4 - v6];
        v42 = (_DWORD *)(a2 + (int)a4 - v6);
        v43 = this;
        do
        {
          *(_DWORD *)v41 = *v42;
          v42 = (_DWORD *)((char *)v42 + a5);
          v41 += a6;
          --v43;
        }
        while (v43);
      }
      v44 = v6 - 4;
      v14 = v6 <= 7;
      v6 -= 4;
    }
    while (!v14);
    LODWORD(v6) = v44;
  }
  if ((int)v6 < 3)
  {
    if ((_DWORD)v6 == 2)
    {
      if ((_DWORD)this)
      {
        v49 = (int)a4 - 2;
        v50 = (unsigned __int8 *)&a3[v49];
        v51 = (_WORD *)(a2 + v49);
        do
        {
          *(_WORD *)v50 = *v51;
          v51 = (_WORD *)((char *)v51 + a5);
          v50 += a6;
          this = (this - 1);
        }
        while ((_DWORD)this);
      }
    }
    else if ((int)v6 >= 1 && (_DWORD)this)
    {
      v52 = (int)a4 - 1;
      v53 = (unsigned __int8 *)&a3[v52];
      v54 = (unsigned __int8 *)(a2 + v52);
      do
      {
        *v53 = *v54;
        v54 += a5;
        v53 += a6;
        this = (this - 1);
      }
      while ((_DWORD)this);
    }
  }
  else if ((_DWORD)this)
  {
    v45 = (int)a4 - 3 + 2;
    v46 = (unsigned __int8 *)(a2 + v45);
    v47 = (unsigned __int8 *)&a3[v45];
    do
    {
      v48 = *v46;
      *((_WORD *)v47 - 1) = *((_WORD *)v46 - 1);
      *v47 = v48;
      v46 += a5;
      v47 += a6;
      this = (this - 1);
    }
    while ((_DWORD)this);
  }
  return this;
}

uint64_t *ACMetadataContainer::resetMetadataEvents(uint64_t *this, AudioMetadataFrame *a2)
{
  uint64_t v3;
  void *v4;
  int64_t v5;
  uint64_t v6;
  _OWORD v7[3];

  *((_DWORD *)this + 8) = 0;
  this[3] = 0;
  if (a2)
  {
    v3 = (uint64_t)this;
    v4 = (void *)*this;
    v5 = *(_QWORD *)(v3 + 8) - (_QWORD)v4;
    if (v5 >= 1)
    {
      bzero(v4, v5);
      v4 = *(void **)v3;
    }
    *(_QWORD *)(v3 + 8) = v4;
    memset(v7, 0, 44);
    BYTE8(v7[1]) = 1;
    *(_QWORD *)&v7[2] = 0x10000002CLL;
    this = AudioMetadataFrame::begin_new((uint64_t *)v3, (unsigned int *)v7);
    v6 = *(_QWORD *)a2;
    if (*((_QWORD *)a2 + 1) - *(_QWORD *)a2 >= 0x2CuLL)
    {
      if (v6)
      {
        *(_QWORD *)(v3 + 24) = v6 + 44;
        *(_DWORD *)(v3 + 32) = *(_DWORD *)(v6 + 40);
      }
    }
  }
  return this;
}

BOOL in_audio_mx_server_process()
{
  return iEjr08d2 > 0;
}

BOOL DSPGraph::Graph::hasProperty(DSPGraph::Graph *this, unsigned int a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((_QWORD *)this + 70, a2) != 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *DSPGraph::Graph::propagateFlagsAndTimeStamp(_QWORD *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (((this[39] - this[38]) & 0x7FFFFFFF8) != 0)
  {
    v2 = (uint64_t)this;
    v3 = 0;
    v4 = (_OWORD *)(a2 + 8);
    do
    {
      v5 = DSPGraph::Graph::out((DSPGraph::Graph *)v2, v3);
      v6 = *(_QWORD *)(v5 + 64);
      if (*(_QWORD *)(v5 + 72) == v6)
      {
        std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v13, "in");
        v11 = (_QWORD *)(v5 + 32);
        if (*(char *)(v5 + 55) < 0)
          v11 = (_QWORD *)*v11;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v12, v11, (uint64_t)(*(_QWORD *)(v5 + 72) - *(_QWORD *)(v5 + 64)) >> 5, 0);
        DSPGraph::ThrowException(1919837985, &v14, 1410, &v13, &v12);
      }
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      v7 = this[7];
      *((_DWORD *)v4 - 1) = *(_DWORD *)(v7 + 72);
      v8 = *(_OWORD *)(v7 + 8);
      v9 = *(_OWORD *)(v7 + 24);
      v10 = *(_OWORD *)(v7 + 56);
      v4[2] = *(_OWORD *)(v7 + 40);
      v4[3] = v10;
      *v4 = v8;
      v4[1] = v9;
      if (!*(_BYTE *)(v2 + 766))
        *(_QWORD *)v4 = *(_QWORD *)(v5 + 856);
      ++v3;
      v4 += 5;
    }
    while (v3 < ((*(_QWORD *)(v2 + 312) - *(_QWORD *)(v2 + 304)) >> 3));
  }
  return this;
}

void sub_18EE15A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

__n128 DSPGraph::Graph::preflight(__n128 *this, _DWORD *a2, _DWORD *a3, unsigned int a4, unsigned int a5, char a6)
{
  _DWORD *v7;
  _DWORD *v8;
  __n128 result;
  unint64_t v11;
  unint64_t v12;
  DSPGraph::GraphInput *v13;
  unint64_t v14;
  DSPGraph::GraphOutput *v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (!this[47].n128_u8[10])
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "preflight");
    std::string::basic_string[abi:ne180100]<0>(&v17, "not initialized");
    DSPGraph::ThrowException(1768843553, &v19, 422, &v18, &v17);
  }
  v7 = a3;
  v8 = a2;
  if (a2 == a3 && !this[47].n128_u8[11])
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "preflight");
    std::string::basic_string[abi:ne180100]<0>(&v17, "input and output data are identical, but graph cannot process in-place");
    DSPGraph::ThrowException(1768975393, &v19, 427, &v18, &v17);
  }
  result = this[45];
  if (!this[47].n128_u8[8])
  {
    if (a4 && this[43].n128_u32[0] != a4 || a5 && this[43].n128_u32[1] != a5)
    {
      std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v18, "preflight");
      std::string::basic_string[abi:ne180100]<0>(&v17, "the slice duration cannot vary, yet a different duration was supplied to preflight.");
      DSPGraph::ThrowException(1718775073, &v19, 445, &v18, &v17);
    }
    goto LABEL_14;
  }
  if (!a4 || !a5)
  {
LABEL_14:
    v11 = this[44].n128_u64[1];
    this[45].n128_u64[1] = v11;
    goto LABEL_15;
  }
  v11 = this[43].n128_u64[1] * a4 / a5;
  this[45].n128_u64[1] = v11;
  if ((a6 & 1) == 0 && v11 > this[44].n128_u64[1])
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "preflight");
    std::string::basic_string[abi:ne180100]<0>(&v17, "preflight slice duration is greater than the graph's maximum slice duration.");
    DSPGraph::ThrowException(1718775073, &v19, 437, &v18, &v17);
  }
LABEL_15:
  v16 = result;
  this[45].n128_u64[0] = v11;
  if (((this[18].n128_u64[0] - this[17].n128_u64[1]) & 0x7FFFFFFF8) != 0)
  {
    v12 = 0;
    do
    {
      v13 = (DSPGraph::GraphInput *)DSPGraph::Graph::in((DSPGraph::Graph *)this, v12);
      *v8 = DSPGraph::GraphInput::preflight(v13);
      v8 += 20;
      ++v12;
    }
    while (v12 < ((this[18].n128_u64[0] - this[17].n128_u64[1]) >> 3));
  }
  if (((this[19].n128_u64[1] - this[19].n128_u64[0]) & 0x7FFFFFFF8) != 0)
  {
    v14 = 0;
    do
    {
      v15 = (DSPGraph::GraphOutput *)DSPGraph::Graph::out((DSPGraph::Graph *)this, v14);
      *v7 = DSPGraph::GraphOutput::preflight(v15);
      v7 += 20;
      ++v14;
    }
    while (v14 < ((this[19].n128_u64[1] - this[19].n128_u64[0]) >> 3));
  }
  if ((a6 & 1) != 0)
  {
    result = v16;
    this[45] = v16;
  }
  return result;
}

void sub_18EE15D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

_QWORD *DSPGraph::Graph::processMultiple(DSPGraph::Graph *this, unsigned int *a2, unsigned int *a3)
{
  unint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  unsigned int *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (!*((_BYTE *)this + 762))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "processMultiple");
    std::string::basic_string[abi:ne180100]<0>(&v11, "not initialized");
    DSPGraph::ThrowException(1768843553, &v13, 576, &v12, &v11);
  }
  if (*((_BYTE *)this + 764))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "processMultiple");
    std::string::basic_string[abi:ne180100]<0>(&v11, "Graph::processMultiple. Graph must be processed in-place");
    DSPGraph::ThrowException(1836084257, &v13, 580, &v12, &v11);
  }
  if (((*((_QWORD *)this + 36) - *((_QWORD *)this + 35)) & 0x7FFFFFFF8) != 0)
  {
    v6 = 0;
    v7 = a2;
    do
    {
      *(_QWORD *)(DSPGraph::Graph::in(this, v6++) + 848) = v7;
      v7 += 20;
    }
    while (v6 < ((*((_QWORD *)this + 36) - *((_QWORD *)this + 35)) >> 3));
  }
  if (((*((_QWORD *)this + 39) - *((_QWORD *)this + 38)) & 0x7FFFFFFF8) != 0)
  {
    v8 = 0;
    v9 = a3;
    do
    {
      *(_QWORD *)(DSPGraph::Graph::out(this, v8++) + 848) = v9;
      v9 += 20;
    }
    while (v8 < ((*((_QWORD *)this + 39) - *((_QWORD *)this + 38)) >> 3));
  }
  DSPGraph::Graph::checkCurSliceTicks((uint64_t)this, a2, a3);
  DSPGraph::Graph::processAll(this);
  return DSPGraph::Graph::propagateFlagsAndTimeStamp(this, (uint64_t)a3);
}

void sub_18EE15F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::checkCurSliceTicks(uint64_t this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  int v9;
  DSPGraph::GraphInput *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  int v15;
  DSPGraph::GraphOutput *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int *v22;
  _DWORD *v23;
  unint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unsigned int *v32;
  _DWORD *v33;
  unsigned int *v34;
  unint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  DSPGraph::GraphInput *v42;
  uint64_t v43;
  uint64_t v44;
  DSPGraph::GraphOutput *v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v5 = this;
  if (*(_BYTE *)(this + 760))
  {
    v6 = *(_QWORD *)(this + 728);
    if (!v6)
    {
      std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v50, "checkCurSliceTicks");
      std::string::basic_string[abi:ne180100]<0>(&v49, "preflighting is required if slice duration can vary.");
      DSPGraph::ThrowException(1718775073, &v51, 471, &v50, &v49);
    }
  }
  else
  {
    v6 = *(_QWORD *)(this + 712);
  }
  *(_QWORD *)(this + 720) = v6;
  *(_QWORD *)(this + 728) = 0;
  if (((*(_QWORD *)(this + 288) - *(_QWORD *)(this + 280)) & 0x7FFFFFFF8) != 0)
  {
    v7 = 0;
    v8 = a2;
    do
    {
      v9 = *v8;
      v10 = (DSPGraph::GraphInput *)DSPGraph::Graph::in((DSPGraph::Graph *)v5, v7);
      this = DSPGraph::GraphInput::preflight(v10);
      if (v9 != (_DWORD)this)
      {
        std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v50, "checkCurSliceTicks");
        v41 = *v8;
        v42 = (DSPGraph::GraphInput *)DSPGraph::Graph::in((DSPGraph::Graph *)v5, v7);
        v43 = DSPGraph::GraphInput::preflight(v42);
        DSPGraph::strprintf((DSPGraph *)"input %u packet count %u is inconsistent with preflight %u", &v49, v7, v41, v43);
        DSPGraph::ThrowException(1718775073, &v51, 483, &v50, &v49);
      }
      ++v7;
      v8 += 20;
    }
    while (v7 < ((*(_QWORD *)(v5 + 288) - *(_QWORD *)(v5 + 280)) >> 3));
  }
  v12 = *(_QWORD *)(v5 + 304);
  v11 = *(_QWORD *)(v5 + 312);
  if (((v11 - v12) & 0x7FFFFFFF8) != 0)
  {
    v13 = 0;
    v14 = a3;
    do
    {
      v15 = *v14;
      v16 = (DSPGraph::GraphOutput *)DSPGraph::Graph::out((DSPGraph::Graph *)v5, v13);
      this = DSPGraph::GraphOutput::preflight(v16);
      if (v15 != (_DWORD)this)
      {
        std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v50, "checkCurSliceTicks");
        v44 = *v14;
        v45 = (DSPGraph::GraphOutput *)DSPGraph::Graph::out((DSPGraph::Graph *)v5, v13);
        v46 = DSPGraph::GraphOutput::preflight(v45);
        DSPGraph::strprintf((DSPGraph *)"output %u frame count %u is inconsistent with preflight %u", &v49, v13, v44, v46);
        DSPGraph::ThrowException(1718775073, &v51, 488, &v50, &v49);
      }
      ++v13;
      v12 = *(_QWORD *)(v5 + 304);
      v11 = *(_QWORD *)(v5 + 312);
      v14 += 20;
    }
    while (v13 < ((unint64_t)(v11 - v12) >> 3));
  }
  if (*(_BYTE *)(v5 + 766))
  {
    if (a2 == a3)
    {
      if (!*(_BYTE *)(v5 + 763))
      {
        std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v50, "checkCurSliceTicks");
        std::string::basic_string[abi:ne180100]<0>(&v49, "graph cannot process in-place.");
        DSPGraph::ThrowException(1768975393, &v51, 497, &v50, &v49);
      }
    }
    else
    {
      v18 = *(_QWORD *)(v5 + 280);
      v17 = *(_QWORD *)(v5 + 288);
      if (((v17 - v18) & 0x7FFFFFFF8) != 0)
      {
        v47 = a3;
        v19 = 0;
        v20 = 0;
        v21 = 1;
        do
        {
          v22 = &a2[20 * v19];
          if ((v21 & 1) != 0)
          {
            v20 = *v22;
          }
          else if (*v22 != (_DWORD)v20)
          {
            std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v50, "checkCurSliceTicks");
            DSPGraph::strprintf((DSPGraph *)"number of frames are different in different ports though the sample rates are the same. %u %u", &v49, *v22, v20);
            DSPGraph::ThrowException(1718775073, &v51, 506, &v50, &v49);
          }
          v23 = *(_DWORD **)&a2[20 * v19 + 18];
          if (*v23)
          {
            v24 = 0;
            v25 = v23 + 3;
            do
            {
              v26 = DSPGraph::Graph::in((DSPGraph::Graph *)v5, v19);
              v27 = *v22;
              v28 = v27 / (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 672))(v26);
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 656))(v26);
              v29 = this * v28;
              if (*v25 < v29)
              {
                std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v50, "checkCurSliceTicks");
                DSPGraph::strprintf((DSPGraph *)"AudioBufferList mDataByteSize is too small for the number of packets for input %u.  mDataByteSize %u   expectedByteSize %u", &v49, v19, *v25, v29);
                DSPGraph::ThrowException(1718775073, &v51, 514, &v50, &v49);
              }
              ++v24;
              v25 += 4;
            }
            while (v24 < *v23);
            v18 = *(_QWORD *)(v5 + 280);
            v17 = *(_QWORD *)(v5 + 288);
          }
          v21 = 0;
          ++v19;
        }
        while (v19 < ((unint64_t)(v17 - v18) >> 3));
        v48 = v20;
        v12 = *(_QWORD *)(v5 + 304);
        v11 = *(_QWORD *)(v5 + 312);
        v30 = 1;
        a3 = v47;
        goto LABEL_29;
      }
    }
    v48 = 0;
    v30 = 0;
LABEL_29:
    if (((v11 - v12) & 0x7FFFFFFF8) != 0)
    {
      v31 = 0;
      do
      {
        v32 = &a3[20 * v31];
        if (v30)
        {
          if (*v32 != (_DWORD)v48)
          {
            std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v50, "checkCurSliceTicks");
            DSPGraph::strprintf((DSPGraph *)"number of frames are different in different ports though the sample rates are the same. %u %u", &v49, *v32, v48);
            DSPGraph::ThrowException(1718775073, &v51, 525, &v50, &v49);
          }
        }
        else
        {
          v48 = *v32;
        }
        v33 = *(_DWORD **)&a3[20 * v31 + 18];
        if (*v33)
        {
          v34 = a3;
          v35 = 0;
          v36 = v33 + 3;
          do
          {
            v37 = DSPGraph::Graph::out((DSPGraph::Graph *)v5, v31);
            v38 = *v32;
            v39 = v38 / (*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 672))(v37);
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 656))(v37);
            v40 = this * v39;
            if (*v36 < v40)
            {
              std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v50, "checkCurSliceTicks");
              DSPGraph::strprintf((DSPGraph *)"AudioBufferList mDataByteSize is too small for the number of frames for output %u.  mDataByteSize %u   expectedByteSize %u", &v49, v31, *v36, v40);
              DSPGraph::ThrowException(1718775073, &v51, 533, &v50, &v49);
            }
            ++v35;
            v36 += 4;
          }
          while (v35 < *v33);
          v12 = *(_QWORD *)(v5 + 304);
          v11 = *(_QWORD *)(v5 + 312);
          a3 = v34;
        }
        ++v31;
        v30 = 1;
      }
      while (v31 < ((unint64_t)(v11 - v12) >> 3));
    }
  }
  return this;
}

void sub_18EE16558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::in(DSPGraph::Graph *this, unsigned int a2)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *((_QWORD *)this + 35);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 36) - v2) >> 3))
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "in");
    std::string::basic_string[abi:ne180100]<0>(&v4, "Graph::in inIndex out of range");
    DSPGraph::ThrowException(1919837985, &v6, 1355, &v5, &v4);
  }
  return *(_QWORD *)(v2 + 8 * a2);
}

void sub_18EE16680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::out(DSPGraph::Graph *this, unsigned int a2)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *((_QWORD *)this + 38);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 39) - v2) >> 3))
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "out");
    std::string::basic_string[abi:ne180100]<0>(&v4, "Graph::out inIndex out of range");
    DSPGraph::ThrowException(1919837985, &v6, 1364, &v5, &v4);
  }
  return *(_QWORD *)(v2 + 8 * a2);
}

void sub_18EE16754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GraphInput::bytesPerPacket(DSPGraph::GraphInput *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "out");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1434, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 16);
}

void sub_18EE16858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GraphOutput::bytesPerPacket(DSPGraph::GraphOutput *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 64;
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "in");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1426, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 16);
}

void sub_18EE1695C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

OSStatus AudioConverterFillComplexBuffer(AudioConverterRef inAudioConverter, AudioConverterComplexInputDataProc inInputDataProc, void *inInputDataProcUserData, UInt32 *ioOutputDataPacketSize, AudioBufferList *outOutputData, AudioStreamPacketDescription *outPacketDescription)
{
  _QWORD v7[5];
  uint64_t (*v8[3])(uint64_t, uint64_t);
  AudioStreamPacketDescription *v9;
  AudioBufferList *v10;
  UInt32 *v11;
  void *v12;
  AudioConverterComplexInputDataProc v13;

  v12 = inInputDataProcUserData;
  v13 = inInputDataProc;
  v10 = outOutputData;
  v11 = ioOutputDataPacketSize;
  v9 = outPacketDescription;
  v7[0] = &v13;
  v7[1] = &v12;
  v7[2] = &v11;
  v7[3] = &v10;
  v7[4] = &v9;
  v8[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterFillComplexBuffer::$_0>;
  v8[1] = (uint64_t (*)(uint64_t, uint64_t))v7;
  return with_resolved((int)inAudioConverter, v8);
}

uint64_t *AT::RingBuffer::GetTimeBounds@<X0>(AT::RingBuffer *this@<X0>, uint64_t *a2@<X8>)
{
  return AT::RingBuffer::Impl::GetTimeBounds(a2, *((_QWORD *)this + 6));
}

OSStatus AudioUnitRender(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inOutputBusNumber, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  uint64_t v7;
  uint64_t v8;
  RenderContextChangeGenerator *v11;
  RenderContextChangeGenerator *v12;
  uint64_t v13;
  uint64_t (*v14)(id, AudioUnitRenderActionFlags *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *);
  uint64_t v16;

  if (!inUnit)
    return -50;
  v7 = *(_QWORD *)&inNumberFrames;
  v8 = *(_QWORD *)&inOutputBusNumber;
  v11 = (RenderContextChangeGenerator *)(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v11)
    return 560947818;
  v12 = v11;
  if (*(_WORD *)((*(uint64_t (**)(RenderContextChangeGenerator *))v11->mLastWorkgroup)(v11) + 38) != 24949)
    return -3000;
  v13 = *(_QWORD *)((*(uint64_t (**)(RenderContextChangeGenerator *))v12->mLastWorkgroup)(v12) + 112);
  v14 = *(uint64_t (**)(id, AudioUnitRenderActionFlags *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))(v13 + 112);
  if (!v14)
    return -4;
  if (LOBYTE(v12[3].mLastWorkgroup))
  {
    v16 = v13;
    RenderContextChangeGenerator::checkChange(v12 + 2);
    v14 = *(uint64_t (**)(id, AudioUnitRenderActionFlags *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))(v16 + 112);
  }
  return v14(v12[1].mObserver, ioActionFlags, inTimeStamp, v8, v7, ioData);
}

uint64_t acv2::CodecConverterFactory::GetAvailableEncodeSampleRatesInfo(AudioComponent *this, unsigned int *a2)
{
  uint64_t PropertyInfo;
  Boolean outWritable;
  AudioComponentInstance outInstance;

  outInstance = 0;
  PropertyInfo = AudioComponentInstanceNew(this[4], &outInstance);
  if (!(_DWORD)PropertyInfo)
  {
    outWritable = 0;
    PropertyInfo = AudioCodecGetPropertyInfo(outInstance, 0x616F7372u, a2, &outWritable);
    AudioComponentInstanceDispose(outInstance);
  }
  return PropertyInfo;
}

void acv2::Resampler2Wrapper::~Resampler2Wrapper(const std::__fs::filesystem::path **this)
{
  void **v2;
  void **v3;

  *this = (const std::__fs::filesystem::path *)&off_1E290A970;
  v2 = (void **)(this + 3);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100](this + 8, 0);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100](this + 7, 0);
  v3 = v2;
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  acv2::Resampler2Wrapper::~Resampler2Wrapper(this);
  JUMPOUT(0x193FFE460);
}

void acv2::Reinterleaver::~Reinterleaver(acv2::Reinterleaver *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E290A410;
  v2 = (void *)*((_QWORD *)this + 30);
  if (v2)
  {
    *((_QWORD *)this + 31) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 27);
  if (v3)
  {
    *((_QWORD *)this + 28) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 24);
  if (v4)
  {
    *((_QWORD *)this + 25) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 21);
  if (v5)
  {
    *((_QWORD *)this + 22) = v5;
    operator delete(v5);
  }
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E290A410;
  v2 = (void *)*((_QWORD *)this + 30);
  if (v2)
  {
    *((_QWORD *)this + 31) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 27);
  if (v3)
  {
    *((_QWORD *)this + 28) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 24);
  if (v4)
  {
    *((_QWORD *)this + 25) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 21);
  if (v5)
  {
    *((_QWORD *)this + 22) = v5;
    operator delete(v5);
  }
  acv2::AudioConverterBase::~AudioConverterBase(this);
}

void acv2::AudioConverterBase::~AudioConverterBase(acv2::AudioConverterBase *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E290A9F0;
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)this + 19, 0);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  std::unique_ptr<ACAudioSpan>::reset[abi:ne180100]((std::pmr ***)this + 14, 0);
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    std::default_delete<ACSpanningInputBuffer>::operator()[abi:ne180100](v2);
}

void acv2::CodecConverter::~CodecConverter(acv2::CodecConverter *this)
{
  OpaqueAudioComponentInstance *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  const void *v8;

  *(_QWORD *)this = &off_1E290A4C8;
  v2 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
  if (v2)
  {
    AudioCodecUninitialize(v2);
    AudioComponentInstanceDispose(*((AudioComponentInstance *)this + 21));
  }
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)this + 106, 0);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)this + 105, 0);
  v3 = (void *)*((_QWORD *)this + 97);
  if (v3)
  {
    *((_QWORD *)this + 98) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 94);
  if (v4)
  {
    *((_QWORD *)this + 95) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 91);
  if (v5)
  {
    *((_QWORD *)this + 92) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::__optional_destruct_base<ACCodecOutputBuffer,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 392);
  v7 = (void *)*((_QWORD *)this + 41);
  if (v7)
  {
    *((_QWORD *)this + 42) = v7;
    operator delete(v7);
  }
  if (*((_BYTE *)this + 320))
    ACAudioSpan::~ACAudioSpan((std::pmr **)this + 27);
  v8 = (const void *)*((_QWORD *)this + 26);
  if (v8)
    CFRelease(v8);
  acv2::AudioConverterBase::~AudioConverterBase(this);
}

{
  acv2::CodecConverter::~CodecConverter(this);
  JUMPOUT(0x193FFE460);
}

uint64_t acv2::ConverterRegistry::MakeFactories(acv2::ConverterRegistry *this, const AudioClassDescription *a2, int a3, double a4)
{
  OpaqueAudioComponent *v6;
  char v7;
  uint64_t v8;
  AudioComponent Next;
  uint64_t (***v10)(_QWORD);
  uint64_t v11;
  OSType v12;
  int v13;
  OSType v14;
  uint64_t i;
  _DWORD *v16;
  acv2::CodecConverterFactory *v17;
  void (**v18)(acv2::CodecDecoderFactory *__hidden);
  CFTypeRef cf;
  uint64_t v21;
  AudioComponentDescription inDesc;
  AudioComponentDescription v23;

  v6 = 0;
  v7 = 0;
  *(double *)&inDesc.componentType = a4;
  inDesc.componentFlags = 0;
  inDesc.componentFlagsMask = 0;
  inDesc.componentManufacturer = a2;
  v8 = v21;
LABEL_2:
  while (2)
  {
    Next = AudioComponentFindNext(v6, &inDesc);
    if (Next
      && (v6 = Next,
          (v10 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(AudioComponent))Next)(Next)) != 0))
    {
      v11 = (**v10)(v10);
      v13 = *(_DWORD *)(v11 + 36);
      v12 = *(_DWORD *)(v11 + 40);
      v14 = *(_DWORD *)(v11 + 44);
      v8 = *(_QWORD *)(v11 + 48);
      cf = 0;
      if (!Impl_AudioGetComponentInfo(v6, 0, (const __CFString **)&cf))
      {
        for (i = *((_QWORD *)this + 1); i != *((_QWORD *)this + 2); i += 8)
        {
          v16 = *(_DWORD **)i;
          if (*(_DWORD *)(*(_QWORD *)i + 12) == a3
            && (!v13 || v16[4] == v13)
            && (!v12 || v16[5] == v12)
            && (!v14 || v16[6] == v14))
          {
            if (cf)
              CFRelease(cf);
            goto LABEL_2;
          }
        }
        if (v13 == 1634037347)
        {
          v17 = (acv2::CodecConverterFactory *)operator new();
          v23.componentType = 1634037347;
          v23.componentSubType = v12;
          v23.componentManufacturer = v14;
          *(_QWORD *)&v23.componentFlags = v8;
          acv2::CodecConverterFactory::CodecConverterFactory(v17, 1819304813, v12, v6, &v23, cf);
          v18 = &off_1E290AC00;
        }
        else
        {
          if (v13 != 1633969507)
          {
LABEL_20:
            v7 = 1;
            continue;
          }
          v17 = (acv2::CodecConverterFactory *)operator new();
          v23.componentType = 1633969507;
          v23.componentSubType = v12;
          v23.componentManufacturer = v14;
          *(_QWORD *)&v23.componentFlags = v8;
          acv2::CodecConverterFactory::CodecConverterFactory(v17, v12, a3, v6, &v23, cf);
          v18 = &off_1E290AB70;
        }
        *(_QWORD *)v17 = v18;
        acv2::ConverterRegistry::AddFactory(this, v17);
        goto LABEL_20;
      }
      v21 = v8;
      if (cf)
        CFRelease(cf);
    }
    else
    {
      v21 = v8;
    }
    return v7 & 1;
  }
}

void sub_18EE16FD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10E1C40DADF1D27);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_FormatList(const AudioFormatInfo *a1, unsigned int a2, unsigned int *a3, AudioFormatListItem *a4)
{
  uint64_t result;
  AudioFormatListItem *v6;
  int v8;
  int v9;
  void *mMagicCookie;
  UInt32 mMagicCookieSize;
  unint64_t v12;
  unsigned int v13;
  AudioStreamBasicDescription v14;
  AudioFormatInfo v15;
  unsigned int v16;

  if (*a3 < 0x30)
    return 561211770;
  v6 = a4;
  if (a1->mASBD.mFormatID == 1836069985)
  {
    v16 = 0;
    v8 = FormatFromESDS((unsigned __int8 *)a1->mMagicCookie, a1->mMagicCookieSize, &v16);
    if (v16)
    {
      v9 = v8;
      memset(&v15, 0, 40);
      mMagicCookie = (void *)a1->mMagicCookie;
      v15.mMagicCookie = mMagicCookie;
      mMagicCookieSize = a1->mMagicCookieSize;
      v15.mMagicCookieSize = mMagicCookieSize;
      if (v9)
      {
        v13 = 40;
        memset(&v14, 0, sizeof(v14));
        result = AudioFormatProperty_AudioFormatInfoFromESDS((unsigned __int8 *)mMagicCookie, mMagicCookieSize, &v13, &v14);
        if ((_DWORD)result)
          return result;
        v15.mASBD.mFormatID = v14.mFormatID;
      }
      else
      {
        v15.mASBD.mFormatID = v16;
      }
      return AudioFormatProperty_FormatList(&v15, 0x38u, a3, v6);
    }
    else
    {
      return 560360820;
    }
  }
  else
  {
    result = FetchFormatListFromCodecs((uint64_t (*)(void))GetFormatListFromCodec, a1, a2, a3, a4);
    if (!(_DWORD)result)
    {
      if (v6)
      {
        if (*a3 >= 0x30)
        {
          v12 = *a3 / 0x30uLL;
          result = 0;
          do
          {
            if (v6->mASBD.mSampleRate == 0.0)
              v6->mASBD.mSampleRate = a1->mASBD.mSampleRate;
            if (!v6->mASBD.mChannelsPerFrame)
              v6->mASBD.mChannelsPerFrame = a1->mASBD.mChannelsPerFrame;
            ++v6;
            --v12;
          }
          while (v12);
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 2003329396;
      }
    }
  }
  return result;
}

OSStatus AudioFormatGetPropertyInfo(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *outPropertyDataSize)
{
  int8x8_t v4;
  const void **v6;
  uint64_t v7;
  OSStatus DecoderSpecificBitStreamFromESDS;
  int v10;
  int v11;
  AudioCodecPropertyID v12;
  uint64_t v13;
  OSStatus v14;
  UInt32 v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  AudioChannelFlags v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v26;
  UInt32 v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  AudioChannelLayoutTag v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  UInt32 v36;
  UInt32 v37;
  uint64_t v39;
  UInt32 v40;
  uint64_t v41;
  uint64_t v42;
  OSStatus v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  AudioChannelLayoutTag mChannelLayoutTag;
  uint64_t v51;
  uint64_t v52;
  int64x2_t v53;
  int32x4_t v54;
  int64x2_t v55;
  int32x4_t v56;
  uint64_t v57;
  int64x2_t v58;
  int8x16_t v59;
  int64x2_t v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  size_t v71;
  _BYTE *v72;
  int v73;
  char v74;
  int v75;
  int v76;
  int v77;
  UInt32 v78;
  int v79;
  _QWORD v81[2];
  uint64_t v82;
  AudioStreamBasicDescription v83;
  AudioChannelLayout v84[9];
  _DWORD v85[298];
  uint64_t v86;
  uint64_t v87;
  AudioChannelLayout v88[37];
  uint64_t v89;
  _QWORD v90[3];

  v90[2] = *MEMORY[0x1E0C80C00];
  if (!outPropertyDataSize)
    return -50;
  v6 = (const void **)inSpecifier;
  v7 = *(_QWORD *)&inSpecifierSize;
  DecoderSpecificBitStreamFromESDS = 1886547824;
  if ((int)inPropertyID > 1702060907)
  {
    if ((int)inPropertyID <= 1819242092)
    {
      if ((int)inPropertyID > 1719034481)
      {
        if ((int)inPropertyID <= 1768187245)
        {
          if ((int)inPropertyID > 1768174435)
          {
            if (inPropertyID == 1768174436)
              goto LABEL_199;
            if (inPropertyID == 1768174451)
              goto LABEL_195;
            if (inPropertyID != 1768186734)
              return DecoderSpecificBitStreamFromESDS;
            if (!inSpecifier)
              return -50;
            DecoderSpecificBitStreamFromESDS = 561213539;
            if (inSpecifierSize < 8 || (unint64_t)*((unsigned int *)inSpecifier + 1) + 8 > inSpecifierSize)
              return DecoderSpecificBitStreamFromESDS;
            return AudioFormatProperty_DecodeFormatIDsForCodingName((int *)inSpecifier, outPropertyDataSize, 0);
          }
          if (inPropertyID == 1719034482)
            goto LABEL_195;
          if (inPropertyID == 1752589411)
          {
LABEL_167:
            DecoderSpecificBitStreamFromESDS = 0;
            *outPropertyDataSize = 0;
            return DecoderSpecificBitStreamFromESDS;
          }
          v11 = 1752589667;
LABEL_166:
          if (inPropertyID != v11)
            return DecoderSpecificBitStreamFromESDS;
          goto LABEL_167;
        }
        if ((int)inPropertyID <= 1769172322)
        {
          if (inPropertyID == 1768187246)
          {
            if (inSpecifier)
            {
              DecoderSpecificBitStreamFromESDS = 561213539;
              if (inSpecifierSize >= 8 && (unint64_t)*((unsigned int *)inSpecifier + 1) + 8 <= inSpecifierSize)
                return AudioFormatProperty_DecodeFormatIDsForEncapsulatedMagicCookieName((int *)inSpecifier, outPropertyDataSize, 0);
              return DecoderSpecificBitStreamFromESDS;
            }
            return -50;
          }
          if (inPropertyID != 1768780388)
          {
            v29 = 1769170537;
            goto LABEL_194;
          }
          if (!inSpecifier)
            return -50;
          if (inSpecifierSize < 0x38)
            return 561213539;
          v12 = 1768780388;
          return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, outPropertyDataSize, 0, v12);
        }
        if (inPropertyID == 1769172323)
          return GetMagicCookieSizeFromISOSampleEntry((uint64_t)inSpecifier, inSpecifierSize, (int *)outPropertyDataSize);
        if (inPropertyID == 1818389604)
          goto LABEL_199;
        v35 = 1818520674;
LABEL_198:
        if (inPropertyID != v35)
          return DecoderSpecificBitStreamFromESDS;
        goto LABEL_199;
      }
      if ((int)inPropertyID <= 1717925989)
      {
        if ((int)inPropertyID <= 1702061672)
        {
          if (inPropertyID == 1702060908)
          {
            if (!inSpecifier)
              return -50;
            v43 = AudioFormatProperty_ChannelLayoutFromESDS((unsigned __int8 *)inSpecifier, inSpecifierSize, v84);
            goto LABEL_281;
          }
          if (inPropertyID != 1702061157)
            return DecoderSpecificBitStreamFromESDS;
          return AudioFormatProperty_ESDSFromESDSize((unsigned __int8 *)inSpecifier, inSpecifierSize, outPropertyDataSize);
        }
        if (inPropertyID == 1702061673)
        {
          DecoderSpecificBitStreamFromESDS = 0;
          v36 = 56;
          goto LABEL_200;
        }
        if (inPropertyID == 1702064996)
          goto LABEL_143;
        v29 = 1717855600;
LABEL_194:
        if (inPropertyID != v29)
          return DecoderSpecificBitStreamFromESDS;
        goto LABEL_195;
      }
      if ((int)inPropertyID <= 1718449256)
      {
        if (inPropertyID == 1717925990)
          goto LABEL_195;
        if (inPropertyID == 1718183273)
        {
          if (inSpecifierSize != 4)
            return 561213539;
          if (!inSpecifier)
            return -50;
          goto LABEL_199;
        }
        if (inPropertyID != 1718383476)
          return DecoderSpecificBitStreamFromESDS;
        if (!inSpecifier)
          return 2003329396;
        if (!inSpecifierSize)
          return 561213539;
        return AudioFormatProperty_FormatListSize((const AudioFormatInfo *)inSpecifier, inSpecifierSize, outPropertyDataSize);
      }
      if (inPropertyID != 1718449257)
      {
        if (inPropertyID == 1718509933)
          goto LABEL_199;
        v29 = 1718642284;
        goto LABEL_194;
      }
      goto LABEL_143;
    }
    if ((int)inPropertyID <= 1935893601)
    {
      if ((int)inPropertyID <= 1852008556)
      {
        if ((int)inPropertyID > 1835230309)
        {
          if (inPropertyID == 1835230310)
          {
            DecoderSpecificBitStreamFromESDS = 0;
            v36 = 50;
            goto LABEL_200;
          }
          if (inPropertyID != 1835230563)
          {
            if (inPropertyID != 1835884912)
              return DecoderSpecificBitStreamFromESDS;
            if (inSpecifierSize != 16)
              return 561213539;
            if (!inSpecifier)
              return -50;
            SanitizeClientAudioChannelLayout(v84, *(const void **)inSpecifier, 20 * *(_DWORD *)(*(_QWORD *)inSpecifier + 8) + 12);
            SanitizeClientAudioChannelLayout(v88, v6[1], 20 * *((_DWORD *)v6[1] + 2) + 12);
            v33 = *(_QWORD *)&v84[0].mChannelLayoutTag;
            v34 = *(_QWORD *)&v88[0].mChannelLayoutTag;
            LODWORD(v83.mSampleRate) = 0;
            DecoderSpecificBitStreamFromESDS = AudioFormatProperty_MatrixMixMap(*(const AudioChannelLayout *const **)&v84[0].mChannelLayoutTag, *(const AudioChannelLayout **)&v88[0].mChannelLayoutTag, (float *)&v83, 0);
            if (DecoderSpecificBitStreamFromESDS)
            {
              if (v34)
                (*(void (**)(uint64_t))&v88[0].mNumberChannelDescriptions)(v34);
              if (v33)
                (*(void (**)(uint64_t))&v84[0].mNumberChannelDescriptions)(v33);
              return DecoderSpecificBitStreamFromESDS;
            }
            *outPropertyDataSize = 4 * LODWORD(v83.mSampleRate);
            if (v34)
              (*(void (**)(uint64_t))&v88[0].mNumberChannelDescriptions)(v34);
            if (v33)
              (*(void (**)(uint64_t))&v84[0].mNumberChannelDescriptions)(v33);
            return 0;
          }
          if (!inSpecifier)
            return -50;
          if (inSpecifierSize < 0x18)
            return 561213539;
          return AudioFormatProperty_CanonicalMagicCookieFromEncapsulatedMagicCookie((unsigned int *)inSpecifier, outPropertyDataSize, 0);
        }
        if (inPropertyID == 1819242093)
          goto LABEL_199;
        v35 = 1819504237;
        goto LABEL_198;
      }
      if ((int)inPropertyID <= 1885433452)
      {
        if (inPropertyID == 1852008557 || inPropertyID == 1852992877)
          goto LABEL_195;
        if (inPropertyID != 1868983411)
          return DecoderSpecificBitStreamFromESDS;
        if (!inSpecifier)
          return 2003329396;
        if (!inSpecifierSize)
          return 561213539;
        *outPropertyDataSize = 0;
        return FetchFormatListFromCodecs((uint64_t (*)(void))GetOutputFormatListFromCodec, (const AudioFormatInfo *)inSpecifier, inSpecifierSize, outPropertyDataSize, 0);
      }
      if (inPropertyID == 1885433453)
      {
        if (inSpecifierSize != 32)
          return 561213539;
        if (!inSpecifier)
          return -50;
        v88[0].mChannelLayoutTag = 0;
        SanitizeClientAudioChannelLayout(v84, *((const void **)inSpecifier + 3), 20 * *(_DWORD *)(*((_QWORD *)inSpecifier + 3) + 8) + 12);
        v46 = *(_QWORD *)&v84[0].mChannelLayoutTag;
        DecoderSpecificBitStreamFromESDS = AudioFormatProperty_NumberOfChannelsForLayout(*(const AudioChannelLayout **)&v84[0].mChannelLayoutTag, &v88[0].mChannelLayoutTag);
        if (v46)
          (*(void (**)(uint64_t))&v84[0].mNumberChannelDescriptions)(v46);
LABEL_254:
        mChannelLayoutTag = v88[0].mChannelLayoutTag;
LABEL_292:
        v36 = 4 * mChannelLayoutTag;
        goto LABEL_200;
      }
      if (inPropertyID != 1885565796)
      {
        if (inPropertyID != 1886677364)
          return DecoderSpecificBitStreamFromESDS;
LABEL_142:
        DecoderSpecificBitStreamFromESDS = 0;
        v36 = 16;
        goto LABEL_200;
      }
LABEL_143:
      DecoderSpecificBitStreamFromESDS = 0;
      v36 = 40;
      goto LABEL_200;
    }
    if ((int)inPropertyID <= 1986946670)
    {
      if ((int)inPropertyID <= 1936745323)
      {
        if (inPropertyID == 1935893602)
          goto LABEL_195;
        if (inPropertyID == 1935962211)
        {
          DecoderSpecificBitStreamFromESDS = 0;
          v36 = 14;
          goto LABEL_200;
        }
        if (inPropertyID != 1936286825)
          return DecoderSpecificBitStreamFromESDS;
        if (inSpecifierSize < 0x38)
          return 561213539;
        if (!inSpecifier)
          return -50;
        v12 = 1936286825;
        return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, outPropertyDataSize, 0, v12);
      }
      if (inPropertyID == 1936745324)
      {
        if (inSpecifierSize < 0x20)
          return 561213539;
LABEL_299:
        if (!inSpecifier)
          return -50;
        goto LABEL_195;
      }
      if (inPropertyID == 1952540515)
      {
        if (inSpecifierSize != 4)
          return 561213539;
        if (!inSpecifier)
          return -50;
        v53 = (int64x2_t)xmmword_18F116E40;
        v54 = (int32x4_t)vld1q_dup_f32((const float *)inSpecifier);
        v55 = (int64x2_t)xmmword_18F116E50;
        v56 = 0uLL;
        v57 = 2u;
        v58 = vdupq_n_s64(0x31uLL);
        v59.i64[0] = 0xFFFF0000FFFFLL;
        v59.i64[1] = 0xFFFF0000FFFFLL;
        v60 = vdupq_n_s64(4uLL);
        do
        {
          v56 = vsubq_s32(v56, (int32x4_t)vbicq_s8((int8x16_t)vceqq_s32((int32x4_t)vandq_s8(*(int8x16_t *)&gAllLayoutTags[v57], v59), v54), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v55, v58), (int32x4_t)vceqq_s64(v53, v58))));
          v53 = vaddq_s64(v53, v60);
          v55 = vaddq_s64(v55, v60);
          v57 += 4;
        }
        while (v57 != 122);
        DecoderSpecificBitStreamFromESDS = 0;
        mChannelLayoutTag = vaddvq_s32(v56);
        goto LABEL_292;
      }
      v11 = 1986093932;
      goto LABEL_166;
    }
    if ((int)inPropertyID <= 2020107115)
    {
      if (inPropertyID == 1986946671)
      {
        if (!inSpecifier)
          return -50;
        if (inSpecifierSize < 0x38)
          return 561213539;
        if (*((_DWORD *)inSpecifier + 2) != 1987015266)
          return 1718449215;
        DecoderSpecificBitStreamFromESDS = 0;
        v36 = 24;
        goto LABEL_200;
      }
      if (inPropertyID != 1987076466)
      {
        v30 = 2020106611;
LABEL_98:
        if (inPropertyID != v30)
          return DecoderSpecificBitStreamFromESDS;
        goto LABEL_143;
      }
      if (!inSpecifier)
        return -50;
      if (inSpecifierSize < 0x38)
        return 561213539;
      v12 = 1987076466;
      return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, outPropertyDataSize, 0, v12);
    }
    if (inPropertyID == 2020107116)
    {
      DecoderSpecificBitStreamFromESDS = 0;
      v36 = 32;
      goto LABEL_200;
    }
    if (inPropertyID != 2020109667)
    {
      v29 = 2020110438;
      goto LABEL_194;
    }
    if (inSpecifierSize < 8)
      return 561213539;
    if (!inSpecifier)
      return -50;
    v62 = bswap32(*(_DWORD *)inSpecifier);
    if (v62 > 1902207330)
    {
      if (v62 > 2053202274)
      {
        if (v62 > 2053202791)
        {
          if (v62 == 2053202792)
            goto LABEL_363;
          if (v62 == 2053464883)
            goto LABEL_350;
          v64 = 2053202800;
          goto LABEL_353;
        }
        if (v62 == 2053202275)
          goto LABEL_363;
        v66 = 2053202739;
      }
      else
      {
        if (v62 > 1902207847)
        {
          if (v62 == 1902207848 || v62 == 1902207856)
            goto LABEL_363;
          v63 = 1902469939;
          goto LABEL_334;
        }
        if (v62 == 1902207331)
          goto LABEL_363;
        v66 = 1902207795;
      }
    }
    else
    {
      if (v62 <= 1885430114)
      {
        if (v62 > 1633772399)
        {
          if (v62 != 1633772400)
          {
            if (v62 != 1633889587)
            {
              v63 = 1700998451;
              goto LABEL_334;
            }
LABEL_362:
            DecoderSpecificBitStreamFromESDS = 0;
            v36 = 11;
            goto LABEL_200;
          }
LABEL_363:
          DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)v88);
          memset(&v83, 0, sizeof(v83));
          v67 = *((unsigned __int8 *)v6 + 7) + 2;
          MEMORY[0x1E0C80A78](v68);
          v70 = (char *)&v81[-1] - v69;
          bzero(v88, 0x4C8uLL);
          *v70 = 5;
          v71 = *((unsigned __int8 *)v6 + 7);
          v70[1] = v71;
          memcpy(v70 + 2, v6 + 1, v71);
          v72 = &v70[v67];
          v81[0] = v70;
          v81[1] = &v70[v67];
          v82 = 0;
          if ((v70 & 3) != 0)
          {
            v73 = 0;
            v74 = (_BYTE)v70 + 1;
            v75 = -8;
            do
            {
              v76 = v75;
              v77 = *v70++;
              v73 = v77 | (v73 << 8);
              v75 += 8;
              if ((v74 & 3) == 0)
                break;
              ++v74;
            }
            while (v70 < v72);
            v81[0] = v70;
            LODWORD(v82) = v73 << (24 - v75);
            HIDWORD(v82) = v76 + 16;
          }
          DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload((uint64_t)v88, (uint64_t)v81, 0);
          if (DecoderConfigDescr::GetASBD((DecoderConfigDescr *)v88, &v83))
            DecoderSpecificBitStreamFromESDS = 1718449215;
          else
            DecoderSpecificBitStreamFromESDS = 0;
          v88[0].mNumberChannelDescriptions = 64;
          *(_QWORD *)&v88[0].mChannelDescriptions[0].mChannelLabel = 5;
          v88[0].mChannelDescriptions[0].mCoordinates[2] = 0.0;
          *(_QWORD *)v88[0].mChannelDescriptions[0].mCoordinates = 6144 * v83.mChannelsPerFrame;
          DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)v85);
          MP4AudioESDS::SetDecoderConfigDescriptor((MP4AudioESDS *)v84, (const DecoderConfigDescr *)v88);
          if (v85[2] == 64)
            v78 = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount((DecoderConfigDescr *)v85) + 37;
          else
            v78 = 19;
          *outPropertyDataSize = v78;
          std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v87);
          std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v86);
          std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v90);
          std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v89);
          return DecoderSpecificBitStreamFromESDS;
        }
        if (v62 == 1633772320)
          goto LABEL_363;
        v64 = 1633772392;
LABEL_353:
        if (v62 != v64)
          goto LABEL_167;
        goto LABEL_363;
      }
      if (v62 > 1885430631)
      {
        if (v62 == 1885430632 || v62 == 1885430640)
          goto LABEL_363;
        v63 = 1885692723;
LABEL_334:
        if (v62 != v63)
          goto LABEL_167;
LABEL_350:
        DecoderSpecificBitStreamFromESDS = 0;
        v36 = *((unsigned __int8 *)inSpecifier + 7) + 8;
        goto LABEL_200;
      }
      if (v62 == 1885430115)
        goto LABEL_363;
      v66 = 1885430579;
    }
    if (v62 != v66)
      goto LABEL_167;
    goto LABEL_362;
  }
  if ((int)inPropertyID > 1668048488)
  {
    if ((int)inPropertyID > 1668509292)
    {
      if ((int)inPropertyID <= 1701014882)
      {
        if ((int)inPropertyID <= 1685218163)
        {
          if (inPropertyID == 1668509293)
            goto LABEL_199;
          if (inPropertyID != 1684235116)
          {
            if (inPropertyID != 1684369510)
              return DecoderSpecificBitStreamFromESDS;
            if (!inSpecifier)
              return -50;
            if (inSpecifierSize < 0x38)
              return 561213539;
            v12 = 1684369510;
            return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, outPropertyDataSize, 0, v12);
          }
          if (!inSpecifier)
            return -50;
          if (inSpecifierSize != 56)
            return 561213539;
          v16 = *((_DWORD *)inSpecifier + 12);
          v17 = (unsigned int *)*((_QWORD *)inSpecifier + 5);
          return AudioFormatProperty_ChannelLayoutSizeForISOChannelLayout(v16, v17, (uint64_t)inSpecifier, outPropertyDataSize, 0);
        }
        if (inPropertyID == 1685218164 || inPropertyID == 1685220460)
          goto LABEL_195;
        if (inPropertyID != 1685283692)
          return DecoderSpecificBitStreamFromESDS;
        if (inSpecifierSize != 4)
          return 561213539;
        if (!inSpecifier)
          return -50;
        DecoderSpecificBitStreamFromESDS = 0;
        v36 = 20;
LABEL_200:
        *outPropertyDataSize = v36;
        return DecoderSpecificBitStreamFromESDS;
      }
      if ((int)inPropertyID <= 1701147491)
      {
        if (inPropertyID == 1701014883)
        {
          if (!inSpecifier)
            return -50;
          if (inSpecifierSize >= 0x18)
            return AudioFormatProperty_EncapsulatedMagicCookieFromCanonicalMagicCookie((unsigned int *)inSpecifier, outPropertyDataSize, 0);
          return 561213539;
        }
        if (inPropertyID != 1701077868)
        {
          v30 = 1701081956;
          goto LABEL_98;
        }
        if (!inSpecifier)
          return -50;
        v43 = AudioFormatProperty_ChannelLayoutFromESD((unsigned __int8 *)inSpecifier, inSpecifierSize, v84);
LABEL_281:
        DecoderSpecificBitStreamFromESDS = v43;
        v36 = 32 * (v43 == 0);
        goto LABEL_200;
      }
      if (inPropertyID != 1701147492)
      {
        if (inPropertyID != 1701406313)
        {
          if (inPropertyID == 1701733230)
          {
            if (inSpecifier)
            {
              DecoderSpecificBitStreamFromESDS = 561213539;
              if (inSpecifierSize >= 8 && (unint64_t)*((unsigned int *)inSpecifier + 1) + 8 <= inSpecifierSize)
                return AudioFormatProperty_EncapsulatedMagicCookieNameForCodingName((int *)inSpecifier, outPropertyDataSize, 0);
              return DecoderSpecificBitStreamFromESDS;
            }
            return -50;
          }
          return DecoderSpecificBitStreamFromESDS;
        }
        if (inSpecifierSize != 8)
          return 561213539;
        goto LABEL_299;
      }
      return AudioFormatProperty_ESDFromESDSSize((unsigned __int8 *)inSpecifier, inSpecifierSize, outPropertyDataSize);
    }
    if ((int)inPropertyID > 1668116595)
    {
      if ((int)inPropertyID <= 1668180323)
      {
        if (inPropertyID == 1668116596)
          goto LABEL_195;
        if (inPropertyID == 1668178285)
          goto LABEL_199;
        if (inPropertyID != 1668178796)
          return DecoderSpecificBitStreamFromESDS;
        if (!inSpecifier)
          return -50;
        v16 = inSpecifierSize;
        v17 = (unsigned int *)inSpecifier;
        inSpecifier = 0;
        return AudioFormatProperty_ChannelLayoutSizeForISOChannelLayout(v16, v17, (uint64_t)inSpecifier, outPropertyDataSize, 0);
      }
      if (inPropertyID == 1668180324)
      {
        if (inSpecifierSize < 0xC)
          return 561213539;
        if (!inSpecifier)
          return -50;
        return AudioFormatProperty_CodingNameForDecodeFormatID((int *)inSpecifier, (int *)outPropertyDataSize, 0);
      }
      if (inPropertyID == 1668309350)
      {
        if (!inSpecifier)
          return -50;
        if (inSpecifierSize < 0x40)
          return 561213539;
        goto LABEL_199;
      }
      v29 = 1668446576;
      goto LABEL_194;
    }
    if ((int)inPropertyID > 1668113259)
    {
      switch(inPropertyID)
      {
        case 0x636D636Cu:
          goto LABEL_195;
        case 0x636D7062u:
          if (inSpecifierSize != 4)
            return 561213539;
          if (!inSpecifier)
            return -50;
          v44 = (*(_DWORD *)inSpecifier >> 11) & 0x800 | *(_DWORD *)inSpecifier & 0xFFA3FFFF | (*(_DWORD *)inSpecifier >> 6) & 0x7000;
          v84[0].mChannelLayoutTag = 0x10000;
          *(_QWORD *)&v84[0].mChannelBitmap = v44;
          break;
        case 0x636D706Cu:
          if (inSpecifierSize != 4)
            return 561213539;
          if (!inSpecifier)
            return -50;
          v32 = *(_DWORD *)inSpecifier;
          v84[0].mChannelBitmap = 0;
          v84[0].mNumberChannelDescriptions = 0;
          v84[0].mChannelLayoutTag = v32;
          break;
        default:
          return DecoderSpecificBitStreamFromESDS;
      }
      v88[0].mChannelLayoutTag = 0;
      DecoderSpecificBitStreamFromESDS = AudioFormatProperty_NumberOfChannelsForLayout(v84, &v88[0].mChannelLayoutTag);
      v36 = 20 * v88[0].mChannelLayoutTag + 12;
      goto LABEL_200;
    }
    if (inPropertyID != 1668048489)
    {
      v29 = 1668051811;
      goto LABEL_194;
    }
    if (inSpecifierSize < 0x38)
      return 561213539;
    if (!inSpecifier)
      return -50;
    v12 = 1868786720;
    return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, outPropertyDataSize, 0, v12);
  }
  if ((int)inPropertyID <= 1635148900)
  {
    if ((int)inPropertyID > 1634034289)
    {
      if ((int)inPropertyID <= 1634100077)
      {
        if (inPropertyID == 1634034290)
        {
          RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
          v45 = qword_1ECEF4E20;
          os_unfair_recursive_lock_lock_with_options();
          v14 = (*(uint64_t (**)(uint64_t, uint64_t, const void **, UInt32 *))(*(_QWORD *)v45 + 56))(v45, v7, v6, outPropertyDataSize);
          goto LABEL_270;
        }
        if (inPropertyID != 1634034540)
        {
          if (inPropertyID != 1634038642)
            return DecoderSpecificBitStreamFromESDS;
          if (inSpecifierSize != 4 || !inSpecifier || *(_DWORD *)inSpecifier != 1819304813)
          {
            RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
            v13 = qword_1ECEF4E20;
            os_unfair_recursive_lock_lock_with_options();
            v14 = (*(uint64_t (**)(uint64_t, uint64_t, const void **, UInt32 *))(*(_QWORD *)v13 + 64))(v13, v7, v6, outPropertyDataSize);
LABEL_270:
            DecoderSpecificBitStreamFromESDS = v14;
            os_unfair_recursive_lock_unlock();
            return DecoderSpecificBitStreamFromESDS;
          }
          goto LABEL_142;
        }
LABEL_201:
        if (inSpecifierSize == 40)
        {
          if (inSpecifier)
          {
            RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
            v41 = qword_1ECEF4E20;
            os_unfair_recursive_lock_lock_with_options();
            v14 = (*(uint64_t (**)(uint64_t, const void **, UInt32 *, BOOL))(*(_QWORD *)v41 + 72))(v41, v6, outPropertyDataSize, inPropertyID == 1634034540);
            goto LABEL_270;
          }
          return -50;
        }
        return 561213539;
      }
      if (inPropertyID != 1634100078)
      {
        if (inPropertyID != 1634100080)
        {
          v35 = 1634496373;
          goto LABEL_198;
        }
        if (!inSpecifier)
          return -50;
        if (inSpecifierSize < 0x10)
          return 561213539;
      }
LABEL_199:
      DecoderSpecificBitStreamFromESDS = 0;
      v36 = 8;
      goto LABEL_200;
    }
    if ((int)inPropertyID <= 1633906533)
    {
      if (inPropertyID == 1633776744)
        goto LABEL_195;
      if (inPropertyID != 1633904998)
        return DecoderSpecificBitStreamFromESDS;
      RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
      v39 = qword_1ECEF4E20;
      os_unfair_recursive_lock_lock_with_options();
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
    }
    else
    {
      if (inPropertyID != 1633906534)
      {
        if (inPropertyID != 1633969004)
        {
          v10 = 1633971811;
          goto LABEL_104;
        }
        goto LABEL_201;
      }
      RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
      v42 = qword_1ECEF4E20;
      os_unfair_recursive_lock_lock_with_options();
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42);
    }
    *outPropertyDataSize = v40;
    os_unfair_recursive_lock_unlock();
    return 0;
  }
  if ((int)inPropertyID > 1667786096)
  {
    if ((int)inPropertyID <= 1667788143)
    {
      if (inPropertyID != 1667786097 && inPropertyID != 1667786849)
      {
        if (inPropertyID != 1667787891)
          return DecoderSpecificBitStreamFromESDS;
        if (inSpecifierSize < 0x51)
          return 561213539;
        if (!inSpecifier)
          return -50;
        v18 = *((_QWORD *)inSpecifier + 10);
        v19 = *((unsigned int *)inSpecifier + 19);
        v20 = v18 + v19;
        *(_QWORD *)&v84[0].mChannelLayoutTag = v18;
        *(_QWORD *)&v84[0].mNumberChannelDescriptions = v18 + v19;
        *(_QWORD *)&v84[0].mChannelDescriptions[0].mChannelFlags = 0;
        if ((v18 & 3) != 0 && (_DWORD)v19)
        {
          v21 = 0;
          v22 = v18 + 1;
          v23 = -8;
          v24 = v22;
          do
          {
            LODWORD(v84[0].mChannelDescriptions[0].mCoordinates[0]) = v23 + 16;
            *(_QWORD *)&v84[0].mChannelLayoutTag = v24;
            v21 = *(unsigned __int8 *)(v24 - 1) | (v21 << 8);
            v84[0].mChannelDescriptions[0].mChannelFlags = v21;
            v23 += 8;
            if ((v22 & 3) == 0)
              break;
            LOBYTE(v22) = v22 + 1;
          }
          while (v24++ < v20);
          v84[0].mChannelDescriptions[0].mChannelFlags = v21 << (24 - v23);
        }
        v88[0].mChannelLayoutTag = v19;
        LODWORD(v83.mSampleRate) = 0;
        v26 = *((_DWORD *)inSpecifier + 2);
        v27 = 18;
        if (v26 > 1902207330)
        {
          if (v26 > 2053202274)
          {
            if (v26 > 2053202791)
            {
              if (v26 == 2053202792)
                goto LABEL_387;
              v27 = v19;
              if (v26 == 2053464883)
                goto LABEL_389;
              v65 = 2053202800;
              goto LABEL_377;
            }
            if (v26 == 2053202275)
              goto LABEL_387;
            v79 = 2053202739;
          }
          else
          {
            if (v26 > 1902207847)
            {
              if (v26 == 1902207848 || v26 == 1902207856)
                goto LABEL_387;
              v28 = 1902469939;
              goto LABEL_344;
            }
            if (v26 == 1902207331)
              goto LABEL_387;
            v79 = 1902207795;
          }
        }
        else
        {
          if (v26 <= 1885430114)
          {
            if (v26 > 1633772399)
            {
              if (v26 != 1633772400)
              {
                if (v26 == 1633889587)
                  goto LABEL_389;
                v28 = 1700998451;
                goto LABEL_344;
              }
LABEL_387:
              DecoderSpecificBitStreamFromESDS = ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS((uint64_t)v84, (int *)v88, (int *)&v83);
              if (DecoderSpecificBitStreamFromESDS)
                return DecoderSpecificBitStreamFromESDS;
              v27 = v88[0].mChannelLayoutTag + 8;
              goto LABEL_389;
            }
            if (v26 == 1633772320)
              goto LABEL_387;
            v65 = 1633772392;
LABEL_377:
            if (v26 != v65)
              goto LABEL_386;
            goto LABEL_387;
          }
          if (v26 > 1885430631)
          {
            if (v26 == 1885430632 || v26 == 1885430640)
              goto LABEL_387;
            v28 = 1885692723;
LABEL_344:
            v27 = v19;
            if (v26 != v28)
              goto LABEL_386;
            goto LABEL_389;
          }
          if (v26 == 1885430115)
            goto LABEL_387;
          v79 = 1885430579;
        }
        if (v26 != v79)
LABEL_386:
          v27 = 0;
LABEL_389:
        DecoderSpecificBitStreamFromESDS = 0;
        *outPropertyDataSize = v27;
        return DecoderSpecificBitStreamFromESDS;
      }
LABEL_195:
      DecoderSpecificBitStreamFromESDS = 0;
      v36 = 4;
      goto LABEL_200;
    }
    if (inPropertyID == 1667788144)
    {
      if (inSpecifierSize != 16)
        return 561213539;
      if (!inSpecifier)
        return -50;
      v88[0].mChannelLayoutTag = 0;
      SanitizeClientAudioChannelLayout(v84, *((const void **)inSpecifier + 1), 20 * *(_DWORD *)(*((_QWORD *)inSpecifier + 1) + 8) + 12);
      v49 = *(_QWORD *)&v84[0].mChannelLayoutTag;
      DecoderSpecificBitStreamFromESDS = AudioFormatProperty_NumberOfChannelsForLayout(*(const AudioChannelLayout **)&v84[0].mChannelLayoutTag, &v88[0].mChannelLayoutTag);
      if (!v49)
      {
LABEL_253:
        if (DecoderSpecificBitStreamFromESDS)
          return DecoderSpecificBitStreamFromESDS;
        goto LABEL_254;
      }
LABEL_252:
      (*(void (**)(uint64_t))&v84[0].mNumberChannelDescriptions)(v49);
      goto LABEL_253;
    }
    if (inPropertyID != 1668047725)
    {
      if (inPropertyID != 1668047726)
        return DecoderSpecificBitStreamFromESDS;
      if (!inSpecifier)
        return -50;
      v37 = AudioFormatProperty_ISOChannelLayoutSizeForChannelLayout((const AudioChannelLayout *)inSpecifier, inSpecifierSize, (unsigned __int8 *)v84);
LABEL_314:
      DecoderSpecificBitStreamFromESDS = 0;
      *outPropertyDataSize = v37;
      return DecoderSpecificBitStreamFromESDS;
    }
    if (inSpecifier)
    {
      if (inSpecifierSize == 4)
      {
        v61 = 0;
      }
      else
      {
        if (inSpecifierSize != 8)
          return 561213539;
        v61 = *((_DWORD *)inSpecifier + 1);
      }
      v37 = AudioFormatProperty_ChannelLayoutSizeForWAVEChannelMask(*(_DWORD *)inSpecifier, v61, v4);
      goto LABEL_314;
    }
    return 2003329396;
  }
  if ((int)inPropertyID > 1650551909)
  {
    if (inPropertyID != 1650551910)
    {
      if (inPropertyID != 1651340391)
      {
        if (inPropertyID != 1667523440)
          return DecoderSpecificBitStreamFromESDS;
        if (!inSpecifier)
          return -50;
        if (inSpecifierSize < 0x10)
          return 561213539;
      }
      goto LABEL_195;
    }
    if (inSpecifierSize != 24)
      return 561213539;
    if (!inSpecifier)
      return -50;
    v88[0].mChannelLayoutTag = 0;
    SanitizeClientAudioChannelLayout(v84, *((const void **)inSpecifier + 2), 20 * *(_DWORD *)(*((_QWORD *)inSpecifier + 2) + 8) + 12);
    v49 = *(_QWORD *)&v84[0].mChannelLayoutTag;
    DecoderSpecificBitStreamFromESDS = AudioFormatProperty_NumberOfChannelsForLayout(*(const AudioChannelLayout **)&v84[0].mChannelLayoutTag, &v88[0].mChannelLayoutTag);
    if (!v49)
      goto LABEL_253;
    goto LABEL_252;
  }
  if (inPropertyID == 1635148901)
  {
    if (inSpecifierSize == 4)
    {
      if (inSpecifier)
      {
        v47 = *(unsigned int *)inSpecifier;
        RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
        v48 = qword_1ECEF4E20;
        os_unfair_recursive_lock_lock_with_options();
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *))(*(_QWORD *)v48 + 32))(v48, v47, outPropertyDataSize);
        goto LABEL_270;
      }
      return -50;
    }
    return 561213539;
  }
  if (inPropertyID == 1635149166)
  {
    if (inSpecifierSize == 4)
    {
      if (inSpecifier)
      {
        v51 = *(unsigned int *)inSpecifier;
        RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
        v52 = qword_1ECEF4E20;
        os_unfair_recursive_lock_lock_with_options();
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *))(*(_QWORD *)v52 + 24))(v52, v51, outPropertyDataSize);
        goto LABEL_270;
      }
      return -50;
    }
    return 561213539;
  }
  v10 = 1635151459;
LABEL_104:
  if (inPropertyID == v10)
  {
    if (inSpecifierSize == 40)
    {
      if (inSpecifier)
      {
        RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
        v31 = qword_1ECEF4E20;
        os_unfair_recursive_lock_lock_with_options();
        v14 = (*(uint64_t (**)(uint64_t, const void **, UInt32 *, BOOL))(*(_QWORD *)v31 + 80))(v31, v6, outPropertyDataSize, inPropertyID == 1635151459);
        goto LABEL_270;
      }
      return -50;
    }
    return 561213539;
  }
  return DecoderSpecificBitStreamFromESDS;
}

void sub_18EE18964(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_18EE189E0(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    if (v4)
      (*(void (**)(uint64_t))(v2 + 1608))(v4);
    if (v3)
      (*(void (**)(uint64_t))(v2 + 88))(v3);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18EE18460);
  }
  JUMPOUT(0x18EE189D0);
}

void sub_18EE18A74(void *a1, int a2)
{
  if (a2)
  {
    os_unfair_recursive_lock_unlock();
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18EE18460);
  }
  JUMPOUT(0x18EE189D0);
}

void sub_18EE18A98(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18EE18460);
  }
  JUMPOUT(0x18EE189D0);
}

void sub_18EE18AA8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18EE18AB4);
  JUMPOUT(0x18EE189D0);
}

void sub_18EE18ADC()
{
  JUMPOUT(0x18EE189D0);
}

uint64_t FetchFormatListFromCodecs(uint64_t (*a1)(void), const AudioFormatInfo *a2, unsigned int a3, unsigned int *a4, AudioFormatListItem *a5)
{
  OpaqueAudioComponent *Next;
  uint64_t v9;
  OSType v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  signed int *p_mFormatID;
  char v19;
  int v21;
  AudioComponentInstance v22;
  AudioComponentInstance outInstance;
  AudioComponentDescription inDesc;
  int v25;

  v25 = 0;
  if (a3 < 0x40)
  {
    LODWORD(v22) = 1969977198;
    v10 = AudioFormatEncryptedFormatTranslator::DecryptFormatID(a2->mASBD.mFormatID, (int *)&v22);
    *(_QWORD *)&inDesc.componentType = 0;
    v11 = OpenCodecComponent(v10, (OpaqueAudioComponentInstance **)&inDesc, 0x61646563u);
    if ((_DWORD)v11)
      goto LABEL_6;
    outInstance = *(AudioComponentInstance *)&inDesc.componentType;
    v25 = *a4;
    v9 = a1();
    AudioCodecAutoDisposer::~AudioCodecAutoDisposer(&outInstance);
    if ((_DWORD)v9)
      return v9;
    if (!v25)
    {
LABEL_6:
      if (a5)
        v12 = *a4;
      else
        v12 = 0;
      v21 = v12;
      if (OpenCodecComponent(v10, (OpaqueAudioComponentInstance **)&inDesc, 0x61636463u))
      {
        v13 = 0;
        v14 = 1;
      }
      else
      {
        outInstance = *(AudioComponentInstance *)&inDesc.componentType;
        v9 = a1();
        AudioCodecAutoDisposer::~AudioCodecAutoDisposer(&outInstance);
        if ((_DWORD)v9)
          return v9;
        v14 = 0;
        v13 = v21;
      }
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    v15 = v13 + v25;
    *a4 = v15;
    if (a5)
    {
      v16 = (int)v22;
      if ((_DWORD)v22 != 1969977198 && v15 >= 0x30)
      {
        v17 = 0;
        p_mFormatID = (signed int *)&a5->mASBD.mFormatID;
        do
        {
          *p_mFormatID = AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(*p_mFormatID, v16);
          p_mFormatID += 12;
          ++v17;
        }
        while (v17 < *a4 / 0x30uLL);
      }
    }
    v19 = v14 ^ 1;
    if (!(_DWORD)v11)
      v19 = 1;
    v9 = v11;
    if ((v19 & 1) != 0)
      return 0;
  }
  else
  {
    inDesc.componentFlags = 0;
    inDesc.componentFlagsMask = 0;
    *(_QWORD *)&inDesc.componentType = *(_QWORD *)(&a2->mMagicCookieSize + 1);
    inDesc.componentManufacturer = HIDWORD(a2[1].mASBD.mSampleRate);
    Next = AudioComponentFindNext(0, &inDesc);
    if (Next && (outInstance = 0, !AudioComponentInstanceNew(Next, &outInstance)))
    {
      v22 = outInstance;
      v9 = a1();
      AudioCodecAutoDisposer::~AudioCodecAutoDisposer(&v22);
    }
    else
    {
      return 4294957891;
    }
  }
  return v9;
}

void sub_18EE18D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AudioCodecAutoDisposer::~AudioCodecAutoDisposer((OpaqueAudioComponentInstance **)va);
  _Unwind_Resume(a1);
}

void AudioCodecAutoDisposer::~AudioCodecAutoDisposer(OpaqueAudioComponentInstance **this)
{
  OpaqueAudioComponentInstance *v1;

  v1 = *this;
  if (v1)
    AudioComponentInstanceDispose(v1);
}

OSStatus AudioComponentInstanceDispose(AudioComponentInstance inInstance)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (!inInstance)
    return -50;
  v1 = (*(uint64_t (**)(AudioComponentInstance))(*(_QWORD *)inInstance + 8))(inInstance);
  if (!v1)
    return -50;
  v2 = (_QWORD *)v1;
  v3 = (void *)MEMORY[0x193FFEC70]();
  v4 = v2[3];
  if (v4)
    (*(void (**)(void))(v4 + 8))();
  v5 = (unsigned int *)(v2[1] + 136);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  (*(void (**)(_QWORD *))(*v2 + 24))(v2);
  objc_autoreleasePoolPop(v3);
  return 0;
}

void APComponentInstance::~APComponentInstance(RenderContextChangeGenerator *this)
{
  this->mLastWorkgroup = off_1E29079B0;
  APMIDIRouter::~APMIDIRouter((APMIDIRouter *)&this[5].mObserver);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&this[4]);
  if (LOBYTE(this[3].mLastWorkgroup))
    RenderContextChangeGenerator::~RenderContextChangeGenerator(this + 2);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&this->mObserver);
  JUMPOUT(0x193FFE460);
}

{
  this->mLastWorkgroup = off_1E29079B0;
  APMIDIRouter::~APMIDIRouter((APMIDIRouter *)&this[5].mObserver);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&this[4]);
  if (LOBYTE(this[3].mLastWorkgroup))
    RenderContextChangeGenerator::~RenderContextChangeGenerator(this + 2);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&this->mObserver);
}

void APMIDIRouter::~APMIDIRouter(APMIDIRouter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(char *))(*((_QWORD *)this + 17) + 24))((char *)this + 144);
  (*(void (**)(char *))(*((_QWORD *)this + 12) + 24))((char *)this + 104);
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x193FFE460](v2, 0x1000C40C4F964E4);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x193FFE460](v3, 0xC400A2AC0F1);

  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    MEMORY[0x193FFE460](v4, 0x1000C40F03D91BDLL);
}

uint64_t OpenCodecComponent(OSType a1, OpaqueAudioComponentInstance **a2, OSType a3)
{
  OpaqueAudioComponent *Next;
  OSStatus v5;
  unsigned int v6;
  AudioComponentDescription inDesc;

  inDesc.componentFlagsMask = 0;
  inDesc.componentType = a3;
  inDesc.componentSubType = a1;
  *(_QWORD *)&inDesc.componentManufacturer = 1634758764;
  Next = AudioComponentFindNext(0, &inDesc);
  if (!Next)
  {
    inDesc.componentManufacturer = 0;
    Next = AudioComponentFindNext(0, &inDesc);
    if (!Next)
      return 4294957891;
  }
  *a2 = 0;
  v5 = AudioComponentInstanceNew(Next, a2);
  if (*a2)
    v6 = 0;
  else
    v6 = -9405;
  if (v5)
    return 4294957891;
  else
    return v6;
}

AudioComponent AudioComponentFindNext(AudioComponent inComponent, const AudioComponentDescription *inDesc)
{
  OpaqueAudioComponent *v3;
  std::recursive_mutex *v5;
  uint64_t v6;
  AudioComponentDescription v7;

  if (!inDesc)
    return 0;
  v7 = *inDesc;
  if (inComponent)
  {
    if (!(**(uint64_t (***)(AudioComponent))inComponent)(inComponent))
      return 0;
  }
  GlobalComponentPluginMgr((uint64_t *)&v5);
  v3 = (OpaqueAudioComponent *)(*(uint64_t (**)(uint64_t, AudioComponent, AudioComponentDescription *))(*(_QWORD *)v6 + 40))(v6, inComponent, &v7);
  if (v5)
    std::recursive_mutex::unlock(v5);
  return v3;
}

void sub_18EE19030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9)
    std::recursive_mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t AudioComponentMgr_NSExtension::findNext(AudioComponentMgr_NSExtension *this, OpaqueAudioComponent *a2, const AudioClassDescription *a3)
{
  OSType mType;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  char *v10;
  uint64_t Next;
  os_log_t v13;
  _QWORD *v14;
  NSObject *v15;
  std::string *p_p;
  std::string __p;
  _DWORD buf[8];
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  mType = a3->mType;
  if (a3->mType)
    v7 = a3->mSubType == 0;
  else
    v7 = 1;
  v8 = v7 || a3->mManufacturer == 0;
  if (*((_BYTE *)this + 96))
    goto LABEL_16;
  v9 = 0;
  qmemcpy(buf, "cedacneaxruagruamruairuacedsmocs", sizeof(buf));
  v10 = (char *)v19;
  while (buf[v9] != mType)
  {
    if (++v9 == 8)
      goto LABEL_13;
  }
  v10 = (char *)&buf[v9];
LABEL_13:
  if (v10 - (char *)buf != 32)
  {
LABEL_16:
    Next = AudioComponentMgr_Base::findNext(this, a2, a3);
    if (!v8)
      return Next;
    goto LABEL_17;
  }
  if (v8)
  {
    (*(void (**)(AudioComponentMgr_NSExtension *, uint64_t, BOOL))(*(_QWORD *)this + 120))(this, 1, mType == 1635087216);
    Next = AudioComponentMgr_Base::findNext(this, a2, a3);
LABEL_17:
    if (!*((_BYTE *)this + 144) && a3->mType != 1633969507 && a3->mType != 1634037347)
    {
      if (gAudioComponentLogCategory)
      {
        v13 = *(os_log_t *)gAudioComponentLogCategory;
      }
      else
      {
        v14 = (_QWORD *)operator new();
        v14[1] = 0;
        v13 = os_log_create("com.apple.coreaudio", "audiocomp");
        *v14 = v13;
        gAudioComponentLogCategory = (uint64_t)v14;
      }
      v15 = objc_retainAutorelease(v13);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        to_string(a3, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        buf[0] = 136315650;
        *(_QWORD *)&buf[1] = "AudioComponentPluginMgr.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 906;
        HIWORD(buf[4]) = 2080;
        *(_QWORD *)&buf[5] = p_p;
        _os_log_impl(&dword_18EE07000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d First wildcard component search: %s", (uint8_t *)buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

      *((_BYTE *)this + 144) = 1;
    }
    return Next;
  }
  Next = AudioComponentMgr_Base::findNext(this, a2, a3);
  if (!Next)
  {
    (*(void (**)(AudioComponentMgr_NSExtension *, uint64_t, BOOL))(*(_QWORD *)this + 120))(this, 1, mType == 1635087216);
    return AudioComponentMgr_Base::findNext(this, a2, a3);
  }
  return Next;
}

void sub_18EE1930C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AudioComponentMgr_Base::findNext(AudioComponentMgr_Base *this, OpaqueAudioComponent *a2, const AudioClassDescription *a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _BOOL4 v8;
  char *SortedPosition;
  char *v10;
  const AudioClassDescription *v11;
  os_log_t v12;
  _QWORD *v13;
  NSObject *v14;
  std::string *v15;
  std::string *p_p;
  std::string __p;
  std::string v19;
  __int128 v20;
  UInt32 mSubType;
  uint64_t v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  std::string *v28;
  __int16 v29;
  const AudioClassDescription *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a2)
    v5 = (**(uint64_t (***)(OpaqueAudioComponent *))a2)(a2);
  else
    v5 = 0;
  if (a3->mType)
    v6 = a3->mSubType == 0;
  else
    v6 = 1;
  if (v6)
  {
    v8 = 1;
    if (!v5)
      goto LABEL_12;
LABEL_10:
    v7 = *(_QWORD *)(v5 + 24);
    goto LABEL_33;
  }
  v8 = a3->mManufacturer == 0;
  if (v5)
    goto LABEL_10;
LABEL_12:
  v7 = *((_QWORD *)this + 1);
  (*(void (**)(AudioComponentMgr_Base *, const AudioClassDescription *))(*(_QWORD *)this + 32))(this, a3);
  if (!v8)
  {
    v20 = *(_OWORD *)&a3->mType;
    mSubType = a3[1].mSubType;
    v22 = 0x64FFFFFFFFLL;
    SortedPosition = AudioComponentVector::findSortedPosition(*((char **)this + 2), *((char **)this + 3), &v20);
    v10 = SortedPosition;
    if (*((char **)this + 3) == SortedPosition)
      v11 = 0;
    else
      v11 = *(const AudioClassDescription **)SortedPosition;
    if (gAudioComponentLogCategory)
    {
      v12 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v13 = (_QWORD *)operator new();
      v13[1] = 0;
      v12 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v13 = v12;
      gAudioComponentLogCategory = (uint64_t)v13;
    }
    v14 = objc_retainAutorelease(v12);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      v15 = &v19;
      to_string(a3, &v19);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
      if (v11)
      {
        to_string(v11 + 3, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316162;
        v24 = "AudioComponentPluginMgr.mm";
        v25 = 1024;
        v26 = 1213;
        v27 = 2080;
        v28 = v15;
        v29 = 2048;
        v30 = v11;
        v31 = 2080;
        v32 = (const char *)p_p;
        _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d findNext %s -> %p %s", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        *(_DWORD *)buf = 136316162;
        v24 = "AudioComponentPluginMgr.mm";
        v25 = 1024;
        v26 = 1213;
        v27 = 2080;
        v28 = v15;
        v29 = 2048;
        v30 = 0;
        v31 = 2080;
        v32 = "";
        _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d findNext %s -> %p %s", buf, 0x30u);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
    }

    if (*((char **)this + 3) == v10)
      return 0;
    v7 = *(_QWORD *)v10;
  }
LABEL_33:
  while (v7)
  {
    if ((!v8 || (*(_BYTE *)(v7 + 48) & 1) == 0)
      && AudioComponentMgr_Base::match((AudioComponentMgr_Base *)v7, (const AudioComponentDescription *)a3, (const AudioComponentDescription *)a3))
    {
      break;
    }
    v7 = *(_QWORD *)(v7 + 24);
  }
  return v7;
}

void sub_18EE1963C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

BOOL AudioComponentMgr_Base::match(AudioComponentMgr_Base *this, const AudioComponentDescription *a2, const AudioComponentDescription *a3)
{
  BOOL v3;
  OSType componentSubType;
  OSType componentManufacturer;
  _BOOL8 result;

  if (a2->componentType)
    v3 = a2->componentType == *((_DWORD *)this + 9);
  else
    v3 = 1;
  if (!v3)
    return 0;
  componentSubType = a2->componentSubType;
  if (componentSubType && componentSubType != *((_DWORD *)this + 10))
    return 0;
  componentManufacturer = a2->componentManufacturer;
  if (componentManufacturer && componentManufacturer != *((_DWORD *)this + 11))
    return 0;
  result = EmbeddedComponentManager::isComponentDescriptionVisible((EmbeddedComponentManager *)*((unsigned int *)this + 12), a2);
  if ((_DWORD)result)
    return *((_BYTE *)this + 72) == 0;
  return result;
}

uint64_t AudioComponentMgr_iOS::checkDeferredInitialization(AudioComponentMgr_iOS *this, const AudioComponentDescription *a2)
{
  uint64_t result;

  if ((a2->componentType - 1635086951 <= 0x11 && ((1 << (a2->componentType - 103)) & 0x20045) != 0
     || a2->componentType == 0)
    && !CADeprecated::TSingleton<IPCAUClient>::sInstance)
  {
    return CADeprecated::TSingleton<IPCAUClient>::instance();
  }
  return result;
}

void sub_18EE19738(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t GetFormatListFromCodec(AudioCodec inCodec, const AudioFormatInfo *a2, unsigned int *a3, AudioFormatListItem *a4)
{
  uint64_t result;
  const void *mMagicCookie;
  UInt32 outSize;

  outSize = 0;
  result = 561211770;
  if (a3)
  {
    result = AudioCodecGetPropertyInfo(inCodec, 0x6163666Cu, &outSize, 0);
    if (!(_DWORD)result)
    {
      if (a4)
      {
        bzero(a4, *a3);
        result = 561211770;
        if (outSize <= *a3)
        {
          mMagicCookie = a2->mMagicCookie;
          LODWORD(a4->mASBD.mSampleRate) = a2->mMagicCookieSize;
          *(_QWORD *)&a4->mASBD.mFormatID = mMagicCookie;
          return AudioCodecGetProperty(inCodec, 0x6163666Cu, a3, a4);
        }
      }
      else
      {
        result = 0;
        *a3 = outSize;
      }
    }
  }
  return result;
}

OpaqueAudioComponentInstance *acv2::CodecConverter::CodecSupportsProperty(OpaqueAudioComponentInstance *this, AudioCodecPropertyID a2)
{
  UInt32 outSize;
  Boolean outWritable;

  if (this)
  {
    outWritable = 0;
    outSize = 0;
    return (OpaqueAudioComponentInstance *)(AudioCodecGetPropertyInfo(this, a2, &outSize, &outWritable) == 0);
  }
  return this;
}

OSStatus AudioCodecGetPropertyInfo(AudioCodec inCodec, AudioCodecPropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  uint64_t v6;
  uint64_t (***v7)(_QWORD);
  uint64_t (***v8)(_QWORD);
  uint64_t (**v9)(uint64_t (**)(_QWORD), uint64_t, UInt32 *, Boolean *);

  if (!inCodec)
    return -50;
  v6 = *(_QWORD *)&inPropertyID;
  v7 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioCodec))(*(_QWORD *)inCodec + 8))(inCodec);
  if (!v7)
    return 560947818;
  v8 = v7;
  v9 = *(uint64_t (***)(uint64_t (**)(_QWORD), uint64_t, UInt32 *, Boolean *))((**v7)(v7) + 112);
  if (*v9)
    return (*v9)(v8[3], v6, outSize, outWritable);
  else
    return -4;
}

uint64_t GetOutputFormatListFromCodec(OpaqueAudioComponentInstance *a1, const AudioFormatInfo *a2, unsigned int *a3, AudioFormatListItem *a4)
{
  uint64_t PropertyInfo;
  UInt32 v9;
  UInt32 v10;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  UInt32 v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  std::bad_alloc *exception;
  std::bad_alloc *v24;
  UInt32 outSize;

  outSize = 0;
  if (!a3)
    return 561211770;
  PropertyInfo = AudioCodecGetPropertyInfo(a1, 0x6F663469u, &outSize, 0);
  if (!(_DWORD)PropertyInfo)
  {
    v9 = outSize;
    v10 = outSize / 0x28;
    if (a4)
    {
      outSize = 40 * v10;
      if (v9 >= 0x28)
      {
        v12 = 40 * v10;
        v13 = malloc_type_malloc(v12, 0x2C8E6D5CuLL);
        if (!v13)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v24 = std::bad_alloc::bad_alloc(exception);
        }
        v14 = v13;
        bzero(v13, v12);
        v15 = *(_OWORD *)&a2->mASBD.mSampleRate;
        v16 = *(_OWORD *)&a2->mASBD.mBytesPerPacket;
        v14[4] = *(_QWORD *)&a2->mASBD.mBitsPerChannel;
        *(_OWORD *)v14 = v15;
        *((_OWORD *)v14 + 1) = v16;
        PropertyInfo = AudioCodecGetProperty(a1, 0x6F663469u, &outSize, v14);
        if (!(_DWORD)PropertyInfo)
        {
          LODWORD(v17) = outSize / 0x28;
          v18 = *a3 / 0x30;
          if (v18 >= outSize / 0x28)
            v17 = v17;
          else
            v17 = v18;
          if ((_DWORD)v17)
          {
            v19 = v14;
            v20 = v17;
            do
            {
              v21 = *(_OWORD *)v19;
              v22 = *((_OWORD *)v19 + 1);
              *(_QWORD *)&a4->mASBD.mBitsPerChannel = v19[4];
              *(_OWORD *)&a4->mASBD.mSampleRate = v21;
              *(_OWORD *)&a4->mASBD.mBytesPerPacket = v22;
              a4->mChannelLayoutTag = 0;
              ++a4;
              v19 += 5;
              --v20;
            }
            while (v20);
          }
          *a3 = 48 * v17;
        }
        free(v14);
      }
      else
      {
        return 2003329396;
      }
    }
    else
    {
      PropertyInfo = 0;
      *a3 = 48 * v10;
    }
  }
  return PropertyInfo;
}

void sub_18EE19A84(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_FormatListSize(const AudioFormatInfo *a1, unsigned int a2, unsigned int *a3)
{
  int v5;
  int v6;
  const void *mMagicCookie;
  UInt32 mMagicCookieSize;
  uint64_t result;
  unsigned int v10;
  _OWORD v11[2];
  uint64_t v12;
  AudioFormatInfo v13;
  unsigned int v14;

  *a3 = 0;
  if (a1->mASBD.mFormatID != 1836069985)
    return FetchFormatListFromCodecs((uint64_t (*)(void))GetFormatListFromCodec, a1, a2, a3, 0);
  v14 = 0;
  v5 = FormatFromESDS((unsigned __int8 *)a1->mMagicCookie, a1->mMagicCookieSize, &v14);
  if (!v14)
    return 560360820;
  v6 = v5;
  memset(&v13, 0, 40);
  mMagicCookie = a1->mMagicCookie;
  v13.mMagicCookie = mMagicCookie;
  mMagicCookieSize = a1->mMagicCookieSize;
  v13.mMagicCookieSize = mMagicCookieSize;
  if (v6)
  {
    v10 = 40;
    memset(v11, 0, sizeof(v11));
    v12 = 0;
    result = AudioFormatProperty_AudioFormatInfoFromESDS(mMagicCookie, mMagicCookieSize, &v10, v11);
    if ((_DWORD)result)
      return result;
    v13.mASBD.mFormatID = DWORD2(v11[0]);
  }
  else
  {
    v13.mASBD.mFormatID = v14;
  }
  return AudioFormatProperty_FormatListSize(&v13, 0x38u, a3);
}

uint64_t acv2::ConverterRegistry::GetDecodersSize(acv2::ConverterRegistry **this, int a2, unsigned int *a3)
{
  acv2::ConverterRegistry *v6;
  acv2::ConverterRegistry *v7;
  int v8;
  int v9;
  BOOL v10;

  acv2::ConverterRegistry::MakeDecoderFactories(this, a2, 1819304813);
  v6 = this[1];
  v7 = this[2];
  if (v6 == v7)
  {
    v8 = 0;
    if (!a3)
      return 0;
    goto LABEL_12;
  }
  v8 = 0;
  do
  {
    v9 = *(_DWORD *)(*(_QWORD *)v6 + 16);
    v10 = v9 == 1852597349 || v9 == 1633969507;
    if (v10 && *(_DWORD *)(*(_QWORD *)v6 + 20) == a2)
      ++v8;
    v6 = (acv2::ConverterRegistry *)((char *)v6 + 8);
  }
  while (v6 != v7);
  if (a3)
LABEL_12:
    *a3 = 12 * v8;
  return 0;
}

uint64_t acv2::ConverterRegistry::GetDecoders(acv2::ConverterRegistry **this, unsigned int a2, unsigned int *a3, char *a4)
{
  unsigned int v8;
  acv2::ConverterRegistry *v9;
  acv2::ConverterRegistry *v10;
  unsigned int v11;
  unsigned int v13;
  acv2::ConverterRegistry *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  int v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  acv2::ConverterRegistry *v23;
  acv2::ConverterRegistry *v24;
  int v25;
  BOOL v26;
  NSObject *v27;
  int16x8_t v28;
  int32x4_t v29;
  uint32x4_t v30;
  void *__p;
  char v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  void **p_p;
  __int16 v40;
  unsigned int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  acv2::ConverterRegistry::MakeDecoderFactories(this, a2, 1819304813);
  if (a4)
  {
    if (a3)
    {
      v8 = *a3;
      v10 = this[1];
      v9 = this[2];
      v11 = 0;
      if (v10 != v9 && v8 >= 0xC)
      {
        v13 = v8 / 0xC;
        v14 = (acv2::ConverterRegistry *)((char *)v10 + 8);
        do
        {
          v15 = *((_QWORD *)v14 - 1);
          v18 = *(_DWORD *)(v15 + 16);
          v16 = (uint64_t *)(v15 + 16);
          v17 = v18;
          v19 = v18 == 1852597349 || v17 == 1633969507;
          if (v19 && *(_DWORD *)(*((_QWORD *)v14 - 1) + 20) == a2)
          {
            v20 = &a4[12 * v11++];
            v21 = *v16;
            *((_DWORD *)v20 + 2) = *((_DWORD *)v16 + 2);
            *(_QWORD *)v20 = v21;
            v9 = this[2];
          }
          if (v14 == v9)
            break;
          v14 = (acv2::ConverterRegistry *)((char *)v14 + 8);
        }
        while (v11 < v13);
      }
      v22 = 0;
      *a3 = 12 * v11;
    }
    else
    {
      return 561211770;
    }
  }
  else
  {
    v23 = this[1];
    v24 = this[2];
    if (v23 == v24)
    {
LABEL_27:
      v22 = 1718449215;
      AudioConverterLog();
      v27 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v28.i32[0] = bswap32(a2);
        *(int8x8_t *)v28.i8 = vzip1_s8(*(int8x8_t *)v28.i8, *(int8x8_t *)v28.i8);
        v29.i64[0] = 0x1F0000001FLL;
        v29.i64[1] = 0x1F0000001FLL;
        v30.i64[0] = 0x5F0000005FLL;
        v30.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v28.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v30, (uint32x4_t)vsraq_n_s32(v29, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v28.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v28.i8, (int8x8_t)0x2E002E002E002ELL);
        v33 = 4;
        LODWORD(__p) = vmovn_s16(v28).u32[0];
        BYTE4(__p) = 0;
        *(_DWORD *)buf = 136315906;
        v35 = "ConverterFactory.cpp";
        v36 = 1024;
        v37 = 587;
        v38 = 2080;
        p_p = &__p;
        v40 = 1024;
        v41 = a2;
        _os_log_impl(&dword_18EE07000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d no decoder found for format ID '%s' (%d)", buf, 0x22u);
        if (v33 < 0)
          operator delete(__p);
      }
    }
    else
    {
      while (1)
      {
        v25 = *(_DWORD *)(*(_QWORD *)v23 + 16);
        v26 = v25 == 1852597349 || v25 == 1633969507;
        if (v26 && *(_DWORD *)(*(_QWORD *)v23 + 20) == a2)
          return 0;
        v23 = (acv2::ConverterRegistry *)((char *)v23 + 8);
        if (v23 == v24)
          goto LABEL_27;
      }
    }
  }
  return v22;
}

uint64_t acv2::ConverterRegistry::MakeDecoderFactories(acv2::ConverterRegistry **this, int a2, int a3)
{
  uint64_t v7;
  acv2::ConverterFactory *v8;
  uint64_t v9;
  double v10;

  if ((acv2::ConverterRegistry::HaveDecoderFactory(this[1], this[2], a2, a3) & 1) != 0)
    return 0;
  if (a2 == 1970037111)
  {
    v7 = operator new();
    v8 = (acv2::ConverterFactory *)v7;
    *(_QWORD *)(v7 + 8) = 0x6C70636D756C6177;
    v9 = 0x756C61776E6C6465;
    goto LABEL_7;
  }
  if (a2 == 1634492791)
  {
    v7 = operator new();
    v8 = (acv2::ConverterFactory *)v7;
    *(_QWORD *)(v7 + 8) = 0x6C70636D616C6177;
    v9 = 0x616C61776E6C6465;
LABEL_7:
    *(_QWORD *)(v7 + 16) = v9;
    *(_DWORD *)(v7 + 24) = 1634758764;
    *(_QWORD *)v7 = &off_1E290B2C0;
    acv2::ConverterRegistry::AddFactory((acv2::ConverterRegistry *)this, v8);
    return 1;
  }
  LODWORD(v10) = vdup_n_s32(0x61646563u).u32[0];
  HIDWORD(v10) = a2;
  return acv2::ConverterRegistry::MakeFactories((acv2::ConverterRegistry *)this, 0, a3, v10);
}

uint64_t acv2::ConverterRegistry::HaveDecoderFactory(acv2::ConverterRegistry *this, acv2::ConverterRegistry *a2, int a3, int a4)
{
  uint64_t v4;
  int v5;

  if (this == a2)
    return 0;
  while (1)
  {
    v4 = *(_QWORD *)this;
    if (*(_DWORD *)(*(_QWORD *)this + 12) == a4 && *(_DWORD *)(v4 + 20) == a3)
    {
      v5 = *(_DWORD *)(v4 + 16);
      if (v5 == 1633969507 || v5 == 1852597349)
        break;
    }
    this = (acv2::ConverterRegistry *)((char *)this + 8);
    if (this == a2)
      return 0;
  }
  return 1;
}

uint64_t acv2::ConverterRegistry::GetInputFormatsSize(acv2::ConverterRegistry *this)
{
  uint64_t v1;
  _QWORD **v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v3 = &v4;
  acv2::ConverterRegistry::GetInputFormatsSet((uint64_t)this, (uint64_t *)&v3);
  v1 = (4 * v5);
  return v1;
}

void sub_18EE1A068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  _Unwind_Resume(a1);
}

acv2::CodecConverterFactory *acv2::CodecConverterFactory::CodecConverterFactory(acv2::CodecConverterFactory *this, int a2, int a3, OpaqueAudioComponent *a4, AudioComponentDescription *a5, CFTypeRef cf)
{
  OSType componentManufacturer;

  componentManufacturer = a5->componentManufacturer;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_QWORD *)this + 2) = *(_QWORD *)&a5->componentType;
  *((_DWORD *)this + 6) = componentManufacturer;
  *(_QWORD *)this = off_1E290B0B0;
  *((_QWORD *)this + 4) = a4;
  if (cf)
  {
    CFRetain(cf);
    applesauce::CF::StringRef::StringRef((acv2::CodecConverterFactory *)((char *)this + 40), cf);
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 52) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 60) = 0;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 68) = 0;
  *((_BYTE *)this + 72) = 0;
  return this;
}

void ACAudioSpan::~ACAudioSpan(std::pmr **this)
{
  std::pmr *v2;

  ExtendedAudioBufferList_Destroy(this[12]);
  if (*((_BYTE *)this + 88))
  {
    v2 = this[6];
    if (v2)
    {
      this[7] = v2;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v2);
    }
  }
}

std::pmr *ExtendedAudioBufferList_Destroy(std::pmr *result)
{
  std::pmr *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;

  if (result)
  {
    v1 = result;
    if (*((_DWORD *)result + 2) != 1094863915)
      std::terminate();
    v2 = AudioBufferMemoryResource(result);
    v3 = v2;
    v4 = *((_QWORD *)v1 + 4);
    if (v4)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v2 + 24))(v2, v4, *((unsigned int *)v1 + 5), 8);
    v5 = *((unsigned int *)v1 + 3);
    v6 = *((unsigned int *)v1 + 4);
    if ((_DWORD)v5)
    {
      v7 = (char *)v1 + v5;
      v8 = *(void **)v7;
      if (*(_QWORD *)v7)
      {
        *((_QWORD *)v7 + 1) = v8;
        std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v8);
      }
    }
    return (std::pmr *)(*(uint64_t (**)(uint64_t, std::pmr *, uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, v1, v6, 8);
  }
  return result;
}

uint64_t acv2::ConverterRegistry::GetAvailableEncodeSampleRatesInfo(acv2::ConverterRegistry *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t FactoryBySpecifier;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  FactoryBySpecifier = acv2::ConverterRegistry::FindFactoryBySpecifier(this, a2, a3);
  if (FactoryBySpecifier)
    return (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)FactoryBySpecifier + 56))(FactoryBySpecifier, a4);
  AudioConverterLog();
  v7 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v8 = 136315394;
    v9 = "ConverterFactory.cpp";
    v10 = 1024;
    v11 = 446;
    _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for encode sample rates info", (uint8_t *)&v8, 0x12u);
  }
  return 1718449215;
}

void Resampler2::~Resampler2(Resampler2 *this)
{
  Resampler2::~Resampler2(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  void *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E2900FA0;
  if (*((_BYTE *)this + 24) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "Resampler2.cpp";
    v6 = 1024;
    v7 = 363;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d Someone is deleting a Resampler while it is in use.\n", (uint8_t *)&v4, 0x12u);
  }
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 10) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 11) = 0;
  }
  pthread_mutex_lock(&sInitLocker);
  SincKernelFactory::ReleaseSincKernel((SincKernelFactory *)sSincKernelFactory, *((SincKernel **)this + 6));
  pthread_mutex_unlock(&sInitLocker);
}

void sub_18EE1A438(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void to_string(const AudioClassDescription *a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  void *__p[2];
  unsigned __int8 v7;

  to_string(a1, (uint64_t)a2);
  if (*(_QWORD *)&a1[1].mType)
  {
    caulk::make_string((caulk *)"/0x%x/0x%x", (uint64_t)__p, a1[1].mType, a1[1].mSubType);
    if ((v7 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v7 & 0x80u) == 0)
      v5 = v7;
    else
      v5 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v4, v5);
    if ((char)v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_18EE1A4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

OSStatus AudioConverterSetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  _QWORD v5[3];
  uint64_t (*v6[3])(uint64_t, uint64_t);
  const void *v7;
  UInt32 v8;
  AudioConverterPropertyID v9;

  v8 = inPropertyDataSize;
  v9 = inPropertyID;
  v7 = inPropertyData;
  v5[0] = &v9;
  v5[1] = &v8;
  v5[2] = &v7;
  v6[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
  v6[1] = (uint64_t (*)(uint64_t, uint64_t))v5;
  return with_resolved((int)inAudioConverter, v6);
}

uint64_t DSPGraph::Graph::numInputs(DSPGraph::Graph *this)
{
  return (*((_QWORD *)this + 36) - *((_QWORD *)this + 35)) >> 3;
}

uint64_t DSPGraph::Graph::uninitialize(uint64_t this)
{
  uint64_t v1;
  uint64_t **i;
  _QWORD *j;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_BYTE *)(this + 762))
  {
    v1 = this;
    for (i = *(uint64_t ***)(this + 24); i; i = (uint64_t **)*i)
    {
      (*(void (**)(uint64_t *))(*i[2] + 584))(i[2]);
      this = (*(uint64_t (**)(uint64_t *))(*i[2] + 616))(i[2]);
    }
    for (j = *(_QWORD **)(v1 + 64); j; j = (_QWORD *)*j)
      *(_QWORD *)(j[2] + 56) = 0;
    v4 = *(_QWORD **)(v1 + 192);
    v5 = *(_QWORD **)(v1 + 200);
    while (v5 != v4)
    {
      v6 = *--v5;
      this = v6;
      *v5 = 0;
      if (v6)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
    *(_QWORD *)(v1 + 200) = v4;
    *(_BYTE *)(v1 + 762) = 0;
  }
  return this;
}

uint64_t DSPGraph::Box::uninitializePropertyTaps(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 176);
  v2 = *(_QWORD *)(this + 184);
  while (v1 != v2)
  {
    *(_QWORD *)(v1 + 48) = *(_QWORD *)(v1 + 40);
    v1 += 64;
  }
  return this;
}

uint64_t DSPGraph::AUBox::uninitialize(AudioUnit *this)
{
  uint64_t result;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  DSPGraph::Box::uninitialize((DSPGraph::Box *)this);
  this[98] = this[97];
  this[101] = this[100];
  result = AudioUnitUninitialize(this[106]);
  if ((_DWORD)result)
  {
    v3 = result;
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "uninitialize");
    std::operator+<char>();
    DSPGraph::ThrowException(v3, &v6, 2010, &v5, &v4);
  }
  return result;
}

void sub_18EE1A6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::uninitialize(DSPGraph::Box *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;

  v2 = *((_QWORD *)this + 25);
  v3 = *((_QWORD *)this + 26);
  while (v2 != v3)
  {
    v4 = *(_QWORD **)v2;
    v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
    *(_QWORD *)(*(_QWORD *)v2 + 16) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = (_QWORD *)v4[6];
    v7 = (_QWORD *)v4[7];
    while (v7 != v6)
    {
      v9 = (_QWORD *)*--v7;
      v8 = v9;
      *v7 = 0;
      if (v9)
        VPTimeFreqConverter_Dispose(v8);
    }
    v4[7] = v6;
    DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(v4 + 9));
    v2 += 8;
  }
  v10 = (uint64_t *)*((_QWORD *)this + 28);
  v11 = (uint64_t *)*((_QWORD *)this + 29);
  while (v10 != v11)
  {
    v12 = *v10;
    DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(*v10 + 16));
    v13 = *(_QWORD **)(v12 + 80);
    v14 = *(_QWORD **)(v12 + 88);
    while (v14 != v13)
    {
      v16 = (_QWORD *)*--v14;
      v15 = v16;
      *v14 = 0;
      if (v16)
        VPTimeFreqConverter_Dispose(v15);
    }
    *(_QWORD *)(v12 + 88) = v13;
    ++v10;
  }
  result = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 600))(this);
  if (*((_BYTE *)this + 760))
    *((_BYTE *)this + 760) = 0;
  return result;
}

void DSPGraph::Box::uninitializeAnalysis(DSPGraph::Box *this)
{
  std::mutex *v2;
  DSPGraph::Analyzer **v3;
  DSPGraph::Analyzer **v4;
  char *v5;

  v2 = (std::mutex *)((char *)this + 248);
  std::mutex::lock((std::mutex *)((char *)this + 248));
  v3 = (DSPGraph::Analyzer **)*((_QWORD *)this + 39);
  v4 = (DSPGraph::Analyzer **)*((_QWORD *)this + 40);
  if (v3 != v4)
  {
    v5 = (char *)this + 336;
    do
    {
      caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::remove((uint64_t)v5, *((_DWORD *)*v3 + 6));
      DSPGraph::Analyzer::uninitialize(*v3++);
    }
    while (v3 != v4);
  }
  std::mutex::unlock(v2);
}

void sub_18EE1A858(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

OSStatus AudioUnitUninitialize(AudioUnit inUnit)
{
  uint64_t (***v1)(_QWORD);
  uint64_t (***v2)(_QWORD);
  uint64_t (*v3)(_QWORD);

  if (!inUnit)
    return -50;
  v1 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v1)
    return 560947818;
  v2 = v1;
  if (*(_WORD *)((**v1)(v1) + 38) != 24949)
    return -3000;
  v3 = *(uint64_t (**)(_QWORD))(*(_QWORD *)((**v2)(v2) + 112) + 8);
  if (v3)
    return v3(v2[3]);
  else
    return -4;
}

void DSPGraph::RingBufferBox::uninitialize(DSPGraph::RingBufferBox *this)
{
  DSPGraph::Box::uninitialize(this);
  DSPGraph::SimpleABL::free((DSPGraph::RingBufferBox *)((char *)this + 808));
}

void DSPGraph::InternalBuffer::~InternalBuffer(DSPGraph::InternalBuffer *this)
{
  *(_QWORD *)this = off_1E2911CC0;
  DSPGraph::SimpleABL::free((DSPGraph::InternalBuffer *)((char *)this + 80));
  JUMPOUT(0x193FFE460);
}

{
  *(_QWORD *)this = off_1E2911CC0;
  DSPGraph::SimpleABL::free((DSPGraph::InternalBuffer *)((char *)this + 80));
}

void DSPGraph::Graph::initializeWithFlags(DSPGraph::Graph *this, int a2)
{
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  DSPGraph::IsoGroup **v12;
  DSPGraph::IsoGroup **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  DSPGraph::Box **v30;
  DSPGraph::Box *v31;
  char *v32;
  uint64_t v33;
  BOOL v34;
  os_signpost_id_t v35;
  char v36;
  unint64_t v37;
  NSObject *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  DSPGraph::Box ***v42;
  DSPGraph::Box ***v43;
  DSPGraph::Box **v44;
  _QWORD *v45;
  char i;
  _QWORD *v47;
  _DWORD *v48;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  NSObject *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::vector<char> *v58;
  std::vector<char> *v59;
  unsigned int v60;
  int v61;
  char v62;
  unint64_t v63;
  std::vector<char> *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  DSPGraph::SimpleABL *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _BYTE *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint8x8_t v82;
  unint64_t v83;
  unsigned __int8 **v84;
  unsigned __int8 *j;
  unint64_t v86;
  char *v87;
  std::string *v88;
  uint64_t v89;
  int64x2_t v90;
  float v91;
  float v92;
  _BOOL8 v93;
  unint64_t v94;
  unint64_t v95;
  int8x8_t prime;
  void *v97;
  void *v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  uint8x8_t v102;
  unint64_t v103;
  uint8x8_t v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t v108;
  unsigned __int8 **v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  __int128 *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  void *v119;
  NSObject *v120;
  NSObject *v121;
  os_signpost_id_t spid;
  __int128 v123[2];
  uint64_t v124;
  _QWORD v125[2];
  char v126;
  _BYTE v127[24];
  _BYTE *v128;
  _BYTE buf[24];
  void *__p[2];
  _BYTE v131[24];
  __int128 v132;
  int v133;
  __int128 v134;
  __int128 *v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  if (DSPGraph::getLog(void)::onceToken != -1)
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
  v4 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_18EE07000, v4, OS_LOG_TYPE_DEBUG, ">>>>>>>>>>>> INITIALIZE GRAPH", buf, 2u);
  }
  if (*((_BYTE *)this + 762))
    return;
  if (!*((_BYTE *)this + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(v123, "initializeWithFlags");
    std::string::basic_string[abi:ne180100]<0>(&v134, "graph is not configured. configure the graph before initializing");
    DSPGraph::ThrowException(1667655457, (__int128 *)buf, 745, v123, &v134);
  }
  if ((a2 & 0x30) == 0)
    goto LABEL_27;
  if ((a2 & 0x30) == 0x30)
  {
    if (DSPGraph::getLog(void)::onceToken != -1)
      goto LABEL_246;
    while (1)
    {
      v121 = DSPGraph::getLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_18EE07000, v121, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: Init flag error: only one kDSPGraph_EnableNonFiniteValidateMode can be set at a time!", buf, 2u);
        __break(1u);
LABEL_242:
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      __break(1u);
LABEL_246:
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
    }
  }
  *(_QWORD *)buf = &off_1E2917070;
  *(_DWORD *)&buf[8] = a2;
  v5 = buf;
  __p[0] = buf;
  v6 = (_QWORD *)*((_QWORD *)this + 3);
  if (!v6)
  {
    v11 = 4;
LABEL_26:
    (*(void (**)(_QWORD *))(*v5 + 8 * v11))(v5);
    goto LABEL_27;
  }
  do
  {
    v7 = v6[2];
    v8 = __p[0];
    if (!__p[0])
      goto LABEL_13;
    if (__p[0] != buf)
    {
      v8 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 16))();
LABEL_13:
      v128 = v8;
      goto LABEL_15;
    }
    v128 = v127;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)buf + 24))((uint64_t)buf, (uint64_t)v127);
LABEL_15:
    DSPGraph::Box::addRenderCallback(v7, (uint64_t)v127, 1u, 1);
    v9 = v128;
    if (v128 == v127)
    {
      v9 = v127;
      v10 = 4;
    }
    else
    {
      if (!v128)
        goto LABEL_20;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_20:
    v6 = (_QWORD *)*v6;
  }
  while (v6);
  v5 = __p[0];
  if (__p[0] == buf)
  {
    v11 = 4;
    v5 = buf;
    goto LABEL_26;
  }
  if (__p[0])
  {
    v11 = 5;
    goto LABEL_26;
  }
LABEL_27:
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 91) = 0;
  v12 = (DSPGraph::IsoGroup **)*((_QWORD *)this + 32);
  v13 = (DSPGraph::IsoGroup **)*((_QWORD *)this + 33);
  if (v12 != v13)
  {
    do
      DSPGraph::IsoGroup::initializeBoxes(*v12++);
    while (v12 != v13);
    v14 = *((_QWORD *)this + 32);
    v15 = *((_QWORD *)this + 33);
    while (v14 != v15)
    {
      v16 = *(_QWORD **)(*(_QWORD *)v14 + 224);
      v17 = *(_QWORD **)(*(_QWORD *)v14 + 232);
      while (v16 != v17)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v16 + 608))(*v16);
        ++v16;
      }
      v14 += 8;
    }
  }
  if ((a2 & 2) != 0)
  {
    v18 = (_QWORD *)*((_QWORD *)this + 3);
    if (v18)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      do
      {
        v22 = v18[2];
        if ((unint64_t)v20 >= v21)
        {
          v23 = (v20 - v19) >> 3;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61)
            goto LABEL_242;
          if ((uint64_t)(v21 - (_QWORD)v19) >> 2 > v24)
            v24 = (uint64_t)(v21 - (_QWORD)v19) >> 2;
          if (v21 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
            v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v25);
          else
            v26 = 0;
          v27 = (char *)(v25 + 8 * v23);
          *(_QWORD *)v27 = v22;
          v28 = v27 + 8;
          while (v20 != v19)
          {
            v29 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v27 - 1) = v29;
            v27 -= 8;
          }
          v21 = v25 + 8 * v26;
          if (v19)
            operator delete(v19);
          v19 = v27;
          v20 = v28;
        }
        else
        {
          *(_QWORD *)v20 = v22;
          v20 += 8;
        }
        v18 = (_QWORD *)*v18;
      }
      while (v18);
      if (v19 != v20)
      {
        v30 = (DSPGraph::Box **)v19;
        do
        {
          v31 = *v30;
          DSPGraph::Box::upstreamLatencyInTicks(*v30);
          (*(void (**)(DSPGraph::Box *))(*(_QWORD *)v31 + 384))(v31);
          ++v30;
        }
        while (v30 != (DSPGraph::Box **)v20);
        v32 = v19;
        do
        {
          v33 = *(_QWORD *)v32;
          (*(void (**)(_QWORD))(**(_QWORD **)v32 + 376))(*(_QWORD *)v32);
          if (*(_BYTE *)(v33 + 760))
            *(_BYTE *)(v33 + 760) = 0;
          v32 += 8;
        }
        while (v32 != v20);
      }
      if (v19)
        operator delete(v19);
    }
  }
  v34 = (a2 & 8) != 0 && *((_BYTE *)this + 763) != 0;
  *((_BYTE *)this + 764) = v34;
  if (DSPGraph::getLog(void)::onceToken != -1)
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
  v35 = os_signpost_id_make_with_pointer((os_log_t)DSPGraph::getLog(void)::gLog, this);
  if (DSPGraph::getLog(void)::onceToken != -1)
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
  v36 = a2;
  v37 = v35 - 1;
  if (v35 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v38 = DSPGraph::getLog(void)::gLog;
    if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
    {
      v39 = (_QWORD *)((char *)this + 408);
      if (*((char *)this + 431) < 0)
        v39 = (_QWORD *)*v39;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v39;
      _os_signpost_emit_with_name_impl(&dword_18EE07000, v38, OS_SIGNPOST_INTERVAL_BEGIN, v35, "Graph::initializeBuffers", "%s", buf, 0xCu);
    }
  }
  spid = v35;
  *(_QWORD *)buf = this;
  *(_OWORD *)&buf[8] = 0u;
  *(_OWORD *)__p = 0u;
  *(_DWORD *)v131 = 1065353216;
  *(_OWORD *)&v131[8] = 0u;
  v132 = 0u;
  v133 = 1065353216;
  v40 = *((_QWORD *)this + 32);
  v41 = *((_QWORD *)this + 33);
  while (v40 != v41)
  {
    v43 = *(DSPGraph::Box ****)(*(_QWORD *)v40 + 224);
    v42 = *(DSPGraph::Box ****)(*(_QWORD *)v40 + 232);
    while (v43 != v42)
    {
      v44 = *v43;
      if ((*((unsigned int (**)(DSPGraph::Box **))**v43 + 8))(*v43))
      {
        DSPGraph::BufferColorist::consumeInputs((DSPGraph::BufferColorist *)buf, (DSPGraph::Box *)v44);
        DSPGraph::BufferColorist::allocOutputs((DSPGraph::BufferColorist *)buf, v44[11], v44[12]);
      }
      else
      {
        DSPGraph::BufferColorist::allocOutputs((DSPGraph::BufferColorist *)buf, v44[11], v44[12]);
        DSPGraph::BufferColorist::consumeInputs((DSPGraph::BufferColorist *)buf, (DSPGraph::Box *)v44);
      }
      ++v43;
    }
    v40 += 8;
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::~__hash_table((uint64_t)&v131[8]);
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::~__hash_table((uint64_t)&buf[8]);
  v45 = (_QWORD *)*((_QWORD *)this + 8);
  for (i = v36; v45; v45 = (_QWORD *)*v45)
  {
    v47 = (_QWORD *)v45[2];
    v48 = (_DWORD *)v47[15];
    v49 = v48[10];
    if (v49 == 1)
      v49 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47[4] + 16) + 8) + 16) + 272);
    v50 = v48[2];
    if (v50 == 1718773105)
    {
      v51 = 2 * v49 * v48[4];
    }
    else if (v50 == 1819304813)
    {
      v51 = v48[4] * v49;
    }
    else
    {
      v51 = v48[4];
    }
    v52 = v47[7];
    if (v51 <= *(_DWORD *)(v52 + 100))
      v51 = *(_DWORD *)(v52 + 100);
    *(_DWORD *)(v52 + 100) = v51;
  }
  if (!*((_BYTE *)this + 764))
  {
    v69 = (_QWORD *)*((_QWORD *)this + 24);
    v70 = (_QWORD *)*((_QWORD *)this + 25);
    while (v69 != v70)
    {
      v71 = *v69;
      v72 = (DSPGraph::SimpleABL *)(*v69 + 80);
      DSPGraph::SimpleABL::free(v72);
      DSPGraph::SimpleABL::alloc(v72, *(_DWORD *)(v71 + 96), *(_DWORD *)(v71 + 100), *(unsigned __int8 *)(v71 + 108));
      ++v69;
    }
  }
  if (DSPGraph::getLog(void)::onceToken != -1)
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
  if (v37 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v53 = DSPGraph::getLog(void)::gLog;
    if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
    {
      v54 = (_QWORD *)((char *)this + 408);
      if (*((char *)this + 431) < 0)
        v54 = (_QWORD *)*v54;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v54;
      _os_signpost_emit_with_name_impl(&dword_18EE07000, v53, OS_SIGNPOST_INTERVAL_END, spid, "Graph::initializeBuffers", "%s", buf, 0xCu);
    }
  }
  v55 = *((_QWORD *)this + 124);
  v56 = *((_QWORD *)this + 125);
  while (v55 != v56)
  {
    v57 = *(_QWORD *)(v55 + 32);
    v58 = *(std::vector<char> **)(v55 + 40);
    if ((std::vector<char> *)v57 != v58)
    {
      v59 = (std::vector<char> *)(v57 + 8);
      do
      {
        v60 = (*(uint64_t (**)(DSPGraph::Graph *, _QWORD))(*(_QWORD *)this + 64))(this, LODWORD(v59[-1].__end_cap_.__value_));
        v61 = v60;
        if (!v62)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
          std::string::basic_string[abi:ne180100]<0>(v123, "initializeBridges");
          std::string::basic_string[abi:ne180100]<0>(&v134, "graph bridge property size could not be queried");
          DSPGraph::ThrowException(v61, (__int128 *)buf, 2439, v123, &v134);
        }
        v63 = v59->__end_ - v59->__begin_;
        if (v60 <= v63)
        {
          if (v60 < v63)
            v59->__end_ = &v59->__begin_[v60];
        }
        else
        {
          std::vector<unsigned char>::__append(v59, v60 - v63);
        }
        v64 = v59 + 1;
        v59 = (std::vector<char> *)((char *)v59 + 32);
      }
      while (v64 != v58);
    }
    v55 += 56;
  }
  if ((i & 4) != 0)
  {
    v65 = (_QWORD *)operator new();
    v65[4] = 0;
    v66 = (char *)operator new(0x800uLL);
    *v65 = v66;
    v65[1] = v66 + 2048;
    v65[2] = v66;
    v65[3] = v66;
    std::unique_ptr<DSPGraph::Graph::profiler_t>::reset[abi:ne180100]((uint64_t *)this + 127, (uint64_t)v65);
    *(_QWORD *)buf = &off_1E2916FE0;
    *(_QWORD *)&buf[8] = this;
    __p[0] = buf;
    std::__function::__value_func<void ()(double)>::swap[abi:ne180100](buf, (_QWORD *)this + 128);
    v67 = __p[0];
    if (__p[0] == buf)
    {
      v68 = 4;
      v67 = buf;
LABEL_124:
      (*(void (**)(void))(*v67 + 8 * v68))();
    }
    else if (__p[0])
    {
      v68 = 5;
      goto LABEL_124;
    }
    v73 = (_QWORD *)*((_QWORD *)this + 3);
    if (v73)
    {
      v74 = (_QWORD *)((char *)this + 1072);
      while (1)
      {
        v75 = v73[2];
        v76 = v75 + 32;
        if (*(char *)(v75 + 55) < 0)
          v76 = *(_QWORD *)v76;
        v124 = 0;
        v77 = (char *)operator new(0x800uLL);
        v78 = v77 + 2048;
        std::string::basic_string[abi:ne180100]<0>(buf, (char *)v76);
        __p[0] = v77;
        __p[1] = v77 + 2048;
        memset(v123, 0, sizeof(v123));
        *(_QWORD *)v131 = v77;
        *(_OWORD *)&v131[8] = (unint64_t)v77;
        v79 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)buf);
        v80 = v79;
        v81 = *((_QWORD *)this + 133);
        if (v81)
        {
          v82 = (uint8x8_t)vcnt_s8((int8x8_t)v81);
          v82.i16[0] = vaddlv_u8(v82);
          v83 = v82.u32[0];
          if (v82.u32[0] > 1uLL)
          {
            v76 = v79;
            if (v79 >= v81)
              v76 = v79 % v81;
          }
          else
          {
            v76 = (v81 - 1) & v79;
          }
          v84 = *(unsigned __int8 ***)(*((_QWORD *)this + 132) + 8 * v76);
          if (v84)
          {
            for (j = *v84; j; j = *(unsigned __int8 **)j)
            {
              v86 = *((_QWORD *)j + 1);
              if (v86 == v80)
              {
                if (std::equal_to<std::string>::operator()[abi:ne180100](j + 16, buf))
                {
                  v117 = 0;
                  v118 = v77;
                  v74 = (_QWORD *)((char *)this + 1072);
                  goto LABEL_205;
                }
              }
              else
              {
                if (v83 > 1)
                {
                  if (v86 >= v81)
                    v86 %= v81;
                }
                else
                {
                  v86 &= v81 - 1;
                }
                if (v86 != v76)
                  break;
              }
            }
          }
          v74 = (_QWORD *)((char *)this + 1072);
        }
        v87 = (char *)operator new(0x50uLL);
        v125[0] = v87;
        v125[1] = v74;
        v126 = 0;
        *(_QWORD *)v87 = 0;
        *((_QWORD *)v87 + 1) = v80;
        v88 = (std::string *)(v87 + 16);
        if ((buf[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v88, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
          v77 = (char *)__p[0];
          v78 = __p[1];
          v90 = *(int64x2_t *)v131;
          v89 = *(_QWORD *)&v131[16];
        }
        else
        {
          v89 = 0;
          *(_OWORD *)&v88->__r_.__value_.__l.__data_ = *(_OWORD *)buf;
          *((_QWORD *)v87 + 4) = *(_QWORD *)&buf[16];
          v90 = vdupq_n_s64((unint64_t)v77);
        }
        *(_OWORD *)__p = 0u;
        *((_QWORD *)v87 + 5) = v77;
        *((_QWORD *)v87 + 6) = v78;
        *(_OWORD *)v131 = 0u;
        *(int64x2_t *)(v87 + 56) = v90;
        *(_QWORD *)&v131[16] = 0;
        *((_QWORD *)v87 + 9) = v89;
        v126 = 1;
        v91 = (float)(unint64_t)(*((_QWORD *)this + 135) + 1);
        v92 = *((float *)this + 272);
        if (!v81 || (float)(v92 * (float)v81) < v91)
          break;
LABEL_195:
        v109 = *(unsigned __int8 ***)(*((_QWORD *)this + 132) + 8 * v76);
        j = (unsigned __int8 *)v125[0];
        if (v109)
        {
          *(_QWORD *)v125[0] = *v109;
LABEL_203:
          *v109 = j;
          goto LABEL_204;
        }
        *(_QWORD *)v125[0] = *((_QWORD *)this + 134);
        *((_QWORD *)this + 134) = j;
        *(_QWORD *)(*((_QWORD *)this + 132) + 8 * v76) = v74;
        if (*(_QWORD *)j)
        {
          v110 = *(_QWORD *)(*(_QWORD *)j + 8);
          if ((v81 & (v81 - 1)) != 0)
          {
            if (v110 >= v81)
              v110 %= v81;
          }
          else
          {
            v110 &= v81 - 1;
          }
          v109 = (unsigned __int8 **)(*((_QWORD *)this + 132) + 8 * v110);
          goto LABEL_203;
        }
LABEL_204:
        v125[0] = 0;
        ++*((_QWORD *)this + 135);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,void *>>>>::reset[abi:ne180100]((uint64_t)v125);
        v78 = __p[1];
        v118 = *(char **)v131;
        v117 = *(_QWORD *)&v131[16];
        v77 = (char *)__p[0];
LABEL_205:
        if (v117 >= (v78 - v118) >> 3)
          v111 = (unint64_t)(v78 - v77) >> 3;
        else
          v111 = 0;
        *(_QWORD *)v131 = &v118[8 * (v117 - v111)];
        if (v77)
          operator delete(v77);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v112 = v73[2];
        *(_QWORD *)&v134 = &off_1E2917028;
        *((_QWORD *)&v134 + 1) = j + 40;
        v135 = &v134;
        __p[0] = buf;
        std::__function::__func<DSPGraph::Graph::initializeProfilers(void)::$_1,std::allocator<DSPGraph::Graph::initializeProfilers(void)::$_1>,void ()(double)>::__clone((uint64_t)&v134, buf);
        std::__function::__value_func<void ()(double)>::swap[abi:ne180100](buf, (_QWORD *)(v112 + 640));
        v113 = __p[0];
        if (__p[0] == buf)
        {
          v113 = buf;
          v114 = 4;
        }
        else
        {
          if (!__p[0])
            goto LABEL_217;
          v114 = 5;
        }
        (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_217:
        v115 = v135;
        if (v135 == &v134)
        {
          v115 = &v134;
          v116 = 4;
          goto LABEL_221;
        }
        if (v135)
        {
          v116 = 5;
LABEL_221:
          (*(void (**)(void))(*(_QWORD *)v115 + 8 * v116))();
        }
        v73 = (_QWORD *)*v73;
        if (!v73)
          goto LABEL_233;
      }
      v93 = (v81 & (v81 - 1)) != 0;
      if (v81 < 3)
        v93 = 1;
      v94 = v93 | (2 * v81);
      v95 = vcvtps_u32_f32(v91 / v92);
      if (v94 <= v95)
        prime = (int8x8_t)v95;
      else
        prime = (int8x8_t)v94;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v81 = *((_QWORD *)this + 133);
      if (*(_QWORD *)&prime <= v81)
      {
        if (*(_QWORD *)&prime < v81)
        {
          v103 = vcvtps_u32_f32((float)*((unint64_t *)this + 135) / *((float *)this + 272));
          if (v81 < 3 || (v104 = (uint8x8_t)vcnt_s8((int8x8_t)v81), v104.i16[0] = vaddlv_u8(v104), v104.u32[0] > 1uLL))
          {
            v103 = std::__next_prime(v103);
          }
          else
          {
            v105 = 1 << -(char)__clz(v103 - 1);
            if (v103 >= 2)
              v103 = v105;
          }
          if (*(_QWORD *)&prime <= v103)
            prime = (int8x8_t)v103;
          if (*(_QWORD *)&prime >= v81)
          {
            v81 = *((_QWORD *)this + 133);
          }
          else
          {
            if (prime)
              goto LABEL_161;
            v119 = (void *)*((_QWORD *)this + 132);
            *((_QWORD *)this + 132) = 0;
            if (v119)
              operator delete(v119);
            v81 = 0;
            *((_QWORD *)this + 133) = 0;
          }
        }
      }
      else
      {
LABEL_161:
        if (*(_QWORD *)&prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v97 = operator new(8 * *(_QWORD *)&prime);
        v98 = (void *)*((_QWORD *)this + 132);
        *((_QWORD *)this + 132) = v97;
        if (v98)
          operator delete(v98);
        v99 = 0;
        *((int8x8_t *)this + 133) = prime;
        do
          *(_QWORD *)(*((_QWORD *)this + 132) + 8 * v99++) = 0;
        while (*(_QWORD *)&prime != v99);
        v100 = (_QWORD *)*v74;
        if (*v74)
        {
          v101 = v100[1];
          v102 = (uint8x8_t)vcnt_s8(prime);
          v102.i16[0] = vaddlv_u8(v102);
          if (v102.u32[0] > 1uLL)
          {
            if (v101 >= *(_QWORD *)&prime)
              v101 %= *(_QWORD *)&prime;
          }
          else
          {
            v101 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(*((_QWORD *)this + 132) + 8 * v101) = v74;
          v106 = (_QWORD *)*v100;
          if (*v100)
          {
            do
            {
              v107 = v106[1];
              if (v102.u32[0] > 1uLL)
              {
                if (v107 >= *(_QWORD *)&prime)
                  v107 %= *(_QWORD *)&prime;
              }
              else
              {
                v107 &= *(_QWORD *)&prime - 1;
              }
              if (v107 != v101)
              {
                v108 = *((_QWORD *)this + 132);
                if (!*(_QWORD *)(v108 + 8 * v107))
                {
                  *(_QWORD *)(v108 + 8 * v107) = v100;
                  goto LABEL_186;
                }
                *v100 = *v106;
                *v106 = **(_QWORD **)(*((_QWORD *)this + 132) + 8 * v107);
                **(_QWORD **)(*((_QWORD *)this + 132) + 8 * v107) = v106;
                v106 = v100;
              }
              v107 = v101;
LABEL_186:
              v100 = v106;
              v106 = (_QWORD *)*v106;
              v101 = v107;
            }
            while (v106);
          }
        }
        v81 = (unint64_t)prime;
      }
      if ((v81 & (v81 - 1)) != 0)
      {
        if (v80 >= v81)
          v76 = v80 % v81;
        else
          v76 = v80;
      }
      else
      {
        v76 = (v81 - 1) & v80;
      }
      goto LABEL_195;
    }
  }
LABEL_233:
  *((_BYTE *)this + 762) = 1;
  if (DSPGraph::getLog(void)::onceToken != -1)
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
  v120 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_18EE07000, v120, OS_LOG_TYPE_DEBUG, "<<<<<<<<<<<< INITIALIZE GRAPH", buf, 2u);
  }
}

void sub_18EE1B804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 113) < 0)
    operator delete(*(void **)(v32 - 136));
  if (a16 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::initializePropertyTaps(DSPGraph::Box *this)
{
  DSPGraph::PropertyTap *v1;
  DSPGraph::PropertyTap *v2;

  v1 = (DSPGraph::PropertyTap *)*((_QWORD *)this + 22);
  v2 = (DSPGraph::PropertyTap *)*((_QWORD *)this + 23);
  while (v1 != v2)
  {
    DSPGraph::PropertyTap::initialize(v1);
    v1 = (DSPGraph::PropertyTap *)((char *)v1 + 64);
  }
}

void DSPGraph::BufferColorist::allocOutputs(DSPGraph::BufferColorist *this, DSPGraph::Box *a2, DSPGraph::Box *a3)
{
  DSPGraph::Box *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  std::runtime_error *exception;
  unsigned int v37;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t *)((char *)this + 48);
    v6 = (uint64_t *)((char *)this + 8);
    do
    {
      v7 = (_QWORD *)(*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)v4 + 40))(v4);
      if (!v7[7])
      {
        v8 = v7;
        v9 = v7[15];
        v10 = *(_DWORD *)(v9 + 12);
        v11 = *(_DWORD *)(v9 + 28);
        v12 = v7[5];
        v37 = v11;
        if (v12 >> 31)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::overflow_error::overflow_error[abi:ne180100](exception, "numerical cast overflow: could not retain value in conversion type");
        }
        if ((v10 & 0x20) != 0)
          v13 = v6;
        else
          v13 = v5;
        if (!std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>(v13, v11)|| (v14 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v13, v11, &v37), v15 = v14[4], v15 == v14[3]))
        {
          v17 = operator new();
          v16 = v17;
          *(_OWORD *)(v17 + 8) = 0u;
          *(_OWORD *)(v17 + 24) = 0u;
          *(_OWORD *)(v17 + 40) = 0u;
          *(_OWORD *)(v17 + 56) = 0u;
          *(_DWORD *)(v17 + 72) = 0;
          *(_QWORD *)(v17 + 80) = 0;
          *(_BYTE *)(v17 + 88) = 0;
          *(_DWORD *)(v17 + 96) = v11;
          *(_DWORD *)(v17 + 100) = 0;
          *(_DWORD *)(v17 + 104) = v12;
          *(_BYTE *)(v17 + 108) = (v10 & 0x20) == 0;
          *(_QWORD *)v17 = &off_1E290D288;
          v18 = *(_QWORD **)this;
          v19 = *(uint64_t **)(*(_QWORD *)this + 200);
          v20 = *(_QWORD *)(*(_QWORD *)this + 208);
          if ((unint64_t)v19 >= v20)
          {
            v22 = (_QWORD *)v18[24];
            v23 = v19 - v22;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v25 = v20 - (_QWORD)v22;
            if (v25 >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              if (v26 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v27 = (char *)operator new(8 * v26);
              v22 = (_QWORD *)v18[24];
              v19 = (uint64_t *)v18[25];
            }
            else
            {
              v27 = 0;
            }
            v28 = (uint64_t *)&v27[8 * v23];
            *v28 = v16;
            v21 = v28 + 1;
            while (v19 != v22)
            {
              v29 = *--v19;
              *v19 = 0;
              *--v28 = v29;
            }
            v30 = *((_OWORD *)v18 + 12);
            v18[24] = v28;
            v18[25] = v21;
            v18[26] = &v27[8 * v26];
            v31 = (_QWORD *)*((_QWORD *)&v30 + 1);
            v32 = (_QWORD *)v30;
            while (v31 != v32)
            {
              v34 = *--v31;
              v33 = v34;
              *v31 = 0;
              if (v34)
                (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            }
            if (v32)
              operator delete(v32);
          }
          else
          {
            *v19 = v17;
            v21 = v19 + 1;
          }
          v18[25] = v21;
        }
        else
        {
          v16 = *(_QWORD *)(v15 - 8);
          v14[4] = v15 - 8;
          *(_DWORD *)(v16 + 104) = v12;
        }
        v8[7] = v16;
      }
      v4 = (DSPGraph::Box *)((char *)v4 + 32);
    }
    while (v4 != a3);
  }
}

void sub_18EE1BBFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void DSPGraph::BufferColorist::consumeInputs(DSPGraph::BufferColorist *this, DSPGraph::Box *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  unsigned int v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v2 = *((_QWORD *)a2 + 8);
  v3 = *((_QWORD *)a2 + 9);
  if (v2 != v3)
  {
    v5 = (uint64_t *)((char *)this + 48);
    v6 = (uint64_t *)((char *)this + 8);
    do
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
      if (!v7)
      {
        std::string::basic_string[abi:ne180100]<0>(&v34, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v33, "consumeInputs");
        v30 = (_QWORD *)((char *)a2 + 32);
        if (*((char *)a2 + 55) < 0)
          v30 = (_QWORD *)*v30;
        v31 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)a2 + 16))(a2);
        DSPGraph::strprintf((DSPGraph *)"box %s %s input port is not connected.", &v32, v30, v31);
        DSPGraph::ThrowException(1970168609, &v34, 206, &v33, &v32);
      }
      v8 = *(_QWORD *)(v7 + 56);
      v9 = *(_DWORD *)(v8 + 104) - 1;
      *(_DWORD *)(v8 + 104) = v9;
      if (!v9)
      {
        if (*(_BYTE *)(v8 + 108))
          v10 = v5;
        else
          v10 = v6;
        LODWORD(v34) = *(_DWORD *)(v8 + 96);
        v11 = v34;
        if (!std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>(v10, v34))
        {
          v12 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v10, v11, &v34);
          v14 = v12 + 3;
          v13 = (void *)v12[3];
          if (v13)
          {
            v12[4] = v13;
            operator delete(v13);
          }
          *v14 = 0;
          v14[1] = 0;
          v14[2] = 0;
        }
        v15 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v10, v11, &v34);
        v16 = v15;
        v18 = (_QWORD *)v15[4];
        v17 = v15[5];
        if ((unint64_t)v18 >= v17)
        {
          v20 = v15[3];
          v21 = ((uint64_t)v18 - v20) >> 3;
          if ((unint64_t)(v21 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v22 = v17 - v20;
          v23 = v22 >> 2;
          if (v22 >> 2 <= (unint64_t)(v21 + 1))
            v23 = v21 + 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
          {
            if (v24 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v25 = (char *)operator new(8 * v24);
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[8 * v21];
          *(_QWORD *)v26 = v8;
          v19 = v26 + 8;
          v28 = (char *)v16[3];
          v27 = (char *)v16[4];
          if (v27 != v28)
          {
            do
            {
              v29 = *((_QWORD *)v27 - 1);
              v27 -= 8;
              *((_QWORD *)v26 - 1) = v29;
              v26 -= 8;
            }
            while (v27 != v28);
            v27 = (char *)v16[3];
          }
          v16[3] = v26;
          v16[4] = v19;
          v16[5] = &v25[8 * v24];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v18 = v8;
          v19 = v18 + 1;
        }
        v16[4] = v19;
      }
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void sub_18EE1BE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = (void *)*a1;
      *a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*v12;
  if (*v12)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v23) = v12;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*a1 + 8 * v29))
          {
            *(_QWORD *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*a1 + 8 * v29);
          **(_QWORD **)(*a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v6);
  if (v31)
  {
    *v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v6) = v12;
  if (*v10)
  {
    v32 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_18EE1C260(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void DSPGraph::SimpleABL::alloc(DSPGraph::SimpleABL *this, unsigned int a2, unsigned int a3, int a4)
{
  _DWORD *v8;
  void *v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  DSPGraph::SimpleABL::free(this);
  if (a2 && a3)
  {
    *((_BYTE *)this + 8) = 1;
    if (a4)
    {
      v8 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
      *(_QWORD *)this = v8;
      if (!v8)
      {
        std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v15, "alloc");
        std::string::basic_string[abi:ne180100]<0>(&v14, "AudioBufferList allocation failed");
        DSPGraph::ThrowException(-108, &v16, 548, &v15, &v14);
      }
      *v8 = 1;
      v8[2] = a2;
      v8[3] = a3;
      v9 = malloc_type_calloc(1uLL, a3, 0x1EC2DFE2uLL);
      *(_QWORD *)(*(_QWORD *)this + 16) = v9;
      if (!v9)
      {
        std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v15, "alloc");
        std::string::basic_string[abi:ne180100]<0>(&v14, "AudioBufferList data allocation failed");
        DSPGraph::ThrowException(-108, &v16, 555, &v15, &v14);
      }
    }
    else
    {
      v10 = malloc_type_calloc(1uLL, 16 * (a2 - 1) + 24, 0x70C25B4FuLL);
      *(_QWORD *)this = v10;
      if (!v10)
      {
        std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v15, "alloc");
        std::string::basic_string[abi:ne180100]<0>(&v14, "AudioBufferList allocation failed");
        DSPGraph::ThrowException(-108, &v16, 560, &v15, &v14);
      }
      v11 = 0;
      *v10 = a2;
      do
      {
        v12 = &v10[v11];
        v12[2] = 1;
        v12[3] = a3;
        v13 = malloc_type_calloc(1uLL, a3, 0xC40F8CC6uLL);
        v10 = *(_DWORD **)this;
        *(_QWORD *)(*(_QWORD *)this + v11 * 4 + 16) = v13;
        if (!v13)
        {
          std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v15, "alloc");
          std::string::basic_string[abi:ne180100]<0>(&v14, "AudioBufferList data allocation failed");
          DSPGraph::ThrowException(-108, &v16, 568, &v15, &v14);
        }
        v11 += 4;
      }
      while (4 * a2 != v11);
    }
  }
}

void sub_18EE1C4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GraphOutput::process(DSPGraph::GraphOutput *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (!*(_BYTE *)(*((_QWORD *)this + 1) + 764))
  {
    v3 = a2 / (*(unsigned int (**)(DSPGraph::GraphOutput *))(*(_QWORD *)this + 672))(this);
    if (*(_BYTE *)(*((_QWORD *)this + 1) + 766))
    {
      v14 = *(_QWORD *)(*((_QWORD *)this + 106) + 72);
      LOBYTE(v15) = 0;
      v4 = *((_QWORD *)this + 8);
      if (*((_QWORD *)this + 9) == v4)
      {
        std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v17, "in");
        v12 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v12 = (_QWORD *)*v12;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v16, v12, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0, v14, v15);
        DSPGraph::ThrowException(1919837985, &v18, 1410, &v17, &v16);
      }
      v5 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) + 56);
      v6 = (*(uint64_t (**)(DSPGraph::GraphOutput *))(*(_QWORD *)this + 656))(this);
      DSPGraph::SimpleABL::copy((unsigned int **)(v5 + 80), (DSPGraph::SimpleABL *)&v14, 0, 0, (v6 * v3), 1);
      DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&v14);
    }
    else
    {
      v7 = *((_QWORD *)this + 8);
      if (*((_QWORD *)this + 9) == v7)
      {
        std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v17, "in");
        v13 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v13 = (_QWORD *)*v13;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v16, v13, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
        DSPGraph::ThrowException(1919837985, &v18, 1410, &v17, &v16);
      }
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      DSPGraph::RingBuffer::write((DSPGraph::GraphOutput *)((char *)this + 808), v3, v3, (unsigned int **)(*(_QWORD *)(v8 + 56) + 80));
    }
  }
  v9 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v17, "in");
    v11 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v11 = (_QWORD *)*v11;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v16, v11, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0, v14, v15);
    DSPGraph::ThrowException(1919837985, &v18, 1410, &v17, &v16);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  *(_DWORD *)(*((_QWORD *)this + 106) + 4) = *(_DWORD *)(*(_QWORD *)(result + 56) + 72);
  return result;
}

void sub_18EE1C7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v25 - 33) < 0)
    operator delete(*(void **)(v25 - 56));
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&a12);
  _Unwind_Resume(a1);
}

void DSPGraph::GraphInput::copyInput(DSPGraph::GraphInput *this)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  char v11;

  v2 = *((_QWORD *)this + 106);
  v3 = *(_DWORD *)(v2 + 64);
  *((_BYTE *)this + 856) = (v3 & 2) != 0;
  if ((v3 & 2) != 0)
  {
    *((_QWORD *)this + 108) = *(_QWORD *)(v2 + 16);
    *((_QWORD *)this + 109) = *(_QWORD *)(v2 + 8);
  }
  v4 = *((_DWORD *)this + 206) - *((_DWORD *)this + 209);
  v5 = (*(uint64_t (**)(DSPGraph::GraphInput *))(*(_QWORD *)this + 672))(this) * v4;
  v6 = (unsigned int *)*((_QWORD *)this + 106);
  v7 = DSPGraph::GraphInput::preflight(this);
  v8 = *v6;
  if (v7 < *v6)
    v8 = v7;
  if (v5 >= v8)
    v5 = v8;
  **((_DWORD **)this + 106) = v5;
  v9 = (*(uint64_t (**)(DSPGraph::GraphInput *))(*(_QWORD *)this + 672))(this);
  v10 = *(unsigned int **)(*((_QWORD *)this + 106) + 72);
  v11 = 0;
  DSPGraph::RingBuffer::write((DSPGraph::GraphInput *)((char *)this + 808), v5 / v9, v5 / v9, &v10);
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&v10);
}

void sub_18EE1C938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&a9);
  _Unwind_Resume(a1);
}

void DSPGraph::SimpleABL::free(DSPGraph::SimpleABL *this)
{
  _DWORD *v2;
  unint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(_DWORD **)this;
    if (!*(_QWORD *)this)
      return;
    if (*v2)
    {
      v3 = 0;
      v4 = 4;
      do
      {
        free(*(void **)&v2[v4]);
        ++v3;
        v2 = *(_DWORD **)this;
        v4 += 4;
      }
      while (v3 < **(unsigned int **)this);
    }
    free(v2);
    *((_BYTE *)this + 8) = 0;
  }
  *(_QWORD *)this = 0;
}

unsigned int **DSPGraph::RingBuffer::write(DSPGraph::RingBuffer *this, uint64_t a2, unsigned int a3, unsigned int **a4)
{
  unsigned int **result;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint8_t buf[4];
  unsigned int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a3 > a2)
  {
    if (DSPGraph::getLog(void)::onceToken != -1)
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_829);
    v12 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      v19 = a3;
      v20 = 1024;
      v21 = a2;
      _os_log_fault_impl(&dword_18EE07000, v12, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: RingBuffer::write advancing write by more packets than provided with %u > %u", buf, 0xEu);
    }
    snprintf((char *)buf, 0x400uLL, "DSPGraph assertion failure: RingBuffer::write advancing write by more packets than provided with %u > %u");
LABEL_17:
    __break(1u);
  }
  if (*((_DWORD *)this + 4) - *((_DWORD *)this + 7) < a2)
  {
    if (DSPGraph::getLog(void)::onceToken != -1)
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_829);
    v13 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_FAULT))
    {
      v14 = *((_DWORD *)this + 4);
      v15 = *((_DWORD *)this + 7);
      v16 = *((_DWORD *)this + 8);
      v17 = *((_DWORD *)this + 9);
      *(_DWORD *)buf = 67110400;
      v19 = a2;
      v20 = 1024;
      v21 = v14 - v15;
      v22 = 1024;
      v23 = v14;
      v24 = 1024;
      v25 = v15;
      v26 = 1024;
      v27 = v16;
      v28 = 1024;
      v29 = v17;
      _os_log_fault_impl(&dword_18EE07000, v13, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: RingBuffer::write overflow %u > %u (capacity = %u, readAvail = %u, readPos = %u, writePos = %u)", buf, 0x26u);
    }
    snprintf((char *)buf, 0x400uLL, "DSPGraph assertion failure: RingBuffer::write overflow %u > %u (capacity = %u, readAvail = %u, readPos = %u, writePos = %u)", a2);
    goto LABEL_17;
  }
  result = DSPGraph::SimpleABL::dstWrapCopy(a4, this, 0, (*((_DWORD *)this + 9) * *((_DWORD *)this + 6)), (*((_DWORD *)this + 6) * a2));
  v8 = *((_DWORD *)this + 9) + a3;
  *((_DWORD *)this + 9) = v8;
  v9 = *((_DWORD *)this + 5);
  v10 = v8 >= v9;
  v11 = v8 - v9;
  if (v10)
    *((_DWORD *)this + 9) = v11;
  *((_DWORD *)this + 7) += a3;
  return result;
}

unsigned int **DSPGraph::SimpleABL::dstWrapCopy(unsigned int **this, DSPGraph::SimpleABL *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  DSPGraph::SimpleABL *v10;
  DSPGraph::SimpleABL *v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v5 = *(_DWORD **)a2;
  if (!*(_QWORD *)a2 || !*v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v16, "dstWrapCopy");
    std::string::basic_string[abi:ne180100]<0>(&v15, "empty destination ABL");
    DSPGraph::ThrowException(1768843553, &v17, 729, &v16, &v15);
  }
  v6 = a4;
  v7 = v5[3];
  v8 = (v7 - a4);
  if (v7 <= a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v16, "dstWrapCopy");
    DSPGraph::strprintf((DSPGraph *)"copy destination position exceeds bounds %u >= %u", &v15, v6, v7);
    DSPGraph::ThrowException(1919837985, &v17, 733, &v16, &v15);
  }
  if (v7 < a5)
  {
    v14 = a5;
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v16, "dstWrapCopy");
    DSPGraph::strprintf((DSPGraph *)"copy size exceeds destination size %u > %u", &v15, v14, v7);
    DSPGraph::ThrowException(1919837985, &v17, 737, &v16, &v15);
  }
  v9 = a3;
  v10 = a2;
  v11 = (DSPGraph::SimpleABL *)this;
  if ((int)a5 + (int)a4 > v7)
  {
    v12 = (a5 - v8);
    DSPGraph::SimpleABL::copy(this, a2, a3, a4, v8, 0);
    a3 = (v8 + v9);
    this = (unsigned int **)v11;
    a2 = v10;
    a4 = 0;
    a5 = v12;
  }
  return DSPGraph::SimpleABL::copy(this, a2, a3, a4, a5, 0);
}

void sub_18EE1CDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

unsigned int **DSPGraph::RingBuffer::read(DSPGraph::RingBuffer *this, unsigned int a2, int a3, DSPGraph::SimpleABL *a4)
{
  unsigned int **result;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint8_t buf[4];
  unsigned int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 7) < a2)
  {
    if (DSPGraph::getLog(void)::onceToken != -1)
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_829);
    v13 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_FAULT))
    {
      v14 = *((_DWORD *)this + 4);
      v15 = *((_DWORD *)this + 7);
      v16 = *((_DWORD *)this + 8);
      v17 = *((_DWORD *)this + 9);
      *(_DWORD *)buf = 67110144;
      v19 = a2;
      v20 = 1024;
      v21 = v15;
      v22 = 1024;
      v23 = v14;
      v24 = 1024;
      v25 = v16;
      v26 = 1024;
      v27 = v17;
      _os_log_fault_impl(&dword_18EE07000, v13, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: RingBuffer::read underflow %u > %u (capacity = %u, readPos = %u, writePos = %u)", buf, 0x20u);
    }
    snprintf((char *)buf, 0x400uLL, "DSPGraph assertion failure: RingBuffer::read underflow %u > %u (capacity = %u, readPos = %u, writePos = %u)", a2, *((_DWORD *)this + 7), *((_DWORD *)this + 4), *((_DWORD *)this + 8), *((_DWORD *)this + 9));
    __break(1u);
  }
  result = DSPGraph::SimpleABL::srcWrapCopy((unsigned int **)this, a4, (*((_DWORD *)this + 8) * *((_DWORD *)this + 6)), 0, *((_DWORD *)this + 6) * a2, 1);
  v8 = *((_DWORD *)this + 8) + a3;
  *((_DWORD *)this + 8) = v8;
  v9 = *((_DWORD *)this + 5);
  v10 = v8 >= v9;
  v11 = v8 - v9;
  if (v10)
    *((_DWORD *)this + 8) = v11;
  v12 = *((_DWORD *)this + 7) - a3;
  *((_DWORD *)this + 7) = v12;
  if (!v12)
    *((_QWORD *)this + 4) = 0;
  return result;
}

unsigned int **DSPGraph::SimpleABL::copy(unsigned int **this, DSPGraph::SimpleABL *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int **v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v6 = *this;
  if (!*this)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "copy");
    std::string::basic_string[abi:ne180100]<0>(&v19, "null internal ABL");
    DSPGraph::ThrowException(1768843553, &v21, 667, &v20, &v19);
  }
  v7 = *(unsigned int **)a2;
  if (!*(_QWORD *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "copy");
    std::string::basic_string[abi:ne180100]<0>(&v19, "null destination ABL");
    DSPGraph::ThrowException(1768843553, &v21, 671, &v20, &v19);
  }
  v8 = this;
  if (*v6 != *v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "copy");
    DSPGraph::strprintf((DSPGraph *)"mABL->mNumberBuffers (%u) != toABL->mNumberBuffers (%u)", &v19, **v8, *v7);
    DSPGraph::ThrowException(1718444833, &v21, 674, &v20, &v19);
  }
  if (*v6)
  {
    v9 = 0;
    v10 = 0;
    v11 = a5 + a3;
    v12 = a5 + a4;
    do
    {
      if (v11 > v6[v9 + 3])
      {
        std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v20, "copy");
        DSPGraph::strprintf((DSPGraph *)"fromBytePos (%u) + numBytesToCopy (%u) > mABL->mBuffers[%u].mDataByteSize (%u)", &v19, a3, a5, v10, (*v8)[4 * v10 + 3], a2);
        DSPGraph::ThrowException(1718775073, &v21, 681, &v20, &v19);
      }
      v13 = &v7[v9];
      if (v12 > v7[v9 + 3])
      {
        std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v20, "copy");
        DSPGraph::strprintf((DSPGraph *)"toBytePos (%u) + numBytesToCopy (%u) > toABL->mBuffers[%u].mDataByteSize (%u)", &v19, a4, a5, v10, v13[3], a2);
        DSPGraph::ThrowException(1718775073, &v21, 686, &v20, &v19);
      }
      this = (unsigned int **)memmove((void *)(*((_QWORD *)v13 + 2) + a4), (const void *)(*(_QWORD *)&v6[v9 + 4] + a3), a5);
      ++v10;
      v6 = *v8;
      v9 += 4;
    }
    while (v10 < **v8);
  }
  if ((a6 & 1) != 0)
    return DSPGraph::SimpleABL::setByteSize((unsigned int **)a2, (int)a5 + (int)a4);
  return this;
}

void sub_18EE1D2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 81) < 0)
    operator delete(*(void **)(v29 - 104));
  _Unwind_Resume(exception_object);
}

unsigned int **DSPGraph::SimpleABL::srcWrapCopy(unsigned int **this, DSPGraph::SimpleABL *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  DSPGraph::SimpleABL *v12;
  DSPGraph::SimpleABL *v13;
  uint64_t v14;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v6 = *this;
  if (!*this || !*v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "srcWrapCopy");
    std::string::basic_string[abi:ne180100]<0>(&v17, "empty internal ABL");
    DSPGraph::ThrowException(1768843553, &v19, 702, &v18, &v17);
  }
  v7 = a3;
  v8 = v6[3];
  v9 = (v8 - a3);
  if (v8 <= a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "srcWrapCopy");
    DSPGraph::strprintf((DSPGraph *)"copy source position exceeds bounds %u >= %u", &v17, v7, v8);
    DSPGraph::ThrowException(1919837985, &v19, 706, &v18, &v17);
  }
  if (v8 < a5)
  {
    v16 = a5;
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "srcWrapCopy");
    DSPGraph::strprintf((DSPGraph *)"copy size exceeds source size %u > %u", &v17, v16, v8);
    DSPGraph::ThrowException(1919837985, &v19, 710, &v18, &v17);
  }
  v11 = a4;
  v12 = a2;
  v13 = (DSPGraph::SimpleABL *)this;
  if ((int)a5 + (int)a3 > v8)
  {
    v14 = (a5 - v9);
    DSPGraph::SimpleABL::copy(this, a2, a3, a4, v9, 0);
    a4 = (v9 + v11);
    this = (unsigned int **)v13;
    a2 = v12;
    a3 = 0;
    a5 = v14;
  }
  return DSPGraph::SimpleABL::copy(this, a2, a3, a4, a5, a6);
}

void sub_18EE1D4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GraphIOBox::canProcessInPlace(DSPGraph::GraphIOBox *this)
{
  return 1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

AudioUnitParameterValue DSPGraph::AUBox::getParameter(AudioUnit *this, AudioUnitParameterID a2, AudioUnitScope a3, AudioUnitElement a4)
{
  OSStatus Parameter;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  AudioUnitParameterValue outValue;

  outValue = 0.0;
  Parameter = AudioUnitGetParameter(this[106], a2, a3, a4, &outValue);
  if (Parameter)
  {
    v6 = Parameter;
    std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v7, "AudioUnitGetParameter");
    DSPGraph::ThrowException(v6, &v9, 1728, &v8, &v7);
  }
  return outValue;
}

void sub_18EE1D638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

OSStatus AudioUnitGetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue *outValue)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (***v9)(_QWORD);
  uint64_t (***v10)(_QWORD);
  uint64_t (*v11)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t, AudioUnitParameterValue *);

  if (!inUnit)
    return -50;
  v6 = *(_QWORD *)&inElement;
  v7 = *(_QWORD *)&inScope;
  v8 = *(_QWORD *)&inID;
  v9 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v9)
    return 560947818;
  v10 = v9;
  if (*(_WORD *)((**v9)(v9) + 38) != 24949)
    return -3000;
  v11 = *(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t, AudioUnitParameterValue *))(*(_QWORD *)((**v10)(v10) + 112) + 80);
  if (v11)
    return v11(v10[3], v8, v7, v6, outValue);
  else
    return -4;
}

void DSPGraph::Graph::getFormatNames(DSPGraph::Graph *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::vector<std::string>::pointer v8;
  __int128 *v9;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (_QWORD *)(a2 + 16);
  v5 = *((_QWORD *)this + 78);
  if (v5)
  {
    if (v5 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v5);
    __v.__begin_ = __v.__first_;
    __v.__end_ = __v.__first_;
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 77);
  if (v7)
  {
    v8 = *(std::vector<std::string>::pointer *)(a2 + 8);
    do
    {
      v9 = (__int128 *)(v7 + 2);
      if ((unint64_t)v8 >= *v4)
      {
        v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)a2, v9);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a2, v9);
        ++v8;
      }
      *(_QWORD *)(a2 + 8) = v8;
      v7 = (_QWORD *)*v7;
    }
    while (v7);
  }
}

void sub_18EE1D824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::vector<std::string>::pointer begin;
  std::string *end;
  std::__split_buffer<std::string>::pointer v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  std::string *v8;
  std::string *value;

  begin = this->__begin_;
  end = this->__end_;
  v4 = __v->__begin_;
  if (end == this->__begin_)
  {
    v5 = __v->__begin_;
  }
  else
  {
    do
    {
      v5 = v4 - 1;
      v6 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
      v4[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4[-1].__r_.__value_.__l.__data_ = v6;
      end[-1].__r_.__value_.__l.__size_ = 0;
      end[-1].__r_.__value_.__r.__words[2] = 0;
      end[-1].__r_.__value_.__r.__words[0] = 0;
      --v4;
      --end;
    }
    while (end != begin);
  }
  __v->__begin_ = v5;
  v7 = this->__begin_;
  this->__begin_ = v5;
  __v->__begin_ = v7;
  v8 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v8;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void to_string(const AudioClassDescription *a1@<X0>, uint64_t a2@<X8>)
{
  OSType mType;
  int v5;
  std::string *v6;
  OSType mSubType;
  int v8;
  std::string *v9;
  OSType mManufacturer;
  int v11;
  std::string *v12;
  std::string v13;
  std::string v14;
  std::string v15;
  char __s[4];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  mType = a1->mType;
  v5 = bswap32(mType);
  LODWORD(v15.__r_.__value_.__l.__data_) = v5;
  if (((char)v5 - 32) > 0x5E
    || (((__int16)v5 >> 8) - 32) > 0x5E
    || ((v5 << 8 >> 24) - 32) > 0x5E
    || ((v5 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v13, mType);
  }
  else
  {
    v15.__r_.__value_.__s.__data_[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v13, (char *)&v15);
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v13;
  else
    v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
  mSubType = a1->mSubType;
  v8 = bswap32(mSubType);
  LODWORD(v14.__r_.__value_.__l.__data_) = v8;
  if (((char)v8 - 32) > 0x5E
    || (((__int16)v8 >> 8) - 32) > 0x5E
    || ((v8 << 8 >> 24) - 32) > 0x5E
    || ((v8 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v15, mSubType);
  }
  else
  {
    v14.__r_.__value_.__s.__data_[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v15, (char *)&v14);
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v15;
  else
    v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
  mManufacturer = a1->mManufacturer;
  v11 = bswap32(mManufacturer);
  *(_DWORD *)__s = v11;
  if (((char)v11 - 32) > 0x5E
    || (((__int16)v11 >> 8) - 32) > 0x5E
    || ((v11 << 8 >> 24) - 32) > 0x5E
    || ((v11 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v14, mManufacturer);
  }
  else
  {
    v17 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v14, __s);
  }
  v12 = &v14;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
  caulk::make_string((caulk *)"%s/%s/%s", a2, v6, v9, v12);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_18EE1DB3C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void DSPGraph::Interpreter::~Interpreter(DSPGraph::Interpreter *this)
{
  void *v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_1E290C3B0;
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  *((_QWORD *)this + 2) = &off_1E290D2C0;
  v4 = (void **)((char *)this + 104);
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)this + 24);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  DSPGraph::Interpreter::~Interpreter(this);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = (_QWORD *)*v2;
      v4 = (_QWORD *)v2[8];
      if (v4 == v2 + 5)
        break;
      if (v4)
      {
        v5 = 5;
LABEL_6:
        (*(void (**)(void))(*v4 + 8 * v5))();
      }
      operator delete(v2);
      v2 = v3;
      if (!v3)
        goto LABEL_8;
    }
    v4 = v2 + 5;
    v5 = 4;
    goto LABEL_6;
  }
LABEL_8:
  v6 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

DSPGraph::NewBoxRegistry *DSPGraph::NewBoxRegistry::NewBoxRegistry(DSPGraph::NewBoxRegistry *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  __int128 v65;
  int v66;
  void *__p[2];
  char v68;
  _QWORD v69[3];
  _QWORD *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E290D2C0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "gain");
  v65 = xmmword_18F1171A0;
  v66 = 0;
  v69[0] = &off_1E2916728;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v2 = v70;
  if (v70 == v69)
  {
    v3 = 4;
    v2 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "amul");
  v65 = xmmword_18F1171B0;
  v66 = 0;
  v69[0] = &off_1E2916770;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v4 = v70;
  if (v70 == v69)
  {
    v5 = 4;
    v4 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "adiv");
  v65 = xmmword_18F1171C0;
  v66 = 0;
  v69[0] = &off_1E29167B8;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v6 = v70;
  if (v70 == v69)
  {
    v7 = 4;
    v6 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_20;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_20:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "amin");
  v65 = xmmword_18F1171D0;
  v66 = 0;
  v69[0] = &off_1E2916800;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v8 = v70;
  if (v70 == v69)
  {
    v9 = 4;
    v8 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_27;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_27:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "amax");
  v65 = xmmword_18F1171E0;
  v66 = 0;
  v69[0] = &off_1E2916848;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v10 = v70;
  if (v70 == v69)
  {
    v11 = 4;
    v10 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_34;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_34:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "adif");
  v65 = xmmword_18F1171F0;
  v66 = 0;
  v69[0] = &off_1E2916890;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v12 = v70;
  if (v70 == v69)
  {
    v13 = 4;
    v12 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_41;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_41:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "asum");
  v65 = xmmword_18F117200;
  v66 = 0;
  v69[0] = &off_1E29168D8;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v14 = v70;
  if (v70 == v69)
  {
    v15 = 4;
    v14 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_48;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_48:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "aabs");
  v65 = xmmword_18F117210;
  v66 = 0;
  v69[0] = &off_1E2916920;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v16 = v70;
  if (v70 == v69)
  {
    v17 = 4;
    v16 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_55;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_55:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "vcgn");
  v65 = xmmword_18F117220;
  v66 = 0;
  v69[0] = &off_1E2916968;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v18 = v70;
  if (v70 == v69)
  {
    v19 = 4;
    v18 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_62;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_62:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dbgn");
  v65 = xmmword_18F117230;
  v66 = 0;
  v69[0] = &off_1E29169B0;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v20 = v70;
  if (v70 == v69)
  {
    v21 = 4;
    v20 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_69;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_69:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  v65 = xmmword_18F117240;
  v66 = 0;
  v69[0] = &off_1E29169F8;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v22 = v70;
  if (v70 == v69)
  {
    v23 = 4;
    v22 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_76;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_76:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sum");
  v65 = xmmword_18F117250;
  v66 = 0;
  v69[0] = &off_1E2916A40;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v24 = v70;
  if (v70 == v69)
  {
    v25 = 4;
    v24 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_83;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_83:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mix");
  v65 = xmmword_18F117260;
  v66 = 0;
  v69[0] = &off_1E2916A88;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v26 = v70;
  if (v70 == v69)
  {
    v27 = 4;
    v26 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_90;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_90:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "average");
  v65 = xmmword_18F117270;
  v66 = 0;
  v69[0] = &off_1E2916AD0;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v28 = v70;
  if (v70 == v69)
  {
    v29 = 4;
    v28 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_97;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_97:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "test");
  v65 = xmmword_18F117280;
  v66 = 0;
  v69[0] = &off_1E2916B18;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v30 = v70;
  if (v70 == v69)
  {
    v31 = 4;
    v30 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_104;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_104:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "src");
  v65 = xmmword_18F117290;
  v66 = 0;
  v69[0] = &off_1E2916B60;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v32 = v70;
  if (v70 == v69)
  {
    v33 = 4;
    v32 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_111;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_111:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "reblocker");
  v65 = xmmword_18F1172A0;
  v66 = 0;
  v69[0] = &off_1E2916BA8;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v34 = v70;
  if (v70 == v69)
  {
    v35 = 4;
    v34 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_118;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_118:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "freqsrc");
  v65 = xmmword_18F1172B0;
  v66 = 0;
  v69[0] = &off_1E2916BF0;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v36 = v70;
  if (v70 == v69)
  {
    v37 = 4;
    v36 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_125;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_125:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fft");
  v65 = xmmword_18F117180;
  v66 = 0;
  v69[0] = &off_1E2916C38;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v38 = v70;
  if (v70 == v69)
  {
    v39 = 4;
    v38 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_132;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_132:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "join");
  v65 = xmmword_18F1172C0;
  v66 = 0;
  v69[0] = &off_1E2916C80;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v40 = v70;
  if (v70 == v69)
  {
    v41 = 4;
    v40 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_139;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_139:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "split");
  v65 = xmmword_18F1172D0;
  v66 = 0;
  v69[0] = &off_1E2916CC8;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v42 = v70;
  if (v70 == v69)
  {
    v43 = 4;
    v42 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_146;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_146:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "chancopy");
  v65 = xmmword_18F1172E0;
  v66 = 0;
  v69[0] = &off_1E2916D10;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v44 = v70;
  if (v70 == v69)
  {
    v45 = 4;
    v44 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_153;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_153:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "delay");
  v65 = xmmword_18F1172F0;
  v66 = 0;
  v69[0] = &off_1E2916D58;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v46 = v70;
  if (v70 == v69)
  {
    v47 = 4;
    v46 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_160;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_160:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dead");
  v65 = xmmword_18F117300;
  v66 = 0;
  v69[0] = &off_1E2916DA0;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v48 = v70;
  if (v70 == v69)
  {
    v49 = 4;
    v48 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_167;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_167:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "constant");
  v65 = xmmword_18F117310;
  v66 = 0;
  v69[0] = &off_1E2916DE8;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v50 = v70;
  if (v70 == v69)
  {
    v51 = 4;
    v50 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_174;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_174:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dbcontrol");
  v65 = xmmword_18F117320;
  v66 = 0;
  v69[0] = &off_1E2916E30;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v52 = v70;
  if (v70 == v69)
  {
    v53 = 4;
    v52 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_181;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_181:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "denormalzero");
  v65 = xmmword_18F117330;
  v66 = 0;
  v69[0] = &off_1E2916E78;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v54 = v70;
  if (v70 == v69)
  {
    v55 = 4;
    v54 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_188;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_188:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mantissarandom");
  v65 = xmmword_18F116FA0;
  v66 = 0;
  v69[0] = &off_1E2916EC0;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v56 = v70;
  if (v70 == v69)
  {
    v57 = 4;
    v56 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_195;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_195:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "volumecurve");
  v65 = xmmword_18F116ED0;
  v66 = 0;
  v69[0] = &off_1E2916F08;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v58 = v70;
  if (v70 == v69)
  {
    v59 = 4;
    v58 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_202;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_202:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nfnp");
  v65 = xmmword_18F117340;
  v66 = 0;
  v69[0] = &off_1E2916F50;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v60 = v70;
  if (v70 == v69)
  {
    v61 = 4;
    v60 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_209;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_209:
  if (v68 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "srlconverter");
  v65 = xmmword_18F117350;
  v66 = 0;
  v69[0] = &off_1E2916F98;
  v70 = v69;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v65, (uint64_t)v69);
  v62 = v70;
  if (v70 == v69)
  {
    v63 = 4;
    v62 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_216;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_216:
  if (v68 < 0)
    operator delete(__p[0]);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_add", 0x705F5F2Bu, 0, 0, 0);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_subtract", 0x705F5F2Du, 0, 0, 1);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_multiply", 0x705F5F2Au, 0, 0, 2);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_divide", 0x705F5F2Fu, 0, 0, 3);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_negate", 0x705F5F6Eu, 0, 0, 4);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_logical_and", 0x705F2626u, 0, 0, 5);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_logical_or", 0x705F7C7Cu, 0, 0, 6);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_logical_not", 0x705F5F21u, 0, 0, 7);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_equal", 0x705F3D3Du, 0, 0, 9);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_not_equal", 0x705F213Du, 0, 0, 10);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_greater_or_equal", 0x705F3E3Du, 0, 0, 11);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_greater", 0x705F5F3Eu, 0, 0, 12);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_less_or_equal", 0x705F3C3Du, 0, 0, 13);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_less", 0x705F5F3Cu, 0, 0, 14);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_min", 0x705F5F6Du, 0, 0, 15);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_max", 0x705F5F4Du, 0, 0, 16);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_cast", 0x705F3C2Du, 1, 0, 8);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_add", 0x765F5F2Bu, 1, 1, 0);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_subtract", 0x765F5F2Du, 1, 1, 1);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_multiply", 0x765F5F2Au, 1, 1, 2);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_divide", 0x765F5F2Fu, 1, 1, 3);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_negate", 0x765F5F6Eu, 1, 1, 4);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_logical_and", 0x765F2626u, 1, 1, 5);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_logical_or", 0x765F7C7Cu, 1, 1, 6);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_not", 0x765F5F21u, 1, 1, 7);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_logical_not", 0x765F5F21u, 1, 1, 7);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_equal", 0x765F3D3Du, 1, 1, 9);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_not_equal", 0x765F213Du, 1, 1, 10);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_greater_or_equal", 0x765F3E3Du, 1, 1, 11);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_greater", 0x765F5F3Eu, 1, 1, 12);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_less_or_equal", 0x765F3C3Du, 1, 1, 13);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_less", 0x765F5F3Cu, 1, 1, 14);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_min", 0x765F5F6Du, 1, 1, 15);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_max", 0x765F5F4Du, 1, 1, 16);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_cast", 0x765F3C2Du, 0, 1, 8);
  return this;
}

void sub_18EE1F248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v26;
  uint64_t v27;

  v26 = a22;
  if (a22 == v24)
  {
    v27 = 4;
    v26 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  if (a18 < 0)
    operator delete(__p);
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(v23);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(v22);
  _Unwind_Resume(a1);
}

void DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>(uint64_t a1, char *a2, unsigned int a3, int a4, int a5, int a6)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15[2];
  uint64_t v16;
  int v17;
  void *__p[2];
  char v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v15[0] = 1668183148;
  v15[1] = a3;
  v16 = 1633841016;
  v17 = 0;
  v12 = operator new(0x20uLL);
  *v12 = &off_1E29171D8;
  v12[1] = a2;
  *((_DWORD *)v12 + 4) = a3;
  *((_DWORD *)v12 + 5) = a4;
  *((_DWORD *)v12 + 6) = a5;
  *((_DWORD *)v12 + 7) = a6;
  v21 = v12;
  DSPGraph::NewBoxRegistry::add(a1, (uint64_t)__p, v15, (uint64_t)v20);
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  if (v19 < 0)
    operator delete(__p[0]);
}

void sub_18EE1F4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a22;
  if (a22 == v22)
  {
    v25 = 4;
    v24 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DSPGraph::NewBoxRegistry::add(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  void **v15;
  char *v16;
  unint64_t v17;
  _QWORD *v18;
  std::string *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  void **v33;
  _QWORD *v34;
  unint64_t v35;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  char *v57;
  std::string *v58;
  __int128 v59;
  char *v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  int64x2_t v67;
  char *v68;
  char *v69;
  int64x2_t v70;
  char *v71;
  uint64_t v72;

  v9 = (uint64_t *)(a1 + 8);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(void ***)(*v9 + 8 * v4);
    if (v15)
    {
      v16 = (char *)*v15;
      if (*v15)
      {
        do
        {
          v17 = *((_QWORD *)v16 + 1);
          if (v17 == v11)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v16 + 16, (unsigned __int8 *)a2))
            {
              goto LABEL_43;
            }
          }
          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12)
                v17 %= v12;
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v4)
              break;
          }
          v16 = *(char **)v16;
        }
        while (v16);
      }
    }
  }
  v18 = (_QWORD *)(a1 + 24);
  v16 = (char *)operator new(0x48uLL);
  v69 = v16;
  v70.i64[0] = a1 + 24;
  v70.i8[8] = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v11;
  v19 = (std::string *)(v16 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v16 + 8) = 0;
  v70.i8[8] = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
  v21 = *(float *)(a1 + 40);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    v22 = 1;
    if (v12 >= 3)
      v22 = (v12 & (v12 - 1)) != 0;
    v23 = v22 | (2 * v12);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)v9, v25);
    v12 = *(_QWORD *)(a1 + 16);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v26 = *v9;
  v27 = *(_QWORD **)(*v9 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v16 = *v27;
LABEL_41:
    *v27 = v16;
    goto LABEL_42;
  }
  *(_QWORD *)v16 = *v18;
  *v18 = v16;
  *(_QWORD *)(v26 + 8 * v4) = v18;
  if (*(_QWORD *)v16)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v28 >= v12)
        v28 %= v12;
    }
    else
    {
      v28 &= v12 - 1;
    }
    v27 = (_QWORD *)(*v9 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  v69 = 0;
  ++*(_QWORD *)(a1 + 32);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v69);
LABEL_43:
  std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator=((_QWORD *)v16 + 5, a4);
  v29 = (uint64_t *)(a1 + 48);
  v30 = a3[1] + (unint64_t)*a3 + a3[2];
  v31 = *(_QWORD *)(a1 + 56);
  if (v31)
  {
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      v4 = a3[1] + (unint64_t)*a3 + a3[2];
      if (v30 >= v31)
        v4 = v30 % v31;
    }
    else
    {
      v4 = (v31 - 1) & v30;
    }
    v33 = *(void ***)(*v29 + 8 * v4);
    if (v33)
    {
      v34 = *v33;
      if (*v33)
      {
        do
        {
          v35 = v34[1];
          if (v35 == v30)
          {
            if (v34[2] == *(_QWORD *)a3 && *((_DWORD *)v34 + 6) == (unint64_t)a3[2])
              goto LABEL_86;
          }
          else
          {
            if (v32.u32[0] > 1uLL)
            {
              if (v35 >= v31)
                v35 %= v31;
            }
            else
            {
              v35 &= v31 - 1;
            }
            if (v35 != v4)
              break;
          }
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
    }
  }
  v34 = operator new(0x48uLL);
  *v34 = 0;
  v34[1] = v30;
  *((_OWORD *)v34 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v34 + 8) = a3[4];
  v34[8] = 0;
  v37 = (float)(unint64_t)(*(_QWORD *)(a1 + 72) + 1);
  v38 = *(float *)(a1 + 80);
  if (!v31 || (float)(v38 * (float)v31) < v37)
  {
    v39 = 1;
    if (v31 >= 3)
      v39 = (v31 & (v31 - 1)) != 0;
    v40 = v39 | (2 * v31);
    v41 = vcvtps_u32_f32(v37 / v38);
    if (v40 <= v41)
      v42 = v41;
    else
      v42 = v40;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1 + 48, v42);
    v31 = *(_QWORD *)(a1 + 56);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v30 >= v31)
        v4 = v30 % v31;
      else
        v4 = v30;
    }
    else
    {
      v4 = (v31 - 1) & v30;
    }
  }
  v43 = *v29;
  v44 = *(_QWORD **)(*v29 + 8 * v4);
  if (v44)
  {
    *v34 = *v44;
LABEL_84:
    *v44 = v34;
    goto LABEL_85;
  }
  *v34 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v34;
  *(_QWORD *)(v43 + 8 * v4) = a1 + 64;
  if (*v34)
  {
    v45 = *(_QWORD *)(*v34 + 8);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v45 >= v31)
        v45 %= v31;
    }
    else
    {
      v45 &= v31 - 1;
    }
    v44 = (_QWORD *)(*v29 + 8 * v45);
    goto LABEL_84;
  }
LABEL_85:
  ++*(_QWORD *)(a1 + 72);
LABEL_86:
  std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator=(v34 + 5, a4);
  v46 = *(_QWORD *)(a1 + 104);
  v47 = *(_QWORD *)(a1 + 96);
  if (v47 >= v46)
  {
    v49 = *(_QWORD *)(a1 + 88);
    v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v49) >> 4);
    if (v50 + 1 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - v49) >> 4);
    v52 = 2 * v51;
    if (2 * v51 <= v50 + 1)
      v52 = v50 + 1;
    if (v51 >= 0x2AAAAAAAAAAAAAALL)
      v53 = 0x555555555555555;
    else
      v53 = v52;
    v72 = a1 + 104;
    if (v53)
    {
      v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v53);
    }
    else
    {
      v55 = 0;
      v54 = 0;
    }
    v58 = (std::string *)&v55[48 * v50];
    v69 = v55;
    v70.i64[0] = (uint64_t)v58;
    v70.i64[1] = (uint64_t)v58;
    v71 = &v55[48 * v54];
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v58, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v60 = (char *)v70.i64[1];
      v58 = (std::string *)v70.i64[0];
    }
    else
    {
      v59 = *(_OWORD *)a2;
      v58->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
      v60 = &v55[48 * v50];
    }
    v61 = &v55[48 * v50];
    v62 = *(_OWORD *)a3;
    *((_DWORD *)v61 + 10) = a3[4];
    *(_OWORD *)(v61 + 24) = v62;
    v57 = v60 + 48;
    v63 = *(_QWORD *)(a1 + 88);
    v64 = *(_QWORD *)(a1 + 96);
    if (v64 == v63)
    {
      v67 = vdupq_n_s64(v64);
    }
    else
    {
      do
      {
        v65 = *(_OWORD *)(v64 - 48);
        v58[-2].__r_.__value_.__r.__words[2] = *(_QWORD *)(v64 - 32);
        *(_OWORD *)&v58[-2].__r_.__value_.__l.__data_ = v65;
        *(_QWORD *)(v64 - 40) = 0;
        *(_QWORD *)(v64 - 32) = 0;
        *(_QWORD *)(v64 - 48) = 0;
        v66 = *(_OWORD *)(v64 - 24);
        LODWORD(v58[-1].__r_.__value_.__r.__words[2]) = *(_DWORD *)(v64 - 8);
        *(_OWORD *)&v58[-1].__r_.__value_.__l.__data_ = v66;
        v58 -= 2;
        v64 -= 48;
      }
      while (v64 != v63);
      v67 = *(int64x2_t *)(a1 + 88);
    }
    *(_QWORD *)(a1 + 88) = v58;
    *(_QWORD *)(a1 + 96) = v57;
    v70 = v67;
    v68 = *(char **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v71;
    v71 = v68;
    v69 = (char *)v67.i64[0];
    std::__split_buffer<std::pair<std::string,AudioComponentDescription>>::~__split_buffer((uint64_t)&v69);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 96), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v48 = *(_OWORD *)a2;
      *(_QWORD *)(v47 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v47 = v48;
    }
    v56 = *(_OWORD *)a3;
    *(_DWORD *)(v47 + 40) = a3[4];
    *(_OWORD *)(v47 + 24) = v56;
    v57 = (char *)(v47 + 48);
    *(_QWORD *)(a1 + 96) = v47 + 48;
  }
  *(_QWORD *)(a1 + 96) = v57;
}

void sub_18EE1FB28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,AudioComponentDescription>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  if (v8 != a1)
  {
    v3 = v9;
    v4 = (_QWORD *)a1[3];
    if (v9 == v8)
    {
      if (v4 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v10);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v9 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, a1);
        (*(void (**)(_QWORD *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, a1);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v9;
      v9 = v8;
    }
    else
    {
      v9 = (_QWORD *)a1[3];
      a1[3] = v3;
    }
  }
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_14;
  }
  if (v9)
  {
    v6 = 5;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_18EE1FD20(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

__n128 _ZNKSt3__110__function6__funcIZZN8DSPGraph14NewBoxRegistryC1EvENK3__0clIPKciNS2_14CalculationBox14OperatorDomainENS8_16OperatorCodomainENS8_8OperatorEEEDaT_T0_T1_T2_T3_EUljjE_NS_9allocatorISI_EEFPNS2_3BoxEjjEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E29171D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::__split_buffer<std::pair<std::string,AudioComponentDescription>>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 6;
      *(_QWORD *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916F08;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916EC0;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916E78;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916E30;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916DE8;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916DA0;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916D10;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916CC8;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916C80;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916C38;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916BF0;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916BA8;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916A88;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916A40;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29169F8;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29169B0;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916968;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916920;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29168D8;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916890;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916848;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916F50;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916B60;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916B18;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916AD0;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916F98;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916D58;
}

void DSPGraph::IsoGroup::topologicalSort(uint64_t a1, char **a2)
{
  _QWORD *i;
  uint64_t v5;
  uint64_t **j;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (*(_BYTE *)(a1 + 249))
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_IsoGroup.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v19, "topologicalSort");
    std::string::basic_string[abi:ne180100]<0>(&v18, "IsoGroup::topologicalSort, There is a cycle in the graph. The graph must be acyclic.");
    DSPGraph::ThrowException(1953460257, &v20, 251, &v19, &v18);
  }
  if (!*(_BYTE *)(a1 + 248))
  {
    *(_BYTE *)(a1 + 249) = 1;
    for (i = *(_QWORD **)(a1 + 112); i; i = (_QWORD *)*i)
      DSPGraph::IsoGroup::topologicalSort(*(_QWORD *)(i[2] + 848), a2);
    v5 = *(_QWORD *)(a1 + 224);
    *(_BYTE *)(a1 + 249) = 0;
    *(_QWORD *)(a1 + 232) = v5;
    for (j = *(uint64_t ***)(a1 + 72); j; j = (uint64_t **)*j)
      (*(void (**)(uint64_t *, uint64_t, uint64_t, char **))(*j[2] + 400))(j[2], a1, a1 + 224, a2);
    v8 = a2[1];
    v7 = (unint64_t)a2[2];
    if ((unint64_t)v8 >= v7)
    {
      v10 = *a2;
      v11 = (v8 - *a2) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = a1;
      v9 = v16 + 8;
      if (v8 != v10)
      {
        do
        {
          v17 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v8 != v10);
        v8 = *a2;
      }
      *a2 = v16;
      a2[1] = v9;
      a2[2] = &v15[8 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v8 = a1;
      v9 = v8 + 8;
    }
    a2[1] = v9;
    *(_BYTE *)(a1 + 248) = 1;
  }
}

void sub_18EE20428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::sortUpstream(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t **i;

  result = a1[8];
  v7 = (uint64_t *)a1[9];
  if ((uint64_t *)result != v7)
  {
    v8 = (uint64_t *)result;
    do
    {
      v9 = *v8;
      v8 += 4;
      v10 = (*(uint64_t (**)(void))(v9 + 40))();
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v10 + 8) + 8) + 400))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8), a1[2], a2, a3);
      result = (uint64_t)v8;
    }
    while (v8 != v7);
  }
  v11 = (_BYTE *)a1[19];
  v12 = (_BYTE *)a1[20];
  while (v11 != v12)
  {
    if (v11[36])
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)v11 + 400))(*(_QWORD *)v11, a1[2], a2, a3);
    v11 += 40;
  }
  v13 = (_BYTE *)a1[22];
  v14 = (_BYTE *)a1[23];
  while (v13 != v14)
  {
    if (v13[36])
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)v13 + 400))(*(_QWORD *)v13, a1[2], a2, a3);
    v13 += 64;
  }
  for (i = (uint64_t **)a1[16]; i; i = (uint64_t **)*i)
    result = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*i[2] + 400))(i[2], a1[2], a2, a3);
  return result;
}

void DSPGraph::Box::topologicalSort(uint64_t a1, uint64_t a2, void **a3, char **a4)
{
  uint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (*(_BYTE *)(a1 + 746))
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v21, "topologicalSort");
    std::string::basic_string[abi:ne180100]<0>(&v20, "Box::topologicalSort, There is a cycle in the graph. The graph must be acyclic.");
    DSPGraph::ThrowException(1953460257, &v22, 485, &v21, &v20);
  }
  if (!*(_BYTE *)(a1 + 745))
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5 == a2)
    {
      *(_BYTE *)(a1 + 746) = 1;
      (*(void (**)(uint64_t, void **, char **))(*(_QWORD *)a1 + 408))(a1, a3, a4);
      *(_BYTE *)(a1 + 746) = 0;
      v8 = a3[1];
      v7 = (unint64_t)a3[2];
      if ((unint64_t)v8 >= v7)
      {
        v10 = ((char *)v8 - (_BYTE *)*a3) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v11 = v7 - (_QWORD)*a3;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v13);
        else
          v14 = 0;
        v15 = (_QWORD *)(v13 + 8 * v10);
        v16 = v13 + 8 * v14;
        *v15 = a1;
        v9 = v15 + 1;
        v18 = (char *)*a3;
        v17 = (char *)a3[1];
        if (v17 != *a3)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v15 = v19;
          }
          while (v17 != v18);
          v17 = (char *)*a3;
        }
        *a3 = v15;
        a3[1] = v9;
        a3[2] = (void *)v16;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v8 = a1;
        v9 = v8 + 1;
      }
      a3[1] = v9;
      *(_BYTE *)(a1 + 745) = 1;
    }
    else
    {
      DSPGraph::IsoGroup::topologicalSort(v5, a4);
    }
  }
}

void sub_18EE20724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  *(_BYTE *)(v27 + 746) = 0;
  _Unwind_Resume(exception_object);
}

OSStatus AudioConverterGetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  _QWORD v5[3];
  uint64_t (*v6[3])(uint64_t, uint64_t);
  void *v7;
  UInt32 *v8;
  AudioConverterPropertyID v9;

  v9 = inPropertyID;
  v7 = outPropertyData;
  v8 = ioPropertyDataSize;
  v5[0] = &v9;
  v5[1] = &v8;
  v5[2] = &v7;
  v6[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
  v6[1] = (uint64_t (*)(uint64_t, uint64_t))v5;
  return with_resolved((int)inAudioConverter, v6);
}

void DSPGraph::IsoGroup::initializeBoxes(DSPGraph::IsoGroup *this)
{
  uint64_t v2;
  uint64_t v3;
  os_signpost_id_t v4;
  char **v5;
  char **v6;
  os_signpost_id_t v7;
  unint64_t v8;
  char *v9;
  NSObject *v10;
  _QWORD *v11;
  NSObject *v12;
  _QWORD *v13;
  uint8_t buf[4];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 36) = 0;
  v2 = *((unsigned int *)this + 67);
  v3 = v2;
  if ((_DWORD)v2 == 1)
    v3 = *((unsigned int *)this + 68);
  if (DSPGraph::getLog(void)::onceToken != -1)
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8629);
  v4 = os_signpost_id_make_with_pointer((os_log_t)DSPGraph::getLog(void)::gLog, this);
  v5 = (char **)*((_QWORD *)this + 28);
  v6 = (char **)*((_QWORD *)this + 29);
  if (v5 != v6)
  {
    v7 = v4;
    v8 = v4 - 1;
    do
    {
      v9 = *v5;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)*v5 + 112))(*v5, v3);
      if (v2 >= 2)
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v9 + 120))(v9, 1);
      if (DSPGraph::getLog(void)::onceToken != -1)
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8629);
      if (v8 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v10 = DSPGraph::getLog(void)::gLog;
        if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
        {
          v11 = v9 + 32;
          if (v9[55] < 0)
            v11 = (_QWORD *)*v11;
          *(_DWORD *)buf = 136315138;
          v15 = v11;
          _os_signpost_emit_with_name_impl(&dword_18EE07000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v7, "Box::initialize", "%s", buf, 0xCu);
        }
      }
      (*(void (**)(char *))(*(_QWORD *)v9 + 576))(v9);
      if (DSPGraph::getLog(void)::onceToken != -1)
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8629);
      if (v8 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v12 = DSPGraph::getLog(void)::gLog;
        if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
        {
          v13 = v9 + 32;
          if (v9[55] < 0)
            v13 = (_QWORD *)*v13;
          *(_DWORD *)buf = 136315138;
          v15 = v13;
          _os_signpost_emit_with_name_impl(&dword_18EE07000, v12, OS_SIGNPOST_INTERVAL_END, v7, "Box::initialize", "%s", buf, 0xCu);
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
}

uint64_t DSPGraph::AUBox::setMaxFrames(DSPGraph::AUBox *this, int a2)
{
  int v3;

  v3 = a2;
  return (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, _QWORD, _QWORD, uint64_t, int *))(*(_QWORD *)this + 312))(this, 14, 0, 0, 4, &v3);
}

uint64_t DSPGraph::AUBox::initialize(AudioUnit *this)
{
  __int128 *v2;
  AudioUnit v3;
  AudioUnit v4;
  uint64_t v5;
  unint64_t v6;
  AudioUnit v7;
  AudioUnit v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  OpaqueAudioComponentInstance *v13;
  uint64_t v14;
  OpaqueAudioComponentInstance *v15;
  OpaqueAudioComponentInstance *v16;
  uint64_t *v17;
  OpaqueAudioComponentInstance *v18;
  uint64_t v19;
  __int128 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  OpaqueAudioComponentInstance *v26;
  __int128 *v27;
  AudioUnit v28;
  AudioUnit v29;
  uint64_t v30;
  unint64_t v31;
  AudioUnit v32;
  AudioUnit v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  OpaqueAudioComponentInstance *v38;
  uint64_t v39;
  OpaqueAudioComponentInstance *v40;
  OpaqueAudioComponentInstance *v41;
  uint64_t *v42;
  OpaqueAudioComponentInstance *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  OpaqueAudioComponentInstance *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  DSPGraph::Box::initialize((DSPGraph::Box *)this);
  v2 = (__int128 *)this[97];
  v4 = this[8];
  v3 = this[9];
  *(_QWORD *)&v56 = 0;
  v5 = v3 - v4;
  if (v5)
  {
    v6 = v5 >> 5;
    v7 = this[99];
    v8 = this[98];
    v9 = (v8 - (AudioUnit)v2) >> 3;
    if (v6 > (v7 - v8) >> 3)
    {
      v10 = v9 + v6;
      if ((v9 + v6) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v11 = v7 - (AudioUnit)v2;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          goto LABEL_79;
        v13 = (OpaqueAudioComponentInstance *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v23 = 0;
      v24 = 8 * v6;
      v25 = (char *)v13 + 8 * v6;
      do
      {
        *(_QWORD *)((char *)v13 + v23) = 0;
        v23 += 8;
      }
      while (v24 != v23);
      v26 = (OpaqueAudioComponentInstance *)((char *)v13 + 8 * v12);
      if (v8 != (AudioUnit)v2)
        memmove(v25, v2, v8 - (AudioUnit)v2);
      this[97] = v13;
      this[98] = (AudioUnit)&v25[8 * v9];
      this[99] = v26;
      if (v2)
        operator delete(v2);
      goto LABEL_38;
    }
    if (v6 <= v9)
    {
      v15 = this[98];
      v9 = v6;
    }
    else
    {
      v14 = 0;
      v15 = (AudioUnit)((char *)v8 + 8 * (v6 - v9));
      do
      {
        *(_QWORD *)((char *)v8 + v14) = v56;
        v14 += 8;
      }
      while (8 * v6 - 8 * v9 != v14);
      this[98] = v15;
      if (v8 == (AudioUnit)v2)
        goto LABEL_38;
    }
    v16 = (OpaqueAudioComponentInstance *)((char *)v2 + 8 * v6);
    v17 = (uint64_t *)((char *)v15 - 8 * v6);
    v18 = v15;
    if (v17 < (uint64_t *)v8)
    {
      v18 = v15;
      do
      {
        v19 = *v17++;
        *(_QWORD *)v18 = v19;
        v18 = (OpaqueAudioComponentInstance *)((char *)v18 + 8);
      }
      while (v17 < (uint64_t *)v8);
    }
    this[98] = v18;
    if (v15 != v16)
      memmove((char *)v15 - 8 * ((v15 - v16) >> 3), v2, v15 - v16);
    v20 = &v56;
    if (v2 <= &v56)
    {
      if (this[98] <= (AudioUnit)&v56)
        v21 = 0;
      else
        v21 = v6;
      v20 = (__int128 *)((char *)&v56 + 8 * v21);
    }
    v22 = *(_QWORD *)v20;
    do
    {
      *(_QWORD *)v2 = v22;
      v2 = (__int128 *)((char *)v2 + 8);
      --v9;
    }
    while (v9);
  }
LABEL_38:
  v27 = (__int128 *)this[100];
  v29 = this[11];
  v28 = this[12];
  *(_QWORD *)&v56 = 0;
  v30 = v28 - v29;
  if (!v30)
    goto LABEL_71;
  v31 = v30 >> 5;
  v32 = this[102];
  v33 = this[101];
  v34 = (v33 - (AudioUnit)v27) >> 3;
  if (v31 > (v32 - v33) >> 3)
  {
    v35 = v34 + v31;
    if ((v34 + v31) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v36 = v32 - (AudioUnit)v27;
    if (v36 >> 2 > v35)
      v35 = v36 >> 2;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (!v37)
    {
      v38 = 0;
LABEL_65:
      v46 = 0;
      v47 = 8 * v31;
      v48 = (char *)v38 + 8 * v31;
      do
      {
        *(_QWORD *)((char *)v38 + v46) = 0;
        v46 += 8;
      }
      while (v47 != v46);
      v49 = (OpaqueAudioComponentInstance *)((char *)v38 + 8 * v37);
      if (v33 != (AudioUnit)v27)
        memmove(v48, v27, v33 - (AudioUnit)v27);
      this[100] = v38;
      this[101] = (AudioUnit)&v48[8 * v34];
      this[102] = v49;
      if (v27)
        operator delete(v27);
      goto LABEL_71;
    }
    if (!(v37 >> 61))
    {
      v38 = (OpaqueAudioComponentInstance *)operator new(8 * v37);
      goto LABEL_65;
    }
LABEL_79:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  if (v31 <= v34)
  {
    v40 = this[101];
    v34 = v31;
  }
  else
  {
    v39 = 0;
    v40 = (AudioUnit)((char *)v33 + 8 * (v31 - v34));
    do
    {
      *(_QWORD *)((char *)v33 + v39) = 0;
      v39 += 8;
    }
    while (8 * v31 - 8 * v34 != v39);
    this[101] = v40;
    if (v33 == (AudioUnit)v27)
      goto LABEL_71;
  }
  v41 = (OpaqueAudioComponentInstance *)((char *)v27 + 8 * v31);
  v42 = (uint64_t *)((char *)v40 - 8 * v31);
  v43 = v40;
  if (v42 < (uint64_t *)v33)
  {
    v43 = v40;
    do
    {
      v44 = *v42++;
      *(_QWORD *)v43 = v44;
      v43 = (OpaqueAudioComponentInstance *)((char *)v43 + 8);
    }
    while (v42 < (uint64_t *)v33);
  }
  this[101] = v43;
  if (v40 != v41)
    memmove((char *)v40 - 8 * ((v40 - v41) >> 3), v27, v40 - v41);
  v45 = v56;
  if (v27 > &v56)
    v45 = 0;
  do
  {
    *(_QWORD *)v27 = v45;
    v27 = (__int128 *)((char *)v27 + 8);
    --v34;
  }
  while (v34);
LABEL_71:
  if (((this[9] - this[8]) & 0x1FFFFFFFE0) != 0)
  {
    v50 = 0;
    do
    {
      LODWORD(v56) = 0;
      (*((void (**)(AudioUnit *, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *))*this + 39))(this, 51, 1, v50, 4, &v56);
      v50 = (v50 + 1);
    }
    while (v50 < ((unint64_t)(this[9] - this[8]) >> 5));
  }
  if (((this[12] - this[11]) & 0x1FFFFFFFE0) != 0)
  {
    v51 = 0;
    do
    {
      LODWORD(v56) = 0;
      (*((void (**)(AudioUnit *, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *))*this + 39))(this, 51, 2, v51, 4, &v56);
      v51 = (v51 + 1);
    }
    while (v51 < ((unint64_t)(this[12] - this[11]) >> 5));
  }
  result = AudioUnitInitialize(this[106]);
  if ((_DWORD)result)
  {
    v53 = result;
    std::string::basic_string[abi:ne180100]<0>(&v56, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v55, "initialize");
    std::operator+<char>();
    DSPGraph::ThrowException(v53, &v56, 1997, &v55, &v54);
  }
  return result;
}

void sub_18EE20EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

OSStatus AudioComponentInstanceNew(AudioComponent inComponent, AudioComponentInstance *outInstance)
{
  AudioComponent v3;
  uint64_t (***v4)(_QWORD);
  int v5;
  BOOL v6;
  OSStatus v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v13[7];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (outInstance)
  {
    v3 = inComponent;
    *outInstance = 0;
    v14 = 0;
    v15 = &v14;
    v16 = 0x2000000000;
    v17 = 0;
    if (inComponent
      && (v4 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(AudioComponent))inComponent)(inComponent)) != 0
      && (*(_BYTE *)((**v4)(v4) + 48) & 8) != 0)
    {
      v9 = (**(uint64_t (***)(AudioComponent))v3)(v3);
      if (v9 && (v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9)) != 0 && *(_QWORD *)(v10 + 200))
      {
        v5 = 0;
        v3 = *(AudioComponent *)(v10 + 200);
      }
      else
      {
        if (!AllowUnsafeMainThreadServicing("AudioComponentInstanceNew"))
        {
          v7 = -10863;
LABEL_21:
          _Block_object_dispose(&v14, 8);
          return v7;
        }
        v5 = 1;
      }
    }
    else
    {
      v5 = 0;
    }
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 0x40000000;
    v13[2] = __AudioComponentInstanceNew_block_invoke;
    v13[3] = &unk_1E2921C10;
    v13[5] = v3;
    v13[6] = outInstance;
    v13[4] = &v14;
    if (v5)
      v6 = Synchronously_ServicingMainRunLoop((uint64_t)v13);
    else
      v6 = Synchronously((uint64_t)v13);
    if (!v6)
    {
      if (gAudioComponentLogCategory)
      {
        v8 = *(NSObject **)gAudioComponentLogCategory;
      }
      else
      {
        v11 = (_QWORD *)operator new();
        v11[1] = 0;
        v8 = os_log_create("com.apple.coreaudio", "audiocomp");
        *v11 = v8;
        gAudioComponentLogCategory = (uint64_t)v11;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v19 = "AudioComponentAPI.cpp";
        v20 = 1024;
        v21 = 358;
        _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Timeout running task synchronously", buf, 0x12u);
      }
    }
    v7 = *((_DWORD *)v15 + 6);
    goto LABEL_21;
  }
  return -50;
}

void sub_18EE21128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t Impl_AudioGetComponentInfo(OpaqueAudioComponent *a1, AudioComponentDescription *a2, const __CFString **a3)
{
  uint64_t (***v5)(_QWORD);
  uint64_t v6;
  __int128 v7;
  uint64_t result;

  if (!a1)
    return 4294964296;
  v5 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(OpaqueAudioComponent *))a1)(a1);
  if (!v5)
    return 4294964296;
  v6 = (**v5)(v5);
  if (a2)
  {
    v7 = *(_OWORD *)(v6 + 36);
    a2->componentFlagsMask = *(_DWORD *)(v6 + 52);
    *(_OWORD *)&a2->componentType = v7;
  }
  if (!a3)
    return 0;
  result = *(_QWORD *)(v6 + 64);
  if (result)
  {
    *a3 = (const __CFString *)result;
    CFRetain((CFTypeRef)result);
    return 0;
  }
  *a3 = 0;
  return result;
}

BOOL Synchronously(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  _QWORD v5[5];

  v2 = dispatch_semaphore_create(0);
  dispatch_retain(v2);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __Synchronously_block_invoke;
  v5[3] = &__block_descriptor_tmp_1022;
  v5[4] = v2;
  (*(void (**)(uint64_t, _QWORD *))(a1 + 16))(a1, v5);
  v3 = dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL) == 0;
  dispatch_release(v2);
  return v3;
}

void APComponent::newInstance(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  void (**v7)(id, _QWORD, uint64_t);
  void *v8;
  os_log_t v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_t v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  RenderContextChangeGenerator *v21;
  unint64_t *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  os_log_t v27;
  _QWORD *v28;
  NSObject *v29;
  const char *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  void (*v33)(uint64_t, RenderContextChangeGenerator *, uint64_t, _QWORD *);
  unsigned int v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  _QWORD v46[4];
  void (**v47)(id, _QWORD, uint64_t);
  uint64_t v48;
  RenderContextChangeGenerator *v49;
  _BYTE buf[18];
  __int16 v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = (void *)MEMORY[0x193FFEC70]();
  if (*(_BYTE *)(a1 + 72))
  {
    if (gAudioComponentLogCategory)
    {
      v9 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v11 = (_QWORD *)operator new();
      v11[1] = 0;
      v9 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v11 = v9;
      gAudioComponentLogCategory = (uint64_t)v11;
    }
    v12 = objc_retainAutorelease(v9);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_10;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "APComponent.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 322;
    v13 = "%25s:%-5d component is a zombie and cannot be instantiated";
LABEL_9:
    _os_log_impl(&dword_18EE07000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
LABEL_10:
    v10 = 0xFFFFFFFFLL;
LABEL_15:
    v7[2](v7, 0, v10);
    goto LABEL_16;
  }
  GlobalComponentPluginMgr((uint64_t *)buf);
  if (*(_QWORD *)(a1 + 104))
    v10 = 0;
  else
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (*(_QWORD *)buf)
    std::recursive_mutex::unlock(*(std::recursive_mutex **)buf);
  if ((_DWORD)v10)
    goto LABEL_15;
  *(_QWORD *)buf = a1 + 36;
  v14 = *(_QWORD *)(a1 + 104);
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  v15 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v14 + 48))(v14, buf);
  if (!v15)
  {
    if (gAudioComponentLogCategory)
    {
      v16 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v19 = (_QWORD *)operator new();
      v19[1] = 0;
      v16 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v19 = v16;
      gAudioComponentLogCategory = (uint64_t)v19;
    }
    v12 = objc_retainAutorelease(v16);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_10;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "APComponent.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 334;
    v13 = "%25s:%-5d null from factory proc";
    goto LABEL_9;
  }
  GlobalComponentPluginMgr((uint64_t *)buf);
  if (*(_QWORD *)(a1 + 112))
  {
    v10 = 0;
LABEL_33:
    v20 = 1;
    goto LABEL_34;
  }
  v17 = *(_DWORD *)(a1 + 36);
  if (HIWORD(v17) == 24949)
  {
    v18 = malloc_type_malloc(0xC8uLL, 0x8004055C35419uLL);
    *v18 = (*(uint64_t (**)(uint64_t))(v15 + 16))(1);
    v18[1] = (*(uint64_t (**)(uint64_t))(v15 + 16))(2);
    v18[2] = (*(uint64_t (**)(uint64_t))(v15 + 16))(3);
    v18[3] = (*(uint64_t (**)(uint64_t))(v15 + 16))(4);
    v18[4] = (*(uint64_t (**)(uint64_t))(v15 + 16))(5);
    v18[5] = (*(uint64_t (**)(uint64_t))(v15 + 16))(10);
    v18[6] = (*(uint64_t (**)(uint64_t))(v15 + 16))(11);
    v18[7] = (*(uint64_t (**)(uint64_t))(v15 + 16))(18);
    v18[8] = (*(uint64_t (**)(uint64_t))(v15 + 16))(15);
    v18[9] = (*(uint64_t (**)(uint64_t))(v15 + 16))(16);
    v18[10] = (*(uint64_t (**)(uint64_t))(v15 + 16))(6);
    v18[11] = (*(uint64_t (**)(uint64_t))(v15 + 16))(7);
    v18[12] = (*(uint64_t (**)(uint64_t))(v15 + 16))(17);
    v18[14] = (*(uint64_t (**)(uint64_t))(v15 + 16))(14);
    v18[13] = (*(uint64_t (**)(uint64_t))(v15 + 16))(9);
    v18[15] = (*(uint64_t (**)(uint64_t))(v15 + 16))(19);
    v18[16] = (*(uint64_t (**)(uint64_t))(v15 + 16))(20);
    v18[17] = (*(uint64_t (**)(uint64_t))(v15 + 16))(21);
    v18[18] = (*(uint64_t (**)(uint64_t))(v15 + 16))(513);
    v18[19] = (*(uint64_t (**)(uint64_t))(v15 + 16))(514);
    v18[20] = (*(uint64_t (**)(uint64_t))(v15 + 16))(257);
    v18[21] = (*(uint64_t (**)(uint64_t))(v15 + 16))(258);
    v18[22] = (*(uint64_t (**)(uint64_t))(v15 + 16))(261);
    v18[23] = (*(uint64_t (**)(uint64_t))(v15 + 16))(262);
    v18[24] = (*(uint64_t (**)(uint64_t))(v15 + 16))(263);
LABEL_32:
    v10 = 0;
    *(_QWORD *)(a1 + 112) = v18;
    goto LABEL_33;
  }
  if (v17 == 1633903715 || v17 == 1634037347 || v17 == 1633969507)
  {
    v18 = malloc_type_malloc(0x60uLL, 0x800408F261F10uLL);
    *v18 = (*(uint64_t (**)(uint64_t))(v15 + 16))(1);
    v18[1] = (*(uint64_t (**)(uint64_t))(v15 + 16))(2);
    v18[2] = (*(uint64_t (**)(uint64_t))(v15 + 16))(3);
    v18[3] = (*(uint64_t (**)(uint64_t))(v15 + 16))(4);
    v18[4] = (*(uint64_t (**)(uint64_t))(v15 + 16))(5);
    v18[5] = (*(uint64_t (**)(uint64_t))(v15 + 16))(6);
    v18[6] = (*(uint64_t (**)(uint64_t))(v15 + 16))(7);
    v18[7] = (*(uint64_t (**)(uint64_t))(v15 + 16))(8);
    v18[8] = (*(uint64_t (**)(uint64_t))(v15 + 16))(9);
    v18[9] = (*(uint64_t (**)(uint64_t))(v15 + 16))(10);
    v18[10] = (*(uint64_t (**)(uint64_t))(v15 + 16))(11);
    v18[11] = (*(uint64_t (**)(uint64_t))(v15 + 16))(12);
    goto LABEL_32;
  }
  v20 = 0;
  v10 = 4294967292;
LABEL_34:
  if (*(_QWORD *)buf)
    std::recursive_mutex::unlock(*(std::recursive_mutex **)buf);
  if ((v20 & 1) == 0)
  {
    if (gAudioComponentLogCategory)
    {
      v27 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v28 = (_QWORD *)operator new();
      v28[1] = 0;
      v27 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v28 = v27;
      gAudioComponentLogCategory = (uint64_t)v28;
    }
    v29 = objc_retainAutorelease(v27);
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "APComponent.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 341;
    v51 = 1024;
    v52 = v10;
    v30 = "%25s:%-5d error %d returned from createDispatchTable";
    goto LABEL_66;
  }
  v21 = (RenderContextChangeGenerator *)operator new();
  std::shared_ptr<APComponent>::shared_ptr[abi:ne180100]<APComponent,void>(buf, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v23 = *(void **)buf;
  v22 = *(unint64_t **)&buf[8];
  v21->mLastWorkgroup = off_1E29079B0;
  v21->mObserver = v23;
  v21[1].mLastWorkgroup = v22;
  if (v22)
  {
    v24 = v22 + 1;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v26 = *(std::__shared_weak_count **)&buf[8];
  }
  else
  {
    v26 = 0;
  }
  v21[1].mObserver = (id)v15;
  LOBYTE(v21[2].mLastWorkgroup) = 0;
  LOBYTE(v21[3].mLastWorkgroup) = 0;
  LODWORD(v21[3].mObserver) = 0;
  v21[4].mLastWorkgroup = 0;
  v21[4].mObserver = 0;
  LOBYTE(v21[5].mLastWorkgroup) = 0;
  LOBYTE(v21[5].mObserver) = 1;
  v21[6] = 0u;
  v21[7] = 0u;
  v21[8] = 0u;
  v21[9] = 0u;
  v21[10] = 0u;
  v21[11].mLastWorkgroup = 0;
  v21[11].mObserver = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::APMIDIRouter(void)::$_0>;
  v21[14].mLastWorkgroup = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::APMIDIRouter(void)::$_1>;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if ((*(_BYTE *)(a1 + 48) & 4) != 0 || a3)
  {
    v33 = (void (*)(uint64_t, RenderContextChangeGenerator *, uint64_t, _QWORD *))(*(uint64_t (**)(uint64_t))(v15 + 16))(0x7FFFLL);
    if (v33)
    {
      v46[0] = MEMORY[0x1E0C809B0];
      v46[1] = 3221225472;
      v46[2] = ___ZN11APComponent11newInstanceEjbU13block_pointerFvP28OpaqueAudioComponentInstanceiE_block_invoke;
      v46[3] = &unk_1E291A010;
      v48 = a1;
      v49 = v21;
      v47 = v7;
      v33(v15, v21, a2, v46);
      if (a3)
        v34 = 0x80000000;
      else
        v34 = 0x40000000;
      v35 = v34 | a2;
      v36 = (unsigned int *)(a1 + 136);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      v38 = (unsigned int *)(a1 + 140);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 | v35, v38));

      goto LABEL_16;
    }
  }
  LOBYTE(v21[5].mLastWorkgroup) = (int)a2 < 0;
  v10 = (*(uint64_t (**)(uint64_t, RenderContextChangeGenerator *))v15)(v15, v21);
  if ((_DWORD)v10)
  {
    (*((void (**)(RenderContextChangeGenerator *))v21->mLastWorkgroup + 3))(v21);
    v29 = objc_retainAutorelease((id)*AudioComponentLogCategory());
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "APComponent.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 371;
    v51 = 1024;
    v52 = v10;
    v30 = "%25s:%-5d error %d returned from Open";
LABEL_66:
    _os_log_impl(&dword_18EE07000, v29, OS_LOG_TYPE_ERROR, v30, buf, 0x18u);
    goto LABEL_15;
  }
  APComponentInstance::postOpen(v21);
  if (a3)
    v40 = 0x80000000;
  else
    v40 = 0x40000000;
  v41 = v40 | a2;
  v42 = (unsigned int *)(a1 + 136);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 + 1, v42));
  v44 = (unsigned int *)(a1 + 140);
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 | v41, v44));
  ((void (**)(id, RenderContextChangeGenerator *, uint64_t))v7)[2](v7, v21, 0);
LABEL_16:
  objc_autoreleasePoolPop(v8);

}

void sub_18EE21B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, std::recursive_mutex *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*),std::allocator<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*)>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

void APComponentInstance::postOpen(RenderContextChangeGenerator *this)
{
  OSStatus Property;
  void *v3;
  UInt32 ioDataSize;
  void *outData;

  if (*((_WORD *)this->mObserver + 19) == 24949)
  {
    outData = 0;
    ioDataSize = 8;
    Property = AudioUnitGetProperty((AudioUnit)this, 0x3Cu, 0, 0, &outData, &ioDataSize);
    v3 = outData;
    if (!Property)
    {
      if (outData)
      {
        std::optional<RenderContextChangeGenerator>::emplace[abi:ne180100]<void({block_pointer} {__strong}&)(AudioUnitRenderContext const*),void>(this + 2, &outData);
        v3 = outData;
      }
    }

  }
}

void sub_18EE21CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t DSPGraph::PropertyTap::process(DSPGraph::PropertyTap *this, DSPGraph::Box *a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned int v12;

  v4 = *((_QWORD *)this + 5);
  v12 = *((_DWORD *)this + 12) - v4;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, unsigned int *, uint64_t))(**(_QWORD **)this + 304))(*(_QWORD *)this, *((unsigned int *)this + 2), *((unsigned int *)this + 3), *((unsigned int *)this + 4), &v12, v4);
  if (v5)
  {
    v7 = v5;
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "process");
    std::string::basic_string[abi:ne180100]<0>(&v9, "getProperty failed");
    DSPGraph::ThrowException(v7, &v11, 830, &v10, &v9);
  }
  result = (*(uint64_t (**)(DSPGraph::Box *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 312))(a2, *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 8), v12, v4);
  if ((_DWORD)result)
  {
    v8 = result;
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "process");
    std::string::basic_string[abi:ne180100]<0>(&v9, "setProperty failed");
    DSPGraph::ThrowException(v8, &v11, 835, &v10, &v9);
  }
  return result;
}

void sub_18EE21E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUBox::setProperty(AudioUnit *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4, UInt32 inDataSize, const void *inData)
{
  return AudioUnitSetProperty(this[106], a2, a3, a4, inData, inDataSize);
}

uint64_t DSPGraph::AUBox::getProperty(AudioUnit *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4, unsigned int *a5, void *outData)
{
  uint64_t result;
  UInt32 ioDataSize;

  ioDataSize = *a5;
  result = AudioUnitGetProperty(this[106], a2, a3, a4, outData, &ioDataSize);
  *a5 = ioDataSize;
  return result;
}

OSStatus AudioUnitGetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, void *outData, UInt32 *ioDataSize)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (***v11)(_QWORD);
  uint64_t (***v12)(_QWORD);
  uint64_t v13;
  OSStatus result;
  int v15;

  if (!inUnit)
    return -50;
  v8 = *(_QWORD *)&inElement;
  v9 = *(_QWORD *)&inScope;
  v10 = *(_QWORD *)&inID;
  v11 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v11)
    return 560947818;
  v12 = v11;
  if (*(_WORD *)((**v11)(v11) + 38) != 24949)
    return -3000;
  if (!*(_QWORD *)(*(_QWORD *)((**v12)(v12) + 112) + 24))
    return -4;
  if (!v12[3])
    return -66740;
  v13 = (**v12)(v12);
  if ((_DWORD)v10 == 62)
  {
    result = 0;
    v15 = *((unsigned __int8 *)v12 + 80);
LABEL_18:
    *(_DWORD *)outData = v15;
    return result;
  }
  if (!*((_BYTE *)v12 + 88) || (_DWORD)v10 != 65)
    return (*(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t, void *, UInt32 *))(*(_QWORD *)(v13 + 112) + 24))(v12[3], v10, v9, v8, outData, ioDataSize);
  if (*ioDataSize == 4)
  {
    result = 0;
    v15 = *((_DWORD *)v12 + 26);
    goto LABEL_18;
  }
  return -10851;
}

void instantiate(uint64_t (***a1)(_QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  const AudioComponentDescription *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef cf;
  __int128 v19;
  CFTypeRef v20;

  if (a1 && (v7 = (**a1)(a1)) != 0)
  {
    v8 = v7;
    v9 = (const AudioComponentDescription *)(v7 + 36);
    (*(void (**)(CFTypeRef *__return_ptr))(*(_QWORD *)v7 + 104))(&v20);
    if (shouldLoadV2OutOfProcess(v9, a2, (id *)&v20))
    {
      APComponent::name((APComponent *)&cf, *(const void **)(v8 + 64));
      create_shared_APComponent_RemoteV2(&v19, (uint64_t)v9, &cf, *(_DWORD *)(v8 + 56), &v20);
      if (cf)
        CFRelease(cf);
      v10 = a2 | 2;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 88))(v19, v10, a3, a4);
      v11 = (unsigned int *)(v8 + 136);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = (unsigned int *)(v8 + 140);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 | v10, v13));
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 88))(v8, a2, a3, a4);
    }
    if (v20)
      CFRelease(v20);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a4, 0, 4294964296);
  }
}

void sub_18EE22198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va1);
  _Unwind_Resume(a1);
}

OSStatus AudioUnitInitialize(AudioUnit inUnit)
{
  uint64_t (***v1)(_QWORD);
  uint64_t (***v2)(_QWORD);
  uint64_t (*v3)(_QWORD);
  OSStatus result;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  void *v9;
  uint64_t (**v10)(_QWORD);
  uint64_t *v11;
  uint64_t (**v12)(_QWORD);
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t (**v19)(_QWORD);
  unint64_t v20;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t *v24;
  uint64_t (**v25)(_QWORD);
  unint64_t v26;
  uint64_t *v27;
  uint64_t (**v28)(_QWORD);
  int v29;
  int v30;
  uint64_t (**v31)();
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!inUnit)
    return -50;
  v1 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v1)
    return 560947818;
  v2 = v1;
  if (*(_WORD *)((**v1)(v1) + 38) != 24949)
    return -3000;
  v3 = **(uint64_t (***)(_QWORD))((**v2)(v2) + 112);
  if (!v3)
    return -4;
  result = v3(v2[3]);
  if (result)
    return result;
  if (!v2[3])
    return -66740;
  v5 = *(_QWORD *)((**v2)(v2) + 112);
  if (*(_QWORD *)(v5 + 160) | *(_QWORD *)(v5 + 192))
  {
    v29 = 0;
    v30 = 4;
    v6 = (*(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, _QWORD, _QWORD, int *, int *))(v5 + 24))(v2[3], 64, 0, 0, &v29, &v30);
    v7 = v29;
    if (v6)
      v7 = 0;
    v29 = v7;
    *((_DWORD *)v2 + 27) = v7;
    v2[12] = (uint64_t (**)(_QWORD))v5;
    if (*(_QWORD *)(v5 + 192))
    {
      v2[28][3](v2 + 29);
      v2[28] = (uint64_t (**)(_QWORD))&caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::empty;
    }
    else
    {
      v31 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_0>;
      caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=((uint64_t *)v2 + 28, (uint64_t *)&v31);
      ((void (*)(std::__shared_weak_count **))v31[3])(&v32);
    }
    v8 = *((_DWORD *)v2 + 27);
    if ((v8 - 1) <= 1)
    {
      v9 = (void *)operator new();
      bzero(v9, 0xB24uLL);
      v10 = v2[14];
      v2[14] = (uint64_t (**)(_QWORD))v9;
      if (v10)
        MEMORY[0x193FFE460](v10, 0x1000C40F03D91BDLL);
      v8 = *((_DWORD *)v2 + 27);
    }
    if (v8 == 2)
    {
      v14 = (std::__shared_weak_count *)operator new(0x840uLL);
      v14->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      v14->__shared_weak_owners_ = 0;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917A98;
      bzero(&v14[1], 0x824uLL);
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
      v31 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5>;
      v32 = v14 + 1;
      v33 = v14;
      caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=((uint64_t *)v2 + 23, (uint64_t *)&v31);
      ((void (*)(std::__shared_weak_count **))v31[3])(&v32);
      v25 = v2[28];
      v24 = (uint64_t *)(v2 + 28);
      if (!*((_BYTE *)v25 + 32))
      {
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
        v31 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>;
        v32 = v14 + 1;
        v33 = v14;
        caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v24, (uint64_t *)&v31);
        ((void (*)(std::__shared_weak_count **))v31[3])(&v32);
      }
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
    }
    else
    {
      if (v8 != 1)
      {
        if (v8)
        {
          v31 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_7>;
          caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=((uint64_t *)v2 + 23, (uint64_t *)&v31);
          ((void (*)(std::__shared_weak_count **))v31[3])(&v32);
          v28 = v2[28];
          v27 = (uint64_t *)(v2 + 28);
          if (!*((_BYTE *)v28 + 32))
          {
            v31 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_8>;
            caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v27, (uint64_t *)&v31);
            ((void (*)(std::__shared_weak_count **))v31[3])(&v32);
          }
        }
        else
        {
          v31 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_1>;
          caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=((uint64_t *)v2 + 23, (uint64_t *)&v31);
          ((void (*)(std::__shared_weak_count **))v31[3])(&v32);
          v12 = v2[28];
          v11 = (uint64_t *)(v2 + 28);
          if (!*((_BYTE *)v12 + 32))
          {
            v31 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_2>;
            caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v11, (uint64_t *)&v31);
            ((void (*)(std::__shared_weak_count **))v31[3])(&v32);
          }
        }
        return 0;
      }
      v13 = (std::__shared_weak_count *)operator new(0x20uLL);
      v14 = v13;
      v13->__shared_owners_ = 0;
      v15 = (unint64_t *)&v13->__shared_owners_;
      v13->__shared_weak_owners_ = 0;
      v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917A60;
      LOBYTE(v13[1].__vftable) = 0;
      v16 = v13 + 1;
      do
        v17 = __ldxr(v15);
      while (__stxr(v17 + 1, v15));
      v31 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3>;
      v32 = v13 + 1;
      v33 = v13;
      caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=((uint64_t *)v2 + 23, (uint64_t *)&v31);
      ((void (*)(std::__shared_weak_count **))v31[3])(&v32);
      v19 = v2[28];
      v18 = (uint64_t *)(v2 + 28);
      if (!*((_BYTE *)v19 + 32))
      {
        do
          v20 = __ldxr(v15);
        while (__stxr(v20 + 1, v15));
        v31 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4>;
        v32 = v16;
        v33 = v14;
        caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v18, (uint64_t *)&v31);
        ((void (*)(std::__shared_weak_count **))v31[3])(&v32);
      }
      do
        v21 = __ldaxr(v15);
      while (__stlxr(v21 - 1, v15));
    }
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return 0;
}

void sub_18EE22680(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Box::initialize(DSPGraph::Box *this)
{
  const __CFAllocator *v1;
  CFAllocatorRef v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  int i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  _QWORD *v43;
  int j;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  const UInt8 *v59;
  CFIndex v60;
  CFURLRef v61;
  OSStatus v62;
  OpaqueExtAudioFile *v63;
  OSStatus Property;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int **v76;
  OSStatus v77;
  OSStatus v78;
  UInt32 v79;
  uint64_t v80;
  int v81;
  _DWORD *v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  size_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t result;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::runtime_error *exception;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  CFAllocatorRef allocator;
  const __CFAllocator *allocatora;
  uint64_t *v104;
  CFURLRef inURL[3];
  __int128 v106[2];
  uint64_t v107;
  UInt32 ioNumberFrames;
  UInt32 ioPropertyDataSize;
  unint64_t outPropertyData;
  ExtAudioFileRef outExtAudioFile;
  __int128 v112;
  __int128 v113[2];

  v1 = (const __CFAllocator *)*((_QWORD *)this + 25);
  v2 = (CFAllocatorRef)*((_QWORD *)this + 26);
  if (v1 != v2)
  {
    v3 = (_QWORD *)&unk_1EE168000;
    allocator = (CFAllocatorRef)*((_QWORD *)this + 26);
    do
    {
      v4 = *(_QWORD *)v1;
      v5 = *(_QWORD **)(*(_QWORD *)v1 + 8);
      v6 = (uint64_t *)v5[15];
      if (*((_DWORD *)v6 + 2) == 1718773105)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[4] + 16) + 8) + 16);
        v8 = *(_DWORD *)(v7 + 268);
        if (v8 == 1)
          v8 = *(_DWORD *)(v7 + 272);
        v9 = *((_DWORD *)v6 + 7);
        v10 = (_QWORD *)(v4 + 48);
        std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::reserve((_QWORD *)(v4 + 48), v9);
        if (v9)
        {
          for (i = 0; i != v9; ++i)
          {
            *(_QWORD *)&v113[0] = 0;
            VPTimeFreqConverter_Create(1, v8, (uint64_t *)v113);
            v13 = *(_QWORD **)(v4 + 56);
            v12 = *(_QWORD *)(v4 + 64);
            if ((unint64_t)v13 >= v12)
            {
              v15 = (_QWORD *)*v10;
              v16 = ((uint64_t)v13 - *v10) >> 3;
              v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 61)
LABEL_101:
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v18 = v12 - (_QWORD)v15;
              if (v18 >> 2 > v17)
                v17 = v18 >> 2;
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
                v19 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v19 = v17;
              v107 = v4 + 64;
              if (v19)
              {
                v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v19);
                v15 = *(_QWORD **)(v4 + 48);
                v13 = *(_QWORD **)(v4 + 56);
              }
              else
              {
                v20 = 0;
              }
              v21 = (_QWORD *)(v19 + 8 * v16);
              v22 = v19 + 8 * v20;
              *((_QWORD *)&v106[1] + 1) = v22;
              *v21 = *(_QWORD *)&v113[0];
              *(_QWORD *)&v106[1] = v21 + 1;
              if (v13 == v15)
              {
                v14 = v21 + 1;
              }
              else
              {
                do
                {
                  v23 = *--v13;
                  *v13 = 0;
                  *--v21 = v23;
                }
                while (v13 != v15);
                v22 = *((_QWORD *)&v106[1] + 1);
                v14 = *(_QWORD **)&v106[1];
              }
              v24 = *(_OWORD *)(v4 + 48);
              *(_QWORD *)(v4 + 48) = v21;
              *(_QWORD *)(v4 + 56) = v14;
              *(__int128 *)((char *)v106 + 8) = v24;
              v25 = *(_QWORD *)(v4 + 64);
              *(_QWORD *)(v4 + 64) = v22;
              *((_QWORD *)&v106[1] + 1) = v25;
              *(_QWORD *)&v106[0] = v24;
              std::__split_buffer<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::~__split_buffer((uint64_t)v106);
            }
            else
            {
              *v13 = *(_QWORD *)&v113[0];
              v14 = v13 + 1;
            }
            *(_QWORD *)(v4 + 56) = v14;
          }
        }
        v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 32) + 16) + 8) + 16);
        v27 = *(_DWORD *)(v26 + 268);
        if (v27 == 1)
          v27 = *(_DWORD *)(v26 + 272);
        DSPGraph::SimpleABL::alloc((DSPGraph::SimpleABL *)(v4 + 72), v9, 4 * v27, 0);
        v5 = *(_QWORD **)(v4 + 8);
        v6 = (uint64_t *)v5[15];
        v2 = allocator;
        v3 = &unk_1EE168000;
      }
      v28 = (_QWORD *)(v4 + 24);
      if (*(char *)(v4 + 47) < 0)
        v28 = (_QWORD *)*v28;
      v107 = 0;
      memset(v106, 0, sizeof(v106));
      v29 = *v6;
      v30 = *((_DWORD *)v6 + 7);
      if (*((_DWORD *)v6 + 2) == 1718773105)
      {
        *((_QWORD *)&v106[0] + 1) = 0x296C70636DLL;
        *(_QWORD *)&v106[1] = 0x100000004;
        DWORD2(v106[1]) = 4;
        LODWORD(v107) = 32;
        v5 = *(_QWORD **)(v4 + 8);
      }
      else
      {
        v31 = v6[4];
        DWORD2(v106[0]) = *((_DWORD *)v6 + 2);
        *(__int128 *)((char *)v106 + 12) = *(_OWORD *)((char *)v6 + 12);
        v107 = v31;
      }
      *(_QWORD *)&v106[0] = v29;
      HIDWORD(v106[1]) = v30;
      v32 = *(_QWORD *)(v4 + 96);
      v33 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v5[1] + 8) + 8) + 940);
      if (v3[196] != -1)
        dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_5422);
      if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction)
        v34 = NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(v32, 0, v28, v33, 0, v106);
      else
        v34 = 0;
      v35 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 16) = v34;
      if (v35)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v34 = *(_QWORD *)(v4 + 16);
      }
      if (!v34)
      {
        std::string::basic_string[abi:ne180100]<0>(v113, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v112, "initialize");
        std::string::basic_string[abi:ne180100]<0>(inURL, "NewAudioCapturer returned null");
        DSPGraph::ThrowException(1852204065, v113, 259, &v112, (__int128 *)inURL);
      }
      v1 = (const __CFAllocator *)((char *)v1 + 8);
    }
    while (v1 != v2);
  }
  v36 = (uint64_t *)*((_QWORD *)this + 28);
  v104 = (uint64_t *)*((_QWORD *)this + 29);
  if (v36 != v104)
  {
    allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v37 = *v36;
      v38 = *(_QWORD *)(*v36 + 8);
      v39 = *(_QWORD *)(v38 + 120);
      if (*(_DWORD *)(v39 + 8) == 1718773105)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 32) + 16) + 8) + 16);
        v41 = *(_DWORD *)(v40 + 268);
        if (v41 == 1)
          v41 = *(_DWORD *)(v40 + 272);
        v42 = *(_DWORD *)(v39 + 28);
        v43 = (_QWORD *)(v37 + 80);
        std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::reserve((_QWORD *)(v37 + 80), v42);
        if (v42)
        {
          for (j = 0; j != v42; ++j)
          {
            *(_QWORD *)&v113[0] = 0;
            VPTimeFreqConverter_Create(0, v41, (uint64_t *)v113);
            v46 = *(_QWORD **)(v37 + 88);
            v45 = *(_QWORD *)(v37 + 96);
            if ((unint64_t)v46 >= v45)
            {
              v48 = (_QWORD *)*v43;
              v49 = ((uint64_t)v46 - *v43) >> 3;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 61)
                goto LABEL_101;
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 2 > v50)
                v50 = v51 >> 2;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              v107 = v37 + 96;
              if (v52)
              {
                v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v52);
                v48 = *(_QWORD **)(v37 + 80);
                v46 = *(_QWORD **)(v37 + 88);
              }
              else
              {
                v53 = 0;
              }
              v54 = (_QWORD *)(v52 + 8 * v49);
              v55 = v52 + 8 * v53;
              *((_QWORD *)&v106[1] + 1) = v55;
              *v54 = *(_QWORD *)&v113[0];
              *(_QWORD *)&v106[1] = v54 + 1;
              if (v46 == v48)
              {
                v47 = v54 + 1;
              }
              else
              {
                do
                {
                  v56 = *--v46;
                  *v46 = 0;
                  *--v54 = v56;
                }
                while (v46 != v48);
                v55 = *((_QWORD *)&v106[1] + 1);
                v47 = *(_QWORD **)&v106[1];
              }
              v57 = *(_OWORD *)(v37 + 80);
              *(_QWORD *)(v37 + 80) = v54;
              *(_QWORD *)(v37 + 88) = v47;
              *(__int128 *)((char *)v106 + 8) = v57;
              v58 = *(_QWORD *)(v37 + 96);
              *(_QWORD *)(v37 + 96) = v55;
              *((_QWORD *)&v106[1] + 1) = v58;
              *(_QWORD *)&v106[0] = v57;
              std::__split_buffer<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::~__split_buffer((uint64_t)v106);
            }
            else
            {
              *v46 = *(_QWORD *)&v113[0];
              v47 = v46 + 1;
            }
            *(_QWORD *)(v37 + 88) = v47;
          }
        }
      }
      if (*(char *)(v37 + 71) < 0)
      {
        v59 = *(const UInt8 **)(v37 + 48);
        v60 = *(_QWORD *)(v37 + 56);
      }
      else
      {
        v59 = (const UInt8 *)(v37 + 48);
        v60 = *(unsigned __int8 *)(v37 + 71);
      }
      v61 = CFURLCreateFromFileSystemRepresentation(allocatora, v59, v60, 0);
      applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)inURL, v61);
      if (!inURL[0])
      {
        std::string::basic_string[abi:ne180100]<0>(v106, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(v113, "readFile");
        std::string::basic_string[abi:ne180100]<0>(&v112, "couldn't convert path to CFURLRef");
        DSPGraph::ThrowException(-4960, v106, 100, v113, &v112);
      }
      outExtAudioFile = 0;
      v62 = ExtAudioFileOpenURL(inURL[0], &outExtAudioFile);
      if (v62)
      {
        std::string::basic_string[abi:ne180100]<0>(v106, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(v113, "readFile");
        std::string::basic_string[abi:ne180100]<0>(&v112, "ExtAudioFileOpenURL failed");
        DSPGraph::ThrowException(v62, v106, 105, v113, &v112);
      }
      v63 = outExtAudioFile;
      outPropertyData = 0;
      ioPropertyDataSize = 8;
      Property = ExtAudioFileGetProperty(outExtAudioFile, 0x2366726Du, &ioPropertyDataSize, &outPropertyData);
      if (Property)
      {
        std::string::basic_string[abi:ne180100]<0>(v106, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(v113, "readFile");
        std::string::basic_string[abi:ne180100]<0>(&v112, "ExtAudioFileGetProperty(FileLengthFrames) failed");
        DSPGraph::ThrowException(Property, v106, 113, v113, &v112);
      }
      v65 = outPropertyData;
      if ((outPropertyData & 0x8000000000000000) != 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "numerical cast overflow: could not retain value in conversion type");
        exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5030] + 16);
      }
      v66 = *(_QWORD *)(v37 + 8);
      v67 = *(_QWORD *)(v66 + 120);
      *(_DWORD *)(v37 + 36) = *(_DWORD *)(v67 + 24);
      v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 32) + 16) + 8) + 16);
      v69 = *(unsigned int *)(v68 + 268);
      if ((_DWORD)v69 == 1)
        v69 = *(unsigned int *)(v68 + 272);
      v70 = *(_DWORD *)(v67 + 28);
      v71 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(v65);
      v72 = v65 + v69;
      *(_DWORD *)(v37 + 40) = v71;
      v73 = *(_DWORD *)(v37 + 36);
      v74 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(v72);
      v75 = caulk::numeric::exceptional_mul<unsigned int>(v73, v74);
      v76 = (unsigned int **)(v37 + 16);
      DSPGraph::SimpleABL::alloc((DSPGraph::SimpleABL *)(v37 + 16), v70, v75, 0);
      v77 = ExtAudioFileSetProperty(outExtAudioFile, 0x63666D74u, 0x28u, *(const void **)(*(_QWORD *)(v37 + 8) + 120));
      if (v77)
      {
        std::string::basic_string[abi:ne180100]<0>(v106, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(v113, "readFile");
        std::string::basic_string[abi:ne180100]<0>(&v112, "ExtAudioFileSetProperty(ClientDataFormat) failed");
        DSPGraph::ThrowException(v77, v106, 120, v113, &v112);
      }
      ioNumberFrames = *(_DWORD *)(v37 + 40);
      v78 = ExtAudioFileRead(outExtAudioFile, &ioNumberFrames, *(AudioBufferList **)(v37 + 16));
      if (v78)
      {
        std::string::basic_string[abi:ne180100]<0>(v106, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(v113, "readFile");
        std::string::basic_string[abi:ne180100]<0>(&v112, "ExtAudioFileRead failed");
        DSPGraph::ThrowException(v78, v106, 127, v113, &v112);
      }
      v79 = ioNumberFrames;
      *(_DWORD *)(v37 + 40) = ioNumberFrames;
      v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 8) + 32) + 16) + 8) + 16);
      v81 = *(_DWORD *)(v80 + 268);
      if (v81 == 1)
        v81 = *(_DWORD *)(v80 + 272);
      v82 = *v76;
      if (*v76 && *v82)
      {
        v83 = 0;
        v84 = *(_DWORD *)(v37 + 36);
        v85 = v84 * v79;
        v86 = (v81 * v84);
        v87 = 4;
        do
        {
          bzero((void *)(*(_QWORD *)&v82[v87] + v85), v86);
          ++v83;
          v82 = *v76;
          v87 += 4;
        }
        while (v83 < **v76);
      }
      if (v63)
        ExtAudioFileDispose(v63);
      if (inURL[0])
        CFRelease(inURL[0]);
      *(_DWORD *)(v37 + 32) = 0;
      ++v36;
    }
    while (v36 != v104);
  }
  (*(void (**)(DSPGraph::Box *))(*(_QWORD *)this + 592))(this);
  v88 = (uint64_t *)*((_QWORD *)this + 39);
  v89 = (uint64_t *)*((_QWORD *)this + 40);
  while (v88 != v89)
  {
    v90 = *v88++;
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 128))(v90);
  }
  result = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 440))(this);
  if ((result & 1) == 0)
  {
    v93 = *((_QWORD *)this + 8);
    v92 = *((_QWORD *)this + 9);
    while (v93 != v92)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 40))(v93);
      if (*(_DWORD *)(*(_QWORD *)(result + 120) + 8) == 1718773105)
      {
        std::string::basic_string[abi:ne180100]<0>(v106, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(v113, "initialize");
        v97 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v97 = (_QWORD *)*v97;
        v98 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 16))(this);
        DSPGraph::strprintf((DSPGraph *)"frequency data is passed through a No Frequency Safe Box-> %s %s", &v112, v97, v98);
        DSPGraph::ThrowException(1718773025, v106, 118, v113, &v112);
      }
      v93 += 32;
    }
    v95 = *((_QWORD *)this + 11);
    v94 = *((_QWORD *)this + 12);
    while (v95 != v94)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 40))(v95);
      if (*(_DWORD *)(*(_QWORD *)(result + 120) + 8) == 1718773105)
      {
        std::string::basic_string[abi:ne180100]<0>(v106, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(v113, "initialize");
        v99 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v99 = (_QWORD *)*v99;
        v100 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 16))(this);
        DSPGraph::strprintf((DSPGraph *)"frequency data is passed through a No Frequency Safe Box-> %s %s", &v112, v99, v100);
        DSPGraph::ThrowException(1718773025, v106, 124, v113, &v112);
      }
      v95 += 32;
    }
  }
  return result;
}

void sub_18EE23110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  OpaqueExtAudioFile *v37;
  uint64_t v38;

  if (a37 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 105) < 0)
    operator delete(*(void **)(v38 - 128));
  if (a25 < 0)
    operator delete(a20);
  if (v37)
    ExtAudioFileDispose(v37);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::initializeAnalysis(DSPGraph::Box *this)
{
  uint64_t *v2;
  char *v3;
  unsigned __int128 *v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  DSPGraph::Box *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int value;
  uint64_t i;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int128 *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  char v38;
  int v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  std::mutex *v45;
  uint64_t v46;
  unsigned __int128 *v47;
  uint64_t *v48;
  DSPGraph::Box *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v45 = (std::mutex *)((char *)this + 248);
  std::mutex::lock((std::mutex *)((char *)this + 248));
  v2 = (uint64_t *)*((_QWORD *)this + 39);
  v48 = (uint64_t *)*((_QWORD *)this + 40);
  v49 = this;
  if (v2 == v48)
  {
LABEL_56:
    std::mutex::unlock(v45);
    return;
  }
  v3 = (char *)this + 336;
  v4 = (unsigned __int128 *)((char *)this + 560);
  v47 = (unsigned __int128 *)((char *)this + 560);
  while (1)
  {
    v5 = *(_DWORD *)(*v2 + 24);
    caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal(v4);
    LODWORD(v52) = v5;
    v6 = *(_DWORD *)(caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le>((uint64_t)v3, &v52, 0)+ 8);
    caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v4);
    if (v6 != v5)
      break;
LABEL_55:
    if (++v2 == v48)
      goto LABEL_56;
  }
  v7 = *(unsigned int *)(*v2 + 80);
  v8 = *((_QWORD *)v49 + 11);
  if (v7 >= (*((_QWORD *)v49 + 12) - v8) >> 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v51, "out");
    v43 = (_QWORD *)((char *)v49 + 32);
    if (*((char *)v49 + 55) < 0)
      v43 = (_QWORD *)*v43;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v50, v43, (uint64_t)(*((_QWORD *)v49 + 12) - *((_QWORD *)v49 + 11)) >> 5, v7);
    DSPGraph::ThrowException(1919837985, &v52, 1418, &v51, &v50);
  }
  if (!(*(uint64_t (**)(unint64_t))(*(_QWORD *)(v8 + 32 * v7) + 40))(v8 + 32 * v7))
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v51, "initializeAnalysis");
    std::string::basic_string[abi:ne180100]<0>(&v50, "Box::initializeAnalysis, Port Not Connected to Box.");
    DSPGraph::ThrowException(1970168609, &v52, 153, &v51, &v50);
  }
  *(_QWORD *)(*v2 + 16) = v49;
  v9 = *((_QWORD *)v49 + 11);
  if (v7 >= (*((_QWORD *)v49 + 12) - v9) >> 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v51, "out");
    v44 = (_QWORD *)((char *)v49 + 32);
    if (*((char *)v49 + 55) < 0)
      v44 = (_QWORD *)*v44;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v50, v44, (uint64_t)(*((_QWORD *)v49 + 12) - *((_QWORD *)v49 + 11)) >> 5, v7);
    DSPGraph::ThrowException(1919837985, &v52, 1418, &v51, &v50);
  }
  v10 = *v2;
  *(_QWORD *)(v10 + 8) = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v9 + 32 * v7) + 40))(v9 + 32 * v7);
  v11 = *v2;
  v12 = *(_DWORD *)(*v2 + 24);
  if (*((_DWORD *)v49 + 86) < v12)
  {
    v13 = v49;
    if (*((_DWORD *)v49 + 132) > v12)
    {
      caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal(v4);
      LODWORD(v52) = v12;
      v14 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le>((uint64_t)v3, &v52, 0);
      if (*(_DWORD *)(v14 + 8) != v12)
      {
        v16 = v14;
        v17 = v15;
        v18 = 0;
        value = 0;
        for (i = 1; i != 9; ++i)
        {
          if (i == 1)
          {
            caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::random_engine();
            value = caulk::multi_simple_random<unsigned int,4ul,std::uniform_int_distribution<unsigned int>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::next_value((uint64_t)&caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::random_engine(void)::engine);
            v18 = 3;
          }
          if ((v18 & ~value) != 0)
            break;
          v18 *= 4;
        }
        v21 = 0;
        while (1)
        {
          v22 = *(_QWORD *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * v21];
          if (v22 >= *(_QWORD *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * i - 8])
            break;
          if (++v21 == 10)
          {
            v23 = 0;
            goto LABEL_24;
          }
        }
        v24 = (unsigned __int128 *)(*((_QWORD *)v49 + 72) + 64 + 32 * v21);
        v46 = *((_QWORD *)v49 + 72);
        v25 = caulk::concurrent::stack<caulk::alloc::free_block,caulk::concurrent::intrusive_single_link_node<caulk::alloc::free_block>>::pop(v24);
        if (v25)
        {
          v23 = (unint64_t)v25;
          v26 = (unint64_t *)(v24 + 1);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          v13 = v49;
        }
        else
        {
          v13 = v49;
          v23 = caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::allocate(v46, v22);
        }
LABEL_24:
        *(_BYTE *)(v23 + 12) = i;
        *(_WORD *)(v23 + 13) = 1;
        *(_BYTE *)(v23 + 15) = i;
        *(_DWORD *)(v23 + 8) = v12;
        *(_QWORD *)v23 = v11;
        *(_QWORD *)(v23 + 24) = 0;
        *(_QWORD *)(v23 + 32) = 0;
        *(_QWORD *)(v23 + 16) = 0;
        if ((_BYTE)i)
        {
          v28 = (unint64_t *)(v23 + 32);
          v29 = i;
          do
          {
            atomic_store(0, v28 - 1);
            atomic_store(0, v28);
            v28 += 2;
            --v29;
          }
          while (v29);
        }
        v30 = 0;
        __dmb(0xBu);
        while (1)
        {
          if (*(_DWORD *)(v16 + 8) == *(_DWORD *)(v23 + 8))
          {
            v31 = 0;
          }
          else
          {
            do
            {
              v32 = (unint64_t *)(v16 + 16 * v30 + 24);
              v33 = atomic_load(v32);
              if ((v33 & 2) != 0)
              {
                caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged((uint64_t)v3, v30, v16, v33 & 0xFFFFFFFFFFFFFFFCLL);
              }
              else
              {
                atomic_store(v17, (unint64_t *)(v23 + 16 * v30 + 24));
                v34 = __ldaxr(v32);
                if (v34 == v17)
                {
                  if (!__stlxr(v23, v32))
                  {
                    v31 = v23;
                    goto LABEL_48;
                  }
                }
                else
                {
                  __clrex();
                }
                if ((v34 & 2) != 0)
                  caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged((uint64_t)v3, v30, v16, v34 & 0xFFFFFFFFFFFFFFFCLL);
                v35 = atomic_load(v32);
                if ((v35 & 1) != 0)
                {
                  do
                  {
                    v16 = atomic_load((unint64_t *)(v16 + 16 * v30 + 32));
                    v36 = atomic_load((unint64_t *)(v16 + 16 * v30 + 24));
                  }
                  while ((v36 & 1) != 0);
                }
              }
              v37 = *(_DWORD *)(v23 + 8);
              while (1)
              {
                v40 = atomic_load((unint64_t *)(v16 + 16 * v30 + 24));
                v17 = v40 & 0xFFFFFFFFFFFFFFFCLL;
                if (v37 < *(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFFCLL) + 8))
                  break;
                v38 = atomic_load((unint64_t *)(v17 + 24));
                if ((v38 & 1) != 0)
                {
                  v16 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::try_flag_node((uint64_t)v3, v30, v16, v17);
                  if (!v39)
                    caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged((uint64_t)v3, v30, v16, v17);
                }
                else
                {
                  v16 = v17;
                }
              }
            }
            while (*(_DWORD *)(v16 + 8) != *(_DWORD *)(v23 + 8));
            v31 = 0;
LABEL_48:
            v13 = v49;
          }
          if (!(v31 | v30))
            break;
          v41 = atomic_load((unint64_t *)(v23 + 24));
          if ((v41 & 1) != 0)
            goto LABEL_54;
          if (++v30 == i)
            goto LABEL_54;
          LODWORD(v52) = v12;
          v16 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le>((uint64_t)v3, &v52, v30);
          v17 = v42;
        }
        caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::deallocate(*((caulk::alloc::base_allocator **)v13 + 72), (unint64_t *)v23, *(_QWORD *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * *(unsigned __int8 *)(v23 + 12) - 8]);
      }
LABEL_54:
      v4 = v47;
      caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v47);
      goto LABEL_55;
    }
  }
  __break(1u);
}

void sub_18EE23848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 81) < 0)
    operator delete(*(void **)(v29 - 104));
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Box::isFrequencySafe(DSPGraph::Box *this)
{
  return 1;
}

BOOL DSPGraph::RingBufferBox::isFrequencySafe(DSPGraph::RingBufferBox *this)
{
  return *((_DWORD *)this + 194) == 0;
}

void DSPGraph::RingBufferBox::initialize(DSPGraph::RingBufferBox *this)
{
  NSObject *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  int v12;
  char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  DSPGraph::Box::initialize(this);
  if (DSPGraph::getLog(void)::onceToken != -1)
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8171);
  v2 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v8 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(_QWORD *)this + 648))(this);
    v9 = *((_DWORD *)this + 194);
    v10 = *((_DWORD *)this + 193);
    v11 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v11 = (_QWORD *)*v11;
    v12 = 134219010;
    v13 = (char *)this + 808;
    v14 = 1024;
    v15 = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_debug_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "RingBufferBox::initialize %p   ch %u   nz %4u   cap %4u  %s", (uint8_t *)&v12, 0x28u);
  }
  v3 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(_QWORD *)this + 696))(this);
  v4 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(_QWORD *)this + 648))(this);
  v5 = *((unsigned int *)this + 193);
  if ((_DWORD)v3)
    v3 = *((unsigned int *)this + 194);
  v6 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(_QWORD *)this + 656))(this);
  v7 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(_QWORD *)this + 640))(this);
  DSPGraph::RingBuffer::alloc((DSPGraph::RingBufferBox *)((char *)this + 808), v4, v5, v3, v6, v7);
}

void DSPGraph::RingBuffer::alloc(DSPGraph::RingBuffer *this, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (a4 > a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v16, "alloc");
    DSPGraph::strprintf((DSPGraph *)"numZeroes is greater than buffer capacity %u > %u", &v15, a4, a3);
    DSPGraph::ThrowException(1919837985, &v17, 763, &v16, &v15);
  }
  *((_DWORD *)this + 4) = a3;
  v11 = caulk::numeric::exceptional_add<unsigned int>(a3, 1);
  *((_DWORD *)this + 5) = v11;
  *((_DWORD *)this + 6) = a5;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 7) = 0;
  v12 = caulk::numeric::exceptional_mul<unsigned int>(v11, a5);
  if (a6)
    v13 = 1;
  else
    v13 = a2;
  DSPGraph::SimpleABL::alloc(this, v13, v12, 0);
  if ((_DWORD)a4)
    DSPGraph::RingBuffer::initialize(this, a4);
}

void sub_18EE23B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t caulk::numeric::exceptional_add<unsigned int>(int a1, int a2)
{
  BOOL v2;
  uint64_t result;
  std::runtime_error *exception;

  v2 = __CFADD__(a1, a2);
  result = (a1 + a2);
  if (v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic addition overflow");
  }
  return result;
}

void sub_18EE23C34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *DSPGraph::Graph::reset(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  this[88] = 0;
  this[91] = 0;
  v1 = (_QWORD *)this[32];
  v2 = (_QWORD *)this[33];
  while (v1 != v2)
  {
    v3 = (_QWORD *)*v1;
    v3[32] = 0;
    v3[36] = 0;
    v4 = (uint64_t *)v3[28];
    v5 = (uint64_t *)v3[29];
    while (v4 != v5)
    {
      v6 = *v4++;
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 632))(v6);
    }
    ++v1;
  }
  return this;
}

uint64_t DSPGraph::AUBox::reset(AudioUnit *this)
{
  return DSPGraph::AUBox::reset(this, 0, 0);
}

uint64_t DSPGraph::AUBox::reset(AudioUnit *this, AudioUnitScope a2, AudioUnitElement a3)
{
  uint64_t result;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = AudioUnitReset(this[106], a2, a3);
  if ((_DWORD)result)
  {
    v4 = result;
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "reset");
    std::string::basic_string[abi:ne180100]<0>(&v5, "AudioUnitReset");
    DSPGraph::ThrowException(v4, &v7, 1854, &v6, &v5);
  }
  return result;
}

void sub_18EE23D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

OSStatus AudioUnitReset(AudioUnit inUnit, AudioUnitScope inScope, AudioUnitElement inElement)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (***v5)(_QWORD);
  uint64_t (***v6)(_QWORD);
  uint64_t (*v7)(uint64_t (**)(_QWORD), uint64_t, uint64_t);

  if (!inUnit)
    return -50;
  v3 = *(_QWORD *)&inElement;
  v4 = *(_QWORD *)&inScope;
  v5 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v5)
    return 560947818;
  v6 = v5;
  if (*(_WORD *)((**v5)(v5) + 38) != 24949)
    return -3000;
  v7 = *(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, uint64_t))(*(_QWORD *)((**v6)(v6) + 112)
                                                                                   + 104);
  if (v7)
    return v7(v6[3], v4, v3);
  else
    return -4;
}

void DSPGraph::RingBufferBox::reset(DSPGraph::RingBufferBox *this)
{
  int v2;

  if ((*(unsigned int (**)(DSPGraph::RingBufferBox *))(*(_QWORD *)this + 696))(this))
    v2 = *((_DWORD *)this + 194);
  else
    v2 = 0;
  DSPGraph::RingBuffer::initialize((DSPGraph::RingBufferBox *)((char *)this + 808), v2);
}

uint64_t DSPGraph::RingBufferBox::shouldAddRingBufferZeros(DSPGraph::RingBufferBox *this)
{
  return 1;
}

void DSPGraph::RingBuffer::initialize(DSPGraph::RingBuffer *this, int a2)
{
  _DWORD *v2;
  unint64_t v4;
  size_t v5;
  uint64_t v6;

  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 9) = a2;
  *((_DWORD *)this + 7) = a2;
  v2 = *(_DWORD **)this;
  if (*(_QWORD *)this && *v2)
  {
    v4 = 0;
    v5 = (*((_DWORD *)this + 6) * a2);
    v6 = 4;
    do
    {
      bzero(*(void **)&v2[v6], v5);
      ++v4;
      v2 = *(_DWORD **)this;
      v6 += 4;
    }
    while (v4 < **(unsigned int **)this);
  }
}

void DSPGraph::GraphOutput::reset(DSPGraph::GraphOutput *this)
{
  int v2;

  if ((*(unsigned int (**)(DSPGraph::GraphOutput *))(*(_QWORD *)this + 696))(this))
    v2 = *((_DWORD *)this + 194);
  else
    v2 = 0;
  DSPGraph::RingBuffer::initialize((DSPGraph::GraphOutput *)((char *)this + 808), v2);
  *((_QWORD *)this + 107) = 0;
}

uint64_t DSPGraph::GraphOutput::numChannels(DSPGraph::GraphOutput *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 64;
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "in");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1426, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 28);
}

void sub_18EE23FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::GraphOutput::interleaved(DSPGraph::GraphOutput *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 64;
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "in");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1426, &v7, &v6);
  }
  return (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 12) & 0x20) == 0;
}

void sub_18EE240F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GraphInput::numChannels(DSPGraph::GraphInput *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "out");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1434, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 28);
}

void sub_18EE241FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::GraphInput::interleaved(DSPGraph::GraphInput *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "out");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1434, &v7, &v6);
  }
  return (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 12) & 0x20) == 0;
}

void sub_18EE24308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::GraphInput::initialize(DSPGraph::GraphInput *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (*((_BYTE *)this + 913))
  {
    if (*((_QWORD *)this + 115))
      v2 = *((_QWORD *)this + 115);
    else
      v2 = 4130;
    v3 = (_QWORD *)((char *)this + 888);
    if (*((char *)this + 911) < 0)
      v3 = (_QWORD *)*v3;
    v4 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v11, "out");
      v9 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v9 = (_QWORD *)*v9;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v10, v9, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v12, 1418, &v11, &v10);
    }
    v5 = *(unsigned int *)(*((_QWORD *)this + 1) + 940);
    v6 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) + 120);
    if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1)
      dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_5525);
    if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction)
      v7 = NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(v2, 0, v3, v5, 0, v6);
    else
      v7 = 0;
    v8 = *((_QWORD *)this + 110);
    *((_QWORD *)this + 110) = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v7 = *((_QWORD *)this + 110);
    }
    if (!v7)
    {
      std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_GraphIOBox.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v11, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v10, "NewAudioCapturer for DSP graph raw input returned null");
      DSPGraph::ThrowException(1852204065, &v12, 105, &v11, &v10);
    }
  }
  DSPGraph::RingBufferBox::initialize(this);
}

void sub_18EE24518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

BOOL AllowUnsafeMainThreadServicing(const char *a1)
{
  char *v2;
  NSObject *v3;
  _QWORD *v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = getenv("CA_AllowUnsafeMainThreadServicing");
  if (v2)
  {
    if (gAudioComponentLogCategory)
    {
      v3 = *(NSObject **)gAudioComponentLogCategory;
    }
    else
    {
      v4 = (_QWORD *)operator new();
      v4[1] = 0;
      v3 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v4 = v3;
      gAudioComponentLogCategory = (uint64_t)v4;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 136315650;
      v7 = "AudioComponentAPI.cpp";
      v8 = 1024;
      v9 = 310;
      v10 = 2080;
      v11 = a1;
      _os_log_impl(&dword_18EE07000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Allowing unsafe servicing of main thread (%s).", (uint8_t *)&v6, 0x1Cu);
    }
  }
  return v2 != 0;
}

uint64_t acv2::AudioConverterV2::getProperty(acv2::AudioConverterV2 *this, uint64_t a2, unsigned int *a3, _QWORD *a4)
{
  uint64_t Property;
  uint64_t v10;
  uint64_t message;
  caulk::concurrent::message *v12;
  uint64_t v13;
  uint64_t v14;
  caulk::concurrent::message *v15;
  _DWORD *v16;
  char v17[4];
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE v24[4];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (*((_BYTE *)this + 12) || !*((_BYTE *)this + 13))
  {
    v17[0] = 0;
    v23 = 0;
    if (!a3)
      goto LABEL_10;
  }
  else
  {
    v25 = 2738;
    v26 = a2;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    kdebug_trace();
    v17[0] = 1;
    v18 = 2738;
    v19 = a2;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v24[0] = 0;
    v23 = 1;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v24);
    if (!a3)
    {
LABEL_10:
      v10 = _os_log_pack_size();
      message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v10 + 88, 16);
      if (message)
      {
        v12 = (caulk::concurrent::message *)message;
        *(_WORD *)_os_log_pack_fill() = 0;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v12);
      }
      goto LABEL_14;
    }
  }
  if (a4)
  {
    Property = acv2::AudioConverterChain::GetProperty(*((acv2::AudioConverterChain **)this + 4), a2, a3, a4);
    goto LABEL_5;
  }
  v13 = _os_log_pack_size();
  v14 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v13 + 88, 16);
  if (v14)
  {
    v15 = (caulk::concurrent::message *)v14;
    v16 = (_DWORD *)_os_log_pack_fill();
    *v16 = 67109120;
    v16[1] = a2;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v15);
  }
LABEL_14:
  Property = 4294967246;
LABEL_5:
  if (v23)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v17);
  return Property;
}

void sub_18EE2485C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::GetProperty(acv2::AudioConverterChain *this, uint64_t a2, unsigned int *a3, _QWORD *a4)
{
  OpaqueAudioComponentInstance **PropertyDelegate;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  size_t v15;
  std::vector<char>::pointer v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  OpaqueAudioComponentInstance ***v20;
  std::vector<char>::pointer v21;
  uint64_t OutputLayout;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  std::vector<char>::pointer begin;
  char *v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  char v41;
  __int32 v42;
  uint8x8_t v43;
  size_t v44;
  __CFArray *Mutable;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  std::vector<char> __src;
  std::vector<char>::value_type __x;

  PropertyDelegate = acv2::AudioConverterChain::GetPropertyDelegate(this, a2);
  if (PropertyDelegate)
    return (*((uint64_t (**)(OpaqueAudioComponentInstance **, uint64_t, unsigned int *, _QWORD *))*PropertyDelegate
            + 11))(PropertyDelegate, a2, a3, a4);
  v10 = 1886547824;
  if ((int)a2 > 1835626095)
  {
    if ((int)a2 > 1886546284)
    {
      if ((a2 - 1936876385) > 0x10 || ((1 << (a2 - 97)) & 0x18101) == 0)
      {
        if ((_DWORD)a2 == 1886546285)
        {
          if (*a3 == 8)
          {
            __src.__begin_ = 0;
            v40 = (_QWORD *)*((_QWORD *)this + 13);
            v39 = (_QWORD *)*((_QWORD *)this + 14);
            if (v40 != v39)
            {
              v41 = 0;
              do
              {
                if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v40 + 120))(*v40))
                {
                  if ((v41 & 1) != 0)
                    v41 = 1;
                  else
                    v41 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v40 + 120))(*v40);
                  (*(void (**)(_QWORD, std::vector<char> *))(*(_QWORD *)*v40 + 128))(*v40, &__src);
                }
                ++v40;
              }
              while (v40 != v39);
              if ((v41 & 1) != 0)
              {
                v10 = 0;
                *a4 = __src.__begin_;
              }
            }
            return v10;
          }
        }
        else
        {
          if ((_DWORD)a2 != 1919837298)
            return v10;
          if (*a3 == 4)
          {
            v10 = 0;
            v12 = *((unsigned __int8 *)this + 528);
            goto LABEL_82;
          }
        }
        return 561211770;
      }
    }
    else
    {
      if ((int)a2 > 1868786719)
      {
        if ((_DWORD)a2 != 1868786720)
        {
          if ((_DWORD)a2 != 1885627760)
            return v10;
          if (*a3 == 4)
          {
            v10 = 0;
            v12 = 1;
            goto LABEL_82;
          }
          return 561211770;
        }
        __x = 0;
        std::vector<char>::vector(&__src, 0x20uLL, &__x);
        begin = __src.__begin_;
        *(_QWORD *)__src.__begin_ = 0;
        *((_DWORD *)begin + 2) = 0;
        OutputLayout = acv2::AudioConverterChain::GetOutputLayout(this, &__src, &v48);
LABEL_52:
        v10 = OutputLayout;
        v29 = __src.__begin_;
        if ((_DWORD)OutputLayout)
        {
          *a3 = 0;
          if (!v29)
            return v10;
        }
        else
        {
          if (*(_DWORD *)__src.__begin_ == 0x10000)
          {
            v43 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__src.__begin_ + 1));
            v43.i16[0] = vaddlv_u8(v43);
            v42 = v43.i32[0];
          }
          else if (*(_DWORD *)__src.__begin_)
          {
            v42 = (unsigned __int16)*(_DWORD *)__src.__begin_;
          }
          else
          {
            v42 = *((_DWORD *)__src.__begin_ + 2);
          }
          if (v42)
          {
            if (*a3 >= LODWORD(__src.__end_) - LODWORD(__src.__begin_))
              v44 = (LODWORD(__src.__end_) - LODWORD(__src.__begin_));
            else
              v44 = *a3;
            if ((_DWORD)v44)
              memcpy(a4, __src.__begin_, v44);
          }
          else
          {
            LODWORD(v44) = 0;
          }
          v10 = 0;
          *a3 = v44;
        }
        __src.__end_ = v29;
        operator delete(v29);
        return v10;
      }
      if ((_DWORD)a2 != 1835626096)
      {
        if ((_DWORD)a2 != 1835884912)
          return v10;
        v13 = *((_QWORD *)this + 53);
        if (!v13)
        {
          v10 = 0;
          *a3 = 0;
          return v10;
        }
        v14 = *((_DWORD *)this + 7) * *((_DWORD *)this + 17);
        if (*a3 != 4 * v14)
          return 561211770;
        v15 = (4 * v14);
        memset(&__src, 0, sizeof(__src));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__src, *(const void **)(v13 + 176), *(_QWORD *)(v13 + 184), (uint64_t)(*(_QWORD *)(v13 + 184) - *(_QWORD *)(v13 + 176)) >> 2);
        v16 = __src.__begin_;
        memcpy(a4, __src.__begin_, v15);
        if (v16)
          operator delete(v16);
        return 0;
      }
    }
    v20 = (OpaqueAudioComponentInstance ***)*((_QWORD *)this + 37);
    if (v20 != *((OpaqueAudioComponentInstance ****)this + 38))
    {
      PropertyDelegate = *v20;
      return (*((uint64_t (**)(OpaqueAudioComponentInstance **, uint64_t, unsigned int *, _QWORD *))*PropertyDelegate
              + 11))(PropertyDelegate, a2, a3, a4);
    }
    return v10;
  }
  if ((int)a2 <= 1667850866)
  {
    if ((int)a2 <= 1633906531)
    {
      if ((_DWORD)a2 == 1633903204)
      {
        v38 = *((_QWORD *)this + 43);
        if (!v38 || !*(_BYTE *)(v38 + 196))
          return v10;
        if (*a3 == 4)
        {
          v10 = 0;
          v12 = *((_DWORD *)this + 103);
          goto LABEL_82;
        }
        return 561211770;
      }
      if ((_DWORD)a2 != 1633904996)
        return v10;
      if (*a3 != 40)
        return 561211770;
      v10 = 2003329396;
      v23 = (uint64_t *)*((_QWORD *)this + 13);
      if (v23 == *((uint64_t **)this + 14))
        return v10;
      v24 = *v23;
      if (!v24)
        return v10;
      v10 = 0;
      v25 = *(_OWORD *)(v24 + 16);
      v26 = *(_OWORD *)(v24 + 32);
      v27 = *(_QWORD *)(v24 + 48);
    }
    else
    {
      if ((_DWORD)a2 != 1633906532)
      {
        if ((_DWORD)a2 == 1633906803)
        {
          if (*a3 == 8)
          {
            v34 = (_QWORD *)*((_QWORD *)this + 13);
            v35 = (_QWORD *)*((_QWORD *)this + 14);
            while (1)
            {
              if (v34 == v35)
              {
                v10 = 0;
                *a3 = 0;
                *a4 = 0;
                return v10;
              }
              if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v34 + 136))(*v34) & 1) != 0)
                break;
              ++v34;
            }
            Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3, MEMORY[0x1E0C9B378]);
            v46 = *((_QWORD *)this + 13);
            v47 = *((_QWORD *)this + 14);
            while (v46 != v47)
            {
              (*(void (**)(std::vector<char> *__return_ptr))(**(_QWORD **)v46 + 144))(&__src);
              if (__src.__begin_)
              {
                CFArrayAppendValue(Mutable, __src.__begin_);
                if (__src.__begin_)
                  CFRelease(__src.__begin_);
              }
              v46 += 8;
            }
            v10 = 0;
            *a4 = Mutable;
            return v10;
          }
          return 561211770;
        }
        if ((_DWORD)a2 != 1667788144)
          return v10;
        v17 = *a3;
        if (v17 == 4 * *((unsigned int *)this + 17))
        {
          if (v17 >= 4)
          {
            v18 = 0;
            v19 = v17 >> 2;
            do
            {
              v10 = 0;
              *((_DWORD *)a4 + v18) = v18;
              ++v18;
            }
            while (v19 != v18);
            return v10;
          }
          return 0;
        }
        return 561211770;
      }
      if (*a3 != 40)
        return 561211770;
      v10 = 2003329396;
      v32 = *((_QWORD *)this + 14);
      if (*((_QWORD *)this + 13) == v32)
        return v10;
      v33 = *(_QWORD *)(v32 - 8);
      if (!v33)
        return v10;
      v10 = 0;
      v25 = *(_OWORD *)(v33 + 56);
      v26 = *(_OWORD *)(v33 + 72);
      v27 = *(_QWORD *)(v33 + 88);
    }
    a4[4] = v27;
    *(_OWORD *)a4 = v25;
    *((_OWORD *)a4 + 1) = v26;
    return v10;
  }
  if ((int)a2 > 1684632679)
  {
    if ((_DWORD)a2 == 1684632680)
    {
      if (*a3 == 4)
      {
        v10 = 0;
        v12 = *((_DWORD *)this + 108);
        goto LABEL_82;
      }
      return 561211770;
    }
    if ((_DWORD)a2 == 1684892024)
    {
      if (*a3 == 4)
      {
        v10 = 0;
        v12 = *((unsigned __int8 *)this + 417);
        goto LABEL_82;
      }
      return 561211770;
    }
    if ((_DWORD)a2 != 1768123424)
      return v10;
    __x = 0;
    std::vector<char>::vector(&__src, 0x20uLL, &__x);
    v21 = __src.__begin_;
    *(_QWORD *)__src.__begin_ = 0;
    *((_DWORD *)v21 + 2) = 0;
    OutputLayout = acv2::AudioConverterChain::GetInputLayout(this, &__src, &v48);
    goto LABEL_52;
  }
  if ((_DWORD)a2 == 1667850867)
  {
    for (i = *((_QWORD *)this + 14); i != *((_QWORD *)this + 13); i -= 8)
    {
      v31 = *(_QWORD *)(i - 8);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, _QWORD *))(*(_QWORD *)v31 + 88))(v31, 1667850867, a3, a4);
      if ((_DWORD)v10)
        return v10;
    }
    return 0;
  }
  if ((_DWORD)a2 == 1668244083)
  {
    v36 = (_QWORD *)*((_QWORD *)this + 13);
    v37 = (_QWORD *)*((_QWORD *)this + 14);
    if (v36 != v37)
    {
      do
      {
        v10 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *, _QWORD *))(*(_QWORD *)*v36 + 88))(*v36, 1668244083, a3, a4);
        if ((_DWORD)v10)
          break;
        ++v36;
      }
      while (v36 != v37);
      return v10;
    }
    return 0;
  }
  if ((_DWORD)a2 != 1684171124)
    return v10;
  if (*a3 != 4)
    return 561211770;
  v11 = *((_QWORD *)this + 55);
  if (v11)
  {
    v10 = 0;
    v12 = *(_DWORD *)(v11 + 168);
LABEL_82:
    *(_DWORD *)a4 = v12;
  }
  return v10;
}

void sub_18EE24F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterV2::setProperty(acv2::AudioConverterChain **this, uint64_t a2, uint64_t a3, AudioChannelLayout *a4)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t message;
  caulk::concurrent::message *v12;
  _DWORD *v13;
  char v14[4];
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v21[4];
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!*((_BYTE *)this + 12) && *((_BYTE *)this + 13))
  {
    v22 = 2737;
    v23 = a2;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    kdebug_trace();
    v14[0] = 1;
    v15 = 2737;
    v16 = a2;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v21[0] = 0;
    v20 = 1;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v21);
    if (!a4)
      goto LABEL_9;
LABEL_3:
    v8 = acv2::AudioConverterChain::SetProperty(this[4], a2, a3, a4);
    goto LABEL_4;
  }
  v14[0] = 0;
  v20 = 0;
  if (a4)
    goto LABEL_3;
LABEL_9:
  v10 = _os_log_pack_size();
  message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v10 + 88, 16);
  if (message)
  {
    v12 = (caulk::concurrent::message *)message;
    v13 = (_DWORD *)_os_log_pack_fill();
    *v13 = 67109120;
    v13[1] = a2;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v12);
  }
  v8 = 4294967246;
LABEL_4:
  if (v20)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v14);
  return v8;
}

void sub_18EE250DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::SetProperty(acv2::AudioConverterChain *this, uint64_t a2, uint64_t a3, AudioChannelLayout *a4)
{
  uint64_t v9;
  acv2::AudioConverterChain *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  std::vector<char>::pointer begin;
  void *v16;
  OpaqueAudioComponentInstance **PropertyDelegate;
  int16x8_t v18;
  _DWORD *v19;
  int v20;
  const __CFArray *v21;
  uint64_t Count;
  CFIndex v23;
  const __CFDictionary *ValueAtIndex;
  _QWORD *v25;
  _QWORD *v26;
  const __CFDictionary *v27;
  uint64_t v28;
  const __CFString *Value;
  const __CFString *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint64_t v41;
  std::vector<char> v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *__p;
  void *v48;
  std::vector<char>::value_type __x[9];

  if ((_DWORD)a2 == 1633906532 || (_DWORD)a2 == 1633904996)
  {
    if ((a3 - 41) >= 0xFFFFFFFB)
    {
      v10 = (acv2::AudioConverterChain *)((char *)this + 40);
      if ((_DWORD)a2 == 1633904996)
      {
        v10 = this;
        v11 = 352;
      }
      else
      {
        v11 = 376;
      }
      if ((_DWORD)a2 == 1633904996)
        v12 = (char *)this + 352;
      else
        v12 = (char *)this + 376;
      if (a4->mNumberChannelDescriptions != 1819304813 || *((_DWORD *)v10 + 2) != 1819304813)
        return 4294967246;
      v13 = *(_OWORD *)&a4->mChannelLayoutTag;
      v14 = *(_OWORD *)&a4->mChannelDescriptions[0].mChannelFlags;
      *((_QWORD *)v10 + 4) = *(_QWORD *)&a4[1].mChannelLayoutTag;
      *(_OWORD *)v10 = v13;
      *((_OWORD *)v10 + 1) = v14;
      __x[0] = 0;
      std::vector<char>::vector(&v42, 0x20uLL, __x);
      begin = v42.__begin_;
      *(_QWORD *)v42.__begin_ = 0;
      *((_DWORD *)begin + 2) = 0;
      v16 = *(void **)((char *)this + v11);
      if (v16)
      {
        *((_QWORD *)v12 + 1) = v16;
        operator delete(v16);
        begin = v42.__begin_;
      }
      *(_QWORD *)((char *)this + v11) = begin;
      *(_OWORD *)(v12 + 8) = *(_OWORD *)&v42.__end_;
      acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)&v42, (uint64_t)this);
      v9 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)&v42);
      if (__p)
      {
        v48 = __p;
        operator delete(__p);
      }
      if (v45)
      {
        v46 = v45;
        operator delete(v45);
      }
      if (v43)
      {
        v44 = v43;
        operator delete(v43);
      }
      return v9;
    }
    return 561211770;
  }
  PropertyDelegate = acv2::AudioConverterChain::GetPropertyDelegate(this, a2);
  if (PropertyDelegate)
  {
    v9 = (*((uint64_t (**)(OpaqueAudioComponentInstance **, uint64_t, uint64_t, AudioChannelLayout *))*PropertyDelegate
          + 12))(PropertyDelegate, a2, a3, a4);
    if (!(_DWORD)v9)
    {
      if ((_DWORD)a2 == 1684891491)
      {
        v19 = (_DWORD *)*((_QWORD *)this + 47);
        if (*v19 == 0x10000)
        {
          v39 = (uint8x8_t)vcnt_s8((int8x8_t)v19[1]);
          v39.i16[0] = vaddlv_u8(v39);
          v20 = v39.i32[0];
        }
        else
        {
          v20 = *v19 ? (unsigned __int16)*v19 : v19[2];
        }
        if (v20
          && acv2::AudioConverterChain::ShouldAutomaticallyEnableSpatialRendering((uint64_t)this, (unsigned int **)this + 47))
        {
          *((_BYTE *)this + 528) = 1;
          acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)&v42, (uint64_t)this);
          v34 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)&v42);
          goto LABEL_83;
        }
      }
      return 0;
    }
    return v9;
  }
  if ((int)a2 > 1835884911)
  {
    if ((int)a2 > 1919837297)
    {
      if ((a2 - 1936876385) <= 0x10 && ((1 << (a2 - 97)) & 0x18101) != 0)
        goto LABEL_72;
      v9 = 1886547824;
      if ((_DWORD)a2 != 1919837298)
        return v9;
      if ((_DWORD)a3 != 4)
        return 561211770;
      *((_BYTE *)this + 528) = a4->mChannelLayoutTag != 0;
      *((_BYTE *)this + 529) = 1;
      acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)&v42, (uint64_t)this);
      v34 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)&v42);
LABEL_83:
      v9 = v34;
      acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)&v42);
      return v9;
    }
    if ((_DWORD)a2 == 1835884912)
    {
      v40 = (*((_DWORD *)this + 17) * *((_DWORD *)this + 7));
      if (a3 == 4 * v40)
        return acv2::AudioConverterChain::SetMixMap(this, v40, (const float *)&a4->mChannelLayoutTag);
      return 561211770;
    }
    if ((_DWORD)a2 != 1868786720)
    {
      if ((_DWORD)a2 == 1886546285)
      {
        v32 = *((_QWORD *)this + 43);
        v9 = 1886547824;
        if (v32)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AudioChannelLayout *))(*(_QWORD *)v32 + 96))(v32, 1886546285, a3, a4);
        return v9;
      }
      return 1886547824;
    }
LABEL_76:
    v9 = acv2::AudioConverterChain::SetIOChannelLayout((acv2::CodecConverter **)this, a2 == 1768123424, a4, a3);
    if ((_DWORD)v9)
      return v9;
    acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)&v42, (uint64_t)this);
    v34 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)&v42);
    goto LABEL_83;
  }
  if ((int)a2 > 1684632679)
  {
    if ((int)a2 <= 1768123423)
    {
      if ((_DWORD)a2 != 1684632680)
      {
        v9 = 1886547824;
        if ((_DWORD)a2 != 1684892024)
          return v9;
        if ((_DWORD)a3 == 4)
          return acv2::AudioConverterChain::SetDownmixEnabled(this, a4->mChannelLayoutTag != 0);
        return 561211770;
      }
      if ((_DWORD)a3 != 4)
        return 561211770;
      return acv2::AudioConverterChain::SetDitherAlgorithm(this, a4->mChannelLayoutTag, v18);
    }
    if ((_DWORD)a2 != 1768123424)
    {
      if ((_DWORD)a2 != 1835626096)
        return 1886547824;
LABEL_72:
      v9 = 1886547824;
      if (*((_QWORD *)this + 37) != *((_QWORD *)this + 38))
      {
        v37 = (uint64_t *)*((_QWORD *)this + 13);
        v36 = (uint64_t *)*((_QWORD *)this + 14);
        if (v37 != v36)
        {
          do
          {
            v38 = *v37++;
            v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AudioChannelLayout *))(*(_QWORD *)v38 + 96))(v38, a2, a3, a4);
          }
          while (v37 != v36);
          return v9;
        }
        return 0;
      }
      return v9;
    }
    goto LABEL_76;
  }
  if ((int)a2 <= 1667788143)
  {
    if ((_DWORD)a2 != 1633903204)
    {
      v9 = 1886547824;
      if ((_DWORD)a2 != 1633906803)
        return v9;
      if ((_DWORD)a3 == 8)
      {
        v21 = *(const __CFArray **)&a4->mChannelLayoutTag;
        Count = CFArrayGetCount(v21);
        if (Count)
        {
          v23 = 0;
          while (1)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v23);
            if (ValueAtIndex)
            {
              v25 = (_QWORD *)*((_QWORD *)this + 13);
              v26 = (_QWORD *)*((_QWORD *)this + 14);
              if (v25 != v26)
              {
                v27 = ValueAtIndex;
                while (1)
                {
                  v28 = *v25;
                  Value = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("converter"));
                  v30 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 56))(v28);
                  if (CFStringCompare(Value, v30, 0) == kCFCompareEqualTo)
                    break;
                  if (++v25 == v26)
                  {
                    v25 = v26;
                    break;
                  }
                }
                if (v25 != *((_QWORD **)this + 14))
                {
                  v31 = (*(uint64_t (**)(_QWORD, const __CFDictionary *))(*(_QWORD *)*v25 + 152))(*v25, v27);
                  if ((_DWORD)v31)
                    return v31;
                }
              }
            }
            v9 = 0;
            if (++v23 == Count)
              return v9;
          }
        }
        return 0;
      }
      return 561211770;
    }
    v41 = *((_QWORD *)this + 43);
    if (v41)
    {
      v9 = 1886547824;
      if (!*(_BYTE *)(v41 + 196))
        return v9;
      if ((_DWORD)a3 == 4)
      {
        *((_DWORD *)this + 103) = a4->mChannelLayoutTag;
        acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)&v42, (uint64_t)this);
        acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)&v42);
        acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)&v42);
        return 0;
      }
      return 561211770;
    }
    return 1886547824;
  }
  if ((_DWORD)a2 != 1667788144)
  {
    if ((_DWORD)a2 != 1684171124)
      return 1886547824;
    if ((_DWORD)a3 == 4)
    {
      v35 = *((_QWORD *)this + 55);
      if (v35)
        return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 168))(v35, a4->mChannelLayoutTag);
      v9 = acv2::AudioConverterChain::SetDitherAlgorithm(this, *((_DWORD *)this + 108), v18);
      if (!(_DWORD)v9)
      {
        v35 = *((_QWORD *)this + 55);
        v9 = 1886547824;
        if (v35)
          return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 168))(v35, a4->mChannelLayoutTag);
      }
      return v9;
    }
    return 561211770;
  }
  if (a3 != 4 * *((unsigned int *)this + 17))
    return 561211770;
  return acv2::AudioConverterChain::SetChannelMap(this, (int *)a4);
}

void sub_18EE2580C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)va);
  _Unwind_Resume(a1);
}

OpaqueAudioComponentInstance **acv2::AudioConverterChain::GetPropertyDelegate(acv2::AudioConverterChain *this, signed int a2)
{
  OpaqueAudioComponentInstance **result;
  int v4;
  char *v5;
  char *v6;
  unsigned __int16 v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;

  if (HIBYTE(a2) == 94)
  {
    result = (OpaqueAudioComponentInstance **)*((_QWORD *)this + 43);
    if (result)
      return result;
  }
  result = 0;
  if (a2 > 1868786719)
  {
    if (a2 <= 1936876384)
    {
      if (a2 > 1919116143)
      {
        if (a2 == 1919116144)
          goto LABEL_54;
        if (a2 == 1919837298)
          return result;
        v4 = 1935893603;
        goto LABEL_53;
      }
      if (a2 == 1868786720 || a2 == 1886546285)
        return result;
      if (a2 != 1886547309)
        goto LABEL_61;
    }
    else
    {
      if (a2 > 1986360177)
      {
        if (a2 > 2020175986)
        {
          if (a2 == 2020569203)
          {
LABEL_50:
            v9 = *((_QWORD *)this + 14);
            if (*((_QWORD *)this + 13) == v9)
              return 0;
            v5 = (char *)(v9 - 8);
            return *(OpaqueAudioComponentInstance ***)v5;
          }
          v7 = 28787;
        }
        else
        {
          if (a2 == 1986360178)
            goto LABEL_54;
          v7 = 25203;
        }
        v8 = v7 | 0x78690000;
LABEL_44:
        if (a2 != v8)
          goto LABEL_61;
        v5 = (char *)*((_QWORD *)this + 13);
        v6 = (char *)*((_QWORD *)this + 14);
        goto LABEL_46;
      }
      if ((a2 - 1936876385) > 0x10 || ((1 << (a2 - 97)) & 0x18101) == 0)
      {
        v4 = 1986355826;
        goto LABEL_53;
      }
    }
LABEL_13:
    v5 = (char *)*((_QWORD *)this + 37);
    v6 = (char *)*((_QWORD *)this + 38);
LABEL_46:
    if (v5 == v6)
      return 0;
    return *(OpaqueAudioComponentInstance ***)v5;
  }
  if (a2 > 1667788143)
  {
    if (a2 <= 1768123423)
    {
      if (a2 <= 1684891490)
      {
        if (a2 == 1667788144)
        {
          v5 = (char *)*((_QWORD *)this + 40);
          v10 = (char *)*((_QWORD *)this + 41);
          if (v5 != v10)
          {
            v11 = v10 - 8;
            if (*((_DWORD *)this + 7) <= *((_DWORD *)this + 17))
              v5 = v11;
            return *(OpaqueAudioComponentInstance ***)v5;
          }
          return 0;
        }
        v4 = 1668114275;
        goto LABEL_53;
      }
      if (a2 == 1684891491)
        goto LABEL_54;
      v4 = 1718383476;
      goto LABEL_53;
    }
    if (a2 <= 1835626095)
    {
      if (a2 == 1768123424)
        return result;
      v8 = 1835623027;
      goto LABEL_44;
    }
    if (a2 != 1835626096)
    {
      if (a2 != 1836016243)
        goto LABEL_61;
      goto LABEL_50;
    }
    goto LABEL_13;
  }
  if (a2 > 1634038641)
  {
    if (a2 > 1651663219)
    {
      if (a2 == 1651663220)
        goto LABEL_54;
      v4 = 1667527029;
    }
    else
    {
      if (a2 == 1634038642)
        goto LABEL_54;
      v4 = 1634366322;
    }
  }
  else
  {
    if (a2 <= 1634034289)
    {
      if (a2 != 1633904996)
      {
        v4 = 1633906532;
        goto LABEL_53;
      }
LABEL_54:
      v5 = (char *)this + 344;
      return *(OpaqueAudioComponentInstance ***)v5;
    }
    if (a2 == 1634034290)
      goto LABEL_54;
    v4 = 1634034540;
  }
LABEL_53:
  if (a2 == v4)
    goto LABEL_54;
LABEL_61:
  result = (OpaqueAudioComponentInstance **)*((_QWORD *)this + 43);
  if (result)
  {
    if (acv2::CodecConverter::ConverterSupportsProperty(result, a2))
      goto LABEL_54;
    return 0;
  }
  return result;
}

uint64_t acv2::CodecConverter::SetProperty(acv2::CodecConverter *this, signed int a2, UInt32 a3, CFTypeRef *a4)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  const __CFString *Value;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  CFComparisonResult v19;
  CFTypeRef v20;
  CFTypeRef v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  CFTypeRef inPropertyData[19];
  _OWORD __s2[2];
  uint64_t v28;
  _OWORD __s1[2];
  uint64_t v30;

  if (HIBYTE(a2) == 94
    && acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), a2))
  {
    return AudioCodecSetProperty(*((AudioCodec *)this + 21), a2, a3, a4);
  }
  v9 = 0;
  if (a2 <= 1668310370)
  {
    if (a2 <= 1651663219)
    {
      if (a2 == 1633842276)
        goto LABEL_30;
      if (a2 != 1634366322)
        goto LABEL_79;
      if (!*((_BYTE *)this + 196))
        return 1886547824;
      if (!*((_BYTE *)this + 200))
        return 1869627199;
      if (a3 != 8)
        return 561211770;
      acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
      inPropertyData[0] = *a4;
      v12 = AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x636F7372u, 8u, inPropertyData);
      if ((_DWORD)v12)
        return v12;
      acv2::CodecConverter::CheckInitialize(this, 0, 0);
      LODWORD(__s1[0]) = 8;
    }
    else
    {
      if (a2 != 1651663220)
      {
        if (a2 != 1667527029)
        {
          if (a2 != 1668114275)
            goto LABEL_79;
          if (!*((_BYTE *)this + 196))
            return 1886547824;
          acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
          v10 = acv2::CodecConverter::StoreMagicCookie(this, a4, a3);
          if ((_DWORD)v10)
            return v10;
          return 0;
        }
        if (a3 == 4)
        {
          acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
          v9 = AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x73726371u, 4u, a4);
          if (*((_BYTE *)this + 832))
            acv2::CodecConverter::CheckInitialize(this, 0, 0);
          return v9;
        }
        return 561211770;
      }
      if (!*((_BYTE *)this + 196))
        return 1886547824;
      if (a3 != 4)
        return 561211770;
      acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
      v10 = AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x62726174u, 4u, a4);
      if ((_DWORD)v10)
        return v10;
      if (*((_BYTE *)this + 832))
        acv2::CodecConverter::CheckInitialize(this, 0, 0);
      inPropertyData[0] = 0;
      LODWORD(__s1[0]) = 8;
    }
    if (!AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x636F7372u, (UInt32 *)__s1, inPropertyData))
    {
      v20 = inPropertyData[0];
      *((CFTypeRef *)this + 7) = inPropertyData[0];
      *(_QWORD *)(*((_QWORD *)this + 20) + 40) = v20;
    }
    return 0;
  }
  if (a2 <= 1886546284)
  {
    if (a2 == 1668310371)
      goto LABEL_30;
    if (a2 != 1684891491)
    {
      if (a2 != 1886353266)
        goto LABEL_79;
LABEL_30:
      if (acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), a2))
        return AudioCodecSetProperty(*((AudioCodec *)this + 21), a2, a3, a4);
      return 1886547824;
    }
    if (!*((_BYTE *)this + 197))
      return 1886547824;
    acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
    v13 = *(_OWORD *)((char *)this + 72);
    __s1[0] = *(_OWORD *)((char *)this + 56);
    __s1[1] = v13;
    v30 = *((_QWORD *)this + 11);
    v10 = acv2::CodecConverter::StoreMagicCookie(this, a4, a3);
    if ((_DWORD)v10)
      return v10;
    v28 = *((_QWORD *)this + 11);
    v14 = *(_OWORD *)((char *)this + 72);
    __s2[0] = *(_OWORD *)((char *)this + 56);
    __s2[1] = v14;
    HIDWORD(v30) = 0;
    HIDWORD(v28) = 0;
    if (!memcmp(__s1, __s2, 0x28uLL))
    {
      if (*((_BYTE *)this + 832))
        acv2::CodecConverter::CheckInitialize(this, 0, 0);
    }
    else
    {
      acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)inPropertyData, *((_QWORD *)this + 20));
      v10 = acv2::AudioConverterChain::RebuildConverterChain(*((acv2::AudioConverterChain **)this + 20), (const acv2::ChainBuildSettings *)inPropertyData);
      acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)inPropertyData);
      if ((_DWORD)v10)
        return v10;
    }
    return 0;
  }
  if (a2 == 1886546285)
  {
    if (a3 != 8)
      return 4294967246;
    if (*((_BYTE *)this + 197)
      && acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), 0x7072696Du))
    {
      v21 = *a4;
      if (!*((_BYTE *)this + 380))
        *((_BYTE *)this + 380) = 1;
      *(_QWORD *)((char *)this + 372) = v21;
      *((_DWORD *)this + 96) = (_DWORD)v21;
      v22 = *((_DWORD *)a4 + 1);
      LODWORD(inPropertyData[0]) = 0;
      HIDWORD(inPropertyData[0]) = v22;
      acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
      AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x7072696Du, 8u, inPropertyData);
      if (*((_BYTE *)this + 832))
        acv2::CodecConverter::CheckInitialize(this, 0, 0);
    }
    return 0;
  }
  if (a2 != 1935893603)
  {
    if (a2 != 1919116144)
      goto LABEL_79;
    if (a3 == 4)
    {
      v11 = *(_DWORD *)a4;
      *((_BYTE *)this + 832) = *(_DWORD *)a4 != 0;
      if (v11)
      {
        acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
        acv2::CodecConverter::CheckInitialize(this, 0, 0);
        return 0;
      }
      return 0;
    }
    return 561211770;
  }
  if (!acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), 0x5E736463u))
  {
    v9 = 0;
    goto LABEL_79;
  }
  Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)*a4, CFSTR("media kind"));
  if (Value)
    v16 = Value;
  else
    v16 = &stru_1E2923288;
  CFRetain(v16);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)inPropertyData, v16);
  v17 = (const __CFString *)*((_QWORD *)this + 26);
  if (v17)
  {
    CFRetain(*((CFTypeRef *)this + 26));
    v18 = (const __CFString *)inPropertyData[0];
    if (!inPropertyData[0])
    {
      v19 = kCFCompareGreaterThan;
LABEL_72:
      CFRelease(v17);
      goto LABEL_73;
    }
  }
  else
  {
    v18 = (const __CFString *)inPropertyData[0];
    if (!inPropertyData[0])
      goto LABEL_75;
  }
  CFRetain(v18);
  if (v17)
    v19 = CFStringCompare(v17, v18, 0);
  else
    v19 = kCFCompareLessThan;
  CFRelease(v18);
  if (v17)
    goto LABEL_72;
LABEL_73:
  if (v19)
  {
    applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)__s1, v16);
    v23 = *((_QWORD *)this + 26);
    *((_QWORD *)this + 26) = *(_QWORD *)&__s1[0];
    *(_QWORD *)&__s1[0] = v23;
    applesauce::CF::StringRef::~StringRef((const void **)__s1);
    v24 = 0;
    v9 = 0;
    goto LABEL_76;
  }
LABEL_75:
  v9 = AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x5E736463u, a3, a4);
  v24 = 1;
LABEL_76:
  if (inPropertyData[0])
    CFRelease(inPropertyData[0]);
  if ((v24 & 1) != 0)
    return v9;
LABEL_79:
  if (!acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), a2))
  {
    v10 = 1886547824;
    v25 = *((_QWORD *)this + 89);
    if (!v25)
      return v10;
    LOBYTE(__s1[0]) = 0;
    LODWORD(inPropertyData[0]) = 0;
    if (AudioUnitGetPropertyInfo(*(AudioUnit *)(v25 + 8), a2, 0, 0, (UInt32 *)inPropertyData, (Boolean *)__s1))
      return v10;
    return AudioUnitSetProperty(*(AudioUnit *)(*((_QWORD *)this + 89) + 8), a2, 0, 0, a4, a3);
  }
  acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
  v10 = AudioCodecSetProperty(*((AudioCodec *)this + 21), a2, a3, a4);
  if (!(_DWORD)v10)
  {
    if (*((_BYTE *)this + 832))
      acv2::CodecConverter::CheckInitialize(this, 0, 0);
    return v9;
  }
  return v10;
}

void sub_18EE261D8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EE261B4);
}

void acv2::CodecConverter::CheckInitialize(acv2::CodecConverter *this, const void *a2, UInt32 a3)
{
  OSStatus v6;
  OSStatus v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  OSStatus Property;
  OSStatus v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  OSStatus v17;
  _DWORD *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  OSStatus v26;
  char *v27;
  OSStatus v28;
  _DWORD *v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  void *v43;
  char *v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  char v48;
  _DWORD *exception;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  AudioStreamBasicDescription inOutputFormat;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (acv2::CodecConverter::IsInitialized(*((acv2::CodecConverter **)this + 21)))
  {
    if (!*((_BYTE *)this + 720))
      return;
  }
  else
  {
    v6 = AudioCodecInitialize(*((AudioCodec *)this + 21), *((const AudioStreamBasicDescription **)this + 86), *((const AudioStreamBasicDescription **)this + 87), a2, a3);
    if (v6)
    {
      v7 = v6;
      v8 = (__int128 *)*((_QWORD *)this + 87);
      if (!v8)
        goto LABEL_97;
      if (*((_DWORD *)v8 + 2) != 1885564203)
        goto LABEL_97;
      *((_BYTE *)this + 704) = 1;
      v10 = *v8;
      v9 = v8[1];
      *(_QWORD *)&inOutputFormat.mBitsPerChannel = *((_QWORD *)v8 + 4);
      *(_OWORD *)&inOutputFormat.mSampleRate = v10;
      *(_OWORD *)&inOutputFormat.mBytesPerPacket = v9;
      inOutputFormat.mFormatID = 1819304813;
      v7 = AudioCodecInitialize(*((AudioCodec *)this + 21), *((const AudioStreamBasicDescription **)this + 86), &inOutputFormat, a2, a3);
      if (v7)
      {
LABEL_97:
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(inOutputFormat.mSampleRate) = 136315394;
          *(_QWORD *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
          LOWORD(inOutputFormat.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1627;
          _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioCodecInitialize failed", (uint8_t *)&inOutputFormat, 0x12u);
        }
        exception = __cxa_allocate_exception(4uLL);
        *exception = v7;
        __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
      }
    }
    *((_BYTE *)this + 720) = 1;
  }
  LODWORD(inOutputFormat.mSampleRate) = 40;
  Property = AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x69666D74u, (UInt32 *)&inOutputFormat, (char *)this + 16);
  if (Property)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1635;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  get kAudioCodecPropertyCurrentInputFormat failed", (uint8_t *)&inOutputFormat, 0x12u);
    }
    v50 = __cxa_allocate_exception(4uLL);
    *v50 = Property;
    __cxa_throw(v50, MEMORY[0x1E0DE4EF0], 0);
  }
  v60 = 0;
  v58 = 0u;
  v59 = 0u;
  LODWORD(inOutputFormat.mSampleRate) = 40;
  v12 = AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x6F666D74u, (UInt32 *)&inOutputFormat, &v58);
  if (v12)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1639;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  get kAudioCodecPropertyCurrentOutputFormat failed", (uint8_t *)&inOutputFormat, 0x12u);
    }
    v51 = __cxa_allocate_exception(4uLL);
    *v51 = v12;
    __cxa_throw(v51, MEMORY[0x1E0DE4EF0], 0);
  }
  if (*((_BYTE *)this + 704))
    DWORD2(v58) = 1885564203;
  v13 = *((_QWORD *)this + 89);
  if (v13)
  {
    v14 = v60;
    v16 = v58;
    v15 = v59;
    *(_OWORD *)(v13 + 16) = v58;
    *(_OWORD *)(v13 + 32) = v15;
    *(_QWORD *)(v13 + 48) = v14;
    *(_OWORD *)&inOutputFormat.mSampleRate = v16;
    *(_OWORD *)&inOutputFormat.mBytesPerPacket = v59;
    *(_QWORD *)&inOutputFormat.mBitsPerChannel = v60;
    inOutputFormat.mFormatID = 1885564203;
    v17 = AudioUnitSetProperty(*(AudioUnit *)(v13 + 8), 8u, 1u, 0, &inOutputFormat, 0x28u);
    if (v17)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(inOutputFormat.mSampleRate) = 136315394;
        *(_QWORD *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
        LOWORD(inOutputFormat.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1651;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  set kAudioUnitProperty_StreamFormat(kAudioUnitScope_Input, 0) on AUSM failed", (uint8_t *)&inOutputFormat, 0x12u);
      }
      v18 = __cxa_allocate_exception(4uLL);
      *v18 = v17;
      __cxa_throw(v18, MEMORY[0x1E0DE4EF0], 0);
    }
  }
  else
  {
    v19 = v59;
    *(_OWORD *)((char *)this + 56) = v58;
    *(_OWORD *)((char *)this + 72) = v19;
    *((_QWORD *)this + 11) = v60;
  }
  if (!*((_DWORD *)this + 11))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1660;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Codec has zero input channels", (uint8_t *)&inOutputFormat, 0x12u);
    }
    v52 = __cxa_allocate_exception(4uLL);
    *v52 = -50;
  }
  if (!*((_DWORD *)this + 21))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1662;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Codec has zero output channels", (uint8_t *)&inOutputFormat, 0x12u);
    }
    v53 = __cxa_allocate_exception(4uLL);
    *v53 = -50;
  }
  v20 = *((_QWORD *)this + 20);
  if (*((_BYTE *)this + 197))
  {
    v21 = *((_OWORD *)this + 1);
    v22 = *((_OWORD *)this + 2);
    *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 6);
    *(_OWORD *)v20 = v21;
    *(_OWORD *)(v20 + 16) = v22;
  }
  else
  {
    v23 = *(_OWORD *)((char *)this + 56);
    v24 = *(_OWORD *)((char *)this + 72);
    *(_QWORD *)(v20 + 72) = *((_QWORD *)this + 11);
    *(_OWORD *)(v20 + 56) = v24;
    *(_OWORD *)(v20 + 40) = v23;
  }
  v25 = 32;
  if (!*((_BYTE *)this + 197))
    v25 = 72;
  *((_BYTE *)this + 201) = *(_DWORD *)((char *)this + v25) == 0;
  LODWORD(inOutputFormat.mSampleRate) = 4;
  v26 = AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x74627566u, (UInt32 *)&inOutputFormat, (char *)this + 352);
  if (v26)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1677;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  get kAudioCodecPropertyInputBufferSize failed", (uint8_t *)&inOutputFormat, 0x12u);
    }
    v54 = __cxa_allocate_exception(4uLL);
    *v54 = v26;
    __cxa_throw(v54, MEMORY[0x1E0DE4EF0], 0);
  }
  LODWORD(inOutputFormat.mSampleRate) = 4;
  if (AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x70616B62u, (UInt32 *)&inOutputFormat, (char *)this + 356))
  {
    if (*((_BYTE *)this + 197))
      v27 = (char *)this + 16;
    else
      v27 = (char *)this + 56;
    *((_DWORD *)this + 89) = *((_DWORD *)v27 + 4);
  }
  LODWORD(inOutputFormat.mSampleRate) = 4;
  v28 = AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x70616B66u, (UInt32 *)&inOutputFormat, (char *)this + 360);
  if (v28)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1690;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  get kAudioCodecPropertyPacketFrameSize failed", (uint8_t *)&inOutputFormat, 0x12u);
    }
    v55 = __cxa_allocate_exception(4uLL);
    *v55 = v28;
    __cxa_throw(v55, MEMORY[0x1E0DE4EF0], 0);
  }
  if (!*((_DWORD *)this + 90))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1694;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  kAudioCodecPropertyPacketFrameSize is zero", (uint8_t *)&inOutputFormat, 0x12u);
    }
    v56 = __cxa_allocate_exception(4uLL);
    *v56 = 2003329396;
    __cxa_throw(v56, MEMORY[0x1E0DE4EF0], 0);
  }
  v29 = (_DWORD *)((char *)this + 364);
  LODWORD(inOutputFormat.mSampleRate) = 4;
  if (AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x6D6E6F70u, (UInt32 *)&inOutputFormat, (char *)this + 364))
  {
    *v29 = 1;
  }
  else if (!*v29)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1701;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Codec has zero minimum output packets", (uint8_t *)&inOutputFormat, 0x12u);
    }
    v57 = __cxa_allocate_exception(4uLL);
    *v57 = -50;
  }
  LODWORD(inOutputFormat.mSampleRate) = 4;
  if (AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x6D646673u, (UInt32 *)&inOutputFormat, (char *)this + 368))
    *((_DWORD *)this + 92) = 0;
  if (*((_BYTE *)this + 196))
  {
    v30 = caulk::numeric::exceptional_mul<unsigned int>(*((_DWORD *)this + 91), *((_DWORD *)this + 89));
    std::__optional_destruct_base<ACCodecOutputBuffer,false>::reset[abi:ne180100]((uint64_t)this + 392);
    ACCodecOutputBuffer::ACCodecOutputBuffer((acv2::CodecConverter *)((char *)this + 392), (const AudioStreamBasicDescription *)((char *)this + 56), *((_DWORD *)this + 91), v30, *((unsigned __int8 *)this + 201), 1);
  }
  else
  {
    v31 = caulk::numeric::exceptional_mul<unsigned int>(*((_DWORD *)this + 91), *((_DWORD *)this + 90));
    v32 = caulk::numeric::exceptional_mul<unsigned int>(v31, *((_DWORD *)this + 20));
    std::__optional_destruct_base<ACCodecOutputBuffer,false>::reset[abi:ne180100]((uint64_t)this + 392);
    ACCodecOutputBuffer::ACCodecOutputBuffer((acv2::CodecConverter *)((char *)this + 392), (const AudioStreamBasicDescription *)((char *)this + 56), v31, v32, 0, 0);
  }
  *((_BYTE *)this + 600) = 1;
  std::optional<ACAudioSpan>::emplace[abi:ne180100]<CA::StreamDescription const&,void>((uint64_t)this + 216, (const AudioStreamBasicDescription *)((char *)this + 56));
  if ((*((_BYTE *)this + 28) & 0x20) != 0)
    v33 = *((_DWORD *)this + 11);
  else
    v33 = 1;
  v34 = (16 * v33) | 8;
  v36 = (unsigned int *)*((_QWORD *)this + 41);
  v35 = (unsigned int *)*((_QWORD *)this + 42);
  v37 = (char *)v35 - (char *)v36;
  v38 = v34 - ((char *)v35 - (char *)v36);
  if (v34 <= (char *)v35 - (char *)v36)
  {
    if (v34 < (char *)v35 - (char *)v36)
      *((_QWORD *)this + 42) = (char *)v36 + v34;
  }
  else
  {
    v39 = *((_QWORD *)this + 43);
    if (v39 - (uint64_t)v35 >= v38)
    {
      do
      {
        *(_BYTE *)v35 = 0;
        v35 = (unsigned int *)((char *)v35 + 1);
        --v38;
      }
      while (v38);
      *((_QWORD *)this + 42) = (char *)v36 + v34;
    }
    else
    {
      v40 = v39 - (_QWORD)v36;
      v41 = 2 * (v39 - (_QWORD)v36);
      if (v41 <= v34)
        v41 = (16 * v33) | 8;
      if (v40 >= 0x3FFFFFFFFFFFFFFFLL)
        v42 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      v43 = operator new(v42);
      v44 = (char *)v43 + v37;
      v45 = (char *)v43 + v34;
      do
        *((_BYTE *)v43 + v37++) = 0;
      while (v34 != v37);
      v46 = (char *)v43 + v42;
      if (v35 == v36)
      {
        v43 = v44;
      }
      else
      {
        v47 = (char *)v35 + ~(unint64_t)v36;
        do
        {
          v48 = *((_BYTE *)v35 - 1);
          v35 = (unsigned int *)((char *)v35 - 1);
          (v47--)[(_QWORD)v43] = v48;
        }
        while (v35 != v36);
        v35 = (unsigned int *)*((_QWORD *)this + 41);
      }
      *((_QWORD *)this + 41) = v43;
      *((_QWORD *)this + 42) = v45;
      *((_QWORD *)this + 43) = v46;
      if (v35)
        operator delete(v35);
    }
    v36 = (unsigned int *)*((_QWORD *)this + 41);
  }
  *v36 = v33;
  *((_BYTE *)this + 720) = 0;
}

OSStatus AudioCodecGetProperty(AudioCodec inCodec, AudioCodecPropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  uint64_t v6;
  uint64_t (***v7)(_QWORD);
  uint64_t (***v8)(_QWORD);
  uint64_t (*v9)(uint64_t (**)(_QWORD), uint64_t, UInt32 *, void *);

  if (!inCodec)
    return -50;
  v6 = *(_QWORD *)&inPropertyID;
  v7 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioCodec))(*(_QWORD *)inCodec + 8))(inCodec);
  if (!v7)
    return 560947818;
  v8 = v7;
  v9 = *(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, UInt32 *, void *))(*(_QWORD *)((**v7)(v7) + 112)
                                                                                            + 8);
  if (v9)
    return v9(v8[3], v6, ioPropertyDataSize, outPropertyData);
  else
    return 0;
}

BOOL acv2::CodecConverter::IsInitialized(acv2::CodecConverter *this)
{
  OSStatus Property;
  _DWORD *exception;
  OSStatus v4;
  int outPropertyData;
  UInt32 ioPropertyDataSize;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  outPropertyData = 0;
  ioPropertyDataSize = 4;
  Property = AudioCodecGetProperty(this, 0x696E6974u, &ioPropertyDataSize, &outPropertyData);
  if (Property)
  {
    v4 = Property;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      ioPropertyDataSize = 136315394;
      v7 = "CodecConverter.cpp";
      v8 = 1024;
      v9 = 1596;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  get kAudioCodecPropertyIsInitialized failed", (uint8_t *)&ioPropertyDataSize, 0x12u);
    }
    exception = __cxa_allocate_exception(4uLL);
    *exception = v4;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  return outPropertyData != 0;
}

OSStatus AudioCodecInitialize(AudioCodec inCodec, const AudioStreamBasicDescription *inInputFormat, const AudioStreamBasicDescription *inOutputFormat, const void *inMagicCookie, UInt32 inMagicCookieByteSize)
{
  uint64_t v5;
  uint64_t (***v9)(_QWORD);
  uint64_t (***v10)(_QWORD);
  uint64_t (*v11)(uint64_t (**)(_QWORD), const AudioStreamBasicDescription *, const AudioStreamBasicDescription *, const void *, uint64_t);

  if (!inCodec)
    return -50;
  v5 = *(_QWORD *)&inMagicCookieByteSize;
  v9 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioCodec))(*(_QWORD *)inCodec + 8))(inCodec);
  if (!v9)
    return 560947818;
  v10 = v9;
  v11 = *(uint64_t (**)(uint64_t (**)(_QWORD), const AudioStreamBasicDescription *, const AudioStreamBasicDescription *, const void *, uint64_t))(*(_QWORD *)((**v9)(v9) + 112) + 24);
  if (v11)
    return v11(v10[3], inInputFormat, inOutputFormat, inMagicCookie, v5);
  else
    return -4;
}

void ACCodecOutputBuffer::ACCodecOutputBuffer(ACCodecOutputBuffer *this, const AudioStreamBasicDescription *a2, unsigned int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  int mChannelsPerFrame;

  *(_DWORD *)this = a3;
  *((_DWORD *)this + 1) = a4;
  ACAudioSpan::ACAudioSpan((ACCodecOutputBuffer *)((char *)this + 8), a2);
  CA::AudioBuffers::AudioBuffers((ACCodecOutputBuffer *)((char *)this + 112), a2, a4);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v12 = a3;
  *((_QWORD *)this + 17) = 0;
  if (a3 && a5)
  {
    std::vector<std::shared_ptr<APComponent>>::__vallocate[abi:ne180100]((_QWORD *)this + 15, a3);
    v13 = (char *)*((_QWORD *)this + 16);
    bzero(v13, 16 * a3);
    *((_QWORD *)this + 16) = &v13[16 * a3];
  }
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  if (a3 && a6)
  {
    v14 = 16 * a3;
    v15 = (char *)operator new(v14);
    *((_QWORD *)this + 18) = v15;
    *((_QWORD *)this + 20) = &v15[16 * v12];
    bzero(v15, 16 * v12);
    *((_QWORD *)this + 19) = &v15[v14];
  }
  if ((a2->mFormatFlags & 0x20) != 0)
    mChannelsPerFrame = 1;
  else
    mChannelsPerFrame = a2->mChannelsPerFrame;
  CA::AudioBuffers::Prepare(*((CA::AudioBuffers **)this + 14), mChannelsPerFrame, 0);
}

void sub_18EE26FFC(_Unwind_Exception *a1)
{
  std::pmr **v1;
  uint64_t v2;
  std::pmr **v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 128) = v6;
    operator delete(v6);
  }
  CA::AudioBuffers::~AudioBuffers(v3);
  ACAudioSpan::~ACAudioSpan(v1);
  _Unwind_Resume(a1);
}

uint64_t acv2::AudioConverterChain::PostBuild(acv2::AudioConverterChain *this)
{
  acv2::AudioConverterChain *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  const AudioStreamBasicDescription *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  ACAudioSpan *v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  CA::AudioBuffers *v45;
  caulk::rt_safe_memory_resource **v46;
  caulk::rt_safe_memory_resource *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  unsigned __int8 v62;
  unsigned __int8 v63;
  _QWORD *v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  const void *v74;
  const void *v75;
  void **v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  const char *v80;
  void **v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  NSObject *v86;
  int16x8_t v87;
  uint64_t v88;
  int32x4_t v89;
  int32x4_t v90;
  uint32x4_t v91;
  std::runtime_error *exception;
  acv2::AudioConverterChain *v93;
  char *v94;
  int v95;
  uint64_t v96;
  CFTypeRef cf;
  void *v98[2];
  unsigned __int8 v99;
  std::string v100;
  std::string v101;
  std::string v102;
  void *__p;
  char v104;
  __int128 v105;
  int64_t v106;
  void *v107[2];
  char v108;
  _BYTE buf[28];
  __int16 v110;
  __int128 *v111;
  uint64_t v112;

  v1 = this;
  v112 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*((_QWORD *)this + 34);
  v3 = (_QWORD *)*((_QWORD *)this + 35);
  while (v3 != v2)
  {
    v5 = *--v3;
    v4 = v5;
    *v3 = 0;
    if (v5)
      std::default_delete<ACOutputBuffer>::operator()[abi:ne180100](v4);
  }
  *((_QWORD *)v1 + 35) = v2;
  v6 = *((_QWORD *)v1 + 14) - *((_QWORD *)v1 + 13);
  v7 = v6 >> 3;
  v93 = v1;
  if ((int)(v6 >> 3) < 1)
  {
LABEL_77:
    std::optional<ACAudioSpan>::emplace[abi:ne180100]<CA::StreamDescription const&,void>((uint64_t)v1 + 128, (const AudioStreamBasicDescription *)v1 + 1);
    v62 = atomic_load((unsigned __int8 *)_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
    if ((v62 & 1) == 0
      && __cxa_guard_acquire(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input))
    {
      _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input = checkEnvVar("CoreAudio_CaptureConverterChain_Input");
      __cxa_guard_release(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
      v1 = v93;
    }
    if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input)
    {
      acv2::AudioConverterBase::createCapturer(&__p, "-ConverterChainInput", (const std::__fs::filesystem::path **)v1 + 61, (__int128 *)v1, v1);
      if (v104 < 0)
        operator delete(__p);
    }
    v63 = atomic_load((unsigned __int8 *)_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc78ELc111ELc100ELc101ELc115EEEEEbvE5input);
    if ((v63 & 1) == 0
      && __cxa_guard_acquire(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc78ELc111ELc100ELc101ELc115EEEEEbvE5input))
    {
      _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc78ELc111ELc100ELc101ELc115EEEEEbvE5input = checkEnvVar("CoreAudio_CaptureConverterChain_Nodes");
      __cxa_guard_release(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc78ELc111ELc100ELc101ELc115EEEEEbvE5input);
      v1 = v93;
    }
    if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc78ELc111ELc100ELc101ELc115EEEEEbvE5input)
    {
      std::string::basic_string[abi:ne180100]<0>(v107, "-ConverterChainNode_");
      v64 = (_QWORD *)*((_QWORD *)v1 + 13);
      v65 = (_QWORD *)*((_QWORD *)v1 + 14);
      if (v64 != v65)
      {
        v66 = 0;
        do
        {
          v67 = *v64;
          std::to_string(&v100, v66);
          if (v108 >= 0)
            v68 = (const std::string::value_type *)v107;
          else
            v68 = (const std::string::value_type *)v107[0];
          if (v108 >= 0)
            v69 = v108;
          else
            v69 = (std::string::size_type)v107[1];
          v70 = std::string::insert(&v100, 0, v68, v69);
          v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
          v101.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v71;
          v70->__r_.__value_.__l.__size_ = 0;
          v70->__r_.__value_.__r.__words[2] = 0;
          v70->__r_.__value_.__r.__words[0] = 0;
          v72 = std::string::append(&v101, "_", 1uLL);
          v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
          v102.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v73;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          v74 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v64 + 56))(*v64);
          v75 = v74;
          if (v74)
            CFRetain(v74);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v75);
          if (!cf)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          applesauce::CF::convert_to<std::string,0>((uint64_t)v98, (const __CFString *)cf);
          if ((v99 & 0x80u) == 0)
            v76 = v98;
          else
            v76 = (void **)v98[0];
          if ((v99 & 0x80u) == 0)
            v77 = v99;
          else
            v77 = (std::string::size_type)v98[1];
          v78 = std::string::append(&v102, (const std::string::value_type *)v76, v77);
          v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
          v106 = v78->__r_.__value_.__r.__words[2];
          v105 = v79;
          v78->__r_.__value_.__l.__size_ = 0;
          v78->__r_.__value_.__r.__words[2] = 0;
          v78->__r_.__value_.__r.__words[0] = 0;
          if (v106 >= 0)
            v80 = (const char *)&v105;
          else
            v80 = (const char *)v105;
          acv2::AudioConverterBase::createCapturer(buf, v80, (const std::__fs::filesystem::path **)(v67 + 152), (__int128 *)(v67 + 56), (const void *)v67);
          v81 = (void **)(v67 + 128);
          if (*(char *)(v67 + 151) < 0)
            operator delete(*v81);
          *(_OWORD *)v81 = *(_OWORD *)buf;
          *(_QWORD *)(v67 + 144) = *(_QWORD *)&buf[16];
          if (SHIBYTE(v106) < 0)
            operator delete((void *)v105);
          if ((char)v99 < 0)
            operator delete(v98[0]);
          if (cf)
            CFRelease(cf);
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v102.__r_.__value_.__l.__data_);
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v101.__r_.__value_.__l.__data_);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          ++v64;
          ++v66;
        }
        while (v64 != v65);
      }
      if (v108 < 0)
        operator delete(v107[0]);
      v1 = v93;
    }
    v82 = *((_QWORD *)v1 + 43);
    if (!v82)
      return 0;
    if (*(_DWORD *)(v82 + 72))
      v83 = *(_DWORD *)(v82 + 76) == 0;
    else
      v83 = 1;
    v84 = 0;
    *((_BYTE *)v1 + 496) = v83;
    return v84;
  }
  v95 = 0;
  v8 = 0;
  v94 = (char *)v1 + 40;
  v9 = (v6 >> 3);
  v96 = v9;
  while (1)
  {
    v7 = (v7 - 1);
    v10 = *((_QWORD *)v1 + 13);
    v11 = *(_QWORD *)(v10 + 8 * v7);
    *(_QWORD *)(v11 + 8) = v1;
    v12 = *(_QWORD *)(v10 + 8 * v7);
    v13 = -1;
    if (v9 != v96 && (v8 & 1) == 0)
    {
      if ((*(_BYTE *)(v12 + 68) & 0x20) != 0)
      {
        v16 = *(_DWORD *)(v12 + 84);
        v15 = (*(_DWORD *)(v12 + 80) * v16) << 12;
        v14 = 32 * (v16 > 1);
      }
      else
      {
        v14 = 0;
        v15 = *(_DWORD *)(v12 + 80) << 12;
        v16 = 1;
      }
      v17 = (const AudioStreamBasicDescription *)(v12 + 56);
      v18 = operator new();
      *(_DWORD *)v18 = 4096;
      *(_DWORD *)(v18 + 4) = v16;
      ACAudioSpan::ACAudioSpan((ACAudioSpan *)(v18 + 8), v17);
      std::vector<unsigned char>::vector((_QWORD *)(v18 + 112), (v14 + v15));
      v20 = (uint64_t *)*((_QWORD *)v1 + 35);
      v19 = *((_QWORD *)v1 + 36);
      if ((unint64_t)v20 >= v19)
      {
        v22 = (_QWORD *)*((_QWORD *)v1 + 34);
        v23 = v20 - v22;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v25 = v19 - (_QWORD)v22;
        if (v25 >> 2 > v24)
          v24 = v25 >> 2;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          if (v26 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = (char *)operator new(8 * v26);
        }
        else
        {
          v27 = 0;
        }
        v28 = (uint64_t *)&v27[8 * v23];
        v29 = &v27[8 * v26];
        *v28 = v18;
        v21 = v28 + 1;
        if (v20 == v22)
        {
          *((_QWORD *)v1 + 34) = v28;
          *((_QWORD *)v1 + 35) = v21;
          *((_QWORD *)v1 + 36) = v29;
        }
        else
        {
          do
          {
            v30 = *--v20;
            *v20 = 0;
            *--v28 = v30;
          }
          while (v20 != v22);
          v20 = (uint64_t *)*((_QWORD *)v1 + 34);
          v31 = (uint64_t *)*((_QWORD *)v1 + 35);
          *((_QWORD *)v1 + 34) = v28;
          *((_QWORD *)v1 + 35) = v21;
          *((_QWORD *)v1 + 36) = v29;
          while (v31 != v20)
          {
            v33 = *--v31;
            v32 = v33;
            *v31 = 0;
            if (v33)
              std::default_delete<ACOutputBuffer>::operator()[abi:ne180100](v32);
          }
        }
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v20 = v18;
        v21 = v20 + 1;
      }
      *((_QWORD *)v1 + 35) = v21;
      v13 = v95;
      v12 = *(_QWORD *)(v10 + 8 * v7);
      ++v95;
    }
    *(_DWORD *)(v11 + 120) = v13;
    if ((_DWORD)v7)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 104))(v12))
      {
        v39 = *(_QWORD *)(v11 + 104);
        *(_QWORD *)(v11 + 104) = 0;
        if (v39)
          std::default_delete<ACSpanningInputBuffer>::operator()[abi:ne180100](v39);
        v8 = 0;
        goto LABEL_73;
      }
      v12 = *(_QWORD *)(v10 + 8 * v7);
    }
    v34 = *(_DWORD *)(v12 + 32);
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
    if (v35)
    {
      if (*(_BYTE *)(v35 + 197))
        break;
    }
    v36 = 4096;
LABEL_44:
    v37 = *(_QWORD *)(v10 + 8 * v7);
    if (*((_BYTE *)v1 + 96))
    {
      v38 = (ACAudioSpan *)operator new();
      ACAudioSpan::ACAudioSpan(v38, (const AudioStreamBasicDescription *)(v37 + 16));
      std::unique_ptr<ACAudioSpan>::reset[abi:ne180100]((std::pmr ***)(v11 + 112), (std::pmr **)v38);
    }
    else
    {
      v40 = (_DWORD *)operator new();
      v41 = v40;
      *v40 = v36;
      v42 = *(_DWORD *)(v37 + 32);
      if (v42)
        v43 = *(_DWORD *)(v37 + 32);
      else
        v43 = v34;
      v40[1] = v42;
      v40[2] = v43;
      v40[3] = v43 * v36;
      if ((*(_DWORD *)(v37 + 28) & 0x20) != 0)
        v44 = *(unsigned int *)(v37 + 44);
      else
        v44 = 1;
      CA::AudioBuffers::AudioBuffers((_QWORD *)v41 + 2, v45, 1);
      ACAudioSpan::ACAudioSpan((ACAudioSpan *)(v41 + 6), (const AudioStreamBasicDescription *)(v37 + 16));
      ACAudioSpan::ACAudioSpan((ACAudioSpan *)(v41 + 32), (const AudioStreamBasicDescription *)(v37 + 16));
      *((_QWORD *)v41 + 29) = 0;
      *((_BYTE *)v41 + 256) = 0;
      v46 = (caulk::rt_safe_memory_resource **)(v41 + 64);
      *((_BYTE *)v41 + 280) = 0;
      *((_QWORD *)v41 + 30) = 0;
      *((_QWORD *)v41 + 31) = 0;
      if (!v41[1])
      {
        std::vector<AudioStreamPacketDescription>::resize((char **)v41 + 29, v36);
        if (*((_BYTE *)v41 + 280))
        {
          v47 = *v46;
          if (*v46)
          {
            *((_QWORD *)v41 + 33) = v47;
            std::allocator_traits<caulk::rt_allocator<AudioStreamPacketDescription>>::deallocate[abi:ne180100](v47, (uint64_t)(*((_QWORD *)v41 + 34) - (_QWORD)v47) >> 4);
          }
          *((_BYTE *)v41 + 280) = 0;
        }
        *v46 = 0;
        *((_QWORD *)v41 + 33) = 0;
        *((_QWORD *)v41 + 34) = 0;
        *((_BYTE *)v41 + 280) = 1;
        if (!*MEMORY[0x1E0DDB4F0])
          __break(1u);
        v48 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
        v49 = *((_QWORD *)v41 + 32);
        v50 = *((_QWORD *)v41 + 33);
        if (v50 == v49)
        {
          *(_QWORD *)&v52 = vdupq_n_s64(v50).u64[0];
          v51 = v48;
        }
        else
        {
          v51 = v48;
          do
          {
            *(_OWORD *)(v51 - 16) = *(_OWORD *)(v50 - 16);
            v51 -= 16;
            v50 -= 16;
          }
          while (v50 != v49);
          v52 = *(_OWORD *)v46;
        }
        *((_QWORD *)v41 + 32) = v51;
        *((_QWORD *)v41 + 33) = v48;
        v53 = *((_QWORD *)v41 + 34);
        *((_QWORD *)v41 + 34) = v48 + 16 * v36;
        if ((_QWORD)v52)
          std::allocator_traits<caulk::rt_allocator<AudioStreamPacketDescription>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v52, (v53 - (uint64_t)v52) >> 4);
      }
      v54 = *(_QWORD *)(v11 + 104);
      *(_QWORD *)(v11 + 104) = v41;
      v1 = v93;
      if (v54)
        std::default_delete<ACSpanningInputBuffer>::operator()[abi:ne180100](v54);
    }
    if (!(_DWORD)v7)
    {
      v55 = *(_QWORD *)(v10 + 8 * v7);
      v56 = *(_OWORD *)(v55 + 16);
      v57 = *(_OWORD *)(v55 + 32);
      *((_QWORD *)v1 + 4) = *(_QWORD *)(v55 + 48);
      *(_OWORD *)v1 = v56;
      *((_OWORD *)v1 + 1) = v57;
    }
    v8 = 1;
LABEL_73:
    if (v9 == v96)
    {
      v58 = *(_QWORD *)(v10 + 8 * v7);
      v59 = *(_OWORD *)(v58 + 56);
      v60 = *(_OWORD *)(v58 + 72);
      *((_QWORD *)v94 + 4) = *(_QWORD *)(v58 + 88);
      *(_OWORD *)v94 = v59;
      *((_OWORD *)v94 + 1) = v60;
    }
    if (v9-- <= 1)
      goto LABEL_77;
  }
  v34 = *(_DWORD *)(v35 + 356);
  if (v34)
  {
    if (0x4000 / v34 <= 1)
      v36 = 1;
    else
      v36 = 0x4000 / v34;
    goto LABEL_44;
  }
  v84 = 1768846202;
  AudioConverterLog();
  v86 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v88 = *(_QWORD *)(v10 + 8 * v7);
    v87.i32[0] = bswap32(*(_DWORD *)(v88 + 24));
    *(int8x8_t *)v87.i8 = vzip1_s8(*(int8x8_t *)v87.i8, *(int8x8_t *)v87.i8);
    v89.i64[0] = 0x1F0000001FLL;
    v89.i64[1] = 0x1F0000001FLL;
    v90.i64[0] = 0x1F0000001FLL;
    v90.i64[1] = 0x1F0000001FLL;
    v91.i64[0] = 0x5F0000005FLL;
    v91.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)v87.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v91, (uint32x4_t)vsraq_n_s32(v90, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v87.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v87.i8, (int8x8_t)0x2E002E002E002ELL);
    v108 = 4;
    *(int8x8_t *)v87.i8 = vmovn_s16(v87);
    LODWORD(v107[0]) = v87.i32[0];
    BYTE4(v107[0]) = 0;
    v87.i32[0] = bswap32(*(_DWORD *)(v88 + 64));
    *(int8x8_t *)v87.i8 = vzip1_s8(*(int8x8_t *)v87.i8, *(int8x8_t *)v87.i8);
    *(int8x8_t *)v87.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v91, (uint32x4_t)vsraq_n_s32(v89, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v87.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v87.i8, (int8x8_t)0x2E002E002E002ELL);
    HIBYTE(v106) = 4;
    LODWORD(v105) = vmovn_s16(v87).u32[0];
    BYTE4(v105) = 0;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "CompositeAudioConverter.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1740;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v107;
    v110 = 2080;
    v111 = &v105;
    _os_log_impl(&dword_18EE07000, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d CompressedFormatMaxPacketSize() == 0 with input format: %s, output format: %s", buf, 0x26u);
    if (SHIBYTE(v106) < 0)
      operator delete((void *)v105);
    if (v108 < 0)
      operator delete(v107[0]);
  }
  return v84;
}

void sub_18EE27990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CA::AudioBuffers *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  __cxa_guard_abort(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc78ELc111ELc100ELc101ELc115EEEEEbvE5input);
  _Unwind_Resume(a1);
}

void ACAudioSpan::ACAudioSpan(ACAudioSpan *this, const AudioStreamBasicDescription *a2)
{
  _QWORD *v4;
  AudioFormatID mFormatID;
  UInt32 v6;
  _DWORD *v7;
  UInt32 mChannelsPerFrame;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;

  *((_BYTE *)this + 88) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *(_QWORD *)((char *)this + 21) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  v4 = CA::AudioBuffers::AudioBuffers((ACAudioSpan *)((char *)this + 96), a2, 0);
  if ((a2->mFormatFlags & 0x20) != 0)
  {
    mChannelsPerFrame = a2->mChannelsPerFrame;
    mFormatID = a2->mFormatID;
    v9 = *v4;
    if (mChannelsPerFrame == 1)
    {
      *(_DWORD *)(v9 + 56) = 1;
      v7 = (_DWORD *)(v9 + 48);
    }
    else
    {
      v10 = *(_DWORD *)(v9 + 48);
      v7 = (_DWORD *)(v9 + 48);
      v11 = 16 * v10;
      if (v11)
      {
        v12 = v7 + 2;
        do
        {
          *v12 = 1;
          v12 += 4;
          v11 -= 16;
        }
        while (v11);
      }
    }
  }
  else
  {
    mFormatID = a2->mFormatID;
    v6 = a2->mChannelsPerFrame;
    v7 = (_DWORD *)(*v4 + 48);
    *(_DWORD *)(*v4 + 56) = v6;
  }
  if (mFormatID == 1885564203)
  {
    if (!*((_BYTE *)this + 88))
      _ZNSt3__18optionalI19ACMetadataContainerE7emplaceB8ne180100IJEvEERS1_DpOT_((uint64_t)this + 48);
    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
  *((_QWORD *)this + 2) = v7;
  *((_DWORD *)this + 6) = *v7;
  *((_BYTE *)this + 28) = v13;
}

void sub_18EE27C24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  if (*(_BYTE *)(v1 + 88))
  {
    v3 = *(void **)(v1 + 48);
    if (v3)
    {
      *(_QWORD *)(v1 + 56) = v3;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *CA::AudioBuffers::AudioBuffers(_QWORD *a1, CA::AudioBuffers *this, int a3)
{
  std::logic_error *exception;

  *a1 = this;
  if (!this)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_CreateWithFormat failed");
  }
  CA::AudioBuffers::Prepare(this, a3, *((_DWORD *)this + 1));
  return a1;
}

void sub_18EE27CBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int *CA::AudioBuffers::Prepare(CA::AudioBuffers *this, int a2, unsigned int a3)
{
  unsigned int *result;
  std::logic_error *exception;

  result = ExtendedAudioBufferList_Prepare((uint64_t)this, a2, a3);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_Prepare failed");
  }
  return result;
}

void sub_18EE27D20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int *ExtendedAudioBufferList_Prepare(uint64_t a1, int a2, unsigned int a3)
{
  int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t message;
  caulk::concurrent::message *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (*(_DWORD *)(a1 + 8) != 1094863915)
    std::terminate();
  v3 = (int *)a1;
  v5 = (unsigned int *)(a1 + 48);
  v4 = *(unsigned int *)(a1 + 48);
  if (v4 > *(_DWORD *)a1)
  {
    v11 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gCADefaultDeferredLog, v11 + 88, 16);
    if (message)
    {
      v13 = (caulk::concurrent::message *)message;
      v14 = _os_log_pack_fill();
      v6 = *v5;
LABEL_13:
      v17 = *v3;
      *(_DWORD *)v14 = 67109376;
      *(_DWORD *)(v14 + 4) = v6;
      *(_WORD *)(v14 + 8) = 1024;
      *(_DWORD *)(v14 + 10) = v17;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gCADefaultDeferredLog + 16), v13);
    }
    return 0;
  }
  v6 = a3;
  v7 = *(unsigned int *)(a1 + 4);
  if (v7 < a3)
  {
    v15 = _os_log_pack_size();
    v16 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gCADefaultDeferredLog, v15 + 88, 16);
    if (v16)
    {
      v13 = (caulk::concurrent::message *)v16;
      v14 = _os_log_pack_fill();
      ++v3;
      goto LABEL_13;
    }
    return 0;
  }
  if ((_DWORD)v4)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = (_QWORD *)(a1 + 64);
    do
    {
      *v9 = v8;
      v8 += v7;
      *((_DWORD *)v9 - 2) = a2;
      *((_DWORD *)v9 - 1) = a3;
      v9 += 2;
      --v4;
    }
    while (v4);
  }
  return v5;
}

_QWORD *CA::AudioBuffers::AudioBuffers(CA::AudioBuffers *this, const AudioStreamBasicDescription *a2, int a3)
{
  CA::AudioBuffers *v5;
  AudioFormatID mFormatID;
  BOOL v7;
  UInt32 mChannelsPerFrame;

  v5 = (CA::AudioBuffers *)ExtendedAudioBufferList_CreateWithFormat((uint64_t)a2, a3);
  mFormatID = a2->mFormatID;
  v7 = mFormatID == 1885564203 || mFormatID == 1819304813;
  if (v7 && (a2->mFormatFlags & 0x20) != 0)
    mChannelsPerFrame = 1;
  else
    mChannelsPerFrame = a2->mChannelsPerFrame;
  return CA::AudioBuffers::AudioBuffers(this, v5, mChannelsPerFrame);
}

uint64_t `anonymous namespace'::EABLImpl::create(_anonymous_namespace_::EABLImpl *this, int a2, int a3)
{
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  std::pmr *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  uint64_t v22;

  v3 = this;
  v22 = *MEMORY[0x1E0C80C00];
  if (this > 0x1000)
  {
    v15 = CADefaultLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = 136315650;
      v17 = "AudioBuffers.cpp";
      v18 = 1024;
      v19 = 163;
      v20 = 1024;
      v21 = v3;
      _os_log_impl(&dword_18EE07000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d ExtendedAudioBufferList_Create: Too many buffers (%d)", (uint8_t *)&v16, 0x18u);
    }
    return 0;
  }
  else
  {
    v4 = 16 * this;
    if (v4 <= 0xC)
      v4 = 12;
    v5 = v4 + 60;
    if (a3)
      v6 = (((_DWORD)v5 + 15) & 0xFFFFFFF0) + 24;
    else
      v6 = v5;
    if (a3)
      v7 = (v5 + 15) & 0xFFFFFFF0;
    else
      v7 = 0;
    v8 = (a2 + 15) & 0xFFFFFFF0;
    v9 = (std::pmr *)caulk::numeric::exceptional_mul<unsigned int>(this, v8);
    v10 = v9;
    v11 = AudioBufferMemoryResource(v9);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v6, 16);
    if (v10)
      v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10, 16);
    else
      v13 = 0;
    *(_DWORD *)v12 = v3;
    *(_DWORD *)(v12 + 4) = v8;
    *(_DWORD *)(v12 + 8) = 1094863915;
    *(_DWORD *)(v12 + 12) = v7;
    *(_DWORD *)(v12 + 16) = v6;
    *(_DWORD *)(v12 + 20) = v10;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = v13;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    if (!gCADefaultDeferredLog)
    {
      if (gDefaultDeferredLogOnce != -1)
        dispatch_once(&gDefaultDeferredLogOnce, &__block_literal_global_4295);
      v7 = *(_DWORD *)(v12 + 12);
    }
    *(_DWORD *)(v12 + 48) = v3;
    *(_DWORD *)(v12 + 48 + 16 * v3 + 8) = 1094863915;
    if (v7)
      AudioMetadataFrame::AudioMetadataFrame((AudioMetadataFrame *)(v12 + v7));
  }
  return v12;
}

unint64_t caulk::numeric::exceptional_mul<unsigned int>(unsigned int a1, unsigned int a2)
{
  unint64_t result;
  std::runtime_error *exception;

  result = a1 * (unint64_t)a2;
  if ((result & 0xFFFFFFFF00000000) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic multiplication overflow");
  }
  return result;
}

void sub_18EE28148(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtendedAudioBufferList_CreateWithFormat(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v6;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 + 28);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 == 1885564203 || v3 == 1819304813)
  {
    if ((*(_BYTE *)(a1 + 12) & 0x20) != 0)
      v6 = v2;
    else
      v6 = 1;
  }
  else
  {
    v6 = 1;
  }
}

uint64_t acv2::AudioConverterBase::AsCodecConverter(acv2::AudioConverterBase *this)
{
  return 0;
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_18EE2820C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::CodecConverter::CheckUninitialize(acv2::CodecConverter **this)
{
  uint64_t result;
  int v3;
  _DWORD *exception;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = acv2::CodecConverter::IsInitialized(this[21]);
  if ((_DWORD)result)
  {
    result = AudioCodecUninitialize(this[21]);
    if ((_DWORD)result)
    {
      v3 = result;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v5 = 136315394;
        v6 = "CodecConverter.cpp";
        v7 = 1024;
        v8 = 1604;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioCodecUninitialize failed", (uint8_t *)&v5, 0x12u);
      }
      exception = __cxa_allocate_exception(4uLL);
      *exception = v3;
      __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
    }
  }
  return result;
}

OSStatus AudioCodecUninitialize(AudioCodec inCodec)
{
  uint64_t (***v1)(_QWORD);
  uint64_t (***v2)(_QWORD);
  uint64_t (*v3)(_QWORD);

  if (!inCodec)
    return -50;
  v1 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioCodec))(*(_QWORD *)inCodec + 8))(inCodec);
  if (!v1)
    return 560947818;
  v2 = v1;
  v3 = *(uint64_t (**)(_QWORD))(*(_QWORD *)((**v1)(v1) + 112) + 32);
  if (v3)
    return v3(v2[3]);
  else
    return -4;
}

OSStatus AudioCodecSetProperty(AudioCodec inCodec, AudioCodecPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (***v7)(_QWORD);
  uint64_t (***v8)(_QWORD);
  uint64_t (*v9)(uint64_t (**)(_QWORD), uint64_t, uint64_t, const void *);

  if (!inCodec)
    return -50;
  v5 = *(_QWORD *)&inPropertyDataSize;
  v6 = *(_QWORD *)&inPropertyID;
  v7 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioCodec))(*(_QWORD *)inCodec + 8))(inCodec);
  if (!v7)
    return 560947818;
  v8 = v7;
  v9 = *(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, uint64_t, const void *))(*(_QWORD *)((**v7)(v7) + 112)
                                                                                                 + 16);
  if (v9)
    return v9(v8[3], v6, v5, inPropertyData);
  else
    return -4;
}

BOOL acv2::CodecConverter::ConverterSupportsProperty(OpaqueAudioComponentInstance **this, AudioCodecPropertyID a2)
{
  OpaqueAudioComponentInstance *v5;
  UInt32 outDataSize;
  Boolean outWritable;

  if ((acv2::CodecConverter::CodecSupportsProperty(this[21], a2) & 1) != 0)
    return 1;
  v5 = this[89];
  if (!v5)
    return 0;
  outWritable = 0;
  outDataSize = 0;
  return AudioUnitGetPropertyInfo(*((AudioUnit *)v5 + 1), a2, 0, 0, &outDataSize, &outWritable) == 0;
}

void std::vector<AudioStreamPacketDescription>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v18 = &v3[16 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 4)
  {
    bzero(a1[1], 16 * v6);
    v18 = &v4[16 * v6];
LABEL_17:
    a1[1] = v18;
    return;
  }
  if (a2 >> 60)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 3;
  if (v8 >> 3 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v10);
  v12 = &v11[16 * v5];
  v14 = &v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[16 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *((_OWORD *)v16 - 1);
      v12 -= 16;
      v16 -= 16;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

uint64_t acv2::AudioConverterBase::HasPrimeInfo(acv2::AudioConverterBase *this)
{
  return 0;
}

uint64_t acv2::CodecConverter::StoreMagicCookie(acv2::CodecConverter *this, const void *a2, UInt32 a3)
{
  uint64_t result;

  if (!a2 && a3)
    return 4294967246;
  acv2::CodecConverter::CheckInitialize(this, a2, a3);
  result = *((_QWORD *)this + 105);
  if (result)
  {
    AudioConverterCapturer::setDecompressionCookie((AudioConverterCapturer *)result, a2, a3);
    return 0;
  }
  return result;
}

uint64_t acv2::CBRConverter::GetProperty(acv2::CBRConverter *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;

  v4 = 1886547824;
  if (a2 > 1836016242)
  {
    if (a2 > 2020175986)
    {
      if (a2 == 2020175987)
      {
        v5 = *((_DWORD *)this + 8);
        goto LABEL_18;
      }
      if (a2 == 2020569203)
      {
        v5 = *((_DWORD *)this + 18);
        goto LABEL_18;
      }
    }
    else
    {
      if (a2 == 1836016243)
      {
        v5 = *((_DWORD *)this + 41);
        goto LABEL_18;
      }
      if (a2 == 2020172403)
      {
        v5 = -1;
LABEL_18:
        v4 = 0;
        *a4 = v5;
        return v4;
      }
    }
    return v4;
  }
  switch(a2)
  {
    case 1667850867:
      v6 = *a4;
      v7 = *((_DWORD *)this + 40);
      v8 = *((_DWORD *)this + 41);
LABEL_17:
      v5 = v7 * v6 / v8;
      goto LABEL_18;
    case 1668244083:
      v6 = *a4;
      v8 = *((_DWORD *)this + 40);
      v7 = *((_DWORD *)this + 41);
      goto LABEL_17;
    case 1835623027:
      v5 = *((_DWORD *)this + 40);
      goto LABEL_18;
  }
  return v4;
}

uint64_t acv2::SampleRateConverter::HasPrimeInfo(acv2::SampleRateConverter *this)
{
  return 1;
}

uint64_t acv2::SampleRateConverter::SetProperty(acv2::SampleRateConverter *this, int a2, int a3, int *a4)
{
  uint64_t result;
  unsigned __int16 v7;
  int v8;
  int v9;
  int v10;
  double v11;

  result = 1886547824;
  if (a2 > 1936876392)
  {
    if (a2 == 1936876401)
    {
      if (a3 != 4)
        return 561211770;
      v10 = *a4;
      if (*a4 <= 0x7F)
      {
        if (*((_DWORD *)this + 69) != v10)
          *((_DWORD *)this + 69) = v10;
        goto LABEL_34;
      }
    }
    else
    {
      if (a2 != 1936876400)
      {
        v7 = 25449;
LABEL_8:
        if (a2 != (v7 | 0x73720000))
          return result;
        if (a3 == 4)
        {
          v8 = *a4;
          if (*a4 > 1835626095)
          {
            if (v8 == 1852797549)
              goto LABEL_32;
            v9 = 1835626096;
          }
          else
          {
            if (v8 == 1650553971)
              goto LABEL_32;
            v9 = 1818848869;
          }
          if (v8 == v9)
          {
LABEL_32:
            if (a2 != 1936876393)
              *((_DWORD *)this + 68) = v8;
          }
LABEL_34:
          acv2::SampleRateConverter::ReplaceResampler(this);
          return 0;
        }
        return 561211770;
      }
      if (a3 != 8)
        return 561211770;
      v11 = *(double *)a4;
      if (*(double *)a4 >= 0.0 && v11 < 1.0)
      {
        *((double *)this + 38) = v11;
        (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 64))(*((_QWORD *)this + 20));
        return 0;
      }
    }
    return 4294967246;
  }
  if (a2 == 1835626096)
  {
    if (a3 == 4)
    {
      *((_BYTE *)this + 312) = *a4 != 0;
      goto LABEL_34;
    }
    return 561211770;
  }
  if (a2 != 1886547309)
  {
    v7 = 25441;
    goto LABEL_8;
  }
  if (a3 != 4)
    return 561211770;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 20) + 32))(*((_QWORD *)this + 20));
  if (!(_DWORD)result)
    return result;
  *((_DWORD *)this + 70) = *a4;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 48))(*((_QWORD *)this + 20));
  return 0;
}

uint64_t acv2::Reinterleaver::SetProperty(acv2::Reinterleaver *this, int a2, size_t a3, void *__src)
{
  uint64_t v5;
  int *v6;
  int v7;
  size_t v8;

  if (a2 != 1667788144)
    return 1886547824;
  if (a3 < 4)
  {
LABEL_6:
    v8 = (4 * *((_DWORD *)this + 21));
    if (v8 >= a3)
      a3 = a3;
    else
      a3 = v8;
    memcpy(*((void **)this + 24), __src, a3);
    *((_BYTE *)this + 264) = memcmp(*((const void **)this + 24), *((const void **)this + 27), v8) == 0;
    acv2::Reinterleaver::BuildInverseChannelMap(this);
    return 0;
  }
  else
  {
    v5 = a3 >> 2;
    v6 = (int *)__src;
    while (1)
    {
      v7 = *v6++;
      if (v7 >= *((_DWORD *)this + 11))
        return 4294967246;
      if (!--v5)
        goto LABEL_6;
    }
  }
}

uint64_t acv2::Reinterleaver::GetProperty(acv2::Reinterleaver *this, int a2, unsigned int *a3, void *__dst)
{
  unsigned int v4;
  unsigned int v5;

  if (a2 == 1667788144)
  {
    v4 = 4 * *((_DWORD *)this + 21);
    if (a3)
    {
      v5 = *a3;
      if (*a3 < v4)
      {
LABEL_6:
        memcpy(__dst, *((const void **)this + 24), v5);
        return 0;
      }
      *a3 = v4;
    }
    v5 = v4;
    goto LABEL_6;
  }
  return acv2::CBRConverter::GetProperty(this, a2, a3, (unsigned int *)__dst);
}

uint64_t acv2::SRCKernel::PrimeMethodWritable(acv2::SRCKernel *this)
{
  return 1;
}

uint64_t acv2::CBRConverter::NeedsBufferedInput(acv2::CBRConverter *this)
{
  return 0;
}

uint64_t acv2::SampleRateConverter::CalcPrimeInfo(acv2::SampleRateConverter *this, AudioConverterPrimeInfo *a2)
{
  return (*(uint64_t (**)(_QWORD, AudioConverterPrimeInfo *))(**((_QWORD **)this + 20) + 24))(*((_QWORD *)this + 20), a2);
}

uint64_t acv2::BlockCopyConverter::GetProperty(acv2::BlockCopyConverter *this, int a2, unsigned int *a3, int *a4)
{
  int v5;
  uint64_t result;

  v5 = 1;
  result = 1886547824;
  if (a2 <= 1836016242)
  {
    if (a2 == 1667850867 || a2 == 1668244083)
      return 0;
    if (a2 != 1835623027)
      return result;
    goto LABEL_14;
  }
  if (a2 > 2020175986)
  {
    if (a2 == 2020175987)
    {
      v5 = *((_DWORD *)this + 8);
      goto LABEL_14;
    }
    if (a2 == 2020569203)
    {
      v5 = *((_DWORD *)this + 18);
      goto LABEL_14;
    }
    return result;
  }
  if (a2 == 1836016243)
  {
LABEL_14:
    *a4 = v5;
    return 0;
  }
  if (a2 == 2020172403)
  {
    v5 = -1;
    goto LABEL_14;
  }
  return result;
}

uint64_t acv2::Resampler2Wrapper::SetPrimeMethod(uint64_t this, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  *(_DWORD *)(this + 48) = a2;
  v2 = *(uint64_t **)(this + 24);
  for (i = *(uint64_t **)(this + 32);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, a2))
  {
    v5 = *v2++;
  }
  return this;
}

BOOL DSPGraph::Graph::hasParameter(DSPGraph::Graph *this, unsigned int a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((_QWORD *)this + 65, a2) != 0;
}

BOOL writeCommandToReserved(int a1, uint64_t a2, char *__src)
{
  unsigned int v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  size_t v9;

  v5 = *(unsigned __int16 *)__src;
  v6 = *(_DWORD *)(a2 + 8);
  if (v6 >= v5)
    v7 = *(unsigned __int16 *)__src;
  else
    v7 = v6;
  if ((_DWORD)v7)
  {
    memcpy(*(void **)a2, __src, v7);
    v5 -= v7;
    *(_DWORD *)(a2 + 8) -= v7;
    *(_QWORD *)a2 += v7;
  }
  if (!v5)
    return 1;
  v8 = *(_DWORD *)(a2 + 24);
  if (v5 >= v8)
    v9 = v8;
  else
    v9 = v5;
  if (!(_DWORD)v9)
    return 0;
  memcpy(*(void **)(a2 + 16), &__src[v7], v9);
  *(_DWORD *)(a2 + 24) -= v9;
  *(_QWORD *)(a2 + 16) += v9;
  return v5 <= v8;
}

uint64_t _AudioConverterNewInternal(const AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2, uint64_t a3, const AudioClassDescription *a4, _QWORD *a5)
{
  return AudioConverterNewInternal(a1, a2, a3, a4, a5, newAudioConverter, 0, 0);
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  BaseOpaqueObject *v1;
  unsigned int *v2;
  unsigned int v3;
  OSStatus v4;
  unsigned int *v5;
  unsigned int v6;
  char v8[4];
  int v9;
  __int128 v10;
  __int128 v11;
  char v12;
  _BYTE v13[24];
  char v14;
  unsigned int *v15;
  char v16;
  BaseOpaqueObject *v17;
  _BYTE v18[4];
  int v19;
  __int128 v20;
  __int128 v21;

  ResolvedOpaqueRef<AudioConverterAPI>::ResolvedOpaqueRef((uint64_t)v13, (int)inAudioConverter);
  v1 = v17;
  if (!v17)
  {
    v4 = -50;
    goto LABEL_13;
  }
  if (*((_BYTE *)v17 + 12) || !*((_BYTE *)v17 + 13))
  {
    v8[0] = 0;
    v12 = 0;
    goto LABEL_4;
  }
  v19 = 2741;
  v20 = 0u;
  v21 = 0u;
  kdebug_trace();
  v8[0] = 1;
  v9 = 2741;
  v10 = 0u;
  v11 = 0u;
  v18[0] = 0;
  v12 = 1;
  AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v18);
  v1 = v17;
  if (v17)
  {
LABEL_4:
    v2 = v15;
    if (v15)
    {
      do
        v3 = __ldaxr(v2);
      while (__stlxr(v3 - 1, v2));
      if (v14)
        v14 = 0;
      v15 = 0;
    }
    BaseOpaqueObject::destroyOpaqueRef(v1);
    (*(void (**)(BaseOpaqueObject *))(*(_QWORD *)v1 + 8))(v1);
    v17 = 0;
    if (!v12)
      goto LABEL_11;
  }
  AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v8);
LABEL_11:
  v4 = 0;
LABEL_13:
  if (v16)
  {
    v5 = v15;
    if (v15)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
    }
  }
  return v4;
}

void sub_18EE28D5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EE28CC0);
}

void sub_18EE28DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int *a19, char a20)
{
  unsigned int v20;

  if (a20 && a19)
  {
    do
      v20 = __ldaxr(a19);
    while (__stlxr(v20 - 1, a19));
  }
  _Unwind_Resume(a1);
}

void acv2::AudioConverterV2::~AudioConverterV2(acv2::AudioConverterChain **this)
{
  *this = (acv2::AudioConverterChain *)&off_1E290A700;
  std::unique_ptr<acv2::AudioConverterChain>::reset[abi:ne180100](this + 4, 0);
  AudioConverterAPI::~AudioConverterAPI((AudioConverterAPI *)this);
  JUMPOUT(0x193FFE460);
}

{
  *this = (acv2::AudioConverterChain *)&off_1E290A700;
  std::unique_ptr<acv2::AudioConverterChain>::reset[abi:ne180100](this + 4, 0);
  AudioConverterAPI::~AudioConverterAPI((AudioConverterAPI *)this);
}

void acv2::ConverterRegistry::AddFactory(acv2::ConverterRegistry *this, acv2::ConverterFactory *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = (_QWORD *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *((_QWORD *)this + 1);
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v11);
    else
      v12 = 0;
    v13 = (_QWORD *)(v11 + 8 * v8);
    v14 = v11 + 8 * v12;
    *v13 = a2;
    v6 = v13 + 1;
    v16 = (char *)*((_QWORD *)this + 1);
    v15 = (char *)*((_QWORD *)this + 2);
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = (char *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 1) = v13;
    *((_QWORD *)this + 2) = v6;
    *((_QWORD *)this + 3) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 2) = v6;
}

uint64_t AudioFormatProperty_FormatEmploysDependentPackets(RegistryAccess *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  RegistryAccess::instance(a1);
  v4 = qword_1ECEF4E20;
  os_unfair_recursive_lock_lock_with_options();
  v5 = (*(uint64_t (**)(uint64_t, RegistryAccess *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, a1, 1819304813, 0, 0);
  if (v5
    || (v5 = (*(uint64_t (**)(uint64_t, uint64_t, RegistryAccess *, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, 1819304813, a1, 0, 0)) != 0)
  {
    v6 = (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)v5 + 32))(v5, a2);
  }
  else
  {
    v6 = 1718449215;
  }
  os_unfair_recursive_lock_unlock();
  return v6;
}

void sub_18EE28FA0(_Unwind_Exception *a1)
{
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_FirstPlayableFormatFromList(RegistryAccess *a1, AudioFormatListItem *a2, unsigned int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  AudioFormatID *p_mFormatID;
  AudioFormatID v10;
  unsigned int v11;

  v5 = (int)a1;
  if ((_DWORD)a1 == 1 && a2->mASBD.mFormatID == 1819304813)
  {
    v6 = 0;
    *a3 = 0;
  }
  else
  {
    RegistryAccess::instance(a1);
    v7 = qword_1ECEF4E20;
    os_unfair_recursive_lock_lock_with_options();
    if (v5)
    {
      v8 = 0;
      p_mFormatID = &a2->mASBD.mFormatID;
      while (1)
      {
        v10 = *p_mFormatID;
        p_mFormatID += 12;
        if ((*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 16))(v7, v10, 1819304813, 0, 0))
        {
          break;
        }
        if (v5 == ++v8)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      LODWORD(v8) = -1;
    }
    if ((int)v8 < 0)
      v11 = -1;
    else
      v11 = v8;
    v6 = ((int)v8 >> 31) & 0x666D743F;
    *a3 = v11;
    os_unfair_recursive_lock_unlock();
  }
  return v6;
}

void sub_18EE2909C(_Unwind_Exception *a1)
{
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

void RegistryAccess::instance(RegistryAccess *this)
{
  unsigned __int8 v1;
  RegistryAccess *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      RegistryAccess::RegistryAccess(v2);
    }
  }
}

void sub_18EE29104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18EE2918C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return AudioConverterNewWithOptions((AudioStreamBasicDescription *)inSourceFormat, inDestinationFormat, 0, outAudioConverter);
}

void CA::StreamDescription::AsString(CA::StreamDescription *this, _QWORD *a2, double a3, int16x8_t a4)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  BOOL v15;
  int32x4_t v16;
  uint32x4_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  const char *v22;
  unsigned int v23;
  const char *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type size;
  std::string *v32;
  __int128 v33;
  void *v34;
  int v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  unsigned int v41;
  unsigned int v42;
  const char *v43;
  unsigned int v44;
  int v45;
  const char *v46;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  _BOOL4 v52;
  const char *v53;
  std::string v54;
  std::string v55;
  char __str[20];
  std::string v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)a2 + 2);
  if (v6 == 1718773105)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, 'freq'", (uint64_t)this, *((unsigned int *)a2 + 7), *a2);
    return;
  }
  if (v6 != 1819304813)
    goto LABEL_19;
  if (*((_DWORD *)a2 + 5) != 1)
    goto LABEL_19;
  v7 = *((_DWORD *)a2 + 6);
  if (v7 != *((_DWORD *)a2 + 4))
    goto LABEL_19;
  v8 = *((_DWORD *)a2 + 8);
  if (v7 < v8 >> 3)
    goto LABEL_19;
  v9 = *((unsigned int *)a2 + 7);
  if (!(_DWORD)v9)
    goto LABEL_19;
  v10 = *((_DWORD *)a2 + 3);
  if ((v10 & 0x20) == 0)
  {
    v15 = v7 == v7 / v9 * (_DWORD)v9;
    v7 /= v9;
    if (!v15)
      goto LABEL_19;
  }
  if ((v10 & 2) != 0 || 8 * v7 != v8)
    goto LABEL_19;
  if ((v10 & 1) != 0)
  {
    if ((v10 & 0x1F84) == 0)
    {
      if (v7 == 4)
      {
        v12 = 1;
        goto LABEL_163;
      }
      v15 = v7 == 8;
      v52 = v7 == 8;
      if (v15)
      {
        v12 = 4 * v52;
        goto LABEL_163;
      }
    }
LABEL_19:
    v13 = *((unsigned int *)a2 + 7);
    v14 = *(double *)a2;
    if ((_DWORD)v13)
      v15 = 0;
    else
      v15 = v6 == 0;
    if (v15 && v14 == 0.0)
    {
      caulk::make_string((caulk *)"%2u ch, %6.0f Hz", (uint64_t)this, 0, *a2);
      return;
    }
    a4.i32[0] = bswap32(v6);
    *(int8x8_t *)a4.i8 = vzip1_s8(*(int8x8_t *)a4.i8, *(int8x8_t *)&v14);
    v16.i64[0] = 0x1F0000001FLL;
    v16.i64[1] = 0x1F0000001FLL;
    v17.i64[0] = 0x5F0000005FLL;
    v17.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)a4.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v17, (uint32x4_t)vsraq_n_s32(v16, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a4.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a4.i8, (int8x8_t)0x2E002E002E002ELL);
    *((_BYTE *)&v57.__r_.__value_.__s + 23) = 4;
    LODWORD(v57.__r_.__value_.__l.__data_) = vmovn_s16(a4).u32[0];
    v57.__r_.__value_.__s.__data_[4] = 0;
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s (0x%08X) ", (uint64_t)&v55, v13, *(_QWORD *)&v14, &v57, *((unsigned int *)a2 + 3));
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    v18 = *((_DWORD *)a2 + 2);
    if (v18 <= 1819304812)
    {
      if (v18 != 1634492771 && v18 != 1634497332 && v18 != 1718378851)
      {
LABEL_70:
        caulk::make_string((caulk *)"%u bits/channel, %u bytes/packet, %u frames/packet, %u bytes/frame", (uint64_t)&v57, *((unsigned int *)a2 + 8), *((unsigned int *)a2 + 4), *((unsigned int *)a2 + 5), *((unsigned int *)a2 + 6));
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v55;
        else
          v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        else
          size = v55.__r_.__value_.__l.__size_;
LABEL_62:
        v32 = std::string::insert(&v57, 0, (const std::string::value_type *)v30, size);
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        *((_QWORD *)this + 2) = *((_QWORD *)&v32->__r_.__value_.__l + 2);
        *(_OWORD *)this = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_65;
        v34 = (void *)v57.__r_.__value_.__r.__words[0];
LABEL_64:
        operator delete(v34);
LABEL_65:
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        return;
      }
LABEL_45:
      v27 = *((unsigned int *)a2 + 3);
      if ((v27 - 1) < 4 || !(_DWORD)v27 && (v18 == 1634497332 || v18 == 1936487278 || v18 == 1936487267))
      {
        caulk::make_string((caulk *)"from %u-bit source, ", (uint64_t)&v57, CA::StreamDescription::AsString(void)const::kSourceBits[v27]);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &v57;
        else
          v28 = (std::string *)v57.__r_.__value_.__r.__words[0];
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        else
          v29 = v57.__r_.__value_.__l.__size_;
        std::string::append(&v55, (const std::string::value_type *)v28, v29);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
      }
      else
      {
        std::string::append(&v55, "from UNKNOWN source bit depth, ", 0x1FuLL);
      }
      caulk::make_string((caulk *)"%u frames/packet", (uint64_t)&v57, *((unsigned int *)a2 + 5));
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v55;
      else
        v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        size = v55.__r_.__value_.__l.__size_;
      goto LABEL_62;
    }
    if (v18 == 1936487278 || v18 == 1936487267)
      goto LABEL_45;
    if (v18 != 1819304813)
      goto LABEL_70;
    v19 = *((_DWORD *)a2 + 3);
    v20 = *((_DWORD *)a2 + 6);
    v21 = v19 & 0x20;
    v22 = "";
    if (!v20)
      goto LABEL_37;
    if ((v19 & 0x20) != 0)
    {
      v23 = 1;
    }
    else
    {
      v23 = *((_DWORD *)a2 + 7);
      if (!v23)
      {
        v21 = 0;
LABEL_37:
        v24 = " signed";
        if ((v19 & 4) == 0)
          v24 = " unsigned";
        if ((v19 & 1) != 0)
          v25 = "float";
        else
          v25 = "integer";
        if ((v19 & 1) != 0)
          v26 = "";
        else
          v26 = v24;
LABEL_102:
        v57.__r_.__value_.__s.__data_[0] = 0;
        if (v21)
          v39 = ", deinterleaved";
        else
          v39 = "";
        v36 = "";
        v40 = "";
        goto LABEL_106;
      }
    }
    v35 = v20 / v23;
    if (v20 / v23 < 2)
    {
      v38 = " signed";
      if ((v19 & 4) == 0)
        v38 = " unsigned";
      if ((v19 & 1) != 0)
        v25 = "float";
      else
        v25 = "integer";
      if ((v19 & 1) != 0)
        v26 = "";
      else
        v26 = v38;
      if (v23 > v20)
        goto LABEL_102;
      v35 = 1;
      v36 = "";
    }
    else
    {
      if ((v19 & 2) != 0)
        v36 = " big-endian";
      else
        v36 = " little-endian";
      v37 = " unsigned";
      if ((v19 & 4) != 0)
        v37 = " signed";
      if ((v19 & 1) != 0)
        v25 = "float";
      else
        v25 = "integer";
      if ((v19 & 1) != 0)
        v26 = "";
      else
        v26 = v37;
    }
    v41 = *((_DWORD *)a2 + 7);
    if ((v19 & 0x20) != 0)
      v42 = 1;
    else
      v42 = *((_DWORD *)a2 + 7);
    if (v42)
      v42 = 8 * (v20 / v42);
    if (v42 == *((_DWORD *)a2 + 8))
    {
      v57.__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      if ((v19 & 8) != 0)
        v43 = "";
      else
        v43 = "un";
      snprintf((char *)&v57, 0x20uLL, "%spacked in %u bytes", v43, v35);
      v20 = *((_DWORD *)a2 + 6);
      v19 = *((_DWORD *)a2 + 3);
      if (!v20)
      {
        v44 = 0;
        v21 = *((_DWORD *)a2 + 3) & 0x20;
        goto LABEL_128;
      }
      v41 = *((_DWORD *)a2 + 7);
      v21 = *((_DWORD *)a2 + 3) & 0x20;
    }
    if (v21)
      v44 = 1;
    else
      v44 = v41;
    if (v44)
      v44 = 8 * (v20 / v44);
LABEL_128:
    v45 = *((_DWORD *)a2 + 8);
    v46 = " high-aligned";
    if ((v19 & 0x10) == 0)
      v46 = " low-aligned";
    if ((v45 & 7) == 0 && v44 == v45)
      v40 = "";
    else
      v40 = v46;
    if (v21)
      v39 = ", deinterleaved";
    else
      v39 = "";
    if (v57.__r_.__value_.__s.__data_[0])
    {
      v22 = ", ";
LABEL_141:
      if (((v19 >> 7) & 0x3F) != 0)
        snprintf(__str, 0x14uLL, "%u.%u");
      else
        snprintf(__str, 0x14uLL, "%u");
      caulk::make_string((caulk *)"%s-bit%s%s %s%s%s%s%s", (uint64_t)&v54, __str, v36, v26, v25, v22, &v57, v40, v39);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v55;
      else
        v48 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        v49 = v55.__r_.__value_.__l.__size_;
      v50 = std::string::insert(&v54, 0, (const std::string::value_type *)v48, v49);
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      *((_QWORD *)this + 2) = *((_QWORD *)&v50->__r_.__value_.__l + 2);
      *(_OWORD *)this = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_65;
      v34 = (void *)v54.__r_.__value_.__r.__words[0];
      goto LABEL_64;
    }
LABEL_106:
    if (*v40)
      v22 = ", ";
    goto LABEL_141;
  }
  if ((v10 & 4) == 0)
    goto LABEL_19;
  v11 = (v10 >> 7) & 0x3F;
  if (v11 != 24 || v7 != 4)
  {
    if (!v11 && v7 == 4)
    {
      v12 = 5;
      goto LABEL_163;
    }
    if (!v11 && v7 == 2)
    {
      v12 = 2;
      goto LABEL_163;
    }
    goto LABEL_19;
  }
  v12 = 3;
LABEL_163:
  if ((v10 & 0x20) != 0)
    v53 = ", deinterleaved";
  else
    v53 = ", interleaved";
  if (v9 <= 1)
    v53 = "";
  caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s%s", (uint64_t)this, v9, *a2, *((_QWORD *)&off_1E29191B0 + v12), v53);
}

void sub_18EE298E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void caulk::make_string(caulk *this@<X0>, uint64_t a2@<X8>, ...)
{
  int v5;
  int v6;
  char *v7;
  size_t v8;
  int v9;
  va_list va;

  va_start(va, a2);
  v5 = vsnprintf(0, 0, (const char *)this, va);
  if (v5 <= 0)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    std::string::resize((std::string *)a2, (v5 + 1), 0);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = (char *)a2;
    else
      v7 = *(char **)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = vsnprintf(v7, v8, (const char *)this, va);
    std::string::resize((std::string *)a2, v9, 0);
  }
}

void AudioConverterLog(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      AudioConverterLog(void)::gLog = (uint64_t)os_log_create("com.apple.coreaudio", "AudioConverter");
    }
  }
}

uint64_t acv2::PCMConverterFactory::BuildConverterChain(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  std::vector<char>::pointer begin;
  std::vector<char>::pointer v8;
  uint64_t v9;
  uint64_t OutputLayout;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  double v14;
  double v15;
  uint8x8_t v16;
  uint8x8_t v17;
  char v18;
  std::vector<char>::pointer v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  void *v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint8_t *v30;
  uint64_t *i;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  int64x2_t v83;
  uint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  int64x2_t v89;
  unint64_t v90;
  void *v91;
  unint64_t v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  int64x2_t v110;
  unint64_t v111;
  int64x2_t v112;
  _QWORD v113[2];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  std::vector<char> v119;
  std::vector<char> v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127[2];
  void *__p[2];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int64x2_t v141;
  unint64_t v142;
  _QWORD *v143;
  std::vector<char>::value_type __x[16];
  __int128 v145;
  _BYTE v146[48];

  __x[0] = 0;
  std::vector<char>::vector(&v119, 0x20uLL, __x);
  begin = v119.__begin_;
  *(_QWORD *)v119.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  __x[0] = 0;
  std::vector<char>::vector(&v120, 0x20uLL, __x);
  v8 = v120.__begin_;
  *(_QWORD *)v120.__begin_ = 0;
  *((_DWORD *)v8 + 2) = 0;
  v9 = *(_QWORD *)(a4 + 344);
  if (v9 && *(_BYTE *)(v9 + 197))
  {
    OutputLayout = acv2::CodecConverter::GetOutputLayout((char **)v9, &v119, (unsigned __int8 *)__x);
    if ((_DWORD)OutputLayout)
      goto LABEL_74;
  }
  else if ((std::vector<char> *)(a4 + 352) != &v119)
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v119, *(char **)(a4 + 352), *(char **)(a4 + 360), *(_QWORD *)(a4 + 360) - *(_QWORD *)(a4 + 352));
  }
  v11 = *(_QWORD *)(a4 + 344);
  if (v11 && *(_BYTE *)(v11 + 196))
  {
    OutputLayout = acv2::CodecConverter::GetInputLayout((char **)v11, &v120, (unsigned __int8 *)__x);
    if ((_DWORD)OutputLayout)
      goto LABEL_74;
  }
  else if ((std::vector<char> *)(a4 + 376) != &v120)
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v120, *(char **)(a4 + 376), *(char **)(a4 + 384), *(_QWORD *)(a4 + 384) - *(_QWORD *)(a4 + 376));
  }
  v12 = a2[1];
  v114 = *a2;
  v115 = v12;
  v13 = a2[3];
  v116 = a2[2];
  v117 = v13;
  v118 = a2[4];
  v14 = *(double *)&v114;
  v15 = *((double *)&v116 + 1);
  if (*(double *)&v114 <= 0.0)
  {
    *(_QWORD *)&v114 = *((_QWORD *)&v116 + 1);
    v14 = *((double *)&v116 + 1);
  }
  else if (*((double *)&v116 + 1) <= 0.0)
  {
    *((_QWORD *)&v116 + 1) = v114;
    v15 = *(double *)&v114;
  }
  if (*(_DWORD *)v119.__begin_ == 0x10000)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v119.__begin_ + 1));
    v16.i16[0] = vaddlv_u8(v16);
    if (!v16.i32[0])
      goto LABEL_33;
  }
  else if (*(_DWORD *)v119.__begin_)
  {
    if (!(unsigned __int16)*(_DWORD *)v119.__begin_)
      goto LABEL_33;
  }
  else if (!*((_DWORD *)v119.__begin_ + 2))
  {
    goto LABEL_33;
  }
  if (*(_DWORD *)v120.__begin_ == 0x10000)
  {
    v17 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v120.__begin_ + 1));
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.i32[0])
      goto LABEL_33;
  }
  else if (*(_DWORD *)v120.__begin_)
  {
    if ((unsigned __int16)*(_DWORD *)v120.__begin_)
      goto LABEL_33;
  }
  else if (*((_DWORD *)v120.__begin_ + 2))
  {
    goto LABEL_33;
  }
  if (HIDWORD(v115) == DWORD1(v118))
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v120, v119.__begin_, v119.__end_, v119.__end_ - v119.__begin_);
LABEL_33:
  v112 = 0uLL;
  v113[0] = 0;
  v18 = 0;
  if (v14 == 0.0 || v15 == 0.0 || v14 == v15)
  {
    if (!*(_BYTE *)(a3 + 25))
    {
      v19 = v119.__begin_;
      goto LABEL_66;
    }
  }
  else
  {
    if (!*(_BYTE *)(a3 + 25))
    {
      v19 = v119.__begin_;
LABEL_54:
      *(_OWORD *)v146 = v116;
      *(_OWORD *)&v146[16] = v117;
      *(_OWORD *)&v146[32] = v118;
      *(_OWORD *)__x = v114;
      v145 = v115;
      v127[0] = 0;
      v127[1] = 0;
      __p[0] = 0;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(v127, v19, (uint64_t)v119.__end_, v119.__end_ - v19);
      __p[1] = 0;
      v129 = 0uLL;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p[1], v120.__begin_, (uint64_t)v120.__end_, v120.__end_ - v120.__begin_);
      LOBYTE(v121) = 0;
      acv2::PCMConverterFactory::AddDownReinterleaver((__int128 *)__x, (uint64_t)v127, a3, (uint64_t **)&v112, &v121);
      OutputLayout = acv2::PCMConverterFactory::AddSRC((uint64_t)__x, a3, (uint64_t)&v112);
      if (!(_DWORD)OutputLayout)
      {
        OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal(&v146[8], (uint64_t)__x, a3, (uint64_t **)&v112, 1);
        if (!(_DWORD)OutputLayout)
        {
          acv2::PCMConverterFactory::AddUpReinterleaver((__int128 *)__x, (uint64_t)v127, a3, (std::vector<int> ***)&v112, (char)v121);
          OutputLayout = 0;
        }
      }
      goto LABEL_68;
    }
    v18 = 1;
  }
  if (!acv2::Reinterleaver::StereoDownmixPossible(&v114))
  {
    v19 = v119.__begin_;
    if ((acv2::MixableFormatPair(HIDWORD(v115), DWORD1(v118), (__int32 *)v119.__begin_, (__int32 *)v120.__begin_) & 1) != 0)
    {
      if ((v18 & 1) == 0)
        goto LABEL_58;
LABEL_46:
      v129 = v116;
      v130 = v117;
      v131 = v118;
      *(_OWORD *)v127 = v114;
      *(_OWORD *)__p = v115;
      v121 = 0;
      v122 = 0;
      v123 = 0;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v121, v19, (uint64_t)v119.__end_, v119.__end_ - v19);
      v124 = 0;
      v125 = 0;
      v126 = 0;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v124, v120.__begin_, (uint64_t)v120.__end_, v120.__end_ - v120.__begin_);
      if (SDWORD1(v131) >= SHIDWORD(__p[1]))
        goto LABEL_173;
      v20 = 4 * HIDWORD(__p[1]);
      if ((BYTE4(v127[1]) & 0x20) != 0)
        v20 = 4;
      v132 = 0;
      v133 = 1819304813;
      v134 = BYTE4(v127[1]) & 0x20 | 9;
      v135 = v20;
      v136 = 1;
      v137 = v20;
      v138 = HIDWORD(__p[1]);
      v139 = 32;
      OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal(&v132, (uint64_t)v127, a3, (uint64_t **)&v112, 0);
      if ((_DWORD)OutputLayout)
        goto LABEL_206;
      *(_OWORD *)__x = *(_OWORD *)v127;
      v145 = *(_OWORD *)__p;
      *(_QWORD *)v146 = v129;
      v21 = DWORD1(v131);
      if ((BYTE4(v127[1]) & 0x20) != 0)
      {
        v22 = 1;
      }
      else
      {
        v22 = HIDWORD(__p[1]);
        if (!HIDWORD(__p[1]))
        {
          v23 = (v129 + 7) >> 3;
LABEL_134:
          HIDWORD(__p[1]) = DWORD1(v131);
          if ((BYTE4(v130) & 0x20) != 0)
            v21 = 1;
          HIDWORD(__p[0]) = 1;
          LODWORD(__p[1]) = v23 * v21;
          HIDWORD(v127[1]) = HIDWORD(v127[1]) & 0xFFFFFFDF | BYTE4(v130) & 0x20;
          LODWORD(__p[0]) = v23 * v21;
          *(_QWORD *)&v146[40] = v129;
          *(_OWORD *)&v146[8] = *(_OWORD *)v127;
          *(_OWORD *)&v146[24] = *(_OWORD *)__p;
          v67 = operator new();
          acv2::ChannelMixerConverter::ChannelMixerConverter(v67, (__int128 *)__x, &v121);
          if (*(_BYTE *)(a3 + 26))
            acv2::ChannelMixerConverter::SetMixMap(v67, a3 + 32);
          v68 = v112.i64[1];
          if (v112.i64[1] >= v113[0])
          {
            v74 = (v112.i64[1] - v112.i64[0]) >> 3;
            if ((unint64_t)(v74 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v75 = (v113[0] - v112.i64[0]) >> 2;
            if (v75 <= v74 + 1)
              v75 = v74 + 1;
            if (v113[0] - v112.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
              v76 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v76 = v75;
            v143 = v113;
            if (v76)
              v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v76);
            else
              v77 = 0;
            v84 = (uint64_t *)(v76 + 8 * v74);
            v85 = v76 + 8 * v77;
            v142 = v85;
            *v84 = v67;
            v69 = v84 + 1;
            v141.i64[1] = (uint64_t)(v84 + 1);
            v86 = (_QWORD *)v112.i64[1];
            v87 = (_QWORD *)v112.i64[0];
            if (v112.i64[1] == v112.i64[0])
            {
              v89 = vdupq_n_s64(v112.u64[1]);
            }
            else
            {
              do
              {
                v88 = *--v86;
                *v86 = 0;
                *--v84 = v88;
              }
              while (v86 != v87);
              v89 = v112;
              v69 = (_QWORD *)v141.i64[1];
              v85 = v142;
            }
            v112.i64[0] = (uint64_t)v84;
            v112.i64[1] = (uint64_t)v69;
            v141 = v89;
            v92 = v113[0];
            v113[0] = v85;
            v142 = v92;
            v140 = v89.i64[0];
            std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)&v140);
          }
          else
          {
            *(_QWORD *)v112.i64[1] = v67;
            v69 = (_QWORD *)(v68 + 8);
          }
          v112.i64[1] = (uint64_t)v69;
LABEL_173:
          OutputLayout = acv2::PCMConverterFactory::AddSRC((uint64_t)v127, a3, (uint64_t)&v112);
          if ((_DWORD)OutputLayout)
            goto LABEL_206;
          v93 = HIDWORD(__p[1]);
          if ((acv2::MixableFormatPair(HIDWORD(__p[1]), DWORD1(v131), (__int32 *)v121, (__int32 *)v124) & 1) == 0
            && !*(_BYTE *)(a3 + 26))
          {
            goto LABEL_205;
          }
          v94 = 4 * v93;
          if ((BYTE4(v127[1]) & 0x20) != 0)
            v94 = 4;
          v132 = 0;
          v133 = 1819304813;
          v134 = BYTE4(v127[1]) & 0x20 | 9;
          v135 = v94;
          v136 = 1;
          v137 = v94;
          v138 = v93;
          v139 = 32;
          OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal(&v132, (uint64_t)v127, a3, (uint64_t **)&v112, 0);
          if (!(_DWORD)OutputLayout)
          {
            *(_OWORD *)__x = *(_OWORD *)v127;
            v145 = *(_OWORD *)__p;
            *(_QWORD *)v146 = v129;
            v95 = DWORD1(v131);
            if ((BYTE4(v127[1]) & 0x20) != 0)
            {
              v96 = 1;
            }
            else
            {
              v96 = HIDWORD(__p[1]);
              if (!HIDWORD(__p[1]))
              {
                v97 = (v129 + 7) >> 3;
LABEL_184:
                HIDWORD(__p[1]) = DWORD1(v131);
                if ((BYTE4(v130) & 0x20) != 0)
                  v95 = 1;
                HIDWORD(__p[0]) = 1;
                LODWORD(__p[1]) = v97 * v95;
                HIDWORD(v127[1]) = HIDWORD(v127[1]) & 0xFFFFFFDF | BYTE4(v130) & 0x20;
                LODWORD(__p[0]) = v97 * v95;
                *(_QWORD *)&v146[40] = v129;
                *(_OWORD *)&v146[8] = *(_OWORD *)v127;
                *(_OWORD *)&v146[24] = *(_OWORD *)__p;
                v98 = operator new();
                acv2::ChannelMixerConverter::ChannelMixerConverter(v98, (__int128 *)__x, &v121);
                if (*(_BYTE *)(a3 + 26))
                  acv2::ChannelMixerConverter::SetMixMap(v98, a3 + 32);
                v99 = v112.i64[1];
                if (v112.i64[1] >= v113[0])
                {
                  v101 = (v112.i64[1] - v112.i64[0]) >> 3;
                  if ((unint64_t)(v101 + 1) >> 61)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v102 = (v113[0] - v112.i64[0]) >> 2;
                  if (v102 <= v101 + 1)
                    v102 = v101 + 1;
                  if (v113[0] - v112.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
                    v103 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v103 = v102;
                  v143 = v113;
                  if (v103)
                    v103 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v103);
                  else
                    v104 = 0;
                  v105 = (uint64_t *)(v103 + 8 * v101);
                  v106 = v103 + 8 * v104;
                  v142 = v106;
                  *v105 = v98;
                  v100 = v105 + 1;
                  v141.i64[1] = (uint64_t)(v105 + 1);
                  v107 = (_QWORD *)v112.i64[1];
                  v108 = (_QWORD *)v112.i64[0];
                  if (v112.i64[1] == v112.i64[0])
                  {
                    v110 = vdupq_n_s64(v112.u64[1]);
                  }
                  else
                  {
                    do
                    {
                      v109 = *--v107;
                      *v107 = 0;
                      *--v105 = v109;
                    }
                    while (v107 != v108);
                    v110 = v112;
                    v100 = (_QWORD *)v141.i64[1];
                    v106 = v142;
                  }
                  v112.i64[0] = (uint64_t)v105;
                  v112.i64[1] = (uint64_t)v100;
                  v141 = v110;
                  v111 = v113[0];
                  v113[0] = v106;
                  v142 = v111;
                  v140 = v110.i64[0];
                  std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)&v140);
                }
                else
                {
                  *(_QWORD *)v112.i64[1] = v98;
                  v100 = (_QWORD *)(v99 + 8);
                }
                v112.i64[1] = (uint64_t)v100;
LABEL_205:
                OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal((_DWORD *)&v129 + 2, (uint64_t)v127, a3, (uint64_t **)&v112, 1);
                goto LABEL_206;
              }
            }
            v97 = LODWORD(__p[1]) / v96;
            goto LABEL_184;
          }
LABEL_206:
          v91 = v124;
          if (!v124)
            goto LABEL_208;
          goto LABEL_207;
        }
      }
      v23 = LODWORD(__p[1]) / v22;
      goto LABEL_134;
    }
  }
  v19 = v119.__begin_;
  if ((v18 & 1) != 0)
  {
    if (*(_BYTE *)(a3 + 26))
      goto LABEL_46;
    goto LABEL_54;
  }
  if (!*(_BYTE *)(a3 + 26))
  {
LABEL_66:
    *(_OWORD *)v146 = v116;
    *(_OWORD *)&v146[16] = v117;
    *(_OWORD *)&v146[32] = v118;
    *(_OWORD *)__x = v114;
    v145 = v115;
    v127[0] = 0;
    v127[1] = 0;
    __p[0] = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(v127, v19, (uint64_t)v119.__end_, v119.__end_ - v19);
    __p[1] = 0;
    v129 = 0uLL;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p[1], v120.__begin_, (uint64_t)v120.__end_, v120.__end_ - v120.__begin_);
    LOBYTE(v121) = 0;
    acv2::PCMConverterFactory::AddDownReinterleaver((__int128 *)__x, (uint64_t)v127, a3, (uint64_t **)&v112, &v121);
    OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal(&v146[8], (uint64_t)__x, a3, (uint64_t **)&v112, 1);
    if (!(_DWORD)OutputLayout)
      acv2::PCMConverterFactory::AddUpReinterleaver((__int128 *)__x, (uint64_t)v127, a3, (std::vector<int> ***)&v112, (char)v121);
LABEL_68:
    if (__p[1])
      operator delete(__p[1]);
    v30 = (uint8_t *)v127[0];
    if (!v127[0])
      goto LABEL_72;
    goto LABEL_71;
  }
LABEL_58:
  v129 = v116;
  v130 = v117;
  v131 = v118;
  *(_OWORD *)v127 = v114;
  *(_OWORD *)__p = v115;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v121, v19, (uint64_t)v119.__end_, v119.__end_ - v19);
  v124 = 0;
  v125 = 0;
  v126 = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v124, v120.__begin_, (uint64_t)v120.__end_, v120.__end_ - v120.__begin_);
  v24 = HIDWORD(__p[1]);
  v25 = v124;
  if ((acv2::MixableFormatPair(HIDWORD(__p[1]), DWORD1(v131), (__int32 *)v121, (__int32 *)v124) & 1) != 0
    || *(_BYTE *)(a3 + 26))
  {
    v26 = 4 * v24;
    if ((BYTE4(v127[1]) & 0x20) != 0)
      v26 = 4;
    v132 = 0;
    v133 = 1819304813;
    v134 = BYTE4(v127[1]) & 0x20 | 9;
    v135 = v26;
    v136 = 1;
    v137 = v26;
    v138 = v24;
    v139 = 32;
    OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal(&v132, (uint64_t)v127, a3, (uint64_t **)&v112, 0);
    if ((_DWORD)OutputLayout)
      goto LABEL_168;
    *(_OWORD *)__x = *(_OWORD *)v127;
    v145 = *(_OWORD *)__p;
    *(_QWORD *)v146 = v129;
    v27 = DWORD1(v131);
    if ((BYTE4(v127[1]) & 0x20) != 0)
    {
      v28 = 1;
    }
    else
    {
      v28 = HIDWORD(__p[1]);
      if (!HIDWORD(__p[1]))
      {
        v29 = (v129 + 7) >> 3;
LABEL_126:
        HIDWORD(__p[1]) = DWORD1(v131);
        if ((BYTE4(v130) & 0x20) != 0)
          v27 = 1;
        HIDWORD(__p[0]) = 1;
        LODWORD(__p[1]) = v29 * v27;
        HIDWORD(v127[1]) = HIDWORD(v127[1]) & 0xFFFFFFDF | BYTE4(v130) & 0x20;
        LODWORD(__p[0]) = v29 * v27;
        *(_QWORD *)&v146[40] = v129;
        *(_OWORD *)&v146[8] = *(_OWORD *)v127;
        *(_OWORD *)&v146[24] = *(_OWORD *)__p;
        v64 = operator new();
        acv2::ChannelMixerConverter::ChannelMixerConverter(v64, (__int128 *)__x, &v121);
        if (*(_BYTE *)(a3 + 26))
          acv2::ChannelMixerConverter::SetMixMap(v64, a3 + 32);
        v65 = v112.i64[1];
        if (v112.i64[1] >= v113[0])
        {
          v70 = (v112.i64[1] - v112.i64[0]) >> 3;
          if ((unint64_t)(v70 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v71 = (v113[0] - v112.i64[0]) >> 2;
          if (v71 <= v70 + 1)
            v71 = v70 + 1;
          if (v113[0] - v112.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v72 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v72 = v71;
          v143 = v113;
          if (v72)
            v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v72);
          else
            v73 = 0;
          v78 = (uint64_t *)(v72 + 8 * v70);
          v79 = v72 + 8 * v73;
          v142 = v79;
          *v78 = v64;
          v66 = v78 + 1;
          v141.i64[1] = (uint64_t)(v78 + 1);
          v80 = (_QWORD *)v112.i64[1];
          v81 = (_QWORD *)v112.i64[0];
          if (v112.i64[1] == v112.i64[0])
          {
            v83 = vdupq_n_s64(v112.u64[1]);
          }
          else
          {
            do
            {
              v82 = *--v80;
              *v80 = 0;
              *--v78 = v82;
            }
            while (v80 != v81);
            v83 = v112;
            v66 = (_QWORD *)v141.i64[1];
            v79 = v142;
          }
          v112.i64[0] = (uint64_t)v78;
          v112.i64[1] = (uint64_t)v66;
          v141 = v83;
          v90 = v113[0];
          v113[0] = v79;
          v142 = v90;
          v140 = v83.i64[0];
          std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)&v140);
        }
        else
        {
          *(_QWORD *)v112.i64[1] = v64;
          v66 = (_QWORD *)(v65 + 8);
        }
        v112.i64[1] = (uint64_t)v66;
        goto LABEL_167;
      }
    }
    v29 = LODWORD(__p[1]) / v28;
    goto LABEL_126;
  }
LABEL_167:
  OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal((_DWORD *)&v129 + 2, (uint64_t)v127, a3, (uint64_t **)&v112, 1);
  v25 = v124;
LABEL_168:
  if (!v25)
    goto LABEL_208;
  v91 = v25;
LABEL_207:
  operator delete(v91);
LABEL_208:
  v30 = v121;
  if (v121)
LABEL_71:
    operator delete(v30);
LABEL_72:
  if (!(_DWORD)OutputLayout)
  {
    v33 = (uint64_t *)v112.i64[1];
    for (i = (uint64_t *)v112.i64[0]; i != v33; ++i)
    {
      v34 = *i;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*i + 16))(*i))
      {
        v36 = *(uint64_t **)(a4 + 304);
        v35 = *(_QWORD *)(a4 + 312);
        if ((unint64_t)v36 >= v35)
        {
          v41 = *(_QWORD *)(a4 + 296);
          v42 = ((uint64_t)v36 - v41) >> 3;
          if ((unint64_t)(v42 + 1) >> 61)
            goto LABEL_210;
          v43 = v35 - v41;
          v44 = v43 >> 2;
          if (v43 >> 2 <= (unint64_t)(v42 + 1))
            v44 = v42 + 1;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v44;
          if (v45)
            v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v45);
          else
            v46 = 0;
          v54 = (uint64_t *)(v45 + 8 * v42);
          *v54 = v34;
          v37 = v54 + 1;
          v56 = *(char **)(a4 + 296);
          v55 = *(char **)(a4 + 304);
          if (v55 != v56)
          {
            do
            {
              v57 = *((_QWORD *)v55 - 1);
              v55 -= 8;
              *--v54 = v57;
            }
            while (v55 != v56);
            v55 = *(char **)(a4 + 296);
          }
          *(_QWORD *)(a4 + 296) = v54;
          *(_QWORD *)(a4 + 304) = v37;
          *(_QWORD *)(a4 + 312) = v45 + 8 * v46;
          if (v55)
            operator delete(v55);
        }
        else
        {
          *v36 = v34;
          v37 = v36 + 1;
        }
        *(_QWORD *)(a4 + 304) = v37;
      }
      else if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34))
      {
        v39 = *(uint64_t **)(a4 + 328);
        v38 = *(_QWORD *)(a4 + 336);
        if ((unint64_t)v39 >= v38)
        {
          v48 = *(_QWORD *)(a4 + 320);
          v49 = ((uint64_t)v39 - v48) >> 3;
          if ((unint64_t)(v49 + 1) >> 61)
LABEL_210:
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v50 = v38 - v48;
          v51 = v50 >> 2;
          if (v50 >> 2 <= (unint64_t)(v49 + 1))
            v51 = v49 + 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
            v52 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v52 = v51;
          if (v52)
            v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v52);
          else
            v53 = 0;
          v59 = (uint64_t *)(v52 + 8 * v49);
          *v59 = v34;
          v40 = v59 + 1;
          v61 = *(char **)(a4 + 320);
          v60 = *(char **)(a4 + 328);
          if (v60 != v61)
          {
            do
            {
              v62 = *((_QWORD *)v60 - 1);
              v60 -= 8;
              *--v59 = v62;
            }
            while (v60 != v61);
            v60 = *(char **)(a4 + 320);
          }
          *(_QWORD *)(a4 + 320) = v59;
          *(_QWORD *)(a4 + 328) = v40;
          *(_QWORD *)(a4 + 336) = v52 + 8 * v53;
          if (v60)
            operator delete(v60);
        }
        else
        {
          *v39 = v34;
          v40 = v39 + 1;
        }
        *(_QWORD *)(a4 + 328) = v40;
      }
      else
      {
        v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 48))(v34);
        if (v47)
        {
          *(_QWORD *)(a4 + 344) = v47;
        }
        else
        {
          v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 32))(v34);
          if (v58)
          {
            *(_QWORD *)(a4 + 440) = v58;
          }
          else
          {
            v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
            if (v63)
              *(_QWORD *)(a4 + 424) = v63;
          }
        }
      }
      acv2::AudioConverterChain::AddStep((_QWORD *)a4, i);
    }
  }
  *(_QWORD *)__x = &v112;
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
LABEL_74:
  if (v120.__begin_)
  {
    v120.__end_ = v120.__begin_;
    operator delete(v120.__begin_);
  }
  if (v119.__begin_)
  {
    v119.__end_ = v119.__begin_;
    operator delete(v119.__begin_);
  }
  return OutputLayout;
}

void sub_18EE2A7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t *a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  MEMORY[0x193FFE460](v38, 0x10B3C404482F264);
  acv2::ChannelLayoutPair::~ChannelLayoutPair((acv2::ChannelLayoutPair *)&__p);
  a30 = &a9;
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  acv2::ChannelLayoutPair::~ChannelLayoutPair((acv2::ChannelLayoutPair *)&a24);
  _Unwind_Resume(a1);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  std::vector<char>::size_type v4;
  std::vector<char>::pointer end;
  char *v7;

  v4 = __n;
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
  end = this->__end_;
  v7 = &end[v4];
  do
  {
    *end++ = *__x;
    --v4;
  }
  while (v4);
  this->__end_ = v7;
  return this;
}

void sub_18EE2A930(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::ConverterRegistry::FindFactoryByFormatIDs(acv2::ConverterRegistry **a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  acv2::ConverterRegistry **v7;
  char *v8;
  unint64_t v9;
  char v10;
  acv2::ConverterRegistry *v11;
  acv2::ConverterRegistry *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char DecoderFactories;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t result;

  v7 = a1;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  while (2)
  {
    v11 = v7[1];
    v12 = v7[2];
    v13 = v8;
    while (v11 != v12)
    {
      v14 = *(_QWORD *)v11;
      if (*(_DWORD *)(*(_QWORD *)v11 + 8) != a2 || *(_DWORD *)(v14 + 12) != a3)
        goto LABEL_8;
      if ((unint64_t)v13 < v9)
      {
        *(_QWORD *)v13 = v14;
        v13 += 8;
LABEL_8:
        v15 = v13;
        goto LABEL_9;
      }
      v16 = (v13 - v8) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v9 - (_QWORD)v8) >> 2 > v17)
        v17 = (uint64_t)(v9 - (_QWORD)v8) >> 2;
      if (v9 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
      {
        v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v18);
        v14 = *(_QWORD *)v11;
      }
      else
      {
        v19 = 0;
      }
      v20 = (char *)(v18 + 8 * v16);
      *(_QWORD *)v20 = v14;
      v15 = v20 + 8;
      while (v13 != v8)
      {
        v21 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        *((_QWORD *)v20 - 1) = v21;
        v20 -= 8;
      }
      v9 = v18 + 8 * v19;
      if (v8)
        operator delete(v8);
      v8 = v20;
LABEL_9:
      v11 = (acv2::ConverterRegistry *)((char *)v11 + 8);
      v13 = v15;
    }
    if (!(v10 & 1 | (v8 != v13)))
    {
      if (a3 == 1885564203 || a3 == 1819304813)
      {
        v7 = a1;
        DecoderFactories = acv2::ConverterRegistry::MakeDecoderFactories(a1, a2, a3);
        goto LABEL_31;
      }
      v7 = a1;
      if (a2 != 1819304813)
        goto LABEL_50;
      DecoderFactories = acv2::ConverterRegistry::MakeEncoderFactories((acv2::ConverterRegistry *)a1, a3);
LABEL_31:
      v10 = 1;
      if ((DecoderFactories & 1) == 0)
      {
LABEL_50:
        v33 = 0;
        result = 0;
        if (v8)
          goto LABEL_51;
        return result;
      }
      continue;
    }
    break;
  }
  if (v8 == v13)
    goto LABEL_50;
  v23 = v13 - v8;
  v24 = v8;
  if (v13 - v8 != 8)
  {
    v24 = v8;
    if (a5)
    {
      v24 = v8;
      if ((v23 & 0x7FFFFFFF8) != 0)
      {
        v25 = 0;
        v26 = (v23 >> 3);
        v27 = -1;
        v28 = -1;
        do
        {
          v29 = 0;
          v30 = *(_DWORD **)&v8[8 * v25];
          v31 = 12 * a5;
          v32 = (_DWORD *)(a4 + 8);
          while (*(v32 - 2) != v30[4] || *(v32 - 1) != v30[5] || *v32 != v30[6])
          {
            ++v29;
            v32 += 3;
            v31 -= 12;
            if (!v31)
            {
              v29 = -1;
              break;
            }
          }
          if (v29 < v28)
          {
            v28 = v29;
            v27 = v25;
          }
          ++v25;
        }
        while (v25 != v26);
        v24 = &v8[8 * v27];
        if (v27 == -1)
          v24 = v8;
      }
    }
  }
  v33 = *(_QWORD *)v24;
LABEL_51:
  operator delete(v8);
  return v33;
}

void sub_18EE2ABCC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void acv2::PCMConverterFactory::AddDownReinterleaver(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t **a4, _BYTE *a5)
{
  signed int v5;
  int v6;
  int v12;
  _BOOL4 v13;
  __int128 v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  int64x2_t v37;
  uint64_t *v38;
  _OWORD v39[2];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  int64x2_t v45;
  unint64_t v46;
  _QWORD *v47;

  v5 = *((_DWORD *)a1 + 17);
  v6 = *((_DWORD *)a1 + 7);
  if (v5 >= v6)
    return;
  v12 = acv2::MixableFormatPair(*((_DWORD *)a1 + 7), v5, *(__int32 **)a2, *(__int32 **)(a2 + 24));
  if (*(_BYTE *)(a3 + 112))
    v13 = v5 == (uint64_t)(*(_QWORD *)(a3 + 96) - *(_QWORD *)(a3 + 88)) >> 2;
  else
    v13 = 0;
  v14 = a1[1];
  v39[0] = *a1;
  v39[1] = v14;
  v40 = *((_QWORD *)a1 + 4);
  v15 = *((_DWORD *)a1 + 13) & 0x20;
  v16 = *((_DWORD *)a1 + 3);
  if ((v16 & 0x20) != 0)
  {
    v6 = 1;
    goto LABEL_9;
  }
  if (v6)
  {
LABEL_9:
    v17 = *((_DWORD *)a1 + 6) / v6;
    goto LABEL_10;
  }
  v17 = (*((_DWORD *)a1 + 8) + 7) >> 3;
LABEL_10:
  v18 = v16 & 0xFFFFFFDF;
  if (v15)
    v19 = 1;
  else
    v19 = v5;
  v20 = v17 * v19;
  *((_DWORD *)a1 + 4) = v20;
  *((_DWORD *)a1 + 5) = 1;
  *((_DWORD *)a1 + 6) = v20;
  *((_DWORD *)a1 + 7) = v5;
  *((_DWORD *)a1 + 3) = v18 | v15;
  v21 = a1[1];
  v41 = *a1;
  v43 = *((_QWORD *)a1 + 4);
  v42 = v21;
  v22 = operator new();
  acv2::Reinterleaver::Reinterleaver(v22, (uint64_t)v39);
  if (*(_BYTE *)(a3 + 25)
    && (acv2::Reinterleaver::StereoDownmixPossible(v39) ? (v23 = v12) : (v23 = 0), v23 == 1))
  {
    *(_BYTE *)(v22 + 272) = 1;
  }
  else if (v13)
  {
    acv2::Reinterleaver::SetChannelMap(v22, a3 + 88);
    *a5 = 1;
  }
  else if (v12)
  {
    acv2::Reinterleaver::SetLayouts((std::vector<int> *)v22, *(const AudioChannelLayout *const **)a2, *(const AudioChannelLayout **)(a2 + 24));
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)a2, *(char **)(a2 + 24), *(char **)(a2 + 32), *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24));
  }
  v24 = (unint64_t)a4[2];
  v25 = a4[1];
  if ((unint64_t)v25 >= v24)
  {
    v27 = v25 - *a4;
    if ((unint64_t)(v27 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v28 = v24 - (_QWORD)*a4;
    v29 = v28 >> 2;
    if (v28 >> 2 <= (unint64_t)(v27 + 1))
      v29 = v27 + 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    v47 = a4 + 2;
    if (v30)
      v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v30);
    else
      v31 = 0;
    v32 = (uint64_t *)(v30 + 8 * v27);
    v33 = v30 + 8 * v31;
    v46 = v33;
    *v32 = v22;
    v26 = v32 + 1;
    v45.i64[1] = (uint64_t)(v32 + 1);
    v35 = *a4;
    v34 = a4[1];
    if (v34 == *a4)
    {
      v37 = vdupq_n_s64((unint64_t)v34);
    }
    else
    {
      do
      {
        v36 = *--v34;
        *v34 = 0;
        *--v32 = v36;
      }
      while (v34 != v35);
      v37 = *(int64x2_t *)a4;
      v26 = (uint64_t *)v45.i64[1];
      v33 = v46;
    }
    *a4 = v32;
    a4[1] = v26;
    v45 = v37;
    v38 = a4[2];
    a4[2] = (uint64_t *)v33;
    v46 = (unint64_t)v38;
    v44 = v37.i64[0];
    std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)&v44);
  }
  else
  {
    *v25 = v22;
    v26 = v25 + 1;
  }
  a4[1] = v26;
}

void sub_18EE2AE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10B3C40BBAFB75ALL);
  _Unwind_Resume(a1);
}

size_t CAFormatter::Init(CAFormatter *this, const char *__s)
{
  size_t v4;
  char *v5;

  v4 = strlen(__s) + 1;
  v5 = (char *)malloc_type_malloc(v4, 0x409FA1A0uLL);
  *(_QWORD *)this = v5;
  return strlcpy(v5, __s, v4);
}

uint64_t acv2::AudioConverterBase::AsSampleRateConverter(acv2::AudioConverterBase *this)
{
  return 0;
}

uint64_t acv2::AudioConverterBase::AsReinterleaver(acv2::AudioConverterBase *this)
{
  return 0;
}

uint64_t acv2::AudioConverterBase::AsChannelMixer(acv2::AudioConverterBase *this)
{
  return 0;
}

uint64_t acv2::AudioConverterBase::AsDitherer(acv2::AudioConverterBase *this)
{
  return 0;
}

uint64_t acv2::CodecConverterFactory::EmploysDependentPackets(AudioComponent *this, unsigned int *a2)
{
  uint64_t v4;
  uint64_t Property;
  unsigned int v6;
  unsigned int v8;
  UInt32 ioPropertyDataSize;
  AudioComponentInstance outInstance;

  pthread_mutex_lock(&acv2::sCodecConverterFactoryLocker);
  if (!*((_BYTE *)this + 68))
  {
    outInstance = 0;
    v4 = AudioComponentInstanceNew(this[4], &outInstance);
    if ((_DWORD)v4)
      goto LABEL_10;
    v8 = 0;
    ioPropertyDataSize = 4;
    Property = AudioCodecGetProperty(outInstance, 0x64706B3Fu, &ioPropertyDataSize, &v8);
    v4 = Property;
    if ((_DWORD)Property == 2003332927)
    {
      v6 = 0;
      v8 = 0;
    }
    else
    {
      if ((_DWORD)Property)
      {
LABEL_9:
        AudioComponentInstanceDispose(outInstance);
        goto LABEL_10;
      }
      v6 = v8;
    }
    v4 = 0;
    *a2 = v6;
    *((_DWORD *)this + 16) = v6;
    *((_BYTE *)this + 68) = 1;
    goto LABEL_9;
  }
  v4 = 0;
  *a2 = *((_DWORD *)this + 16);
LABEL_10:
  pthread_mutex_unlock(&acv2::sCodecConverterFactoryLocker);
  return v4;
}

void sub_18EE2AFF8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&acv2::sCodecConverterFactoryLocker);
  _Unwind_Resume(a1);
}

void acv2::AudioConverterChain::~AudioConverterChain(acv2::AudioConverterChain *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  v2 = (void *)*((_QWORD *)this + 63);
  if (v2)
  {
    *((_QWORD *)this + 64) = v2;
    operator delete(v2);
  }
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)this + 61, 0);
  v3 = (void *)*((_QWORD *)this + 47);
  if (v3)
  {
    *((_QWORD *)this + 48) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 44);
  if (v4)
  {
    *((_QWORD *)this + 45) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 40);
  if (v5)
  {
    *((_QWORD *)this + 41) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 37);
  if (v6)
  {
    *((_QWORD *)this + 38) = v6;
    operator delete(v6);
  }
  v7 = (void **)((char *)this + 272);
  std::vector<std::unique_ptr<ACOutputBuffer>>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((_BYTE *)this + 232))
    ACAudioSpan::~ACAudioSpan((std::pmr **)this + 16);
  v7 = (void **)((char *)this + 104);
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

uint64_t acv2::CodecConverterFactory::BuildConverterChain(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

uint64_t acv2::ConverterFactory::EmploysDependentPackets(acv2::ConverterFactory *this, unsigned int *a2)
{
  *a2 = 0;
  return 0;
}

void acv2::BlockCopyConverter::~BlockCopyConverter(acv2::BlockCopyConverter *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x193FFE460);
}

uint64_t acv2::ConverterRegistry::MakeEncoderFactories(acv2::ConverterRegistry *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  acv2::ConverterFactory *v8;
  uint64_t v9;
  double v11;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if (v3 == v4)
  {
LABEL_8:
    if (a2 == 1970037111)
    {
      v7 = operator new();
      v8 = (acv2::ConverterFactory *)v7;
      *(_QWORD *)(v7 + 8) = 0x756C61776C70636DLL;
      v9 = 0x756C61776E6C656ELL;
    }
    else
    {
      if (a2 != 1634492791)
      {
        LODWORD(v11) = vdup_n_s32(0x61656E63u).u32[0];
        HIDWORD(v11) = a2;
        return acv2::ConverterRegistry::MakeFactories(this, 0, a2, v11);
      }
      v7 = operator new();
      v8 = (acv2::ConverterFactory *)v7;
      *(_QWORD *)(v7 + 8) = 0x616C61776C70636DLL;
      v9 = 0x616C61776E6C656ELL;
    }
    *(_QWORD *)(v7 + 16) = v9;
    *(_DWORD *)(v7 + 24) = 1634758764;
    *(_QWORD *)v7 = &off_1E290B2C0;
    acv2::ConverterRegistry::AddFactory(this, v8);
    return 1;
  }
  while (1)
  {
    if (*(_DWORD *)(*(_QWORD *)v3 + 20) == a2)
    {
      v5 = *(_DWORD *)(*(_QWORD *)v3 + 16);
      if (v5 == 1634037347 || v5 == 1852597614)
        return 0;
    }
    v3 += 8;
    if (v3 == v4)
      goto LABEL_8;
  }
}

unint64_t DSPGraph::InputPort::upstreamLatencyInTicks(DSPGraph::InputPort *this)
{
  DSPGraph::Box *v1;
  uint64_t v2;

  v1 = *(DSPGraph::Box **)(*(_QWORD *)((*(uint64_t (**)(DSPGraph::InputPort *))(*(_QWORD *)this + 40))(this)
                                     + 8)
                         + 8);
  v2 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)v1 + 72))(v1);
  return DSPGraph::Box::upstreamLatencyInTicks(v1) + v2;
}

double DSPGraph::Box::totalLatencyInSeconds(DSPGraph::Box *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)this + 72))(this);
  return (double)(DSPGraph::Box::upstreamLatencyInTicks(this) + v2)
       / (double)*(unint64_t *)(*((_QWORD *)this + 1) + 696);
}

unint64_t DSPGraph::Box::upstreamLatencyInTicks(DSPGraph::Box *this)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  DSPGraph::Box *v6;
  uint64_t v7;
  uint64_t v8;

  if (*((_BYTE *)this + 760))
    return *((_QWORD *)this + 94);
  v3 = (uint64_t *)*((_QWORD *)this + 9);
  if (*((uint64_t **)this + 8) == v3)
  {
    v2 = 0;
  }
  else
  {
    v2 = 0;
    v4 = (uint64_t *)*((_QWORD *)this + 8);
    do
    {
      v5 = *v4;
      v4 += 4;
      v6 = *(DSPGraph::Box **)(*(_QWORD *)((*(uint64_t (**)(void))(v5 + 40))() + 8) + 8);
      v7 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)v6 + 72))(v6);
      v8 = DSPGraph::Box::upstreamLatencyInTicks(v6);
      if (v2 <= v8 + v7)
        v2 = v8 + v7;
    }
    while (v4 != v3);
  }
  *((_QWORD *)this + 94) = v2;
  *((_BYTE *)this + 760) = 1;
  return v2;
}

unint64_t DSPGraph::RingBufferBox::selfLatencyInTicks(DSPGraph::RingBufferBox *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *((unsigned int *)this + 194);
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 696);
  return v2 / (*(unsigned int (**)(DSPGraph::RingBufferBox *))(*(_QWORD *)this + 664))(this) * v1;
}

uint64_t DSPGraph::GraphOutput::ringBufferSampleRate(DSPGraph::GraphOutput *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 64;
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "in");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1426, &v7, &v6);
  }
  return **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
}

void sub_18EE2B4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUBox::selfLatencyInTicks(DSPGraph::AUBox *this)
{
  int v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  double v8;

  v8 = 0.0;
  v7 = 8;
  v2 = (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, _QWORD, _QWORD, int *, double *))(*(_QWORD *)this + 304))(this, 12, 0, 0, &v7, &v8);
  v3 = v8;
  if (v2)
    v3 = 0.0;
  v4 = llround(v3 * (double)*(unint64_t *)(*((_QWORD *)this + 1) + 696));
  if (v4 <= 0)
    v5 = 0;
  else
    v5 = -1;
  if (v4 >= 0)
    return v4;
  else
    return v5;
}

uint64_t DSPGraph::GraphInput::ringBufferSampleRate(DSPGraph::GraphInput *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "out");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1434, &v7, &v6);
  }
  return **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
}

void sub_18EE2B64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t _CheckRPCError(const char *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _BOOL4 v8;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a2)
  {
    CADefaultLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = a1;
      v12 = 1024;
      v13 = 0;
      _os_log_error_impl(&dword_18EE07000, v6, OS_LOG_TYPE_ERROR, "%s is passing a serverPID of %d to CheckRPCError!", (uint8_t *)&v10, 0x12u);
    }

  }
  if ((_DWORD)a3 == 268451843 || (_DWORD)a3 == 268435460)
  {
    _ReportRPCTimeout(a1, a2);
  }
  else
  {
    v8 = (a3 & 0x3E00) != 0;
    if ((a3 & 0xFFFFC1FF) != 0)
      v8 = 0;
    if (WORD1(a3) == 4096 || v8)
    {
      CADefaultLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = 136315394;
        v11 = a1;
        v12 = 1024;
        v13 = a3;
        _os_log_error_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, "CheckRPCError: %s returned server mach error 0x%x!", (uint8_t *)&v10, 0x12u);
      }

    }
  }
  return a3;
}

void sub_18EE2BAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void ___ZN34AudioComponentMgr_RegistrarService27connectToRegistrationServerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[5];
  _QWORD v9[5];

  v1 = *(_QWORD *)(a1 + 32);
  assertXPCServiceReachable(CFSTR("com.apple.audio.AudioComponentRegistrar"));
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.audio.AudioComponentRegistrar"), 4096);
  AudioComponentRegistrarProtocol_XPCInterface();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setRemoteObjectInterface:", v3);

  v4 = (void *)objc_opt_new();
  objc_msgSend(v2, "setExportedObject:", v4);

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE169798);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setExportedInterface:", v5);

  v6 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN34AudioComponentMgr_RegistrarService27connectToRegistrationServerEv_block_invoke_2;
  v9[3] = &__block_descriptor_40_e5_v8__0l;
  v9[4] = v1;
  objc_msgSend(v2, "setInterruptionHandler:", v9);
  v8[0] = v6;
  v8[1] = 3221225472;
  v8[2] = ___ZN34AudioComponentMgr_RegistrarService27connectToRegistrationServerEv_block_invoke_3;
  v8[3] = &__block_descriptor_40_e5_v8__0l;
  v8[4] = v1;
  objc_msgSend(v2, "setInvalidationHandler:", v8);
  objc_msgSend(v2, "resume");
  v7 = *(void **)(v1 + 88);
  *(_QWORD *)(v1 + 88) = v2;

}

void sub_18EE2BCA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void assertXPCServiceReachable(NSString *a1)
{
  int *v1;
  NSString *v2;
  int v3;
  mach_port_t special_port[2];

  v2 = a1;
  v3 = assertXPCServiceReachable(NSString *)::gAssertReachable;
  if (assertXPCServiceReachable(NSString *)::gAssertReachable < 0)
  {
    CASmartPreferences::Read((CASmartPreferences *)CFSTR("AssertComponentRegistrarReachable"), CFSTR("com.apple.coreaudio"), (const __CFString *)&assertXPCServiceReachable(NSString *)::gAssertReachable, v1);
    v3 = assertXPCServiceReachable(NSString *)::gAssertReachable;
  }
  if (v3 >= 1
    && (*(_QWORD *)special_port = 0,
        task_get_special_port(*MEMORY[0x1E0C83DA0], 4, &special_port[1]),
        bootstrap_look_up(special_port[1], -[NSString UTF8String](objc_retainAutorelease(v2), "UTF8String"), special_port)))
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  else
  {

  }
}

void sub_18EE2BD7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *CASmartPreferences::Read(CASmartPreferences *this, const __CFString *a2, const __CFString *a3, int *a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16[0] = &off_1E2915918;
  v16[1] = a3;
  v17 = v16;
  CASmartPreferences::instance(this);
  v18 = MEMORY[0x1E0DDECE0];
  v4 = v19;
  v5 = (uint64_t)v17;
  if (!v17)
    goto LABEL_4;
  if (v17 != v16)
  {
    v5 = (*(uint64_t (**)(void))(*v17 + 16))();
LABEL_4:
    v20 = (_QWORD *)v5;
    goto LABEL_6;
  }
  v20 = v19;
  (*(void (**)(_QWORD *, _QWORD *))(v16[0] + 24))(v16, v19);
LABEL_6:
  v22 = 0;
  v6 = operator new(0x30uLL);
  v7 = v6;
  v8 = v18;
  v9 = v20;
  *v6 = &off_1E29158D0;
  v6[1] = v8;
  if (!v9)
  {
    v10 = v6 + 5;
    goto LABEL_10;
  }
  if (v9 != v19)
  {
    v10 = &v20;
    v6[5] = v9;
LABEL_10:
    *v10 = 0;
    goto LABEL_12;
  }
  v6[5] = v6 + 2;
  (*(void (**)(_QWORD *))(v19[0] + 24))(v19);
LABEL_12:
  v22 = v7;
  CASmartPreferences::_RegisterFirstHandler();
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_17;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_17:
  if (v20 == v19)
  {
    v13 = 4;
  }
  else
  {
    if (!v20)
      goto LABEL_22;
    v13 = 5;
    v4 = v20;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v13))(v4);
LABEL_22:
  result = v17;
  if (v17 == v16)
  {
    v15 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void sub_18EE2BF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E29158D0;
  v2[1] = v3;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_18EE2C074(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915918;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

id AudioComponentRegistrarProtocol_XPCInterface(void)
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE16F738);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C99E60];
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  objc_msgSend(v1, "setWithObjects:", v2, v3, v4, objc_opt_class(), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v5, sel_getComponentList_linkedSDKRequiresEntitlement_includeExtensions_forceWaitForExtensions_reply_, 3, 1);

  return v0;
}

void sub_18EE2C1C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EE2C284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EE2C4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10)
{

  _Unwind_Resume(a1);
}

APComponent *APComponent::name(APComponent *this, const void *a2)
{
  APComponent *v3;

  v3 = this;
  if (a2)
    this = (APComponent *)CFRetain(a2);
  *(_QWORD *)v3 = a2;
  return this;
}

uint64_t APComponent::asBundleComponent(APComponent *this)
{
  return 0;
}

void sub_18EE2C5A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void DSPGraph::Graph::initialize(DSPGraph::Graph *this, int a2)
{
  int v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  DSPGraph::Graph::initializeWithFlags(this, v2);
}

uint64_t DSPGraph::ABIVersion(DSPGraph *this)
{
  return 4;
}

void DSPGraph::Interpreter::parseWireGraphPropertyCommand(DSPGraph::Interpreter *this, const char **a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  char *v9;

  LODWORD(v9) = 0;
  if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)a2, (const char **)&v9, (unsigned int *)1) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "parseWireGraphPropertyCommand");
    std::string::basic_string[abi:ne180100]<0>(&v5, "expected parameter ID in 'wireGraphProperty' command");
    DSPGraph::ThrowException(1886548769, &v7, 1056, &v6, &v5);
  }
  v7 = 0uLL;
  v8 = 0;
  if (!DSPGraph::Interpreter::parsePropertyEndpoint((uint64_t)this, (DSPGraph *)a2, (uint64_t)&v7))
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "parseWireGraphPropertyCommand");
    std::string::basic_string[abi:ne180100]<0>(&v4, "expected endpoint in 'wireGraphProperty' command");
    DSPGraph::ThrowException(1886548769, &v6, 1061, &v5, &v4);
  }
  DSPGraph::Graph::connectProperty(*((_QWORD *)this + 1), v9, &v7);
}

void sub_18EE2C6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Graph::connectProperty(uint64_t a1, unsigned int a2, __int128 *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (*(_BYTE *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v23, "connectProperty");
    std::string::basic_string[abi:ne180100]<0>(&v22, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v24, 2227, &v23, &v22);
  }
  v4 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((_QWORD *)(a1 + 560), a2);
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v23, "connectProperty");
    std::string::basic_string[abi:ne180100]<0>(&v22, "connectProperty : inPropertyID not found");
    DSPGraph::ThrowException(1852204065, &v24, 2232, &v23, &v22);
  }
  v5 = v4;
  v7 = v4[10];
  v6 = v4[11];
  if (v7 >= v6)
  {
    v10 = v4[9];
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v10) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v10) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v14);
    else
      v15 = 0;
    v16 = v14 + 24 * v11;
    v17 = v14 + 24 * v15;
    v18 = *a3;
    *(_QWORD *)(v16 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v16 = v18;
    v9 = v16 + 24;
    v20 = (char *)v5[9];
    v19 = (char *)v5[10];
    if (v19 != v20)
    {
      do
      {
        v21 = *(_OWORD *)(v19 - 24);
        *(_DWORD *)(v16 - 8) = *((_DWORD *)v19 - 2);
        *(_OWORD *)(v16 - 24) = v21;
        v16 -= 24;
        v19 -= 24;
      }
      while (v19 != v20);
      v19 = (char *)v5[9];
    }
    v5[9] = v16;
    v5[10] = v9;
    v5[11] = v17;
    if (v19)
      operator delete(v19);
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
    v9 = v7 + 24;
  }
  v5[10] = v9;
}

void sub_18EE2C944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t *DSPGraph::Graph::setProperty(DSPGraph::Graph *this, unsigned int a2, uint64_t a3, const void *a4)
{
  uint64_t *result;
  unsigned int *v7;
  unsigned int *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  result = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((_QWORD *)this + 70, a2);
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "setProperty");
    std::string::basic_string[abi:ne180100]<0>(&v9, "setProperty : inPropertyID not found");
    DSPGraph::ThrowException(1852204065, &v11, 2242, &v10, &v9);
  }
  v7 = (unsigned int *)result[9];
  v8 = (unsigned int *)result[10];
  while (v7 != v8)
  {
    result = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, const void *))(**(_QWORD **)v7 + 312))(*(_QWORD *)v7, v7[2], v7[3], v7[4], a3, a4);
    v7 += 6;
  }
  return result;
}

void sub_18EE2CA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::getProperty(DSPGraph::Graph *this, unsigned int a2, unsigned int *a3, void *a4)
{
  uint64_t *v6;
  unsigned int *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v6 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((_QWORD *)this + 70, a2);
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "getProperty");
    std::string::basic_string[abi:ne180100]<0>(&v9, "getProperty : inPropertyID not found");
    DSPGraph::ThrowException(1852204065, &v11, 2270, &v10, &v9);
  }
  v7 = (unsigned int *)v6[9];
  if ((unsigned int *)v6[10] == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "getProperty");
    std::string::basic_string[abi:ne180100]<0>(&v9, "getProperty : property is not connected to any box.");
    DSPGraph::ThrowException(1969451041, &v11, 2278, &v10, &v9);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, unsigned int *, void *))(**(_QWORD **)v7 + 304))(*(_QWORD *)v7, v7[2], v7[3], v7[4], a3, a4);
}

void sub_18EE2CBA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

unint64_t DSPGraph::Graph::getPropertyInfo(DSPGraph::Graph *this, unsigned int a2)
{
  uint64_t *v2;
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((_QWORD *)this + 70, a2);
  if (v2)
  {
    v3 = (unsigned int *)v2[9];
    if ((unsigned int *)v2[10] == v3)
    {
      v5 = 0;
      v6 = 1969451041;
    }
    else
    {
      v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)v3 + 296))(*(_QWORD *)v3, v3[2], v3[3], v3[4]);
      v5 = v4 & 0xFFFFFFFF00000000;
      v6 = v4;
    }
  }
  else
  {
    v5 = 0;
    v6 = 1852204065;
  }
  return v5 | v6;
}

unint64_t DSPGraph::AUBox::getPropertyInfo(AudioUnit *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4)
{
  unsigned int PropertyInfo;
  unint64_t v5;
  uint64_t v6;
  Boolean outWritable;
  UInt32 outDataSize;

  outDataSize = 0;
  outWritable = 0;
  PropertyInfo = AudioUnitGetPropertyInfo(this[106], a2, a3, a4, &outDataSize, &outWritable);
  v5 = (unint64_t)(outWritable != 0) << 32;
  if (PropertyInfo)
    v6 = PropertyInfo;
  else
    v6 = outDataSize;
  if (PropertyInfo)
    v5 = 0;
  return v5 | v6;
}

OSStatus AudioUnitGetPropertyInfo(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, UInt32 *outDataSize, Boolean *outWritable)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (***v11)(_QWORD);
  uint64_t (***v12)(_QWORD);
  uint64_t v13;
  OSStatus result;

  if (!inUnit)
    return -50;
  v8 = *(_QWORD *)&inElement;
  v9 = *(_QWORD *)&inScope;
  v10 = *(_QWORD *)&inID;
  v11 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v11)
    return 560947818;
  v12 = v11;
  if (*(_WORD *)((**v11)(v11) + 38) != 24949)
    return -3000;
  if (!*(_QWORD *)(*(_QWORD *)((**v12)(v12) + 112) + 16))
    return -4;
  if (!v12[3])
    return -66740;
  v13 = (**v12)(v12);
  if ((_DWORD)v10 == 62)
  {
    result = 0;
    *outDataSize = 4;
  }
  else if (*((_BYTE *)v12 + 88) && (_DWORD)v10 == 65)
  {
    if (outDataSize)
      *outDataSize = 4;
    result = 0;
    if (outWritable)
      *outWritable = 1;
  }
  else
  {
    return (*(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t, UInt32 *, Boolean *))(*(_QWORD *)(v13 + 112) + 16))(v12[3], v10, v9, v8, outDataSize, outWritable);
  }
  return result;
}

OSStatus AudioConverterReset(AudioConverterRef inAudioConverter)
{
  char v2;
  uint64_t (*v3[3])(uint64_t, uint64_t);

  v3[0] = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterReset::$_0>;
  v3[1] = (uint64_t (*)(uint64_t, uint64_t))&v2;
  return with_resolved((int)inAudioConverter, v3);
}

uint64_t acv2::AudioConverterV2::fillComplexBuffer(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _BOOL4 v28;
  int v29;
  AudioStreamPacketDescription *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  int v37;
  BOOL v38;
  uint64_t v40;
  uint64_t v41;
  caulk::concurrent::message *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  caulk::concurrent::message *v48;
  uint64_t v49;
  uint64_t v50;
  caulk::concurrent::message *v51;
  uint64_t v52;
  uint64_t message;
  caulk::concurrent::message *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  _QWORD v70[3];
  char v71[4];
  int v72;
  uint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  int **v79;
  int *v80;

  v80 = a4;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 96))
  {
    if (*(_BYTE *)(a1 + 12))
    {
      v78 = a1;
      v79 = &v80;
    }
    else
    {
      v13 = *(unsigned __int8 *)(a1 + 12);
      v78 = a1;
      v79 = &v80;
      if (!v13 && *(_BYTE *)(a1 + 13))
      {
        v16 = *(unsigned int *)(a1 + 16);
        v17 = (unsigned int *)*(unsigned int *)(a1 + 20);
        HIDWORD(v60) = 2740;
        v61 = v16;
        v62 = v17;
        v63 = 0;
        v64 = 0;
        kdebug_trace();
        v71[0] = 1;
        v72 = 2740;
        v73 = v16;
        v74 = v17;
        v75 = 0;
        v76 = 0;
        LOBYTE(v60) = 0;
        v77 = 1;
        AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&v60);
        if (a2)
          goto LABEL_6;
        goto LABEL_13;
      }
    }
    v71[0] = 0;
    v77 = 0;
    if (a2)
    {
LABEL_6:
      if (v80)
      {
        if (a5)
        {
          v14 = *(_QWORD *)(a1 + 32);
          if (!a6)
          {
            if (*(_BYTE *)(v14 + 496))
            {
              v15 = (uint64_t *)(v14 + 504);
              std::vector<AudioStreamPacketDescription>::resize((char **)(v14 + 504), *v80);
              a6 = *v15;
              v14 = *(_QWORD *)(a1 + 32);
            }
            else
            {
              a6 = 0;
            }
          }
          if ((*(_BYTE *)(v14 + 52) & 0x20) != 0)
          {
            v20 = *(_DWORD *)(v14 + 68);
            if (v20 != *a5)
              goto LABEL_66;
            if (!v20)
            {
LABEL_25:
              CrashIfClientProvidedBogusAudioBufferList();
              v23 = *(_QWORD *)(a1 + 32);
              v24 = *(_DWORD *)(v23 + 56);
              v25 = *a5;
              if (v24 && (_DWORD)v25)
              {
                v26 = 0;
                v27 = -1;
                do
                {
                  if (a5[v26 + 3] < v27)
                    v27 = a5[v26 + 3];
                  v26 += 4;
                }
                while (4 * v25 != v26);
                if (v27 < *v80 * v24)
                {
                  *v80 = v27 / v24;
                  LODWORD(v25) = *a5;
                }
              }
              v28 = *(_DWORD *)(v23 + 48) == 1885564203 && a5[4 * v25 + 2] == 1094863915 && *(a5 - 9) != 0;
              v29 = *v80;
              v70[0] = a2;
              v70[1] = a3;
              v70[2] = *(unsigned int *)(a1 + 8);
              v60 = 0;
              v61 = 0;
              v62 = a5;
              LODWORD(v63) = v25;
              BYTE4(v63) = v28;
              v69 = 0;
              v64 = 0;
              v65 = 0;
              LOBYTE(v66) = 0;
              if (v28)
              {
                v68 = 0;
                v66 = 0u;
                v67 = 0u;
                v69 = 1;
              }
              v30 = (AudioStreamPacketDescription *)a5[3];
              v65 = a7;
              ACBaseAudioSpan::set(&v60, (const AudioBufferList *)a5, a6, v29, v30);
              v31 = *(_QWORD *)(a1 + 32);
              *(_QWORD *)&v59 = caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterV2::fillComplexBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *),void *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription *,AudioStreamPacketDependencyInfo *)::$_1>;
              *((_QWORD *)&v59 + 1) = v70;
              v32 = acv2::AudioConverterChain::ProduceOutput(v31, &v59, (ACBaseAudioSpan *)&v60);
              if ((v32 & 0xFF00000000) != 0)
                v33 = 0;
              else
                v33 = v32;
              v34 = *v62;
              if ((_DWORD)v34)
              {
                v35 = v61;
                v36 = v62 + 3;
                do
                {
                  *v36 = v35;
                  v36 += 4;
                  --v34;
                }
                while (v34);
              }
              v37 = v60;
              *v80 = v60;
              if (*(_BYTE *)(a1 + 28))
                v38 = v37 == 0;
              else
                v38 = 1;
              if (!v38)
              {
                *(_BYTE *)(a1 + 28) = 0;
                kdebug_trace();
              }
              if (v69 && (_QWORD)v66)
                std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100]((void *)v66);
              goto LABEL_53;
            }
          }
          else
          {
            v20 = *a5;
            if (*a5 != 1)
            {
LABEL_66:
              v52 = _os_log_pack_size();
              message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v52 + 88, 16);
              if (message)
              {
                v54 = (caulk::concurrent::message *)message;
                v55 = _os_log_pack_fill();
                v56 = *(_QWORD *)(a1 + 32);
                if ((*(_BYTE *)(v56 + 52) & 0x20) != 0)
                  v57 = *(_DWORD *)(v56 + 68);
                else
                  v57 = 1;
                v58 = *a5;
                *(_DWORD *)v55 = 67109376;
                *(_DWORD *)(v55 + 4) = v57;
                *(_WORD *)(v55 + 8) = 1024;
                *(_DWORD *)(v55 + 10) = v58;
                caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v54);
              }
              goto LABEL_59;
            }
          }
          v21 = 0;
          v22 = a5 + 4;
          while (*v22 && *((_DWORD *)v22 - 1))
          {
            ++v21;
            v22 += 2;
            if (v20 == v21)
              goto LABEL_25;
          }
          v40 = _os_log_pack_size();
          v41 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v40 + 88, 16);
          if (v41)
          {
            v42 = (caulk::concurrent::message *)v41;
            v43 = _os_log_pack_fill();
            v44 = *v22;
            v45 = a5[4 * v21 + 3];
            *(_DWORD *)v43 = 67109632;
            *(_DWORD *)(v43 + 4) = v21;
            *(_WORD *)(v43 + 8) = 2048;
            *(_QWORD *)(v43 + 10) = v44;
            *(_WORD *)(v43 + 18) = 1024;
            *(_DWORD *)(v43 + 20) = v45;
            caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v42);
          }
          goto LABEL_59;
        }
        v50 = _os_log_pack_size();
        v19 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v50 + 88, 16);
        if (v19)
          goto LABEL_65;
LABEL_59:
        v33 = 4294967246;
LABEL_53:
        if (v77)
          AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v71);
        applesauce::raii::v1::detail::ScopeGuard<acv2::AudioConverterV2::fillComplexBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *),void *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription *,AudioStreamPacketDependencyInfo *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard();
        return v33;
      }
      v49 = _os_log_pack_size();
      v19 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v49 + 88, 16);
      if (!v19)
        goto LABEL_59;
LABEL_65:
      v51 = (caulk::concurrent::message *)v19;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v51);
      goto LABEL_59;
    }
LABEL_13:
    v18 = _os_log_pack_size();
    v19 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v18 + 88, 16);
    if (!v19)
      goto LABEL_59;
    goto LABEL_65;
  }
  v33 = 1869627199;
  v46 = _os_log_pack_size();
  v47 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v46 + 88, 16);
  if (v47)
  {
    v48 = (caulk::concurrent::message *)v47;
    *(_WORD *)_os_log_pack_fill() = 0;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v48);
  }
  return v33;
}

void sub_18EE2D488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a33)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a28);
  applesauce::raii::v1::detail::ScopeGuard<acv2::AudioConverterV2::fillComplexBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *),void *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription *,AudioStreamPacketDependencyInfo *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard();
  _Unwind_Resume(a1);
}

uint64_t acv2::PCMConverterFactory::AddSRC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  PlatformUtilities_iOS *v20;
  int v21;
  int v22;
  double v23;
  unsigned int v24;
  double v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  int64x2_t v40;
  unint64_t v41;
  int v43;
  int v45;
  _DWORD *exception;
  __int128 v47;
  __int128 v48;
  _BYTE v49[48];
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int64x2_t v59;
  unint64_t v60;
  uint64_t v61;

  if (*(double *)a1 == *(double *)(a1 + 40))
    return 0;
  v7 = *(_DWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 12) & 0x20 | 9;
  v9 = 4 * v7;
  if ((*(_DWORD *)(a1 + 12) & 0x20) != 0)
    v9 = 4;
  v50 = 0;
  v51 = 1819304813;
  v52 = v8;
  v53 = v9;
  v54 = 1;
  v55 = v9;
  v56 = v7;
  v57 = 32;
  result = acv2::PCMConverterFactory::AddPCMToGoal(&v50, a1, a2, (uint64_t **)a3, 0);
  if (!(_DWORD)result)
  {
    v47 = *(_OWORD *)a1;
    v48 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)v49 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)a1 = *(_QWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 28);
    v11 = *(_DWORD *)(a1 + 52) & 0x20;
    v12 = *(_DWORD *)(a1 + 12);
    if ((v12 & 0x20) != 0)
    {
      v13 = 1;
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 28);
      if (!v10)
      {
        v14 = (*(_DWORD *)(a1 + 32) + 7) >> 3;
LABEL_11:
        v15 = v12 & 0xFFFFFFDF;
        if (v11)
          v10 = 1;
        v16 = v14 * v10;
        *(_DWORD *)(a1 + 20) = 1;
        *(_DWORD *)(a1 + 24) = v16;
        *(_DWORD *)(a1 + 12) = v15 | v11;
        *(_DWORD *)(a1 + 16) = v16;
        v17 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v49[8] = *(_OWORD *)a1;
        *(_QWORD *)&v49[40] = *(_QWORD *)(a1 + 32);
        *(_OWORD *)&v49[24] = v17;
        v18 = operator new();
        v19 = *(_OWORD *)&v49[16];
        *(_OWORD *)(v18 + 48) = *(_OWORD *)v49;
        *(_OWORD *)(v18 + 64) = v19;
        *(_OWORD *)(v18 + 80) = *(_OWORD *)&v49[32];
        *(_OWORD *)(v18 + 16) = v47;
        *(_OWORD *)(v18 + 32) = v48;
        *(_QWORD *)(v18 + 104) = 0;
        *(_QWORD *)(v18 + 112) = 0;
        *(_QWORD *)(v18 + 96) = 0;
        *(_DWORD *)(v18 + 120) = -1;
        *(_OWORD *)(v18 + 128) = 0u;
        *(_OWORD *)(v18 + 144) = 0u;
        *(_QWORD *)v18 = &off_1E290ADC8;
        *(_QWORD *)(v18 + 8) = 0;
        *(_QWORD *)(v18 + 160) = 0;
        ACAudioSpan::ACAudioSpan((ACAudioSpan *)(v18 + 168), (const AudioStreamBasicDescription *)&v49[8]);
        v21 = *(_DWORD *)a2;
        if (*(_DWORD *)a2)
          v22 = *(_DWORD *)a2;
        else
          v22 = 1852797549;
        *(_DWORD *)(v18 + 272) = v22;
        *(_DWORD *)(v18 + 276) = -1;
        v23 = *(double *)(a2 + 16);
        if (!v21)
          v23 = 0.0;
        *(double *)(v18 + 304) = v23;
        *(_BYTE *)(v18 + 312) = *(_BYTE *)(a2 + 24);
        if (v21)
        {
          v24 = *(_DWORD *)(a2 + 4);
        }
        else if (PlatformUtilities_iOS::ProductIsAppleTV(v20))
        {
          v24 = 127;
        }
        else
        {
          v24 = 64;
        }
        if (HIDWORD(v48) != *(_DWORD *)&v49[36])
          std::terminate();
        *(_DWORD *)(v18 + 284) = HIDWORD(v48);
        v25 = *(double *)&v49[8];
        *(_QWORD *)(v18 + 288) = v47;
        *(double *)(v18 + 296) = v25;
        if (*(double *)&v47 / v25 < 0.000333333333 || *(double *)&v47 / v25 > 1950.0)
        {
          if (v25 > 384000.0 || v25 < 4000.0)
            v43 = 560952178;
          else
            v43 = 1869627199;
          if (*(double *)&v47 > 384000.0 || *(double *)&v47 < 4000.0)
            v45 = 560558962;
          else
            v45 = v43;
          exception = __cxa_allocate_exception(4uLL);
          *exception = v45;
          __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
        }
        v26 = *(_DWORD *)(a2 + 8);
        if (v26 <= 1)
          v26 = 1;
        *(_DWORD *)(v18 + 280) = v26;
        if (v24 <= 0x7F && *(_DWORD *)(v18 + 276) != v24)
          *(_DWORD *)(v18 + 276) = v24;
        acv2::SampleRateConverter::ReplaceResampler((acv2::SampleRateConverter *)v18);
        v27 = *(_QWORD *)(a3 + 16);
        v28 = *(uint64_t **)(a3 + 8);
        if ((unint64_t)v28 >= v27)
        {
          v30 = ((uint64_t)v28 - *(_QWORD *)a3) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v31 = v27 - *(_QWORD *)a3;
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v61 = a3 + 16;
          if (v33)
            v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
          else
            v34 = 0;
          v35 = (uint64_t *)(v33 + 8 * v30);
          v36 = v33 + 8 * v34;
          v60 = v36;
          *v35 = v18;
          v29 = v35 + 1;
          v59.i64[1] = (uint64_t)(v35 + 1);
          v38 = *(uint64_t **)a3;
          v37 = *(uint64_t **)(a3 + 8);
          if (v37 == *(uint64_t **)a3)
          {
            v40 = vdupq_n_s64((unint64_t)v37);
          }
          else
          {
            do
            {
              v39 = *--v37;
              *v37 = 0;
              *--v35 = v39;
            }
            while (v37 != v38);
            v40 = *(int64x2_t *)a3;
            v29 = (_QWORD *)v59.i64[1];
            v36 = v60;
          }
          *(_QWORD *)a3 = v35;
          *(_QWORD *)(a3 + 8) = v29;
          v59 = v40;
          v41 = *(_QWORD *)(a3 + 16);
          *(_QWORD *)(a3 + 16) = v36;
          v60 = v41;
          v58 = v40.i64[0];
          std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)&v58);
        }
        else
        {
          *v28 = v18;
          v29 = v28 + 1;
        }
        result = 0;
        *(_QWORD *)(a3 + 8) = v29;
        return result;
      }
    }
    v14 = *(_DWORD *)(a1 + 24) / v13;
    goto LABEL_11;
  }
  return result;
}

void sub_18EE2D8AC(_Unwind_Exception *a1)
{
  acv2::AudioConverterBase *v1;
  std::pmr **v2;
  uint64_t v4;

  ACAudioSpan::~ACAudioSpan(v2);
  v4 = *((_QWORD *)v1 + 20);
  *((_QWORD *)v1 + 20) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  acv2::AudioConverterBase::~AudioConverterBase(v1);
  MEMORY[0x193FFE460]();
  _Unwind_Resume(a1);
}

void acv2::PCMConverterFactory::AddUpReinterleaver(__int128 *a1, uint64_t a2, uint64_t a3, std::vector<int> ***a4, char a5)
{
  signed int v10;
  unsigned int v11;
  int v12;
  int v13;
  _BOOL4 v14;
  int v15;
  int v16;
  int v17;
  __int128 v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  __int128 v23;
  std::vector<int> *v24;
  unint64_t v25;
  std::vector<int> **v26;
  std::vector<int> **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  std::vector<int> **v33;
  unint64_t v34;
  std::vector<int> **v35;
  std::vector<int> **v36;
  std::vector<int> *v37;
  int64x2_t v38;
  std::vector<int> **v39;
  _OWORD v40[2];
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int64x2_t v46;
  unint64_t v47;
  _QWORD *v48;

  v10 = *((_DWORD *)a1 + 17);
  v11 = *((_DWORD *)a1 + 7);
  v12 = acv2::MixableFormatPair(v11, v10, *(__int32 **)a2, *(__int32 **)(a2 + 24));
  v13 = v12;
  v14 = 0;
  if ((a5 & 1) == 0 && *(_BYTE *)(a3 + 112))
    v14 = v10 == (uint64_t)(*(_QWORD *)(a3 + 96) - *(_QWORD *)(a3 + 88)) >> 2;
  v15 = v10 > (int)v11 || v14;
  if ((v15 | v12) == 1)
  {
    v16 = *((_DWORD *)a1 + 3);
    v17 = *((_DWORD *)a1 + 13) & 0x20;
  }
  else
  {
    v16 = *((_DWORD *)a1 + 3);
    v17 = *((_DWORD *)a1 + 13) & 0x20;
    if (((v16 & 0x20) == 0) == (v17 == 0))
      return;
  }
  v18 = a1[1];
  v40[0] = *a1;
  v40[1] = v18;
  v41 = *((_QWORD *)a1 + 4);
  if ((v16 & 0x20) != 0)
  {
    v11 = 1;
    goto LABEL_14;
  }
  if (v11)
  {
LABEL_14:
    v19 = *((_DWORD *)a1 + 6) / v11;
    goto LABEL_15;
  }
  v19 = (*((_DWORD *)a1 + 8) + 7) >> 3;
LABEL_15:
  v20 = v16 & 0xFFFFFFDF;
  if (v17)
    v21 = 1;
  else
    v21 = v10;
  v22 = v19 * v21;
  *((_DWORD *)a1 + 4) = v22;
  *((_DWORD *)a1 + 5) = 1;
  *((_DWORD *)a1 + 6) = v22;
  *((_DWORD *)a1 + 7) = v10;
  *((_DWORD *)a1 + 3) = v20 | v17;
  v23 = a1[1];
  v42 = *a1;
  v44 = *((_QWORD *)a1 + 4);
  v43 = v23;
  v24 = (std::vector<int> *)operator new();
  acv2::Reinterleaver::Reinterleaver((uint64_t)v24, (uint64_t)v40);
  if (v14)
  {
    acv2::Reinterleaver::SetChannelMap((uint64_t)v24, a3 + 88);
  }
  else if (v13)
  {
    acv2::Reinterleaver::SetLayouts(v24, *(const AudioChannelLayout *const **)a2, *(const AudioChannelLayout **)(a2 + 24));
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)a2, *(char **)(a2 + 24), *(char **)(a2 + 32), *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24));
  }
  v25 = (unint64_t)a4[2];
  v26 = a4[1];
  if ((unint64_t)v26 >= v25)
  {
    v28 = v26 - *a4;
    if ((unint64_t)(v28 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v29 = v25 - (_QWORD)*a4;
    v30 = v29 >> 2;
    if (v29 >> 2 <= (unint64_t)(v28 + 1))
      v30 = v28 + 1;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    v48 = a4 + 2;
    if (v31)
      v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v31);
    else
      v32 = 0;
    v33 = (std::vector<int> **)(v31 + 8 * v28);
    v34 = v31 + 8 * v32;
    v47 = v34;
    *v33 = v24;
    v27 = v33 + 1;
    v46.i64[1] = (uint64_t)(v33 + 1);
    v36 = *a4;
    v35 = a4[1];
    if (v35 == *a4)
    {
      v38 = vdupq_n_s64((unint64_t)v35);
    }
    else
    {
      do
      {
        v37 = *--v35;
        *v35 = 0;
        *--v33 = v37;
      }
      while (v35 != v36);
      v38 = *(int64x2_t *)a4;
      v27 = (std::vector<int> **)v46.i64[1];
      v34 = v47;
    }
    *a4 = v33;
    a4[1] = v27;
    v46 = v38;
    v39 = a4[2];
    a4[2] = (std::vector<int> **)v34;
    v47 = (unint64_t)v39;
    v45 = v38.i64[0];
    std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)&v45);
  }
  else
  {
    *v26 = v24;
    v27 = v26 + 1;
  }
  a4[1] = v27;
}

void sub_18EE2DB9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10B3C40BBAFB75ALL);
  _Unwind_Resume(a1);
}

uint64_t acv2::PCMConverterFactory::AddPCMToGoal(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t **a4, int a5)
{
  uint64_t **v5;
  __int128 v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  int *v25;
  int *v26;
  int *v27;
  int *v28;
  int v29;
  char v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  __int128 v58;
  __int128 v59;
  int v60;
  unsigned int v61;
  unsigned int inited;
  uint64_t v63;
  void **v64;
  void *v65;
  uint64_t v66;
  _OWORD *v67;
  _BYTE *v68;
  void *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  __int128 v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  int64x2_t v92;
  uint64_t *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  void *v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  int v109;
  void (**v110)(acv2::PCMDeinterleaver *__hidden);
  __int128 v111;
  __int128 v112;
  int v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  int64x2_t v127;
  uint64_t *v128;
  __int128 v129;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int *__p;
  uint64_t **v139;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  _BYTE v146[48];
  _BYTE v147[32];
  _QWORD *v148;

  v5 = a4;
  v7 = *(_OWORD *)(a2 + 16);
  v144 = *(_OWORD *)a2;
  v145 = v7;
  *(_QWORD *)v146 = *(_QWORD *)(a2 + 32);
  v9 = a1[2];
  v8 = a1[3];
  v11 = a1[8];
  v10 = a1[9];
  v12 = HIDWORD(v7);
  v13 = HIDWORD(v144);
  v14 = BYTE12(v144) & 0x20;
  if ((v8 & 0x20) != 0)
  {
    v15 = 1;
  }
  else
  {
    v15 = a1[7];
    if (!v15)
    {
      v16 = (v11 + 7) >> 3;
      goto LABEL_6;
    }
  }
  v16 = a1[6] / v15;
LABEL_6:
  v17 = v8 & 0xFFFFFFDF;
  if ((BYTE12(v144) & 0x20) != 0)
    v18 = 1;
  else
    v18 = HIDWORD(v7);
  v19 = v144;
  *(_QWORD *)&v146[8] = v144;
  v20 = v16 * v18;
  v21 = v14 | v17;
  *(_DWORD *)&v146[16] = v9;
  *(_DWORD *)&v146[20] = v14 | v17;
  *(_DWORD *)&v146[24] = v16 * v18;
  *(_DWORD *)&v146[28] = 1;
  *(_DWORD *)&v146[32] = v16 * v18;
  *(_DWORD *)&v146[36] = HIDWORD(v7);
  *(_DWORD *)&v146[40] = v11;
  *(_DWORD *)&v146[44] = v10;
  v22 = HIDWORD(v7);
  if (!a5)
    goto LABEL_137;
  v23 = *(_DWORD *)(a3 + 56);
  v22 = HIDWORD(v7);
  if (!v23)
    goto LABEL_137;
  v131 = v17;
  v132 = a5;
  v133 = v9;
  v135 = v10;
  v24 = (int *)operator new(4uLL);
  v25 = v24;
  *v24 = 1;
  v26 = v24 + 1;
  if (v23 == 3)
  {
    v27 = (int *)operator new(8uLL);
    v26 = v27 + 2;
    *v27 = *v25;
    v27[1] = 3;
    operator delete(v25);
    v28 = v27;
  }
  else
  {
    v28 = v24;
  }
  v29 = 0;
  v30 = 0;
  __p = v28;
  do
  {
    v32 = *v28++;
    v31 = v32;
    if (v32 == 3)
      v33 = 1;
    else
      v33 = v29;
    if (v31 == 1)
      v30 = 1;
    else
      v29 = v33;
  }
  while (v28 != v26);
  v34 = DWORD2(v144) == 1819304813 && DWORD1(v145) == 1;
  v5 = a4;
  if (!v34)
    goto LABEL_54;
  v35 = DWORD2(v145);
  if (DWORD2(v145) != (_DWORD)v145)
    goto LABEL_54;
  if (DWORD2(v145) < *(_DWORD *)v146 >> 3)
    goto LABEL_54;
  if (!v12)
    goto LABEL_54;
  if (!v14)
  {
    v35 = DWORD2(v145) / v12;
    if (DWORD2(v145) != DWORD2(v145) / v12 * v12)
      goto LABEL_54;
  }
  v36 = 0;
  if ((v13 & 2) == 0 && 8 * v35 == *(_DWORD *)v146)
  {
    if ((v13 & 1) == 0)
    {
      if ((v13 & 4) != 0)
      {
        v37 = (v13 >> 7) & 0x3F;
        if (v37 == 24 && v35 == 4)
        {
          v36 = 3;
        }
        else if (v37 || v35 != 4)
        {
          if (v35 == 2 && v37 == 0)
            v36 = 2;
          else
            v36 = 0;
        }
        else
        {
          v36 = 5;
        }
      }
      else
      {
        v36 = 0;
      }
      goto LABEL_52;
    }
    if ((v13 & 0x1F84) == 0)
    {
      v36 = 4 * (v35 == 8);
      if (v35 == 4)
        v36 = 1;
      goto LABEL_52;
    }
LABEL_54:
    if ((v29 & 1) != 0)
      v39 = 2;
    else
      v39 = 0;
    __asm { BR              X11 }
  }
LABEL_52:
  if (((v36 == 3) & v29) == 0 && ((v36 == 1) & v30) == 0)
    goto LABEL_54;
  v40 = *(_DWORD *)(a3 + 56);
  v41 = 0;
  if ((v40 - 1) > 2)
  {
LABEL_61:
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
  }
  else
  {
    v41 = v144;
    v42 = BYTE12(v144) & 0x20;
    switch(dword_18F116D00[v40 - 1])
    {
      case 1:
        v43 = 9;
        goto LABEL_64;
      case 2:
        v45 = v42 | 0xC;
        if ((BYTE12(v144) & 0x20) != 0)
          v50 = 2;
        else
          v50 = 2 * HIDWORD(v145);
        v46 = v50 | 0x100000000;
        HIDWORD(v47) = 16;
        goto LABEL_77;
      case 3:
        v43 = 3084;
LABEL_64:
        v45 = v42 | v43;
        goto LABEL_65;
      case 4:
        v45 = v42 | 9;
        if ((BYTE12(v144) & 0x20) != 0)
          v49 = 8;
        else
          v49 = 8 * HIDWORD(v145);
        v46 = v49 | 0x100000000;
        HIDWORD(v47) = 64;
        goto LABEL_77;
      case 5:
        v45 = v42 | 0xC;
LABEL_65:
        if ((BYTE12(v144) & 0x20) != 0)
          v48 = 4;
        else
          v48 = 4 * HIDWORD(v145);
        v46 = v48 | 0x100000000;
        HIDWORD(v47) = 32;
LABEL_77:
        LODWORD(v47) = HIDWORD(v145);
        v44 = 1819304813;
        break;
      default:
        goto LABEL_61;
    }
  }
  v51 = 1869627199;
  *(_QWORD *)&v146[8] = v41;
  *(_DWORD *)&v146[16] = v44;
  *(_DWORD *)&v146[20] = v45;
  *(_QWORD *)&v146[24] = v46;
  *(_DWORD *)&v146[32] = v46;
  *(_QWORD *)&v146[36] = v47;
  *(_DWORD *)&v146[44] = 0;
  if (v11 >= 0x19 && (v45 & 1) != 0 || (v45 & 5) == 4 && HIDWORD(v47) > v11)
    goto LABEL_82;
  if (v40 != 3)
  {
    if (v40 == 2)
    {
      v52 = operator new();
      v58 = *(_OWORD *)&v146[16];
      *(_OWORD *)(v52 + 48) = *(_OWORD *)v146;
      *(_OWORD *)(v52 + 64) = v58;
      *(_OWORD *)(v52 + 80) = *(_OWORD *)&v146[32];
      v59 = v145;
      *(_OWORD *)(v52 + 16) = v144;
      *(_OWORD *)(v52 + 32) = v59;
      *(_QWORD *)(v52 + 104) = 0;
      *(_QWORD *)(v52 + 112) = 0;
      *(_QWORD *)(v52 + 96) = 0;
      *(_DWORD *)(v52 + 120) = -1;
      *(_OWORD *)(v52 + 128) = 0u;
      *(_OWORD *)(v52 + 144) = 0u;
      v60 = *(_DWORD *)&v146[32];
      *(_DWORD *)(v52 + 160) = DWORD2(v145);
      *(_DWORD *)(v52 + 164) = v60;
      *(_DWORD *)(v52 + 168) = v11;
      *(_QWORD *)v52 = &off_1E290B1F8;
      *(_QWORD *)(v52 + 8) = 0;
      *(_OWORD *)(v52 + 176) = 0u;
      *(_OWORD *)(v52 + 192) = 0u;
      v61 = time(0);
      inited = initRng(v61, (_OWORD *)(v52 + 208));
      initRng(inited, (_OWORD *)(v52 + 240));
      v63 = *(unsigned int *)&v146[36];
      v64 = (void **)(v52 + 192);
      std::valarray<float>::resize(v52 + 176, *(unsigned int *)&v146[36]);
      v65 = *(void **)(v52 + 176);
      v66 = *(_QWORD *)(v52 + 184) - (_QWORD)v65;
      if (v66 >= 1)
        bzero(v65, 4 * (((unint64_t)v66 >> 2) - ((unint64_t)v66 > 3)) + 4);
      v68 = *(_BYTE **)(v52 + 192);
      v67 = *(_OWORD **)(v52 + 200);
      if (v68)
      {
        if (v67 != (_OWORD *)v68)
          *(_QWORD *)(v52 + 200) = (char *)v67 + ((v68 - (_BYTE *)v67 + 31) & 0xFFFFFFFFFFFFFFE0);
        operator delete(v68);
        v67 = 0;
        *v64 = 0;
        *(_QWORD *)(v52 + 200) = 0;
      }
      if ((_DWORD)v63)
      {
        v67 = operator new(32 * v63);
        *(_QWORD *)(v52 + 192) = v67;
        *(_QWORD *)(v52 + 200) = v67;
        do
        {
          *v67 = 0uLL;
          v67[1] = 0uLL;
          v67 = (_OWORD *)(*(_QWORD *)(v52 + 200) + 32);
          *(_QWORD *)(v52 + 200) = v67;
          --v63;
        }
        while (v63);
        v69 = *v64;
      }
      else
      {
        v69 = 0;
      }
      if ((char *)v67 - (_BYTE *)v69 >= 1)
        bzero(v69, 32* (((unint64_t)((char *)v67 - (_BYTE *)v69) >> 5)- ((unint64_t)((char *)v67 - (_BYTE *)v69) > 0x1F))+ 32);
    }
    else
    {
      if (v40 != 1)
      {
LABEL_82:
        operator delete(__p);
        return v51;
      }
      v52 = operator new();
      v53 = *(_OWORD *)&v146[16];
      *(_OWORD *)(v52 + 48) = *(_OWORD *)v146;
      *(_OWORD *)(v52 + 64) = v53;
      *(_OWORD *)(v52 + 80) = *(_OWORD *)&v146[32];
      v54 = v145;
      *(_OWORD *)(v52 + 16) = v144;
      *(_OWORD *)(v52 + 32) = v54;
      *(_QWORD *)(v52 + 104) = 0;
      *(_QWORD *)(v52 + 112) = 0;
      *(_QWORD *)(v52 + 96) = 0;
      *(_DWORD *)(v52 + 120) = -1;
      *(_OWORD *)(v52 + 128) = 0u;
      *(_OWORD *)(v52 + 144) = 0u;
      v55 = *(_DWORD *)&v146[32];
      *(_DWORD *)(v52 + 160) = DWORD2(v145);
      *(_DWORD *)(v52 + 164) = v55;
      *(_DWORD *)(v52 + 168) = v11;
      *(_QWORD *)v52 = &off_1E290AE78;
      *(_QWORD *)(v52 + 8) = 0;
      v56 = time(0);
      v57 = initRng(v56, (_OWORD *)(v52 + 176));
      initRng(v57, (_OWORD *)(v52 + 208));
    }
    goto LABEL_119;
  }
  v70 = operator new();
  v52 = v70;
  v71 = v145;
  v72 = *(_OWORD *)&v146[16];
  *(_OWORD *)(v70 + 48) = *(_OWORD *)v146;
  *(_OWORD *)(v70 + 64) = v72;
  *(_OWORD *)(v70 + 80) = *(_OWORD *)&v146[32];
  *(_OWORD *)(v70 + 16) = v144;
  *(_OWORD *)(v70 + 32) = v71;
  *(_QWORD *)(v70 + 104) = 0;
  *(_QWORD *)(v70 + 112) = 0;
  *(_QWORD *)(v70 + 96) = 0;
  *(_DWORD *)(v70 + 120) = -1;
  *(_OWORD *)(v70 + 128) = 0u;
  *(_OWORD *)(v70 + 144) = 0u;
  v73 = DWORD2(v145);
  v74 = *(_DWORD *)&v146[32];
  *(_DWORD *)(v70 + 160) = DWORD2(v145);
  *(_DWORD *)(v70 + 164) = v74;
  *(_DWORD *)(v70 + 168) = v11;
  *(_QWORD *)v70 = &off_1E290AF38;
  *(_QWORD *)(v70 + 8) = 0;
  if (DWORD2(v144) != 1819304813)
    goto LABEL_116;
  if ((_QWORD)v145 != (v73 | 0x100000000))
    goto LABEL_116;
  if (v73 < *(_DWORD *)v146 >> 3)
    goto LABEL_116;
  if (!HIDWORD(v145))
    goto LABEL_116;
  if ((BYTE12(v144) & 0x20) == 0)
  {
    v34 = v73 == v73 / HIDWORD(v145) * HIDWORD(v145);
    v73 /= HIDWORD(v145);
    if (!v34)
      goto LABEL_116;
  }
  if ((BYTE12(v144) & 2) != 0 || 8 * v73 != *(_DWORD *)v146)
    goto LABEL_116;
  if ((BYTE12(v144) & 1) != 0)
  {
    if ((WORD6(v144) & 0x1F84) == 0)
    {
      v76 = v11;
      if (v73 == 4)
        goto LABEL_118;
    }
    goto LABEL_116;
  }
  if ((BYTE12(v144) & 4) == 0 || (WORD6(v144) & 0x1F80) != 0xC00 || v73 != 4)
  {
LABEL_116:
    v75 = 32;
    goto LABEL_117;
  }
  v75 = 25;
LABEL_117:
  v76 = v75 - v11;
LABEL_118:
  *(_DWORD *)(v70 + 184) = 0;
  *(_DWORD *)(v70 + 188) = 3;
  *(_DWORD *)(v70 + 172) = 0;
  *(_DWORD *)(v70 + 176) = v76;
  *(_DWORD *)(v70 + 180) = 0;
LABEL_119:
  v77 = *(_OWORD *)(v52 + 72);
  v144 = *(_OWORD *)(v52 + 56);
  v145 = v77;
  *(_QWORD *)v146 = *(_QWORD *)(v52 + 88);
  v78 = (unint64_t)a4[2];
  v79 = a4[1];
  if ((unint64_t)v79 >= v78)
  {
    v82 = v79 - *a4;
    if ((unint64_t)(v82 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v83 = v78 - (_QWORD)*a4;
    v84 = v83 >> 2;
    if (v83 >> 2 <= (unint64_t)(v82 + 1))
      v84 = v82 + 1;
    if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
      v85 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v85 = v84;
    v148 = a4 + 2;
    if (v85)
      v85 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v85);
    else
      v86 = 0;
    v87 = (uint64_t *)(v85 + 8 * v82);
    v88 = v85 + 8 * v86;
    *(_QWORD *)&v147[24] = v88;
    *v87 = v52;
    v80 = v87 + 1;
    *(_QWORD *)&v147[16] = v87 + 1;
    v5 = a4;
    v90 = *a4;
    v89 = a4[1];
    if (v89 == *a4)
    {
      v92 = vdupq_n_s64((unint64_t)v89);
      v81 = __p;
    }
    else
    {
      v81 = __p;
      do
      {
        v91 = *--v89;
        *v89 = 0;
        *--v87 = v91;
      }
      while (v89 != v90);
      v92 = *(int64x2_t *)a4;
      v88 = *(_QWORD *)&v147[24];
      v80 = *(uint64_t **)&v147[16];
    }
    *a4 = v87;
    a4[1] = v80;
    *(int64x2_t *)&v147[8] = v92;
    v93 = a4[2];
    a4[2] = (uint64_t *)v88;
    *(_QWORD *)&v147[24] = v93;
    *(_QWORD *)v147 = v92.i64[0];
    std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)v147);
  }
  else
  {
    *v79 = v52;
    v80 = v79 + 1;
    v81 = __p;
  }
  v5[1] = v80;
  operator delete(v81);
  v22 = HIDWORD(v145);
  v9 = v133;
  v10 = v135;
  v17 = v131;
  a5 = v132;
LABEL_137:
  if (v22 != 2 || v12 != 2 || *(_DWORD *)(a3 + 56))
    goto LABEL_192;
  *(_QWORD *)&v146[8] = v19;
  *(_DWORD *)&v146[16] = v9;
  *(_DWORD *)&v146[20] = v21;
  *(_DWORD *)&v146[24] = v20;
  *(_DWORD *)&v146[28] = 1;
  *(_DWORD *)&v146[32] = v20;
  *(_DWORD *)&v146[36] = 2;
  *(_DWORD *)&v146[40] = v11;
  *(_DWORD *)&v146[44] = v10;
  if (a5)
  {
    v94 = *(_DWORD *)(a2 + 52) & 0x20;
    if ((v14 == 0) != (v94 == 0))
    {
      *(_DWORD *)&v146[32] = v20 >> ((v14 >> 5) ^ 1) << (((*(_DWORD *)(a2 + 52) & 0x20u) >> 5) ^ 1);
      *(_DWORD *)&v146[20] = v94 | v17;
      *(_DWORD *)&v146[24] = v20 >> ((v14 >> 5) ^ 1) << ((v94 >> 5) ^ 1);
      v14 = v94;
    }
  }
  if (((BYTE12(v144) & 0x20) == 0) == (v14 == 0))
    goto LABEL_192;
  *(_OWORD *)v147 = v144;
  *(_OWORD *)&v147[16] = v145;
  v148 = *(_QWORD **)v146;
  v141 = *(_OWORD *)&v146[8];
  v142 = *(_OWORD *)&v146[24];
  v143 = *(_QWORD *)&v146[40];
  if (HIDWORD(v145) != 2)
    goto LABEL_192;
  if (HIDWORD(v142) != 2)
    goto LABEL_192;
  v95 = *(_DWORD *)&v147[12];
  v96 = HIDWORD(v141);
  if (((*(_DWORD *)&v147[12] | HIDWORD(v141)) & 2) != 0)
    goto LABEL_192;
  v134 = v9;
  v136 = v10;
  v139 = v5;
  v97 = ((BYTE12(v141) & 0x20) == 0) & (*(_DWORD *)&v147[12] >> 5);
  v98 = IntSampleSize(v147);
  v99 = IntSampleSize(&v141);
  v100 = (v95 >> 7) & 0x3F;
  v101 = (v96 >> 7) & 0x3F;
  if (v98 && v99)
  {
    if (v97)
    {
      v5 = v139;
      v9 = v134;
      v10 = v136;
      if (v100 == 24 && v98 == 4 && v99 == 2)
      {
        v102 = StereoInterleaveInt824ToInt16_ARM;
LABEL_171:
        v106 = operator new();
        v111 = *(_OWORD *)&v146[16];
        *(_OWORD *)(v106 + 48) = *(_OWORD *)v146;
        *(_OWORD *)(v106 + 64) = v111;
        *(_OWORD *)(v106 + 80) = *(_OWORD *)&v146[32];
        v112 = v145;
        *(_OWORD *)(v106 + 16) = v144;
        *(_OWORD *)(v106 + 32) = v112;
        *(_QWORD *)(v106 + 104) = 0;
        *(_QWORD *)(v106 + 112) = 0;
        *(_QWORD *)(v106 + 96) = 0;
        *(_DWORD *)(v106 + 120) = -1;
        *(_OWORD *)(v106 + 128) = 0u;
        *(_OWORD *)(v106 + 144) = 0u;
        v113 = *(_DWORD *)&v146[32];
        *(_DWORD *)(v106 + 160) = DWORD2(v145);
        *(_DWORD *)(v106 + 164) = v113;
        v110 = &off_1E290A648;
        goto LABEL_172;
      }
      goto LABEL_192;
    }
    v5 = v139;
    v9 = v134;
    v10 = v136;
    if (v101 != 24 || v98 != 2 || v99 != 4)
      goto LABEL_192;
    v102 = StereoDeinterleaveInt16ToInt824_ARM;
  }
  else
  {
    if (v97)
    {
      v103 = v99;
      v104 = FloatSampleSize(v147);
      v5 = v139;
      v9 = v134;
      v10 = v136;
      if (v104 == 4)
      {
        if (v101 == 24 && v103 == 4)
        {
          v102 = StereoInterleaveFloat32ToInt824_ARM;
          goto LABEL_171;
        }
        if (!v101 && v103 == 2)
        {
          v102 = StereoInterleaveFloat32ToInt16;
          goto LABEL_171;
        }
      }
LABEL_192:
      *(_QWORD *)&v146[8] = v19;
      *(_DWORD *)&v146[16] = v9;
      *(_DWORD *)&v146[20] = v21;
      *(_DWORD *)&v146[24] = v20;
      *(_DWORD *)&v146[28] = 1;
      *(_DWORD *)&v146[32] = v20;
      *(_DWORD *)&v146[36] = v12;
      *(_DWORD *)&v146[40] = v11;
      *(_DWORD *)&v146[44] = v10;
      return acv2::PCMConverterFactory::BuildSampleFormatConverterChain((double *)&v144, a2, v5);
    }
    v105 = FloatSampleSize(&v141);
    v5 = v139;
    v9 = v134;
    v10 = v136;
    if (v105 != 4)
      goto LABEL_192;
    if (v100 == 24 && v98 == 4)
    {
      v102 = StereoDeinterleaveInt824ToFloat32_ARM;
    }
    else
    {
      if (v101 || v98 != 2)
        goto LABEL_192;
      v102 = StereoDeinterleaveInt16ToFloat32;
    }
  }
  v106 = operator new();
  v107 = *(_OWORD *)&v146[16];
  *(_OWORD *)(v106 + 48) = *(_OWORD *)v146;
  *(_OWORD *)(v106 + 64) = v107;
  *(_OWORD *)(v106 + 80) = *(_OWORD *)&v146[32];
  v108 = v145;
  *(_OWORD *)(v106 + 16) = v144;
  *(_OWORD *)(v106 + 32) = v108;
  *(_QWORD *)(v106 + 104) = 0;
  *(_QWORD *)(v106 + 112) = 0;
  *(_QWORD *)(v106 + 96) = 0;
  *(_DWORD *)(v106 + 120) = -1;
  *(_OWORD *)(v106 + 128) = 0u;
  *(_OWORD *)(v106 + 144) = 0u;
  v109 = *(_DWORD *)&v146[32];
  *(_DWORD *)(v106 + 160) = DWORD2(v145);
  *(_DWORD *)(v106 + 164) = v109;
  v110 = &off_1E290A788;
LABEL_172:
  *(_QWORD *)v106 = v110;
  *(_QWORD *)(v106 + 8) = 0;
  *(_QWORD *)(v106 + 168) = v102;
  v114 = (unint64_t)v5[2];
  v115 = v5[1];
  if ((unint64_t)v115 >= v114)
  {
    v116 = v115 - *v5;
    v117 = v116 + 1;
    if ((unint64_t)(v116 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v118 = v114 - (_QWORD)*v5;
    if (v118 >> 2 > v117)
      v117 = v118 >> 2;
    if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
      v119 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v119 = v117;
    v148 = v5 + 2;
    if (v119)
      v119 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v119);
    else
      v120 = 0;
    v121 = (uint64_t *)(v119 + 8 * v116);
    v122 = v119 + 8 * v120;
    *(_QWORD *)&v147[24] = v122;
    *v121 = v106;
    v123 = v121 + 1;
    *(_QWORD *)&v147[16] = v121 + 1;
    v125 = *v5;
    v124 = v5[1];
    if (v124 == *v5)
    {
      v127 = vdupq_n_s64((unint64_t)v124);
    }
    else
    {
      do
      {
        v126 = *--v124;
        *v124 = 0;
        *--v121 = v126;
      }
      while (v124 != v125);
      v127 = *(int64x2_t *)v5;
      v122 = *(_QWORD *)&v147[24];
      v123 = *(uint64_t **)&v147[16];
    }
    *v5 = v121;
    v5[1] = v123;
    *(int64x2_t *)&v147[8] = v127;
    v128 = v5[2];
    v5[2] = (uint64_t *)v122;
    *(_QWORD *)&v147[24] = v128;
    *(_QWORD *)v147 = v127.i64[0];
    std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)v147);
    v51 = 0;
    v5[1] = v123;
  }
  else
  {
    v51 = 0;
    *v115 = v106;
    v5[1] = v115 + 1;
  }
  v129 = *(_OWORD *)&v146[24];
  *(_OWORD *)a2 = *(_OWORD *)&v146[8];
  *(_OWORD *)(a2 + 16) = v129;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)&v146[40];
  return v51;
}

void sub_18EE2E874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  _Unwind_Resume(exception_object);
}

uint64_t acv2::PCMConverterFactory::BuildSampleFormatConverterChain(double *a1, uint64_t a2, uint64_t **a3)
{
  double v4;
  BOOL v5;
  int v6;
  double *v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  int v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int64x2_t v59;
  uint64_t *v60;
  uint64_t result;
  __int128 v62;
  NSObject *v63;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[48];
  _BYTE buf[24];
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (*a1 != 0.0 && ((v4 = a1[5], v4 != 0.0) ? (v5 = *a1 == v4) : (v5 = 1), !v5)
    || *((_DWORD *)a1 + 17) != *((_DWORD *)a1 + 7)
    || ((*((_BYTE *)a1 + 12) & 0x20) == 0) != ((*((_BYTE *)a1 + 52) & 0x20) == 0))
  {
    std::terminate();
  }
  v6 = 0;
  v7 = a1 + 5;
  v8 = *((_OWORD *)a1 + 1);
  v67 = *(_OWORD *)a1;
  v68 = v8;
  *(double *)v69 = a1[4];
  while (1)
  {
    v9 = *((_OWORD *)v7 + 1);
    *(_OWORD *)&v69[8] = *(_OWORD *)v7;
    *(_OWORD *)&v69[24] = v9;
    *(double *)&v69[40] = v7[4];
    if ((v69[20] & 0x20) != 0)
    {
      v10 = 1;
    }
    else
    {
      v10 = *(_DWORD *)&v69[36];
      if (!*(_DWORD *)&v69[36])
      {
        v11 = (*(_DWORD *)&v69[40] + 7) >> 3;
        goto LABEL_15;
      }
    }
    v11 = *(_DWORD *)&v69[32] / v10;
LABEL_15:
    v12 = HIDWORD(v68);
    *(_DWORD *)&v69[36] = HIDWORD(v68);
    if ((BYTE12(v67) & 0x20) != 0)
      v12 = 1;
    *(_DWORD *)&v69[28] = 1;
    *(_DWORD *)&v69[32] = v11 * v12;
    *(_DWORD *)&v69[20] = *(_DWORD *)&v69[20] & 0xFFFFFFDF | BYTE12(v67) & 0x20;
    *(_DWORD *)&v69[24] = v11 * v12;
    PCMBlitter_CreateBlitter((const CAStreamBasicDescription *)&v65, (CAStreamBasicDescription *)&v67, (CAStreamBasicDescription *)&v69[8]);
    v13 = v65;
    if (!(_DWORD)v65)
      break;
    if ((_DWORD)v65 == 1)
      goto LABEL_70;
LABEL_23:
    switch(v13)
    {
      case 2:
        v15 = operator new();
        v39 = *((_QWORD *)&v65 + 1);
        v40 = *(_OWORD *)&v69[16];
        *(_OWORD *)(v15 + 48) = *(_OWORD *)v69;
        *(_OWORD *)(v15 + 64) = v40;
        *(_OWORD *)(v15 + 80) = *(_OWORD *)&v69[32];
        v41 = v68;
        *(_OWORD *)(v15 + 16) = v67;
        *(_OWORD *)(v15 + 32) = v41;
        *(_QWORD *)(v15 + 104) = 0;
        *(_QWORD *)(v15 + 112) = 0;
        *(_QWORD *)(v15 + 96) = 0;
        *(_DWORD *)(v15 + 120) = -1;
        *(_OWORD *)(v15 + 128) = 0u;
        *(_OWORD *)(v15 + 144) = 0u;
        v42 = *(_DWORD *)&v69[32];
        *(_DWORD *)(v15 + 160) = DWORD2(v68);
        *(_DWORD *)(v15 + 164) = v42;
        *(_QWORD *)v15 = &off_1E290A358;
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 168) = v39;
        v22 = a3[1];
        v43 = (unint64_t)a3[2];
        if ((unint64_t)v22 >= v43)
        {
          v45 = v22 - *a3;
          if ((unint64_t)(v45 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v46 = v43 - (_QWORD)*a3;
          v47 = v46 >> 2;
          if (v46 >> 2 <= (unint64_t)(v45 + 1))
            v47 = v45 + 1;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          v72 = a3 + 2;
          if (v48)
            v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v48);
          else
            v49 = 0;
          v50 = (uint64_t *)(v48 + 8 * v45);
          v51 = v48 + 8 * v49;
          v71 = v51;
          *v50 = v15;
          v44 = v50 + 1;
          *(_QWORD *)&buf[16] = v50 + 1;
          v55 = *a3;
          v52 = a3[1];
          if (v52 != *a3)
          {
            do
            {
              v56 = *--v52;
              *v52 = 0;
              *--v50 = v56;
            }
            while (v52 != v55);
            goto LABEL_65;
          }
          goto LABEL_66;
        }
        goto LABEL_45;
      case 3:
        v15 = operator new();
        v28 = *((_QWORD *)&v65 + 1);
        v29 = v66;
        v30 = *(_OWORD *)&v69[16];
        *(_OWORD *)(v15 + 48) = *(_OWORD *)v69;
        *(_OWORD *)(v15 + 64) = v30;
        *(_OWORD *)(v15 + 80) = *(_OWORD *)&v69[32];
        v31 = v68;
        *(_OWORD *)(v15 + 16) = v67;
        *(_OWORD *)(v15 + 32) = v31;
        *(_QWORD *)(v15 + 104) = 0;
        *(_QWORD *)(v15 + 112) = 0;
        *(_QWORD *)(v15 + 96) = 0;
        *(_DWORD *)(v15 + 120) = -1;
        *(_OWORD *)(v15 + 128) = 0u;
        *(_OWORD *)(v15 + 144) = 0u;
        v32 = *(_DWORD *)&v69[32];
        *(_DWORD *)(v15 + 160) = DWORD2(v68);
        *(_DWORD *)(v15 + 164) = v32;
        *(_QWORD *)v15 = &off_1E290AD10;
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 168) = v28;
        *(_DWORD *)(v15 + 176) = v29;
        v22 = a3[1];
        v33 = (unint64_t)a3[2];
        if ((unint64_t)v22 >= v33)
        {
          v34 = v22 - *a3;
          if ((unint64_t)(v34 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v35 = v33 - (_QWORD)*a3;
          v36 = v35 >> 2;
          if (v35 >> 2 <= (unint64_t)(v34 + 1))
            v36 = v34 + 1;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          v72 = a3 + 2;
          if (v37)
            v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v37);
          else
            v38 = 0;
          v50 = (uint64_t *)(v37 + 8 * v34);
          v51 = v37 + 8 * v38;
          v71 = v51;
          *v50 = v15;
          v44 = v50 + 1;
          *(_QWORD *)&buf[16] = v50 + 1;
          v53 = *a3;
          v52 = a3[1];
          if (v52 != *a3)
          {
            do
            {
              v54 = *--v52;
              *v52 = 0;
              *--v50 = v54;
            }
            while (v52 != v53);
            goto LABEL_65;
          }
LABEL_66:
          v59 = vdupq_n_s64((unint64_t)v52);
          goto LABEL_67;
        }
LABEL_45:
        *v22 = v15;
        v44 = v22 + 1;
LABEL_68:
        a3[1] = v44;
        break;
      case 4:
        v15 = operator new();
        v16 = *((_QWORD *)&v65 + 1);
        v17 = HIDWORD(v66);
        v18 = *(_OWORD *)&v69[16];
        *(_OWORD *)(v15 + 48) = *(_OWORD *)v69;
        *(_OWORD *)(v15 + 64) = v18;
        *(_OWORD *)(v15 + 80) = *(_OWORD *)&v69[32];
        v19 = v68;
        *(_OWORD *)(v15 + 16) = v67;
        *(_OWORD *)(v15 + 32) = v19;
        *(_QWORD *)(v15 + 104) = 0;
        *(_QWORD *)(v15 + 112) = 0;
        *(_QWORD *)(v15 + 96) = 0;
        *(_DWORD *)(v15 + 120) = -1;
        *(_OWORD *)(v15 + 128) = 0u;
        *(_OWORD *)(v15 + 144) = 0u;
        v20 = *(_DWORD *)&v69[32];
        *(_DWORD *)(v15 + 160) = DWORD2(v68);
        *(_DWORD *)(v15 + 164) = v20;
        *(_QWORD *)v15 = &off_1E290A590;
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 168) = v16;
        *(_DWORD *)(v15 + 176) = v17;
        v22 = a3[1];
        v21 = (unint64_t)a3[2];
        if ((unint64_t)v22 >= v21)
        {
          v23 = v22 - *a3;
          if ((unint64_t)(v23 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v24 = v21 - (_QWORD)*a3;
          v25 = v24 >> 2;
          if (v24 >> 2 <= (unint64_t)(v23 + 1))
            v25 = v23 + 1;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v25;
          v72 = a3 + 2;
          if (v26)
            v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v26);
          else
            v27 = 0;
          v50 = (uint64_t *)(v26 + 8 * v23);
          v51 = v26 + 8 * v27;
          v71 = v51;
          *v50 = v15;
          v44 = v50 + 1;
          *(_QWORD *)&buf[16] = v50 + 1;
          v57 = *a3;
          v52 = a3[1];
          if (v52 != *a3)
          {
            do
            {
              v58 = *--v52;
              *v52 = 0;
              *--v50 = v58;
            }
            while (v52 != v57);
LABEL_65:
            v59 = *(int64x2_t *)a3;
            v44 = *(uint64_t **)&buf[16];
            v51 = v71;
LABEL_67:
            *a3 = v50;
            a3[1] = v44;
            *(int64x2_t *)&buf[8] = v59;
            v60 = a3[2];
            a3[2] = (uint64_t *)v51;
            v71 = (unint64_t)v60;
            *(_QWORD *)buf = v59.i64[0];
            std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)buf);
            goto LABEL_68;
          }
          goto LABEL_66;
        }
        goto LABEL_45;
    }
    v67 = *(_OWORD *)&v69[8];
    v68 = *(_OWORD *)&v69[24];
    *(_QWORD *)v69 = *(_QWORD *)&v69[40];
    if (++v6 == 3)
    {
LABEL_70:
      result = 0;
      v62 = v68;
      *(_OWORD *)a2 = v67;
      *(_OWORD *)(a2 + 16) = v62;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)v69;
      return result;
    }
  }
  v14 = 4 * HIDWORD(v68);
  if ((BYTE12(v67) & 0x20) != 0)
    v14 = 4;
  *(_QWORD *)&v69[8] = v67;
  *(_DWORD *)&v69[16] = 1819304813;
  *(_DWORD *)&v69[20] = BYTE12(v67) & 0x20 | 9;
  *(_DWORD *)&v69[24] = v14;
  *(_DWORD *)&v69[28] = 1;
  *(_DWORD *)&v69[32] = v14;
  *(_DWORD *)&v69[36] = HIDWORD(v68);
  *(_QWORD *)&v69[40] = 32;
  PCMBlitter_CreateBlitter((const CAStreamBasicDescription *)buf, (CAStreamBasicDescription *)&v67, (CAStreamBasicDescription *)&v69[8]);
  v65 = *(_OWORD *)buf;
  v66 = *(_QWORD *)&buf[16];
  v13 = *(_DWORD *)buf;
  if (*(_DWORD *)buf > 1u)
    goto LABEL_23;
  AudioConverterLog();
  v63 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PCMConverter.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 738;
    _os_log_impl(&dword_18EE07000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to determine suitable PCM converter", buf, 0x12u);
  }
  return 1718449215;
}

void sub_18EE2EF38(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t PCMBlitter_CreateBlitter(const CAStreamBasicDescription *a1, CAStreamBasicDescription *a2, CAStreamBasicDescription *a3)
{
  unint64_t v5;
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  const CAStreamBasicDescription *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  const CAStreamBasicDescription *v41;
  void *v42;
  const CAStreamBasicDescription *v43;
  uint64_t (*v44)();
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  const CAStreamBasicDescription *v49;
  void *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;

  while (1)
  {
    while (1)
    {
      v5 = *((unsigned int *)a2 + 3);
      if ((v5 & 1) != 0)
        break;
      result = IntSampleSize(a2);
      if (!(_DWORD)result)
        goto LABEL_185;
      v7 = result;
      v8 = (v5 >> 7) & 0x3F;
      v9 = *((_DWORD *)a3 + 3);
      if ((v9 & 1) != 0)
      {
        result = FloatSampleSize(a3);
        if ((_DWORD)result != 4)
          goto LABEL_185;
        result = CAStreamBasicDescription::PackednessIsSignificant(a2);
        if ((_DWORD)result)
        {
          v15 = *((_DWORD *)a2 + 3);
        }
        else
        {
          v15 = *((_DWORD *)a2 + 3);
          if ((*((_DWORD *)a2 + 8) & 7) == 0)
            goto LABEL_98;
        }
        if ((v15 & 0x10) != 0)
        {
LABEL_98:
          switch(v7)
          {
            case 1u:
              if ((_DWORD)v8)
                goto LABEL_185;
              v43 = a1;
              *(_DWORD *)a1 = 2;
              *((_QWORD *)a1 + 2) = 1065353216;
              if ((v15 & 4) != 0)
                v44 = (uint64_t (*)())SInt8ToFloat32;
              else
                v44 = (uint64_t (*)())UInt8ToFloat32;
              break;
            case 2u:
              if ((_DWORD)v8)
                goto LABEL_185;
              v43 = a1;
              *(_DWORD *)a1 = 2;
              *((_QWORD *)a1 + 2) = 1065353216;
              if ((v15 & 2) != 0)
                v44 = (uint64_t (*)())SwapInt16ToFloat32_Portable;
              else
                v44 = (uint64_t (*)())NativeInt16ToFloat32_ARM;
              break;
            case 3u:
              if ((_DWORD)v8)
                goto LABEL_185;
              v43 = a1;
              *(_DWORD *)a1 = 2;
              *((_QWORD *)a1 + 2) = 1065353216;
              if ((v15 & 2) != 0)
                v44 = (uint64_t (*)())SwapInt24ToFloat32_Portable;
              else
                v44 = (uint64_t (*)())NativeInt24ToFloat32_Portable;
              break;
            case 4u:
              if ((_DWORD)v8)
              {
                v43 = a1;
                *(_DWORD *)a1 = 3;
                *((float *)a1 + 4) = 1.0 / (float)(1 << v8);
                *((_DWORD *)a1 + 5) = 0;
                if ((v15 & 2) != 0)
                  v44 = SwapInt32ToFloat32Scaled_Portable;
                else
                  v44 = (uint64_t (*)())NativeInt32ToFloat32Scaled_ARM;
              }
              else
              {
                v43 = a1;
                *(_DWORD *)a1 = 2;
                *((_QWORD *)a1 + 2) = 1065353216;
                if ((v15 & 2) != 0)
                  v44 = (uint64_t (*)())SwapInt32ToFloat32_Portable;
                else
                  v44 = (uint64_t (*)())NativeInt32ToFloat32_Portable;
              }
              goto LABEL_238;
            default:
              goto LABEL_185;
          }
          goto LABEL_238;
        }
        goto LABEL_75;
      }
      result = IntSampleSize(a3);
      if (!(_DWORD)result)
        goto LABEL_185;
      v10 = result;
      if (CAStreamBasicDescription::PackednessIsSignificant(a2) || (*((_DWORD *)a2 + 8) & 7) != 0)
        v11 = (*((unsigned __int8 *)a2 + 12) >> 4) & 1;
      else
        v11 = 1;
      result = CAStreamBasicDescription::PackednessIsSignificant(a3);
      if ((_DWORD)result)
      {
        v12 = *((_DWORD *)a3 + 3);
LABEL_47:
        v29 = (v12 >> 4) & 1;
        goto LABEL_48;
      }
      v12 = *((_DWORD *)a3 + 3);
      if ((*((_DWORD *)a3 + 8) & 7) != 0)
        goto LABEL_47;
      v29 = 1;
LABEL_48:
      v30 = (v9 >> 7) & 0x3F;
      if (v7 == v10 && ((v11 ^ v29) & 1) == 0)
      {
        if ((v11 & 1) != 0)
        {
          if ((_DWORD)v8 != v30)
          {
            v10 = v7;
            if (v29)
              goto LABEL_102;
            v10 = v7;
            goto LABEL_22;
          }
        }
        else if ((_DWORD)v8 != v30 || *((_DWORD *)a2 + 8) != *((_DWORD *)a3 + 8))
        {
          goto LABEL_75;
        }
        if (v7 >= 2)
          v31 = 6;
        else
          v31 = 4;
        v32 = *((_DWORD *)a2 + 3) ^ v12;
        if ((v32 & v31) == 0)
          goto LABEL_80;
        if (v7 >= 2 && (v32 & 2) != 0)
        {
          switch(v7)
          {
            case 4u:
              goto LABEL_146;
            case 3u:
              v41 = a1;
              *(_DWORD *)a1 = 2;
              v42 = SwapPCM24_Portable;
              goto LABEL_199;
            case 2u:
              v41 = a1;
              *(_DWORD *)a1 = 2;
              v42 = SwapPCM16_ARM;
              goto LABEL_199;
          }
        }
      }
      if ((v11 & v29 & 1) != 0)
      {
LABEL_102:
        if ((((v9 >> 7) | (v5 >> 7)) & 0x3F) == 0)
        {
          if (v10 != 2 || (v12 & 2) != 0)
          {
            if (v7 == 2 && (*((_BYTE *)a2 + 12) & 2) == 0)
            {
              if (v10 == 3)
              {
                v43 = a1;
                *(_DWORD *)a1 = 2;
                *((_QWORD *)a1 + 2) = 1065353216;
                if ((v12 & 2) != 0)
                  v44 = (uint64_t (*)())NativeInt16ToSwapInt24_Portable;
                else
                  v44 = (uint64_t (*)())NativeInt16ToNativeInt24_Portable;
                goto LABEL_238;
              }
              if (v10 == 1)
              {
                v43 = a1;
                *(_DWORD *)a1 = 2;
                *((_QWORD *)a1 + 2) = 1065353216;
                if ((v12 & 4) != 0)
                  v44 = (uint64_t (*)())NativeInt16ToSInt8_Portable;
                else
                  v44 = (uint64_t (*)())NativeInt16ToUInt8_Portable;
                goto LABEL_238;
              }
            }
          }
          else
          {
            if (v7 == 3)
            {
              v67 = *((_DWORD *)a2 + 3);
              v43 = a1;
              *(_DWORD *)a1 = 2;
              *((_QWORD *)a1 + 2) = 1065353216;
              if ((v67 & 2) != 0)
                v44 = (uint64_t (*)())SwapInt24ToNativeInt16_Portable;
              else
                v44 = (uint64_t (*)())NativeInt24ToNativeInt16_Portable;
              goto LABEL_238;
            }
            if (v7 == 1)
            {
              v57 = *((_DWORD *)a2 + 3);
              v43 = a1;
              *(_DWORD *)a1 = 2;
              *((_QWORD *)a1 + 2) = 1065353216;
              if ((v57 & 4) != 0)
                v44 = (uint64_t (*)())SInt8ToNativeInt16_Portable;
              else
                v44 = (uint64_t (*)())UInt8ToNativeInt16_Portable;
              goto LABEL_238;
            }
          }
        }
        v45 = *((_DWORD *)a2 + 3);
        v46 = 8 * v7 - 1;
        if (((v45 >> 7) & 0x3F) != 0)
          v46 = (v45 >> 7) & 0x3F;
        v47 = (v12 >> 7) & 0x3F;
        if (!v47)
          v47 = 8 * v10 - 1;
        if (v7 == 4 && v10 == 4)
        {
          v48 = v47 - v46;
          if (v47 == v46)
            goto LABEL_185;
          v49 = a1;
          *(_DWORD *)a1 = 4;
          *((_DWORD *)a1 + 4) = 1065353216;
          *((_DWORD *)a1 + 5) = v48;
          if ((v45 & 2) != 0)
          {
            if ((v12 & 2) != 0)
              v50 = SwapInt32ToSwapInt32_Portable;
            else
              v50 = SwapInt32ToNativeInt32_Portable;
          }
          else if ((v12 & 2) != 0)
          {
            v50 = NativeInt32ToSwapInt32_Portable;
          }
          else
          {
            v50 = NativeInt32ToNativeInt32_ARM;
          }
        }
        else if ((_DWORD)v8 || v10 != 4)
        {
          if (v7 != 4 || v30)
            goto LABEL_185;
          v62 = v46 - v47;
          if (v10 == 3)
          {
            v49 = a1;
            *(_DWORD *)a1 = 4;
            *((_DWORD *)a1 + 4) = 1065353216;
            *((_DWORD *)a1 + 5) = v62;
            if ((v45 & 2) != 0)
            {
              if ((v12 & 2) != 0)
                v50 = SwapInt32ToSwapInt24;
              else
                v50 = SwapInt32ToNativeInt24_Portable;
            }
            else if ((v12 & 2) != 0)
            {
              v50 = NativeInt32ToSwapInt24_Portable;
            }
            else
            {
              v50 = NativeInt32ToNativeInt24_ARM;
            }
          }
          else
          {
            if (v10 != 2)
              goto LABEL_185;
            v49 = a1;
            *(_DWORD *)a1 = 4;
            *((_DWORD *)a1 + 4) = 1065353216;
            *((_DWORD *)a1 + 5) = v62;
            if ((v45 & 2) != 0)
            {
              if ((v12 & 2) != 0)
                v50 = SwapInt32ToSwapInt16;
              else
                v50 = SwapInt32ToNativeInt16_Portable;
            }
            else if ((v12 & 2) != 0)
            {
              v50 = NativeInt32ToSwapInt16_Portable;
            }
            else
            {
              v50 = NativeInt32ToNativeInt16_ARM;
            }
          }
        }
        else
        {
          v56 = v47 - v46;
          if (v7 == 3)
          {
            v49 = a1;
            *(_DWORD *)a1 = 4;
            *((_DWORD *)a1 + 4) = 1065353216;
            *((_DWORD *)a1 + 5) = v56;
            if ((v45 & 2) != 0)
            {
              if ((v12 & 2) != 0)
                v50 = SwapInt24ToSwapInt32;
              else
                v50 = SwapInt24ToNativeInt32_Portable;
            }
            else if ((v12 & 2) != 0)
            {
              v50 = NativeInt24ToSwapInt32;
            }
            else
            {
              v50 = NativeInt24ToNativeInt32_ARM;
            }
          }
          else
          {
            if (v7 != 2)
              goto LABEL_185;
            v49 = a1;
            *(_DWORD *)a1 = 4;
            *((_DWORD *)a1 + 4) = 1065353216;
            *((_DWORD *)a1 + 5) = v56;
            if ((v45 & 2) != 0)
            {
              if ((v12 & 2) != 0)
                v50 = SwapInt16ToSwapInt32;
              else
                v50 = SwapInt16ToNativeInt32_Portable;
            }
            else if ((v12 & 2) != 0)
            {
              v50 = NativeInt16ToSwapInt32;
            }
            else
            {
              v50 = NativeInt16ToNativeInt32_ARM;
            }
          }
        }
        *((_QWORD *)v49 + 1) = v50;
        return result;
      }
      if ((v11 & 1) != 0)
        goto LABEL_22;
LABEL_75:
      if ((*((_DWORD *)a2 + 3) & 2) == 0)
      {
        if (v7 == 8)
        {
          if ((*((_BYTE *)a3 + 12) & 1) != 0 && *((_DWORD *)a2 + 8) <= 0x20u)
          {
            v52 = *((_DWORD *)a2 + 7);
            v53 = *((_DWORD *)a2 + 3) & 0x20 | 9;
            v54 = 4 * v52;
            if ((*((_DWORD *)a2 + 3) & 0x20) != 0)
              v54 = 4;
            *(_QWORD *)a3 = *(_QWORD *)a2;
            *((_DWORD *)a3 + 2) = 1819304813;
            *((_DWORD *)a3 + 3) = v53;
            *((_DWORD *)a3 + 4) = v54;
            *((_DWORD *)a3 + 5) = 1;
            *((_DWORD *)a3 + 6) = v54;
            *((_DWORD *)a3 + 7) = v52;
            *((_QWORD *)a3 + 4) = 32;
            v55 = *((_DWORD *)a2 + 8);
            v43 = a1;
            *(_DWORD *)a1 = 4;
            *((_DWORD *)a1 + 4) = 1065353216;
            *((_DWORD *)a1 + 5) = v55;
            v44 = (uint64_t (*)())NativeLowAlignedInt64ToFloat32_ARM;
            goto LABEL_238;
          }
          goto LABEL_185;
        }
        if (v7 == 4)
        {
          if ((*((_BYTE *)a3 + 12) & 1) != 0)
          {
            v58 = *((_DWORD *)a2 + 7);
            v59 = *((_DWORD *)a2 + 3) & 0x20 | 9;
            v60 = 4 * v58;
            if ((*((_DWORD *)a2 + 3) & 0x20) != 0)
              v60 = 4;
            *(_QWORD *)a3 = *(_QWORD *)a2;
            *((_DWORD *)a3 + 2) = 1819304813;
            *((_DWORD *)a3 + 3) = v59;
            *((_DWORD *)a3 + 4) = v60;
            *((_DWORD *)a3 + 5) = 1;
            *((_DWORD *)a3 + 6) = v60;
            *((_DWORD *)a3 + 7) = v58;
            *((_QWORD *)a3 + 4) = 32;
            v61 = *((_DWORD *)a2 + 8);
            v43 = a1;
            *(_DWORD *)a1 = 4;
            *((_DWORD *)a1 + 4) = 1065353216;
            *((_DWORD *)a1 + 5) = v61;
            v44 = (uint64_t (*)())NativeLowAlignedInt32ToFloat32_ARM;
            goto LABEL_238;
          }
          v37 = *((_DWORD *)a2 + 8);
          if (v37 != 16 || *((_DWORD *)a3 + 8) > 0x10u)
          {
            if (v37 <= 0x18)
            {
              v63 = *((_DWORD *)a2 + 7);
              v64 = *((_DWORD *)a2 + 3) & 0x20 | 0xC0C;
              v65 = 4 * v63;
              if ((*((_DWORD *)a2 + 3) & 0x20) != 0)
                v65 = 4;
              *(_QWORD *)a3 = *(_QWORD *)a2;
              *((_DWORD *)a3 + 2) = 1819304813;
              *((_DWORD *)a3 + 3) = v64;
              *((_DWORD *)a3 + 4) = v65;
              *((_DWORD *)a3 + 5) = 1;
              *((_DWORD *)a3 + 6) = v65;
              *((_DWORD *)a3 + 7) = v63;
              *((_QWORD *)a3 + 4) = 32;
              v66 = *((_DWORD *)a2 + 8);
              v43 = a1;
              *(_DWORD *)a1 = 4;
              *((_DWORD *)a1 + 4) = 1065353216;
              *((_DWORD *)a1 + 5) = v66;
              v44 = (uint64_t (*)())NativeLowAlignedInt32To824Fixed_ARM;
              goto LABEL_238;
            }
            goto LABEL_185;
          }
          v38 = *((_DWORD *)a2 + 7);
          v39 = *((_DWORD *)a2 + 3) & 0x20 | 0xC;
          v40 = 2 * v38;
          if ((*((_DWORD *)a2 + 3) & 0x20) != 0)
            v40 = 2;
          *(_QWORD *)a3 = *(_QWORD *)a2;
          *((_DWORD *)a3 + 2) = 1819304813;
          *((_DWORD *)a3 + 3) = v39;
          *((_DWORD *)a3 + 4) = v40;
          *((_DWORD *)a3 + 5) = 1;
          *((_DWORD *)a3 + 6) = v40;
          *((_DWORD *)a3 + 7) = v38;
          *((_QWORD *)a3 + 4) = 16;
          v41 = a1;
          *(_DWORD *)a1 = 2;
          v42 = NativeLowAlignedInt32ToInt16_ARM;
          goto LABEL_199;
        }
LABEL_185:
        v35 = a1;
        *(_DWORD *)a1 = 0;
        goto LABEL_186;
      }
      v34 = *(_OWORD *)a2;
      v33 = *((_OWORD *)a2 + 1);
      *((_QWORD *)a3 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)a3 = v34;
      *((_OWORD *)a3 + 1) = v33;
      *((_DWORD *)a3 + 3) ^= 2u;
    }
    result = FloatSampleSize(a2);
    if (!(_DWORD)result)
      goto LABEL_185;
    v13 = result;
    v14 = *((unsigned int *)a3 + 3);
    if ((v14 & 1) != 0)
      break;
    if ((_DWORD)result != 4)
      goto LABEL_185;
    v10 = IntSampleSize(a3);
    result = CAStreamBasicDescription::PackednessIsSignificant(a3);
    if ((_DWORD)result)
    {
      v12 = *((_DWORD *)a3 + 3);
      if ((v12 & 0x10) != 0)
        goto LABEL_81;
    }
    else
    {
      v12 = *((_DWORD *)a3 + 3);
      if ((*((_DWORD *)a3 + 8) & 7) == 0 || (v12 & 0x10) != 0)
      {
LABEL_81:
        v36 = (v14 >> 7) & 0x3F;
        switch(v10)
        {
          case 1:
            if ((_DWORD)v36)
              goto LABEL_185;
            v43 = a1;
            *(_DWORD *)a1 = 2;
            *((_QWORD *)a1 + 2) = 1065353216;
            if ((v12 & 4) != 0)
              v44 = (uint64_t (*)())Float32ToSInt8;
            else
              v44 = (uint64_t (*)())Float32ToUInt8;
            break;
          case 2:
            if ((_DWORD)v36)
              goto LABEL_185;
            v43 = a1;
            *(_DWORD *)a1 = 2;
            *((_QWORD *)a1 + 2) = 1065353216;
            if ((v12 & 2) != 0)
              v44 = (uint64_t (*)())Float32ToSwapInt16_Portable;
            else
              v44 = (uint64_t (*)())Float32ToNativeInt16_ARM;
            break;
          case 3:
            if ((_DWORD)v36)
              goto LABEL_185;
            v43 = a1;
            *(_DWORD *)a1 = 2;
            *((_QWORD *)a1 + 2) = 1065353216;
            if ((v12 & 2) != 0)
              v44 = (uint64_t (*)())Float32ToSwapInt24_Portable;
            else
              v44 = (uint64_t (*)())Float32ToNativeInt24_Portable;
            break;
          case 4:
            if ((_DWORD)v36)
            {
              v43 = a1;
              *(_DWORD *)a1 = 3;
              *((float *)a1 + 4) = (float)(1 << v36);
              *((_DWORD *)a1 + 5) = 0;
              if ((v12 & 2) != 0)
                v44 = Float32ToSwapInt32Scaled_Portable;
              else
                v44 = (uint64_t (*)())Float32ToNativeInt32Scaled_ARM;
            }
            else
            {
              v43 = a1;
              *(_DWORD *)a1 = 2;
              *((_QWORD *)a1 + 2) = 1065353216;
              if ((v12 & 2) != 0)
                v44 = (uint64_t (*)())Float32ToSwapInt32_Portable;
              else
                v44 = (uint64_t (*)())Float32ToNativeInt32_ARM;
            }
            break;
          default:
            goto LABEL_185;
        }
LABEL_238:
        *((_QWORD *)v43 + 1) = v44;
        return result;
      }
    }
    LODWORD(v8) = 0;
    v7 = 4;
LABEL_22:
    if ((v12 & 2) != 0)
      *((_DWORD *)a3 + 3) = v12 ^ 2;
    if (v10 == 8)
    {
      v16 = *((_DWORD *)a2 + 3);
      if ((v16 & 1) == 0)
        goto LABEL_185;
      v21 = *((_DWORD *)a3 + 8);
      if (v21 > 0x20)
        goto LABEL_185;
      if (v7 == 4 && (v16 & 2) == 0)
      {
        v43 = a1;
        *(_DWORD *)a1 = 4;
        *((_DWORD *)a1 + 4) = 1065353216;
        *((_DWORD *)a1 + 5) = v21;
        v44 = (uint64_t (*)())Float32ToNativeLowAlignedInt64_ARM;
        goto LABEL_238;
      }
LABEL_42:
      v22 = *(_QWORD *)a2;
      v23 = *((_DWORD *)a2 + 7);
      v25 = v16 & 0x20;
      v24 = v25 == 0;
      v26 = 9;
      goto LABEL_43;
    }
    if (v10 != 4)
      goto LABEL_185;
    v16 = *((_DWORD *)a2 + 3);
    if ((v16 & 1) != 0)
    {
      if (v7 == 4 && (v16 & 2) == 0)
      {
        v51 = *((_DWORD *)a3 + 8);
        v43 = a1;
        *(_DWORD *)a1 = 4;
        *((_DWORD *)a1 + 4) = 1065353216;
        *((_DWORD *)a1 + 5) = v51;
        v44 = (uint64_t (*)())Float32ToNativeLowAlignedInt32_ARM;
        goto LABEL_238;
      }
      goto LABEL_42;
    }
    v17 = *((_DWORD *)a3 + 8);
    if (*((_DWORD *)a2 + 8) <= 0x10u && v17 == 16)
    {
      if ((v16 & 2) == 0 && !(_DWORD)v8 && v7 == 2)
      {
        v41 = a1;
        *(_DWORD *)a1 = 2;
        v42 = NativeInt16ToLowAlignedInt32_ARM;
        goto LABEL_199;
      }
      v18 = *((_DWORD *)a2 + 7);
      v19 = *((_DWORD *)a2 + 3) & 0x20 | 0xC;
      v20 = 2 * v18;
      if ((*((_DWORD *)a2 + 3) & 0x20) != 0)
        v20 = 2;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *((_DWORD *)a3 + 2) = 1819304813;
      *((_DWORD *)a3 + 3) = v19;
      *((_DWORD *)a3 + 4) = v20;
      *((_DWORD *)a3 + 5) = 1;
      *((_DWORD *)a3 + 6) = v20;
      *((_DWORD *)a3 + 7) = v18;
      *((_QWORD *)a3 + 4) = 16;
    }
    else
    {
      if (v17 > 0x18)
        goto LABEL_185;
      if ((v16 & 2) == 0 && (_DWORD)v8 == 24 && v7 == 4)
      {
        v43 = a1;
        *(_DWORD *)a1 = 4;
        *((_DWORD *)a1 + 4) = 1065353216;
        *((_DWORD *)a1 + 5) = v17;
        v44 = (uint64_t (*)())Native824FixedToLowAlignedInt32_ARM;
        goto LABEL_238;
      }
      v22 = *(_QWORD *)a2;
      v23 = *((_DWORD *)a2 + 7);
      v25 = *((_DWORD *)a2 + 3) & 0x20;
      v24 = v25 == 0;
      v26 = 3084;
LABEL_43:
      v27 = v25 | v26;
      v28 = 4 * v23;
      if (!v24)
        v28 = 4;
      *(_QWORD *)a3 = v22;
      *((_DWORD *)a3 + 2) = 1819304813;
      *((_DWORD *)a3 + 3) = v27;
      *((_DWORD *)a3 + 4) = v28;
      *((_DWORD *)a3 + 5) = 1;
      *((_DWORD *)a3 + 6) = v28;
      *((_DWORD *)a3 + 7) = v23;
      *((_QWORD *)a3 + 4) = 32;
    }
  }
  result = FloatSampleSize(a3);
  if (v13 == (_DWORD)result)
  {
LABEL_80:
    v35 = a1;
    *(_DWORD *)a1 = 1;
LABEL_186:
    *((_QWORD *)v35 + 1) = 0;
    *((_QWORD *)v35 + 2) = 1065353216;
    return result;
  }
  if (v13 == 4)
  {
    if ((_DWORD)result == 8)
    {
      v41 = a1;
      *(_DWORD *)a1 = 2;
      v42 = Float32ToNativeFloat64;
      goto LABEL_199;
    }
    if ((_DWORD)result != -4)
    {
      if ((_DWORD)result == -8)
      {
        v41 = a1;
        *(_DWORD *)a1 = 2;
        v42 = Float32ToSwapFloat64;
        goto LABEL_199;
      }
      goto LABEL_185;
    }
LABEL_146:
    v41 = a1;
    *(_DWORD *)a1 = 2;
    v42 = SwapPCM32_Portable;
    goto LABEL_199;
  }
  if ((_DWORD)result != 4)
  {
    if ((v13 == 8 || v13 == -8) && !((_DWORD)result + v13))
    {
      v41 = a1;
      *(_DWORD *)a1 = 2;
      v42 = SwapPCM64_Portable;
      goto LABEL_199;
    }
    goto LABEL_185;
  }
  if (v13 != 8)
  {
    if (v13 != -4)
    {
      if (v13 == -8)
      {
        v41 = a1;
        *(_DWORD *)a1 = 2;
        v42 = SwapFloat64ToFloat32;
        goto LABEL_199;
      }
      goto LABEL_185;
    }
    goto LABEL_146;
  }
  v41 = a1;
  *(_DWORD *)a1 = 2;
  v42 = NativeFloat64ToFloat32;
LABEL_199:
  *((_QWORD *)v41 + 1) = v42;
  *((_QWORD *)v41 + 2) = 1065353216;
  return result;
}

uint64_t FloatSampleSize(_DWORD *a1)
{
  int v1;
  unsigned int v4;
  unsigned int v5;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v1 = a1[2];
  if (v1 != 1885564203 && v1 != 1819304813 || a1[5] != 1)
    return 0;
  v4 = a1[4];
  v5 = a1[7];
  if (v4 != a1[6] || v5 == 0)
    return 0;
  v7 = a1[3];
  if ((v7 & 1) == 0)
    return 0;
  v8 = a1[8];
  if (v8 != 64 && v8 != 32)
    return 0;
  v9 = v8 >> 3;
  if (v4)
  {
    if ((v7 & 0x20) != 0)
      v5 = 1;
    v4 /= v5;
  }
  if ((v7 & 2) != 0)
    v10 = -v9;
  else
    v10 = v9;
  if (v4 == v9)
    return v10;
  else
    return 0;
}

uint64_t IntSampleSize(_DWORD *a1)
{
  int v1;
  unsigned int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  v1 = a1[2];
  if (v1 != 1885564203 && v1 != 1819304813 || a1[5] != 1)
    return 0;
  v4 = a1[4];
  if (v4 != a1[6] || a1[7] == 0)
    return 0;
  v6 = 0;
  v7 = a1[3];
  if ((v7 & 1) == 0 && v4)
  {
    if ((v7 & 0x20) != 0)
      v8 = 1;
    else
      v8 = a1[7];
    LODWORD(v6) = v4 / v8;
    if ((v6 - 9) < 0xFFFFFFF8)
      return 0;
    v9 = a1[8];
    if (!v9 || v9 > 8 * (int)v6 || (v7 & 8) != 0 && v9 != 8 * (_DWORD)v6)
      return 0;
    if ((_DWORD)v6 != 1 && (a1[3] & 4) == 0)
      return 0;
    else
      return v6;
  }
  return v6;
}

_QWORD *acv2::AudioConverterChain::AddStep(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int64x2_t v21;
  unint64_t v22;
  uint64_t v23;
  int64x2_t v24;
  unint64_t v25;
  _QWORD *v26;

  v3 = result;
  v4 = (_QWORD *)result[13];
  v5 = (_QWORD *)result[14];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = *(v5 - 1);
  *(_QWORD *)(*a2 + 96) = v6;
  v7 = result[15];
  if ((unint64_t)v5 >= v7)
  {
    v10 = v5 - v4;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v7 - (_QWORD)v4;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v26 = v3 + 15;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v13);
    else
      v14 = 0;
    v15 = (_QWORD *)(v13 + 8 * v10);
    v16 = v13 + 8 * v14;
    v25 = v16;
    v17 = *a2;
    *a2 = 0;
    *v15 = v17;
    v9 = v15 + 1;
    v24.i64[1] = (uint64_t)(v15 + 1);
    v19 = (_QWORD *)v3[13];
    v18 = (_QWORD *)v3[14];
    if (v18 == v19)
    {
      v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        v20 = *--v18;
        *v18 = 0;
        *--v15 = v20;
      }
      while (v18 != v19);
      v21 = *(int64x2_t *)(v3 + 13);
      v9 = (_QWORD *)v24.i64[1];
      v16 = v25;
    }
    v3[13] = v15;
    v3[14] = v9;
    v24 = v21;
    v22 = v3[15];
    v3[15] = v16;
    v25 = v22;
    v23 = v21.i64[0];
    result = (_QWORD *)std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *v5 = v8;
    v9 = v5 + 1;
  }
  v3[14] = v9;
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t acv2::MixableFormatPair(unsigned int a1, unsigned int a2, __int32 *a3, __int32 *a4)
{
  BOOL v4;
  __int32 v5;
  int8x8_t v6;
  uint8x8_t v7;
  uint64_t result;
  uint8x8_t v9;
  __int32 v10;
  uint8x8_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *i;
  BOOL v15;

  if (a1 <= 2)
  {
    if (a2 <= 2)
    {
      v4 = a1 == a2;
      return !v4;
    }
    v5 = *a4;
    if (*a4 != 0x10000)
    {
      if (!v5)
      {
        v5 = a4[2];
        goto LABEL_19;
      }
      goto LABEL_15;
    }
    v6 = (int8x8_t)a4[1];
    goto LABEL_18;
  }
  v5 = *a3;
  if (a2 <= 2)
  {
    if (v5 != 0x10000)
    {
      if (!v5)
      {
        v5 = a3[2];
LABEL_19:
        v4 = v5 == 0;
        return !v4;
      }
LABEL_15:
      v5 = (unsigned __int16)v5;
      goto LABEL_19;
    }
    v6 = (int8x8_t)a3[1];
LABEL_18:
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    v5 = v7.i32[0];
    goto LABEL_19;
  }
  if (v5 == 0x10000)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)a3[1]);
    v9.i16[0] = vaddlv_u8(v9);
    if (!v9.i32[0])
      return 0;
  }
  else if (v5)
  {
    if (!(unsigned __int16)*a3)
      return 0;
  }
  else if (!a3[2])
  {
    return 0;
  }
  v10 = *a4;
  if (*a4 == 0x10000)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)a4[1]);
    v11.i16[0] = vaddlv_u8(v11);
    if (!v11.i32[0])
      return 0;
    goto LABEL_33;
  }
  if (v10)
  {
    if ((unsigned __int16)*a4)
      goto LABEL_33;
    return 0;
  }
  if (!a4[2])
    return 0;
LABEL_33:
  if (v5 != v10)
    return 1;
  if (!v5)
  {
    v12 = a3[2];
    if ((_DWORD)v12 == a4[2])
    {
      if (!(_DWORD)v12)
        return 0;
      v13 = a4 + 3;
      for (i = a3 + 3; *i == *v13; i += 5)
      {
        if (*i == 100)
        {
          v15 = *(_QWORD *)i == *(_QWORD *)v13 && *((_QWORD *)i + 1) == *((_QWORD *)v13 + 1);
          if (!v15 || i[4] != (unint64_t)v13[4])
            break;
        }
        result = 0;
        v13 += 5;
        if (!--v12)
          return result;
      }
    }
    return 1;
  }
  if (v5 != 0x10000)
    return 0;
  v4 = a3[1] == a4[1];
  return !v4;
}

BOOL CAStreamBasicDescription::PackednessIsSignificant(CAStreamBasicDescription *this)
{
  unsigned int v1;
  unsigned int v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 2) != 1819304813)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v4 = 136315394;
      v5 = "CAStreamBasicDescription.h";
      v6 = 1024;
      v7 = 234;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  PackednessIsSignificant only applies for PCM", (uint8_t *)&v4, 0x12u);
    }
    __break(1u);
  }
  v1 = *((_DWORD *)this + 6);
  if (v1)
  {
    if ((*((_BYTE *)this + 12) & 0x20) != 0)
    {
      v2 = 1;
    }
    else
    {
      v2 = *((_DWORD *)this + 7);
      if (!v2)
      {
        v1 = 0;
        return v1 != *((_DWORD *)this + 8);
      }
    }
    v1 = 8 * (v1 / v2);
  }
  return v1 != *((_DWORD *)this + 8);
}

uint64_t acv2::Reinterleaver::Reinterleaver(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void **v8;
  char *v9;
  std::vector<int> *v10;
  std::vector<int>::size_type v11;
  std::vector<int>::const_iterator v12;
  std::vector<int>::const_iterator v13;
  std::vector<int>::size_type v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  uint64_t i;
  int v19;
  unsigned int v20;
  unint64_t v21;
  char *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = *(_OWORD *)(a2 + 48);
  v37 = *(_OWORD *)(a2 + 32);
  v3 = v37;
  v38 = v4;
  v39 = *(_OWORD *)(a2 + 64);
  v5 = v39;
  v6 = *(_OWORD *)(a2 + 16);
  v36[0] = *(_OWORD *)a2;
  v7 = v36[0];
  v36[1] = v6;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = -1;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)a1 = &off_1E290A410;
  *(_OWORD *)(a1 + 168) = 0u;
  v8 = (void **)(a1 + 168);
  v9 = (char *)(a1 + 192);
  *(_OWORD *)(a1 + 216) = 0u;
  v10 = (std::vector<int> *)(a1 + 240);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_WORD *)(a1 + 264) = 1;
  *(_DWORD *)(a1 + 268) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 276) = 0;
  v11 = *(unsigned int *)(a1 + 84);
  LODWORD(v36[0]) = -1;
  v12.__i_ = 0;
  std::vector<int>::insert((std::vector<int> *)(a1 + 216), v12, v11, (std::vector<int>::const_reference)v36);
  v13.__i_ = *(std::__wrap_iter<const int *>::iterator_type *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 44);
  LODWORD(v36[0]) = -1;
  std::vector<int>::insert(v10, v13, v14, (std::vector<int>::const_reference)v36);
  LODWORD(v15) = *(_DWORD *)(a1 + 84);
  v16 = *(_DWORD *)(a1 + 44);
  if (v15 >= v16)
    v15 = v16;
  else
    v15 = v15;
  v17 = *(char **)(a1 + 216);
  if ((_DWORD)v15)
  {
    for (i = 0; i != v15; ++i)
      *(_DWORD *)&v17[4 * i] = i;
  }
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v9, v17, *(_QWORD *)(a1 + 224), (uint64_t)(*(_QWORD *)(a1 + 224) - (_QWORD)v17) >> 2);
  *(_BYTE *)(a1 + 264) = 1;
  *(_DWORD *)(a1 + 276) = 0;
  if ((*(_BYTE *)(a1 + 28) & 0x20) != 0 || *(_DWORD *)(a1 + 44) == 1)
  {
    *(_DWORD *)(a1 + 276) = 1;
    v19 = 3;
  }
  else
  {
    v19 = 2;
  }
  v20 = *(_DWORD *)(a1 + 84);
  if ((*(_BYTE *)(a1 + 68) & 0x20) != 0 || v20 == 1)
    *(_DWORD *)(a1 + 276) = v19;
  LODWORD(v21) = *(_DWORD *)(a1 + 44);
  if (v21 <= v20)
    v21 = v20;
  else
    v21 = v21;
  v23 = *(_BYTE **)(a1 + 168);
  v22 = *(char **)(a1 + 176);
  v24 = (v22 - v23) >> 3;
  if (v21 <= v24)
  {
    if (v21 >= v24)
      goto LABEL_34;
    v34 = &v23[8 * v21];
LABEL_33:
    *(_QWORD *)(a1 + 176) = v34;
    goto LABEL_34;
  }
  v25 = v21 - v24;
  v26 = *(_QWORD *)(a1 + 184);
  if (v21 - v24 <= (v26 - (uint64_t)v22) >> 3)
  {
    bzero(*(void **)(a1 + 176), 8 * v25);
    v34 = &v22[8 * v25];
    goto LABEL_33;
  }
  v27 = v26 - (_QWORD)v23;
  if (v27 >> 2 > v21)
    v21 = v27 >> 2;
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
    v28 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v28 = v21;
  if (v28 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v29 = (char *)operator new(8 * v28);
  v30 = &v29[8 * v24];
  v31 = &v29[8 * v28];
  bzero(v30, 8 * v25);
  v32 = &v30[8 * v25];
  if (v22 != v23)
  {
    do
    {
      v33 = *((_QWORD *)v22 - 1);
      v22 -= 8;
      *((_QWORD *)v30 - 1) = v33;
      v30 -= 8;
    }
    while (v22 != v23);
    v22 = (char *)*v8;
  }
  *(_QWORD *)(a1 + 168) = v30;
  *(_QWORD *)(a1 + 176) = v32;
  *(_QWORD *)(a1 + 184) = v31;
  if (v22)
    operator delete(v22);
LABEL_34:
  acv2::Reinterleaver::BuildInverseChannelMap((acv2::Reinterleaver *)a1);
  *(_DWORD *)(a1 + 268) = acv2::Reinterleaver::StereoDownmixPossible((_DWORD *)(a1 + 16));
  return a1;
}

void sub_18EE30400(_Unwind_Exception *a1)
{
  acv2::AudioConverterBase *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v4;
  if (*v4)
  {
    *((_QWORD *)v1 + 31) = v7;
    operator delete(v7);
  }
  v8 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 28) = v8;
    operator delete(v8);
  }
  v9 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 25) = v9;
    operator delete(v9);
  }
  v10 = *v5;
  if (*v5)
  {
    *((_QWORD *)v1 + 22) = v10;
    operator delete(v10);
  }
  acv2::AudioConverterBase::~AudioConverterBase(v1);
  _Unwind_Resume(a1);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  std::vector<int>::const_reference v4;
  int *i;
  std::vector<int> *v7;
  const int *end;
  int *value;
  std::vector<int>::pointer begin;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<int>::size_type v18;
  int *v19;
  const int *v20;
  const int *v21;
  int *v22;
  int v23;
  std::vector<int>::size_type v24;
  std::vector<int>::value_type *v25;
  std::vector<int>::value_type *v26;
  std::vector<int>::size_type v27;
  std::vector<int>::value_type *v28;
  std::vector<int> *v29;
  int *v30;
  std::vector<int>::value_type v31;
  int *v32;
  int *v33;
  int64_t v34;

  if (__n)
  {
    v4 = __x;
    i = (int *)__position.__i_;
    v7 = this;
    end = this->__end_;
    value = this->__end_cap_.__value_;
    if (__n <= value - end)
    {
      v16 = (char *)end - (char *)__position.__i_;
      if (__n <= end - __position.__i_)
      {
        v19 = this->__end_;
        v18 = __n;
      }
      else
      {
        v17 = 0;
        v18 = v16 >> 2;
        v19 = (int *)&end[__n - (v16 >> 2)];
        do
        {
          end[v17 / 4] = *__x;
          v17 += 4;
        }
        while (4 * __n - 4 * v18 != v17);
        this->__end_ = v19;
        if (end == __position.__i_)
          return (std::vector<int>::iterator)this;
      }
      v20 = &__position.__i_[__n];
      v21 = &v19[-__n];
      v22 = v19;
      if (v21 < end)
      {
        v22 = v19;
        do
        {
          v23 = *v21++;
          *v22++ = v23;
        }
        while (v21 < end);
      }
      this->__end_ = v22;
      if (v19 != v20)
        this = (std::vector<int> *)memmove(&v19[-(v19 - v20)], __position.__i_, (char *)v19 - (char *)v20);
      if (i <= v4)
      {
        if (v7->__end_ <= v4)
          v24 = 0;
        else
          v24 = __n;
        v4 += v24;
      }
      do
      {
        *i++ = *v4;
        --v18;
      }
      while (v18);
    }
    else
    {
      begin = this->__begin_;
      v11 = __n + end - this->__begin_;
      if (v11 >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v12 = __position.__i_ - begin;
      v13 = (char *)value - (char *)begin;
      if (v13 >> 1 > v11)
        v11 = v13 >> 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v11;
      if (v14)
        v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v14);
      else
        v15 = 0;
      v25 = (std::vector<int>::value_type *)(v14 + 4 * v12);
      v26 = &v25[__n];
      v27 = 4 * __n;
      v28 = v25;
      do
      {
        *v28++ = *v4;
        v27 -= 4;
      }
      while (v27);
      v29 = (std::vector<int> *)v7->__begin_;
      if (v7->__begin_ != i)
      {
        v30 = i;
        do
        {
          v31 = *--v30;
          *--v25 = v31;
        }
        while (v30 != (int *)v29);
      }
      v32 = (int *)(v14 + 4 * v15);
      v33 = v7->__end_;
      v34 = (char *)v33 - (char *)i;
      if (v33 != i)
        memmove(v26, i, (char *)v33 - (char *)i);
      this = (std::vector<int> *)v7->__begin_;
      v7->__begin_ = v25;
      v7->__end_ = (std::vector<int>::value_type *)((char *)v26 + v34);
      v7->__end_cap_.__value_ = v32;
      if (this)
        operator delete(this);
    }
  }
  return (std::vector<int>::iterator)this;
}

void acv2::Reinterleaver::BuildInverseChannelMap(acv2::Reinterleaver *this)
{
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 v14;
  int *v15;
  int v16;

  *((_BYTE *)this + 265) = 1;
  memset(*((void **)this + 30), 255, 4 * *((unsigned int *)this + 11));
  v2 = *((unsigned int *)this + 21);
  if (!(_DWORD)v2)
  {
    v2 = 0;
    v4 = 0;
    goto LABEL_11;
  }
  v3 = 0;
  v4 = 0;
  v5 = *((_QWORD *)this + 24);
  while (1)
  {
    v6 = *(int *)(v5 + 4 * v3);
    if ((_DWORD)v6 == -1)
    {
      v4 = 1;
      goto LABEL_7;
    }
    v7 = *((_QWORD *)this + 30);
    if (*(_DWORD *)(v7 + 4 * v6) != -1)
      break;
    *(_DWORD *)(v7 + 4 * v6) = v3;
    v2 = *((unsigned int *)this + 21);
LABEL_7:
    if (++v3 >= v2)
      goto LABEL_11;
  }
  *((_BYTE *)this + 265) = 0;
LABEL_11:
  v8 = *((unsigned int *)this + 20);
  if ((_DWORD)v8)
  {
    if ((*((_BYTE *)this + 68) & 0x20) != 0)
    {
      v2 = 1;
    }
    else if (!v2)
    {
      return;
    }
    v9 = v8 / v2;
    v10 = v9 > 8;
    v11 = (1 << v9) & 0x114;
    if (!v10 && v11 != 0)
    {
      if (((*((_DWORD *)this + 69) == 1) & v4) == 1
        && acv2::Reinterleaver::BuildInverseChannelMap(void)::token[0] != -1)
      {
        dispatch_once(acv2::Reinterleaver::BuildInverseChannelMap(void)::token, &__block_literal_global_2036);
      }
      v13 = *((unsigned int *)this + 11);
      if ((_DWORD)v13)
      {
        v14 = 0;
        v15 = (int *)*((_QWORD *)this + 30);
        do
        {
          v16 = *v15++;
          v14 |= v16 == -1;
          --v13;
        }
        while (v13);
        if (((*((_DWORD *)this + 69) == 2) & v14) != 0
          && acv2::Reinterleaver::BuildInverseChannelMap(void)::token != -1)
        {
          dispatch_once(&acv2::Reinterleaver::BuildInverseChannelMap(void)::token, &__block_literal_global_2);
        }
      }
    }
  }
}

uint64_t acv2::Reinterleaver::StereoDownmixPossible(_DWORD *a1)
{
  BOOL v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  BOOL v8;
  int v9;
  _BOOL4 v12;
  _BOOL4 v17;
  BOOL v20;

  v1 = a1[7] == 2 && a1[17] == 1;
  if (v1 && a1[2] == 1819304813)
  {
    v2 = a1[8];
    v4 = a1[5];
    v3 = a1[6];
    v5 = a1[4];
    v6 = a1[3] & 0xF;
    v7 = v6 == 9 && v4 == 1;
    if (v7 && (v2 == 32 ? (v8 = v3 == 8) : (v8 = 0), v8))
    {
      v9 = a1[12];
      if (v5 == 8 && v9 == 1819304813)
      {
        if ((a1[13] & 0xF) == 9 && a1[15] == 1 && a1[18] == 32 && a1[16] == 4)
        {
          v9 = 1819304813;
          if (a1[14] == 4)
            return 1;
        }
        else
        {
          v9 = 1819304813;
        }
      }
    }
    else
    {
      v9 = a1[12];
    }
    v12 = v6 == 12 && v4 == 1;
    if (v12 && v2 == 16 && v3 == 4 && v5 == 4 && v9 == 1819304813)
    {
      if ((a1[13] & 0xF) == 0xC && a1[15] == 1 && a1[18] == 16 && a1[16] == 2 && a1[14] == 2)
        return 2;
    }
    else
    {
      v17 = v2 == 32 && v12;
      v20 = v17 && v3 == 8 && v5 == 8 && v9 == 1819304813;
      if (v20 && (a1[13] & 0xF) == 0xC && a1[15] == 1 && a1[18] == 32 && a1[16] == 4 && a1[14] == 4)
        return 3;
    }
  }
  return 0;
}

void acv2::Reinterleaver::SetLayouts(std::vector<int> *this, const AudioChannelLayout *const *a2, const AudioChannelLayout *a3)
{
  const AudioChannelLayout *v3;
  const AudioChannelLayout *const *v4;
  int v6;
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  unsigned int value_high;
  int v11;
  __int32 mChannelLayoutTag;
  uint8x8_t v13;
  std::vector<int>::size_type end_high;
  int v15;
  std::vector<int>::const_iterator v16;
  std::vector<int>::const_iterator v17;
  std::vector<int> *v18;
  std::vector<int>::size_type v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  std::vector<int>::pointer begin;
  std::vector<int>::value_type __x;
  _OWORD v25[2];
  _OWORD v26[2];

  v3 = a3;
  v4 = a2;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 0x10000)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)a2 + 1));
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.i32[0])
      goto LABEL_13;
  }
  else if (v6)
  {
    if ((unsigned __int16)*(_DWORD *)a2)
      goto LABEL_13;
  }
  else if (*((_DWORD *)a2 + 2))
  {
    goto LABEL_13;
  }
  if (a3->mChannelLayoutTag == 0x10000)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)a3->mChannelBitmap);
    v8.i16[0] = vaddlv_u8(v8);
    if (!v8.i32[0])
      goto LABEL_39;
    goto LABEL_13;
  }
  if (a3->mChannelLayoutTag)
  {
    if (!(unsigned __int16)a3->mChannelLayoutTag)
      goto LABEL_39;
LABEL_13:
    if (v6 == 0x10000)
    {
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)a2 + 1));
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.i32[0])
        goto LABEL_25;
    }
    else if (v6)
    {
      if ((unsigned __int16)*(_DWORD *)a2)
        goto LABEL_25;
    }
    else if (*((_DWORD *)a2 + 2))
    {
      goto LABEL_25;
    }
    value_high = HIDWORD(this[1].__end_cap_.__value_);
    if (value_high >= 3)
      goto LABEL_49;
    if (value_high == 2)
      v11 = 6619138;
    else
      v11 = 6553601;
    LODWORD(v26[0]) = v11;
    v4 = (const AudioChannelLayout *const *)v26;
LABEL_25:
    if (a3->mChannelLayoutTag == 0x10000)
    {
      v13 = (uint8x8_t)vcnt_s8((int8x8_t)a3->mChannelBitmap);
      v13.i16[0] = vaddlv_u8(v13);
      mChannelLayoutTag = v13.i32[0];
    }
    else if (a3->mChannelLayoutTag)
    {
      mChannelLayoutTag = (unsigned __int16)a3->mChannelLayoutTag;
    }
    else
    {
      mChannelLayoutTag = a3->mNumberChannelDescriptions;
    }
    end_high = HIDWORD(this[3].__end_);
    if (mChannelLayoutTag)
      goto LABEL_36;
    if (end_high < 3)
    {
      if ((_DWORD)end_high == 2)
        v15 = 6619138;
      else
        v15 = 6553601;
      LODWORD(v25[0]) = v15;
      v3 = (const AudioChannelLayout *)v25;
LABEL_36:
      v16.__i_ = this[8].__begin_;
      this[8].__end_ = (std::vector<int>::pointer)v16.__i_;
      __x = -1;
      std::vector<int>::insert(this + 8, v16, end_high, &__x);
      __x = HIDWORD(this[3].__end_);
      AudioFormatProperty_ChannelMap(v4, v3, (unsigned int *)&__x, this[8].__begin_);
      acv2::Reinterleaver::BuildInverseChannelMap((acv2::Reinterleaver *)this);
      return;
    }
LABEL_49:
    std::terminate();
  }
  if (a3->mNumberChannelDescriptions)
    goto LABEL_13;
LABEL_39:
  v18 = this + 8;
  v17.__i_ = this[8].__begin_;
  this[8].__end_ = (std::vector<int>::pointer)v17.__i_;
  v19 = HIDWORD(this[3].__end_);
  __x = -1;
  std::vector<int>::insert(this + 8, v17, v19, &__x);
  v20 = HIDWORD(v18[-7].__end_cap_.__value_);
  v21 = HIDWORD(v18[-5].__end_);
  if (v20 == 1)
  {
    if ((_DWORD)v21)
      bzero(v18->__begin_, 4 * v21);
  }
  else
  {
    if (v21 >= v20)
      v21 = v20;
    else
      v21 = v21;
    if ((_DWORD)v21)
    {
      v22 = 0;
      begin = v18->__begin_;
      do
      {
        begin[v22] = v22;
        ++v22;
      }
      while (v21 != v22);
    }
  }
}

uint64_t reserveForWrite(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  return HapticSharedMemoryWriter::reserveForWrite(a1, a3, a2, a4);
}

uint64_t ___ZN14IPCAURegistrar12IsActiveHostEi_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 40);
  v2 = *(_QWORD *)(v1 + 296);
  v3 = *(_QWORD *)(v1 + 304);
  if (v2 != v3)
  {
    while (*(_DWORD *)(v2 + 16) != *(_DWORD *)(result + 48))
    {
      v2 += 24;
      if (v2 == v3)
        return result;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

uint64_t GetMediaServerRPCTimeout(void)
{
  uint64_t result;
  int AppIntegerValue;
  int v2;
  unsigned int v3;
  BOOL v4;

  result = gMediaServerTimeout;
  if (gMediaServerTimeout < 0)
  {
    v4 = 0;
    AppIntegerValue = CACFPreferencesGetAppIntegerValue(CFSTR("rpc_timeout"), CFSTR("com.apple.coreaudio"), &v4);
    if (v4)
    {
      if (AppIntegerValue)
        result = (1000 * AppIntegerValue);
      else
        result = 0x7FFFFFFFLL;
    }
    else
    {
      v2 = CACFPreferencesGetAppIntegerValue(CFSTR("rpc_timeout"), CFSTR("com.apple.coremedia"), &v4);
      v3 = 1000 * v2;
      if (!v2)
        v3 = 0x7FFFFFFF;
      if (v4)
        result = v3;
      else
        result = 9000;
    }
    gMediaServerTimeout = result;
  }
  return result;
}

void DSPGraph::Graph::configure(DSPGraph::Graph *this)
{
  _QWORD *i;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t **j;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char v22;
  char v23;
  _QWORD *k;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char v28;
  char v29;
  _QWORD *m;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  DSPGraph::Graph *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  _QWORD *v50;
  _QWORD *n;
  unint64_t v52;
  _QWORD *v53;
  float v54;
  _BOOL8 v55;
  unint64_t v56;
  unint64_t v57;
  int8x8_t prime;
  void *v59;
  void *v60;
  uint64_t v61;
  _QWORD **v62;
  unint64_t v63;
  uint8x8_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t v67;
  _QWORD *ii;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  void *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  DSPGraph::IsoGroup **v78;
  DSPGraph::IsoGroup **v79;
  DSPGraph::IsoGroup *v80;
  DSPGraph::IsoGroup **v81;
  BOOL v82;
  unsigned __int8 v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  DSPGraph::IsoGroup **v87;
  BOOL v88;
  unint64_t v89;
  unint64_t *v90;
  BOOL v91;
  DSPGraph::IsoGroup **v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  BOOL v96;
  unint64_t v97;
  DSPGraph::IsoGroup **v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  DSPGraph::IsoGroup **v104;
  DSPGraph::IsoGroup *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  DSPGraph::IsoGroup *v117;
  unint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  DSPGraph::Graph *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  uint64_t *i5;
  _QWORD *v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  _QWORD *jj;
  uint64_t v142;
  _QWORD *kk;
  uint64_t v144;
  uint64_t *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t *i4;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  unint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *mm;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *nn;
  uint64_t v193;
  uint64_t v194;
  _QWORD *i1;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  DSPGraph::RingBufferBox **v212;
  DSPGraph::RingBufferBox **v213;
  DSPGraph::RingBufferBox *v214;
  uint64_t **i2;
  uint64_t **i3;
  DSPGraph::RingBufferBox **v217;
  DSPGraph::RingBufferBox **v218;
  DSPGraph::RingBufferBox *v219;
  uint64_t *i6;
  unsigned int *v221;
  unsigned int *v222;
  float *i7;
  unsigned int *v224;
  unsigned int *v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  char *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  uint64_t *v250;
  int v251;
  DSPGraph::Graph *v252;
  std::string v253;
  std::string v254;
  std::string v255;
  std::string v256;
  void *__p[2];
  __int128 v258;
  float v259;
  std::string v260;
  __int128 v261[2];

  if (*((_BYTE *)this + 761))
    return;
  if (!*((_DWORD *)this + 172) || !*((_DWORD *)this + 173))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(v261, "configure");
    std::string::basic_string[abi:ne180100]<0>(&v260, "slice duration must be set before configure.");
    DSPGraph::ThrowException(1718775073, (__int128 *)__p, 718, v261, (__int128 *)&v260);
  }
  v3 = (char *)this + 24;
  for (i = (_QWORD *)*((_QWORD *)this + 3); i; i = (_QWORD *)*i)
  {
    v4 = i[2];
    v5 = *(_QWORD *)(v4 + 64);
    v6 = *(_QWORD *)(v4 + 72);
    if (((v6 - v5) & 0x1FFFFFFFE0) != 0)
    {
      if (v6 == v5)
      {
        v8 = 0;
LABEL_372:
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v261, "in");
        v243 = (_QWORD *)(v4 + 32);
        if (*(char *)(v4 + 55) < 0)
          v243 = (_QWORD *)*v243;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v260, v243, (uint64_t)(*(_QWORD *)(v4 + 72) - *(_QWORD *)(v4 + 64)) >> 5, v8);
        DSPGraph::ThrowException(1919837985, (__int128 *)__p, 1410, v261, (__int128 *)&v260);
      }
      v7 = 0;
      v8 = 0;
      while (1)
      {
        if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + v7) + 40))(v5 + v7))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
          std::string::basic_string[abi:ne180100]<0>(v261, "checkConnectivity");
          std::to_string(&v253, v8);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v254, "input port ", &v253);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v255, &v254, " on '");
          v239 = i[2];
          v240 = (char *)(v239 + 32);
          if (*(char *)(v239 + 55) < 0)
            v240 = *(char **)v240;
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v256, &v255, v240);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v260, &v256, "' box is not connected to anything");
          DSPGraph::ThrowException(1970168609, (__int128 *)__p, 2659, v261, (__int128 *)&v260);
        }
        ++v8;
        v4 = i[2];
        v5 = *(_QWORD *)(v4 + 64);
        v9 = (*(_QWORD *)(v4 + 72) - v5) >> 5;
        if (v8 >= v9)
          break;
        v7 += 32;
        if (v9 <= v8)
          goto LABEL_372;
      }
    }
    v10 = *(_QWORD *)(v4 + 88);
    v11 = *(_QWORD *)(v4 + 96);
    if (((v11 - v10) & 0x1FFFFFFFE0) != 0)
    {
      if (v11 == v10)
      {
        v13 = 0;
LABEL_375:
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v261, "out");
        v244 = (_QWORD *)(v4 + 32);
        if (*(char *)(v4 + 55) < 0)
          v244 = (_QWORD *)*v244;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v260, v244, (uint64_t)(*(_QWORD *)(v4 + 96) - *(_QWORD *)(v4 + 88)) >> 5, v13);
        DSPGraph::ThrowException(1919837985, (__int128 *)__p, 1418, v261, (__int128 *)&v260);
      }
      v12 = 0;
      v13 = 0;
      while (1)
      {
        if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 + v12) + 40))(v10 + v12))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
          std::string::basic_string[abi:ne180100]<0>(v261, "checkConnectivity");
          std::to_string(&v253, v13);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v254, "output port ", &v253);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v255, &v254, " on '");
          v241 = i[2];
          v242 = (char *)(v241 + 32);
          if (*(char *)(v241 + 55) < 0)
            v242 = *(char **)v242;
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v256, &v255, v242);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v260, &v256, "' box is not connected to anything");
          DSPGraph::ThrowException(1970168609, (__int128 *)__p, 2664, v261, (__int128 *)&v260);
        }
        ++v13;
        v4 = i[2];
        v10 = *(_QWORD *)(v4 + 88);
        v14 = (*(_QWORD *)(v4 + 96) - v10) >> 5;
        if (v13 >= v14)
          break;
        v12 += 32;
        if (v14 <= v13)
          goto LABEL_375;
      }
    }
  }
  for (j = (uint64_t **)*((_QWORD *)this + 8); j; j = (uint64_t **)*j)
    DSPGraph::Wire::initializeFormat((DSPGraph::Wire *)j[2]);
  *(_OWORD *)__p = 0u;
  v258 = 0u;
  v259 = 1.0;
  v252 = this;
  v16 = (_QWORD *)*((_QWORD *)this + 43);
  v17 = (unint64_t)&xmmword_18F117000;
  if (v16)
  {
    v18 = (uint64_t *)((char *)this + 216);
    do
    {
      v19 = v16[2];
      if (!std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::find<DSPGraph::Box *>((uint64_t)__p[0], (unint64_t)__p[1], v19))
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E2913010;
        *(_QWORD *)(v20 + 8) = v252;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_DWORD *)(v20 + 48) = 1065353216;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_DWORD *)(v20 + 88) = 1065353216;
        *(_OWORD *)(v20 + 96) = 0u;
        *(_OWORD *)(v20 + 112) = 0u;
        *(_DWORD *)(v20 + 128) = 1065353216;
        *(_OWORD *)(v20 + 136) = 0u;
        *(_OWORD *)(v20 + 152) = 0u;
        *(_DWORD *)(v20 + 168) = 1065353216;
        *(_QWORD *)(v20 + 256) = 0;
        *(_OWORD *)(v20 + 234) = 0u;
        *(_OWORD *)(v20 + 208) = 0u;
        *(_OWORD *)(v20 + 224) = 0u;
        *(_OWORD *)(v20 + 176) = 0u;
        *(_OWORD *)(v20 + 192) = 0u;
        *(_OWORD *)(v20 + 264) = xmmword_18F117410;
        *(_DWORD *)(v20 + 280) = 0;
        *(_OWORD *)(v20 + 288) = 0u;
        *(_OWORD *)(v20 + 304) = 0u;
        *(_QWORD *)(v20 + 320) = 0;
        *(_QWORD *)&v261[0] = v20;
        v21 = std::__hash_table<std::unique_ptr<DSPGraph::IsoGroup>,std::hash<std::unique_ptr<DSPGraph::IsoGroup>>,std::equal_to<std::unique_ptr<DSPGraph::IsoGroup>>,std::allocator<std::unique_ptr<DSPGraph::IsoGroup>>>::__emplace_unique_key_args<std::unique_ptr<DSPGraph::IsoGroup>,std::unique_ptr<DSPGraph::IsoGroup>>(v18, v20, (uint64_t *)v261);
        v23 = v22;
        if (*(_QWORD *)&v261[0])
          (*(void (**)(_QWORD))(**(_QWORD **)&v261[0] + 8))(*(_QWORD *)&v261[0]);
        if (!v23)
          __assert_rtn("createIsoGroups", "DSPGraph_Graph.cpp", 2588, "added");
        (*(void (**)(unint64_t, void **, _QWORD))(*(_QWORD *)v19 + 416))(v19, __p, v21[2]);
      }
      v16 = (_QWORD *)*v16;
    }
    while (v16);
  }
  for (k = (_QWORD *)*((_QWORD *)v252 + 48); k; k = (_QWORD *)*k)
  {
    v25 = k[2];
    if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)v25 + 712))(v25) & 1) == 0
      && !std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::find<DSPGraph::Box *>((uint64_t)__p[0], (unint64_t)__p[1], v25))
    {
      v26 = operator new();
      *(_QWORD *)v26 = &off_1E2913010;
      *(_QWORD *)(v26 + 8) = v252;
      *(_OWORD *)(v26 + 16) = 0u;
      *(_OWORD *)(v26 + 32) = 0u;
      *(_DWORD *)(v26 + 48) = 1065353216;
      *(_OWORD *)(v26 + 56) = 0u;
      *(_OWORD *)(v26 + 72) = 0u;
      *(_DWORD *)(v26 + 88) = 1065353216;
      *(_OWORD *)(v26 + 96) = 0u;
      *(_OWORD *)(v26 + 112) = 0u;
      *(_DWORD *)(v26 + 128) = 1065353216;
      *(_OWORD *)(v26 + 136) = 0u;
      *(_OWORD *)(v26 + 152) = 0u;
      *(_DWORD *)(v26 + 168) = 1065353216;
      *(_QWORD *)(v26 + 256) = 0;
      *(_OWORD *)(v26 + 234) = 0u;
      *(_OWORD *)(v26 + 208) = 0u;
      *(_OWORD *)(v26 + 224) = 0u;
      *(_OWORD *)(v26 + 176) = 0u;
      *(_OWORD *)(v26 + 192) = 0u;
      *(_OWORD *)(v26 + 264) = xmmword_18F117410;
      *(_DWORD *)(v26 + 280) = 0;
      *(_OWORD *)(v26 + 288) = 0u;
      *(_OWORD *)(v26 + 304) = 0u;
      *(_QWORD *)(v26 + 320) = 0;
      *(_QWORD *)&v261[0] = v26;
      v27 = std::__hash_table<std::unique_ptr<DSPGraph::IsoGroup>,std::hash<std::unique_ptr<DSPGraph::IsoGroup>>,std::equal_to<std::unique_ptr<DSPGraph::IsoGroup>>,std::allocator<std::unique_ptr<DSPGraph::IsoGroup>>>::__emplace_unique_key_args<std::unique_ptr<DSPGraph::IsoGroup>,std::unique_ptr<DSPGraph::IsoGroup>>((uint64_t *)v252 + 27, v26, (uint64_t *)v261);
      v29 = v28;
      if (*(_QWORD *)&v261[0])
        (*(void (**)(_QWORD))(**(_QWORD **)&v261[0] + 8))(*(_QWORD *)&v261[0]);
      if (!v29)
        __assert_rtn("createIsoGroups", "DSPGraph_Graph.cpp", 2600, "added");
      (*(void (**)(unint64_t, void **, _QWORD))(*(_QWORD *)v25 + 416))(v25, __p, v27[2]);
    }
  }
  for (m = (_QWORD *)*((_QWORD *)v252 + 29); m; m = (_QWORD *)*m)
  {
    v31 = *(_QWORD **)(m[2] + 32);
    if (v31)
    {
      v32 = 0;
      v33 = 0;
      v17 = 1;
      do
      {
        v34 = v31[2];
        v35 = *(_QWORD *)(v34 + 64);
        v36 = *(_QWORD *)(v34 + 72);
        while (v35 != v36)
        {
          if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35))
          {
            std::string::basic_string[abi:ne180100]<0>(v261, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v260, "createIsoGroups");
            v226 = (_QWORD *)(v34 + 32);
            if (*(char *)(v34 + 55) < 0)
              v226 = (_QWORD *)*v226;
            v227 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
            DSPGraph::strprintf((DSPGraph *)"box %s %s input port is not connected.", &v256, v226, v227);
            DSPGraph::ThrowException(1970168609, v261, 2612, (__int128 *)&v260, (__int128 *)&v256);
          }
          v37 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35) + 120);
          if ((v17 & 1) != 0)
          {
            v32 = *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35) + 120)
                                  + 40);
            v33 = v37;
          }
          else
          {
            if ((_DWORD)v33 != (_DWORD)v37)
            {
              std::string::basic_string[abi:ne180100]<0>(v261, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v260, "createIsoGroups");
              v230 = (_QWORD *)(v34 + 32);
              if (*(char *)(v34 + 55) < 0)
                v230 = (_QWORD *)*v230;
              v231 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
              DSPGraph::strprintf((DSPGraph *)"boxes within a group have different sample rates! group has sample rate %u, but box %s has sample rate %u on one of its input ports", &v256, v33, v230, **(double **)(v231 + 120));
              DSPGraph::ThrowException(1718444833, v261, 2620, (__int128 *)&v260, (__int128 *)&v256);
            }
            if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35) + 120) + 40) != (_DWORD)v32)
            {
              std::string::basic_string[abi:ne180100]<0>(v261, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v260, "createIsoGroups");
              v232 = (_QWORD *)(v34 + 32);
              if (*(char *)(v34 + 55) < 0)
                v232 = (_QWORD *)*v232;
              v233 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
              DSPGraph::strprintf((DSPGraph *)"boxes within a group have different block sizes! group has block size %u, but box %s has block size %u on one of its input ports", &v256, v32, v232, *(unsigned int *)(*(_QWORD *)(v233 + 120) + 40));
              DSPGraph::ThrowException(1718444833, v261, 2623, (__int128 *)&v260, (__int128 *)&v256);
            }
          }
          v17 = 0;
          v35 += 32;
        }
        v38 = *(_QWORD *)(v34 + 88);
        v39 = *(_QWORD *)(v34 + 96);
        while (v38 != v39)
        {
          if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38))
          {
            std::string::basic_string[abi:ne180100]<0>(v261, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v260, "createIsoGroups");
            v228 = (_QWORD *)(v34 + 32);
            if (*(char *)(v34 + 55) < 0)
              v228 = (_QWORD *)*v228;
            v229 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
            DSPGraph::strprintf((DSPGraph *)"box %s %s output port is not connected.", &v256, v228, v229);
            DSPGraph::ThrowException(1970168609, v261, 2629, (__int128 *)&v260, (__int128 *)&v256);
          }
          if ((v17 & 1) != 0)
          {
            v33 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38) + 120);
            v32 = *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38) + 120)
                                  + 40);
          }
          else if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 272))(v34))
          {
            if ((_DWORD)v33 != **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38)
                                                          + 120))
            {
              std::string::basic_string[abi:ne180100]<0>(v261, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v260, "createIsoGroups");
              v236 = (_QWORD *)(v34 + 32);
              if (*(char *)(v34 + 55) < 0)
                v236 = (_QWORD *)*v236;
              v237 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
              v238 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
              DSPGraph::strprintf((DSPGraph *)"boxes within a group have different sample rates! group has sample rate %u, but box %s %s has sample rate %u on one of its output ports", &v256, v33, v236, v237, **(double **)(v238 + 120));
              DSPGraph::ThrowException(1718444833, v261, 2637, (__int128 *)&v260, (__int128 *)&v256);
            }
            if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38) + 120) + 40) != (_DWORD)v32)
            {
              std::string::basic_string[abi:ne180100]<0>(v261, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v260, "createIsoGroups");
              v234 = (_QWORD *)(v34 + 32);
              if (*(char *)(v34 + 55) < 0)
                v234 = (_QWORD *)*v234;
              v235 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
              DSPGraph::strprintf((DSPGraph *)"boxes within a group have different block sizes! group has block size %u, but box %s has block size %u on one of its output ports", &v256, v32, v234, *(unsigned int *)(*(_QWORD *)(v235 + 120) + 40));
              DSPGraph::ThrowException(1718444833, v261, 2640, (__int128 *)&v260, (__int128 *)&v256);
            }
          }
          v17 = 0;
          v38 += 32;
        }
        v31 = (_QWORD *)*v31;
      }
      while (v31);
    }
  }
  *(_OWORD *)__p = 0u;
  v258 = 0u;
  v259 = 1.0;
  v40 = *(_QWORD **)v3;
  if (*(_QWORD *)v3)
  {
    do
    {
      *(_WORD *)(v40[2] + 745) = 0;
      v40 = (_QWORD *)*v40;
    }
    while (v40);
  }
  v41 = v252;
  v42 = (_QWORD *)*((_QWORD *)v252 + 29);
  if (!v42)
  {
    *((_QWORD *)v252 + 33) = *((_QWORD *)v252 + 32);
    goto LABEL_152;
  }
  v43 = 0;
  v44 = 0;
  do
  {
    v45 = v42[2];
    *(_WORD *)(v45 + 248) = 0;
    if (*(_QWORD *)(v45 + 160))
      goto LABEL_137;
    v46 = 0x9DDFEA08EB382D69 * (((8 * v45) + 8) ^ HIDWORD(v45));
    v47 = 0x9DDFEA08EB382D69 * (HIDWORD(v45) ^ (v46 >> 47) ^ v46);
    v48 = 0x9DDFEA08EB382D69 * (v47 ^ (v47 >> 47));
    if (v43)
    {
      v49 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
      v49.i16[0] = vaddlv_u8(v49);
      if (v49.u32[0] > 1uLL)
      {
        v17 = 0x9DDFEA08EB382D69 * (v47 ^ (v47 >> 47));
        if (v48 >= v43)
          v17 = v48 % v43;
      }
      else
      {
        v17 = v48 & (v43 - 1);
      }
      v50 = (_QWORD *)*((_QWORD *)__p[0] + v17);
      if (v50)
      {
        for (n = (_QWORD *)*v50; n; n = (_QWORD *)*n)
        {
          v52 = n[1];
          if (v52 == v48)
          {
            if (n[2] == v45)
              goto LABEL_137;
          }
          else
          {
            if (v49.u32[0] > 1uLL)
            {
              if (v52 >= v43)
                v52 %= v43;
            }
            else
            {
              v52 &= v43 - 1;
            }
            if (v52 != v17)
              break;
          }
        }
      }
    }
    v53 = operator new(0x18uLL);
    *v53 = 0;
    v53[1] = v48;
    v53[2] = v45;
    v54 = (float)(unint64_t)(v44 + 1);
    if (!v43 || (float)(v259 * (float)v43) < v54)
    {
      v55 = (v43 & (v43 - 1)) != 0;
      if (v43 < 3)
        v55 = 1;
      v56 = v55 | (2 * v43);
      v57 = vcvtps_u32_f32(v54 / v259);
      if (v56 <= v57)
        prime = (int8x8_t)v57;
      else
        prime = (int8x8_t)v56;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v43 = (unint64_t)__p[1];
      }
      if (*(_QWORD *)&prime > v43)
        goto LABEL_93;
      if (*(_QWORD *)&prime < v43)
      {
        v65 = vcvtps_u32_f32((float)*((unint64_t *)&v258 + 1) / v259);
        if (v43 < 3 || (v66 = (uint8x8_t)vcnt_s8((int8x8_t)v43), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
        {
          v65 = std::__next_prime(v65);
        }
        else
        {
          v67 = 1 << -(char)__clz(v65 - 1);
          if (v65 >= 2)
            v65 = v67;
        }
        if (*(_QWORD *)&prime <= v65)
          prime = (int8x8_t)v65;
        if (*(_QWORD *)&prime >= v43)
        {
          v43 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_93:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v59 = operator new(8 * *(_QWORD *)&prime);
            v60 = __p[0];
            __p[0] = v59;
            if (v60)
              operator delete(v60);
            v61 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v61++) = 0;
            while (*(_QWORD *)&prime != v61);
            v62 = (_QWORD **)v258;
            if ((_QWORD)v258)
            {
              v63 = *(_QWORD *)(v258 + 8);
              v64 = (uint8x8_t)vcnt_s8(prime);
              v64.i16[0] = vaddlv_u8(v64);
              if (v64.u32[0] > 1uLL)
              {
                if (v63 >= *(_QWORD *)&prime)
                  v63 %= *(_QWORD *)&prime;
              }
              else
              {
                v63 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v63) = &v258;
              for (ii = *v62; ii; v63 = v69)
              {
                v69 = ii[1];
                if (v64.u32[0] > 1uLL)
                {
                  if (v69 >= *(_QWORD *)&prime)
                    v69 %= *(_QWORD *)&prime;
                }
                else
                {
                  v69 &= *(_QWORD *)&prime - 1;
                }
                if (v69 != v63)
                {
                  if (!*((_QWORD *)__p[0] + v69))
                  {
                    *((_QWORD *)__p[0] + v69) = v62;
                    goto LABEL_118;
                  }
                  *v62 = (_QWORD *)*ii;
                  *ii = **((_QWORD **)__p[0] + v69);
                  **((_QWORD **)__p[0] + v69) = ii;
                  ii = v62;
                }
                v69 = v63;
LABEL_118:
                v62 = (_QWORD **)ii;
                ii = (_QWORD *)*ii;
              }
            }
            v43 = (unint64_t)prime;
            goto LABEL_122;
          }
          v73 = __p[0];
          __p[0] = 0;
          if (v73)
            operator delete(v73);
          v43 = 0;
          __p[1] = 0;
        }
      }
LABEL_122:
      if ((v43 & (v43 - 1)) != 0)
      {
        if (v48 >= v43)
          v17 = v48 % v43;
        else
          v17 = v48;
      }
      else
      {
        v17 = (v43 - 1) & v48;
      }
    }
    v70 = __p[0];
    v71 = (_QWORD *)*((_QWORD *)__p[0] + v17);
    if (v71)
    {
      *v53 = *v71;
LABEL_135:
      *v71 = v53;
      goto LABEL_136;
    }
    *v53 = v258;
    *(_QWORD *)&v258 = v53;
    v70[v17] = &v258;
    if (*v53)
    {
      v72 = *(_QWORD *)(*v53 + 8);
      if ((v43 & (v43 - 1)) != 0)
      {
        if (v72 >= v43)
          v72 %= v43;
      }
      else
      {
        v72 &= v43 - 1;
      }
      v71 = (char *)__p[0] + 8 * v72;
      goto LABEL_135;
    }
LABEL_136:
    v44 = ++*((_QWORD *)&v258 + 1);
LABEL_137:
    v42 = (_QWORD *)*v42;
  }
  while (v42);
  v74 = (_QWORD *)v258;
  v41 = v252;
  for (*((_QWORD *)v252 + 33) = *((_QWORD *)v252 + 32); v74; v74 = (_QWORD *)*v74)
    DSPGraph::IsoGroup::topologicalSort(v74[2], (char **)v252 + 32);
LABEL_152:
  while (1)
  {
    v3 = *(char **)v3;
    if (!v3)
      break;
    if (!*(_BYTE *)(*((_QWORD *)v3 + 2) + 745))
    {
      std::string::basic_string[abi:ne180100]<0>(v261, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v260, "topologicalSort");
      v75 = (char *)*((_QWORD *)v3 + 2);
      v76 = v75 + 32;
      if (v75[55] < 0)
        v76 = (_QWORD *)*v76;
      v77 = (*(uint64_t (**)(char *))(*(_QWORD *)v75 + 16))(v75);
      DSPGraph::strprintf((DSPGraph *)"%s %s box not connected", &v256, v76, v77);
      DSPGraph::ThrowException(1953460257, v261, 269, (__int128 *)&v260, (__int128 *)&v256);
    }
  }
  v78 = (DSPGraph::IsoGroup **)*((_QWORD *)v41 + 32);
  v79 = (DSPGraph::IsoGroup **)*((_QWORD *)v41 + 33);
  if (v78 == v79)
  {
    v82 = 1;
    v81 = (DSPGraph::IsoGroup **)*((_QWORD *)v41 + 32);
LABEL_167:
    *((_BYTE *)v41 + 766) = 1;
    goto LABEL_168;
  }
  do
  {
    v80 = *v78++;
    DSPGraph::IsoGroup::checkIsochronicity(v80);
  }
  while (v78 != v79);
  v78 = (DSPGraph::IsoGroup **)*((_QWORD *)v41 + 32);
  v81 = (DSPGraph::IsoGroup **)*((_QWORD *)v41 + 33);
  v82 = v78 == v81;
  if (v78 == v81)
    goto LABEL_167;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = (DSPGraph::IsoGroup **)*((_QWORD *)v41 + 32);
  do
  {
    if (*((_DWORD *)*v87 + 66))
    {
      v85 = *((unsigned int *)*v87 + 67);
      v83 |= v85 > 1;
      ++v84;
      v86 = *((unsigned int *)*v87 + 66);
    }
    ++v87;
  }
  while (v87 != v81);
  if (v84 == 1)
  {
    v88 = v85 * *((unsigned int *)v41 + 173) == v86 * *((unsigned int *)v41 + 172);
    v84 = 1;
  }
  else
  {
    v88 = 0;
  }
  if (((v84 < 2) & v83) == 1)
  {
    if (*((_BYTE *)v41 + 760))
      v96 = 0;
    else
      v96 = v88;
    *((_BYTE *)v41 + 766) = v96;
    if (!v96)
    {
LABEL_189:
      *((_BYTE *)v41 + 763) = 0;
      v92 = v81;
      v81 = v78;
      goto LABEL_190;
    }
  }
  else
  {
    *((_BYTE *)v41 + 766) = v84 < 2;
    if (v84 > 1)
      goto LABEL_189;
  }
LABEL_168:
  if (((*((_QWORD *)v41 + 36) - *((_QWORD *)v41 + 35)) & 0x7FFFFFFF8) != 8
    || ((*((_QWORD *)v41 + 39) - *((_QWORD *)v41 + 38)) & 0x7FFFFFFF8) != 8)
  {
    goto LABEL_189;
  }
  *((_BYTE *)v41 + 763) = 1;
  if (v82)
  {
    v89 = *((unsigned int *)v41 + 173);
    v90 = (unint64_t *)((char *)v41 + 696);
    *((_QWORD *)v41 + 87) = v89;
    v91 = 1;
    v92 = v81;
    goto LABEL_205;
  }
  do
  {
    v93 = *((_QWORD *)*v78 + 28);
    v94 = *((_QWORD *)*v78 + 29);
    while (v93 != v94)
    {
      v95 = *(_QWORD **)v93;
      if (((*(_QWORD *)(*(_QWORD *)v93 + 72) - *(_QWORD *)(*(_QWORD *)v93 + 64)) & 0x1FFFFFFFC0) != 0
        || ((v95[12] - v95[11]) & 0x1FFFFFFFC0) != 0
        || ((*(uint64_t (**)(_QWORD *))(*v95 + 64))(v95) & 1) == 0)
      {
        *((_BYTE *)v41 + 763) = 0;
        break;
      }
      v93 += 8;
    }
    ++v78;
  }
  while (v78 != v81);
  v81 = (DSPGraph::IsoGroup **)*((_QWORD *)v41 + 32);
  v92 = (DSPGraph::IsoGroup **)*((_QWORD *)v41 + 33);
LABEL_190:
  v89 = *((unsigned int *)v41 + 173);
  v90 = (unint64_t *)((char *)v41 + 696);
  *((_QWORD *)v41 + 87) = v89;
  v91 = v81 == v92;
  if (v81 == v92)
  {
LABEL_205:
    *((double *)v41 + 94) = 24000000.0 / (double)v89;
    v103 = 1;
    *((_QWORD *)v41 + 92) = 1;
    v97 = v89;
  }
  else
  {
    v97 = v89;
    v98 = v81;
    do
    {
      v99 = *((unsigned int *)*v98 + 66);
      if ((_DWORD)v99)
      {
        v100 = v97;
        v101 = *((unsigned int *)*v98 + 66);
        do
        {
          v102 = v101;
          v101 = v100 % v101;
          v100 = v102;
        }
        while (v101);
        v97 = v97 / v102 * v99;
        *v90 = v97;
      }
      ++v98;
    }
    while (v98 != v92);
    *((double *)v41 + 94) = 24000000.0 / (double)v97;
    v103 = 1;
    *((_QWORD *)v41 + 92) = 1;
    v104 = v81;
    do
    {
      v105 = *v104;
      v106 = *((unsigned int *)*v104 + 66);
      if ((_DWORD)v106)
      {
        v107 = v97 / v106;
        v108 = v97 / v106 * *((unsigned int *)v105 + 67);
        *((_QWORD *)v105 + 37) = v108;
        *((_QWORD *)v105 + 38) = v107;
        v109 = v103;
        if (v108)
        {
          v110 = v103;
          v111 = v108;
          do
          {
            v109 = v111;
            v111 = v110 % v111;
            v110 = v109;
          }
          while (v111);
        }
        v103 = v103 / v109 * v108;
        *((_QWORD *)v41 + 92) = v103;
      }
      ++v104;
    }
    while (v104 != v92);
  }
  v112 = v89 + v97 * *((unsigned int *)v41 + 172) - 1;
  v113 = v112 / v89;
  *((_QWORD *)v41 + 90) = v112 / v89;
  v114 = (uint64_t *)((char *)v41 + 712);
  *((_QWORD *)v41 + 89) = v112 / v89;
  v115 = v103;
  if (v112 >= v89)
  {
    v116 = v103;
    do
    {
      v115 = v113;
      v113 = v116 % v113;
      v116 = v115;
    }
    while (v113);
  }
  *((_QWORD *)v41 + 93) = v103 / v115;
  if (!v91)
  {
    do
    {
      v117 = *v81;
      if (*((_DWORD *)*v81 + 66))
      {
        v118 = *((_QWORD *)v117 + 37);
        v119 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(*v114 / v118);
        v120 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>((v118 + *v114 - 1) / v118);
        *((_DWORD *)v117 + 70) = v119;
        *((_DWORD *)v117 + 69) = v120;
        *((_QWORD *)v117 + 39) = v118 * v120;
        v121 = *((_QWORD *)v117 + 37);
        v122 = (_QWORD *)*((_QWORD *)v117 + 14);
        if (v122)
        {
          v123 = 0;
          do
          {
            v124 = *(_QWORD *)(*(_QWORD *)(v122[2] + 848) + 296);
            v125 = *((_QWORD *)v117 + 37);
            if (v124)
            {
              v126 = *((_QWORD *)v117 + 37);
              do
              {
                v125 = v124;
                v124 = v126 % v124;
                v126 = v125;
              }
              while (v124);
            }
            if (v123 <= v121 - v125)
              v123 = v121 - v125;
            v122 = (_QWORD *)*v122;
          }
          while (v122);
        }
        else
        {
          v123 = 0;
        }
        if (*((_QWORD *)v117 + 23) != *((_QWORD *)v117 + 22))
        {
          v127 = *((_BYTE *)v41 + 760)
               ? (DSPGraph::IsoGroup *)((char *)v117 + 304)
               : (DSPGraph::Graph *)((char *)v41 + 712);
          v128 = *(_QWORD *)v127;
          if (v128)
          {
            v129 = *((_QWORD *)v117 + 37);
            do
            {
              v130 = v128;
              v128 = v129 % v128;
              v129 = v130;
            }
            while (v128);
          }
          else
          {
            v130 = *((_QWORD *)v117 + 37);
          }
          v131 = v121 - v130;
          if (v123 <= v131)
            v123 = v131;
        }
      }
      else
      {
        v123 = 0;
        *(_QWORD *)((char *)v117 + 276) = 0;
        *((_QWORD *)v117 + 39) = 0;
      }
      *((_QWORD *)v117 + 40) = v123;
      *((_QWORD *)v117 + 36) = 0;
      ++v81;
    }
    while (v81 != v92);
  }
  if (!*((_BYTE *)v41 + 766))
  {
    if (*((_BYTE *)v252 + 765))
    {
      v132 = (uint64_t *)*((_QWORD *)v252 + 32);
      i5 = (uint64_t *)*((_QWORD *)v252 + 33);
      if (!*((_BYTE *)v252 + 760))
      {
        *((_QWORD *)v252 + 88) = 0;
        *((_QWORD *)v252 + 90) = *((_QWORD *)v252 + 89);
        if (v132 == i5)
        {
          v145 = v132;
        }
        else
        {
          do
          {
            v134 = (_QWORD *)*v132;
            v134[36] = 0;
            v135 = (uint64_t *)v134[22];
            v136 = (uint64_t *)v134[23];
            while (v135 != v136)
            {
              v137 = *v135++;
              *(_QWORD *)(v137 + 800) = 0;
              *(_OWORD *)(v137 + 784) = 0uLL;
            }
            v138 = (uint64_t *)v134[25];
            v139 = (uint64_t *)v134[26];
            while (v138 != v139)
            {
              v140 = *v138++;
              *(_QWORD *)(v140 + 800) = 0;
              *(_OWORD *)(v140 + 784) = 0uLL;
            }
            for (jj = (_QWORD *)v134[14]; jj; jj = (_QWORD *)*jj)
            {
              v142 = jj[2];
              *(_QWORD *)(v142 + 800) = 0;
              *(_OWORD *)(v142 + 784) = 0uLL;
            }
            for (kk = (_QWORD *)v134[19]; kk; kk = (_QWORD *)*kk)
            {
              v144 = kk[2];
              *(_QWORD *)(v144 + 800) = 0;
              *(_OWORD *)(v144 + 784) = 0uLL;
            }
            ++v132;
          }
          while (v132 != i5);
          v145 = (uint64_t *)*((_QWORD *)v252 + 32);
          v132 = (uint64_t *)*((_QWORD *)v252 + 33);
        }
        v170 = *((_QWORD *)v252 + 93);
        if (v170)
        {
          v171 = 0;
          v172 = (uint64_t *)*((_QWORD *)v252 + 35);
          v173 = (uint64_t *)*((_QWORD *)v252 + 36);
          do
          {
            if (v172 != v173)
            {
              v174 = *v114;
              v175 = v172;
              do
              {
                v177 = *v175++;
                v176 = v177;
                v178 = *(_QWORD *)(v177 + 784) + v174;
                *(_QWORD *)(v177 + 784) = v178;
                v179 = *(_QWORD *)(v177 + 800);
                if (v179 > v178)
                  v178 = v179;
                *(_QWORD *)(v176 + 800) = v178;
              }
              while (v175 != v173);
            }
            for (mm = v145; mm != v132; ++mm)
            {
              v181 = *mm;
              if (*(_DWORD *)(*mm + 264))
              {
                v182 = *(_QWORD *)(*(_QWORD *)(v181 + 8) + 720) + *(_QWORD *)(*(_QWORD *)(v181 + 8) + 704);
                v183 = *(_QWORD *)(v181 + 288);
                if (v182 <= v183)
                  v184 = 0;
                else
                  v184 = (v182 + ~v183 + *(_QWORD *)(v181 + 296)) / *(_QWORD *)(v181 + 296);
                if (v184 < *(_DWORD *)(v181 + 280) || v184 > *(_DWORD *)(v181 + 276))
                {
                  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_IsoGroup.cpp");
                  std::string::basic_string[abi:ne180100]<0>(v261, "dryRunProcess");
                  DSPGraph::strprintf((DSPGraph *)"number of blocks to process is out of range  %u   %u %u", &v260, v184, *(unsigned int *)(v181 + 280), *(unsigned int *)(v181 + 276));
                  DSPGraph::ThrowException(1718775073, (__int128 *)__p, 150, v261, (__int128 *)&v260);
                }
                v185 = *(_QWORD *)(v181 + 296) * v184;
                v186 = *(uint64_t **)(v181 + 176);
                v187 = *(uint64_t **)(v181 + 184);
                while (v186 != v187)
                {
                  v189 = *v186++;
                  v188 = v189;
                  v190 = *(_QWORD *)(v189 + 784) - v185;
                  *(_QWORD *)(v189 + 784) = v190;
                  v191 = *(_QWORD *)(v189 + 792);
                  if (v190 >= v191)
                    v190 = v191;
                  *(_QWORD *)(v188 + 792) = v190;
                }
                for (nn = *(_QWORD **)(v181 + 112); nn; nn = (_QWORD *)*nn)
                {
                  v193 = nn[2];
                  v194 = *(_QWORD *)(v193 + 784) - v185;
                  *(_QWORD *)(v193 + 784) = v194;
                  if (v194 >= *(_QWORD *)(v193 + 792))
                    v194 = *(_QWORD *)(v193 + 792);
                  *(_QWORD *)(v193 + 792) = v194;
                }
                for (i1 = *(_QWORD **)(v181 + 152); i1; i1 = (_QWORD *)*i1)
                {
                  v196 = i1[2];
                  v197 = *(_QWORD *)(v196 + 784) + v185;
                  *(_QWORD *)(v196 + 784) = v197;
                  if (*(_QWORD *)(v196 + 800) > v197)
                    v197 = *(_QWORD *)(v196 + 800);
                  *(_QWORD *)(v196 + 800) = v197;
                }
                v198 = *(uint64_t **)(v181 + 200);
                v199 = *(uint64_t **)(v181 + 208);
                while (v198 != v199)
                {
                  v201 = *v198++;
                  v200 = v201;
                  v202 = *(_QWORD *)(v201 + 784) + v185;
                  *(_QWORD *)(v201 + 784) = v202;
                  v203 = *(_QWORD *)(v201 + 800);
                  if (v203 > v202)
                    v202 = v203;
                  *(_QWORD *)(v200 + 800) = v202;
                }
                *(_QWORD *)(v181 + 288) = v183 + v185;
              }
            }
            v204 = (uint64_t *)*((_QWORD *)v252 + 38);
            v205 = (uint64_t *)*((_QWORD *)v252 + 39);
            if (v204 != v205)
            {
              v206 = *v114;
              do
              {
                v208 = *v204++;
                v207 = v208;
                v209 = *(_QWORD *)(v208 + 784) - v206;
                *(_QWORD *)(v208 + 784) = v209;
                v210 = *(_QWORD *)(v208 + 792);
                if (v209 >= v210)
                  v209 = v210;
                *(_QWORD *)(v207 + 792) = v209;
              }
              while (v204 != v205);
            }
            *((_QWORD *)v252 + 88) += *((_QWORD *)v252 + 90);
            ++v171;
          }
          while (v171 != v170);
        }
        while (v145 != v132)
        {
          v211 = (_QWORD *)*v145;
          if (*(_DWORD *)(*v145 + 264))
          {
            v212 = (DSPGraph::RingBufferBox **)v211[22];
            v213 = (DSPGraph::RingBufferBox **)v211[23];
            while (v212 != v213)
            {
              v214 = *v212++;
              DSPGraph::RingBufferBox::configureFromDryRun(v214);
            }
            for (i2 = (uint64_t **)v211[14]; i2; i2 = (uint64_t **)*i2)
              DSPGraph::RingBufferBox::configureFromDryRun((DSPGraph::RingBufferBox *)i2[2]);
            for (i3 = (uint64_t **)v211[19]; i3; i3 = (uint64_t **)*i3)
              DSPGraph::RingBufferBox::configureFromDryRun((DSPGraph::RingBufferBox *)i3[2]);
            v217 = (DSPGraph::RingBufferBox **)v211[25];
            v218 = (DSPGraph::RingBufferBox **)v211[26];
            while (v217 != v218)
            {
              v219 = *v217++;
              DSPGraph::RingBufferBox::configureFromDryRun(v219);
            }
            v211[36] = 0;
          }
          ++v145;
        }
        *((_QWORD *)v252 + 88) = 0;
        goto LABEL_328;
      }
    }
    else
    {
      v132 = (uint64_t *)*((_QWORD *)v252 + 32);
      i5 = (uint64_t *)*((_QWORD *)v252 + 33);
    }
    if (v132 != i5)
    {
      v250 = i5;
      do
      {
        v146 = (_QWORD *)*v132;
        v147 = *(unsigned int *)(*v132 + 264);
        if ((_DWORD)v147)
        {
          v251 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>((*v90 + v146[40] * v147 - 1) / *v90);
          v149 = (uint64_t *)v146[22];
          for (i4 = (uint64_t *)v146[23]; v149 != i4; ++v149)
          {
            v150 = *v149;
            v151 = *(_QWORD *)(*v149 + 88);
            if (*(_QWORD *)(*v149 + 96) == v151)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v261, "out");
              v245 = (_QWORD *)(v150 + 32);
              if (*(char *)(v150 + 55) < 0)
                v245 = (_QWORD *)*v245;
              DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v260, v245, (uint64_t)(*(_QWORD *)(v150 + 96) - *(_QWORD *)(v150 + 88)) >> 5, 0);
              DSPGraph::ThrowException(1919837985, (__int128 *)__p, 1418, v261, (__int128 *)&v260);
            }
            v152 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v151 + 40))(v151) + 120)
                             + 20);
            if (*((_BYTE *)v252 + 760))
              v153 = 1;
            else
              v153 = *((_QWORD *)v252 + 89);
            v154 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>((*((_QWORD *)v252 + 87)+ *((unsigned int *)v146 + 66)+ *((unsigned int *)v146 + 66)* (*((_QWORD *)v252 + 89) + v146[40] + (*((_QWORD *)v252 + 89) - 1) % v153)- 1)/ *((_QWORD *)v252 + 87));
            v155 = *(_QWORD *)(v150 + 88);
            if (*(_QWORD *)(v150 + 96) == v155)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v261, "out");
              v246 = (_QWORD *)(v150 + 32);
              if (*(char *)(v150 + 55) < 0)
                v246 = (_QWORD *)*v246;
              DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v260, v246, (uint64_t)(*(_QWORD *)(v150 + 96) - *(_QWORD *)(v150 + 88)) >> 5, 0);
              DSPGraph::ThrowException(1919837985, (__int128 *)__p, 1418, v261, (__int128 *)&v260);
            }
            v156 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 40))(v155);
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v150 + 680))(v150, (v154 + *(_DWORD *)(*(_QWORD *)(v156 + 120) + 20) - 1)/ *(_DWORD *)(*(_QWORD *)(v156 + 120) + 20), (v251 - 1 + v152) / v152);
          }
          v157 = (_QWORD *)v146[14];
          for (i5 = v250; v157; v157 = (_QWORD *)*v157)
          {
            v158 = v157[2];
            v159 = *(_QWORD *)(v158 + 88);
            if (*(_QWORD *)(v158 + 96) == v159)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v261, "out");
              v247 = (_QWORD *)(v158 + 32);
              if (*(char *)(v158 + 55) < 0)
                v247 = (_QWORD *)*v247;
              DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v260, v247, (uint64_t)(*(_QWORD *)(v158 + 96) - *(_QWORD *)(v158 + 88)) >> 5, 0);
              DSPGraph::ThrowException(1919837985, (__int128 *)__p, 1418, v261, (__int128 *)&v260);
            }
            v160 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v159 + 40))(v159) + 120)
                             + 20);
            v161 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>((*v90+ *((unsigned int *)v146 + 66)+ *((unsigned int *)v146 + 66)* (*(_QWORD *)(*(_QWORD *)(v158 + 848) + 312)+ v146[40]+ (unint64_t)(*v114 - 1) % *(_QWORD *)(*(_QWORD *)(v158 + 848) + 296))- 1)/ *v90);
            v162 = *(_QWORD *)(v158 + 88);
            if (*(_QWORD *)(v158 + 96) == v162)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v261, "out");
              v249 = (_QWORD *)(v158 + 32);
              if (*(char *)(v158 + 55) < 0)
                v249 = (_QWORD *)*v249;
              DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v260, v249, (uint64_t)(*(_QWORD *)(v158 + 96) - *(_QWORD *)(v158 + 88)) >> 5, 0);
              DSPGraph::ThrowException(1919837985, (__int128 *)__p, 1418, v261, (__int128 *)&v260);
            }
            v163 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v162 + 40))(v162);
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v158 + 680))(v158, (v161 + *(_DWORD *)(*(_QWORD *)(v163 + 120) + 20) - 1)/ *(_DWORD *)(*(_QWORD *)(v163 + 120) + 20), (v251 - 1 + v160) / v160);
          }
          v164 = (uint64_t *)v146[25];
          v165 = (uint64_t *)v146[26];
          while (v164 != v165)
          {
            v166 = *v164;
            v167 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>((*v90+ *((unsigned int *)v146 + 66)+ *((unsigned int *)v146 + 66) * (v146[39] + (unint64_t)(*v114 - 1) % v146[37])- 1)/ *v90);
            v168 = *(_QWORD *)(v166 + 64);
            if (*(_QWORD *)(v166 + 72) == v168)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v261, "in");
              v248 = (_QWORD *)(v166 + 32);
              if (*(char *)(v166 + 55) < 0)
                v248 = (_QWORD *)*v248;
              DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v260, v248, (uint64_t)(*(_QWORD *)(v166 + 72) - *(_QWORD *)(v166 + 64)) >> 5, 0);
              DSPGraph::ThrowException(1919837985, (__int128 *)__p, 1410, v261, (__int128 *)&v260);
            }
            v169 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 40))(v168);
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v166 + 680))(v166, (v167 + *(_DWORD *)(*(_QWORD *)(v169 + 120) + 20) - 1)/ *(_DWORD *)(*(_QWORD *)(v169 + 120) + 20), 0);
            ++v164;
          }
        }
        ++v132;
      }
      while (v132 != i5);
    }
  }
LABEL_328:
  for (i6 = (uint64_t *)*((_QWORD *)v252 + 72); i6; i6 = (uint64_t *)*i6)
  {
    v221 = (unsigned int *)i6[9];
    v222 = (unsigned int *)i6[10];
    while (v221 != v222)
    {
      if (!*((_BYTE *)i6 + 64) && *((_BYTE *)i6 + 56))
      {
        if ((unint64_t)(i6[5] - i6[4]) >> 32)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
          std::string::basic_string[abi:ne180100]<0>(v261, "setGraphPropertiesInitialValues");
          DSPGraph::strprintf((DSPGraph *)"graph property size is too large to accept: %zu bytes > %u", &v260, i6[5] - i6[4], 0xFFFFFFFFLL);
          DSPGraph::ThrowException(561211770, (__int128 *)__p, 2375, v261, (__int128 *)&v260);
        }
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)v221 + 312))(*(_QWORD *)v221, v221[2], v221[3], v221[4]);
      }
      v221 += 6;
    }
  }
  for (i7 = (float *)*((_QWORD *)v252 + 67); i7; i7 = *(float **)i7)
  {
    v224 = (unsigned int *)*((_QWORD *)i7 + 5);
    v225 = (unsigned int *)*((_QWORD *)i7 + 6);
    while (v224 != v225)
    {
      if (!*((_BYTE *)i7 + 32))
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float))(**(_QWORD **)v224 + 80))(*(_QWORD *)v224, v224[2], v224[3], v224[4], 0, i7[7]);
      v224 += 6;
    }
  }
  *((_BYTE *)v252 + 761) = 1;
}

void sub_18EE329E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  if (*(char *)(v48 - 113) < 0)
    operator delete(*(void **)(v48 - 136));
  if (*(char *)(v48 - 89) < 0)
    operator delete(*(void **)(v48 - 112));
  if (a48 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *DSPGraph::Graph::setParameter(DSPGraph::Graph *this, unsigned int a2, float a3)
{
  uint64_t *result;
  unsigned int *v5;
  unsigned int *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  result = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((_QWORD *)this + 65, a2);
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v7, "setParameter : inParamID not found");
    DSPGraph::ThrowException(1852204065, &v9, 2334, &v8, &v7);
  }
  *((float *)result + 7) = a3;
  v5 = (unsigned int *)result[5];
  v6 = (unsigned int *)result[6];
  while (v5 != v6)
  {
    result = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float))(**(_QWORD **)v5 + 80))(*(_QWORD *)v5, v5[2], v5[3], v5[4], 0, a3);
    v5 += 6;
  }
  return result;
}

void sub_18EE32D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUBox::setParameter(AudioUnit *this, AudioUnitParameterID a2, AudioUnitScope a3, AudioUnitElement a4, AudioUnitParameterValue a5, UInt32 a6)
{
  uint64_t result;
  int v11;
  AudioUnitEvent v12;
  __int128 v13;
  __int128 v14;

  result = AudioUnitSetParameter(this[106], a2, a3, a4, a5, a6);
  if ((_DWORD)result)
  {
    v11 = result;
    std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v13, "AudioUnitSetParameter");
    DSPGraph::ThrowException(v11, (__int128 *)&v12, 1707, &v14, &v13);
  }
  if (*((_BYTE *)this[1] + 767))
  {
    memset(&v12, 0, sizeof(v12));
    v12.mArgument.mParameter.mAudioUnit = this[106];
    *(_QWORD *)&v12.mArgument.mProperty.mPropertyID = __PAIR64__(a3, a2);
    v12.mArgument.mParameter.mElement = a4;
    return AUEventListenerNotify(0, 0, &v12);
  }
  return result;
}

void sub_18EE32E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

OSStatus AudioUnitSetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue inValue, UInt32 inBufferOffsetInFrames)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (***v11)(_QWORD);
  uint64_t (***v12)(_QWORD);
  uint64_t (*v13)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t, float);

  if (!inUnit)
    return -50;
  v6 = *(_QWORD *)&inBufferOffsetInFrames;
  v8 = *(_QWORD *)&inElement;
  v9 = *(_QWORD *)&inScope;
  v10 = *(_QWORD *)&inID;
  v11 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v11)
    return 560947818;
  v12 = v11;
  if (*(_WORD *)((**v11)(v11) + 38) != 24949)
    return -3000;
  v13 = *(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)((**v12)(v12) + 112) + 88);
  if (v13)
    return v13(v12[3], v10, v9, v8, v6, inValue);
  else
    return -4;
}

float DSPGraph::Graph::getParameter(DSPGraph::Graph *this, unsigned int a2)
{
  uint64_t *v2;
  unsigned int *v3;
  float result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((_QWORD *)this + 65, a2);
  if (!v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v5, "getParameter : inParamID not found");
    DSPGraph::ThrowException(1852204065, &v7, 2348, &v6, &v5);
  }
  if (!*((_BYTE *)v2 + 32))
    return *((float *)v2 + 7);
  v3 = (unsigned int *)v2[5];
  if ((unsigned int *)v2[6] == v3)
    return *((float *)v2 + 7);
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)v3 + 88))(*(_QWORD *)v3, v3[2], v3[3], v3[4]);
  return result;
}

void sub_18EE3304C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::isogroupTraceInputs(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = *(_QWORD *)(result + 64);
  v4 = *(_QWORD *)(result + 72);
  if (v3 != v4)
  {
    v7 = (char *)result;
    v8 = (float *)(a3 + 96);
    do
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      if (!v9)
      {
        std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v17, "isogroupTraceInputs");
        v14 = v7 + 32;
        if (v7[55] < 0)
          v14 = (_QWORD *)*v14;
        v15 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 16))(v7);
        DSPGraph::strprintf((DSPGraph *)"box %s %s input port is not connected.", &v16, v14, v15);
        DSPGraph::ThrowException(1970168609, &v18, 536, &v17, &v16);
      }
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
      v11 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 272))(v10);
      if (v11)
      {
        v12 = v11;
        std::__hash_table<DSPGraph::FCBox *,std::hash<DSPGraph::FCBox *>,std::equal_to<DSPGraph::FCBox *>,std::allocator<DSPGraph::FCBox *>>::__emplace_unique_key_args<DSPGraph::FCBox *,DSPGraph::FCBox * const&>(v8, v12, v12);
        *(_QWORD *)(v12 + 856) = a3;
        v10 = v12;
        v13 = 54;
      }
      else
      {
        v13 = 52;
      }
      result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 8 * v13))(v10, a2, a3);
      v3 += 32;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_18EE331DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

_QWORD *DSPGraph::Box::isogroup(DSPGraph::Box *a1, uint64_t a2, DSPGraph::IsoGroup *a3)
{
  _QWORD *result;

  result = std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::find<DSPGraph::Box *>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), (unint64_t)a1);
  if (!result)
  {
    std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box *>(a2, (unint64_t)a1, (uint64_t)a1);
    DSPGraph::IsoGroup::add(a3, a1);
    (*(void (**)(DSPGraph::Box *, uint64_t, DSPGraph::IsoGroup *))(*(_QWORD *)a1 + 424))(a1, a2, a3);
    return (_QWORD *)(*(uint64_t (**)(DSPGraph::Box *, uint64_t, DSPGraph::IsoGroup *))(*(_QWORD *)a1 + 432))(a1, a2, a3);
  }
  return result;
}

_QWORD *std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::find<DSPGraph::Box *>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  if (!a2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= a2)
      v7 = v5 % a2;
  }
  else
  {
    v7 = v5 & (a2 - 1);
  }
  v8 = *(_QWORD **)(a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= a2)
            v10 %= a2;
        }
        else
        {
          v10 &= a2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box *>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v14 = *v22;
LABEL_38:
    *v22 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v23 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_18EE335C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void DSPGraph::IsoGroup::add(DSPGraph::IsoGroup *this, DSPGraph::Box *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box * const&>((uint64_t)this + 16, (unint64_t)a2, (uint64_t)a2);
  *((_QWORD *)a2 + 2) = this;
  if (((*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) & 0x1FFFFFFFE0) == 0
    || (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)a2 + 272))(a2))
  {
    std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box * const&>((uint64_t)this + 56, (unint64_t)a2, (uint64_t)a2);
  }
  v4 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)a2 + 232))(a2);
  if (v4)
  {
    v5 = v4;
    v7 = (uint64_t *)*((_QWORD *)this + 23);
    v6 = *((_QWORD *)this + 24);
    if ((unint64_t)v7 >= v6)
    {
      v14 = *((_QWORD *)this + 22);
      v15 = ((uint64_t)v7 - v14) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v16 = v6 - v14;
      v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1))
        v17 = v15 + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v18);
      else
        v19 = 0;
      v26 = (uint64_t *)(v18 + 8 * v15);
      v27 = v18 + 8 * v19;
      *v26 = v5;
      v8 = v26 + 1;
      v29 = (char *)*((_QWORD *)this + 22);
      v28 = (char *)*((_QWORD *)this + 23);
      if (v28 != v29)
      {
        do
        {
          v30 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *--v26 = v30;
        }
        while (v28 != v29);
        v28 = (char *)*((_QWORD *)this + 22);
      }
      *((_QWORD *)this + 22) = v26;
      *((_QWORD *)this + 23) = v8;
      *((_QWORD *)this + 24) = v27;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *v7 = v4;
      v8 = v7 + 1;
    }
    *((_QWORD *)this + 23) = v8;
  }
  else
  {
    v9 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)a2 + 240))(a2);
    if (v9)
    {
      v10 = v9;
      v12 = (uint64_t *)*((_QWORD *)this + 26);
      v11 = *((_QWORD *)this + 27);
      if ((unint64_t)v12 >= v11)
      {
        v20 = *((_QWORD *)this + 25);
        v21 = ((uint64_t)v12 - v20) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v22 = v11 - v20;
        v23 = v22 >> 2;
        if (v22 >> 2 <= (unint64_t)(v21 + 1))
          v23 = v21 + 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v24);
        else
          v25 = 0;
        v31 = (uint64_t *)(v24 + 8 * v21);
        v32 = v24 + 8 * v25;
        *v31 = v10;
        v13 = v31 + 1;
        v34 = (char *)*((_QWORD *)this + 25);
        v33 = (char *)*((_QWORD *)this + 26);
        if (v33 != v34)
        {
          do
          {
            v35 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *--v31 = v35;
          }
          while (v33 != v34);
          v33 = (char *)*((_QWORD *)this + 25);
        }
        *((_QWORD *)this + 25) = v31;
        *((_QWORD *)this + 26) = v13;
        *((_QWORD *)this + 27) = v32;
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v12 = v9;
        v13 = v12 + 1;
      }
      *((_QWORD *)this + 26) = v13;
    }
  }
}

uint64_t DSPGraph::Box::asOperativeFCBox(DSPGraph::Box *this)
{
  return 0;
}

void std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box * const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v14 = *v22;
LABEL_38:
    *v22 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v23 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_18EE339E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *DSPGraph::Box::isogroupTraceOutputs(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v7;
  float *v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = *((_QWORD *)result + 11);
  v4 = *((_QWORD *)result + 12);
  if (v3 != v4)
  {
    v7 = result;
    v8 = (float *)(a3 + 136);
    do
    {
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3))
      {
        std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v16, "isogroupTraceOutputs");
        v13 = v7 + 32;
        if (v7[55] < 0)
          v13 = (_QWORD *)*v13;
        v14 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 16))(v7);
        DSPGraph::strprintf((DSPGraph *)"box %s %s output port is not connected.", &v15, v13, v14);
        DSPGraph::ThrowException(1970168609, &v17, 555, &v16, &v15);
      }
      result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      for (i = (_QWORD *)*((_QWORD *)result + 4); i; i = (_QWORD *)*i)
      {
        v10 = *(_QWORD *)(i[2] + 8);
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v10);
        if (v11)
        {
          v12 = v11;
          std::__hash_table<DSPGraph::FCBox *,std::hash<DSPGraph::FCBox *>,std::equal_to<DSPGraph::FCBox *>,std::allocator<DSPGraph::FCBox *>>::__emplace_unique_key_args<DSPGraph::FCBox *,DSPGraph::FCBox * const&>(v8, v12, v12);
          *(_QWORD *)(v12 + 848) = a3;
        }
        result = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 416))(v10, a2, a3);
      }
      v3 += 32;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_18EE33B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Wire::initializeFormat(DSPGraph::Wire *this)
{
  uint64_t result;
  uint64_t **i;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (!*((_BYTE *)this + 64))
  {
    if (!*((_QWORD *)this + 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Wire.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v11, "initializeFormat");
      v4 = *(char **)(*((_QWORD *)this + 1) + 8);
      v5 = v4 + 32;
      if (v4[55] < 0)
        v5 = (_QWORD *)*v5;
      v6 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 16))(v4);
      DSPGraph::strprintf((DSPGraph *)"box %s %s output %u is not connected", &v10, v5, v6, *(unsigned int *)(*((_QWORD *)this + 1) + 24));
      DSPGraph::ThrowException(1970168609, &v12, 108, &v11, &v10);
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Wire.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v11, "initializeFormat");
    v7 = *(char **)(*((_QWORD *)this + 1) + 8);
    v8 = v7 + 32;
    if (v7[55] < 0)
      v8 = (_QWORD *)*v8;
    v9 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 16))(v7);
    DSPGraph::strprintf((DSPGraph *)"no format was ever set on the wire from box %s %s output %u", &v10, v8, v9, *(unsigned int *)(*((_QWORD *)this + 1) + 24));
    DSPGraph::ThrowException(1718444833, &v12, 111, &v11, &v10);
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1), *((_QWORD *)this + 15));
  for (i = (uint64_t **)*((_QWORD *)this + 4); i; i = (uint64_t **)*i)
    result = (*(uint64_t (**)(uint64_t *, _QWORD))(*i[2] + 48))(i[2], *((_QWORD *)this + 15));
  return result;
}

void sub_18EE33D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUBox::setFormatOnUnit(AudioUnit *this, const AudioStreamBasicDescription *inData, AudioUnitScope a3, AudioUnitElement a4)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  int16x8_t v9;
  _QWORD *v10;
  int v11;
  _QWORD v12[2];
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16[2];
  uint64_t v17;

  result = AudioUnitSetProperty(this[106], 8u, a3, a4, inData, 0x28u);
  if ((_DWORD)result)
  {
    v11 = result;
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "setFormatOnUnit");
    v7 = (*((uint64_t (**)(AudioUnit *))*this + 2))(this);
    v8 = this + 4;
    if (*((char *)this + 55) < 0)
      v8 = (_QWORD *)*v8;
    v9 = *(int16x8_t *)&inData->mBytesPerPacket;
    v16[0] = *(_OWORD *)&inData->mSampleRate;
    v16[1] = (__int128)v9;
    v17 = *(_QWORD *)&inData->mBitsPerChannel;
    CA::StreamDescription::AsString((CA::StreamDescription *)v12, v16, *(double *)v16, v9);
    if (v13 >= 0)
      v10 = v12;
    else
      v10 = (_QWORD *)v12[0];
    DSPGraph::strprintf((DSPGraph *)"AUBox::setFormatOnUnit %s %s : %s", v16, v7, v8, v10);
    DSPGraph::ThrowException(v11, &v15, 2045, &v14, v16);
  }
  return result;
}

void sub_18EE33E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 57) < 0)
    operator delete(*(void **)(v31 - 80));
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::asGraphInput(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::OutputPort::setFormatOnUnit(DSPGraph::OutputPort *this, const AudioStreamBasicDescription *a2)
{
  return (*(uint64_t (**)(_QWORD, const AudioStreamBasicDescription *, uint64_t, _QWORD))(**((_QWORD **)this + 1)
                                                                                                 + 448))(*((_QWORD *)this + 1), a2, 2, *((unsigned int *)this + 6));
}

uint64_t DSPGraph::InputPort::setFormatOnUnit(DSPGraph::InputPort *this, const AudioStreamBasicDescription *a2)
{
  return (*(uint64_t (**)(_QWORD, const AudioStreamBasicDescription *, uint64_t, _QWORD))(**((_QWORD **)this + 1)
                                                                                                 + 448))(*((_QWORD *)this + 1), a2, 1, *((unsigned int *)this + 6));
}

uint64_t DSPGraph::Box::asGraphOutput(DSPGraph::Box *this)
{
  return 0;
}

unint64_t caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(unint64_t result)
{
  std::runtime_error *exception;

  if (HIDWORD(result))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "numerical cast overflow: could not retain value in conversion type");
  }
  return result;
}

void sub_18EE33F5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<`anonymous namespace'::FormatID,`anonymous namespace'::FormatID>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__hash_table<std::unique_ptr<DSPGraph::IsoGroup>,std::hash<std::unique_ptr<DSPGraph::IsoGroup>>,std::equal_to<std::unique_ptr<DSPGraph::IsoGroup>>,std::allocator<std::unique_ptr<DSPGraph::IsoGroup>>>::__emplace_unique_key_args<std::unique_ptr<DSPGraph::IsoGroup>,std::unique_ptr<DSPGraph::IsoGroup>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v37;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = a1 + 2;
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  v15 = *a3;
  *a3 = 0;
  i[2] = v15;
  v16 = (float)(unint64_t)(a1[3] + 1);
  v17 = *((float *)a1 + 8);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = a1[1];
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = (void *)*a1;
          *a1 = (uint64_t)v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*v14;
          if (*v14)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v26) = v14;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v32))
                  {
                    *(_QWORD *)(*a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*a1 + 8 * v32);
                  **(_QWORD **)(*a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_55:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v37 = (void *)*a1;
        *a1 = 0;
        if (v37)
          operator delete(v37);
        v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v33 = *a1;
  v34 = *(_QWORD **)(*a1 + 8 * v3);
  if (v34)
  {
    *i = *v34;
LABEL_72:
    *v34 = i;
    goto LABEL_73;
  }
  *i = *v14;
  *v14 = i;
  *(_QWORD *)(v33 + 8 * v3) = v14;
  if (*i)
  {
    v35 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_18EE343D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<DSPGraph::IsoGroup>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void DSPGraph::IsoGroup::checkIsochronicity(DSPGraph::IsoGroup *this)
{
  NSObject *v2;
  _QWORD *i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[32];

  if (DSPGraph::getLog(void)::onceToken != -1)
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8629);
  v2 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "IsoGroup::checkIsochronicity", buf, 2u);
  }
  for (i = (_QWORD *)*((_QWORD *)this + 4); i; i = (_QWORD *)*i)
  {
    v4 = (_QWORD *)i[2];
    v5 = v4[8];
    v6 = v4[9];
    while (v5 != v6)
    {
      v7 = *((_DWORD *)this + 66);
      if (v7 != **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 120))
      {
        if (*((_DWORD *)this + 66))
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_IsoGroup.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v27, "checkIsochronicity");
          v14 = *((unsigned int *)this + 66);
          v15 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 120);
          v16 = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
          DSPGraph::strprintf((DSPGraph *)"sample rates in group do not match  %u %u %s", &v26, v14, v15, v16);
          DSPGraph::ThrowException(1718444833, (__int128 *)buf, 293, &v27, &v26);
        }
        *((_DWORD *)this + 66) = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5)
                                                           + 120);
      }
      v8 = *((_DWORD *)this + 67);
      if (v8 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 120) + 40))
      {
        if (*((_DWORD *)this + 67) != 1)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_IsoGroup.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v27, "checkIsochronicity");
          v17 = *((unsigned int *)this + 67);
          v18 = *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 120)
                                + 40);
          v19 = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
          DSPGraph::strprintf((DSPGraph *)"block sizes in group do not match  %u %u %s", &v26, v17, v18, v19);
          DSPGraph::ThrowException(1718444833, (__int128 *)buf, 301, &v27, &v26);
        }
        *((_DWORD *)this + 67) = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5)
                                                       + 120)
                                           + 40);
      }
      v5 += 32;
    }
    v9 = v4[11];
    v10 = v4[12];
    while (v9 != v10)
    {
      v11 = *((_DWORD *)this + 66);
      if (v11 != **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120)
        && !(*(uint64_t (**)(_QWORD *))(*v4 + 280))(v4)
        && !(*(uint64_t (**)(_QWORD *))(*v4 + 288))(v4))
      {
        if (*((_DWORD *)this + 66))
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_IsoGroup.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v27, "checkIsochronicity");
          v23 = *((unsigned int *)this + 66);
          v24 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120);
          v25 = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
          DSPGraph::strprintf((DSPGraph *)"sample rates in group do not match  %u %u %s", &v26, v23, v24, v25);
          DSPGraph::ThrowException(1718444833, (__int128 *)buf, 311, &v27, &v26);
        }
        *((_DWORD *)this + 66) = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9)
                                                           + 120);
      }
      v12 = *((_DWORD *)this + 67);
      if (v12 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120) + 40)
        && !(*(uint64_t (**)(_QWORD *))(*v4 + 272))(v4))
      {
        if (*((_DWORD *)this + 67) != 1)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_IsoGroup.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v27, "checkIsochronicity");
          v20 = *((unsigned int *)this + 67);
          v21 = *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120)
                                + 40);
          v22 = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
          DSPGraph::strprintf((DSPGraph *)"block sizes in group do not match  %u %u %s", &v26, v20, v21, v22);
          DSPGraph::ThrowException(1718444833, (__int128 *)buf, 319, &v27, &v26);
        }
        *((_DWORD *)this + 67) = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9)
                                                       + 120)
                                           + 40);
      }
      v9 += 32;
    }
  }
  v13 = *((_DWORD *)this + 67);
  if (v13 == 1)
    v13 = (*(_DWORD *)(*((_QWORD *)this + 1) + 692)
                       + *(_DWORD *)(*((_QWORD *)this + 1) + 688) * *((_DWORD *)this + 66)
                       - 1)
        / *(_DWORD *)(*((_QWORD *)this + 1) + 692);
  *((_DWORD *)this + 68) = v13;
  *((_QWORD *)this + 36) = 0;
}

void sub_18EE34888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void DSPGraph::ThrowException(int a1, __int128 *a2, int a3, __int128 *a4, __int128 *a5)
{
  char *exception;
  char *v11;
  __int128 v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;

  exception = (char *)__cxa_allocate_exception(0x60uLL);
  v11 = exception;
  *(_QWORD *)exception = off_1E29132D8;
  *((_DWORD *)exception + 2) = a1;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(exception + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)exception + 4) = *((_QWORD *)a2 + 2);
    *((_OWORD *)exception + 1) = v12;
  }
  *((_DWORD *)v11 + 10) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v11 + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v13 = *a4;
    *((_QWORD *)v11 + 8) = *((_QWORD *)a4 + 2);
    *((_OWORD *)v11 + 3) = v13;
  }
  v14 = (std::string *)(v11 + 72);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v15 = *a5;
    *((_QWORD *)v11 + 11) = *((_QWORD *)a5 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
}

void sub_18EE349DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  std::exception::~exception((std::exception *)v1);
  __cxa_free_exception(v5);
  _Unwind_Resume(a1);
}

void sub_18EE34EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v26);
  v28 = a21;
  if (a21 == &a18)
  {
    v29 = 4;
    v28 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  MEMORY[0x193FFE460](v25, 0x10A0C40405B451CLL);

  _Unwind_Resume(a1);
}

void AudioComponentRegistrarImpl::replyWithComponentList(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  id v9;
  void (**v10)(id, void *, _QWORD, id, void *);
  uint64_t v11;
  unsigned __int8 v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  NSString *v18;
  uint64_t v19;
  char v20;

  v18 = a3;
  v9 = a4;
  v10 = a5;
  v11 = 208;
  if (a2)
    v11 = 168;
  v19 = a1 + v11;
  v20 = 0;
  if (v18 && *(_QWORD *)(a1 + 256) && (v12 = atomic_load((unsigned __int8 *)(a1 + 2)), (v12 & 1) != 0))
  {
    v17 = *(os_unfair_lock_s **)(a1 + 256);
    os_unfair_lock_lock(v17);
    AUExtensionScanner::getExtensionComponentList((AUExtensionScanner *)&v17[2], v18);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
      os_unfair_lock_unlock(v17);
  }
  else
  {
    v13 = 0;
  }
  PurgeableDataWrapper::accessor::data((PurgeableDataWrapper::accessor *)&v19);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
  {
    v15 = atomic_load((unsigned __int8 *)(a1 + 2));
    v16 = v15 & 1;
  }
  else
  {
    v16 = 0;
  }
  v10[2](v10, v14, v16, v9, v13);

  *(_BYTE *)(a1 + 1) = 1;
  if (v20)
    objc_msgSend(*(id *)(v19 + 32), "endContentAccess");

}

void sub_18EE350D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, char a12)
{
  void *v12;
  void *v13;
  os_unfair_lock_s *v14;

  if (v14)
    os_unfair_lock_unlock(v14);
  if (a12)
    objc_msgSend(*(id *)(a11 + 32), "endContentAccess");

  _Unwind_Resume(a1);
}

id PurgeableDataWrapper::accessor::data(PurgeableDataWrapper::accessor *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  if (!*((_BYTE *)this + 8))
  {
    v2 = *(_QWORD *)this;
    v3 = *(void **)(*(_QWORD *)this + 32);
    if (v3)
    {
      if ((objc_msgSend(v3, "beginContentAccess") & 1) != 0)
      {
LABEL_7:
        *((_BYTE *)this + 8) = 1;
        return *(id *)(*(_QWORD *)this + 32);
      }
      v2 = *(_QWORD *)this;
    }
    v4 = *(_QWORD *)(v2 + 24);
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
    v5 = (void *)MEMORY[0x1E0CB38D0];
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "dataWithData:", v6);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = *(void **)(*(_QWORD *)this + 32);
    *(_QWORD *)(*(_QWORD *)this + 32) = v7;

    goto LABEL_7;
  }
  return *(id *)(*(_QWORD *)this + 32);
}

void sub_18EE351D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ConnectionInfo::_canUseExtensions(ConnectionInfo *this)
{
  id WeakRetained;
  void *v2;
  _BOOL8 v3;
  __SecTask *v4;
  __SecTask *v5;
  const __CFBoolean *v6;
  const __CFBoolean *v7;
  CFTypeID v8;
  audit_token_t v10;
  audit_token_t token;

  if (!this->mLinkedSDKRequiresEntitlement)
    return 1;
  WeakRetained = objc_loadWeakRetained((id *)&this->mConnection);
  v2 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "auditToken");
  else
    memset(&v10, 0, sizeof(v10));
  token = v10;
  v4 = SecTaskCreateWithAuditToken(0, &token);
  v5 = v4;
  if (v4)
  {
    v6 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v4, CFSTR("inter-app-audio"), 0);
    v7 = v6;
    if (v6)
    {
      v8 = CFGetTypeID(v6);
      v3 = v8 == CFBooleanGetTypeID() && CFBooleanGetValue(v7) != 0;
      CFRelease(v7);
    }
    else
    {
      v3 = 0;
    }
    CFRelease(v5);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_18EE352CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id std::__function::__func<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_1,std::allocator<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_1>,NSData * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  void ***v2;
  uint64_t v3;
  void *v4;
  AudioComponentVector v6;
  __int128 v7;
  int v8;
  void **v9[3];
  void ***v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v7 = *(_OWORD *)"psua";
  v8 = 0;
  memset(&v6, 0, 24);
  std::vector<std::shared_ptr<APComponent>>::__init_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>((char *)&v6, *(_QWORD **)(v1 + 136), *(_QWORD **)(v1 + 144), (uint64_t)(*(_QWORD *)(v1 + 144) - *(_QWORD *)(v1 + 136)) >> 4);
  v6.mSorted = *(_BYTE *)(v1 + 160);
  v9[0] = (void **)&off_1E2915A38;
  v9[1] = (void **)&v7;
  v10 = v9;
  AudioComponentVector::remove_and_erase_if ((__int128 **)&v6, (uint64_t)v9);
  v2 = v10;
  if (v10 == v9)
  {
    v3 = 4;
    v2 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v3 = 5;
LABEL_5:
    ((void (*)(void))(*v2)[v3])();
  }
  AudioComponentVector::serialized(&v6);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = (void **)&v6;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](v9);
  return v4;
}

void sub_18EE35400(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = v1;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

void AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentMgr_RegistrarService *this, NSData *a2, char a3, NSData *a4, NSArray *a5)
{
  NSData *v9;
  NSArray *v10;
  NSData *v11;
  NSArray *v12;
  int v13;
  void ***v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  APComponent **v20;
  char *v21;
  char *begin;
  char *end;
  void *v24;
  BOOL v25;
  char v26;
  AudioComponentVector v27;
  AudioComponentVector v28;
  AudioComponentVector v29;
  char *v30;
  char *v31;
  uint64_t v32;
  BOOL mSorted;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  AudioComponentVector *v38;
  _QWORD v39[3];
  _QWORD *v40;
  void **v41[3];
  void ***v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = a4;
  v10 = a5;
  AudioComponentVector::createWithSerializedData(&v27, a2);
  v11 = v9;
  v12 = v10;
  v13 = *((unsigned __int8 *)this + 97);
  *((_BYTE *)this + 97) = 1;
  if (!v27.mSorted)
    __assert_rtn("mergeServerRegistrations", "AudioComponentPluginMgr.mm", 653, "currentServerRegistrations.sorted()");
  v34 = 0;
  v35 = 0;
  v37 = 0;
  v36 = 0;
  v41[0] = (void **)&off_1E2915EB8;
  v41[1] = (void **)this;
  v41[2] = (void **)&v34;
  v42 = v41;
  AudioComponentVector::remove_and_erase_if ((__int128 **)&v27, (uint64_t)v41);
  v14 = v42;
  if (v42 == v41)
  {
    v15 = 4;
    v14 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_7;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_7:
  v30 = 0;
  v31 = 0;
  v32 = 0;
  std::vector<std::shared_ptr<APComponent>>::__init_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>((char *)&v30, v27.__begin_, (_QWORD *)v27.__end_, ((char *)v27.__end_ - (char *)v27.__begin_) >> 4);
  v16 = 126 - 2 * __clz((v31 - v30) >> 4);
  mSorted = v27.mSorted;
  if (v31 == v30)
    v17 = 0;
  else
    v17 = v16;
  std::__introsort<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *,false>((uint64_t *)v30, v31, v17, 1);
  v34 = 0;
  v35 = 0;
  v37 = 0;
  v36 = 0;
  v39[0] = &off_1E2915F00;
  v39[1] = &v34;
  v40 = v39;
  AudioComponentVector::remove_and_erase_if ((__int128 **)&v30, (uint64_t)v39);
  v18 = v40;
  if (v40 == v39)
  {
    v19 = 4;
    v18 = v39;
    goto LABEL_14;
  }
  if (v40)
  {
    v19 = 5;
LABEL_14:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  v20 = (APComponent **)v30;
  v21 = v31;
  while (v20 != (APComponent **)v21)
  {
    AudioComponentVector::remove(&v27, *v20);
    v20 += 2;
  }
  if ((a3 & 1) != 0)
  {
    begin = (char *)v27.__begin_;
    end = (char *)v27.__end_;
    while (begin != end)
    {
      if (*(_DWORD *)(*(_QWORD *)begin + 32) == 3)
        *(_DWORD *)(*(_QWORD *)begin + 48) |= 1u;
      begin += 16;
    }
  }
  (*(void (**)(AudioComponentMgr_RegistrarService *))(*(_QWORD *)this + 128))(this);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = v24 != 0;

  v26 = !v25;
  if (!v12)
    v26 = 1;
  if ((v26 & 1) == 0)
  {
    (*(void (**)(AudioComponentVector *__return_ptr, AudioComponentMgr_RegistrarService *, NSArray *))(*(_QWORD *)this + 136))(&v29, this, v12);
    AudioComponentVector::append(&v27, (AudioComponentVector *)v29.__begin_, (const AudioComponentVector *)v29.__end_);
    v28.__begin_ = &v29;
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  }
  AudioComponentVector::subtract(&v29, &v27, (AudioComponentVector *)((char *)this + 112));
  AudioComponentVector::subtract(&v28, (AudioComponentVector *)((char *)this + 112), &v27);
  if (v13 || gAudioComponentLogCategory && (*(_BYTE *)(gAudioComponentLogCategory + 8) & 1) != 0)
  {
    AudioComponentVector::showAll(&v29, "addedComponents");
    AudioComponentVector::showAll(&v28, "removedComponents");
  }
  AudioComponentMgr_Base::addAndRemoveComponents((char **)this, &v29, (const AudioComponentVector *)v28.__begin_, (const AudioComponentVector *)v28.__end_);
  if ((AudioComponentVector *)((char *)this + 112) != &v27)
    std::vector<std::shared_ptr<APComponent>>::__assign_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>((uint64_t)this + 112, (uint64_t *)v27.__begin_, (uint64_t *)v27.__end_, ((char *)v27.__end_ - (char *)v27.__begin_) >> 4);
  *((_BYTE *)this + 136) = v27.mSorted;
  if (v13)
    dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_72);
  v38 = &v28;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v28.__begin_ = &v29;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  v29.__begin_ = &v30;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);

  v41[0] = (void **)&v27;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](v41);

}

void sub_18EE35800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void ****a13, uint64_t a14, uint64_t a15, uint64_t a16, void ***a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  a13 = &a17;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a17 = &a21;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);

  a21 = (void **)&a9;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a21);

  _Unwind_Resume(a1);
}

uint64_t AudioComponentVector::remove_and_erase_if (__int128 **a1, uint64_t a2)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;

  v4 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
LABEL_15:
    v6 = (uint64_t)v4;
    return std::vector<std::shared_ptr<APComponent>>::erase((uint64_t)a1, v6, (uint64_t)a1[1]);
  }
  v6 = (uint64_t)a1[1];
  while (1)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (!v7)
      goto LABEL_17;
    if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 48))(v7, *(_QWORD *)v4) & 1) != 0)
      break;
    if (++v4 == v3)
      return std::vector<std::shared_ptr<APComponent>>::erase((uint64_t)a1, v6, (uint64_t)a1[1]);
  }
  if (v4 != v3)
  {
    v8 = v4 + 1;
    if (v4 + 1 != v3)
    {
      v6 = (uint64_t)v4;
      while (1)
      {
        v9 = *(_QWORD *)(a2 + 24);
        if (!v9)
          break;
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 48))(v9, *(_QWORD *)v8) & 1) == 0)
        {
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v6, v8);
          v6 += 16;
        }
        if (++v8 == v3)
          return std::vector<std::shared_ptr<APComponent>>::erase((uint64_t)a1, v6, (uint64_t)a1[1]);
      }
LABEL_17:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    goto LABEL_15;
  }
  return std::vector<std::shared_ptr<APComponent>>::erase((uint64_t)a1, v6, (uint64_t)a1[1]);
}

uint64_t std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1>,BOOL ()(APComponent &)>::operator()(uint64_t a1, uint64_t a2)
{
  int v2;
  _DWORD *v3;
  _OWORD *v5;
  __int128 v6;

  v2 = *(_DWORD *)(a2 + 32);
  if (v2 == 1)
  {
    v5 = *(_OWORD **)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 36);
    *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)(a2 + 48);
    *v5 = v6;
  }
  else if (v2 == 4)
  {
    v3 = *(_DWORD **)(a1 + 8);
    if (*(_DWORD *)(a2 + 36) == *v3 && *(_DWORD *)(a2 + 40) == v3[1] && *(_DWORD *)(a2 + 44) == v3[2])
      return 0;
  }
  return 1;
}

__n128 std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0>,BOOL ()(APComponent &)>::operator()(uint64_t a1, uint64_t a2)
{
  int v4;
  void *v5;
  __n128 result;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 32);
  if ((v4 - 2) < 2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8));
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
      goto LABEL_18;
  }
  else if (v4 == 1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v8 = *(id *)(v7 + 168);
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v14;
      while (2)
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v14 != v10)
            objc_enumerationMutation(v8);
          if (objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * i), "intValue", (_QWORD)v13) == 16777228)
          {

            goto LABEL_18;
          }
        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v9)
          continue;
        break;
      }
    }

  }
  else if (v4 != 4)
  {
LABEL_18:
    v12 = *(_QWORD *)(a1 + 16);
    result = *(__n128 *)(a2 + 36);
    *(_OWORD *)(v12 + 12) = *(_OWORD *)(a2 + 48);
    *(__n128 *)v12 = result;
  }
  return result;
}

void sub_18EE35C20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id AudioComponentMgr_NSExtension::extensionServiceIdentifier(AudioComponentMgr_NSExtension *this)
{
  return (id)AudioComponentMgr_NSExtension::sExtensionServiceIdentifier;
}

uint64_t std::vector<std::shared_ptr<APComponent>>::erase(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != a3)
  {
    v3 = a2;
    v4 = result;
    result = a3;
    v5 = *(_QWORD *)(v4 + 8);
    if (a3 != v5)
    {
      v6 = 16 * ((a3 - a2) >> 4);
      do
      {
        std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v3, (__int128 *)(v3 + v6));
        v3 += 16;
      }
      while (v3 + v6 != v5);
      result = *(_QWORD *)(v4 + 8);
    }
    while (result != v3)
      result = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](result - 16);
    *(_QWORD *)(v4 + 8) = v3;
  }
  return result;
}

void AudioComponentVector::subtract(AudioComponentVector *this, AudioComponentVector *a2, AudioComponentVector *a3)
{
  _BYTE *end;
  _BYTE *begin;
  int64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  AudioComponentVector *v12;
  AudioComponentVector *v13;
  AudioComponentVector *v14;
  int v15;
  AudioComponentVector **v16;
  AudioComponentVector *v17;
  char *v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *value;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v35;
  int64x2_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  AudioComponentVector *v41;
  AudioComponentVector *v42;
  int64x2_t v43;
  char *v44;
  __compressed_pair<std::shared_ptr<APComponent> *, std::allocator<std::shared_ptr<APComponent>>> *p_end_cap;

  AudioComponentVector::sort(a2);
  AudioComponentVector::sort(a3);
  begin = a2->__begin_;
  end = a2->__end_;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  this->__begin_ = 0;
  v42 = this;
  v43.i8[0] = 0;
  v8 = end - begin;
  if (end == begin)
  {
    v12 = 0;
    this->mSorted = 1;
    v42 = (AudioComponentVector *)a3->__begin_;
    v41 = 0;
    goto LABEL_12;
  }
  std::vector<std::shared_ptr<APComponent>>::__vallocate[abi:ne180100](this, v8 >> 4);
  v9 = (char *)this->__end_;
  bzero(v9, v8);
  this->__end_ = &v9[v8];
  v11 = (uint64_t *)a2->__begin_;
  v10 = (uint64_t *)a2->__end_;
  v12 = (AudioComponentVector *)this->__begin_;
  this->mSorted = 1;
  v13 = (AudioComponentVector *)a3->__end_;
  v42 = (AudioComponentVector *)a3->__begin_;
  v41 = v12;
  if (v11 == v10)
    goto LABEL_12;
  while (1)
  {
    v14 = v42;
    if (v42 == v13)
      break;
    if ((APComponent::Key::sortCompare((_DWORD *)(*v11 + 36), (_DWORD *)v42->__begin_ + 9, 0) & 0x80000000) != 0)
    {
      v14 = v41;
      std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v41, *v11, v11[1]);
      v16 = &v41;
    }
    else
    {
      v15 = APComponent::Key::sortCompare((_DWORD *)v14->__begin_ + 9, (_DWORD *)(*v11 + 36), 0);
      v16 = &v42;
      if (v15 < 0)
        goto LABEL_9;
    }
    v11 += 2;
LABEL_9:
    *v16 = (AudioComponentVector *)&v14->__end_cap_;
    if (v11 == v10)
    {
      v12 = v41;
      goto LABEL_12;
    }
  }
  v12 = v41;
  if (v11 == v10)
  {
LABEL_12:
    v17 = v12;
    goto LABEL_13;
  }
  v38 = 0;
  do
  {
    v39 = &v11[v38];
    std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((void **)((char *)&v12->__begin_ + v38 * 8), v11[v38], v11[v38 + 1]);
    v38 += 2;
  }
  while (v39 + 2 != v10);
  v17 = (AudioComponentVector *)((char *)v12 + v38 * 8);
LABEL_13:
  v18 = (char *)v17;
  v19 = this->__begin_;
  v20 = (char *)this->__end_;
  v21 = v18 - (char *)this->__begin_;
  v22 = v21 >> 4;
  v23 = (v20 - (char *)this->__begin_) >> 4;
  if (v21 >> 4 <= v23)
  {
    if (v22 < v23)
    {
      v37 = &v19[16 * v22];
      while (v20 != v37)
      {
        v20 -= 16;
        std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v20);
      }
      this->__end_ = v37;
    }
  }
  else
  {
    v24 = v22 - v23;
    value = this->__end_cap_.__value_;
    if (v22 - v23 <= (value - v20) >> 4)
    {
      bzero(this->__end_, 16 * v24);
      this->__end_ = &v20[16 * v24];
    }
    else
    {
      if (v21 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      p_end_cap = &this->__end_cap_;
      v26 = value - v19;
      if (v26 >> 3 > v22)
        v22 = v26 >> 3;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v22;
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v27);
      v29 = &v28[16 * v23];
      v31 = &v28[16 * v30];
      v44 = v31;
      bzero(v29, 16 * v24);
      v32 = &v29[16 * v24];
      v43.i64[1] = (uint64_t)v32;
      v34 = this->__begin_;
      v33 = this->__end_;
      if (v33 == this->__begin_)
      {
        v36 = vdupq_n_s64((unint64_t)v33);
      }
      else
      {
        do
        {
          v35 = *((_OWORD *)v33 - 1);
          v33 -= 2;
          *((_OWORD *)v29 - 1) = v35;
          v29 -= 16;
          *v33 = 0;
          v33[1] = 0;
        }
        while (v33 != v34);
        v36 = *(int64x2_t *)&this->__begin_;
        v32 = (char *)v43.i64[1];
        v31 = v44;
      }
      this->__begin_ = v29;
      this->__end_ = v32;
      v43 = v36;
      v40 = (char *)this->__end_cap_.__value_;
      this->__end_cap_.__value_ = v31;
      v44 = v40;
      v42 = (AudioComponentVector *)v36.i64[0];
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v42);
    }
  }
}

void sub_18EE35F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void AudioComponentVector::sort(AudioComponentVector *this)
{
  uint64_t *begin;
  uint64_t *end;
  unint64_t v4;
  uint64_t v5;

  if (!this->mSorted)
  {
    begin = (uint64_t *)this->__begin_;
    end = (uint64_t *)this->__end_;
    v4 = 126 - 2 * __clz(((char *)end - (char *)begin) >> 4);
    if (end == begin)
      v5 = 0;
    else
      v5 = v4;
    std::__introsort<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *,false>(begin, end, v5, 1);
    this->mSorted = 1;
  }
}

void std::vector<std::shared_ptr<APComponent>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void AudioComponentMgr_Base::addAndRemoveComponents(char **this, const AudioComponentVector *a2, const AudioComponentVector *a3, const AudioComponentVector *a4)
{
  const AudioComponentVector *v7;
  char *SortedPosition;
  uint64_t v9;
  __int128 *v10;
  _DWORD *v11;
  _DWORD *begin;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *end;
  uint64_t *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  if (a3 != a4)
  {
    v7 = a3;
    do
    {
      SortedPosition = AudioComponentVector::findSortedPosition(this[2], this[3], (__int128 *)((char *)v7->__begin_ + 36));
      v9 = (uint64_t)this[3];
      if ((char *)v9 != SortedPosition)
      {
        v10 = (__int128 *)SortedPosition;
        v11 = *(_DWORD **)SortedPosition;
        begin = v7->__begin_;
        if (*(_DWORD *)(*(_QWORD *)SortedPosition + 36) == *((_DWORD *)v7->__begin_ + 9)
          && v11[10] == begin[10]
          && v11[11] == begin[11]
          && v11[14] == begin[14])
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)SortedPosition + 1);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldxr(p_shared_owners);
            while (__stxr(v15 + 1, p_shared_owners));
            v9 = (uint64_t)this[3];
          }
          if (SortedPosition + 16 != (char *)v9)
          {
            do
              v16 = (uint64_t)v10++;
            while (std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v16, v10) + 32 != v9);
            v9 = (uint64_t)this[3];
          }
          while ((__int128 *)v9 != v10)
          {
            v9 -= 16;
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v9);
          }
          this[3] = (char *)v10;
          (*((void (**)(char **, _DWORD *))*this + 13))(this, v11);
          if (v13)
          {
            v17 = (unint64_t *)&v13->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
        }
      }
      v7 = (const AudioComponentVector *)((char *)v7 + 16);
    }
    while (v7 != a4);
  }
  v20 = (uint64_t *)a2->__begin_;
  end = (uint64_t *)a2->__end_;
  while (v20 != end)
  {
    AudioComponentMgr_Base::_addComponent(this, v20);
    v20 += 2;
  }
  v21 = this + 1;
  v22 = this[2];
  v23 = this[3];
  while (v22 != v23)
  {
    v24 = *(_QWORD *)v22;
    v22 += 16;
    *v21 = v24;
    v21 = (_QWORD *)(v24 + 24);
  }
  *v21 = 0;
}

void sub_18EE36214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AudioComponentVector::createWithSerializedData(AudioComponentVector *this, NSData *a2)
{
  NSData *v3;
  uint64_t v4;
  id v5;
  os_log_t v6;
  char v7;
  _QWORD *v8;
  NSObject *v9;
  id v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v10 = 0;
  objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v3, &v10);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = v10;
  if (v5)
  {
    if (gAudioComponentLogCategory)
    {
      v6 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v8 = (_QWORD *)operator new();
      v8[1] = 0;
      v6 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v8 = v6;
      gAudioComponentLogCategory = (uint64_t)v8;
    }
    v9 = objc_retainAutorelease(v6);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v12 = "AudioComponentVector.mm";
      v13 = 1024;
      v14 = 360;
      v15 = 2112;
      v16 = v5;
      _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error deserializing AudioComponentVector: %@", buf, 0x1Cu);
    }
    *(_OWORD *)&this->__begin_ = 0u;
    *(_OWORD *)&this->__end_cap_.__value_ = 0u;
    v7 = 1;
  }
  else
  {
    *(_BYTE *)(v4 + 32) = 1;
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
    std::vector<std::shared_ptr<APComponent>>::__init_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>((char *)this, *(_QWORD **)(v4 + 8), *(_QWORD **)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 4);
    v7 = *(_BYTE *)(v4 + 32);
  }
  this->mSorted = v7;

}

void sub_18EE363D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void AudioComponentVector::showAll(AudioComponentVector *this, const char *a2)
{
  void **p_vtable;
  os_log_t v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t v8;
  const AudioClassDescription **begin;
  void *end;
  uint64_t v11;
  const __CFString *v12;
  os_log_t *v13;
  os_log_t v14;
  _QWORD *v15;
  NSObject *v16;
  const char *v17;
  std::string *p_p;
  OSType mType;
  OSType mManufacturer;
  const void *v21;
  const __CFString *v22;
  OSType v23;
  const __CFString *v24;
  const void *v25;
  std::string __p;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  OSType v38;
  __int16 v39;
  OSType v40;
  __int16 v41;
  OSType v42;
  __int16 v43;
  const __CFString *v44;
  __int16 v45;
  const __CFString *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  p_vtable = AUPBServer.vtable;
  if (gAudioComponentLogCategory)
  {
    v5 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v6 = (_QWORD *)operator new();
    v6[1] = 0;
    v5 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v6 = v5;
    gAudioComponentLogCategory = (uint64_t)v6;
  }
  v7 = objc_retainAutorelease(v5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = (unint64_t)((char *)this->__end_ - (char *)this->__begin_) >> 4;
    *(_DWORD *)buf = 136315906;
    v28 = "AudioComponentVector.mm";
    v29 = 1024;
    v30 = 157;
    v31 = 2080;
    v32 = a2;
    v33 = 1024;
    v34 = v8;
    _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s: %d AudioComponents:", buf, 0x22u);
  }
  begin = (const AudioClassDescription **)this->__begin_;
  end = this->__end_;
  if (this->__begin_ != end)
  {
    do
    {
      v11 = (*(uint64_t (**)(const AudioClassDescription *))(*(_QWORD *)&(*begin)->mType + 80))(*begin);
      if (v11)
      {
        v12 = *(const __CFString **)(v11 + 160);
        if (v12)
        {
          CFRetain(*(CFTypeRef *)(v11 + 160));
          CFRelease(v12);
        }
      }
      else
      {
        v12 = &stru_1E2923288;
      }
      v13 = (os_log_t *)p_vtable[471];
      if (v13)
      {
        v14 = *v13;
      }
      else
      {
        v15 = (_QWORD *)operator new();
        v15[1] = 0;
        v14 = os_log_create("com.apple.coreaudio", "audiocomp");
        *v15 = v14;
        p_vtable[471] = v15;
      }
      v16 = objc_retainAutorelease(v14);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        v17 = (const char *)*begin;
        to_string(*begin + 3, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        mType = (*begin)[4].mType;
        mManufacturer = (*begin)[4].mManufacturer;
        v23 = (*begin)[5].mType;
        APComponent::name((APComponent *)&v25, *(const void **)&(*begin)[5].mSubType);
        v21 = v25;
        if (v25)
        {
          APComponent::name((APComponent *)&v24, *(const void **)&(*begin)[5].mSubType);
          v22 = v24;
          *(_DWORD *)buf = 136317442;
          v28 = "AudioComponentVector.mm";
          v29 = 1024;
          v30 = 168;
          v31 = 2048;
          v32 = v17;
          v33 = 1040;
          v34 = 28;
          v35 = 2080;
          v36 = p_p;
          v37 = 1024;
          v38 = mType;
          v39 = 1024;
          v40 = mManufacturer;
          v41 = 1024;
          v42 = v23;
          v43 = 2112;
          v44 = v24;
          v45 = 2112;
          v46 = v12;
          _os_log_impl(&dword_18EE07000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d   %p: %-28.28s f%08x v%08x %3d %@ %@", buf, 0x52u);
          if (v22)
            CFRelease(v22);
          CFRelease(v21);
          p_vtable = (void **)(AUPBServer + 24);
        }
        else
        {
          *(_DWORD *)buf = 136317442;
          v28 = "AudioComponentVector.mm";
          v29 = 1024;
          v30 = 168;
          v31 = 2048;
          v32 = v17;
          v33 = 1040;
          v34 = 28;
          v35 = 2080;
          v36 = p_p;
          v37 = 1024;
          v38 = mType;
          v39 = 1024;
          v40 = mManufacturer;
          v41 = 1024;
          v42 = v23;
          v43 = 2112;
          v44 = &stru_1E2923288;
          v45 = 2112;
          v46 = v12;
          _os_log_impl(&dword_18EE07000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d   %p: %-28.28s f%08x v%08x %3d %@ %@", buf, 0x52u);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

      begin += 2;
    }
    while (begin != end);
  }
}

void sub_18EE367E0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

id AudioComponentVector::serialized(AudioComponentVector *this)
{
  _ACComponentVector *v2;
  void *v3;
  id v4;
  os_log_t v5;
  _QWORD *v6;
  NSObject *v7;
  id v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  AudioComponentVector::sort(this);
  v2 = -[_ACComponentVector initWithVector:]([_ACComponentVector alloc], "initWithVector:", this);
  v9 = 0;
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v2, 1, &v9);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v9;
  if (v4)
  {
    if (gAudioComponentLogCategory)
    {
      v5 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v6 = (_QWORD *)operator new();
      v6[1] = 0;
      v5 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v6 = v5;
      gAudioComponentLogCategory = (uint64_t)v6;
    }
    v7 = objc_retainAutorelease(v5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v11 = "AudioComponentVector.mm";
      v12 = 1024;
      v13 = 349;
      v14 = 2112;
      v15 = v4;
      _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error serializing AudioComponentVector: %@", buf, 0x1Cu);
    }
  }

  return v3;
}

void sub_18EE3698C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EE369FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void DSPGraph::Interpreter::compileText(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, __int128 **a4@<X3>, uint64_t *a5@<X8>)
{
  char *v10;
  uint64_t v11;
  char *v12;
  __int128 *v13;
  __int128 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *i;
  const char **v18;
  int v19;
  std::string *v20;
  DSPGraph *v21;
  int v22;
  std::string *v23;
  unint64_t *v24;
  char *v25;
  unsigned int v26;
  std::string *v28;
  uint64_t v29;
  _WORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  const char *v36;
  const char *v37;
  char v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  unsigned __int16 *v43;
  int v44;
  int v45;
  unsigned __int8 *v47;
  uint64_t v48;
  int v49;
  BOOL *v51;
  _DWORD *v52;
  uint64_t v53;
  int v54;
  BOOL *v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  unsigned __int8 *v61;
  int v62;
  int v63;
  const char **v65;
  const char *v66;
  float v67;
  char *v68;
  float v69;
  const char *v70;
  char v71;
  unsigned __int16 *v72;
  int v73;
  int v74;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  char *v89;
  char *v90;
  const char **v91;
  const char **v92;
  const char **v93;
  char *v94;
  char v95;
  std::string::value_type v96;
  int v97;
  int v98;
  unint64_t v99;
  std::string::size_type v100;
  std::string::size_type v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t *v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  uint64_t v108;
  DSPGraph::Wire *v109;
  uint64_t *v110;
  DSPGraph::Wire *v111;
  std::string *v112;
  unint64_t v113;
  unsigned __int8 *v115;
  unint64_t v116;
  char *v117;
  std::string::value_type *v118;
  unint64_t v119;
  char v120;
  char *v121;
  std::string::size_type v122;
  std::string::size_type v123;
  std::string::size_type v124;
  int64_t v125;
  std::string::size_type v126;
  size_t v127;
  std::string::size_type v128;
  std::string::size_type v129;
  _BYTE *v130;
  char *v131;
  char v132;
  const char *v133;
  const char *v134;
  uint64_t v135;
  unsigned int data;
  uint64_t v137;
  std::runtime_error *exception;
  std::string *v139;
  std::string::size_type size;
  std::string *v141;
  __int128 v142;
  std::string *v143;
  std::string::size_type v144;
  std::string *v145;
  __int128 v146;
  void *v147;
  unsigned int __val;
  unsigned int __vala[2];
  DSPGraph *v150;
  DSPGraph *v151;
  __int128 **v152;
  uint64_t *v153;
  char *v154[2];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  std::string v159;
  std::string v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  std::string v165;
  std::string v166;
  std::string v167;
  std::string v168;
  std::string __p;
  std::string v170;
  std::string *v171;
  const char *v172;
  std::string __str;
  char v174;
  __int128 buf;
  std::string v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)a1 + 184) = 0;
  a1[22] = 0;
  v152 = (__int128 **)(a1 + 22);
  (*(void (**)(char **__return_ptr))(*a1 + 24))(v154);
  v10 = v154[0];
  v154[0] = 0;
  v11 = a1[1];
  a1[1] = (uint64_t)v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v154[0];
    v154[0] = 0;
    if (v12)
      (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  }
  memset(&v159, 0, sizeof(v159));
  v158 = 0;
  v156 = 0u;
  v157 = 0u;
  *(_OWORD *)v154 = 0u;
  v155 = 0u;
  if (&v157 != (__int128 *)a4)
  {
    v14 = *a4;
    v13 = a4[1];
    if (v13 == v14)
    {
      *((_QWORD *)&v157 + 1) = 0;
    }
    else
    {
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v14) >> 3);
      if (v15 >= 0xAAAAAAAAAAAAAABLL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      *(_QWORD *)&v157 = std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v15);
      *((_QWORD *)&v157 + 1) = v157;
      v158 = v157 + 24 * v16;
      *((_QWORD *)&v157 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v158, v14, v13, (std::string *)v157);
    }
  }
  for (i = *(unsigned __int8 **)(a3 + 16); i; i = *(unsigned __int8 **)i)
    DSPGraph::Preprocessor::def((uint64_t)v154, (unsigned __int8 **)i + 2, (__int128 *)(i + 40));
  std::string::basic_string[abi:ne180100]<0>(&v176, a2);
  DSPGraph::Preprocessor::preprocess(&__str, (DSPGraph::Preprocessor *)v154, (uint64_t)&v176, 0);
  v159 = __str;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v176.__r_.__value_.__l.__data_);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v157;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  std::deque<std::unique_ptr<DSPGraph::Macro>>::~deque[abi:ne180100]((uint64_t)v154);
  v19 = 0;
  if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v159;
  else
    v20 = (std::string *)v159.__r_.__value_.__r.__words[0];
  v153 = a1;
  v21 = (DSPGraph *)(a1 + 16);
  while (v20->__r_.__value_.__s.__data_[0])
  {
    ++v19;
    memset(&v165, 0, sizeof(v165));
    while (1)
    {
      v22 = v20->__r_.__value_.__s.__data_[0];
      if (!v20->__r_.__value_.__s.__data_[0])
        break;
      v20 = (std::string *)((char *)v20 + 1);
      if (v22 == 10)
        break;
      std::string::push_back(&v165, v22);
    }
    v23 = &v165;
    if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v23 = (std::string *)v165.__r_.__value_.__r.__words[0];
    v164 = (char *)v23;
    DSPGraph::skipspace((DSPGraph *)&v164, v18);
    if (*v164 && *v164 != 59)
    {
      v161 = 0;
      v162 = 0;
      v163 = 0;
      if ((DSPGraph::Interpreter::parseName((DSPGraph *)&v164, (uint64_t)&v161) & 1) != 0)
      {
        DSPGraph::skipspace((DSPGraph *)&v164, v18);
        v25 = v164;
        memset(&v160, 0, sizeof(v160));
        while (1)
        {
          v26 = *v25;
          if (v26 <= 0x3B && ((1 << v26) & 0x800000000000401) != 0)
            break;
          std::string::push_back(&v160, v26);
          ++v25;
        }
        v28 = (std::string *)v160.__r_.__value_.__r.__words[0];
        if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &v160;
        v164 = (char *)v28;
        v29 = HIBYTE(v163);
        if (v163 < 0)
          v29 = v162;
        switch(v29)
        {
          case 2:
            v30 = &v161;
            if (v163 < 0)
              v30 = v161;
            if (*v30 == 28265)
              goto LABEL_148;
            goto LABEL_140;
          case 3:
            v39 = (unsigned __int16 *)v161;
            if (v163 >= 0)
              v39 = (unsigned __int16 *)&v161;
            v40 = *v39;
            v41 = *((unsigned __int8 *)v39 + 2);
            if (v40 == 30063 && v41 == 116)
              goto LABEL_118;
            v43 = (unsigned __int16 *)&v161;
            if (v163 < 0)
              v43 = (unsigned __int16 *)v161;
            v44 = *v43;
            v45 = *((unsigned __int8 *)v43 + 2);
            if (v44 != 28514 || v45 != 120)
              goto LABEL_140;
            (*(void (**)(uint64_t *, char **))(*v153 + 16))(v153, &v164);
            goto LABEL_265;
          case 4:
            v31 = &v161;
            if (v163 < 0)
              v31 = v161;
            if (*v31 != 1701996919)
              goto LABEL_140;
            v154[0] = 0;
            v154[1] = 0;
            *(_QWORD *)&v155 = 0;
            memset(&__str, 0, sizeof(__str));
            v171 = v28;
            v172 = 0;
            if ((DSPGraph::Interpreter::parsePortDesc((char **)&v171, (const char **)v154, (const char **)((char *)&v172 + 4)) & 1) == 0)
            {
              memset(&v176, 0, sizeof(v176));
              strlcpy((char *)&v176, (const char *)v171, 0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v170, "parseWireCommand");
              DSPGraph::strprintf((DSPGraph *)"source port description parse failed. {%s}", &__p, &v176);
              DSPGraph::ThrowException(1886548769, &buf, 963, (__int128 *)&v170, (__int128 *)&__p);
            }
            if ((DSPGraph::Interpreter::parsePortDesc((char **)&v171, (const char **)&__str.__r_.__value_.__l.__data_, &v172) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&v176, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWireCommand");
              std::string::basic_string[abi:ne180100]<0>(&v170, "destination port description parse failed.");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v176, 967, &buf, (__int128 *)&v170);
            }
            v150 = v21;
            v32 = HIDWORD(v172);
            v33 = v153[1];
            if (HIDWORD(v172))
            {
              v34 = 0;
            }
            else
            {
              v102 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(v33 + 640), (unsigned __int8 *)v154);
              if (v102)
                v34 = (uint64_t *)(v102 + 40);
              else
                v34 = 0;
            }
            v103 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(v33 + 784), (unsigned __int8 *)v154);
            if (v103)
              v104 = *((_QWORD *)v103 + 5);
            else
              v104 = 0;
            if (!(v104 | (unint64_t)v34))
            {
              std::string::basic_string[abi:ne180100]<0>(&v176, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWireCommand");
              std::operator+<char>();
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v168, &v167, "\" index ");
              std::to_string(&v166, v32);
              if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v139 = &v166;
              else
                v139 = (std::string *)v166.__r_.__value_.__r.__words[0];
              if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v166.__r_.__value_.__r.__words[2]);
              else
                size = v166.__r_.__value_.__l.__size_;
              v141 = std::string::append(&v168, (const std::string::value_type *)v139, size);
              v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v142;
              v141->__r_.__value_.__l.__size_ = 0;
              v141->__r_.__value_.__r.__words[2] = 0;
              v141->__r_.__value_.__r.__words[0] = 0;
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v170, &__p, " not found");
              DSPGraph::ThrowException(1852204065, (__int128 *)&v176, 972, &buf, (__int128 *)&v170);
            }
            __val = v172;
            if ((_DWORD)v172)
            {
              v105 = 0;
            }
            else
            {
              v106 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(v33 + 640), (unsigned __int8 *)&__str);
              if (v106)
                v105 = (uint64_t *)(v106 + 40);
              else
                v105 = 0;
            }
            v107 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(v33 + 784), (unsigned __int8 *)&__str);
            if (v107)
              v108 = *((_QWORD *)v107 + 5);
            else
              v108 = 0;
            if (!(v108 | (unint64_t)v105))
            {
              std::string::basic_string[abi:ne180100]<0>(&v176, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWireCommand");
              std::operator+<char>();
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v168, &v167, "\" index ");
              std::to_string(&v166, __val);
              if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v143 = &v166;
              else
                v143 = (std::string *)v166.__r_.__value_.__r.__words[0];
              if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v144 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
              else
                v144 = v166.__r_.__value_.__l.__size_;
              v145 = std::string::append(&v168, (const std::string::value_type *)v143, v144);
              v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v146;
              v145->__r_.__value_.__l.__size_ = 0;
              v145->__r_.__value_.__r.__words[2] = 0;
              v145->__r_.__value_.__r.__words[0] = 0;
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v170, &__p, " not found");
              DSPGraph::ThrowException(1852204065, (__int128 *)&v176, 978, &buf, (__int128 *)&v170);
            }
            memset(&v176, 0, sizeof(v176));
            v168.__r_.__value_.__r.__words[0] = (std::string::size_type)v171;
            if (DSPGraph::Interpreter::parseString((DSPGraph *)&v168, (uint64_t)&v176)
              && DSPGraph::Graph::getFormat((int8x8_t *)v153[1], (unsigned __int8 *)&v176, v152))
            {
              *((_BYTE *)v153 + 184) = 0;
              v109 = DSPGraph::Graph::connect(v153[1], v104, v108, v32, __val, v34, v105);
              DSPGraph::Wire::setGlobalFormat((uint64_t)v109, *v152);
              v164 = (char *)v168.__r_.__value_.__r.__words[0];
              goto LABEL_203;
            }
            if (DSPGraph::Interpreter::parseFormat((DSPGraph *)&v171, (uint64_t)v150))
            {
              v110 = v153;
              *((_BYTE *)v153 + 184) = 1;
              v153[22] = 0;
            }
            else
            {
              if (*v152)
              {
                v111 = DSPGraph::Graph::connect(v153[1], v104, v108, v32, __val, v34, v105);
                DSPGraph::Wire::setGlobalFormat((uint64_t)v111, *v152);
                goto LABEL_203;
              }
              v110 = v153;
              if (!*((_BYTE *)v153 + 184))
              {
                std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v170, "parseWireCommand");
                std::string::basic_string[abi:ne180100]<0>(&__p, "expected format in 'wire' command");
                DSPGraph::ThrowException(1886548769, &buf, 1003, (__int128 *)&v170, (__int128 *)&__p);
              }
            }
            DSPGraph::Graph::connect(v110[1], (const AudioStreamBasicDescription *)v104, v108, v32, __val, v150, v34, v105);
LABEL_203:
            if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v176.__r_.__value_.__l.__data_);
            v21 = v150;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_154;
            goto LABEL_155;
          case 5:
            v57 = (unsigned __int8 *)v161;
            if (v163 >= 0)
              v57 = (unsigned __int8 *)&v161;
            v58 = *(_DWORD *)v57;
            v59 = v57[4];
            if (v58 == 1970302569 && v59 == 116)
            {
LABEL_148:
              DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v164, (const char **)&v170.__r_.__value_.__l.__data_, v24);
              v154[0] = 0;
              v154[1] = 0;
              *(_QWORD *)&v155 = 0;
              if ((DSPGraph::Interpreter::parseString((DSPGraph *)&v164, (uint64_t)v154) & 1) == 0)
              {
                std::string::basic_string[abi:ne180100]<0>(&__str, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v176, "parseGraphInputCommand");
                std::string::basic_string[abi:ne180100]<0>(&buf, "expected name in 'input' command");
                DSPGraph::ThrowException(1886548769, (__int128 *)&__str, 789, (__int128 *)&v176, &buf);
              }
              v88 = v153[1];
              if ((SBYTE7(v155) & 0x80u) == 0)
                v89 = (char *)v154;
              else
                v89 = v154[0];
              std::string::basic_string[abi:ne180100]<0>(&__str, v89);
              DSPGraph::Graph::addInput(v88, &__str);
LABEL_153:
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
LABEL_154:
                operator delete(__str.__r_.__value_.__l.__data_);
LABEL_155:
              if (SBYTE7(v155) < 0)
              {
                v90 = v154[0];
LABEL_157:
                operator delete(v90);
              }
            }
            else
            {
              v61 = (unsigned __int8 *)&v161;
              if (v163 < 0)
                v61 = (unsigned __int8 *)v161;
              v62 = *(_DWORD *)v61;
              v63 = v61[4];
              if (v62 == 1634886000 && v63 == 109)
              {
                LODWORD(v170.__r_.__value_.__l.__data_) = 0;
                if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v164, (const char **)&v170.__r_.__value_.__l.__data_, (unsigned int *)1) & 1) == 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(v154, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
                  std::string::basic_string[abi:ne180100]<0>(&__str, "parseParamCommand");
                  std::string::basic_string[abi:ne180100]<0>(&v176, "expected parameter ID in 'param' command");
                  DSPGraph::ThrowException(1886548769, (__int128 *)v154, 810, (__int128 *)&__str, (__int128 *)&v176);
                }
                DSPGraph::skipspace((DSPGraph *)&v164, v65);
                v154[0] = 0;
                v67 = strtof(v164, v154);
                v68 = v154[0];
                if (v154[0] == v164)
                {
LABEL_308:
                  std::string::basic_string[abi:ne180100]<0>(v154, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
                  std::string::basic_string[abi:ne180100]<0>(&__str, "parseParamCommand");
                  std::string::basic_string[abi:ne180100]<0>(&v176, "expected parameter initial value in 'param' command");
                  DSPGraph::ThrowException(1886548769, (__int128 *)v154, 814, (__int128 *)&__str, (__int128 *)&v176);
                }
                v69 = v67;
                if (fabsf(v67) == INFINITY)
                {
                  if (*__error())
                    goto LABEL_308;
                  v68 = v154[0];
                }
                v164 = v68;
                v71 = DSPGraph::Interpreter::match((DSPGraph::Interpreter *)&v164, (const char **)"out", v66);
                if ((v71 & 1) == 0)
                  DSPGraph::Interpreter::match((DSPGraph::Interpreter *)&v164, (const char **)"in", v70);
                DSPGraph::Graph::addParameter((DSPGraph::Graph *)v153[1], v170.__r_.__value_.__l.__data_, v69, v71);
              }
              else
              {
LABEL_140:
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v161, "order"))
                {
                  DSPGraph::Interpreter::parseOrderCommand((DSPGraph::Interpreter *)v153, (const char **)&v164);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v161, "set"))
                {
                  DSPGraph::Interpreter::parseSetCommand((DSPGraph::Interpreter *)v153, (const char **)&v164);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v161, "beginSubset"))
                {
                  DSPGraph::Interpreter::parseBeginSubsetCommand((DSPGraph::Interpreter *)v153, (const char **)&v164);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v161, "endSubset"))
                {
                  v153[25] -= 8;
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v161, "graphName"))
                {
                  DSPGraph::Interpreter::parseGraphNameCommand((DSPGraph::Interpreter *)v153, (const char **)&v164);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v161, "componentName"))
                {
                  DSPGraph::Interpreter::parseComponentNameCommand((DSPGraph::Interpreter *)&v164, v91);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v161, "format"))
                {
                  DSPGraph::Interpreter::parseNamedFormatCommand((DSPGraph::Interpreter *)v153, (const char **)&v164);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v161, "jack"))
                {
                  DSPGraph::Interpreter::parseJackCommand((DSPGraph::Interpreter *)v153, (const char **)&v164);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v161, "record"))
                {
                  DSPGraph::Interpreter::parseRecordCommand((DSPGraph::Interpreter *)v153, (const char **)&v164);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v161, "inject"))
                {
                  DSPGraph::Interpreter::parseInjectCommand((DSPGraph::Interpreter *)v153, (const char **)&v164);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v161, "analysis"))
                {
                  DSPGraph::Interpreter::parseAnalysisCommand((DSPGraph::Interpreter *)v153, (const char **)&v164);
                }
                else
                {
                  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v161, "analysisDefine"))
                  {
                    std::string::basic_string[abi:ne180100]<0>(v154, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
                    std::string::basic_string[abi:ne180100]<0>(&__str, "interpretLine");
                    v147 = &v161;
                    if (v163 < 0)
                      v147 = v161;
                    DSPGraph::strprintf((DSPGraph *)"unknown command name '%s'\n", &v176, v147);
                    DSPGraph::ThrowException(1886548769, (__int128 *)v154, 1400, (__int128 *)&__str, (__int128 *)&v176);
                  }
                  DSPGraph::Interpreter::parseAnalysisDefineCommand((DSPGraph::Interpreter *)v153, (const char **)&v164);
                }
              }
            }
LABEL_265:
            if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v160.__r_.__value_.__l.__data_);
            break;
          case 6:
            v72 = (unsigned __int16 *)&v161;
            if (v163 < 0)
              v72 = (unsigned __int16 *)v161;
            v73 = *(_DWORD *)v72;
            v74 = v72[2];
            if (v73 != 1886680431 || v74 != 29813)
              goto LABEL_140;
LABEL_118:
            DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v164, (const char **)&v170.__r_.__value_.__l.__data_, v24);
            v154[0] = 0;
            v154[1] = 0;
            *(_QWORD *)&v155 = 0;
            if ((DSPGraph::Interpreter::parseString((DSPGraph *)&v164, (uint64_t)v154) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&__str, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v176, "parseGraphOutputCommand");
              std::string::basic_string[abi:ne180100]<0>(&buf, "expected name in 'output' command");
              DSPGraph::ThrowException(1886548769, (__int128 *)&__str, 801, (__int128 *)&v176, &buf);
            }
            v76 = v153[1];
            if ((SBYTE7(v155) & 0x80u) == 0)
              v77 = (char *)v154;
            else
              v77 = v154[0];
            std::string::basic_string[abi:ne180100]<0>(&__str, v77);
            DSPGraph::Graph::addOutput(v76, &__str);
            goto LABEL_153;
          case 8:
            v35 = &v161;
            if (v163 < 0)
              v35 = v161;
            if (*v35 != 0x79747265706F7270)
              goto LABEL_140;
            LODWORD(v168.__r_.__value_.__l.__data_) = 0;
            LOBYTE(v154[0]) = 0;
            BYTE8(v155) = 0;
            memset(&__p, 0, sizeof(__p));
            if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v164, (const char **)&v168.__r_.__value_.__l.__data_, (unsigned int *)1) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&__str, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v176, "parsePropertyCommand");
              std::string::basic_string[abi:ne180100]<0>(&buf, "expected property ID in 'property' command");
              DSPGraph::ThrowException(1886548769, (__int128 *)&__str, 836, (__int128 *)&v176, &buf);
            }
            if (DSPGraph::Interpreter::match((DSPGraph::Interpreter *)&v164, (const char **)"out", v36))
              goto LABEL_55;
            if (DSPGraph::Interpreter::match((DSPGraph::Interpreter *)&v164, (const char **)"in", v37))
              goto LABEL_257;
            DSPGraph::skipspace((DSPGraph *)&v164, v92);
            if (!*v164)
              goto LABEL_257;
            DSPGraph::skipspace((DSPGraph *)&v164, v93);
            v94 = v164;
            memset(&v176, 0, sizeof(v176));
            v95 = *v164;
            if (*v164)
            {
              do
              {
                v96 = v95;
                if (v95 < 0)
                  v97 = __maskrune(v95, 0x4000uLL);
                else
                  v97 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v95 + 60) & 0x4000;
                if (v97)
                  break;
                std::string::push_back(&v176, v96);
                v98 = *++v94;
                v95 = v98;
              }
              while (v98);
              v99 = HIBYTE(v176.__r_.__value_.__r.__words[2]);
              v100 = v176.__r_.__value_.__l.__size_;
              v101 = v176.__r_.__value_.__r.__words[0];
            }
            else
            {
              v100 = 0;
              v101 = 0;
              v99 = 0;
            }
            v164 = v94;
            if ((v99 & 0x80u) == 0)
              v112 = &v176;
            else
              v112 = (std::string *)v101;
            if ((v99 & 0x80u) == 0)
              v113 = v99;
            else
              v113 = v100;
            if (v113 < 2)
              goto LABEL_314;
            if (LOWORD(v112->__r_.__value_.__l.__data_) != 30768 || (v113 & 1) != 0)
              goto LABEL_314;
            if (v113 != 2)
            {
              v115 = (unsigned __int8 *)&v112->__r_.__value_.__s.__data_[2];
              v116 = v113 - 2;
              do
              {
                if ((char)*v115 < 0 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v115 + 60) & 0x10000) == 0)
                {
LABEL_314:
                  std::string::basic_string[abi:ne180100]<0>(&__str, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
                  std::string::basic_string[abi:ne180100]<0>(&buf, "parsePropertyValue");
                  std::string::basic_string[abi:ne180100]<0>(&v170, "bad property value hexadecimal formatting");
                  DSPGraph::ThrowException(1886548769, (__int128 *)&__str, 358, &buf, (__int128 *)&v170);
                }
                ++v115;
                --v116;
              }
              while (v116);
            }
            v151 = v21;
            __p.__r_.__value_.__l.__size_ = 0;
            std::vector<unsigned char>::reserve((unint64_t *)&__p, (v113 - 2) >> 1);
            if (v113 != 2)
            {
              v117 = (char *)v112 + v113;
              v118 = &v112->__r_.__value_.__s.__data_[2];
              *(_QWORD *)__vala = (char *)v112 + v113;
              do
              {
                *((_BYTE *)&__str.__r_.__value_.__s + 23) = 2;
                __str.__r_.__value_.__s.__data_[0] = *v118;
                *(_WORD *)((char *)&__str.__r_.__value_.__l.__data_ + 1) = v118[1];
                v119 = std::stoul(&__str, 0, 16);
                v120 = v119;
                if (v119 >= 0x100)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "numerical cast overflow: could not retain value in conversion type");
                  exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5030] + 16);
                }
                v121 = (char *)__p.__r_.__value_.__l.__size_;
                if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
                {
                  v123 = __p.__r_.__value_.__r.__words[0];
                  v124 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
                  v125 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] + 1;
                  if (v125 < 0)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v126 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
                  if (2 * (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) > v125)
                    v125 = 2 * v126;
                  if (v126 >= 0x3FFFFFFFFFFFFFFFLL)
                    v127 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v127 = v125;
                  if (v127)
                    v128 = (std::string::size_type)operator new(v127);
                  else
                    v128 = 0;
                  v129 = v128 + v124;
                  v130 = (_BYTE *)(v128 + v124);
                  *v130 = v120;
                  v122 = (std::string::size_type)(v130 + 1);
                  if (v121 != (char *)v123)
                  {
                    v131 = &v121[~v123];
                    do
                    {
                      v132 = *--v121;
                      (v131--)[v128] = v132;
                    }
                    while (v121 != (char *)v123);
                    v121 = (char *)__p.__r_.__value_.__r.__words[0];
                    v129 = v128;
                  }
                  __p.__r_.__value_.__r.__words[0] = v129;
                  __p.__r_.__value_.__r.__words[2] = v128 + v127;
                  v117 = *(char **)__vala;
                  if (v121)
                    operator delete(v121);
                }
                else
                {
                  *(_BYTE *)__p.__r_.__value_.__l.__size_ = v119;
                  v122 = (std::string::size_type)(v121 + 1);
                }
                __p.__r_.__value_.__l.__size_ = v122;
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                v118 += 2;
              }
              while (v118 != v117);
            }
            if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v176.__r_.__value_.__l.__data_);
            v21 = v151;
            if (BYTE8(v155))
            {
              std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v154, __p.__r_.__value_.__l.__data_, (char *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]);
            }
            else
            {
              v154[0] = 0;
              v154[1] = 0;
              *(_QWORD *)&v155 = 0;
              std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v154, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]);
              BYTE8(v155) = 1;
            }
            if (DSPGraph::Interpreter::match((DSPGraph::Interpreter *)&v164, (const char **)"out", v133))
            {
LABEL_55:
              v38 = 1;
            }
            else
            {
              DSPGraph::Interpreter::match((DSPGraph::Interpreter *)&v164, (const char **)"in", v134);
LABEL_257:
              v38 = 0;
            }
            v135 = v153[1];
            data = v168.__r_.__value_.__l.__data_;
            std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100]((uint64_t)&__str, (uint64_t)v154);
            DSPGraph::Graph::addProperty(v135, data, (uint64_t)&__str, v38);
            if (v174 && __str.__r_.__value_.__r.__words[0])
            {
              __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (__p.__r_.__value_.__r.__words[0])
              operator delete(__p.__r_.__value_.__l.__data_);
            if (!BYTE8(v155))
              goto LABEL_265;
            v90 = v154[0];
            if (!v154[0])
              goto LABEL_265;
            goto LABEL_157;
          case 9:
            v47 = (unsigned __int8 *)&v161;
            if (v163 < 0)
              v47 = (unsigned __int8 *)v161;
            v48 = *(_QWORD *)v47;
            v49 = v47[8];
            if (v48 != 0x6172615065726977 || v49 != 109)
              goto LABEL_140;
            v154[0] = 0;
            v154[1] = 0;
            LODWORD(v155) = 0;
            memset(&__str, 0, 20);
            if (!DSPGraph::Interpreter::parseParamEndpoint((uint64_t)v153, (DSPGraph *)&v164, (uint64_t)v154))
            {
              std::string::basic_string[abi:ne180100]<0>(&v176, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWireParamCommand");
              std::string::basic_string[abi:ne180100]<0>(&v170, "expected source endpoint in 'wireParam' command");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v176, 1011, &buf, (__int128 *)&v170);
            }
            if (!DSPGraph::Interpreter::parseParamEndpoint((uint64_t)v153, (DSPGraph *)&v164, (uint64_t)&__str))
            {
              std::string::basic_string[abi:ne180100]<0>(&v176, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWireParamCommand");
              std::string::basic_string[abi:ne180100]<0>(&v170, "expected destination endpoint in 'wireParam' command");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v176, 1014, &buf, (__int128 *)&v170);
            }
            v176.__r_.__value_.__s.__data_[0] = 0;
            DSPGraph::Interpreter::parseBool((DSPGraph::Interpreter *)&v164, (const char **)&v176.__r_.__value_.__l.__data_, v51);
            DSPGraph::Graph::connectParams(v153[1], (uint64_t)v154, (uint64_t)&__str, v176.__r_.__value_.__s.__data_[0]);
            goto LABEL_265;
          case 12:
            v52 = &v161;
            if (v163 < 0)
              v52 = v161;
            v53 = *(_QWORD *)v52;
            v54 = v52[2];
            if (v53 != 0x706F725065726977 || v54 != 2037674597)
              goto LABEL_140;
            v154[0] = 0;
            v154[1] = 0;
            LODWORD(v155) = 0;
            memset(&__str, 0, 20);
            if (!DSPGraph::Interpreter::parsePropertyEndpoint((uint64_t)v153, (DSPGraph *)&v164, (uint64_t)v154))
            {
              std::string::basic_string[abi:ne180100]<0>(&v176, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWirePropertyCommand");
              std::string::basic_string[abi:ne180100]<0>(&v170, "expected source endpoint in 'wireProperty' command");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v176, 1026, &buf, (__int128 *)&v170);
            }
            if (!DSPGraph::Interpreter::parsePropertyEndpoint((uint64_t)v153, (DSPGraph *)&v164, (uint64_t)&__str))
            {
              std::string::basic_string[abi:ne180100]<0>(&v176, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWirePropertyCommand");
              std::string::basic_string[abi:ne180100]<0>(&v170, "expected destination endpoint in 'wireProperty' command");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v176, 1029, &buf, (__int128 *)&v170);
            }
            v176.__r_.__value_.__s.__data_[0] = 0;
            DSPGraph::Interpreter::parseBool((DSPGraph::Interpreter *)&v164, (const char **)&v176.__r_.__value_.__l.__data_, v56);
            DSPGraph::Graph::connectProperties(v153[1], (uint64_t)v154, (uint64_t)&__str, v176.__r_.__value_.__s.__data_[0]);
            goto LABEL_265;
          case 14:
            v84 = (uint64_t *)&v161;
            if (v163 < 0)
              v84 = (uint64_t *)v161;
            v85 = *v84;
            v86 = *(uint64_t *)((char *)v84 + 6);
            if (v85 != 0x7061724765726977 || v86 != 0x6D61726150687061)
              goto LABEL_140;
            LODWORD(v170.__r_.__value_.__l.__data_) = 0;
            if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v164, (const char **)&v170.__r_.__value_.__l.__data_, (unsigned int *)1) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(v154, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&__str, "parseWireGraphParamCommand");
              std::string::basic_string[abi:ne180100]<0>(&v176, "expected parameter ID in 'wireGraphParam' command");
              DSPGraph::ThrowException(1886548769, (__int128 *)v154, 1041, (__int128 *)&__str, (__int128 *)&v176);
            }
            v154[0] = 0;
            v154[1] = 0;
            LODWORD(v155) = 0;
            if (!DSPGraph::Interpreter::parseParamEndpoint((uint64_t)v153, (DSPGraph *)&v164, (uint64_t)v154))
            {
              std::string::basic_string[abi:ne180100]<0>(&__str, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v176, "parseWireGraphParamCommand");
              std::string::basic_string[abi:ne180100]<0>(&buf, "expected endpoint in 'wireGraphParam' command");
              DSPGraph::ThrowException(1886548769, (__int128 *)&__str, 1046, (__int128 *)&v176, &buf);
            }
            DSPGraph::Graph::connectParameter(v153[1], v170.__r_.__value_.__l.__data_, (__int128 *)v154);
            goto LABEL_265;
          case 17:
            v78 = (uint64_t *)&v161;
            if (v163 < 0)
              v78 = (uint64_t *)v161;
            v79 = *v78;
            v80 = v78[1];
            v81 = *((unsigned __int8 *)v78 + 16);
            if (v79 != 0x7061724765726977 || v80 != 0x747265706F725068 || v81 != 121)
              goto LABEL_140;
            DSPGraph::Interpreter::parseWireGraphPropertyCommand((DSPGraph::Interpreter *)v153, (const char **)&v164);
            goto LABEL_265;
          default:
            goto LABEL_140;
        }
      }
      if (SHIBYTE(v163) < 0)
        operator delete(v161);
    }
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
  }
  DSPGraph::Graph::pruneSubsets((DSPGraph::Graph *)v153[1]);
  v137 = v153[1];
  v153[1] = 0;
  *a5 = v137;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
}

void sub_18EE38A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  __cxa_end_catch();
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_18EE38A2C(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18EE38A34);
  __clang_call_terminate(a1);
}

uint64_t DSPGraph::Interpreter::parseName(DSPGraph *a1, uint64_t a2)
{
  _BYTE *v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  char v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  DSPGraph::skipspace(a1, (const char **)a2);
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_BYTE **)a1;
  v5 = **(char **)a1;
  if ((v5 & 0x80000000) != 0)
  {
    v6 = __maskrune(v5, 0x100uLL);
    v4 = *(_BYTE **)a1;
    LOBYTE(v5) = **(_BYTE **)a1;
  }
  else
  {
    v6 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v5 + 60) & 0x100;
  }
  if (v6)
    v7 = 1;
  else
    v7 = v5 == 95;
  v8 = v7;
  if (v7)
  {
    std::string::push_back((std::string *)a2, v5);
    v11 = v4[1];
    v10 = v4 + 1;
    v9 = v11;
    if (!v11)
    {
LABEL_23:
      *(_QWORD *)a1 = v10;
      return v8;
    }
    v12 = MEMORY[0x1E0C80978];
    while (1)
    {
      v13 = v9;
      if (v9 < 0)
      {
        if (!__maskrune(v9, 0x500uLL))
        {
LABEL_21:
          if (!memchr("_-+=|./:!@#$%^&*<>?~", v13, 0x15uLL))
            goto LABEL_23;
        }
      }
      else if ((*(_DWORD *)(v12 + 4 * v9 + 60) & 0x500) == 0)
      {
        goto LABEL_21;
      }
      std::string::push_back((std::string *)a2, v13);
      v14 = *++v10;
      v9 = v14;
      if (!v14)
        goto LABEL_23;
    }
  }
  return v8;
}

uint64_t DSPGraph::skipspace(DSPGraph *this, const char **a2)
{
  _BYTE *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  BOOL v7;
  char v8;
  int v9;

  v3 = *(_BYTE **)this;
  v4 = MEMORY[0x1E0C80978];
  do
  {
    v5 = (char)*v3;
    if ((v5 & 0x80000000) != 0)
      result = __maskrune((char)*v3, 0x4000uLL);
    else
      result = *(_DWORD *)(v4 + 4 * v5 + 60) & 0x4000;
    v7 = v5 == 10 || (_DWORD)result == 0;
    v8 = !v7;
    if (v7)
    {
      if (v5 != 59)
        return result;
      v3 = *(_BYTE **)this;
      do
      {
        v9 = *v3;
        if (!*v3)
          break;
        *(_QWORD *)this = ++v3;
      }
      while (v9 != 10);
    }
    else
    {
      v3 = (_BYTE *)(*(_QWORD *)this + 1);
      *(_QWORD *)this = v3;
    }
  }
  while ((v8 & 1) != 0);
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

uint64_t DSPGraph::Interpreter::parsePortDesc(char **a1, const char **a2, const char **a3)
{
  uint64_t result;
  unsigned int *v7;
  const char **v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;

  v14 = *a1;
  *(_DWORD *)a3 = 0;
  DSPGraph::skipspace((DSPGraph *)&v14, a2);
  if (*v14 == 40)
  {
    ++v14;
    result = DSPGraph::Interpreter::parseString((DSPGraph *)&v14, (uint64_t)a2);
    if (!(_DWORD)result)
      return result;
    DSPGraph::Interpreter::parseUInt32((DSPGraph::Interpreter *)&v14, a3, v7);
    DSPGraph::skipspace((DSPGraph *)&v14, v8);
    v9 = v14;
    if (*v14 != 41)
    {
      std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v12, "parsePortDesc");
      DSPGraph::strprintf((DSPGraph *)"expected ')' at end of port description, got '%c'", &v11, *v9);
      DSPGraph::ThrowException(1886548769, &v13, 946, &v12, &v11);
    }
    v10 = v14 + 1;
  }
  else
  {
    result = DSPGraph::Interpreter::parseString((DSPGraph *)&v14, (uint64_t)a2);
    if (!(_DWORD)result)
      return result;
    v10 = v14;
  }
  *a1 = v10;
  return 1;
}

void sub_18EE38E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Interpreter::parseString(DSPGraph *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  int v6;
  int v7;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  DSPGraph::skipspace(a1, (const char **)a2);
  if ((DSPGraph::Interpreter::parseName(a1, a2) & 1) == 0)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
    v4 = *(_QWORD *)a1;
    if (**(_BYTE **)a1 != 34)
      return 0;
    for (i = *(_QWORD *)a1; ; v4 = i)
    {
      v7 = *(unsigned __int8 *)++i;
      v6 = v7;
      if (v7 == 34)
        break;
      if (v6 == 10 || v6 == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v11, "parseString");
        std::string::basic_string[abi:ne180100]<0>(&v10, "unterminated string");
        DSPGraph::ThrowException(1886548769, &v12, 413, &v11, &v10);
      }
      std::string::push_back((std::string *)a2, v6);
    }
    *(_QWORD *)a1 = v4 + 2;
  }
  return 1;
}

void sub_18EE38F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::getFormat(int8x8_t *a1, unsigned __int8 *a2, _QWORD *a3)
{
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;

  v6 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v7 = a1[76];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v11 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v11 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)&a1[75] + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
          {
            *a3 = i + 40;
            return 1;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(_QWORD *)&v7)
              v14 %= *(_QWORD *)&v7;
          }
          else
          {
            v14 &= *(_QWORD *)&v7 - 1;
          }
          if (v14 != v11)
            return 0;
        }
      }
    }
  }
  return 0;
}

DSPGraph::Wire *DSPGraph::Graph::connect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  DSPGraph::Wire *v11;
  uint64_t v12;
  uint64_t v13;
  DSPGraph::OutputPort *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v22;
  _QWORD *v24;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (*(_BYTE *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v28, "connect");
    std::string::basic_string[abi:ne180100]<0>(&v27, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v29, 1164, &v28, &v27);
  }
  if (a6)
  {
    if (a7)
    {
      v11 = (DSPGraph::Wire *)*a7;
      v12 = *a6;
      if (!*a6)
      {
        if (!v11)
        {
          v12 = operator new();
          *(_OWORD *)(v12 + 80) = 0u;
          *(_OWORD *)(v12 + 96) = 0u;
          *(_OWORD *)(v12 + 48) = 0u;
          *(_OWORD *)(v12 + 64) = 0u;
          *(_OWORD *)(v12 + 112) = 0u;
          *(_QWORD *)v12 = &off_1E2911688;
          *(_OWORD *)(v12 + 8) = 0u;
          *(_OWORD *)(v12 + 24) = 0u;
          *(_QWORD *)(v12 + 40) = 0;
          *(_DWORD *)(v12 + 48) = 1065353216;
          *(_OWORD *)(v12 + 88) = 0u;
          *(_QWORD *)(v12 + 104) = 0;
          *(_OWORD *)(v12 + 72) = 0u;
          *(_DWORD *)(v12 + 112) = 1;
          *(_QWORD *)(v12 + 120) = v12 + 72;
          std::__hash_table<DSPGraph::Wire *,std::hash<DSPGraph::Wire *>,std::equal_to<DSPGraph::Wire *>,std::allocator<DSPGraph::Wire *>>::__emplace_unique_key_args<DSPGraph::Wire *,DSPGraph::Wire * const&>((float *)(a1 + 48), v12, v12);
          *a7 = v12;
          *a6 = v12;
          return (DSPGraph::Wire *)v12;
        }
        *a6 = (uint64_t)v11;
        return v11;
      }
      if (v11)
      {
        if ((DSPGraph::Wire *)v12 != v11)
        {
          if (*((_QWORD *)v11 + 1))
          {
            std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v28, "connect");
            std::string::basic_string[abi:ne180100]<0>(&v27, "destination jack already has a source.");
            DSPGraph::ThrowException(1633903905, &v29, 1182, &v28, &v27);
          }
LABEL_15:
          DSPGraph::Wire::addAll((DSPGraph::Wire *)v12, v11);
          std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>((uint64_t *)(a1 + 48), (unint64_t)v11);
          (*(void (**)(DSPGraph::Wire *))(*(_QWORD *)v11 + 8))(v11);
          goto LABEL_16;
        }
        return v11;
      }
      goto LABEL_16;
    }
    v16 = *(_QWORD *)(a3 + 64);
    if (a5 >= (unint64_t)((*(_QWORD *)(a3 + 72) - v16) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v28, "in");
      v24 = (_QWORD *)(a3 + 32);
      if (*(char *)(a3 + 55) < 0)
        v24 = (_QWORD *)*v24;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v27, v24, (uint64_t)(*(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64)) >> 5, a5);
      DSPGraph::ThrowException(1919837985, &v29, 1410, &v28, &v27);
    }
    v17 = (_QWORD *)(v16 + 32 * a5);
    if ((*(uint64_t (**)(_QWORD *))(*v17 + 40))(v17))
    {
      std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v28, "connect");
      std::string::basic_string[abi:ne180100]<0>(&v27, "The input port already has a connection.");
      DSPGraph::ThrowException(1633903905, &v29, 1209, &v28, &v27);
    }
    v12 = *a6;
    if ((*(uint64_t (**)(_QWORD *))(*v17 + 40))(v17))
    {
      std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v28, "connect");
      std::string::basic_string[abi:ne180100]<0>(&v27, "The input port already has a connection.");
      DSPGraph::ThrowException(1633903905, &v29, 1215, &v28, &v27);
    }
    if (!v12)
    {
      v12 = operator new();
      *(_QWORD *)v12 = &off_1E2911688;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_QWORD *)(v12 + 40) = 0;
      *(_DWORD *)(v12 + 48) = 1065353216;
      *(_QWORD *)(v12 + 56) = 0;
      *(_BYTE *)(v12 + 64) = 0;
      *(_OWORD *)(v12 + 88) = 0u;
      *(_QWORD *)(v12 + 104) = 0;
      *(_OWORD *)(v12 + 72) = 0u;
      *(_DWORD *)(v12 + 112) = 1;
      *(_QWORD *)(v12 + 120) = v12 + 72;
      std::__hash_table<DSPGraph::Wire *,std::hash<DSPGraph::Wire *>,std::equal_to<DSPGraph::Wire *>,std::allocator<DSPGraph::Wire *>>::__emplace_unique_key_args<DSPGraph::Wire *,DSPGraph::Wire * const&>((float *)(a1 + 48), v12, v12);
      *a6 = v12;
    }
LABEL_28:
    std::__hash_table<DSPGraph::InputPort *,std::hash<DSPGraph::InputPort *>,std::equal_to<DSPGraph::InputPort *>,std::allocator<DSPGraph::InputPort *>>::__emplace_unique_key_args<DSPGraph::InputPort *,DSPGraph::InputPort * const&>((float *)(v12 + 16), (unint64_t)v17, (uint64_t)v17);
    v17[2] = v12;
    return (DSPGraph::Wire *)v12;
  }
  v13 = *(_QWORD *)(a2 + 88);
  if (a4 >= (unint64_t)((*(_QWORD *)(a2 + 96) - v13) >> 5))
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v28, "out");
    v22 = (_QWORD *)(a2 + 32);
    if (*(char *)(a2 + 55) < 0)
      v22 = (_QWORD *)*v22;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v27, v22, (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 5, a4);
    DSPGraph::ThrowException(1919837985, &v29, 1418, &v28, &v27);
  }
  v14 = (DSPGraph::OutputPort *)(v13 + 32 * a4);
  if (!a7)
  {
    v18 = *(_QWORD *)(a3 + 64);
    if (a5 >= (unint64_t)((*(_QWORD *)(a3 + 72) - v18) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v28, "in");
      v26 = (_QWORD *)(a3 + 32);
      if (*(char *)(a3 + 55) < 0)
        v26 = (_QWORD *)*v26;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v27, v26, (uint64_t)(*(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64)) >> 5, a5);
      DSPGraph::ThrowException(1919837985, &v29, 1410, &v28, &v27);
    }
    v17 = (_QWORD *)(v18 + 32 * a5);
    v12 = (*(uint64_t (**)(DSPGraph::OutputPort *))(*(_QWORD *)v14 + 40))(v14);
    if ((*(uint64_t (**)(_QWORD *))(*v17 + 40))(v17))
    {
      std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v28, "connect");
      std::string::basic_string[abi:ne180100]<0>(&v27, "The input port already has a connection.");
      DSPGraph::ThrowException(1633903905, &v29, 1267, &v28, &v27);
    }
    if (!v12)
    {
      v12 = operator new();
      DSPGraph::Wire::Wire((DSPGraph::Wire *)v12, v14);
      std::__hash_table<DSPGraph::Wire *,std::hash<DSPGraph::Wire *>,std::equal_to<DSPGraph::Wire *>,std::allocator<DSPGraph::Wire *>>::__emplace_unique_key_args<DSPGraph::Wire *,DSPGraph::Wire * const&>((float *)(a1 + 48), v12, v12);
    }
    goto LABEL_28;
  }
  v15 = (*(uint64_t (**)(DSPGraph::OutputPort *))(*(_QWORD *)v14 + 40))(v14);
  v11 = (DSPGraph::Wire *)*a7;
  if (!v15)
  {
    if (!v11)
    {
      v12 = operator new();
      DSPGraph::Wire::Wire((DSPGraph::Wire *)v12, v14);
      std::__hash_table<DSPGraph::Wire *,std::hash<DSPGraph::Wire *>,std::equal_to<DSPGraph::Wire *>,std::allocator<DSPGraph::Wire *>>::__emplace_unique_key_args<DSPGraph::Wire *,DSPGraph::Wire * const&>((float *)(a1 + 48), v12, v12);
      goto LABEL_16;
    }
    DSPGraph::Wire::setSource(*a7, v14);
    return v11;
  }
  v12 = v15;
  if (!v11)
  {
LABEL_16:
    *a7 = v12;
    return (DSPGraph::Wire *)v12;
  }
  if ((DSPGraph::Wire *)v15 != v11)
  {
    if (*((_QWORD *)v11 + 1))
    {
      std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v28, "connect");
      std::string::basic_string[abi:ne180100]<0>(&v27, "The jack already has a source.");
      DSPGraph::ThrowException(1633903905, &v29, 1241, &v28, &v27);
    }
    goto LABEL_15;
  }
  return (DSPGraph::Wire *)v12;
}

void sub_18EE39734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<DSPGraph::InputPort *,std::hash<DSPGraph::InputPort *>,std::equal_to<DSPGraph::InputPort *>,std::allocator<DSPGraph::InputPort *>>::__emplace_unique_key_args<DSPGraph::InputPort *,DSPGraph::InputPort * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *v14 = *v33;
LABEL_72:
    *v33 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    v34 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_18EE39C04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<DSPGraph::Wire *,std::hash<DSPGraph::Wire *>,std::equal_to<DSPGraph::Wire *>,std::allocator<DSPGraph::Wire *>>::__emplace_unique_key_args<DSPGraph::Wire *,DSPGraph::Wire * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *v14 = *v33;
LABEL_72:
    *v33 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    v34 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_18EE3A018(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

DSPGraph::Wire *DSPGraph::Wire::Wire(DSPGraph::Wire *this, DSPGraph::OutputPort *a2)
{
  *(_QWORD *)this = &off_1E2911688;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 1065353216;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 28) = 1;
  *((_QWORD *)this + 15) = (char *)this + 72;
  if (a2)
    DSPGraph::Wire::setSource((uint64_t)this, a2);
  return this;
}

void sub_18EE3A0A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Wire::setSource(uint64_t this, DSPGraph::OutputPort *a2)
{
  uint64_t v2;
  DSPGraph::OutputPort *v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v2 = this;
  v3 = *(DSPGraph::OutputPort **)(this + 8);
  if (v3)
    v4 = v3 == a2;
  else
    v4 = 1;
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Wire.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v15, "setSource");
    v7 = *(char **)(*(_QWORD *)(v2 + 8) + 8);
    v8 = v7 + 32;
    if (v7[55] < 0)
      v8 = (_QWORD *)*v8;
    v9 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 16))(v7);
    DSPGraph::strprintf((DSPGraph *)"wire already has a source: %s %s output %u", &v14, v8, v9, *(unsigned int *)(*(_QWORD *)(v2 + 8) + 24));
    DSPGraph::ThrowException(1633903905, &v16, 67, &v15, &v14);
  }
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v6 = v5 == this;
  else
    v6 = 1;
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Wire.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v15, "setSource");
    v11 = (char *)*((_QWORD *)a2 + 1);
    v12 = v11 + 32;
    if (v11[55] < 0)
      v12 = (_QWORD *)*v12;
    v13 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 16))(v11);
    DSPGraph::strprintf((DSPGraph *)"output port already has a wire: %s %s output %u", &v14, v12, v13, *((unsigned int *)a2 + 6));
    DSPGraph::ThrowException(1633903905, &v16, 71, &v15, &v14);
  }
  *(_QWORD *)(this + 8) = a2;
  *((_QWORD *)a2 + 2) = this;
  return this;
}

void sub_18EE3A204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Wire::setGlobalFormat(uint64_t result, __int128 *__s1)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  int16x8_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD v15[2];
  char v16;
  _QWORD v17[2];
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int16x8_t v22;
  uint64_t v23;

  v3 = result;
  if (*(_BYTE *)(result + 64))
  {
    v4 = *(_DWORD **)(result + 120);
    result = memcmp(__s1, v4, 0x28uLL);
    if ((_DWORD)result || *((_DWORD *)__s1 + 10) != v4[10])
    {
      std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Wire.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v19, "setGlobalFormat");
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
      v6 = (_QWORD *)(v5 + 32);
      if (*(char *)(v5 + 55) < 0)
        v6 = (_QWORD *)*v6;
      v7 = (int16x8_t)__s1[1];
      v21 = *__s1;
      v22 = v7;
      v23 = *((_QWORD *)__s1 + 4);
      CA::StreamDescription::AsString((CA::StreamDescription *)v17, &v21, *(double *)&v21, v7);
      v8 = v18;
      v9 = (_QWORD *)v17[0];
      v10 = *((unsigned int *)__s1 + 10);
      v11 = *(_QWORD *)(v3 + 120);
      v21 = *(_OWORD *)v11;
      v22 = *(int16x8_t *)(v11 + 16);
      v23 = *(_QWORD *)(v11 + 32);
      CA::StreamDescription::AsString((CA::StreamDescription *)v15, &v21, *(double *)v22.i64, v12);
      if (v8 >= 0)
        v13 = v17;
      else
        v13 = v9;
      if (v16 >= 0)
        v14 = v15;
      else
        v14 = (_QWORD *)v15[0];
      DSPGraph::strprintf((DSPGraph *)"Wire from box %s: format\n%s, %u block size\ndoes not match the one previously set\n%s, %u block size\n", &v21, v6, v13, v10, v14, *(unsigned int *)(*(_QWORD *)(v3 + 120) + 40));
      DSPGraph::ThrowException(1718444833, &v20, 140, &v19, &v21);
    }
  }
  else
  {
    *(_BYTE *)(result + 64) = 1;
  }
  *(_QWORD *)(v3 + 120) = __s1;
  return result;
}

void sub_18EE3A3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (*(char *)(v38 - 89) < 0)
    operator delete(*(void **)(v38 - 112));
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::Interpreter::match(DSPGraph::Interpreter *this, const char **a2, const char *a3)
{
  size_t v5;
  uint64_t v6;
  int v7;

  DSPGraph::skipspace(this, a2);
  v5 = strlen((const char *)a2);
  v6 = *(_QWORD *)this;
  v7 = strncmp(*(const char **)this, (const char *)a2, v5);
  if (!v7)
    *(_QWORD *)this = v6 + v5;
  return v7 == 0;
}

void DSPGraph::Graph::pruneSubsets(DSPGraph::Graph *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (uint64_t *)*((_QWORD *)this + 114);
  v2 = (uint64_t *)*((_QWORD *)this + 113);
  if (v2 != v1)
  {
    while (*(_QWORD *)(*v2 + 48))
    {
      if (++v2 == v1)
        return;
    }
    if (v2 != v1)
    {
      v4 = v2 + 1;
      if (v2 + 1 != v1)
      {
        do
        {
          v5 = *v4;
          if (*(_QWORD *)(*v4 + 48))
          {
            *v4 = 0;
            v6 = *v2;
            *v2 = v5;
            if (v6)
              std::default_delete<DSPGraph::Subset>::operator()[abi:ne180100](v6);
            ++v2;
          }
          ++v4;
        }
        while (v4 != v1);
        v1 = (uint64_t *)*((_QWORD *)this + 114);
      }
    }
    if (v2 != v1)
    {
      while (v1 != v2)
      {
        v8 = *--v1;
        v7 = v8;
        *v1 = 0;
        if (v8)
          std::default_delete<DSPGraph::Subset>::operator()[abi:ne180100](v7);
      }
      *((_QWORD *)this + 114) = v2;
    }
  }
}

DSPGraph::Graph *DSPGraph::Interpreter::NewGraph@<X0>(DSPGraph::Graph **a1@<X8>)
{
  DSPGraph::Graph *v3;
  DSPGraph::Graph *result;

  v3 = (DSPGraph::Graph *)operator new();
  result = DSPGraph::Graph::Graph(v3);
  *a1 = v3;
  return result;
}

void sub_18EE3A5D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10B3C4046E0D9ECLL);
  _Unwind_Resume(a1);
}

DSPGraph::Graph *DSPGraph::Graph::Graph(DSPGraph::Graph *this)
{
  _OWORD *v2;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E2911C30;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_QWORD *)this + 16) = 850045863;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 1065353216;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 90) = 1065353216;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 100) = 1065353216;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 449) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_DWORD *)this + 138) = 1065353216;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 148) = 1065353216;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_DWORD *)this + 158) = 1065353216;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_DWORD *)this + 168) = 1065353216;
  *((_QWORD *)this + 91) = 0;
  v4 = (uint64_t *)((char *)this + 680);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 96) = DSPGraph::Graph::generateSerialNumber(this);
  *((_QWORD *)this + 101) = 0;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *((_DWORD *)this + 204) = 1065353216;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_DWORD *)this + 214) = 1065353216;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_DWORD *)this + 224) = 1065353216;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 115) = 0;
  *((_QWORD *)this + 114) = 0;
  *((_QWORD *)this + 116) = 0x7F6E6F726DLL;
  *((_BYTE *)this + 936) = 0;
  *((_DWORD *)this + 235) = 1667327590;
  *(_OWORD *)((char *)this + 952) = 0u;
  *((_QWORD *)this + 118) = &off_1E290D5B8;
  *(_OWORD *)((char *)this + 968) = 0u;
  *((_DWORD *)this + 246) = 1065353216;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_QWORD *)this + 135) = 0;
  *((_DWORD *)this + 272) = 1065353216;
  v2 = (_OWORD *)operator new();
  v2[6] = 0u;
  v2[7] = 0u;
  v2[5] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver>>>::lf_read_synchronized_write((caulk::concurrent::details::lf_read_sync_write_impl *)v2);
  caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver>>>::lf_read_synchronized_write((caulk::concurrent::details::lf_read_sync_write_impl *)(v2 + 4));
  v5 = 0;
  std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Box>>::reset[abi:ne180100](v4, (uint64_t)v2);
  std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Box>>::reset[abi:ne180100](&v5, 0);
  return this;
}

void sub_18EE3A838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void **v31;
  void *v32;
  void *v33;

  std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>>>::~__hash_table(v18 + 1056);
  v26 = *(_QWORD **)(v18 + 1048);
  if (v26 == v21)
  {
    v27 = 4;
    v26 = v21;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  std::unique_ptr<DSPGraph::Graph::profiler_t>::reset[abi:ne180100](v23, 0);
  std::vector<DSPGraph::Graph::GraphBridge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  *(_QWORD *)(v18 + 944) = &off_1E290D5B8;
  std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::~__hash_table(v24);
  a18 = a10;
  std::vector<std::unique_ptr<DSPGraph::Subset>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::~__hash_table(a12);
  std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Box>>::reset[abi:ne180100](a17, 0);
  std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::~__hash_table(v18 + 640);
  std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::~__hash_table(v22);
  std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>>>::~__hash_table(v18 + 560);
  std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>>>::~__hash_table(v18 + 520);
  v28 = *(void **)(v18 + 496);
  if (v28)
  {
    *(_QWORD *)(v18 + 504) = v28;
    operator delete(v28);
  }
  v29 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 480) = v29;
    operator delete(v29);
  }
  if (*(char *)(v18 + 455) < 0)
    operator delete(*(void **)(v18 + 432));
  if (*(char *)(v18 + 431) < 0)
    operator delete(*v19);
  v30 = *(void **)(v18 + 304);
  if (v30)
  {
    *(_QWORD *)(v18 + 312) = v30;
    operator delete(v30);
  }
  v31 = (void **)(v18 + 256);
  v32 = *(void **)(v18 + 280);
  if (v32)
  {
    *(_QWORD *)(v18 + 288) = v32;
    operator delete(v32);
  }
  v33 = *v31;
  if (*v31)
  {
    *(_QWORD *)(v18 + 264) = v33;
    operator delete(v33);
  }
  std::__hash_table<std::unique_ptr<DSPGraph::IsoGroup>,std::hash<std::unique_ptr<DSPGraph::IsoGroup>>,std::equal_to<std::unique_ptr<DSPGraph::IsoGroup>>,std::allocator<std::unique_ptr<DSPGraph::IsoGroup>>>::~__hash_table(v18 + 216);
  a18 = v18 + 192;
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  std::mutex::~mutex(a13);
  std::__hash_table<std::unique_ptr<DSPGraph::Box>,std::hash<std::unique_ptr<DSPGraph::Box>>,std::equal_to<std::unique_ptr<DSPGraph::Box>>,std::allocator<std::unique_ptr<DSPGraph::Box>>>::~__hash_table(a16);
  _Unwind_Resume(a1);
}

unint64_t DSPGraph::Graph::addOutput(uint64_t a1, const std::string *a2)
{
  unint64_t v4;
  DSPGraph::Box *v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (*(_BYTE *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v22, "addOutput");
    std::string::basic_string[abi:ne180100]<0>(&v21, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v23, 962, &v22, &v21);
  }
  v4 = operator new();
  v5 = DSPGraph::Box::Box((DSPGraph::Box *)v4, 1u, 0);
  *(_QWORD *)(v4 + 772) = 0;
  *(_OWORD *)(v4 + 784) = 0u;
  *(_OWORD *)(v4 + 800) = 0u;
  *(_BYTE *)(v4 + 816) = 0;
  *(_OWORD *)(v4 + 824) = 0u;
  *(_OWORD *)(v4 + 840) = 0u;
  *(_QWORD *)v4 = &off_1E290C0E0;
  *(_QWORD *)(v4 + 856) = 0;
  *(_QWORD *)(v4 + 56) = DSPGraph::Graph::generateSerialNumber(v5);
  v7 = *(unint64_t **)(a1 + 312);
  v6 = *(_QWORD *)(a1 + 320);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD *)(a1 + 304);
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v13);
    else
      v14 = 0;
    v15 = (unint64_t *)(v13 + 8 * v10);
    v16 = v13 + 8 * v14;
    *v15 = v4;
    v8 = v15 + 1;
    v18 = *(char **)(a1 + 304);
    v17 = *(char **)(a1 + 312);
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = *(char **)(a1 + 304);
    }
    *(_QWORD *)(a1 + 304) = v15;
    *(_QWORD *)(a1 + 312) = v8;
    *(_QWORD *)(a1 + 320) = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  *(_QWORD *)(a1 + 312) = v8;
  DSPGraph::Graph::addBox(a1, v4, a2, 0, 0);
  return v4;
}

void sub_18EE3AB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

unint64_t DSPGraph::Graph::addInput(uint64_t a1, const std::string *a2)
{
  unint64_t v4;
  DSPGraph::Box *v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (*(_BYTE *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v22, "addInput");
    std::string::basic_string[abi:ne180100]<0>(&v21, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v23, 947, &v22, &v21);
  }
  v4 = operator new();
  v5 = DSPGraph::Box::Box((DSPGraph::Box *)v4, 0, 1u);
  *(_QWORD *)(v4 + 772) = 0;
  *(_OWORD *)(v4 + 784) = 0u;
  *(_OWORD *)(v4 + 800) = 0u;
  *(_BYTE *)(v4 + 816) = 0;
  *(_OWORD *)(v4 + 824) = 0u;
  *(_OWORD *)(v4 + 840) = 0u;
  *(_QWORD *)v4 = off_1E290BDC0;
  *(_BYTE *)(v4 + 856) = 0;
  *(_QWORD *)(v4 + 920) = 0;
  *(_OWORD *)(v4 + 864) = 0u;
  *(_OWORD *)(v4 + 880) = 0u;
  *(_OWORD *)(v4 + 896) = 0u;
  *(_WORD *)(v4 + 912) = 0;
  *(_QWORD *)(v4 + 56) = DSPGraph::Graph::generateSerialNumber(v5);
  v7 = *(unint64_t **)(a1 + 288);
  v6 = *(_QWORD *)(a1 + 296);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD *)(a1 + 280);
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v13);
    else
      v14 = 0;
    v15 = (unint64_t *)(v13 + 8 * v10);
    v16 = v13 + 8 * v14;
    *v15 = v4;
    v8 = v15 + 1;
    v18 = *(char **)(a1 + 280);
    v17 = *(char **)(a1 + 288);
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = *(char **)(a1 + 280);
    }
    *(_QWORD *)(a1 + 280) = v15;
    *(_QWORD *)(a1 + 288) = v8;
    *(_QWORD *)(a1 + 296) = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  *(_QWORD *)(a1 + 288) = v8;
  DSPGraph::Graph::addBox(a1, v4, a2, 0, 0);
  return v4;
}

void sub_18EE3AD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Graph::connectParameter(uint64_t a1, unsigned int a2, __int128 *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (*(_BYTE *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "connectParameter");
    std::string::basic_string[abi:ne180100]<0>(&v17, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v19, 2319, &v18, &v17);
  }
  v4 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((_QWORD *)(a1 + 520), a2);
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "connectParameter");
    std::string::basic_string[abi:ne180100]<0>(&v17, "connectParameter : inParamID not found");
    DSPGraph::ThrowException(1852204065, &v19, 2324, &v18, &v17);
  }
  v5 = v4;
  v7 = (_QWORD *)v4[6];
  v6 = v4[7];
  if ((unint64_t)v7 >= v6)
  {
    v10 = (_QWORD *)v4[5];
    v11 = 0xAAAAAAAAAAAAAAABLL * (v7 - v10) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v10) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(24 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * (v7 - v10)];
    *(_OWORD *)v15 = *a3;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a3 + 2);
    v9 = v15 + 24;
    if (v7 != v10)
    {
      do
      {
        v16 = *(_OWORD *)(v7 - 3);
        *((_DWORD *)v15 - 2) = *((_DWORD *)v7 - 2);
        *(_OWORD *)(v15 - 24) = v16;
        v15 -= 24;
        v7 -= 3;
      }
      while (v7 != v10);
      v7 = (_QWORD *)v5[5];
    }
    v5[5] = (uint64_t)v15;
    v5[6] = (uint64_t)v9;
    v5[7] = (uint64_t)&v14[24 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    v8 = *a3;
    v7[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
    v9 = v7 + 3;
  }
  v5[6] = (uint64_t)v9;
}

void sub_18EE3AFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::CodecDecoderFactory::BuildCodecConverterChain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OpaqueAudioComponentInstance *v9;
  OpaqueAudioComponentInstance *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  OpaqueAudioComponentInstance *v14;
  char mSampleRate_low;
  int v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  OSStatus v20;
  int *v21;
  OSStatus v22;
  int v23;
  int v24;
  OSStatus v25;
  void **v26;
  FILE *v27;
  size_t v28;
  CFPropertyListRef v29;
  const void *v30;
  CFTypeID v31;
  AudioUnit v32;
  OpaqueAudioComponent *Next;
  OSStatus v34;
  uint64_t v35;
  const char *v36;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  uint32_t v40;
  OSStatus v41;
  char v42;
  OSStatus v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  OpaqueAudioComponent *v47;
  acv2::CodecConverter *v48;
  __int128 v49;
  uint64_t v50;
  unsigned int v51;
  UInt32 mBitsPerChannel;
  __int128 v53;
  __int128 v54;
  NSObject *v56;
  const char *v57;
  _DWORD *v58;
  NSObject *v59;
  const char *v60;
  _DWORD *exception;
  _DWORD *v62;
  std::runtime_error *v63;
  std::runtime_error *v64;
  std::runtime_error *v65;
  void *v66;
  _OWORD v68[5];
  AudioComponentInstance outInstance;
  CFDataRef data;
  int v71;
  void *v72;
  int v73;
  void *v74[2];
  char v75;
  AudioStreamBasicDescription inData;
  __int128 __p;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  _OWORD v81[2];
  _BYTE buf[32];
  _BYTE v83[48];
  Boolean outWritable[8];
  AudioUnit v85;
  Boolean *v86;
  AudioComponentDescription outSize;
  OSType *p_componentManufacturer;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a2 + 52))
  {
    v17 = 1718449215;
    AudioConverterLog();
    v18 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CodecConverterFactory.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 179;
      _os_log_impl(&dword_18EE07000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d wildcard for output LPCM format flags is not allowed", buf, 0x12u);
    }
    return v17;
  }
  v9 = *(OpaqueAudioComponentInstance **)(a3 + 80);
  outInstance = v9;
  v10 = *(OpaqueAudioComponentInstance **)(a3 + 120);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)buf = *(_OWORD *)a2;
  *(_OWORD *)&buf[16] = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)v83 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v83[16] = v12;
  *(_OWORD *)&v83[32] = *(_OWORD *)(a2 + 64);
  v13 = *(_QWORD *)buf;
  if (*(double *)buf == 0.0)
  {
    v13 = *(_QWORD *)&v83[8];
    *(_QWORD *)buf = *(_QWORD *)&v83[8];
  }
  *(_QWORD *)&v83[8] = v13;
  v14 = v9;
  if (!v9)
  {
    v17 = AudioComponentInstanceNew(*(AudioComponent *)(a1 + 32), &outInstance);
    if ((_DWORD)v17)
      return v17;
    v14 = outInstance;
    if (!outInstance)
      return 2003329396;
  }
  if (!*(_BYTE *)(a3 + 113))
    goto LABEL_75;
  __p = 0uLL;
  *(_QWORD *)&v78 = 0;
  inData.mSampleRate = *(Float64 *)buf;
  *(_OWORD *)&inData.mFormatID = xmmword_18F116FC0;
  inData.mBytesPerFrame = 4;
  inData.mChannelsPerFrame = *(_DWORD *)&buf[28];
  *(_QWORD *)&inData.mBitsPerChannel = 32;
  if (acv2::CodecConverterFactory::CodecCanInitializeWith(v14, (const AudioStreamBasicDescription *)buf, &inData, (CA::StreamDescription *)a4))
  {
    outSize.componentType = 0;
    outWritable[0] = 0;
    if (AudioCodecGetPropertyInfo(v14, 0x696D7264u, &outSize.componentType, outWritable) || !outSize.componentType)
      goto LABEL_8;
    v38 = (void *)__p;
    if ((unint64_t)outSize.componentType <= *((_QWORD *)&__p + 1) - (_QWORD)__p)
    {
      if ((unint64_t)outSize.componentType < *((_QWORD *)&__p + 1) - (_QWORD)__p)
        *((_QWORD *)&__p + 1) = __p + outSize.componentType;
    }
    else
    {
      std::vector<unsigned char>::__append((std::vector<char> *)&__p, outSize.componentType - (*((_QWORD *)&__p + 1) - __p));
      v38 = (void *)__p;
    }
    if (AudioCodecGetProperty(v14, 0x696D7264u, &outSize.componentType, v38))
    {
LABEL_8:
      mSampleRate_low = 0;
      v16 = 0;
    }
    else
    {
      if ((unint64_t)outSize.componentType <= *((_QWORD *)&__p + 1) - (_QWORD)__p)
      {
        v66 = (void *)__p;
        LODWORD(v14) = (unint64_t)outSize.componentType >= *((_QWORD *)&__p + 1) - (_QWORD)__p
                     ? DWORD2(__p)
                     : __p + outSize.componentType;
      }
      else
      {
        std::vector<unsigned char>::__append((std::vector<char> *)&__p, outSize.componentType - (*((_QWORD *)&__p + 1) - __p));
        LODWORD(v14) = DWORD2(__p);
        v66 = (void *)__p;
      }
      mSampleRate_low = LOBYTE(inData.mSampleRate);
      v80 = *(_OWORD *)((char *)&inData.mSampleRate + 1);
      v81[0] = *(_OWORD *)((char *)&inData.mBytesPerPacket + 1);
      *(_QWORD *)((char *)v81 + 15) = *(_QWORD *)&inData.mBitsPerChannel;
      *(_QWORD *)&v78 = 0;
      __p = 0uLL;
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
    mSampleRate_low = 0;
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (!v16)
    goto LABEL_75;
  v83[8] = mSampleRate_low;
  *(_OWORD *)&v83[9] = v80;
  *(_OWORD *)&v83[25] = v81[0];
  *(_QWORD *)&v83[40] = *(_QWORD *)((char *)v81 + 15);
  v19 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)&v83[16] = 1819304813;
  *(_DWORD *)&v83[36] = v19;
  if (v10)
  {
    AudioUnitUninitialize(v10);
    goto LABEL_20;
  }
  outSize.componentFlagsMask = 0;
  *(_OWORD *)&outSize.componentType = *(_OWORD *)"xmuamed3lppa";
  Next = AudioComponentFindNext(0, &outSize);
  if (!Next)
  {
    AudioConverterLog();
    v39 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(inData.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&inData.mSampleRate + 4) = "CodecConverterFactory.cpp";
      LOWORD(inData.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inData.mFormatFlags + 2) = 86;
      v36 = "%25s:%-5d Unable to enumerate spatial renderer";
      v37 = v39;
      v40 = 18;
LABEL_69:
      _os_log_impl(&dword_18EE07000, v37, OS_LOG_TYPE_ERROR, v36, (uint8_t *)&inData, v40);
      goto LABEL_70;
    }
    goto LABEL_70;
  }
  *(_QWORD *)outWritable = 0;
  v34 = AudioComponentInstanceNew(Next, (AudioComponentInstance *)outWritable);
  if (v34)
  {
    AudioConverterLog();
    v35 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(inData.mSampleRate) = 136315650;
      *(_QWORD *)((char *)&inData.mSampleRate + 4) = "CodecConverterFactory.cpp";
      LOWORD(inData.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inData.mFormatFlags + 2) = 93;
      HIWORD(inData.mBytesPerPacket) = 1024;
      inData.mFramesPerPacket = v34;
      v36 = "%25s:%-5d Unable to instantiate spatial renderer (%u)";
      v37 = v35;
LABEL_68:
      v40 = 24;
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  LODWORD(v74[0]) = 1;
  v43 = AudioUnitSetProperty(*(AudioUnit *)outWritable, 0x25u, 0, 0, v74, 4u);
  v10 = *(OpaqueAudioComponentInstance **)outWritable;
  if (v43)
  {
    AudioComponentInstanceDispose(*(AudioComponentInstance *)outWritable);
    AudioConverterLog();
    v44 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(inData.mSampleRate) = 136315650;
      *(_QWORD *)((char *)&inData.mSampleRate + 4) = "CodecConverterFactory.cpp";
      LOWORD(inData.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inData.mFormatFlags + 2) = 102;
      HIWORD(inData.mBytesPerPacket) = 1024;
      inData.mFramesPerPacket = v43;
      v36 = "%25s:%-5d Unable to set offline render mode of spatial renderer (%u)";
      v37 = v44;
      goto LABEL_68;
    }
LABEL_70:
    v10 = 0;
    goto LABEL_71;
  }
  if (*(_QWORD *)outWritable)
  {
LABEL_20:
    AudioFormat_CompleteChannelLayoutWithCoordinates((const CA::ChannelLayout *)(a3 + 128), &v72);
    LOBYTE(inData.mSampleRate) = mSampleRate_low;
    *(_OWORD *)((char *)&inData.mSampleRate + 1) = v80;
    *(_OWORD *)((char *)&inData.mBytesPerPacket + 1) = v81[0];
    *(_QWORD *)&inData.mBitsPerChannel = *(_QWORD *)((char *)v81 + 15);
    inData.mFormatID = 1885564203;
    v20 = AudioUnitSetProperty(v10, 8u, 1u, 0, &inData, 0x28u);
    if (v20)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_118;
      outSize.componentType = 136315394;
      *(_QWORD *)&outSize.componentSubType = "CodecConverterFactory.cpp";
      LOWORD(outSize.componentFlags) = 1024;
      *(UInt32 *)((char *)&outSize.componentFlags + 2) = 121;
      v56 = MEMORY[0x1E0C81028];
      v57 = "%25s:%-5d  set kAudioUnitProperty_StreamFormat(kAudioUnitScope_Input, 0) on AUSM failed";
    }
    else
    {
      v20 = AudioUnitSetProperty(v10, 0xC9Fu, 0, 0, v66, (_DWORD)v14 - (_DWORD)v66);
      if (!v20)
      {
        v20 = AudioUnitSetProperty(v10, 8u, 2u, 0, &v83[8], 0x28u);
        if (!v20)
        {
          v21 = (int *)v72;
          v22 = AudioUnitSetProperty(v10, 0x13u, 2u, 0, v72, v73 - (_DWORD)v72);
          if (!v22)
          {
            v23 = *v21;
            if (*v21 == 6946818)
              v24 = 1;
            else
              v24 = 3;
            v71 = v24;
            v25 = AudioUnitSetProperty(v10, 0xC1Cu, 0, 0, &v71, 4u);
            if (v25)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_128;
              outSize.componentType = 136315394;
              *(_QWORD *)&outSize.componentSubType = "CodecConverterFactory.cpp";
              LOWORD(outSize.componentFlags) = 1024;
              *(UInt32 *)((char *)&outSize.componentFlags + 2) = 143;
              v59 = MEMORY[0x1E0C81028];
              v60 = "%25s:%-5d  set kAudioUnitProperty_SpatialMixerOutputType on AUSM failed";
              goto LABEL_127;
            }
            if (v23 != 6946818)
            {
LABEL_58:
              v25 = AudioUnitInitialize(v10);
              if (!v25)
              {
                operator delete(v21);
                v42 = 1;
                goto LABEL_72;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
LABEL_128:
                exception = __cxa_allocate_exception(4uLL);
                *exception = v25;
                __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
              }
              outSize.componentType = 136315394;
              *(_QWORD *)&outSize.componentSubType = "CodecConverterFactory.cpp";
              LOWORD(outSize.componentFlags) = 1024;
              *(UInt32 *)((char *)&outSize.componentFlags + 2) = 154;
              v59 = MEMORY[0x1E0C81028];
              v60 = "%25s:%-5d  set AudioUnitInitialize on AUSM failed";
LABEL_127:
              _os_log_impl(&dword_18EE07000, v59, OS_LOG_TYPE_ERROR, v60, (uint8_t *)&outSize, 0x12u);
              goto LABEL_128;
            }
            std::string::basic_string[abi:ne180100]<0>(v74, "/System/Library/Audio/Tunings/Generic/AU/aumx-3dem-appl-headphone-general-multichannel.aupreset");
            if (v75 >= 0)
              v26 = v74;
            else
              v26 = (void **)v74[0];
            v27 = fopen((const char *)v26, "rb");
            *(_QWORD *)outWritable = &off_1E28FFD08;
            v85 = (AudioUnit)MEMORY[0x1E0C832F8];
            v86 = outWritable;
            *(_QWORD *)&outSize.componentType = v27;
            p_componentManufacturer = &outSize.componentManufacturer;
            std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone((uint64_t)outWritable, &outSize.componentManufacturer);
            if (!*(_QWORD *)&outSize.componentType)
            {
              v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v63, "Could not construct");
            }
            fseek(*(FILE **)&outSize.componentType, 0, 2);
            v28 = MEMORY[0x193FFEA18](*(_QWORD *)&outSize.componentType);
            std::vector<unsigned char>::vector(outWritable, v28);
            fseek(*(FILE **)&outSize.componentType, 0, 0);
            fread(*(void **)outWritable, 1uLL, (size_t)v85 - *(_QWORD *)outWritable, *(FILE **)&outSize.componentType);
            data = CFDataCreate(0, *(const UInt8 **)outWritable, (CFIndex)v85 - *(_QWORD *)outWritable);
            if (!data)
            {
              v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v64, "Could not construct");
            }
            if (*(_QWORD *)outWritable)
            {
              v85 = *(AudioUnit *)outWritable;
              operator delete(*(void **)outWritable);
            }
            std::unique_ptr<__sFILE,std::function<int ()(__sFILE*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&outSize);
            if (v75 < 0)
              operator delete(v74[0]);
            if (data)
            {
              v29 = CFPropertyListCreateWithData(0, data, 0, 0, 0);
              v30 = v29;
              if (v29)
              {
                v31 = CFGetTypeID(v29);
                if (v31 == CFDictionaryGetTypeID())
                {
                  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)outWritable, v30);
                  v32 = *(AudioUnit *)outWritable;
LABEL_53:
                  v74[0] = v32;
                  v41 = AudioUnitSetProperty(v10, 0, 0, 0, v74, 8u);
                  if (v41)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      outSize.componentType = 136315394;
                      *(_QWORD *)&outSize.componentSubType = "CodecConverterFactory.cpp";
                      LOWORD(outSize.componentFlags) = 1024;
                      *(UInt32 *)((char *)&outSize.componentFlags + 2) = 151;
                      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  set default headphone preset on AUSM failed", (uint8_t *)&outSize, 0x12u);
                    }
                    v62 = __cxa_allocate_exception(4uLL);
                    *v62 = v41;
                    __cxa_throw(v62, MEMORY[0x1E0DE4EF0], 0);
                  }
                  if (*(_QWORD *)outWritable)
                    CFRelease(*(CFTypeRef *)outWritable);
                  if (data)
                    CFRelease(data);
                  goto LABEL_58;
                }
                CFRelease(v30);
              }
              else if (!CFDictionaryGetTypeID())
              {
                v32 = 0;
                *(_QWORD *)outWritable = 0;
                goto LABEL_53;
              }
            }
            v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v65, "Could not construct");
          }
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            outSize.componentType = 136315394;
            *(_QWORD *)&outSize.componentSubType = "CodecConverterFactory.cpp";
            LOWORD(outSize.componentFlags) = 1024;
            *(UInt32 *)((char *)&outSize.componentFlags + 2) = 135;
            _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  set kAudioUnitProperty_AudioChannelLayout(kAudioUnitScope_Output, 0) on AUSM failed", (uint8_t *)&outSize, 0x12u);
          }
          v58 = __cxa_allocate_exception(4uLL);
          *v58 = v22;
LABEL_122:
          __cxa_throw(v58, MEMORY[0x1E0DE4EF0], 0);
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          outSize.componentType = 136315394;
          *(_QWORD *)&outSize.componentSubType = "CodecConverterFactory.cpp";
          LOWORD(outSize.componentFlags) = 1024;
          *(UInt32 *)((char *)&outSize.componentFlags + 2) = 130;
          v56 = MEMORY[0x1E0C81028];
          v57 = "%25s:%-5d  set kAudioUnitProperty_StreamFormat(kAudioUnitScope_Output, 0) on AUSM failed";
          goto LABEL_117;
        }
LABEL_118:
        v58 = __cxa_allocate_exception(4uLL);
        *v58 = v20;
        goto LABEL_122;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_118;
      outSize.componentType = 136315394;
      *(_QWORD *)&outSize.componentSubType = "CodecConverterFactory.cpp";
      LOWORD(outSize.componentFlags) = 1024;
      *(UInt32 *)((char *)&outSize.componentFlags + 2) = 126;
      v56 = MEMORY[0x1E0C81028];
      v57 = "%25s:%-5d  set kAudioUnitProperty_SpatialMixerImmersiveRendererData on AUSM failed";
    }
LABEL_117:
    _os_log_impl(&dword_18EE07000, v56, OS_LOG_TYPE_ERROR, v57, (uint8_t *)&outSize, 0x12u);
    goto LABEL_118;
  }
LABEL_71:
  v42 = 0;
LABEL_72:
  if (v66)
    operator delete(v66);
  if ((v42 & 1) != 0)
    goto LABEL_83;
LABEL_75:
  if (v10)
  {
    AudioUnitUninitialize(v10);
    AudioComponentInstanceDispose(v10);
  }
  v68[2] = *(_OWORD *)v83;
  v68[3] = *(_OWORD *)&v83[16];
  v68[4] = *(_OWORD *)&v83[32];
  v68[0] = *(_OWORD *)buf;
  v68[1] = *(_OWORD *)&buf[16];
  v45 = acv2::CodecConverterFactory::ChooseIntermediateFormat(a1, outInstance, v68, (uint64_t)buf, (AudioStreamBasicDescription *)&v83[8], 0, 0);
  v17 = v45;
  if ((_DWORD)v45)
    v46 = v9 != 0;
  else
    v46 = 1;
  if (!v46)
  {
    AudioComponentInstanceDispose(outInstance);
    return v17;
  }
  if (!(_DWORD)v45)
  {
    v10 = 0;
LABEL_83:
    if (!v9 && !*(_DWORD *)&v83[36])
    {
      AudioComponentInstanceDispose(outInstance);
      return 4294967246;
    }
    if (!*(_DWORD *)&v83[36])
      return 4294967246;
    if (!*(_DWORD *)&buf[28])
      *(_DWORD *)&buf[28] = *(_DWORD *)&v83[36];
    v47 = *(OpaqueAudioComponent **)(a1 + 32);
    v48 = (acv2::CodecConverter *)operator new();
    acv2::CodecConverter::CodecConverter((uint64_t)v48, a4, v47, (uint64_t)outInstance, (uint64_t)v10, (__int128 *)buf, (_OWORD *)a2, (char **)(a3 + 128), (uint64_t *)(a3 + 64), 0);
    *(_QWORD *)&v80 = v48;
    acv2::AudioConverterChain::AddCodec((_QWORD *)a4, (uint64_t *)&v80);
    *(_OWORD *)&inData.mSampleRate = *(_OWORD *)&v83[8];
    *(_OWORD *)&inData.mBytesPerPacket = *(_OWORD *)&v83[24];
    v49 = *(_OWORD *)(a2 + 56);
    __p = *(_OWORD *)(a2 + 40);
    inData.mFramesPerPacket = 1;
    v78 = v49;
    v50 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)&inData.mBitsPerChannel = *(_QWORD *)&v83[40];
    v79 = v50;
    if (*(double *)&__p == 0.0)
      *(Float64 *)&__p = inData.mSampleRate;
    if (!HIDWORD(v78))
    {
      if ((BYTE12(__p) & 0x20) != 0)
        v51 = DWORD2(v78);
      else
        v51 = ((v79 + 7) >> 3) * inData.mChannelsPerFrame;
      *((_QWORD *)&v78 + 1) = __PAIR64__(inData.mChannelsPerFrame, v51);
      *(_QWORD *)&v78 = v51 | 0x100000000;
    }
    mBitsPerChannel = inData.mBitsPerChannel;
    if ((inData.mBitsPerChannel & 0x80000000) != 0)
      mBitsPerChannel = -inData.mBitsPerChannel;
    inData.mBitsPerChannel = (mBitsPerChannel + 7) & 0xFFFFFFF8;
    v17 = (*(uint64_t (**)(uint64_t, AudioStreamBasicDescription *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 40))(a5, &inData, a3, a4, a5);
    if (!(_DWORD)v17)
    {
      v53 = *(_OWORD *)&buf[16];
      *(_OWORD *)a4 = *(_OWORD *)buf;
      *(_OWORD *)(a4 + 16) = v53;
      *(_QWORD *)(a4 + 32) = *(_QWORD *)v83;
      v54 = v78;
      *(_OWORD *)(a4 + 40) = __p;
      *(_OWORD *)(a4 + 56) = v54;
      *(_QWORD *)(a4 + 72) = v79;
      acv2::CodecConverter::CheckInitialize(v48, 0, 0);
    }
    if ((_QWORD)v80)
      (*(void (**)(_QWORD))(*(_QWORD *)v80 + 8))(v80);
  }
  return v17;
}

void sub_18EE3BDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint8_t buf,int a39,int a40,__int16 a41,__int16 a42,__int16 a43,__int16 a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a52)
    (*(void (**)(uint64_t))(*(_QWORD *)a52 + 8))(a52);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::CodecConverterFactory::ChooseIntermediateFormat(uint64_t a1, AudioCodec inCodec, _OWORD *a3, uint64_t a4, AudioStreamBasicDescription *a5, int a6, signed int a7)
{
  int v8;
  AudioCodecPropertyID v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  AudioCodecPropertyID v15;
  uint64_t PropertyInfo;
  CA::Implementation *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  double *v21;
  double *v22;
  unint64_t v23;
  int v24;
  int v25;
  double v27;
  double mSampleRate;
  double v29;
  UInt32 mChannelsPerFrame;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  double v35;
  int v36;
  unsigned int v37;
  int v38;
  double *v39;
  double *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int mBitsPerChannel;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  double *v78;
  double v79;
  double *v80;
  double *v81;
  double v82;
  double v83;
  uint64_t v84;
  char *v85;
  double *v86;
  char *v87;
  int64_t v88;
  NSObject *v89;
  _DWORD *exception;
  __int128 v91;
  __int128 v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  AudioFormatID mFormatID;
  _OWORD v102[5];
  Boolean outWritable;
  UInt32 outSize;
  void *outPropertyData;
  char *v106;
  uint64_t v107;
  uint8_t buf[4];
  const char *v109;
  __int16 v110;
  int v111;
  uint64_t v112;

  v8 = a6;
  v112 = *MEMORY[0x1E0C80C00];
  outPropertyData = 0;
  v106 = 0;
  v107 = 0;
  outSize = 0;
  outWritable = 0;
  if (a6)
    v11 = 1768305775;
  else
    v11 = 1868969065;
  if (AudioCodecGetPropertyInfo(inCodec, v11, &outSize, &outWritable))
  {
LABEL_7:
    if (v8)
      v15 = 1768320291;
    else
      v15 = 1868983587;
    PropertyInfo = AudioCodecGetPropertyInfo(inCodec, v15, &outSize, &outWritable);
    if ((_DWORD)PropertyInfo)
      goto LABEL_228;
    std::vector<CA::StreamDescription>::resize((char **)&outPropertyData, outSize / 0x28uLL);
    PropertyInfo = AudioCodecGetProperty(inCodec, v15, &outSize, outPropertyData);
    if ((_DWORD)PropertyInfo)
      goto LABEL_228;
    std::vector<CA::StreamDescription>::resize((char **)&outPropertyData, outSize / 0x28uLL);
    v17 = (CA::Implementation *)outPropertyData;
    v18 = v106;
    goto LABEL_14;
  }
  std::vector<CA::StreamDescription>::resize((char **)&outPropertyData, outSize / 0x28uLL);
  v12 = outPropertyData;
  v13 = *(_QWORD *)(a4 + 32);
  v14 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)outPropertyData = *(_OWORD *)a4;
  v12[1] = v14;
  *((_QWORD *)v12 + 4) = v13;
  if (AudioCodecGetProperty(inCodec, v11, &outSize, v12))
  {
    v106 = (char *)v12;
    goto LABEL_7;
  }
  std::vector<CA::StreamDescription>::resize((char **)&outPropertyData, outSize / 0x28uLL);
  v17 = (CA::Implementation *)outPropertyData;
  v18 = v106;
  if (outPropertyData == v106)
    goto LABEL_7;
LABEL_14:
  v19 = a3[3];
  v102[2] = a3[2];
  v102[3] = v19;
  v102[4] = a3[4];
  v20 = a3[1];
  v102[0] = *a3;
  v102[1] = v20;
  if (v17 == (CA::Implementation *)v18)
  {
LABEL_216:
    AudioConverterLog();
    v89 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v109 = "CodecConverterFactory.cpp";
      v110 = 1024;
      v111 = 831;
      _os_log_impl(&dword_18EE07000, v89, OS_LOG_TYPE_ERROR, "%25s:%-5d codec did not accept any proposed uncompressed format", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1718449215;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  v21 = 0;
  v22 = 0;
  v23 = 0;
  mFormatID = a5->mFormatID;
  if (mFormatID != 1885564203)
    v8 = 1;
  do
  {
    v24 = *((_DWORD *)v17 + 2);
    if (v24 == 1819304813)
      v25 = v8;
    else
      v25 = 1;
    if (v24 != a5->mFormatID && v25 != 0)
    {
      if ((unint64_t)v22 < v23)
        goto LABEL_35;
      v31 = v22 - v21;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v23 - (_QWORD)v21) >> 2 > v32)
        v32 = (uint64_t)(v23 - (_QWORD)v21) >> 2;
      if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33)
        v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
      else
        v34 = 0;
      v39 = (double *)(v33 + 8 * v31);
      *v39 = 0.0;
      v40 = v39 + 1;
      while (v22 != v21)
      {
        v41 = *((_QWORD *)v22-- - 1);
        *((_QWORD *)v39-- - 1) = v41;
      }
      goto LABEL_199;
    }
    v27 = *(double *)v17;
    mSampleRate = a5->mSampleRate;
    if (a5->mSampleRate == 0.0)
      mSampleRate = *(double *)a4;
    if (v27 == 0.0)
    {
      *(double *)v17 = mSampleRate;
      v27 = mSampleRate;
LABEL_29:
      v29 = 0.99;
      goto LABEL_30;
    }
    if (mSampleRate == 0.0)
      goto LABEL_29;
    if (mFormatID == 1885564203)
    {
      v29 = 0.99;
      if (v27 != mSampleRate)
      {
        if ((unint64_t)v22 < v23)
          goto LABEL_35;
        v64 = v22 - v21;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v23 - (_QWORD)v21) >> 2 > v65)
          v65 = (uint64_t)(v23 - (_QWORD)v21) >> 2;
        if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v65;
        if (v33)
          v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
        else
          v34 = 0;
        v39 = (double *)(v33 + 8 * v64);
        *v39 = 0.0;
        v40 = v39 + 1;
        while (v22 != v21)
        {
          v74 = *((_QWORD *)v22-- - 1);
          *((_QWORD *)v39-- - 1) = v74;
        }
        goto LABEL_199;
      }
    }
    else
    {
      if (v27 >= mSampleRate)
      {
        if (v27 <= mSampleRate)
          goto LABEL_29;
        v35 = mSampleRate * 0.2 / v27;
      }
      else
      {
        v35 = v27 * 0.5 / mSampleRate;
      }
      v29 = v35 * 0.99;
    }
LABEL_30:
    mChannelsPerFrame = *((_DWORD *)v17 + 7);
    if (mChannelsPerFrame)
    {
      if (mChannelsPerFrame != a5->mChannelsPerFrame)
      {
        if (mFormatID == 1885564203)
        {
          if ((unint64_t)v22 < v23)
            goto LABEL_35;
          v62 = v22 - v21;
          v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v23 - (_QWORD)v21) >> 2 > v63)
            v63 = (uint64_t)(v23 - (_QWORD)v21) >> 2;
          if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v63;
          if (v33)
            v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
          else
            v34 = 0;
          v39 = (double *)(v33 + 8 * v62);
          *v39 = 0.0;
          v40 = v39 + 1;
          while (v22 != v21)
          {
            v72 = *((_QWORD *)v22-- - 1);
            *((_QWORD *)v39-- - 1) = v72;
          }
          goto LABEL_199;
        }
        v29 = v29 * 0.1;
      }
    }
    else
    {
      mChannelsPerFrame = *(_DWORD *)(a4 + 28);
      if (!mChannelsPerFrame)
        mChannelsPerFrame = a5->mChannelsPerFrame;
      v36 = *((_DWORD *)v17 + 3);
      if ((v36 & 0x20) != 0)
      {
        v37 = *((_DWORD *)v17 + 6);
        v38 = 1;
      }
      else
      {
        v37 = (*((_DWORD *)v17 + 8) + 7) >> 3;
        v38 = mChannelsPerFrame;
      }
      v42 = v37 * v38;
      *((_DWORD *)v17 + 4) = v42;
      *((_DWORD *)v17 + 5) = 1;
      *((_DWORD *)v17 + 6) = v42;
      *((_DWORD *)v17 + 7) = mChannelsPerFrame;
      *((_DWORD *)v17 + 3) = v36;
    }
    v43 = *((_DWORD *)v17 + 8);
    if (v43 >= 0)
      v44 = *((_DWORD *)v17 + 8);
    else
      v44 = -v43;
    v45 = v44 + 7;
    mBitsPerChannel = a5->mBitsPerChannel;
    if (mBitsPerChannel >= 0)
      v47 = a5->mBitsPerChannel;
    else
      v47 = -mBitsPerChannel;
    v48 = (v47 + 7) & 0xFFFFFFF8;
    if (a7 >= 0)
      v49 = a7;
    else
      v49 = -a7;
    a7 = (v49 + 7) & 0xFFFFFFF8;
    v50 = v45 & 0xFFFFFFF8;
    if (v50)
    {
      if (v50 != a7)
      {
        if (v50 == v48)
        {
          if (a7)
            v29 = v29 * 0.9;
        }
        else if (v50 >= v48)
        {
          if (mFormatID == 1885564203)
          {
            if ((unint64_t)v22 < v23)
            {
LABEL_35:
              *v22++ = 0.0;
              goto LABEL_202;
            }
            v70 = v22 - v21;
            v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v23 - (_QWORD)v21) >> 2 > v71)
              v71 = (uint64_t)(v23 - (_QWORD)v21) >> 2;
            if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v71;
            if (v33)
              v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
            else
              v34 = 0;
            v39 = (double *)(v33 + 8 * v70);
            *v39 = 0.0;
            v40 = v39 + 1;
            while (v22 != v21)
            {
              v76 = *((_QWORD *)v22-- - 1);
              *((_QWORD *)v39-- - 1) = v76;
            }
            goto LABEL_199;
          }
          v29 = v29 * 0.99;
        }
        else
        {
          if (mFormatID == 1885564203)
          {
            if ((unint64_t)v22 < v23)
              goto LABEL_35;
            v68 = v22 - v21;
            v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v23 - (_QWORD)v21) >> 2 > v69)
              v69 = (uint64_t)(v23 - (_QWORD)v21) >> 2;
            if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v69;
            if (v33)
              v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
            else
              v34 = 0;
            v39 = (double *)(v33 + 8 * v68);
            *v39 = 0.0;
            v40 = v39 + 1;
            while (v22 != v21)
            {
              v75 = *((_QWORD *)v22-- - 1);
              *((_QWORD *)v39-- - 1) = v75;
            }
            goto LABEL_199;
          }
          if ((*((_BYTE *)v17 + 12) & 1) != 0)
            v29 = v29 * ((double)v50 / (double)v48 * 0.7);
          else
            v29 = v29 * ((double)v50 / (double)v48 * 0.7) * 0.7;
        }
      }
    }
    else if (a7)
    {
      v50 = (v49 + 7) & 0xFFFFFFF8;
    }
    else
    {
      v50 = v48;
    }
    v51 = *((_DWORD *)v17 + 3);
    v52 = a5->mFormatFlags ^ v51;
    if ((v52 & 2) != 0)
    {
      if (mFormatID == 1885564203)
      {
        if ((unint64_t)v22 < v23)
          goto LABEL_35;
        v60 = v22 - v21;
        v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v23 - (_QWORD)v21) >> 2 > v61)
          v61 = (uint64_t)(v23 - (_QWORD)v21) >> 2;
        if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v61;
        if (v33)
          v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
        else
          v34 = 0;
        v39 = (double *)(v33 + 8 * v60);
        *v39 = 0.0;
        v40 = v39 + 1;
        while (v22 != v21)
        {
          v67 = *((_QWORD *)v22-- - 1);
          *((_QWORD *)v39-- - 1) = v67;
        }
        goto LABEL_199;
      }
      v29 = v29 * 0.11;
      if ((v52 & 0x20) == 0)
        goto LABEL_91;
      goto LABEL_90;
    }
    if ((v52 & 0x20) != 0)
    {
      if (mFormatID == 1885564203)
      {
        if ((unint64_t)v22 < v23)
          goto LABEL_35;
        v53 = v22 - v21;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v23 - (_QWORD)v21) >> 2 > v54)
          v54 = (uint64_t)(v23 - (_QWORD)v21) >> 2;
        if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v54;
        if (v33)
          v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
        else
          v34 = 0;
        v39 = (double *)(v33 + 8 * v53);
        *v39 = 0.0;
        v40 = v39 + 1;
        while (v22 != v21)
        {
          v73 = *((_QWORD *)v22-- - 1);
          *((_QWORD *)v39-- - 1) = v73;
        }
        goto LABEL_199;
      }
LABEL_90:
      v29 = v29 * 0.11;
    }
LABEL_91:
    if ((v51 & 0x20) != 0)
      v55 = 1;
    else
      v55 = mChannelsPerFrame;
    v56 = (v55 * v50) >> 3;
    *((_DWORD *)v17 + 5) = 1;
    *((_DWORD *)v17 + 6) = v56;
    *((_DWORD *)v17 + 4) = v56;
    if (v27 == a5->mSampleRate && v24 == a5->mFormatID)
    {
      v57 = v56 == a5->mBytesPerPacket && a5->mFramesPerPacket == 1;
      if (v57
        && mChannelsPerFrame == a5->mChannelsPerFrame
        && v43 == mBitsPerChannel
        && CA::Implementation::EquivalentFormatFlags(v17, a5, 0, 0))
      {
        v29 = 1.0;
      }
    }
    if ((unint64_t)v22 < v23)
    {
      *v22++ = v29;
      goto LABEL_202;
    }
    v58 = v22 - v21;
    v59 = v58 + 1;
    if ((unint64_t)(v58 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if ((uint64_t)(v23 - (_QWORD)v21) >> 2 > v59)
      v59 = (uint64_t)(v23 - (_QWORD)v21) >> 2;
    if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v59;
    if (v33)
      v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
    else
      v34 = 0;
    v39 = (double *)(v33 + 8 * v58);
    *v39 = v29;
    v40 = v39 + 1;
    while (v22 != v21)
    {
      v66 = *((_QWORD *)v22-- - 1);
      *((_QWORD *)v39-- - 1) = v66;
    }
LABEL_199:
    v23 = v33 + 8 * v34;
    if (v21)
      operator delete(v21);
    v21 = v39;
    v22 = v40;
LABEL_202:
    v17 = (CA::Implementation *)((char *)v17 + 40);
  }
  while (v17 != (CA::Implementation *)v18);
  v77 = (char *)outPropertyData;
  if (outPropertyData == v106)
    goto LABEL_216;
  while (1)
  {
    v78 = v21;
    if (v21 != v22 && v21 + 1 != v22)
    {
      v79 = *v21;
      v80 = v21 + 1;
      v78 = v21;
      v81 = v21 + 1;
      do
      {
        v82 = *v81++;
        v83 = v82;
        if (v79 < v82)
        {
          v79 = v83;
          v78 = v80;
        }
        v80 = v81;
      }
      while (v81 != v22);
    }
    v84 = v78 - v21;
    v85 = &v77[40 * v84];
    if ((*(unsigned int (**)(uint64_t, AudioCodec, char *, _OWORD *))(*(_QWORD *)a1 + 120))(a1, inCodec, v85, v102))
    {
      break;
    }
    v86 = &v21[v84];
    if (v22 != v86 + 1)
      memmove(&v21[v84], v86 + 1, (char *)v22 - (char *)(v86 + 1));
    v77 = (char *)outPropertyData;
    v87 = (char *)outPropertyData + 40 * v84;
    v88 = v106 - (v87 + 40);
    if (v106 != v87 + 40)
      memmove(v87, v87 + 40, v106 - (v87 + 40));
    --v22;
    v106 = &v87[v88];
    if (v77 == &v87[v88])
      goto LABEL_216;
  }
  v91 = *(_OWORD *)v85;
  v92 = *((_OWORD *)v85 + 1);
  *(_QWORD *)&a5->mBitsPerChannel = *((_QWORD *)v85 + 4);
  *(_OWORD *)&a5->mSampleRate = v91;
  *(_OWORD *)&a5->mBytesPerPacket = v92;
  if (mFormatID == 1885564203)
    a5->mFormatID = 1885564203;
  if (v21)
    operator delete(v21);
  PropertyInfo = 0;
  v94 = a5->mChannelsPerFrame;
  v93 = a5->mBitsPerChannel;
  if (v93 < 0)
    v93 = -v93;
  v95 = v93 + 7;
  if ((a5->mFormatFlags & 0x20) != 0)
    v94 = 1;
  v96 = v94 * (v95 >> 3);
  a5->mFramesPerPacket = 1;
  a5->mBytesPerFrame = v96;
  a5->mBytesPerPacket = v96;
LABEL_228:
  if (outPropertyData)
    operator delete(outPropertyData);
  return PropertyInfo;
}

void sub_18EE3CAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  void *v24;

  if (a2)
  {
    if (v24)
      operator delete(v24);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x18EE3CA0CLL);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CA::StreamDescription>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  size_t v22;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v21 = &v3[40 * a2];
    goto LABEL_17;
  }
  v7 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v4) >> 3) >= v6)
  {
    v22 = 40 * ((40 * v6 - 40) / 0x28) + 40;
    bzero(a1[1], v22);
    v21 = &v4[v22];
LABEL_17:
    a1[1] = v21;
    return;
  }
  if (a2 > 0x666666666666666)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v3) >> 3);
  v9 = 2 * v8;
  if (2 * v8 <= a2)
    v9 = a2;
  if (v8 >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ISOLoudnessInfo>>(v10);
  v12 = &v11[40 * v5];
  v14 = &v11[40 * v13];
  v15 = 40 * ((40 * v6 - 40) / 0x28) + 40;
  bzero(v12, v15);
  v16 = &v12[v15];
  v18 = *a1;
  v17 = a1[1];
  if (v17 != *a1)
  {
    do
    {
      v19 = *(_OWORD *)(v17 - 40);
      v20 = *(_OWORD *)(v17 - 24);
      *((_QWORD *)v12 - 1) = *((_QWORD *)v17 - 1);
      *(_OWORD *)(v12 - 24) = v20;
      *(_OWORD *)(v12 - 40) = v19;
      v12 -= 40;
      v17 -= 40;
    }
    while (v17 != v18);
    v17 = *a1;
  }
  *a1 = v12;
  a1[1] = v16;
  a1[2] = v14;
  if (v17)
    operator delete(v17);
}

BOOL acv2::CodecConverterFactory::CodecCanInitializeWith(acv2::CodecConverterFactory *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, CA::StreamDescription *a4)
{
  OSStatus Property;
  OSStatus v9;
  _DWORD *exception;
  int outPropertyData;
  UInt32 ioPropertyDataSize;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  outPropertyData = 0;
  ioPropertyDataSize = 4;
  Property = AudioCodecGetProperty(this, 0x696E6974u, &ioPropertyDataSize, &outPropertyData);
  if (Property)
  {
    v9 = Property;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "CodecConverterFactory.cpp";
      v15 = 1024;
      v16 = 548;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  get kAudioCodecPropertyIsInitialized failed", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(4uLL);
    *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  if (outPropertyData)
    AudioCodecUninitialize(this);
  return AudioCodecInitialize(this, a2, a3, 0, 0) == 0;
}

BOOL acv2::CodecDecoderFactory::CodecCanInitialize(int a1, acv2::CodecConverterFactory *this, const AudioStreamBasicDescription *a3, AudioStreamBasicDescription *a4)
{
  return acv2::CodecConverterFactory::CodecCanInitializeWith(this, a4, a3, (CA::StreamDescription *)a4);
}

uint64_t acv2::AudioConverterChain::AddCodec(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  a1[43] = *a2;
  v2 = *a2;
  *a2 = 0;
  v4 = v2;
  acv2::AudioConverterChain::AddStep(a1, &v4);
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void sub_18EE3CE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

AudioComponent AudioComponentInstanceGetComponent(AudioComponentInstance inInstance)
{
  uint64_t (***v1)(_QWORD);

  if (inInstance
    && (v1 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioComponentInstance))(*(_QWORD *)inInstance
                                                                                                 + 8))(inInstance)) != 0)
  {
    return (AudioComponent)(**v1)(v1);
  }
  else
  {
    return 0;
  }
}

BOOL CA::Implementation::EquivalentFormatFlags(CA::Implementation *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, char a4)
{
  int v4;
  int32x4_t v5;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  BOOL v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  AudioFormatFlags mFormatFlags;
  AudioFormatFlags v22;
  unsigned int v23;
  UInt32 mBytesPerFrame;
  UInt32 mChannelsPerFrame;
  UInt32 v26;
  UInt32 mBitsPerChannel;
  int v28;
  BOOL v29;
  BOOL v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  unsigned int v34;

  if ((a4 & 1) != 0)
  {
    v4 = *((_DWORD *)this + 3);
    v5 = *(int32x4_t *)&a2->mFormatID;
    v5.i64[1] = *((_QWORD *)this + 1);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) != 0)
      return 1;
  }
  else
  {
    v4 = *((_DWORD *)this + 3);
  }
  if (*((_DWORD *)this + 2) != 1819304813)
    return v4 == a2->mFormatFlags;
  v7 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) == 0)
    v7 = v4;
  if ((_DWORD)a3)
    v8 = v7;
  else
    v8 = v7 & 0xFFFFFFBF;
  v9 = *((_DWORD *)this + 6);
  if (v9)
  {
    v10 = *((_DWORD *)this + 7);
    if ((v4 & 0x20) != 0)
      v11 = 1;
    else
      v11 = *((_DWORD *)this + 7);
    if (v11)
    {
      v9 = 8 * (v9 / v11);
      v12 = *((_DWORD *)this + 8);
      v13 = v8 | 8;
      v14 = v9 == v12;
      goto LABEL_21;
    }
    v9 = 0;
    v12 = *((_DWORD *)this + 8);
    v13 = v8 | 8;
  }
  else
  {
    v13 = v8 | 8;
    v10 = *((_DWORD *)this + 7);
    v12 = *((_DWORD *)this + 8);
  }
  v14 = v12 == 0;
LABEL_21:
  if (v14)
    v8 = v13;
  v16 = (v12 & 7) == 0 && v9 == v12;
  v17 = v8 & 0xFFFFFFEF;
  if (!v16)
    v17 = v8;
  if ((v17 & 1) != 0)
    v17 &= ~4u;
  v18 = (v17 & 8) == 0 || v12 > 8;
  v19 = v17 & 2;
  if (v18)
    v19 = v17;
  if (v10 == 1)
    v20 = v19 & 0xFFFFFFDF;
  else
    v20 = v19;
  if (!v20)
    v20 = 0x80000000;
  mFormatFlags = a2->mFormatFlags;
  if (a2->mFormatID != 1819304813)
    return v20 == mFormatFlags;
  v22 = mFormatFlags & 0x7FFFFFFF;
  if ((mFormatFlags & 0x7FFFFFFF) == 0)
    v22 = a2->mFormatFlags;
  if ((_DWORD)a3)
    v23 = v22;
  else
    v23 = v22 & 0xFFFFFFBF;
  mBytesPerFrame = a2->mBytesPerFrame;
  if (!mBytesPerFrame)
  {
    v28 = v23 | 8;
    mChannelsPerFrame = a2->mChannelsPerFrame;
    mBitsPerChannel = a2->mBitsPerChannel;
LABEL_54:
    v29 = mBitsPerChannel == 0;
    goto LABEL_55;
  }
  mChannelsPerFrame = a2->mChannelsPerFrame;
  if ((mFormatFlags & 0x20) != 0)
    v26 = 1;
  else
    v26 = a2->mChannelsPerFrame;
  if (!v26)
  {
    mBytesPerFrame = 0;
    mBitsPerChannel = a2->mBitsPerChannel;
    v28 = v23 | 8;
    goto LABEL_54;
  }
  mBytesPerFrame = 8 * (mBytesPerFrame / v26);
  mBitsPerChannel = a2->mBitsPerChannel;
  v28 = v23 | 8;
  v29 = mBytesPerFrame == mBitsPerChannel;
LABEL_55:
  if (v29)
    v23 = v28;
  v30 = (mBitsPerChannel & 7) == 0 && mBytesPerFrame == mBitsPerChannel;
  v31 = v23 & 0xFFFFFFEF;
  if (!v30)
    v31 = v23;
  if ((v31 & 1) != 0)
    v31 &= ~4u;
  v32 = (v31 & 8) == 0 || mBitsPerChannel > 8;
  v33 = v31 & 2;
  if (v32)
    v33 = v31;
  if (mChannelsPerFrame == 1)
    v34 = v33 & 0xFFFFFFDF;
  else
    v34 = v33;
  if (v34)
    mFormatFlags = v34;
  else
    mFormatFlags = 0x80000000;
  return v20 == mFormatFlags;
}

uint64_t acv2::SampleRateConverter::GetProperty(acv2::SampleRateConverter *this, int a2, unsigned int *a3, double *a4)
{
  uint64_t result;
  int v7;
  uint64_t (*v8)(void);
  int v9;
  uint64_t (*v10)(void);
  int v11;
  double v12;

  result = 1886547824;
  if (a2 > 1936876399)
  {
    if (a2 > 2020175986)
    {
      if (a2 == 2020175987)
      {
        if (*a3 == 4)
        {
          result = 0;
          v9 = *((_DWORD *)this + 8);
          goto LABEL_30;
        }
        return 561211770;
      }
      if (a2 != 2020569203)
        return result;
      if (*a3 != 4)
        return 561211770;
      result = 0;
      v9 = *((_DWORD *)this + 18);
    }
    else
    {
      if (a2 == 1936876400)
      {
        if (*a3 == 8)
        {
          v12 = (*(double (**)(_QWORD))(**((_QWORD **)this + 20) + 56))(*((_QWORD *)this + 20));
          result = 0;
          *a4 = v12;
          return result;
        }
        return 561211770;
      }
      if (a2 != 1936876401)
        return result;
      if (*a3 != 4)
        return 561211770;
      result = 0;
      v9 = *((_DWORD *)this + 69);
    }
LABEL_30:
    *(_DWORD *)a4 = v9;
    return result;
  }
  if (a2 > 1835626095)
  {
    if (a2 == 1835626096)
    {
      if (*a3 != 4)
        return 561211770;
      v10 = *(uint64_t (**)(void))(**((_QWORD **)this + 20) + 72);
    }
    else
    {
      if (a2 != 1886547309)
        return result;
      if (*a3 != 4)
        return 561211770;
      v10 = *(uint64_t (**)(void))(**((_QWORD **)this + 20) + 40);
    }
    v9 = v10();
    result = 0;
    goto LABEL_30;
  }
  v7 = *((_DWORD *)this + 10);
  if (a2 == 1667850867)
  {
    if (*a3 == 4)
    {
      v8 = *(uint64_t (**)(void))(**((_QWORD **)this + 20) + 80);
      goto LABEL_22;
    }
  }
  else
  {
    if (a2 != 1668244083)
      return result;
    if (*a3 == 4)
    {
      v8 = *(uint64_t (**)(void))(**((_QWORD **)this + 20) + 88);
LABEL_22:
      v11 = v8();
      result = 0;
      v9 = v11 * v7;
      goto LABEL_30;
    }
  }
  return 561211770;
}

uint64_t Resampler2::PushConvert(Resampler2 *this, const float *a2, const float *a3, float *a4, float *a5, unsigned int *a6, unsigned int *a7, int a8, signed int a9, char a10)
{
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  float *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  float *v27;
  float *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  float *v34;
  uint64_t v35;
  void (*v36)(_QWORD *, float *, float *, _QWORD, _QWORD);
  uint64_t v37;
  _QWORD *v38;
  double v39;
  unsigned int v40;
  unsigned int v41;
  float *v42;
  unsigned int v43;
  uint64_t v44;
  size_t v45;
  float *v46;
  size_t v47;
  uint64_t v48;
  unsigned int v49;
  float *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int NumberOfSourceFrames;
  uint64_t v55;
  float *v56;
  float *v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  const float *v66;
  float *v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  float *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;

  *((_BYTE *)this + 24) = 1;
  v17 = *a6;
  v76 = *a7;
  v77 = v17;
  (*(void (**)(Resampler2 *, unsigned int *, unsigned int *))(*(_QWORD *)this + 24))(this, &v77, &v76);
  v64 = a7;
  v65 = a6;
  v18 = v76;
  if (v76)
  {
    v19 = 0;
    v20 = 0;
    v21 = v77;
    v22 = *((_DWORD *)this + 18);
    v63 = 4 * a9;
    v73 = a5;
    v66 = a3;
    v23 = a4;
    while (1)
    {
      v24 = *((_DWORD *)this + 19) - v22;
      if (v24 >= v21)
        v24 = v21;
      v75 = v24;
      v74 = v18;
      (*(void (**)(Resampler2 *, unsigned int *, unsigned int *))(*(_QWORD *)this + 24))(this, &v75, &v74);
      v25 = v75;
      v26 = *((int *)this + 18);
      v27 = (float *)(*((_QWORD *)this + 10) + 4 * v26);
      v72 = v74;
      if (a8 == 1)
      {
        memcpy(v27, &a2[v20], 4 * v75);
        if (a3)
          memcpy((void *)(*((_QWORD *)this + 11) + 4 * *((int *)this + 18)), &a3[v20], 4 * v75);
      }
      else if (a3)
      {
        if (v75)
        {
          v28 = (float *)(*((_QWORD *)this + 11) + 4 * v26);
          v29 = v20 * a8;
          v30 = v75;
          do
          {
            *v27++ = a2[v29];
            *v28++ = a3[v29];
            v29 += a8;
            --v30;
          }
          while (v30);
        }
      }
      else if (v75)
      {
        v31 = v20 * a8;
        v32 = v75;
        do
        {
          *v27++ = a2[v31];
          v31 += a8;
          --v32;
        }
        while (v32);
      }
      v71 = v25;
      if ((a10 & 1) != 0)
      {
        v33 = *((_DWORD *)this + 18);
        v34 = v73;
        if (!*((_BYTE *)this + 200))
          *((_QWORD *)this + 24) = v33;
      }
      else
      {
        v33 = *((_DWORD *)this + 18);
        v34 = v73;
      }
      *((_BYTE *)this + 200) = a10 & 1;
      *((_DWORD *)this + 18) = v33 + v75;
      v35 = v74;
      if (!v74)
        goto LABEL_53;
      v69 = v20;
      v70 = v19;
      v68 = v23;
      if ((a10 & 1) == 0
        || *((_BYTE *)this + 264)
        || *((_QWORD *)this + 24) > (int64_t)vcvtmd_s64_f64(*((double *)this + 20)))
      {
        v36 = (void (*)(_QWORD *, float *, float *, _QWORD, _QWORD))*((_QWORD *)this + 1);
        v37 = *((_QWORD *)this + 2);
        v38 = (_QWORD *)((char *)this + (v37 >> 1));
        if ((v37 & 1) != 0)
          v36 = *(void (**)(_QWORD *, float *, float *, _QWORD, _QWORD))(*v38 + v36);
        v36(v38, v23, v34, v74, a9);
        v39 = *((double *)this + 20);
        v34 = v73;
        goto LABEL_27;
      }
      if (a9 == 2)
        break;
      if (a9 != 1)
        goto LABEL_42;
      bzero(v23, 4 * v74);
      v34 = v73;
      if (v73)
      {
        v46 = v73;
        v47 = 4 * v35;
LABEL_41:
        bzero(v46, v47);
        v34 = v73;
      }
LABEL_48:
      if (*((_BYTE *)this + 133))
      {
        v52 = *((_DWORD *)this + 26) + *((_DWORD *)this + 27) * v35;
        *((_DWORD *)this + 26) = v52;
        v39 = *((double *)this + 19) * (double)v52;
      }
      else
      {
        v39 = *((double *)this + 20) + (double)v35 * *((double *)this + 21);
      }
      *((double *)this + 20) = v39;
LABEL_27:
      v40 = v74;
      v41 = v74 * a9;
      v42 = &v34[v74 * a9];
      if (!v34)
        v42 = 0;
      v73 = v42;
      v43 = v75;
      *((double *)this + 34) = *((double *)this + 34) + (double)v74;
      v44 = (int)v39;
      v45 = 4 * (*((_DWORD *)this + 18) - (int)v39);
      memmove(*((void **)this + 10), (const void *)(*((_QWORD *)this + 10) + 4 * v44), v45);
      if (a5)
        memmove(*((void **)this + 11), (const void *)(*((_QWORD *)this + 11) + 4 * v44), v45);
      *((double *)this + 20) = *((double *)this + 20) - (double)(int)v44;
      v22 = *((_DWORD *)this + 18) - v44;
      *((_DWORD *)this + 18) = v22;
      *((_QWORD *)this + 24) -= v44;
      *((double *)this + 17) = *((double *)this + 17) + (double)(int)v44;
      if (*((_BYTE *)this + 133))
        *((_DWORD *)this + 26) -= *(_DWORD *)(*((_QWORD *)this + 7) + 16) * v44;
      v21 -= v71;
      v23 = &v68[v41];
      v20 = v43 + v69;
      v19 = v40 + v70;
      v18 -= v72;
      a3 = v66;
      if (!v18)
        goto LABEL_53;
    }
    if ((char *)v34 - (char *)v23 == 4)
    {
      v47 = 8 * v74;
      v46 = v23;
      goto LABEL_41;
    }
LABEL_42:
    if (v34)
    {
      v48 = 0;
      v49 = v74;
      do
      {
        *(float *)((char *)v23 + v48) = 0.0;
        *(float *)((char *)v34 + v48) = 0.0;
        v48 += v63;
        --v49;
      }
      while (v49);
    }
    else
    {
      v50 = v23;
      v51 = v74;
      do
      {
        *v50 = 0.0;
        v50 = (float *)((char *)v50 + v63);
        --v51;
      }
      while (v51);
    }
    goto LABEL_48;
  }
  v20 = 0;
  v19 = 0;
LABEL_53:
  v53 = *v65;
  NumberOfSourceFrames = Resampler2::GetNumberOfSourceFrames(this, 1u, v19);
  if (v53 != v20 && v53 - v20 <= NumberOfSourceFrames)
  {
    if (a8 == 1)
    {
      memcpy((void *)(*((_QWORD *)this + 10) + 4 * *((int *)this + 18)), &a2[v20], 4 * (v53 - v20));
      if (a3)
        memcpy((void *)(*((_QWORD *)this + 11) + 4 * *((int *)this + 18)), &a3[v20], 4 * (v53 - v20));
    }
    else
    {
      v55 = *((int *)this + 18);
      v56 = (float *)(*((_QWORD *)this + 10) + 4 * v55);
      if (a3)
      {
        v57 = (float *)(*((_QWORD *)this + 11) + 4 * v55);
        v58 = v20 * a8;
        v59 = v53 - v20;
        do
        {
          *v56++ = a2[v58];
          *v57++ = a3[v58];
          v58 += a8;
          --v59;
        }
        while (v59);
      }
      else
      {
        v60 = v20 * a8;
        v61 = v53 - v20;
        do
        {
          *v56++ = a2[v60];
          v60 += a8;
          --v61;
        }
        while (v61);
      }
    }
    *((_DWORD *)this + 18) += v53 - v20;
  }
  *v64 = v19;
  *((_BYTE *)this + 24) = 0;
  return 0;
}

void sub_18EE3D7D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = 0;
  _Unwind_Resume(a1);
}

uint64_t Resampler2::PreFlight(Resampler2 *this, unsigned int *a2, unsigned int *a3)
{
  signed int NumberOfSourceFrames;
  uint64_t result;

  NumberOfSourceFrames = Resampler2::GetNumberOfSourceFrames(this, *a3, 0);
  result = (*(uint64_t (**)(Resampler2 *, _QWORD))(*(_QWORD *)this + 144))(this, *a2);
  if (NumberOfSourceFrames >= (int)*a2)
  {
    if ((int)result < (int)*a3)
      *a3 = result;
  }
  else
  {
    *a2 = NumberOfSourceFrames;
  }
  return result;
}

unsigned int Resampler2::GetNumberOfOutputFrames(Resampler2 *this, int a2)
{
  double v3;
  double v4;
  uint64_t v6;

  if (*((_BYTE *)this + 133) && !*((_BYTE *)this + 132))
  {
    v6 = (uint64_t)((int)(a2
                       - (*(uint64_t (**)(Resampler2 *))(*(_QWORD *)this + 152))(this)
                       + *((_DWORD *)this + 18)
                       + 1)
                 * (unint64_t)*((unsigned int *)this + 31)
                 - *((unsigned int *)this + 26))
       / *((unsigned int *)this + 27);
    return v6 & ~((int)v6 >> 31);
  }
  else
  {
    v3 = (double)(*((_DWORD *)this + 18) + a2)
       - ((double)(*(unsigned int (**)(Resampler2 *))(*(_QWORD *)this + 152))(this)
        + -1.0)
       - *((double *)this + 20);
    if (!*((_BYTE *)this + 132))
      v3 = v3 * *((double *)this + 22);
    if (v3 >= 0.0)
      v4 = v3 + 0.0001;
    else
      v4 = 0.0001;
    return vcvtmd_u64_f64(v4);
  }
}

uint64_t acv2::Resampler2Wrapper::ProduceOutput(acv2::Resampler2Wrapper *this, ACAudioSpan *a2)
{
  uint64_t v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  AudioConverterCapturer *v13;
  const ACAudioSpan *v14;
  int v15;
  acv2::AudioConverterBase *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  const ACAudioSpan *v34;
  acv2::AudioConverterBase *v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  BOOL v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  AudioConverterCapturer *v57;
  int v58[2];
  _BOOL4 v59;

  v4 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(v4 + 28) & 0x20) != 0)
    v5 = 1;
  else
    v5 = *(_DWORD *)(v4 + 44);
  v51 = v5;
  v52 = 1;
  if ((*(_BYTE *)(v4 + 68) & 0x20) == 0)
    v52 = *(_DWORD *)(v4 + 84);
  v50 = *((_DWORD *)this + 4);
  LOBYTE(v54) = 0;
  BYTE4(v54) = 1;
  if (*(_DWORD *)a2 < *((_DWORD *)a2 + 1))
  {
    v6 = (unsigned int *)(v4 + 168);
    while (1)
    {
      ACBaseAudioSpan::setAfter(v4 + 168, (unsigned int *)a2);
      ACBaseAudioSpan::copyEmptyMetadataEventsFrom((uint64_t *)(v4 + 168), a2);
      v7 = *(_DWORD *)(v4 + 172);
      v8 = (*(uint64_t (**)(acv2::Resampler2Wrapper *, _QWORD))(*(_QWORD *)this + 80))(this, v7);
      if (v8 <= 1)
        LODWORD(v9) = 1;
      else
        LODWORD(v9) = v8;
      acv2::AudioConverterChain::ObtainInput((acv2::AudioConverterChain *)&v57, *(acv2::AudioConverterBase **)(*((_QWORD *)this + 1) + 8), *((_QWORD *)this + 1), v9);
      v10 = v59;
      if (v59)
      {
        v11 = 0;
        v12 = v59 & 0xFFFFFF00;
        goto LABEL_52;
      }
      v13 = v57;
      v56 = 0;
      if (*(_DWORD *)v57 >= v9)
        v9 = v9;
      else
        v9 = *(unsigned int *)v57;
      v15 = (*(uint64_t (**)(_QWORD, uint64_t))(***((_QWORD ***)this + 3) + 144))(**((_QWORD **)this + 3), v9);
      v16 = (acv2::AudioConverterBase *)*((_QWORD *)this + 7);
      if (v16)
        acv2::AudioConverterBase::writeCapture(v16, v13, v14);
      if (v9 | v15)
      {
        v17 = 0;
      }
      else
      {
        if (*((_BYTE *)this + 52))
        {
          v10 = 0;
          v12 = 0;
LABEL_21:
          v11 = 1;
          goto LABEL_52;
        }
        v12 = *((_DWORD *)this + 12);
        if (!v12)
        {
          v10 = 0;
          goto LABEL_21;
        }
        if (v50 == 2)
        {
          v17 = Resampler2::PushZeroes(**((Resampler2 ***)this + 3));
        }
        else if (*((_DWORD *)this + 4))
        {
          v48 = 0;
          do
            v17 = Resampler2::PushZeroes(*(Resampler2 **)(*((_QWORD *)this + 3) + 8 * v48++));
          while (v48 < *((unsigned int *)this + 4));
        }
        else
        {
          v17 = 0;
        }
        *((_BYTE *)this + 52) = 1;
      }
      v55 = 0;
      if ((_DWORD)v9 || v15 || v17)
      {
        if (v50 == 2)
        {
          v18 = *((_QWORD *)v13 + 2);
          v19 = *(_QWORD *)(v18 + 16);
          if ((*(_BYTE *)(v4 + 28) & 0x20) != 0)
            v20 = *(_QWORD *)(v18 + 32);
          else
            v20 = v19 + 4;
          v29 = *(_QWORD *)(v4 + 184);
          v30 = *(_QWORD *)(v29 + 16);
          if ((*(_BYTE *)(v4 + 68) & 0x20) != 0)
            v31 = *(_QWORD *)(v29 + 32);
          else
            v31 = v30 + 4;
          v55 = v9;
          v56 = v7;
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, unsigned int *, _QWORD, _QWORD))(***((_QWORD ***)this + 3) + 32))(**((_QWORD **)this + 3), v19, v20, v30, v31, &v55, &v56, v51, v52);
        }
        else if (*((_DWORD *)this + 4))
        {
          v21 = 0;
          v22 = 0;
          v23 = 16;
          do
          {
            v24 = *((_QWORD *)v13 + 2);
            if ((*(_BYTE *)(v4 + 28) & 0x20) != 0)
              v25 = *(_QWORD *)(v24 + v23);
            else
              v25 = *(_QWORD *)(v24 + 16) + v21;
            v26 = *(_QWORD *)(v4 + 184);
            if ((*(_BYTE *)(v4 + 68) & 0x20) != 0)
              v27 = *(_QWORD *)(v26 + v23);
            else
              v27 = *(_QWORD *)(v26 + 16) + v21;
            v55 = v9;
            v56 = v7;
            v28 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v22);
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unsigned int *, unsigned int *, _QWORD, _QWORD))(*(_QWORD *)v28 + 32))(v28, v25, 0, v27, 0, &v55, &v56, v51, v52);
            ++v22;
            v23 += 16;
            v21 += 4;
          }
          while (v22 < *((unsigned int *)this + 4));
        }
      }
      else
      {
        v56 = 0;
      }
      v32 = v56;
      v33 = *(_DWORD *)(v4 + 72);
      *(_DWORD *)(v4 + 168) = v56;
      *(_DWORD *)(v4 + 176) = ACBaseAudioSpan::sizeOfFirstPackets((ACBaseAudioSpan *)(v4 + 168), v32, v33);
      v35 = (acv2::AudioConverterBase *)*((_QWORD *)this + 8);
      if (v35)
        acv2::AudioConverterBase::writeCapture(v35, (AudioConverterCapturer *)(v4 + 168), v34);
      v36 = acv2::AudioConverterChain::ConsumedInput(*(_QWORD **)(*((_QWORD *)this + 1) + 8), *(_DWORD *)v13, *(uint64_t *)v58, v55);
      v10 = v55 != 0;
      v11 = v36 == 0;
      v12 = v36 & 0xFFFFFF00;
      if (v36)
        v10 = v36;
LABEL_52:
      v37 = v12 & 0xFFFFFF00 | v10;
      v53 = v37 | (v11 << 32);
      if (!v11)
      {
        LODWORD(v54) = v37;
        if (!BYTE4(v54))
          goto LABEL_61;
        v39 = 0;
        goto LABEL_60;
      }
      caulk::expected<BOOL,int>::value((uint64_t)&v53);
      if ((_BYTE)v53)
      {
        v38 = 1;
      }
      else
      {
        caulk::expected<BOOL,int>::value((uint64_t)&v54);
        v38 = (_BYTE)v54 != 0;
      }
      LOBYTE(v54) = v38;
      if (!BYTE4(v54))
      {
        v39 = 1;
LABEL_60:
        BYTE4(v54) = v39;
      }
LABEL_61:
      if (BYTE4(v53))
      {
        caulk::expected<BOOL,int>::value((uint64_t)&v53);
        v40 = (_BYTE)v53 != 0;
      }
      else
      {
        v40 = 0;
      }
      v41 = *v6;
      if (v40 || v41)
      {
        v42 = *(_DWORD *)(v4 + 176);
        v43 = *(_DWORD *)a2;
        v44 = *((unsigned int *)a2 + 2);
        if (v41)
        {
          v45 = *((_QWORD *)a2 + 4);
          if (v45)
          {
            v46 = *(_DWORD *)a2;
            v47 = *v6;
            do
            {
              *(_QWORD *)(v45 + 16 * v46++) += v44;
              --v47;
            }
            while (v47);
          }
        }
        *(_DWORD *)a2 = v43 + v41;
        *((_DWORD *)a2 + 2) = v44 + v42;
        ACBaseAudioSpan::copyFilledMetadataEventsFrom((uint64_t)a2, v4 + 168, 0);
        if (BYTE4(v54))
        {
          if (*(_DWORD *)a2 < *((_DWORD *)a2 + 1))
            continue;
        }
      }
      break;
    }
  }
  ACBaseAudioSpan::completeMetadataFrame((uint64_t *)a2);
  return v54;
}

uint64_t Resampler2::GetNumberOfSourceFrames(Resampler2 *this, unsigned int a2, unsigned int a3)
{
  unsigned int v5;
  int v6;
  double v8;
  double v10;
  double v11;
  _BYTE v12[56];

  if (!a2)
    return 0;
  if (!*((_BYTE *)this + 133))
  {
    if (!*((_BYTE *)this + 132))
    {
      if (*((_BYTE *)this + 264))
      {
        RateRamp::RateRamp((RateRamp *)v12);
        v11 = (double)a2;
        RateRamp::Segment((Resampler2 *)((char *)this + 208), *((double *)this + 30) + (double)a3, &v11, 1000000000.0, (RateRamp *)v12);
        RateRamp::InputDuration((RateRamp *)v12);
        v8 = (double)vcvtpd_u64_f64(v10);
      }
      else
      {
        v8 = *((double *)this + 21) * (double)a2;
      }
      goto LABEL_8;
    }
LABEL_7:
    v8 = (double)a2;
LABEL_8:
    v6 = vcvtpd_s64_f64((double)(*(unsigned int (**)(Resampler2 *))(*(_QWORD *)this + 152))(this)+ -1.0+ *((double *)this + 20)+ v8+ -0.0001- (double)*((int *)this + 18));
    return v6 & ~(v6 >> 31);
  }
  if (*((_BYTE *)this + 132))
    goto LABEL_7;
  v5 = *((_DWORD *)this + 27);
  v6 = (*(uint64_t (**)(Resampler2 *))(*(_QWORD *)this + 152))(this)
     + ~*((_DWORD *)this + 18)
     + (uint64_t)(*((unsigned int *)this + 26) + v5 * (unint64_t)a2 + *((unsigned int *)this + 31) - 1)
     / *((unsigned int *)this + 31);
  return v6 & ~(v6 >> 31);
}

uint64_t acv2::Resampler2Wrapper::GetNumberOfSourceFrames(acv2::Resampler2Wrapper *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 3) + 136))(**((_QWORD **)this + 3));
}

uint64_t Resampler2::GetNumberOfSourceFrames(Resampler2 *this, unsigned int a2)
{
  return Resampler2::GetNumberOfSourceFrames(this, a2, 0);
}

double Resampler2::ConvertSIMD_SmallIntegerRatio(Resampler2 *this, float *a2, float *a3, int a4, int a5)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float64x2_t v50;
  float64x2_t v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float32x4_t *v65;
  float32x4_t *v66;
  float32x4_t *v67;
  float32x4_t v68;
  float32x4_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  double result;
  uint8_t buf[4];
  const char *v75;
  __int16 v76;
  int v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  int v81;
  __int16 v82;
  unsigned int v83;
  __int16 v84;
  unsigned int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  unsigned int v89;
  __int16 v90;
  unsigned int v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v10 = **((_QWORD **)this + 7);
  v11 = (*(uint64_t (**)(Resampler2 *))(*(_QWORD *)this + 152))(this);
  if (a4)
  {
    v12 = *(_DWORD *)(*((_QWORD *)this + 7) + 16);
    v14 = *((_DWORD *)this + 26);
    v13 = *((_DWORD *)this + 27);
    v15 = *((_DWORD *)this + 19) * v12;
    if (v14 + v13 * a4 <= v15)
    {
      v16 = v13 / v12;
      v17 = v13 % v12;
      v18 = v14 / v12;
      v19 = v14 % v12;
      if (*((_DWORD *)this + 29) == 1650553971)
      {
        v20 = *((_QWORD *)this + 10);
        v21 = v11 >> 2;
        if (a3)
        {
          v22 = *((_QWORD *)this + 11);
          v23 = a4;
          do
          {
            v24 = v10 + 4 * v19 * v11;
            v25 = (float32x4_t *)(v20 + 4 * v18);
            v26 = (float32x4_t *)(v22 + 4 * v18);
            v27 = *(float32x4_t *)(v24 + 16);
            v28 = vmulq_f32(v25[1], v27);
            v29 = vmulq_f32(*v25, *(float32x4_t *)v24);
            v30 = vmulq_f32(v26[1], v27);
            v31 = vmulq_f32(*v26, *(float32x4_t *)v24);
            v32 = *(float32x4_t *)(v24 + 32);
            v33 = *(float32x4_t *)(v24 + 48);
            v34 = v26[2];
            v35 = v26[3];
            v36 = v25[2];
            v37 = v25[3];
            v38 = 0uLL;
            if ((_DWORD)v21 == 4)
            {
              v39 = 0uLL;
              v40 = 0uLL;
              v41 = 0uLL;
            }
            else
            {
              v42 = (float32x4_t *)(v24 + 64);
              v43 = v26 + 4;
              v44 = v25 + 4;
              v40 = 0uLL;
              v41 = 0uLL;
              v45 = (float32x4_t *)(v24 + 16 * v21);
              v39 = 0uLL;
              do
              {
                v39 = vaddq_f64(v39, vaddq_f64(vcvt_hight_f64_f32(v28), vcvt_hight_f64_f32(v29)));
                v38 = vaddq_f64(v38, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v28.f32), vcvtq_f64_f32(*(float32x2_t *)v29.f32)));
                v41 = vaddq_f64(v41, vaddq_f64(vcvt_hight_f64_f32(v30), vcvt_hight_f64_f32(v31)));
                v40 = vaddq_f64(v40, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v30.f32), vcvtq_f64_f32(*(float32x2_t *)v31.f32)));
                v29 = vmulq_f32(v36, v32);
                v28 = vmulq_f32(v37, v33);
                v31 = vmulq_f32(v34, v32);
                v30 = vmulq_f32(v35, v33);
                v36 = *v44;
                v37 = v44[1];
                v44 += 2;
                v34 = *v43;
                v35 = v43[1];
                v43 += 2;
                v32 = *v42;
                v33 = v42[1];
                v42 += 2;
              }
              while (v42 != v45);
            }
            v46 = vmulq_f32(v33, v37);
            v47 = vmulq_f32(v32, v36);
            v48 = vmulq_f32(v33, v35);
            v49 = vmulq_f32(v32, v34);
            v50 = vaddq_f64(vaddq_f64(v41, vaddq_f64(vcvt_hight_f64_f32(v30), vcvt_hight_f64_f32(v31))), vaddq_f64(vcvt_hight_f64_f32(v48), vcvt_hight_f64_f32(v49)));
            v51 = vaddq_f64(vaddq_f64(v40, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v30.f32), vcvtq_f64_f32(*(float32x2_t *)v31.f32))), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v48.f32), vcvtq_f64_f32(*(float32x2_t *)v49.f32)));
            v48.f32[0] = vaddvq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v38, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v28.f32), vcvtq_f64_f32(*(float32x2_t *)v29.f32))), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v46.f32), vcvtq_f64_f32(*(float32x2_t *)v47.f32))), vaddq_f64(vaddq_f64(v39, vaddq_f64(vcvt_hight_f64_f32(v28), vcvt_hight_f64_f32(v29))), vaddq_f64(vcvt_hight_f64_f32(v46), vcvt_hight_f64_f32(v47)))));
            *a2 = v48.f32[0];
            *(float *)v51.f64 = vaddvq_f64(vaddq_f64(v51, v50));
            *a3 = *(float *)v51.f64;
            a2 += a5;
            a3 += a5;
            v18 += v16;
            v52 = v19 + v17;
            if (v19 + v17 >= v12)
              ++v18;
            if (v52 < v12)
              v53 = 0;
            else
              v53 = v12;
            v19 = v52 - v53;
            --v23;
          }
          while (v23);
        }
        else
        {
          v54 = a4;
          do
          {
            v55 = v10 + 4 * v19 * v11;
            v56 = (float32x4_t *)(v20 + 4 * v18);
            v57 = vmulq_f32(v56[1], *(float32x4_t *)(v55 + 16));
            v58 = vmulq_f32(*v56, *(float32x4_t *)v55);
            v59 = *(float32x4_t *)(v55 + 32);
            v60 = *(float32x4_t *)(v55 + 48);
            v61 = v56[2];
            v62 = v56[3];
            v63 = 0uLL;
            if ((_DWORD)v21 == 4)
            {
              v64 = 0uLL;
            }
            else
            {
              v65 = (float32x4_t *)(v55 + 16 * v21);
              v66 = (float32x4_t *)(v55 + 64);
              v67 = v56 + 4;
              v64 = 0uLL;
              do
              {
                v64 = vaddq_f64(v64, vaddq_f64(vcvt_hight_f64_f32(v57), vcvt_hight_f64_f32(v58)));
                v63 = vaddq_f64(v63, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v57.f32), vcvtq_f64_f32(*(float32x2_t *)v58.f32)));
                v58 = vmulq_f32(v61, v59);
                v57 = vmulq_f32(v62, v60);
                v61 = *v67;
                v62 = v67[1];
                v67 += 2;
                v59 = *v66;
                v60 = v66[1];
                v66 += 2;
              }
              while (v66 != v65);
            }
            v68 = vmulq_f32(v60, v62);
            v69 = vmulq_f32(v59, v61);
            v69.f32[0] = vaddvq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v63, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v57.f32), vcvtq_f64_f32(*(float32x2_t *)v58.f32))), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v68.f32), vcvtq_f64_f32(*(float32x2_t *)v69.f32))), vaddq_f64(vaddq_f64(v64, vaddq_f64(vcvt_hight_f64_f32(v57), vcvt_hight_f64_f32(v58))), vaddq_f64(vcvt_hight_f64_f32(v68), vcvt_hight_f64_f32(v69)))));
            *a2 = v69.f32[0];
            a2 += a5;
            v18 += v16;
            v70 = v19 + v17;
            if (v19 + v17 >= v12)
              ++v18;
            if (v70 < v12)
              v71 = 0;
            else
              v71 = v12;
            v19 = v70 - v71;
            --v54;
          }
          while (v54);
        }
      }
      else if (a3)
      {
        StereoMultiCoefsSRC_Neon((_OWORD *)(*((_QWORD *)this + 10) + 4 * v18), (_OWORD *)(*((_QWORD *)this + 11) + 4 * v18), v10, a2, a3, a4, a5, v16 | (v17 << 16), v19, v12, v11);
      }
      else if ((v11 & 3) == 0)
      {
        MonoMultiCoefsSRC_Neon((_OWORD *)(*((_QWORD *)this + 10) + 4 * v18), v10, a2, a4, a5, v16 | (v17 << 16), v19, v12, v11);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136317186;
      v75 = "Resampler2.cpp";
      v76 = 1024;
      v77 = 2293;
      v78 = 2080;
      v79 = "ConvertSIMD_SmallIntegerRatio";
      v80 = 1024;
      v81 = 2293;
      v82 = 1024;
      v83 = v15;
      v84 = 1024;
      v85 = v14;
      v86 = 1024;
      v87 = v14 + v12 * a4;
      v88 = 1024;
      v89 = v13;
      v90 = 1024;
      v91 = v12;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "%25s:%-5d CADSPUtility:%s:%d: input buffer ticks %u but would read from %u to %u (tick rate %u, offsets %u)!", buf, 0x40u);
    }
  }
  v72 = *((_DWORD *)this + 26) + *((_DWORD *)this + 27) * a4;
  *((_DWORD *)this + 26) = v72;
  result = *((double *)this + 19) * (double)v72;
  *((double *)this + 20) = result;
  return result;
}

float MonoMultiCoefsSRC_Neon(_OWORD *a1, uint64_t a2, float *a3, int a4, int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float result;

  do
  {
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = (float32x4_t *)(a2 + 4 * (unsigned __int16)(a7 * a9));
    v15 = *(float32x4_t *)a1;
    v16 = *((float32x4_t *)a1 + 1);
    v14 = (float32x4_t *)(a1 + 2);
    v18 = *v13;
    v19 = v13[1];
    v17 = v13 + 2;
    v20 = a9 - 16;
    if (a9 != 16)
    {
      do
      {
        v22 = *v14;
        v23 = v14[1];
        v21 = v14 + 2;
        v9 = vmlaq_f32(v9, v15, v18);
        v20 -= 16;
        v25 = *v17;
        v26 = v17[1];
        v24 = v17 + 2;
        v10 = vmlaq_f32(v10, v16, v19);
        v15 = *v21;
        v16 = v21[1];
        v14 = v21 + 2;
        v11 = vmlaq_f32(v11, v22, v25);
        v18 = *v24;
        v19 = v24[1];
        v17 = v24 + 2;
        v12 = vmlaq_f32(v12, v23, v26);
      }
      while (v20);
    }
    a1 = (_OWORD *)((char *)a1 + 4 * (unsigned __int16)a6);
    a7 += HIWORD(a6);
    v27 = vaddq_f32(vmlaq_f32(v9, v15, v18), vmlaq_f32(v10, v16, v19));
    v28 = vaddq_f32(vmlaq_f32(v11, *v14, *v17), vmlaq_f32(v12, v14[1], v17[1]));
    if (a7 >= a8)
    {
      a7 -= a8;
      a1 = (_OWORD *)((char *)a1 + 4);
    }
    v29 = vaddq_f32(v27, v28);
    result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29));
    --a4;
    *a3 = result;
    a3 += a5;
  }
  while (a4);
  return result;
}

float StereoMultiCoefsSRC_Neon(_OWORD *a1, _OWORD *a2, uint64_t a3, float *a4, float *a5, int a6, int a7, unsigned int a8, unsigned int a9, unsigned int a10, int a11)
{
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  int v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float result;

  do
  {
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    v20 = (float32x4_t *)(a3 + 4 * (unsigned __int16)(a9 * a11));
    v22 = *(float32x4_t *)a1;
    v23 = *((float32x4_t *)a1 + 1);
    v21 = (float32x4_t *)(a1 + 2);
    v25 = *(float32x4_t *)a2;
    v26 = *((float32x4_t *)a2 + 1);
    v24 = (float32x4_t *)(a2 + 2);
    v28 = *v20;
    v29 = v20[1];
    v27 = v20 + 2;
    v30 = a11 - 16;
    if (a11 != 16)
    {
      do
      {
        v32 = *v21;
        v33 = v21[1];
        v31 = v21 + 2;
        v12 = vmlaq_f32(v12, v22, v28);
        v35 = *v24;
        v36 = v24[1];
        v34 = v24 + 2;
        v16 = vmlaq_f32(v16, v25, v28);
        v30 -= 16;
        v38 = *v27;
        v39 = v27[1];
        v37 = v27 + 2;
        v13 = vmlaq_f32(v13, v23, v29);
        v17 = vmlaq_f32(v17, v26, v29);
        v22 = *v31;
        v23 = v31[1];
        v21 = v31 + 2;
        v14 = vmlaq_f32(v14, v32, v38);
        v25 = *v34;
        v26 = v34[1];
        v24 = v34 + 2;
        v18 = vmlaq_f32(v18, v35, v38);
        v28 = *v37;
        v29 = v37[1];
        v27 = v37 + 2;
        v15 = vmlaq_f32(v15, v33, v39);
        v19 = vmlaq_f32(v19, v36, v39);
      }
      while (v30);
    }
    v40 = v27[1];
    a1 = (_OWORD *)((char *)a1 + 4 * (unsigned __int16)a8);
    a2 = (_OWORD *)((char *)a2 + 4 * (unsigned __int16)a8);
    a9 += HIWORD(a8);
    v41 = vaddq_f32(vmlaq_f32(v12, v22, v28), vmlaq_f32(v13, v23, v29));
    v42 = vaddq_f32(vmlaq_f32(v16, v25, v28), vmlaq_f32(v17, v26, v29));
    v43 = vaddq_f32(vmlaq_f32(v14, *v21, *v27), vmlaq_f32(v15, v21[1], v40));
    v44 = vaddq_f32(vmlaq_f32(v18, *v24, *v27), vmlaq_f32(v19, v24[1], v40));
    if (a9 >= a10)
    {
      a9 -= a10;
      a1 = (_OWORD *)((char *)a1 + 4);
      a2 = (_OWORD *)((char *)a2 + 4);
    }
    v45 = vaddq_f32(v41, v43);
    v46 = vaddq_f32(v42, v44);
    result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45));
    --a6;
    *a4 = result;
    *a5 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46));
    a4 += a7;
    a5 += a7;
  }
  while (a6);
  return result;
}

uint64_t acv2::Resampler2Wrapper::GetNumberOfOutputFrames(acv2::Resampler2Wrapper *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 3) + 144))(**((_QWORD **)this + 3));
}

BOOL DSPGraph::Interpreter::parseParamEndpoint(uint64_t a1, DSPGraph *this, uint64_t a3)
{
  const char **v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int *v10;
  const char **v11;
  unint64_t *v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  char *v18;
  __int128 v19;
  char *v20[3];
  __int128 v21;
  void *v22[2];
  uint64_t v23;
  char *v24;

  DSPGraph::skipspace(this, (const char **)this);
  v24 = *(char **)this;
  DSPGraph::skipspace((DSPGraph *)&v24, v6);
  v7 = *v24;
  if (v7 == 40)
  {
    v23 = 0;
    ++v24;
    v22[0] = 0;
    v22[1] = 0;
    if ((DSPGraph::Interpreter::parseString((DSPGraph *)&v24, (uint64_t)v22) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v20, "parseParamEndpoint");
      std::string::basic_string[abi:ne180100]<0>(&v19, "expected box name for parameter endpoint");
      DSPGraph::ThrowException(1886548769, &v21, 653, (__int128 *)v20, &v19);
    }
    v8 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 8) + 784), (unsigned __int8 *)v22);
    if (!v8 || (v9 = *((_QWORD *)v8 + 5)) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v20, "parseParamEndpoint");
      std::operator+<char>();
      DSPGraph::ThrowException(1852204065, &v21, 657, (__int128 *)v20, &v19);
    }
    HIDWORD(v18) = 0;
    if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v24, (const char **)((char *)&v18 + 4), (unsigned int *)1) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v20, "parseParamEndpoint");
      std::string::basic_string[abi:ne180100]<0>(&v19, "expected parameter ID for parameter endpoint");
      DSPGraph::ThrowException(1886548769, &v21, 662, (__int128 *)v20, &v19);
    }
    LODWORD(v18) = 0;
    if (DSPGraph::Interpreter::parseScope((DSPGraph::Interpreter *)&v24, (const char **)&v18, v10)
      && (*(_QWORD *)&v21 = v24,
          v20[0] = 0,
          DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v21, (const char **)v20, v12))
      && (v13 = (int)v20[0], !((unint64_t)v20[0] >> 32)))
    {
      v24 = (char *)v21;
    }
    else
    {
      v13 = 0;
    }
    DSPGraph::skipspace((DSPGraph *)&v24, v11);
    v14 = v24;
    if (*v24 != 41)
    {
      std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v20, "parseParamEndpoint");
      DSPGraph::strprintf((DSPGraph *)"expected ')' at end of param endpoint, got '%c'", &v19, *v14);
      DSPGraph::ThrowException(1886548769, &v21, 674, (__int128 *)v20, &v19);
    }
    v16 = (int)v18;
    v15 = HIDWORD(v18);
    *(_QWORD *)a3 = v9;
    *(_DWORD *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 12) = v16;
    *(_DWORD *)(a3 + 16) = v13;
    *(_QWORD *)this = v14 + 1;
    if (SHIBYTE(v23) < 0)
      operator delete(v22[0]);
  }
  return v7 == 40;
}

void sub_18EE3E870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::Interpreter::parsePropertyEndpoint(uint64_t a1, DSPGraph *this, uint64_t a3)
{
  const char **v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int *v10;
  const char **v11;
  unint64_t *v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  char *v18;
  __int128 v19;
  char *v20[3];
  __int128 v21;
  void *v22[2];
  uint64_t v23;
  char *v24;

  DSPGraph::skipspace(this, (const char **)this);
  v24 = *(char **)this;
  DSPGraph::skipspace((DSPGraph *)&v24, v6);
  v7 = *v24;
  if (v7 == 40)
  {
    v23 = 0;
    ++v24;
    v22[0] = 0;
    v22[1] = 0;
    if ((DSPGraph::Interpreter::parseString((DSPGraph *)&v24, (uint64_t)v22) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v20, "parsePropertyEndpoint");
      std::string::basic_string[abi:ne180100]<0>(&v19, "expected box name for property endpoint");
      DSPGraph::ThrowException(1886548769, &v21, 694, (__int128 *)v20, &v19);
    }
    v8 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 8) + 784), (unsigned __int8 *)v22);
    if (!v8 || (v9 = *((_QWORD *)v8 + 5)) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v20, "parsePropertyEndpoint");
      std::string::basic_string[abi:ne180100]<0>(&v19, "property endpoint : box not found");
      DSPGraph::ThrowException(1852204065, &v21, 698, (__int128 *)v20, &v19);
    }
    HIDWORD(v18) = 0;
    if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v24, (const char **)((char *)&v18 + 4), (unsigned int *)1) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v20, "parsePropertyEndpoint");
      std::string::basic_string[abi:ne180100]<0>(&v19, "expected property ID for property endpoint");
      DSPGraph::ThrowException(1886548769, &v21, 703, (__int128 *)v20, &v19);
    }
    LODWORD(v18) = 0;
    if (DSPGraph::Interpreter::parseScope((DSPGraph::Interpreter *)&v24, (const char **)&v18, v10)
      && (*(_QWORD *)&v21 = v24,
          v20[0] = 0,
          DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v21, (const char **)v20, v12))
      && (v13 = (int)v20[0], !((unint64_t)v20[0] >> 32)))
    {
      v24 = (char *)v21;
    }
    else
    {
      v13 = 0;
    }
    DSPGraph::skipspace((DSPGraph *)&v24, v11);
    v14 = v24;
    if (*v24 != 41)
    {
      std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v20, "parsePropertyEndpoint");
      DSPGraph::strprintf((DSPGraph *)"expected ')' at end of property endpoint, got '%c'", &v19, *v14);
      DSPGraph::ThrowException(1886548769, &v21, 715, (__int128 *)v20, &v19);
    }
    v16 = (int)v18;
    v15 = HIDWORD(v18);
    *(_QWORD *)a3 = v9;
    *(_DWORD *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 12) = v16;
    *(_DWORD *)(a3 + 16) = v13;
    *(_QWORD *)this = v14 + 1;
    if (SHIBYTE(v23) < 0)
      operator delete(v22[0]);
  }
  return v7 == 40;
}

void sub_18EE3EBA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Interpreter::parseFormat(DSPGraph *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  AudioStreamBasicDescription *v11;
  char v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unsigned int data;
  unsigned int v19;
  BOOL *v20;
  int v21;
  unint64_t *v22;
  unint64_t *v23;
  int v24;
  const char **v25;
  int v26;
  BOOL *v27;
  unint64_t *v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v35;
  char v36[16];
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  std::string v40;
  char *v41;
  char *v42;

  DSPGraph::skipspace(a1, (const char **)a2);
  v4 = *(_QWORD *)a1;
  v5 = **(unsigned __int8 **)a1;
  if (v5 == 40)
  {
    v42 = (char *)(v4 + 1);
    HIBYTE(v41) = 1;
    LODWORD(v41) = 0;
    v7 = 0;
    if (DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v42, (const char **)&v41, 0))
    {
      if ((_DWORD)v41 == 1819304813)
      {
        v7 = 0;
        LODWORD(v41) = 0;
      }
      else if ((_DWORD)v41 == 1718773105)
      {
        LODWORD(v41) = 0;
        v7 = 1;
      }
      else
      {
        v7 = 0;
      }
    }
    *(_QWORD *)v36 = v42;
    v40.__r_.__value_.__r.__words[0] = 0;
    if (!DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)v36, (const char **)&v40.__r_.__value_.__l.__data_, v6)|| (data = v40.__r_.__value_.__l.__data_, HIDWORD(v40.__r_.__value_.__r.__words[0]))|| (v42 = *(char **)v36, !LODWORD(v40.__r_.__value_.__l.__data_)))
    {
      std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v40, "parseParenFormat");
      std::string::basic_string[abi:ne180100]<0>(&v39, "expected non-zero sample rate");
      DSPGraph::ThrowException(1886548769, (__int128 *)v36, 542, (__int128 *)&v40, &v39);
    }
    v19 = v41;
    if ((_DWORD)v41)
    {
      v40.__r_.__value_.__r.__words[0] = 0;
      if (!DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)v36, (const char **)&v40.__r_.__value_.__l.__data_, v17)|| (v21 = (int)v40.__r_.__value_.__l.__data_, HIDWORD(v40.__r_.__value_.__r.__words[0]))|| (v42 = *(char **)v36, !DSPGraph::Interpreter::parserInterleavedFlag((DSPGraph::Interpreter *)&v42, (const char **)((char *)&v41 + 7), v20))|| (*(_QWORD *)v36 = v42, v40.__r_.__value_.__r.__words[0] = 0, !DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)v36, (const char **)&v40.__r_.__value_.__l.__data_, v22))|| (v24 = (int)v40.__r_.__value_.__l.__data_, HIDWORD(v40.__r_.__value_.__r.__words[0]))|| (v40.__r_.__value_.__r.__words[0] = 0, !DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)v36,
                             (const char **)&v40.__r_.__value_.__l.__data_,
                             v23))
        || (v26 = (int)v40.__r_.__value_.__l.__data_, HIDWORD(v40.__r_.__value_.__r.__words[0])))
      {
        std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v40, "parseParenFormat");
        std::string::basic_string[abi:ne180100]<0>(&v39, "constant bit rate formats must have a block size and bytes per packet.");
        DSPGraph::ThrowException(1718449215, (__int128 *)v36, 547, (__int128 *)&v40, &v39);
      }
      v42 = *(char **)v36;
      goto LABEL_44;
    }
    v40.__r_.__value_.__r.__words[0] = 0;
    if (!DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)v36, (const char **)&v40.__r_.__value_.__l.__data_, v17)|| (v21 = (int)v40.__r_.__value_.__l.__data_, HIDWORD(v40.__r_.__value_.__r.__words[0])))
    {
      v26 = 0;
      v21 = 1;
    }
    else
    {
      v42 = *(char **)v36;
      if (DSPGraph::Interpreter::parserInterleavedFlag((DSPGraph::Interpreter *)&v42, (const char **)((char *)&v41 + 7), v27))
      {
        *(_QWORD *)v36 = v42;
        v40.__r_.__value_.__r.__words[0] = 0;
        if (!DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)v36, (const char **)&v40.__r_.__value_.__l.__data_, v28)|| (v24 = (int)v40.__r_.__value_.__l.__data_, HIDWORD(v40.__r_.__value_.__r.__words[0])))
        {
          v24 = 1;
        }
        else
        {
          v42 = *(char **)v36;
        }
        v26 = 0;
        goto LABEL_44;
      }
      v26 = 0;
    }
    v24 = 1;
LABEL_44:
    DSPGraph::skipspace((DSPGraph *)&v42, v25);
    v29 = v42;
    if (*v42 != 41)
    {
      v35 = v42;
      std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v40, "parseParenFormat");
      DSPGraph::strprintf((DSPGraph *)"expected ')' at end of format, got '%c'", &v39, *v35);
      DSPGraph::ThrowException(1886548769, (__int128 *)v36, 556, (__int128 *)&v40, &v39);
    }
    if (v19)
    {
      if (HIBYTE(v41))
      {
        std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v40, "parseParenFormat");
        std::string::basic_string[abi:ne180100]<0>(&v39, "constant bit rate formats must be de-interleaved.");
        DSPGraph::ThrowException(1718449215, (__int128 *)v36, 563, (__int128 *)&v40, &v39);
      }
      v30 = 0;
      v31 = 0;
      v32 = v19;
      v33 = v24;
    }
    else if (v7)
    {
      if (v24 == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v40, "parseParenFormat");
        std::string::basic_string[abi:ne180100]<0>(&v39, "frequency domain formats must have a block size.");
        DSPGraph::ThrowException(1718449215, (__int128 *)v36, 568, (__int128 *)&v40, &v39);
      }
      if (HIBYTE(v41))
      {
        std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v40, "parseParenFormat");
        std::string::basic_string[abi:ne180100]<0>(&v39, "frequency domain formats must be de-interleaved.");
        DSPGraph::ThrowException(1718449215, (__int128 *)v36, 571, (__int128 *)&v40, &v39);
      }
      v32 = 0x2966726571;
      v31 = 64;
      v33 = 1;
      v26 = 8;
      v30 = 8;
    }
    else
    {
      v31 = 32;
      if (HIBYTE(v41))
      {
        v32 = 0x96C70636DLL;
        v26 = 4 * (v21 & 0x7FFFFFF);
        v33 = 1;
        v30 = v26;
      }
      else
      {
        v32 = 0x296C70636DLL;
        v33 = 1;
        v26 = 4;
        v30 = 4;
      }
    }
    *(double *)a2 = (double)data;
    *(_QWORD *)(a2 + 8) = v32;
    *(_DWORD *)(a2 + 16) = v26;
    *(_DWORD *)(a2 + 20) = v33;
    *(_DWORD *)(a2 + 24) = v30;
    *(_DWORD *)(a2 + 28) = v21;
    *(_QWORD *)(a2 + 32) = v31;
    *(_DWORD *)(a2 + 40) = v24;
    *(_QWORD *)a1 = v29 + 2;
    return 1;
  }
  memset(&v40, 0, sizeof(v40));
  v8 = MEMORY[0x1E0C80978];
  while (1)
  {
    v9 = (char)v5;
    v10 = (v5 & 0x80) != 0
        ? __maskrune((char)v5, 0x500uLL)
        : *(_DWORD *)(v8 + 4 * (char)v5 + 60) & 0x500;
    if (!v10 && !memchr("-@/#,", v9, 6uLL))
      break;
    std::string::push_back(&v40, v9);
    v12 = *(_BYTE *)++v4;
    LOBYTE(v5) = v12;
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if (!v40.__r_.__value_.__l.__size_)
    {
      v15 = 0;
      goto LABEL_55;
    }
  }
  else
  {
    if (!*((_BYTE *)&v40.__r_.__value_.__s + 23))
      return 0;
    v13 = &v40;
  }
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v36 = *(_OWORD *)a2;
  v37 = v14;
  v38 = *(_QWORD *)(a2 + 32);
  v15 = CAStreamBasicDescription::FromText((CAStreamBasicDescription *)v13, v36, v11);
  if ((v15 & 1) != 0)
  {
    v16 = v37;
    *(_OWORD *)a2 = *(_OWORD *)v36;
    *(_OWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 32) = v38;
    *(_DWORD *)(a2 + 40) = 1;
    *(_QWORD *)a1 = v4;
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = (std::string *)v40.__r_.__value_.__r.__words[0];
LABEL_55:
    operator delete(v13);
  }
  return v15;
}

void sub_18EE3F214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseBoxCommand(DSPGraph::Interpreter *this, const char **a2, unint64_t *a3)
{
  AudioComponentDescription *v5;
  int v6;
  unsigned int *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  std::string v18;
  char *v19;
  std::string v20;
  const char *v21;
  char *v22[2];
  int v23;
  __int128 v24;
  std::string __p;
  __int128 v26;
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  char *v30;

  v30 = 0;
  DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)a2, (const char **)&v30, a3);
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)v28) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&__p, "parseBoxCommand");
    DSPGraph::strprintf((DSPGraph *)"expected name in 'box' command: %s", &v24, *a2);
    DSPGraph::ThrowException(1886548769, &v26, 875, (__int128 *)&__p, &v24);
  }
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  v26 = 0uLL;
  v27 = 0;
  v21 = *a2;
  if (DSPGraph::Interpreter::parseString((DSPGraph *)&v21, (uint64_t)&v26)
    && DSPGraph::NewBoxRegistry::has((uint64_t)this + 16, (uint64_t)&v26))
  {
    *a2 = v21;
    v6 = 1;
  }
  else
  {
    if (!DSPGraph::Interpreter::parseCompDesc((DSPGraph::Interpreter *)a2, (const char **)v22, v5))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v24, "parseBoxCommand");
      DSPGraph::strprintf((DSPGraph *)"expected class name or component description in 'box' command: %s", &v20, *a2);
      DSPGraph::ThrowException(1886548769, (__int128 *)&__p, 891, &v24, (__int128 *)&v20);
    }
    v6 = 0;
  }
  v19 = 0;
  if ((DSPGraph::Interpreter::parseUInt32((DSPGraph::Interpreter *)a2, (const char **)((char *)&v19 + 4), &v5->componentType) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v24, "parseBoxCommand");
    std::string::basic_string[abi:ne180100]<0>(&v20, "expected number of inputs in 'box' command");
    DSPGraph::ThrowException(1886548769, (__int128 *)&__p, 896, &v24, (__int128 *)&v20);
  }
  if ((DSPGraph::Interpreter::parseUInt32((DSPGraph::Interpreter *)a2, (const char **)&v19, v7) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v24, "parseBoxCommand");
    std::string::basic_string[abi:ne180100]<0>(&v20, "expected number of outputs in 'box' command");
    DSPGraph::ThrowException(1886548769, (__int128 *)&__p, 899, &v24, (__int128 *)&v20);
  }
  if (v6)
  {
    if (!DSPGraph::NewBoxRegistry::has((uint64_t)this + 16, (uint64_t)&v26))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v24, "parseBoxCommand");
      std::operator+<char>();
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v20, &v18, "' not found");
      DSPGraph::ThrowException(1852204065, (__int128 *)&__p, 905, &v24, (__int128 *)&v20);
    }
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<std::string>((_QWORD *)this + 3, (unsigned __int8 *)&v26);
    if (v8)
      v9 = std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(*((_QWORD *)v8 + 8), SHIDWORD(v19), (int)v19);
    else
      v9 = 0;
    v15 = *((_QWORD *)this + 1);
    if (v29 >= 0)
      v16 = (char *)v28;
    else
      v16 = (char *)v28[0];
    goto LABEL_28;
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v22;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v23;
  if (std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<AudioComponentDescription>((_QWORD *)this + 8, (unsigned int *)&__p))
  {
    v10 = std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<AudioComponentDescription>((_QWORD *)this + 8, (unsigned int *)v22);
    if (v10)
      v9 = std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(v10[8], SHIDWORD(v19), (int)v19);
    else
      v9 = 0;
    v15 = *((_QWORD *)this + 1);
    if (v29 >= 0)
      v16 = (char *)v28;
    else
      v16 = (char *)v28[0];
LABEL_28:
    std::string::basic_string[abi:ne180100]<0>(&__p, v16);
    DSPGraph::Graph::add(v15, v9, &__p);
    goto LABEL_29;
  }
  v11 = *((_QWORD *)this + 1);
  v13 = v19;
  v12 = HIDWORD(v19);
  if (v29 >= 0)
    v14 = (char *)v28;
  else
    v14 = (char *)v28[0];
  std::string::basic_string[abi:ne180100]<0>(&__p, v14);
  v9 = DSPGraph::Graph::add(v11, (uint64_t)v22, v12, v13, &__p);
LABEL_29:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v17 = *((_QWORD *)this + 25);
  if (v17 != *((_QWORD *)this + 24))
    DSPGraph::Box::setSubset(v9, *(_QWORD *)(v17 - 8));
  if (SHIBYTE(v27) < 0)
    operator delete((void *)v26);
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
}

void sub_18EE3F6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v39 - 81) < 0)
    operator delete(*(void **)(v39 - 104));
  if (*(char *)(v39 - 57) < 0)
    operator delete(*(void **)(v39 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Interpreter::parseUInt32(DSPGraph::Interpreter *this, const char **a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)this;
  v7 = 0;
  v8 = v5;
  result = DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v8, (const char **)&v7, (unint64_t *)a3);
  if ((_DWORD)result)
  {
    if (HIDWORD(v7))
    {
      return 0;
    }
    else
    {
      *(_DWORD *)a2 = v7;
      *(_QWORD *)this = v8;
      return 1;
    }
  }
  return result;
}

uint64_t DSPGraph::Interpreter::parseUInt64(DSPGraph::Interpreter *this, const char **a2, unint64_t *a3)
{
  unint64_t v5;
  char *v6;
  const char *v7;
  char *__endptr;

  DSPGraph::skipspace(this, a2);
  __endptr = 0;
  v5 = strtoul(*(const char **)this, &__endptr, 10);
  v6 = __endptr;
  if (__endptr == *(char **)this)
    return 0;
  v7 = (const char *)v5;
  if (v5 == -1)
  {
    if (*__error())
      return 0;
  }
  *a2 = v7;
  *(_QWORD *)this = v6;
  return 1;
}

uint64_t *std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<AudioComponentDescription>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1] + (unint64_t)*a2 + a2[2];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2[1] + (unint64_t)*a2 + a2[2];
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v3 == v8)
    {
      if (result[2] == *(_QWORD *)a2 && *((_DWORD *)result + 6) == (unint64_t)a2[2])
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

unint64_t DSPGraph::Graph::add(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, const std::string *a5)
{
  unint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (*(_BYTE *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "add");
    std::string::basic_string[abi:ne180100]<0>(&v12, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v14, 978, &v13, &v12);
  }
  v10 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v10, a3, a4);
  *(_QWORD *)v10 = &off_1E29116C0;
  *(_OWORD *)(v10 + 776) = 0u;
  *(_OWORD *)(v10 + 792) = 0u;
  *(_OWORD *)(v10 + 808) = 0u;
  *(_OWORD *)(v10 + 824) = *(_OWORD *)a2;
  *(_DWORD *)(v10 + 840) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(v10 + 848) = 0;
  DSPGraph::Graph::addBox(a1, v10, a5, 0, 0);
  return v10;
}

void sub_18EE3FA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::addBox(uint64_t result, unint64_t a2, const std::string *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *prime;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  size_t v32;
  uint8x8_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  size_t v37;
  uint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t SerialNumber;
  unint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  _QWORD **v48;
  _QWORD *i;
  unint64_t v50;
  float v51;
  float v52;
  _BOOL8 v53;
  unint64_t v54;
  unint64_t v55;
  int8x8_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint8x8_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint8x8_t v75;
  unint64_t v76;
  void **v77;
  char *v78;
  unint64_t v79;
  std::string *v80;
  _QWORD *v81;
  float v82;
  float v83;
  _BOOL8 v84;
  unint64_t v85;
  unint64_t v86;
  int8x8_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint8x8_t v93;
  unint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;

  v9 = result;
  v10 = result + 24;
  v11 = (_QWORD *)(result + 24);
  while (1)
  {
    v11 = (_QWORD *)*v11;
    if (!v11)
      break;
    if (v11[2] == a2)
      return result;
  }
  prime = operator new(0x18uLL);
  v13 = prime;
  v14 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v15 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v14 >> 47) ^ v14);
  v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
  *prime = 0;
  prime[1] = v16;
  prime[2] = a2;
  v17 = *(_QWORD *)(v9 + 16);
  if (!v17)
    goto LABEL_21;
  v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    v19 = v16;
    if (v17 <= v16)
      v19 = v16 % v17;
  }
  else
  {
    v19 = (v17 - 1) & v16;
  }
  v20 = *(_QWORD **)(*(_QWORD *)(v9 + 8) + 8 * v19);
  if (!v20 || (v21 = (_QWORD *)*v20) == 0)
  {
LABEL_21:
    v23 = (float)(unint64_t)(*(_QWORD *)(v9 + 32) + 1);
    v24 = *(float *)(v9 + 40);
    if (!v17 || (float)(v24 * (float)v17) < v23)
    {
      v25 = 1;
      if (v17 >= 3)
        v25 = (v17 & (v17 - 1)) != 0;
      v26 = v25 | (2 * v17);
      v27 = vcvtps_u32_f32(v23 / v24);
      if (v26 <= v27)
        v28 = v27;
      else
        v28 = v26;
      if (v28 == 1)
      {
        v28 = 2;
      }
      else if ((v28 & (v28 - 1)) != 0)
      {
        prime = (_QWORD *)std::__next_prime(v28);
        v28 = (size_t)prime;
        v17 = *(_QWORD *)(v9 + 16);
      }
      if (v28 > v17)
        goto LABEL_268;
      if (v28 >= v17)
        goto LABEL_62;
      prime = (_QWORD *)vcvtps_u32_f32((float)*(unint64_t *)(v9 + 32) / *(float *)(v9 + 40));
      if (v17 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        prime = (_QWORD *)std::__next_prime((size_t)prime);
      }
      else
      {
        v35 = 1 << -(char)__clz((unint64_t)prime - 1);
        if ((unint64_t)prime >= 2)
          prime = (_QWORD *)v35;
      }
      if (v28 <= (unint64_t)prime)
        v28 = (size_t)prime;
      if (v28 >= v17)
      {
        v17 = *(_QWORD *)(v9 + 16);
        goto LABEL_62;
      }
      if (v28)
      {
LABEL_268:
        if (v28 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v29 = operator new(8 * v28);
        prime = *(_QWORD **)(v9 + 8);
        *(_QWORD *)(v9 + 8) = v29;
        if (prime)
          operator delete(prime);
        v30 = 0;
        *(_QWORD *)(v9 + 16) = v28;
        do
          *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v30++) = 0;
        while (v28 != v30);
        v31 = *(_QWORD **)v10;
        if (*(_QWORD *)v10)
        {
          v32 = v31[1];
          v33 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
          v33.i16[0] = vaddlv_u8(v33);
          if (v33.u32[0] > 1uLL)
          {
            if (v32 >= v28)
              v32 %= v28;
          }
          else
          {
            v32 &= v28 - 1;
          }
          *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v32) = v10;
          v36 = (_QWORD *)*v31;
          if (*v31)
          {
            do
            {
              v37 = v36[1];
              if (v33.u32[0] > 1uLL)
              {
                if (v37 >= v28)
                  v37 %= v28;
              }
              else
              {
                v37 &= v28 - 1;
              }
              if (v37 != v32)
              {
                v38 = *(_QWORD *)(v9 + 8);
                if (!*(_QWORD *)(v38 + 8 * v37))
                {
                  *(_QWORD *)(v38 + 8 * v37) = v31;
                  goto LABEL_58;
                }
                *v31 = *v36;
                *v36 = **(_QWORD **)(*(_QWORD *)(v9 + 8) + 8 * v37);
                **(_QWORD **)(*(_QWORD *)(v9 + 8) + 8 * v37) = v36;
                v36 = v31;
              }
              v37 = v32;
LABEL_58:
              v31 = v36;
              v36 = (_QWORD *)*v36;
              v32 = v37;
            }
            while (v36);
          }
        }
        v17 = v28;
      }
      else
      {
        prime = *(_QWORD **)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (prime)
          operator delete(prime);
        v17 = 0;
        *(_QWORD *)(v9 + 16) = 0;
      }
    }
LABEL_62:
    v39 = v13[1];
    v40 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v40.i16[0] = vaddlv_u8(v40);
    if (v40.u32[0] > 1uLL)
    {
      if (v39 >= v17)
        v39 %= v17;
    }
    else
    {
      v39 &= v17 - 1;
    }
    v41 = *(_QWORD *)(v9 + 8);
    v42 = *(_QWORD **)(v41 + 8 * v39);
    if (v42)
    {
      *v13 = *v42;
    }
    else
    {
      *v13 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v13;
      *(_QWORD *)(v41 + 8 * v39) = v10;
      if (!*v13)
      {
LABEL_75:
        ++*(_QWORD *)(v9 + 32);
        goto LABEL_76;
      }
      v43 = *(_QWORD *)(*v13 + 8);
      if (v40.u32[0] > 1uLL)
      {
        if (v43 >= v17)
          v43 %= v17;
      }
      else
      {
        v43 &= v17 - 1;
      }
      v42 = (_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v43);
    }
    *v42 = v13;
    goto LABEL_75;
  }
  while (1)
  {
    v22 = v21[1];
    if (v22 == v16)
      break;
    if (v18.u32[0] > 1uLL)
    {
      if (v22 >= v17)
        v22 %= v17;
    }
    else
    {
      v22 &= v17 - 1;
    }
    if (v22 != v19)
      goto LABEL_21;
LABEL_20:
    v21 = (_QWORD *)*v21;
    if (!v21)
      goto LABEL_21;
  }
  if (v21[2] != a2)
    goto LABEL_20;
  prime[2] = 0;
  if (a2)
    (*(void (**)(unint64_t))(*(_QWORD *)a2 + 8))(a2);
  operator delete(v13);
LABEL_76:
  *(_QWORD *)(a2 + 8) = v9;
  SerialNumber = DSPGraph::Graph::generateSerialNumber((DSPGraph::Graph *)prime);
  if ((_BYTE)a5)
    v45 = a4;
  else
    v45 = SerialNumber;
  *(_QWORD *)(a2 + 56) = v45;
  v46 = *(_QWORD *)(v9 + 832);
  if (v46)
  {
    v47 = (uint8x8_t)vcnt_s8((int8x8_t)v46);
    v47.i16[0] = vaddlv_u8(v47);
    if (v47.u32[0] > 1uLL)
    {
      a5 = v45;
      if (v45 >= v46)
        a5 = v45 % v46;
    }
    else
    {
      a5 = (v46 - 1) & v45;
    }
    v48 = *(_QWORD ***)(*(_QWORD *)(v9 + 824) + 8 * a5);
    if (v48)
    {
      for (i = *v48; i; i = (_QWORD *)*i)
      {
        v50 = i[1];
        if (v50 == v45)
        {
          if (i[2] == v45)
            goto LABEL_152;
        }
        else
        {
          if (v47.u32[0] > 1uLL)
          {
            if (v50 >= v46)
              v50 %= v46;
          }
          else
          {
            v50 &= v46 - 1;
          }
          if (v50 != a5)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v45;
  i[2] = v45;
  i[3] = 0;
  v51 = (float)(unint64_t)(*(_QWORD *)(v9 + 848) + 1);
  v52 = *(float *)(v9 + 856);
  if (!v46 || (float)(v52 * (float)v46) < v51)
  {
    v53 = 1;
    if (v46 >= 3)
      v53 = (v46 & (v46 - 1)) != 0;
    v54 = v53 | (2 * v46);
    v55 = vcvtps_u32_f32(v51 / v52);
    if (v54 <= v55)
      v56 = (int8x8_t)v55;
    else
      v56 = (int8x8_t)v54;
    if (*(_QWORD *)&v56 == 1)
    {
      v56 = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&v56 & (*(_QWORD *)&v56 - 1)) != 0)
    {
      v56 = (int8x8_t)std::__next_prime(*(_QWORD *)&v56);
      v46 = *(_QWORD *)(v9 + 832);
    }
    if (*(_QWORD *)&v56 <= v46)
    {
      if (*(_QWORD *)&v56 < v46)
      {
        v63 = vcvtps_u32_f32((float)*(unint64_t *)(v9 + 848) / *(float *)(v9 + 856));
        if (v46 < 3 || (v64 = (uint8x8_t)vcnt_s8((int8x8_t)v46), v64.i16[0] = vaddlv_u8(v64), v64.u32[0] > 1uLL))
        {
          v63 = std::__next_prime(v63);
        }
        else
        {
          v65 = 1 << -(char)__clz(v63 - 1);
          if (v63 >= 2)
            v63 = v65;
        }
        if (*(_QWORD *)&v56 <= v63)
          v56 = (int8x8_t)v63;
        if (*(_QWORD *)&v56 >= v46)
        {
          v46 = *(_QWORD *)(v9 + 832);
        }
        else
        {
          if (v56)
            goto LABEL_108;
          v104 = *(void **)(v9 + 824);
          *(_QWORD *)(v9 + 824) = 0;
          if (v104)
            operator delete(v104);
          v46 = 0;
          *(_QWORD *)(v9 + 832) = 0;
        }
      }
    }
    else
    {
LABEL_108:
      if (*(_QWORD *)&v56 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v57 = operator new(8 * *(_QWORD *)&v56);
      v58 = *(void **)(v9 + 824);
      *(_QWORD *)(v9 + 824) = v57;
      if (v58)
        operator delete(v58);
      v59 = 0;
      *(int8x8_t *)(v9 + 832) = v56;
      do
        *(_QWORD *)(*(_QWORD *)(v9 + 824) + 8 * v59++) = 0;
      while (*(_QWORD *)&v56 != v59);
      v60 = *(_QWORD **)(v9 + 840);
      if (v60)
      {
        v61 = v60[1];
        v62 = (uint8x8_t)vcnt_s8(v56);
        v62.i16[0] = vaddlv_u8(v62);
        if (v62.u32[0] > 1uLL)
        {
          if (v61 >= *(_QWORD *)&v56)
            v61 %= *(_QWORD *)&v56;
        }
        else
        {
          v61 &= *(_QWORD *)&v56 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v9 + 824) + 8 * v61) = v9 + 840;
        v66 = (_QWORD *)*v60;
        if (*v60)
        {
          do
          {
            v67 = v66[1];
            if (v62.u32[0] > 1uLL)
            {
              if (v67 >= *(_QWORD *)&v56)
                v67 %= *(_QWORD *)&v56;
            }
            else
            {
              v67 &= *(_QWORD *)&v56 - 1;
            }
            if (v67 != v61)
            {
              v68 = *(_QWORD *)(v9 + 824);
              if (!*(_QWORD *)(v68 + 8 * v67))
              {
                *(_QWORD *)(v68 + 8 * v67) = v60;
                goto LABEL_133;
              }
              *v60 = *v66;
              *v66 = **(_QWORD **)(*(_QWORD *)(v9 + 824) + 8 * v67);
              **(_QWORD **)(*(_QWORD *)(v9 + 824) + 8 * v67) = v66;
              v66 = v60;
            }
            v67 = v61;
LABEL_133:
            v60 = v66;
            v66 = (_QWORD *)*v66;
            v61 = v67;
          }
          while (v66);
        }
      }
      v46 = (unint64_t)v56;
    }
    if ((v46 & (v46 - 1)) != 0)
    {
      if (v45 >= v46)
        a5 = v45 % v46;
      else
        a5 = v45;
    }
    else
    {
      a5 = (v46 - 1) & v45;
    }
  }
  v69 = *(_QWORD *)(v9 + 824);
  v70 = *(_QWORD **)(v69 + 8 * a5);
  if (v70)
  {
    *i = *v70;
    goto LABEL_150;
  }
  *i = *(_QWORD *)(v9 + 840);
  *(_QWORD *)(v9 + 840) = i;
  *(_QWORD *)(v69 + 8 * a5) = v9 + 840;
  if (*i)
  {
    v71 = *(_QWORD *)(*i + 8);
    if ((v46 & (v46 - 1)) != 0)
    {
      if (v71 >= v46)
        v71 %= v46;
    }
    else
    {
      v71 &= v46 - 1;
    }
    v70 = (_QWORD *)(*(_QWORD *)(v9 + 824) + 8 * v71);
LABEL_150:
    *v70 = i;
  }
  ++*(_QWORD *)(v9 + 848);
LABEL_152:
  i[3] = a2;
  std::string::operator=((std::string *)(a2 + 32), a3);
  v72 = std::__string_hash<char>::operator()[abi:ne180100](a2 + 32);
  v73 = v72;
  v74 = *(_QWORD *)(v9 + 792);
  if (v74)
  {
    v75 = (uint8x8_t)vcnt_s8((int8x8_t)v74);
    v75.i16[0] = vaddlv_u8(v75);
    v76 = v75.u32[0];
    if (v75.u32[0] > 1uLL)
    {
      v10 = v72;
      if (v72 >= v74)
        v10 = v72 % v74;
    }
    else
    {
      v10 = (v74 - 1) & v72;
    }
    v77 = *(void ***)(*(_QWORD *)(v9 + 784) + 8 * v10);
    if (v77)
    {
      v78 = (char *)*v77;
      if (*v77)
      {
        do
        {
          v79 = *((_QWORD *)v78 + 1);
          if (v79 == v73)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v78 + 16, (unsigned __int8 *)(a2 + 32)))
            {
              goto LABEL_228;
            }
          }
          else
          {
            if (v76 > 1)
            {
              if (v79 >= v74)
                v79 %= v74;
            }
            else
            {
              v79 &= v74 - 1;
            }
            if (v79 != v10)
              break;
          }
          v78 = *(char **)v78;
        }
        while (v78);
      }
    }
  }
  v78 = (char *)operator new(0x30uLL);
  *(_QWORD *)v78 = 0;
  *((_QWORD *)v78 + 1) = v73;
  v80 = (std::string *)(v78 + 16);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v80, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    *(_OWORD *)&v80->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v78 + 4) = *(_QWORD *)(a2 + 48);
  }
  v81 = (_QWORD *)(v9 + 800);
  *((_QWORD *)v78 + 5) = 0;
  v82 = (float)(unint64_t)(*(_QWORD *)(v9 + 808) + 1);
  v83 = *(float *)(v9 + 816);
  if (!v74 || (float)(v83 * (float)v74) < v82)
  {
    v84 = 1;
    if (v74 >= 3)
      v84 = (v74 & (v74 - 1)) != 0;
    v85 = v84 | (2 * v74);
    v86 = vcvtps_u32_f32(v82 / v83);
    if (v85 <= v86)
      v87 = (int8x8_t)v86;
    else
      v87 = (int8x8_t)v85;
    if (*(_QWORD *)&v87 == 1)
    {
      v87 = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&v87 & (*(_QWORD *)&v87 - 1)) != 0)
    {
      v87 = (int8x8_t)std::__next_prime(*(_QWORD *)&v87);
    }
    v74 = *(_QWORD *)(v9 + 792);
    if (*(_QWORD *)&v87 <= v74)
    {
      if (*(_QWORD *)&v87 < v74)
      {
        v94 = vcvtps_u32_f32((float)*(unint64_t *)(v9 + 808) / *(float *)(v9 + 816));
        if (v74 < 3 || (v95 = (uint8x8_t)vcnt_s8((int8x8_t)v74), v95.i16[0] = vaddlv_u8(v95), v95.u32[0] > 1uLL))
        {
          v94 = std::__next_prime(v94);
        }
        else
        {
          v96 = 1 << -(char)__clz(v94 - 1);
          if (v94 >= 2)
            v94 = v96;
        }
        if (*(_QWORD *)&v87 <= v94)
          v87 = (int8x8_t)v94;
        if (*(_QWORD *)&v87 >= v74)
        {
          v74 = *(_QWORD *)(v9 + 792);
        }
        else
        {
          if (v87)
            goto LABEL_184;
          v105 = *(void **)(v9 + 784);
          *(_QWORD *)(v9 + 784) = 0;
          if (v105)
            operator delete(v105);
          v74 = 0;
          *(_QWORD *)(v9 + 792) = 0;
        }
      }
    }
    else
    {
LABEL_184:
      if (*(_QWORD *)&v87 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v88 = operator new(8 * *(_QWORD *)&v87);
      v89 = *(void **)(v9 + 784);
      *(_QWORD *)(v9 + 784) = v88;
      if (v89)
        operator delete(v89);
      v90 = 0;
      *(int8x8_t *)(v9 + 792) = v87;
      do
        *(_QWORD *)(*(_QWORD *)(v9 + 784) + 8 * v90++) = 0;
      while (*(_QWORD *)&v87 != v90);
      v91 = (_QWORD *)*v81;
      if (*v81)
      {
        v92 = v91[1];
        v93 = (uint8x8_t)vcnt_s8(v87);
        v93.i16[0] = vaddlv_u8(v93);
        if (v93.u32[0] > 1uLL)
        {
          if (v92 >= *(_QWORD *)&v87)
            v92 %= *(_QWORD *)&v87;
        }
        else
        {
          v92 &= *(_QWORD *)&v87 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v9 + 784) + 8 * v92) = v81;
        v97 = (_QWORD *)*v91;
        if (*v91)
        {
          do
          {
            v98 = v97[1];
            if (v93.u32[0] > 1uLL)
            {
              if (v98 >= *(_QWORD *)&v87)
                v98 %= *(_QWORD *)&v87;
            }
            else
            {
              v98 &= *(_QWORD *)&v87 - 1;
            }
            if (v98 != v92)
            {
              v99 = *(_QWORD *)(v9 + 784);
              if (!*(_QWORD *)(v99 + 8 * v98))
              {
                *(_QWORD *)(v99 + 8 * v98) = v91;
                goto LABEL_209;
              }
              *v91 = *v97;
              *v97 = **(_QWORD **)(*(_QWORD *)(v9 + 784) + 8 * v98);
              **(_QWORD **)(*(_QWORD *)(v9 + 784) + 8 * v98) = v97;
              v97 = v91;
            }
            v98 = v92;
LABEL_209:
            v91 = v97;
            v97 = (_QWORD *)*v97;
            v92 = v98;
          }
          while (v97);
        }
      }
      v74 = (unint64_t)v87;
    }
    if ((v74 & (v74 - 1)) != 0)
    {
      if (v73 >= v74)
        v10 = v73 % v74;
      else
        v10 = v73;
    }
    else
    {
      v10 = (v74 - 1) & v73;
    }
  }
  v100 = *(_QWORD *)(v9 + 784);
  v101 = *(_QWORD **)(v100 + 8 * v10);
  if (v101)
  {
    *(_QWORD *)v78 = *v101;
    goto LABEL_226;
  }
  *(_QWORD *)v78 = *v81;
  *v81 = v78;
  *(_QWORD *)(v100 + 8 * v10) = v81;
  if (*(_QWORD *)v78)
  {
    v102 = *(_QWORD *)(*(_QWORD *)v78 + 8);
    if ((v74 & (v74 - 1)) != 0)
    {
      if (v102 >= v74)
        v102 %= v74;
    }
    else
    {
      v102 &= v74 - 1;
    }
    v101 = (_QWORD *)(*(_QWORD *)(v9 + 784) + 8 * v102);
LABEL_226:
    *v101 = v78;
  }
  ++*(_QWORD *)(v9 + 808);
LABEL_228:
  *((_QWORD *)v78 + 5) = a2;
  if (((*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) & 0x1FFFFFFFE0) == 0)
    std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box * const&>(v9 + 328, a2, a2);
  v103 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 248))(a2);
  if (v103)
    std::__hash_table<DSPGraph::FCBox *,std::hash<DSPGraph::FCBox *>,std::equal_to<DSPGraph::FCBox *>,std::allocator<DSPGraph::FCBox *>>::__emplace_unique_key_args<DSPGraph::FCBox *,DSPGraph::FCBox * const&>((float *)(v9 + 368), v103, v103);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 560))(a2);
}

void sub_18EE40758(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

unint64_t DSPGraph::Graph::generateSerialNumber(DSPGraph::Graph *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  unint64_t v3;
  unsigned int v5;
  std::random_device v6;

  {
    std::random_device::random_device[abi:ne180100](&v6);
    v5 = MEMORY[0x193FFE1E4](&v6);
    DSPGraph::Graph::generateSerialNumber(void)::sSerialNo = DSPGraph::intPtrHash((DSPGraph *)v5);
    std::random_device::~random_device(&v6);
  }
  std::mutex::lock(&DSPGraph::Graph::generateSerialNumber(void)::sSerialNoLock);
  v2 = atomic_load((unint64_t *)&DSPGraph::Graph::generateSerialNumber(void)::sSerialNo);
  atomic_store(v2 + 1 + (((v2 + 1) / 0x7FFFFFFFFFFFFFFFLL) | (((v2 + 1) / 0x7FFFFFFFFFFFFFFFLL) << 63)), (unint64_t *)&DSPGraph::Graph::generateSerialNumber(void)::sSerialNo);
  v3 = atomic_load((unint64_t *)&DSPGraph::Graph::generateSerialNumber(void)::sSerialNo);
  std::mutex::unlock(&DSPGraph::Graph::generateSerialNumber(void)::sSerialNoLock);
  return v3;
}

void sub_18EE40878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  std::random_device::~random_device(&a11);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Box::asFCBox(DSPGraph::Box *this)
{
  return 0;
}

DSPGraph::Box *DSPGraph::Box::Box(DSPGraph::Box *this, unsigned int a2, unsigned int a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  char *v37;
  int64x2_t v38;
  char *v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  __int128 v49;
  int64x2_t v50;
  char *v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  int64x2_t v66;
  char *v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  int64x2_t v79;
  char *v80;
  _OWORD *v81;
  int64x2_t *v84;
  int64x2_t *v85;
  char *v86;
  int64x2_t v87;
  char *v88;
  char *v89;

  *((_OWORD *)this + 4) = 0u;
  v85 = (int64x2_t *)((char *)this + 64);
  *((_OWORD *)this + 7) = 0u;
  *(_QWORD *)this = off_1E2911370;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 36) = 1065353216;
  *((_QWORD *)this + 31) = 850045863;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  os_unfair_lock_lock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  if (qword_1EE1682D0)
  {
    v5 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1EE1682D0);
    if (v5)
    {
      v6 = v5;
      v7 = qword_1EE1682C8;
      if (qword_1EE1682C8)
        goto LABEL_14;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v6 = (std::__shared_weak_count *)operator new(0x1A0uLL);
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917BE8;
  v6->__shared_owners_ = 0;
  *(_OWORD *)&v6[1].__shared_owners_ = 0u;
  v7 = (uint64_t)&v6[1].__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6[2].std::__shared_count = 0u;
  *(_OWORD *)&v6[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[3].__shared_owners_ = 0u;
  v6[4].std::__shared_count = 0u;
  *(_OWORD *)&v6[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[5].__shared_owners_ = 0u;
  v6[6].std::__shared_count = 0u;
  *(_OWORD *)&v6[6].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[7].__shared_owners_ = 0u;
  v6[8].std::__shared_count = 0u;
  *(_OWORD *)&v6[8].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[9].__shared_owners_ = 0u;
  v6[10].std::__shared_count = 0u;
  *(_OWORD *)&v6[10].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[11].__shared_owners_ = 0u;
  v6[12].std::__shared_count = 0u;
  *(_OWORD *)&v6[12].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[13].__shared_owners_ = 0u;
  v6[14].std::__shared_count = 0u;
  *(_OWORD *)&v6[14].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[15].__shared_owners_ = 0u;
  v6[16].std::__shared_count = 0u;
  *(_OWORD *)&v6[16].__shared_weak_owners_ = 0u;
  v10 = caulk::alloc::global_page_cache::instance((caulk::alloc::global_page_cache *)v6);
  v6[3].__shared_owners_ = 0;
  v6[1].__shared_weak_owners_ = v10 + 16;
  v6[2].__vftable = 0;
  v6[2].__shared_owners_ = 0;
  v6[2].__shared_weak_owners_ = 0;
  v11 = 96;
  LODWORD(v6[3].__vftable) = 0;
  do
  {
    v12 = (std::__shared_weak_count_vtbl **)((char *)&v6->__vftable + v11);
    *v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
    v11 += 32;
  }
  while (v11 != 416);
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = (std::__shared_weak_count *)qword_1EE1682D0;
  qword_1EE1682C8 = (uint64_t)&v6[1].__shared_owners_;
  qword_1EE1682D0 = (uint64_t)v6;
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  v84 = (int64x2_t *)((char *)this + 88);
  os_unfair_lock_unlock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  v16 = (unint64_t *)&v6->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  *((_QWORD *)this + 72) = v7;
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = v6;
  v19 = a3;
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  do
    v22 = __ldaxr(v16);
  while (__stlxr(v22 - 1, v16));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *((_QWORD *)this + 74) = &caulk::inplace_function_detail::vtable<void,caulk::concurrent::details::skiplist_node<unsigned int,DSPGraph::Analyzer *>::layout_vk const&>::empty;
  caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::random_engine();
  v23 = 0;
  *((_QWORD *)this + 42) = 0;
  *((_DWORD *)this + 87) = 167837706;
  *((_DWORD *)this + 86) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 44) = 0;
  do
  {
    atomic_store(0, (unint64_t *)((char *)this + v23 + 360));
    atomic_store(0, (unint64_t *)((char *)this + v23 + 368));
    v23 += 16;
  }
  while (v23 != 160);
  *((_QWORD *)this + 65) = 0;
  *((_DWORD *)this + 133) = 16908289;
  *((_DWORD *)this + 132) = -1;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 68) = 0;
  atomic_store(0, (unint64_t *)this + 68);
  atomic_store(0, (unint64_t *)this + 69);
  for (i = 360; i != 520; i += 16)
    atomic_store((unint64_t)this + 520, (unint64_t *)((char *)this + i));
  __dmb(0xBu);
  v26 = (_QWORD *)((char *)this + 80);
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 84) = 850045863;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_WORD *)this + 372) = 1;
  *((_BYTE *)this + 746) = 0;
  *((_BYTE *)this + 752) = 0;
  *((_BYTE *)this + 760) = 0;
  *((_DWORD *)this + 192) = 0;
  v27 = *((_QWORD *)this + 8);
  if (a2 > (unint64_t)((v25 - v27) >> 5))
  {
    v28 = *((_QWORD *)this + 9);
    v89 = (char *)this + 80;
    v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(a2);
    v31 = &v29[v28 - v27];
    v33 = *((_QWORD *)this + 8);
    v32 = *((_QWORD *)this + 9);
    if (v32 == v33)
    {
      v38 = vdupq_n_s64(v32);
      v37 = &v29[v28 - v27];
      v19 = a3;
    }
    else
    {
      v34 = 0;
      v19 = a3;
      do
      {
        v35 = &v31[v34];
        *((_QWORD *)v35 - 4) = off_1E2911638;
        v36 = *(_OWORD *)(v32 + v34 - 24);
        *((_DWORD *)v35 - 2) = *(_DWORD *)(v32 + v34 - 8);
        *(_OWORD *)(v35 - 24) = v36;
        *((_QWORD *)v35 - 4) = &off_1E2913300;
        *((_DWORD *)v35 - 1) = *(_DWORD *)(v32 + v34 - 4);
        v34 -= 32;
      }
      while (v32 + v34 != v33);
      v37 = &v31[v34];
      v38 = *v85;
    }
    *((_QWORD *)this + 8) = v37;
    *((_QWORD *)this + 9) = v31;
    v87 = v38;
    v39 = (char *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = &v29[32 * v30];
    v88 = v39;
    v86 = (char *)v38.i64[0];
    std::__split_buffer<DSPGraph::OutputPort>::~__split_buffer((uint64_t)&v86);
  }
  v40 = v19;
  v41 = (unint64_t *)((char *)this + 104);
  v42 = *((_QWORD *)this + 11);
  if (v19 > (unint64_t)((*((_QWORD *)this + 13) - v42) >> 5))
  {
    v43 = *((_QWORD *)this + 12);
    v89 = (char *)this + 104;
    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v40);
    v46 = *((_QWORD *)this + 11);
    v47 = *((_QWORD *)this + 12);
    if (v47 == v46)
    {
      v50 = vdupq_n_s64(v47);
      v48 = &v44[v43 - v42];
    }
    else
    {
      v48 = &v44[v43 - v42];
      do
      {
        *((_QWORD *)v48 - 4) = off_1E2911638;
        v48 -= 32;
        v49 = *(_OWORD *)(v47 - 24);
        *((_DWORD *)v48 + 6) = *(_DWORD *)(v47 - 8);
        *(_OWORD *)(v48 + 8) = v49;
        *(_QWORD *)v48 = &off_1E290C090;
        v47 -= 32;
      }
      while (v47 != v46);
      v50 = *v84;
    }
    *((_QWORD *)this + 11) = v48;
    *((_QWORD *)this + 12) = &v44[v43 - v42];
    v87 = v50;
    v51 = (char *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = &v44[32 * v45];
    v88 = v51;
    v86 = (char *)v50.i64[0];
    std::__split_buffer<DSPGraph::OutputPort>::~__split_buffer((uint64_t)&v86);
  }
  if (a2)
  {
    v52 = 0;
    v53 = (char *)*((_QWORD *)this + 9);
    do
    {
      if ((unint64_t)v53 >= *v26)
      {
        v54 = (uint64_t)&v53[-v85->i64[0]] >> 5;
        if ((unint64_t)(v54 + 1) >> 59)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v55 = *v26 - v85->i64[0];
        v56 = v55 >> 4;
        if (v55 >> 4 <= (unint64_t)(v54 + 1))
          v56 = v54 + 1;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0)
          v57 = 0x7FFFFFFFFFFFFFFLL;
        else
          v57 = v56;
        v89 = (char *)this + 80;
        v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v57);
        v59 = &v58[32 * v54];
        v86 = v58;
        v87.i64[0] = (uint64_t)v59;
        v88 = &v58[32 * v60];
        *((_QWORD *)v59 + 1) = this;
        *((_QWORD *)v59 + 2) = 0;
        *(_QWORD *)v59 = &off_1E2913300;
        *((_DWORD *)v59 + 6) = v52;
        *((_DWORD *)v59 + 7) = 0;
        v53 = v59 + 32;
        v87.i64[1] = (uint64_t)(v59 + 32);
        v62 = *((_QWORD *)this + 8);
        v61 = *((_QWORD *)this + 9);
        if (v61 == v62)
        {
          v66 = vdupq_n_s64(v61);
        }
        else
        {
          v63 = 0;
          do
          {
            v64 = &v59[v63];
            *((_QWORD *)v64 - 4) = off_1E2911638;
            v65 = *(_OWORD *)(v61 + v63 - 24);
            *((_DWORD *)v64 - 2) = *(_DWORD *)(v61 + v63 - 8);
            *(_OWORD *)(v64 - 24) = v65;
            *((_QWORD *)v64 - 4) = &off_1E2913300;
            *((_DWORD *)v64 - 1) = *(_DWORD *)(v61 + v63 - 4);
            v63 -= 32;
          }
          while (v61 + v63 != v62);
          v59 += v63;
          v66 = *v85;
          v53 = (char *)v87.i64[1];
        }
        *((_QWORD *)this + 8) = v59;
        *((_QWORD *)this + 9) = v53;
        v87 = v66;
        v67 = (char *)*((_QWORD *)this + 10);
        *((_QWORD *)this + 10) = v88;
        v88 = v67;
        v86 = (char *)v66.i64[0];
        std::__split_buffer<DSPGraph::OutputPort>::~__split_buffer((uint64_t)&v86);
      }
      else
      {
        *((_QWORD *)v53 + 1) = this;
        *((_QWORD *)v53 + 2) = 0;
        *(_QWORD *)v53 = &off_1E2913300;
        *((_DWORD *)v53 + 6) = v52;
        *((_DWORD *)v53 + 7) = 0;
        v53 += 32;
        *((_QWORD *)this + 9) = v53;
      }
      *((_QWORD *)this + 9) = v53;
      ++v52;
    }
    while (v52 != a2);
  }
  if (a3)
  {
    v68 = 0;
    v69 = *((_QWORD *)this + 12);
    do
    {
      if (v69 >= *v41)
      {
        v70 = (uint64_t)(v69 - v84->i64[0]) >> 5;
        if ((unint64_t)(v70 + 1) >> 59)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v71 = *v41 - v84->i64[0];
        v72 = v71 >> 4;
        if (v71 >> 4 <= (unint64_t)(v70 + 1))
          v72 = v70 + 1;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFE0)
          v73 = 0x7FFFFFFFFFFFFFFLL;
        else
          v73 = v72;
        v89 = (char *)this + 104;
        if (v73)
          v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v73);
        else
          v74 = 0;
        v75 = v73 + 32 * v70;
        v86 = (char *)v73;
        v87.i64[0] = v75;
        v88 = (char *)(v73 + 32 * v74);
        *(_QWORD *)(v75 + 8) = this;
        *(_QWORD *)(v75 + 16) = 0;
        *(_DWORD *)(v75 + 24) = v68;
        *(_QWORD *)v75 = &off_1E290C090;
        v69 = v75 + 32;
        v87.i64[1] = v75 + 32;
        v76 = *((_QWORD *)this + 11);
        v77 = *((_QWORD *)this + 12);
        if (v77 == v76)
        {
          v79 = vdupq_n_s64(v77);
        }
        else
        {
          do
          {
            *(_QWORD *)(v75 - 32) = off_1E2911638;
            v75 -= 32;
            v78 = *(_OWORD *)(v77 - 24);
            *(_DWORD *)(v75 + 24) = *(_DWORD *)(v77 - 8);
            *(_OWORD *)(v75 + 8) = v78;
            *(_QWORD *)v75 = &off_1E290C090;
            v77 -= 32;
          }
          while (v77 != v76);
          v79 = *v84;
          v69 = v87.u64[1];
        }
        *((_QWORD *)this + 11) = v75;
        *((_QWORD *)this + 12) = v69;
        v87 = v79;
        v80 = (char *)*((_QWORD *)this + 13);
        *((_QWORD *)this + 13) = v88;
        v88 = v80;
        v86 = (char *)v79.i64[0];
        std::__split_buffer<DSPGraph::OutputPort>::~__split_buffer((uint64_t)&v86);
      }
      else
      {
        *(_QWORD *)(v69 + 8) = this;
        *(_QWORD *)(v69 + 16) = 0;
        *(_DWORD *)(v69 + 24) = v68;
        *(_QWORD *)v69 = &off_1E290C090;
        v69 += 32;
        *((_QWORD *)this + 12) = v69;
      }
      *((_QWORD *)this + 12) = v69;
      ++v68;
    }
    while (v68 != a3);
  }
  v81 = (_OWORD *)operator new();
  v81[6] = 0u;
  v81[7] = 0u;
  v81[5] = 0u;
  v81[2] = 0u;
  v81[3] = 0u;
  *v81 = 0u;
  v81[1] = 0u;
  v81[4] = 0u;
  caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::lf_read_synchronized_write((caulk::concurrent::details::lf_read_sync_write_impl *)v81);
  caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::lf_read_synchronized_write((caulk::concurrent::details::lf_read_sync_write_impl *)(v81 + 4));
  v86 = 0;
  std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Box>>::reset[abi:ne180100]((uint64_t *)this + 92, (uint64_t)v81);
  std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Box>>::reset[abi:ne180100]((uint64_t *)&v86, 0);
  return this;
}

void sub_18EE4108C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::mutex *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v24;

  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v24);
  os_unfair_lock_unlock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v21 + 576);
  __clang_call_terminate(a1);
}

void sub_18EE410E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::mutex *a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;

  v24 = (_QWORD *)(v22 + 560);
  std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Box>>::reset[abi:ne180100](a17, 0);
  std::mutex::~mutex(a9);
  v25 = *(_QWORD **)(v21 + 664);
  if (v25 == v24)
  {
    v26 = 4;
    v25 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::clear(a12);
  caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::~node_allocator(v21 + 560);
  a21 = a13;
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::mutex::~mutex(a16);
  a21 = a14;
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = a10;
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = a15;
  std::vector<DSPGraph::PropertyTap>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  v27 = *(void **)(v21 + 152);
  if (v27)
  {
    *(_QWORD *)(v21 + 160) = v27;
    operator delete(v27);
  }
  a21 = a19;
  std::vector<DSPGraph::OutputPort>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = a20;
  std::vector<DSPGraph::OutputPort>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (*(char *)(v21 + 55) < 0)
    operator delete(*(void **)(v21 + 32));
  _Unwind_Resume(a1);
}

void caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::random_engine()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      caulk::multi_simple_random<unsigned int,4ul,std::uniform_int_distribution<unsigned int>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::multi_simple_random((uint64_t)&caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::random_engine(void)::engine);
    }
  }
}

void sub_18EE41228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<DSPGraph::OutputPort>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 32);
    *(_QWORD *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void DSPGraph::AUBox::open(DSPGraph::AUBox *this)
{
  OpaqueAudioComponent *Next;
  AudioComponentInstance *v3;
  OSStatus v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  CFTypeRef v12;
  CFTypeRef cf;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;

  if (!*((_QWORD *)this + 106))
  {
    Next = AudioComponentFindNext(0, (const AudioComponentDescription *)((char *)this + 824));
    if (!Next)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v15, "open");
      std::operator+<char>();
      DSPGraph::ThrowException(1633906209, &v16, 1940, &v15, &v14);
    }
    v3 = (AudioComponentInstance *)((char *)this + 848);
    v4 = AudioComponentInstanceNew(Next, (AudioComponentInstance *)this + 106);
    if (v4)
    {
      v11 = v4;
      std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v15, "open");
      std::operator+<char>();
      DSPGraph::ThrowException(v11, &v16, 1945, &v15, &v14);
    }
    if (!*v3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v15, "open");
      std::operator+<char>();
      DSPGraph::ThrowException(1633906209, &v16, 1948, &v15, &v14);
    }
    v5 = AudioComponentInstanceCanDo(*v3, 20)
      && ((*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) & 0x1FFFFFFFE0) == 0x20
      && ((*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) & 0x1FFFFFFFE0) == 32;
    *((_BYTE *)this + 856) = v5;
    v6 = (char *)this + 32;
    if (*((char *)this + 55) < 0)
      v6 = *(char **)v6;
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v6);
    v12 = cf;
    (*(void (**)(DSPGraph::AUBox *, uint64_t, _QWORD, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)this + 312))(this, 54, 0, 0, 8, &v12);
    v7 = (*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5;
    v8 = (*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5;
    v19 = v8;
    v20 = v7;
    v18 = 0;
    v17 = 4;
    (*(void (**)(DSPGraph::AUBox *, uint64_t, uint64_t, _QWORD, int *, char *))(*(_QWORD *)this + 304))(this, 11, 1, 0, &v17, (char *)&v18 + 4);
    (*(void (**)(DSPGraph::AUBox *, uint64_t, uint64_t, _QWORD, int *, uint64_t *))(*(_QWORD *)this + 304))(this, 11, 2, 0, &v17, &v18);
    if (HIDWORD(v18) != (_DWORD)v7)
    {
      v9 = (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)this
                                                                                                  + 312))(this, 11, 1, 0, 4, &v20);
      if (v9)
      {
        std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v15, "setElementCountOnUnit");
        std::string::basic_string[abi:ne180100]<0>(&v14, "setProperty failed");
        DSPGraph::ThrowException(v9, &v16, 2075, &v15, &v14);
      }
    }
    if ((_DWORD)v18 != (_DWORD)v8)
    {
      v10 = (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)this + 312))(this, 11, 2, 0, 4, &v19);
      if (v10)
      {
        std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v15, "setElementCountOnUnit");
        std::string::basic_string[abi:ne180100]<0>(&v14, "setProperty failed");
        DSPGraph::ThrowException(v10, &v16, 2082, &v15, &v14);
      }
    }
    if (cf)
      CFRelease(cf);
  }
}

void sub_18EE415F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

Boolean AudioComponentInstanceCanDo(AudioComponentInstance inInstance, SInt16 inSelectorID)
{
  uint64_t v2;
  AudioComponentInstance v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;

  if (inInstance)
  {
    v2 = inSelectorID;
    inInstance = (AudioComponentInstance)(*(uint64_t (**)(AudioComponentInstance))(*(_QWORD *)inInstance + 8))(inInstance);
    if (inInstance)
    {
      v3 = inInstance;
      v4 = (_QWORD *)APComponentInstance::selectorToMethodPtr(*((APComponentInstance **)inInstance + 1), *((std::__shared_weak_count **)inInstance + 2), v2);
      if (v4)
      {
        v5 = *v4 == 0;
      }
      else
      {
        v6 = *((_QWORD *)v3 + 3);
        if (!v6)
        {
          LOBYTE(inInstance) = 0;
          return inInstance;
        }
        v5 = (*(uint64_t (**)(uint64_t))(v6 + 16))(v2) == 0;
      }
      LOBYTE(inInstance) = !v5;
    }
  }
  return inInstance;
}

uint64_t APComponentInstance::selectorToMethodPtr(APComponentInstance *this, std::__shared_weak_count *a2, int a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (*((_WORD *)this + 19) == 24949)
  {
    v6 = *((_QWORD *)this + 14);
    switch(a3)
    {
      case 1:
        break;
      case 2:
        v6 += 8;
        break;
      case 3:
        v6 += 16;
        break;
      case 4:
        v6 += 24;
        break;
      case 5:
        v6 += 32;
        break;
      case 6:
        v6 += 80;
        break;
      case 7:
        v6 += 88;
        break;
      case 9:
        v6 += 104;
        break;
      case 10:
        v6 += 40;
        break;
      case 11:
        v6 += 48;
        break;
      case 14:
        v6 += 112;
        break;
      case 15:
        v6 += 64;
        break;
      case 16:
        v6 += 72;
        break;
      case 17:
        v6 += 96;
        break;
      case 18:
        v6 += 56;
        break;
      case 20:
        v6 += 128;
        break;
      case 21:
        v6 += 136;
        break;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v6 = 0;
  }
  if (a2)
  {
    v7 = (unint64_t *)&a2->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
      std::__shared_weak_count::__release_weak(a2);
    }
  }
  return v6;
}

BOOL DSPGraph::Interpreter::parseCompDesc(DSPGraph::Interpreter *this, const char **a2, AudioComponentDescription *a3)
{
  const char **v5;
  int v6;
  int v7;
  const char **v8;
  const char **v9;
  char *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;

  DSPGraph::skipspace(this, a2);
  v15 = *(char **)this;
  DSPGraph::skipspace((DSPGraph *)&v15, v5);
  v6 = *v15;
  if (v6 == 40)
  {
    ++v15;
    if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v15, a2, (unsigned int *)1) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v13, "parseCompDesc");
      std::string::basic_string[abi:ne180100]<0>(&v12, "expected component type or subtype");
      DSPGraph::ThrowException(1886548769, &v14, 499, &v13, &v12);
    }
    if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v15, (const char **)((char *)a2 + 4), (unsigned int *)1) & 1) == 0)
    {
      v7 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 1635083896;
      *((_DWORD *)a2 + 1) = v7;
    }
    v8 = a2 + 1;
    if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v15, v8, (unsigned int *)1) & 1) == 0)
      *(_DWORD *)v8 = 1634758764;
    DSPGraph::skipspace((DSPGraph *)&v15, v9);
    v10 = v15;
    if (*v15 != 41)
    {
      std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v13, "parseCompDesc");
      DSPGraph::strprintf((DSPGraph *)"expected ')' at end of component description, got '%c'", &v12, *v10);
      DSPGraph::ThrowException(1886548769, &v14, 511, &v13, &v12);
    }
    *(_QWORD *)this = v15 + 1;
  }
  return v6 == 40;
}

void sub_18EE419E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Interpreter::parse4cc(DSPGraph::Interpreter *this, const char **a2, unsigned int *a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t result;
  unint64_t v19;
  unsigned __int8 *v20;

  v3 = (int)a3;
  DSPGraph::skipspace(this, a2);
  if (v3)
  {
    v6 = 0;
    v7 = MEMORY[0x1E0C80978];
    while (1)
    {
      v8 = DSPGraph::is4ccChar(*(char *)(*(_QWORD *)this + v6));
      v10 = *(unsigned __int8 **)this;
      if (!v8)
        break;
      v11 = (char)v10[v6];
      if ((v11 & 0x80000000) != 0)
        v12 = __maskrune(v11, 0x100uLL);
      else
        v12 = *(_DWORD *)(v7 + 4 * v11 + 60) & 0x100;
      ++v6;
      if (v12)
        goto LABEL_15;
    }
    v19 = 0;
    v20 = v10;
    if (DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v20, (const char **)&v19, v9))
    {
      v13 = v19;
      if (!HIDWORD(v19))
      {
        v14 = v20;
LABEL_20:
        *(_DWORD *)a2 = v13;
        *(_QWORD *)this = v14;
        return 1;
      }
    }
  }
  else if ((**(char **)this & 0x80000000) == 0
         && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * **(unsigned __int8 **)this + 60) & 0x400) != 0)
  {
    return 0;
  }
LABEL_15:
  v15 = 0;
  v13 = 0;
  v16 = *(_QWORD *)this;
  while (1)
  {
    v17 = *(_BYTE *)(v16 + v15);
    result = DSPGraph::is4ccChar((char)v17);
    if (!(_DWORD)result)
      return result;
    v13 = v17 | (v13 << 8);
    if (++v15 == 4)
    {
      v14 = (unsigned __int8 *)(v16 + 4);
      if ((DSPGraph::is4ccChar(*(char *)(v16 + 4)) & 1) == 0)
        goto LABEL_20;
      return 0;
    }
  }
}

uint64_t DSPGraph::is4ccChar(unsigned int this)
{
  uint64_t result;
  int v3;

  if (this >= 0x80)
  {
    result = __maskrune(this, 0x40000uLL);
    if (!(_DWORD)result)
      return result;
    if (!__maskrune(this, 0x4000uLL))
      return memchr("()[]{}\";", this, 9uLL) == 0;
    return 0;
  }
  v3 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * this + 60);
  if ((v3 & 0x40000) == 0 || (v3 & 0x4000) != 0)
    return 0;
  return memchr("()[]{}\";", this, 9uLL) == 0;
}

BOOL DSPGraph::Interpreter::parserInterleavedFlag(DSPGraph::Interpreter *this, const char **a2, BOOL *a3)
{
  unsigned __int8 *v5;
  int v6;

  DSPGraph::skipspace(this, a2);
  v5 = *(unsigned __int8 **)this;
  v6 = **(unsigned __int8 **)this;
  if (**(_BYTE **)this)
  {
    if (**(unsigned __int8 **)this > 0x63u)
    {
      if (v6 != 100)
      {
        if (v6 != 105)
          goto LABEL_5;
LABEL_8:
        *(_BYTE *)a2 = 1;
LABEL_10:
        *(_QWORD *)this = v5 + 1;
        return v6 != 0;
      }
    }
    else if (v6 != 68)
    {
      if (v6 != 73)
      {
LABEL_5:
        *(_BYTE *)a2 = 0;
        return v6 != 0;
      }
      goto LABEL_8;
    }
    *(_BYTE *)a2 = 0;
    goto LABEL_10;
  }
  return v6 != 0;
}

uint64_t DSPGraph::Interpreter::parseScope(DSPGraph::Interpreter *this, const char **a2, unsigned int *a3)
{
  unint64_t *v5;
  void *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  _WORD *p_p;
  _DWORD *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  int v19;
  int v20;
  unsigned __int16 *v22;
  int v23;
  int v24;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v31;
  int v32;
  void *__p;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;

  DSPGraph::skipspace(this, a2);
  v38 = *(void **)this;
  v39 = 0;
  __p = v38;
  if (DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&__p, (const char **)&v39, v5)
    && !((unint64_t)v39 >> 32))
  {
    v6 = __p;
    *(_DWORD *)a2 = (_DWORD)v39;
    *(_QWORD *)this = v6;
    return 1;
  }
  __p = 0;
  v36 = 0;
  v37 = 0;
  v8 = DSPGraph::Interpreter::parseName((DSPGraph *)&v38, (uint64_t)&__p);
  v9 = HIBYTE(v37);
  if ((v8 & 1) != 0)
  {
    if (v37 >= 0)
      v10 = HIBYTE(v37);
    else
      v10 = v36;
    switch(v10)
    {
      case 2:
        p_p = &__p;
        if (v37 < 0)
          p_p = __p;
        if (*p_p != 28265)
          goto LABEL_51;
        goto LABEL_55;
      case 3:
        v22 = (unsigned __int16 *)&__p;
        if (v37 < 0)
          v22 = (unsigned __int16 *)__p;
        v23 = *v22;
        v24 = *((unsigned __int8 *)v22 + 2);
        if (v23 != 30063 || v24 != 116)
          goto LABEL_51;
        goto LABEL_38;
      case 4:
        v12 = &__p;
        if (v37 < 0)
          v12 = __p;
        if (*v12 != 1953653104)
          goto LABEL_51;
        v13 = 4;
        goto LABEL_57;
      case 5:
        v26 = (unsigned __int8 *)__p;
        v27 = (unsigned __int8 *)&__p;
        if (v37 >= 0)
          v26 = (unsigned __int8 *)&__p;
        v28 = *(_DWORD *)v26;
        v29 = v26[4];
        if (v28 == 1970302569 && v29 == 116)
        {
LABEL_55:
          v13 = 1;
          goto LABEL_57;
        }
        if (v37 < 0)
          v27 = (unsigned __int8 *)__p;
        v31 = *(_DWORD *)v27;
        v32 = v27[4];
        if (v31 != 1970238055 || v32 != 112)
          goto LABEL_51;
        v13 = 3;
        goto LABEL_57;
      case 6:
        v14 = (unsigned __int16 *)__p;
        v15 = (unsigned __int16 *)&__p;
        if (v37 >= 0)
          v14 = (unsigned __int16 *)&__p;
        v16 = *(_DWORD *)v14;
        v17 = v14[2];
        if (v16 == 1886680431 && v17 == 29813)
        {
LABEL_38:
          v13 = 2;
        }
        else
        {
          v7 = 0;
          if (v37 < 0)
            v15 = (unsigned __int16 *)__p;
          v19 = *(_DWORD *)v15;
          v20 = v15[2];
          if (v19 != 1651469415 || v20 != 27745)
            goto LABEL_52;
          v13 = 0;
        }
LABEL_57:
        *(_DWORD *)a2 = v13;
        *(_QWORD *)this = v38;
        v7 = 1;
        if ((v9 & 0x80) == 0)
          return v7;
        break;
      default:
        goto LABEL_51;
    }
    goto LABEL_53;
  }
LABEL_51:
  v7 = 0;
LABEL_52:
  if (v37 < 0)
LABEL_53:
    operator delete(__p);
  return v7;
}

void sub_18EE41ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Graph::unconfigure(DSPGraph::Graph *this)
{
  uint64_t **i;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t **j;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t k;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (*((_BYTE *)this + 762))
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v16, "unconfigure");
    std::string::basic_string[abi:ne180100]<0>(&v15, "graph is initialized. uninitialize before unconfiguring");
    DSPGraph::ThrowException(1768843553, &v17, 816, &v16, &v15);
  }
  for (i = (uint64_t **)*((_QWORD *)this + 3); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *))(*i[2] + 624))(i[2]);
  v3 = *((_QWORD *)this + 32);
  v4 = *((_QWORD *)this + 33);
  if (v3 != v4)
  {
    do
    {
      v5 = *(_QWORD **)v3;
      v6 = *(uint64_t **)(*(_QWORD *)v3 + 176);
      v7 = *(uint64_t **)(*(_QWORD *)v3 + 184);
      while (v6 != v7)
      {
        v8 = *v6++;
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 688))(v8);
      }
      for (j = (uint64_t **)v5[14]; j; j = (uint64_t **)*j)
        (*(void (**)(uint64_t *))(*j[2] + 688))(j[2]);
      v11 = (uint64_t *)v5[25];
      v10 = (uint64_t *)v5[26];
      while (v11 != v10)
      {
        v12 = *v11++;
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 688))(v12);
      }
      v3 += 8;
    }
    while (v3 != v4);
    v3 = *((_QWORD *)this + 32);
  }
  *((_QWORD *)this + 33) = v3;
  if (*((_QWORD *)this + 30))
  {
    std::__hash_table<std::unique_ptr<DSPGraph::IsoGroup>,std::hash<std::unique_ptr<DSPGraph::IsoGroup>>,std::equal_to<std::unique_ptr<DSPGraph::IsoGroup>>,std::allocator<std::unique_ptr<DSPGraph::IsoGroup>>>::__deallocate_node(*((_QWORD **)this + 29));
    *((_QWORD *)this + 29) = 0;
    v13 = *((_QWORD *)this + 28);
    if (v13)
    {
      for (k = 0; k != v13; ++k)
        *(_QWORD *)(*((_QWORD *)this + 27) + 8 * k) = 0;
    }
    *((_QWORD *)this + 30) = 0;
  }
  *((_BYTE *)this + 761) = 0;
}

void sub_18EE42060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::unconfigure(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t DSPGraph::RingBufferBox::unconfigureRingBuffer(uint64_t this)
{
  *(_QWORD *)(this + 772) = 0;
  return this;
}

void std::__hash_table<std::unique_ptr<DSPGraph::IsoGroup>,std::hash<std::unique_ptr<DSPGraph::IsoGroup>>,std::equal_to<std::unique_ptr<DSPGraph::IsoGroup>>,std::allocator<std::unique_ptr<DSPGraph::IsoGroup>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = v1[2];
      v1[2] = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void DSPGraph::IsoGroup::~IsoGroup(DSPGraph::IsoGroup *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E2913010;
  v2 = (void *)*((_QWORD *)this + 28);
  if (v2)
  {
    *((_QWORD *)this + 29) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 25);
  if (v3)
  {
    *((_QWORD *)this + 26) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 22);
  if (v4)
  {
    *((_QWORD *)this + 23) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E2913010;
  v2 = (void *)*((_QWORD *)this + 28);
  if (v2)
  {
    *((_QWORD *)this + 29) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 25);
  if (v3)
  {
    *((_QWORD *)this + 26) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 22);
  if (v4)
  {
    *((_QWORD *)this + 23) = v4;
    operator delete(v4);
  }
}

unint64_t AT::RingBuffer::FetchAllWithZeroes(AT::RingBuffer *this, AudioBufferList *a2, unsigned int a3, uint64_t a4, unsigned int *a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t mNumberBuffers;
  unint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  size_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  UInt32 *p_mDataByteSize;
  size_t __n;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v13 = *((_QWORD *)this + 6);
  v14 = *(_DWORD *)(v13 + 48) * a3;
  v15 = a4 + a3;
  v63 = 0;
  v62 = 0;
  v16 = AT::RingBuffer::Impl::CheckTimeBounds2((AT::RingBuffer::Impl *)v13, a4, v15, &v63, &v62);
  if ((_DWORD)v16 == 4)
  {
    *a5 = a3;
    *a7 = 0;
    *a6 = 0;
    if (a2->mNumberBuffers)
    {
      v17 = 0;
      v18 = 16;
      do
      {
        bzero(*(void **)((char *)&a2->mNumberBuffers + v18), v14);
        ++v17;
        v18 += 16;
      }
      while (v17 < a2->mNumberBuffers);
      LODWORD(v19) = 4;
    }
    else
    {
      LODWORD(v19) = 4;
    }
  }
  else
  {
    v57 = a7;
    v58 = a6;
    v56 = a3;
    v20 = (v63 - a4) & ~((v63 - a4) >> 63);
    if (v20 >= a3)
      LODWORD(v20) = a3;
    v52 = a3;
    v53 = v15;
    v21 = (v15 - v62) & ~((v15 - v62) >> 63);
    if (v21 >= a3)
      LODWORD(v21) = a3;
    v54 = v21;
    v55 = a5;
    v51 = *(_DWORD *)(v13 + 48);
    v59 = v62;
    if (v62 > v63)
    {
      v22 = (v51 * v20);
      v23 = *(int *)(v13 + 40);
      v24 = ((v23 & ((int)(v63 % v23) >> 31)) + (v63 % v23)) * v51;
      v25 = ((v23 & ((int)(v62 % v23) >> 31)) + (v62 % v23)) * v51;
      if (v24 >= v25)
      {
        if (a2->mNumberBuffers)
        {
          __n = v25;
          v30 = 0;
          v31 = *(unsigned int *)(v13 + 52) - v24;
          v32 = *(_QWORD *)(v13 + 64);
          v33 = 16;
          do
          {
            memcpy((void *)(*(_QWORD *)((char *)&a2->mNumberBuffers + v33) + v22), (const void *)(*(_QWORD *)(v32 + v33) + v24), v31);
            ++v30;
            mNumberBuffers = a2->mNumberBuffers;
            v33 += 16;
          }
          while (v30 < mNumberBuffers);
          if ((_DWORD)mNumberBuffers)
          {
            v35 = 0;
            v36 = v31 + v22;
            v37 = *(_QWORD *)(v13 + 64);
            v38 = 16;
            do
            {
              memcpy((void *)(*(_QWORD *)((char *)&a2->mNumberBuffers + v38) + v36), *(const void **)(v37 + v38), __n);
              ++v35;
              v38 += 16;
            }
            while (v35 < a2->mNumberBuffers);
          }
        }
      }
      else if (a2->mNumberBuffers)
      {
        v26 = 0;
        v27 = v25 - v24;
        v28 = *(_QWORD *)(v13 + 64);
        v29 = 16;
        do
        {
          memcpy((void *)(*(_QWORD *)((char *)&a2->mNumberBuffers + v29) + v22), (const void *)(*(_QWORD *)(v28 + v29) + v24), v27);
          ++v26;
          v29 += 16;
        }
        while (v26 < a2->mNumberBuffers);
      }
    }
    v61 = 0;
    v19 = AT::RingBuffer::Impl::CheckTimeBounds2((AT::RingBuffer::Impl *)v13, a4, v53, &v61, &v60);
    v39 = v61;
    if (v59 < v61)
      v39 = v59;
    v40 = (v39 - a4) & ~((v39 - a4) >> 63);
    if (v40 >= v52)
      v41 = v52;
    else
      v41 = v40;
    if (v41 && a2->mNumberBuffers)
    {
      v42 = 0;
      v43 = *(_DWORD *)(v13 + 48) * v41;
      v44 = 16;
      do
      {
        bzero(*(void **)((char *)&a2->mNumberBuffers + v44), v43);
        ++v42;
        v44 += 16;
      }
      while (v42 < a2->mNumberBuffers);
    }
    if (v54 && a2->mNumberBuffers)
    {
      v45 = 0;
      v46 = 16;
      do
      {
        bzero((void *)(*(_QWORD *)((char *)&a2->mNumberBuffers + v46) + v14 - v51 * v54), v51 * v54);
        ++v45;
        v46 += 16;
      }
      while (v45 < a2->mNumberBuffers);
    }
    *v55 = v41;
    *v57 = v54;
    *v58 = v56 - (v54 + v41);
    v47 = a2->mNumberBuffers;
    if ((_DWORD)v47)
    {
      p_mDataByteSize = &a2->mBuffers[0].mDataByteSize;
      do
      {
        *p_mDataByteSize = v14;
        p_mDataByteSize += 4;
        --v47;
      }
      while (v47);
    }
    v16 = v19;
  }
  return v16 & 0xFFFFFFFF00000000 | v19;
}

unint64_t AT::RingBuffer::Impl::CheckTimeBounds2(AT::RingBuffer::Impl *this, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *TimeBounds;
  uint64_t v12;
  uint64_t v14[2];
  char v15;

  if (a3 >= a2)
  {
    TimeBounds = AT::RingBuffer::Impl::GetTimeBounds(v14, (uint64_t)this);
    v7 = v14[0];
    if (v15)
    {
      v12 = v14[1];
      *a4 = a2;
      *a5 = a3;
      if (v7 <= a2)
      {
        if (v12 >= a3)
        {
          std::system_category();
          LODWORD(v7) = 0;
          v6 = 0;
        }
        else
        {
          *a5 = v12;
          if (v12 <= a2)
          {
            *a4 = v12;
            AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)TimeBounds);
            v6 = 0;
            LODWORD(v7) = 2;
          }
          else
          {
            AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)TimeBounds);
            v6 = 0;
            LODWORD(v7) = 1;
          }
        }
      }
      else
      {
        *a4 = v7;
        if (v12 >= a3)
        {
          if (v7 >= a3)
          {
            *a5 = v7;
            AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)TimeBounds);
            v6 = 0;
            LODWORD(v7) = -2;
          }
          else
          {
            AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)TimeBounds);
            v6 = 0;
            LODWORD(v7) = -1;
          }
        }
        else
        {
          *a5 = v12;
          AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)TimeBounds);
          v6 = 0;
          LODWORD(v7) = 3;
        }
      }
    }
    else
    {
      v6 = v14[0] & 0xFFFFFFFF00000000;
    }
  }
  else
  {
    AT::RingBufferErrorCategory::instance(this);
    v6 = 0;
    LODWORD(v7) = -50;
  }
  return v6 & 0xFFFFFFFF00000000 | v7;
}

uint64_t *AT::RingBuffer::Impl::GetTimeBounds(uint64_t *this, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;

  v2 = this;
  v3 = 8;
  while (1)
  {
    v4 = atomic_load((unsigned int *)(a2 + 944));
    v5 = a2 + 176 + 24 * (v4 & 0x1F);
    v6 = *(_QWORD *)v5;
    v7 = *(uint64_t **)(v5 + 8);
    if (*(_DWORD *)(v5 + 16) == v4)
      break;
    if (!--v3)
    {
      this = AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)this);
      v8 = 0;
      v7 = &AT::RingBufferErrorCategory::instance(void)::global;
      v6 = 4;
      goto LABEL_6;
    }
  }
  v8 = 1;
LABEL_6:
  *v2 = v6;
  v2[1] = (uint64_t)v7;
  *((_BYTE *)v2 + 16) = v8;
  return this;
}

float clientParamValueToFixedParamValue(int a1, float result)
{
  if (a1 == 1015 || a1 == 1001)
    return result * 0.5 + 0.5;
  return result;
}

uint64_t AT::RingBuffer::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 48);
  v2 = v1 + 176;
  do
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    v2 += 24;
  }
  while (v2 != v1 + 944);
  atomic_store(0, (unsigned int *)(v1 + 944));
  *(_BYTE *)(v1 + 948) = 1;
  return this;
}

uint64_t AIFFAudioFile::GetChannelLayout(AIFFAudioFile *this, unsigned int *a2, AudioChannelLayout *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v13;

  if (*((_DWORD *)this + 8) == 1667326771)
  {
    *(_OWORD *)&a3->mChannelLayoutTag = 0u;
    *(_OWORD *)&a3->mChannelDescriptions[0].mChannelFlags = 0u;
    a3->mChannelLayoutTag = *((_DWORD *)this + 122);
    result = 0;
    if (a2)
      *a2 = 32;
  }
  else
  {
    v6 = *((_QWORD *)this + 18);
    v7 = *((_QWORD *)this + 19);
    v8 = v7 - v6;
    if (v7 == v6)
    {
LABEL_8:
      *a2 = 0;
      return 1667787583;
    }
    else
    {
      v9 = 0;
      v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
      v11 = 1;
      while (*(_DWORD *)(v6 + 24 * v9) != 1128808782)
      {
        v9 = v11;
        if (v10 <= v11++)
          goto LABEL_8;
      }
      v13 = *(_DWORD *)(v6 + 24 * v9 + 8) - 8;
      if (*a2 >= v13)
      {
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v6 + 24 * v9 + 16) + 8);
        if (!(_DWORD)result)
        {
          AudioChannelLayout_BtoN(a3, v13);
          result = 0;
          *a2 = v13;
        }
      }
      else
      {
        return 561211770;
      }
    }
  }
  return result;
}

int8x16_t AudioChannelLayout_BtoN(AudioChannelLayout *a1, unint64_t a2)
{
  unint64_t v2;
  int8x16_t result;
  UInt32 v4;
  uint64_t v5;
  unsigned int *v6;

  v2 = a2 - 12;
  if (a2 >= 0xC)
  {
    *(int8x8_t *)result.i8 = vrev32_s8(*(int8x8_t *)&a1->mChannelLayoutTag);
    *(_QWORD *)&a1->mChannelLayoutTag = result.i64[0];
    v4 = bswap32(a1->mNumberChannelDescriptions);
    a1->mNumberChannelDescriptions = v4;
    if (a2 >= 0x20)
    {
      if (v4 >= (((unint64_t)(a2 & 0xFFFFFFFC) - 12) / 0x14))
        v4 = ((unint64_t)(a2 & 0xFFFFFFFC) - 12) / 0x14;
      a1->mNumberChannelDescriptions = v4;
      if (20 * (unint64_t)v4 <= v2)
        v5 = v4;
      else
        v5 = (v2 / 0x14);
      if ((_DWORD)v5)
      {
        v6 = (unsigned int *)&a1->mChannelDescriptions[0].mCoordinates[2];
        do
        {
          result = vrev32q_s8(*((int8x16_t *)v6 - 1));
          *((int8x16_t *)v6 - 1) = result;
          *v6 = bswap32(*v6);
          v6 += 5;
          --v5;
        }
        while (v5);
      }
    }
  }
  return result;
}

uint64_t AIFFAudioFile::OpenFromDataSource(AIFFAudioFile *this)
{
  _BYTE *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  signed int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __int128 v23;
  __int32 v24;
  unsigned int v25;
  NSObject *v26;
  const char *v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  signed int v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v36;
  unsigned int *v37;
  _DWORD *v38;
  unsigned int *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  _BOOL4 v48;
  uint64_t (*v49)(void);
  signed int v50;
  uint64_t v51;
  int v52;
  int8x16_t v53;
  NSObject *v54;
  const char *v55;
  _BOOL4 v56;
  uint64_t result;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  __int32 v64;
  UInt32 inSpecifierSize;
  void *inSpecifier;
  __int128 outPropertyData;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  __int128 v72;
  __int128 v73;
  signed int v74;
  signed int v75;
  uint8_t buf[4];
  __int128 v77;
  unsigned __int8 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  int v84;
  int v85;
  int8x16_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v71 = 0;
  v70 = 0;
  inSpecifier = 0;
  inSpecifierSize = 0;
  v72 = 0u;
  v73 = 0u;
  outPropertyData = 0u;
  v68 = 0u;
  v69 = 0;
  *((_QWORD *)this + 9) = 0;
  (*(void (**)(AIFFAudioFile *, _QWORD))(*(_QWORD *)this + 232))(this, 0);
  *((_BYTE *)this + 190) = 0;
  v2 = (char *)this + 190;
  v3 = (*(uint64_t (**)(_QWORD, unint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v70);
  if ((_DWORD)v3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_5:
      v6 = 0;
      goto LABEL_6;
    }
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
    WORD4(v77) = 1024;
    *(_DWORD *)((char *)&v77 + 10) = 1290;
    v4 = MEMORY[0x1E0C81028];
    v5 = "%25s:%-5d  GetSize Failed";
LABEL_4:
    _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_ERROR, v5, buf, 0x12u);
    goto LABEL_5;
  }
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, signed int *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                + 48))(*((_QWORD *)this + 13), 0, 0, 8, &v74, &v71);
  v3 = v9;
  v7 = 1685348671;
  if ((_DWORD)v9 == -39)
    goto LABEL_123;
  if ((_DWORD)v9)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_5;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
    WORD4(v77) = 1024;
    *(_DWORD *)((char *)&v77 + 10) = 1296;
    v4 = MEMORY[0x1E0C81028];
    v5 = "%25s:%-5d  FSRead Failed 1";
    goto LABEL_4;
  }
  v10 = v74;
  v74 = bswap32(v74);
  if (v10 != 1297239878)
    goto LABEL_123;
  v75 = bswap32(v75);
  v11 = v75 + 8;
  v12 = (char *)*((_QWORD *)this + 19);
  v13 = *((_QWORD *)this + 20);
  if ((unint64_t)v12 >= v13)
  {
    v15 = 0xAAAAAAAAAAAAAAALL;
    v16 = (char *)*((_QWORD *)this + 18);
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v16) >> 3);
    v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v16) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 < 0x555555555555555)
      v15 = v18;
    if (v15)
    {
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v15);
      v16 = (char *)*((_QWORD *)this + 18);
      v12 = (char *)*((_QWORD *)this + 19);
    }
    else
    {
      v20 = 0;
    }
    v21 = (_QWORD *)(v15 + 24 * v17);
    *v21 = 0x8464F524DLL;
    v22 = v15 + 24 * v20;
    v21[1] = v11;
    v21[2] = 0;
    v14 = v21 + 3;
    if (v12 != v16)
    {
      do
      {
        v23 = *(_OWORD *)(v12 - 24);
        *(v21 - 1) = *((_QWORD *)v12 - 1);
        *(_OWORD *)(v21 - 3) = v23;
        v21 -= 3;
        v12 -= 24;
      }
      while (v12 != v16);
      v16 = (char *)*((_QWORD *)this + 18);
    }
    *((_QWORD *)this + 18) = v21;
    *((_QWORD *)this + 19) = v14;
    *((_QWORD *)this + 20) = v22;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_QWORD *)v12 = 0x8464F524DLL;
    *((_QWORD *)v12 + 1) = v11;
    *((_QWORD *)v12 + 2) = 0;
    v14 = v12 + 24;
  }
  *((_QWORD *)this + 19) = v14;
  if ((uint64_t)v70 > (v75 + 8))
    v70 = (v75 + 8);
  v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, int8x16_t *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                               + 48))(*((_QWORD *)this + 13), 0, 0, 12, &v86, &v71);
  if ((_DWORD)v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
      WORD4(v77) = 1024;
      *(_DWORD *)((char *)&v77 + 10) = 1318;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  FSRead Failed 2", buf, 0x12u);
    }
    v6 = 1179603533;
    goto LABEL_6;
  }
  v24 = v86.i32[2];
  v25 = bswap32(v86.u32[2]);
  *((_DWORD *)this + 21) = v25;
  if (v25 != 1095321155 && v25 != 1095321158)
  {
    v7 = 4294967246;
    goto LABEL_123;
  }
  v6 = 1179603533;
  if (v70 < 0xD)
    goto LABEL_42;
  v64 = v24;
  v28 = 0;
  v29 = 12;
  while (1)
  {
    v30 = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t, uint64_t, signed int *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v29, 8, &v74, &v71);
    v3 = v30;
    if ((_DWORD)v30)
      break;
    v31 = v74;
    v6 = bswap32(v74);
    v74 = v6;
    v75 = bswap32(v75);
    v32 = v75 + 8;
    v33 = v70 - v29;
    v34 = (v70 - v29);
    if (v31 == 1145983827 && v32 >= 0x11 && v32 > v34)
    {
      if ((_DWORD)v72 != 1129270605)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
          WORD4(v77) = 1024;
          *(_DWORD *)((char *)&v77 + 10) = 1355;
          _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Never found the Common Chunk", buf, 0x12u);
        }
        v56 = 1;
        goto LABEL_114;
      }
      v3 = FillDescriptionFromCommonChunk((uint64_t)&v72, &outPropertyData, inSpecifierSize, inSpecifier);
      if ((_DWORD)v3)
      {
        v6 = 1397968452;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
          WORD4(v77) = 1024;
          *(_DWORD *)((char *)&v77 + 10) = 1359;
          v26 = MEMORY[0x1E0C81028];
          v27 = "%25s:%-5d  FillDescriptionFromCommonChunk Failed";
          goto LABEL_170;
        }
LABEL_6:
        *((_DWORD *)this + 20) = v6 == 1397968452;
        v7 = v3;
        if ((_DWORD)v3 != -39)
          goto LABEL_115;
        if (*(_DWORD *)((char *)&v73 + 10))
          v8 = *((_QWORD *)this + 9) == 0;
        else
          v8 = 1;
        if (v8)
          v7 = 1685348671;
        else
          v7 = 0;
        goto LABEL_123;
      }
      v32 = ((v33 - 16) & -(int)v68) + 16;
    }
    if (v32 > v34)
      goto LABEL_42;
    v37 = (unsigned int *)*((_QWORD *)this + 19);
    v36 = *((_QWORD *)this + 20);
    if ((unint64_t)v37 >= v36)
    {
      v39 = (unsigned int *)*((_QWORD *)this + 18);
      v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v39) >> 3);
      v41 = v40 + 1;
      if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v39) >> 3);
      if (2 * v42 > v41)
        v41 = 2 * v42;
      if (v42 >= 0x555555555555555)
        v43 = 0xAAAAAAAAAAAAAAALL;
      else
        v43 = v41;
      if (v43)
      {
        v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v43);
        v39 = (unsigned int *)*((_QWORD *)this + 18);
        v37 = (unsigned int *)*((_QWORD *)this + 19);
      }
      else
      {
        v44 = 0;
      }
      v45 = v43 + 24 * v40;
      *(_DWORD *)v45 = v6;
      *(_DWORD *)(v45 + 4) = 8;
      *(_QWORD *)(v45 + 8) = v32;
      *(_QWORD *)(v45 + 16) = v29;
      v46 = v45;
      if (v37 != v39)
      {
        do
        {
          v47 = *(_OWORD *)(v37 - 6);
          *(_QWORD *)(v46 - 8) = *((_QWORD *)v37 - 1);
          *(_OWORD *)(v46 - 24) = v47;
          v46 -= 24;
          v37 -= 6;
        }
        while (v37 != v39);
        v39 = (unsigned int *)*((_QWORD *)this + 18);
      }
      v38 = (_DWORD *)(v45 + 24);
      *((_QWORD *)this + 18) = v46;
      *((_QWORD *)this + 19) = v45 + 24;
      *((_QWORD *)this + 20) = v43 + 24 * v44;
      if (v39)
        operator delete(v39);
    }
    else
    {
      *v37 = v6;
      v37[1] = 8;
      v38 = v37 + 6;
      *((_QWORD *)v37 + 1) = v32;
      *((_QWORD *)v37 + 2) = v29;
    }
    *((_QWORD *)this + 19) = v38;
    if (v74 > 1397968451)
    {
      if (v74 == 1397968452)
      {
        *((_QWORD *)this + 56) = v29;
        v3 = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t, uint64_t, int8x16_t *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v29, 16, &v86, &v71);
        if ((_DWORD)v3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_6;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
          WORD4(v77) = 1024;
          *(_DWORD *)((char *)&v77 + 10) = 1420;
          v26 = MEMORY[0x1E0C81028];
          v27 = "%25s:%-5d  FSRead Failed 6";
LABEL_170:
          _os_log_impl(&dword_18EE07000, v26, OS_LOG_TYPE_ERROR, v27, buf, 0x12u);
          goto LABEL_6;
        }
        v53 = vrev32q_s8(v86);
        v86 = v53;
        *((_QWORD *)this + 9) = v29 + v53.u32[2] + 16;
        (*(void (**)(AIFFAudioFile *, unint64_t))(*(_QWORD *)this + 232))(this, v53.u32[1] - (unint64_t)v53.u32[2] - 8);
        goto LABEL_101;
      }
      if (v74 == 2002876005)
      {
        inSpecifierSize = v32 - 8;
        if ((_DWORD)v32 != 8)
        {
          CADeprecated::CAAutoFree<unsigned char>::allocBytes(&inSpecifier, (v32 - 8), 0);
          v3 = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t, _QWORD, void *, UInt32 *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v29 + 8, inSpecifierSize, inSpecifier, &inSpecifierSize);
          if ((_DWORD)v3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_6;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
            WORD4(v77) = 1024;
            *(_DWORD *)((char *)&v77 + 10) = 1447;
            v26 = MEMORY[0x1E0C81028];
            v27 = "%25s:%-5d  FSRead Failed 5";
            goto LABEL_170;
          }
        }
        goto LABEL_101;
      }
    }
    else
    {
      if (v74 == 1129270605)
      {
        v49 = *(uint64_t (**)(void))(**((_QWORD **)this + 13) + 48);
        if (v64 == 1128679745)
        {
          v3 = v49();
          if ((_DWORD)v3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_6;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
            WORD4(v77) = 1024;
            *(_DWORD *)((char *)&v77 + 10) = 1378;
            v26 = MEMORY[0x1E0C81028];
            v27 = "%25s:%-5d  FSRead Failed 3";
            goto LABEL_170;
          }
          *(_QWORD *)&v72 = _byteswap_uint64(__PAIR64__(v72, DWORD1(v72)));
          WORD4(v72) = bswap32(WORD4(v72)) >> 16;
          *(_DWORD *)((char *)&v72 + 10) = bswap32(*(unsigned int *)((char *)&v72 + 10));
          HIWORD(v72) = bswap32(HIWORD(v72)) >> 16;
          *(_DWORD *)((char *)&v73 + 10) = bswap32(*(unsigned int *)((char *)&v73 + 10));
          v50 = (DWORD1(v72) - 21) & 0xFFFFFFFE;
          if (v50 >= 1)
          {
            v51 = v50 >= 256 ? 256 : v50;
            v3 = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t, uint64_t, char *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v29 + 30, v51, (char *)this + 190, &v71);
            if ((_DWORD)v3)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_6;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
              WORD4(v77) = 1024;
              *(_DWORD *)((char *)&v77 + 10) = 1386;
              v26 = MEMORY[0x1E0C81028];
              v27 = "%25s:%-5d  FSRead Failed 4";
              goto LABEL_170;
            }
          }
          if (!*v2)
          {
            v52 = *(_DWORD *)((char *)&v73 + 10);
            *((_QWORD *)this + 24) = *(unsigned int *)((char *)&v73 + 10);
            *(_DWORD *)((char *)this + 191) = v52;
            *((_BYTE *)this + 190) = 4;
          }
        }
        else
        {
          v3 = v49();
          if ((_DWORD)v3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_6;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
            WORD4(v77) = 1024;
            *(_DWORD *)((char *)&v77 + 10) = 1402;
            v26 = MEMORY[0x1E0C81028];
            v27 = "%25s:%-5d  FSRead Failed 5";
            goto LABEL_170;
          }
          *(int8x8_t *)&v72 = vrev32_s8(*(int8x8_t *)&v72);
          WORD4(v72) = bswap32(WORD4(v72)) >> 16;
          *(_DWORD *)((char *)&v72 + 10) = bswap32(*(unsigned int *)((char *)&v72 + 10));
          HIWORD(v72) = bswap32(HIWORD(v72)) >> 16;
          *(_DWORD *)((char *)&v73 + 10) = 1313820229;
          *(_DWORD *)v2 = 1852788256;
          *((_BYTE *)this + 194) = 101;
          *v2 = 4;
        }
        goto LABEL_101;
      }
      if (v74 == 1229206304)
      {
        *((_QWORD *)this + 59) = v29 + 8;
        if (ID3ParserOpen((uint64_t)this, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, unsigned __int8 **, unsigned int *))AIFFID3CallbackProc, (_QWORD *)this + 58))*((_QWORD *)this + 59) = 0;
LABEL_101:
        v28 = v75 & 1;
        v29 += ((v75 + 1) & 0xFFFFFFFE) + 8;
        v48 = v29 >= v70;
        goto LABEL_102;
      }
    }
    if ((v74 & 0xE0) != 0 || (v28 & 1) == 0)
      goto LABEL_101;
    v48 = 0;
    v28 = 0;
    --v29;
LABEL_102:
    if (v48)
      goto LABEL_42;
  }
  if ((_DWORD)v30 != -39)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
      WORD4(v77) = 1024;
      *(_DWORD *)((char *)&v77 + 10) = 1338;
      v26 = MEMORY[0x1E0C81028];
      v27 = "%25s:%-5d  FSRead Failed 1";
      goto LABEL_170;
    }
    goto LABEL_6;
  }
LABEL_42:
  if ((_DWORD)v72 != 1129270605)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_113;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
    WORD4(v77) = 1024;
    *(_DWORD *)((char *)&v77 + 10) = 1472;
    v54 = MEMORY[0x1E0C81028];
    v55 = "%25s:%-5d  Never found the Common Chunk";
LABEL_112:
    _os_log_impl(&dword_18EE07000, v54, OS_LOG_TYPE_ERROR, v55, buf, 0x12u);
    goto LABEL_113;
  }
  if (!DWORD2(outPropertyData))
  {
    v3 = FillDescriptionFromCommonChunk((uint64_t)&v72, &outPropertyData, inSpecifierSize, inSpecifier);
    if ((_DWORD)v3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
        WORD4(v77) = 1024;
        *(_DWORD *)((char *)&v77 + 10) = 1478;
        v26 = MEMORY[0x1E0C81028];
        v27 = "%25s:%-5d  FillDescriptionFromCommonChunk Failed";
        goto LABEL_170;
      }
      goto LABEL_6;
    }
  }
  if (*(double *)&outPropertyData <= 0.0)
  {
    v7 = 1718449215;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_113;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
    WORD4(v77) = 1024;
    *(_DWORD *)((char *)&v77 + 10) = 1482;
    v54 = MEMORY[0x1E0C81028];
    v55 = "%25s:%-5d  Invalid sampling rate";
    goto LABEL_112;
  }
  (*(void (**)(AIFFAudioFile *, _QWORD, double))(*(_QWORD *)this + 648))(this, v68, *(double *)&outPropertyData);
  (*(void (**)(AIFFAudioFile *, _QWORD))(*(_QWORD *)this + 248))(this, *(unsigned int *)((char *)&v72 + 10));
  v3 = (*(uint64_t (**)(AIFFAudioFile *, __int128 *))(*(_QWORD *)this + 176))(this, &outPropertyData);
  if ((_DWORD)v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
      WORD4(v77) = 1024;
      *(_DWORD *)((char *)&v77 + 10) = 1487;
      v26 = MEMORY[0x1E0C81028];
      v27 = "%25s:%-5d  bad data format";
      goto LABEL_170;
    }
    goto LABEL_6;
  }
  if (DWORD2(outPropertyData) != 1819304813)
    goto LABEL_167;
  v60 = 0;
  v61 = *((_QWORD *)this + 9) + 8;
  while (2)
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, int8x16_t *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v61 + v60, 10, &v86, &v71))
    {
      v7 = 0;
      goto LABEL_123;
    }
    *(_WORD *)buf = 0;
    *(_QWORD *)((char *)&v77 + 4) = &v86;
    HIDWORD(v77) = v71;
    v78 = 0;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v85 = 3940;
    if (v71 >= 0xA)
    {
      if (v86.u16[0] == 2935)
        goto LABEL_143;
      if (v86.u16[0] == 30475)
      {
        v78 = 1;
LABEL_143:
        buf[0] = 1;
      }
    }
    if (!AC3PacketParser::IsValid((AC3PacketParser *)buf))
      goto LABEL_165;
    if ((_DWORD)v60 != 24576)
    {
      if (v83)
        free(v83);
      v60 += 6144;
      continue;
    }
    break;
  }
  *(_QWORD *)&outPropertyData = v79;
  v68 = v80;
  v69 = v81;
  DWORD2(outPropertyData) = 1667326771;
  HIDWORD(outPropertyData) = (2 * v78) | 0xC;
  LODWORD(v68) = 6144;
  if (!(*(unsigned int (**)(AIFFAudioFile *, __int128 *))(*(_QWORD *)this + 176))(this, &outPropertyData))
  {
    (*(void (**)(AIFFAudioFile *, uint64_t))(*(_QWORD *)this + 648))(this, 6144);
    v63 = (*(uint64_t (**)(AIFFAudioFile *))(*(_QWORD *)this + 224))(this);
    (*(void (**)(AIFFAudioFile *, uint64_t))(*(_QWORD *)this + 248))(this, v63 / 6144);
    *((_DWORD *)this + 122) = v82;
  }
LABEL_165:
  if (v83)
    free(v83);
LABEL_167:
  v7 = 0;
LABEL_113:
  v56 = v6 == 1397968452;
LABEL_114:
  *((_DWORD *)this + 20) = v56;
LABEL_115:
  if ((*((_BYTE *)this + 100) & 2) != 0 && DWORD2(outPropertyData) == 1819304813)
  {
    if (v69 > 8 && (BYTE12(outPropertyData) & 2) == 0)
      v7 = 1886547263;
    else
      v7 = v7;
  }
LABEL_123:
  if (inSpecifier)
    free(inSpecifier);
  if ((_DWORD)v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&v77 = "AIFFAudioFile.cpp";
      WORD4(v77) = 1024;
      *(_DWORD *)((char *)&v77 + 10) = 1045;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d   AIFFAudioFile::OpenFromDataSource Failed", buf, 0x12u);
    }
    return v7;
  }
  if ((*((_BYTE *)this + 100) & 2) == 0)
    return v7;
  result = 1886547263;
  v59 = *((_DWORD *)this + 8);
  if (v59 != 842231401 && v59 != 1936684916)
    return v7;
  return result;
}

void sub_18EE43950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)(v12 + 72);
  if (v14)
    free(v14);
  if (a12)
    free(a12);
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::ParseAudioFile(CAFAudioFile *this)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int8x16_t v14;
  int8x8_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  _DWORD *v24;
  unsigned int *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  _BOOL4 v36;
  int v37;
  int v38;
  int v39;
  int v40;
  NSObject *v42;
  const char *v43;
  NSObject *v44;
  const char *v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  int8x16_t v49;
  int8x8_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  uint8_t v55[4];
  const char *v56;
  __int16 v57;
  int v58;
  _BYTE buf[12];
  _BYTE v60[12];
  __int32 v61;
  int8x8_t v62;
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v52 = 0;
  v51 = 0;
  *((_QWORD *)this + 9) = 0;
  (*(void (**)(CAFAudioFile *, _QWORD))(*(_QWORD *)this + 232))(this, 0);
  v2 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v51);
  if ((_DWORD)v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
      *(_WORD *)v60 = 1024;
      *(_DWORD *)&v60[2] = 1191;
      v3 = MEMORY[0x1E0C81028];
      v4 = "%25s:%-5d  GetSize Failed";
LABEL_81:
      _os_log_impl(&dword_18EE07000, v3, OS_LOG_TYPE_ERROR, v4, buf, 0x12u);
      goto LABEL_82;
    }
    goto LABEL_82;
  }
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, unint64_t *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, 0, 8, &v48, &v52);
  if ((_DWORD)v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
      *(_WORD *)v60 = 1024;
      *(_DWORD *)&v60[2] = 1196;
      v3 = MEMORY[0x1E0C81028];
      v4 = "%25s:%-5d  FSRead Failed 1";
      goto LABEL_81;
    }
LABEL_82:
    v9 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
LABEL_83:
    v40 = v37 ^ 1;
    if (v9 != 1684108385)
      v40 = 0;
    *((_DWORD *)this + 20) = v40;
    v7 = v2;
    if ((_DWORD)v2 == -39)
    {
      if ((v38 & v39) != 0)
        return 0;
      else
        return 1685348671;
    }
    return v7;
  }
  if (v52 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
      *(_WORD *)v60 = 1024;
      *(_DWORD *)&v60[2] = 1197;
      v3 = MEMORY[0x1E0C81028];
      v4 = "%25s:%-5d  byteCount < sizeof(fileChunk)";
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  v5 = v48;
  LODWORD(v48) = bswap32(v48);
  v6 = WORD2(v48);
  WORD2(v48) = __rev16(WORD2(v48));
  HIWORD(v48) = bswap32(HIWORD(v48)) >> 16;
  if (v5 != 1717985635)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
      *(_WORD *)v60 = 1024;
      *(_DWORD *)&v60[2] = 1201;
      v3 = MEMORY[0x1E0C81028];
      v4 = "%25s:%-5d  fileChunk.mFileType != kCAF_FileType";
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  if (v6 != 256)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
      *(_WORD *)v60 = 1024;
      *(_DWORD *)&v60[2] = 1202;
      v3 = MEMORY[0x1E0C81028];
      v4 = "%25s:%-5d  fileChunk.mFileVersion != kCAF_FileVersion_Initial";
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  v7 = 1685348671;
  if (v51 < 9)
    return v7;
  v8 = 0;
  v46 = 0;
  v9 = 0;
  v47 = 0;
  v10 = 8;
  do
  {
    v2 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v10, 12, &v53, &v52);
    if ((_DWORD)v2)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v55 = 136315394;
        v56 = "CAFAudioFile.cpp";
        v57 = 1024;
        v58 = 1212;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  FSRead Failed 1", v55, 0x12u);
      }
      goto LABEL_106;
    }
    if (v52 < 0xC)
      break;
    v9 = bswap32(v53);
    v53 = v9;
    v12 = bswap64(v54);
    v54 = v12;
    if (v12 >= 0)
      v13 = v12 + 12;
    else
      v13 = v12;
    v11 = v10 + 12;
    if (v9 != 1684108385)
    {
      if (v9 != 1684370275)
      {
        if (v9 == 1885432692)
          v8 = 1;
        goto LABEL_45;
      }
      v2 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unint64_t *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v11, 32, &v48, &v52);
      if (!(_DWORD)v2)
      {
        if (v52 <= 0x1F)
        {
          v9 = 1684370275;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v55 = 136315394;
            v56 = "CAFAudioFile.cpp";
            v57 = 1024;
            v58 = 1239;
            v44 = MEMORY[0x1E0C81028];
            v45 = "%25s:%-5d  byteCount < sizeof(format)";
            goto LABEL_101;
          }
          goto LABEL_70;
        }
        v48 = bswap64(v48);
        v14 = vrev32q_s8(v49);
        v49 = v14;
        v15 = vrev32_s8(v50);
        v50 = v15;
        v61 = 0;
        v63 = 0;
        *(_QWORD *)buf = v48;
        *(_DWORD *)&buf[8] = v14.i32[0];
        *(_QWORD *)&v60[4] = vextq_s8(v14, v14, 8uLL).u64[0];
        v62 = v15;
        if (v14.i32[3] == 1)
          v61 = v14.i32[2];
        v16 = v14.i32[1];
        if (v14.i32[0] == 1819304813)
        {
          if ((v14.i8[4] & 1) != 0)
            v17 = 1;
          else
            v17 = 4;
          v18 = (v17 | v14.i8[4] & 2) ^ 2;
          if ((v15.i8[4] & 7) != 0 || ((unsigned __int32)v15.i32[1] >> 3) * v15.i32[0] != v14.i32[2])
            v16 = v18 | 0x10;
          else
            v16 = v18 | 8;
        }
        *(_DWORD *)v60 = v16;
        v2 = (*(uint64_t (**)(CAFAudioFile *, _BYTE *))(*(_QWORD *)this + 176))(this, buf);
        if ((_DWORD)v2)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v55 = 136315394;
            v56 = "CAFAudioFile.cpp";
            v57 = 1024;
            v58 = 1254;
            v42 = MEMORY[0x1E0C81028];
            v43 = "%25s:%-5d  SetDataFormat Failed";
LABEL_104:
            _os_log_impl(&dword_18EE07000, v42, OS_LOG_TYPE_ERROR, v43, v55, 0x12u);
          }
          goto LABEL_105;
        }
        BYTE4(v47) = 1;
        goto LABEL_45;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v55 = 136315394;
        v56 = "CAFAudioFile.cpp";
        v57 = 1024;
        v58 = 1238;
        v42 = MEMORY[0x1E0C81028];
        v43 = "%25s:%-5d  FSRead Failed 1";
        goto LABEL_104;
      }
LABEL_105:
      v9 = 1684370275;
LABEL_106:
      v37 = v46 & 1;
      v38 = BYTE4(v47) & 1;
      v39 = v47 & 1;
      goto LABEL_83;
    }
    v52 = 4;
    v2 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                             + 48))(*((_QWORD *)this + 13), 0, v11, 4, (char *)this + 168, &v52);
    if ((_DWORD)v2)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v55 = 136315394;
        v56 = "CAFAudioFile.cpp";
        v57 = 1024;
        v58 = 1265;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  FSRead Failed 2", v55, 0x12u);
      }
      v9 = 1684108385;
      v37 = v46 & 1;
      v38 = BYTE4(v47) & 1;
      v39 = 1;
      goto LABEL_83;
    }
    if (v52 <= 3)
    {
      v9 = 1684108385;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v55 = 136315394;
        v56 = "CAFAudioFile.cpp";
        v57 = 1024;
        v58 = 1266;
        v44 = MEMORY[0x1E0C81028];
        v45 = "%25s:%-5d  byteCount < sizeof(mEditCount)";
LABEL_101:
        _os_log_impl(&dword_18EE07000, v44, OS_LOG_TYPE_ERROR, v45, v55, 0x12u);
      }
LABEL_70:
      v7 = 0;
      v36 = (v46 & 1) == 0 && v9 == 1684108385;
      *((_DWORD *)this + 20) = v36;
      return v7;
    }
    *((_QWORD *)this + 9) = v10 + 16;
    if ((v13 & 0x8000000000000000) == 0)
    {
      if (v13 >= 0x10)
        v19 = v13 - 16;
      else
        v19 = 0;
      (*(void (**)(CAFAudioFile *, unint64_t))(*(_QWORD *)this + 232))(this, v19);
      LOBYTE(v47) = 1;
      goto LABEL_46;
    }
    (*(void (**)(CAFAudioFile *, uint64_t))(*(_QWORD *)this + 232))(this, v51 - (v10 + 16));
    v13 = v51 - v10;
    v46 = 1;
    LOBYTE(v47) = 1;
LABEL_45:
    if ((v13 & 0x8000000000000000) != 0)
      break;
LABEL_46:
    v20 = v13 + v10;
    v21 = v51;
    if ((uint64_t)(v13 + v10) > v51)
      break;
    v23 = (unsigned int *)*((_QWORD *)this + 19);
    v22 = *((_QWORD *)this + 20);
    if ((unint64_t)v23 >= v22)
    {
      v25 = (unsigned int *)*((_QWORD *)this + 18);
      v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v25) >> 3);
      v27 = v26 + 1;
      if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v25) >> 3);
      if (2 * v28 > v27)
        v27 = 2 * v28;
      if (v28 >= 0x555555555555555)
        v29 = 0xAAAAAAAAAAAAAAALL;
      else
        v29 = v27;
      if (v29)
      {
        v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v29);
        v25 = (unsigned int *)*((_QWORD *)this + 18);
        v23 = (unsigned int *)*((_QWORD *)this + 19);
      }
      else
      {
        v30 = 0;
      }
      v31 = v29 + 24 * v26;
      *(_DWORD *)v31 = v9;
      *(_DWORD *)(v31 + 4) = 0;
      *(_QWORD *)(v31 + 8) = v13;
      *(_QWORD *)(v31 + 16) = v10;
      v32 = v31;
      if (v23 != v25)
      {
        do
        {
          v33 = *(_OWORD *)(v23 - 6);
          *(_QWORD *)(v32 - 8) = *((_QWORD *)v23 - 1);
          *(_OWORD *)(v32 - 24) = v33;
          v32 -= 24;
          v23 -= 6;
        }
        while (v23 != v25);
        v25 = (unsigned int *)*((_QWORD *)this + 18);
      }
      v24 = (_DWORD *)(v31 + 24);
      *((_QWORD *)this + 18) = v32;
      *((_QWORD *)this + 19) = v31 + 24;
      *((_QWORD *)this + 20) = v29 + 24 * v30;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v23 = v9;
      v23[1] = 0;
      v24 = v23 + 6;
      *((_QWORD *)v23 + 1) = v13;
      *((_QWORD *)v23 + 2) = v10;
    }
    *((_QWORD *)this + 19) = v24;
    v10 += v13;
  }
  while (v20 < v21);
  if ((v47 & 0x100000000) != 0)
  {
    if (v49.i32[2])
    {
      (*(void (**)(CAFAudioFile *))(*(_QWORD *)this + 648))(this);
      v34 = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 224))(this);
      (*(void (**)(CAFAudioFile *, uint64_t))(*(_QWORD *)this + 248))(this, v34 / v49.u32[2]);
    }
    if ((v8 & 1) == 0 || (v7 = CAFAudioFile::ParsePacketTableChunk(this), !(_DWORD)v7))
    {
      (*(void (**)(CAFAudioFile *, char *, uint64_t))(*(_QWORD *)this + 544))(this, (char *)this + 200, v11);
      goto LABEL_70;
    }
  }
  return v7;
}

uint64_t AudioFileObject::SetNumBytes(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

uint64_t AudioFileObject::SetNumPackets(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 16) = a2;
  return this;
}

uint64_t AACAudioFile::ScanForPackets(AACAudioFile *this, uint64_t a2, DataSource *a3, char a4)
{
  DataSource *v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ACMP4BitStreams *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  int ADTSPacketSize;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29[6];
  uint64_t v30;
  unsigned int v31;
  AudioStreamPacketDescription v32;
  _BYTE buf[24];
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v32.mStartOffset = 0;
  *(_QWORD *)&v32.mVariableFramesInPacket = 0;
  v30 = 0;
  if (*((_BYTE *)this + 169))
    return 0;
  v5 = a3;
  if (!a3)
    v5 = (DataSource *)*((_QWORD *)this + 13);
  v8 = *((_QWORD *)this + 15);
  if (!v8)
  {
    v8 = operator new();
    v9 = *((_DWORD *)this + 11);
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_DWORD *)(v8 + 32) = v9;
    *((_QWORD *)this + 15) = v8;
  }
  v10 = *(_QWORD *)(v8 + 24);
  if (a2 != -1 && v10 >= a2)
    return 0;
  v31 = 0;
  v11 = (*(uint64_t (**)(DataSource *, uint64_t *))(*(_QWORD *)v5 + 24))(v5, &v30);
  if ((_DWORD)v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AACAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 856;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetSize failed", buf, 0x12u);
    }
  }
  else
  {
    if (v10)
    {
      v13 = *((_QWORD *)this + 9);
      v14 = v10 - 1;
      CompressedPacketTable::operator[]((uint64_t)buf, (uint64_t *)v8, v10 - 1);
      v15 = *(_QWORD *)buf;
      CompressedPacketTable::operator[]((uint64_t)v29, (uint64_t *)v8, v14);
      v16 = v15 + v13 + v29[3];
    }
    else
    {
      (*(void (**)(AACAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, 0);
      v16 = *((_QWORD *)this + 9);
    }
    if (a2 == -1)
    {
      v18 = -1;
    }
    else
    {
      v17 = *((_QWORD *)this + 15);
      if (v17)
        v17 = *(_QWORD *)(v17 + 24);
      v18 = a2 - v17;
    }
    if (v16 >= v30)
    {
      v11 = 0;
LABEL_41:
      *((_BYTE *)this + 169) = a4;
    }
    else
    {
      v28 = v18;
LABEL_23:
      v19 = (ACMP4BitStreams *)*((_QWORD *)this + 22);
      while (1)
      {
        v20 = (*(uint64_t (**)(DataSource *, _QWORD, uint64_t, _QWORD, ACMP4BitStreams *, unsigned int *))(*(_QWORD *)v5 + 48))(v5, 0, v16, (*((_DWORD *)this + 46) - (_DWORD)v19), v19, &v31);
        v11 = v20;
        if ((_DWORD)v20)
        {
          if ((_DWORD)v20 != -39)
            break;
        }
        v22 = v31;
        v23 = *((unsigned int *)this + 43);
        if (v31 < v23)
          break;
        v29[0] = *((_DWORD *)this + 43);
        v19 = (ACMP4BitStreams *)*((_QWORD *)this + 22);
        ADTSPacketSize = ACMP4BitStreams::GetADTSPacketSize(v19, v29, v21);
        if (ADTSPacketSize)
        {
          v26 = ADTSPacketSize;
          *(_QWORD *)buf = v19;
          *(_QWORD *)&buf[8] = 72;
          *(_QWORD *)&buf[16] = v19;
          v34 = 0;
          CABitStreamReader::ReadBits((CABitStreamReader *)buf, 0x20u);
          CABitStreamReader::ReadBits((CABitStreamReader *)buf, 0x16u);
          if (CABitStreamReader::ReadBits((CABitStreamReader *)buf, 2u))
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "AACAudioFile.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 912;
              _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Packet with multiple raw data blocks was found - unsupported", buf, 0x12u);
            }
            return 1685348671;
          }
          v32.mDataByteSize = v26 - v23;
          v32.mStartOffset = v16 + v23 - *((_QWORD *)this + 9);
          if (v26 - (int)v23 > (*(unsigned int (**)(AACAudioFile *))(*(_QWORD *)this + 632))(this))
            (*(void (**)(AACAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, (v26 - v23));
          v16 += (*((_DWORD *)this + 43) + v26 - v23);
          if (v16 > v30)
            goto LABEL_44;
          AudioFileObject::AppendPacket(this, &v32);
          v27 = v28 - 1;
          if (v28 == -1)
            v27 = -1;
          if (!v27)
            break;
          v28 = v27;
          if (v16 < v30)
            goto LABEL_23;
          goto LABEL_41;
        }
        v25 = ID3Size(v22, (const unsigned __int8 *)v19, (int *)buf);
        if (v25)
        {
          v16 += v25;
          *((_BYTE *)this + 168) = 1;
          if (v16 < v30)
            continue;
        }
        goto LABEL_41;
      }
    }
  }
  if ((v11 & 0xFFFFFFFE) == 0xFFFFFFD8)
  {
    if ((_DWORD)v11 == -39)
    {
LABEL_44:
      v11 = 0;
      *((_BYTE *)this + 169) = a4;
      return v11;
    }
    return 0;
  }
  return v11;
}

uint64_t CABitStreamReader::ReadBits(CABitStreamReader *this, unsigned int a2)
{
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;

  if (!a2)
    return 0;
  v2 = *((_DWORD *)this + 7);
  v3 = v2 - a2;
  if (v2 >= a2)
  {
    v6 = *((_DWORD *)this + 6);
    v5 = v6 >> -(char)a2;
    *((_DWORD *)this + 6) = v6 << a2;
    *((_DWORD *)this + 7) = v3;
  }
  else
  {
    if (v2)
    {
      v4 = *((_DWORD *)this + 6) >> -(char)a2;
      a2 -= v2;
      *((_DWORD *)this + 7) = 0;
    }
    else
    {
      v4 = 0;
    }
    v7 = *((_DWORD *)this + 3);
    v8 = *((_DWORD *)this + 2) - v7;
    if (v8)
    {
      if (v8 >= 0x20)
        v8 = 32;
      v9 = (v8 + 7) >> 3;
      switch(v9)
      {
        case 1u:
          v10 = (unsigned __int8 *)*((_QWORD *)this + 2);
          v11 = *v10 << 24;
          goto LABEL_18;
        case 2u:
          v10 = (unsigned __int8 *)*((_QWORD *)this + 2);
          v11 = (*v10 << 24) | (v10[1] << 16);
          goto LABEL_18;
        case 3u:
          v10 = (unsigned __int8 *)*((_QWORD *)this + 2);
          v11 = (*v10 << 24) | (v10[1] << 16) | (v10[2] << 8);
          goto LABEL_18;
        case 4u:
          v10 = (unsigned __int8 *)*((_QWORD *)this + 2);
          v11 = bswap32(*(_DWORD *)v10);
LABEL_18:
          *((_DWORD *)this + 6) = v11;
          break;
        default:
          v10 = (unsigned __int8 *)*((_QWORD *)this + 2);
          break;
      }
      *((_QWORD *)this + 2) = &v10[v9];
      *((_DWORD *)this + 3) = v8 + v7;
    }
    else
    {
      *((_DWORD *)this + 6) = 0;
    }
    v12 = *((_DWORD *)this + 6);
    v13 = v8 - a2;
    if (v8 < a2)
      v13 = 0;
    v14 = a2 >= v8;
    v16 = a2 - v8;
    v15 = v16 != 0 && v14;
    v17 = -1 << v16;
    if (!v15)
      v17 = -1;
    v18 = v17 & (v12 >> -(char)a2);
    v19 = v12 << a2;
    if (a2 >= 0x20)
      v19 = 0;
    *((_DWORD *)this + 6) = v19;
    *((_DWORD *)this + 7) = v13;
    return (v18 + v4);
  }
  return v5;
}

uint64_t Cached_DataSource::ReadBytes(Cached_DataSource *this, uint64_t a2, int64_t a3, size_t __n, char *__dst, unsigned int *a6)
{
  int v12;
  uint64_t result;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  _DWORD *v19;
  uint64_t v20;
  const void **v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  size_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;

  if (a6)
    *a6 = 0;
  v31 = 0;
  v30 = 0;
  if (!__dst)
    return 4294967246;
  v12 = a2 & 3;
  if (v12 == 2)
  {
    result = (*(uint64_t (**)(Cached_DataSource *, uint64_t *))(*(_QWORD *)this + 24))(this, &v31);
    if ((_DWORD)result)
      return result;
    v14 = v31;
LABEL_11:
    v15 = v14 + a3;
LABEL_12:
    if ((v15 & 0x8000000000000000) == 0)
      goto LABEL_13;
    return 4294967256;
  }
  v31 = 0;
  v15 = a3;
  if ((a2 & 3) == 0)
    goto LABEL_12;
  if (v12 != 1)
  {
    v14 = 0;
    v15 = 0;
    if (v12 != 2)
      goto LABEL_13;
    goto LABEL_11;
  }
  v15 = *((_QWORD *)this + 8) + a3;
  if (v15 < 0)
    return 4294967256;
LABEL_13:
  if (v15 < (unint64_t)*((unsigned int *)this + 8))
  {
    if (a6)
      *a6 = 0;
    if (!*((_QWORD *)this + 3))
    {
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 3, *((unsigned int *)this + 8), 1);
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2), 0, 0, *((unsigned int *)this + 8), *((_QWORD *)this + 3), (char *)this + 32);
      if ((_DWORD)result)
      {
        if ((_DWORD)result != -39)
          return result;
      }
    }
    v16 = *((unsigned int *)this + 8);
    v17 = v16 - v15;
    if (v16 - v15 >= (unint64_t)__n)
      v18 = __n;
    else
      v18 = v16 - v15;
    memcpy(__dst, (const void *)(*((_QWORD *)this + 3) + v15), v18);
    if (v17 >= __n)
    {
      result = 0;
      if (!a6)
      {
LABEL_42:
        *((_QWORD *)this + 8) = v18 + v15;
        return result;
      }
    }
    else
    {
      v32 = 0;
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, char *, unsigned int *))(**((_QWORD **)this + 2)
                                                                                                 + 48))(*((_QWORD *)this + 2), 0, *((unsigned int *)this + 8), (__n - v18), &__dst[v18], &v32);
      v18 += v32;
      if (!a6)
        goto LABEL_42;
    }
    *a6 = v18;
    goto LABEL_42;
  }
  v19 = (_DWORD *)((char *)this + 52);
  v21 = (const void **)((char *)this + 40);
  v20 = *((_QWORD *)this + 5);
  v22 = *((unsigned int *)this + 12);
  if (v20)
  {
    if (v22 > __n)
    {
      v23 = *((_QWORD *)this + 7);
      if (v15 >= v23)
      {
        v24 = v23 + *((unsigned int *)this + 13);
        v25 = v24 - v15;
        if (v24 > v15)
        {
          v26 = __n;
          v27 = (const void *)(v20 + v15 - v23);
          if (v15 + __n <= v24)
          {
            memcpy(__dst, v27, __n);
            result = 0;
          }
          else
          {
            memcpy(__dst, v27, v24 - v15);
            v28 = *((_QWORD *)this + 7) + *((unsigned int *)this + 13);
            result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, char *))(**((_QWORD **)this + 2)
                                                                                                + 48))(*((_QWORD *)this + 2), 0, v28, *((unsigned int *)this + 12), *((_QWORD *)this + 5), (char *)this + 52);
            if ((_DWORD)result && (_DWORD)result != -39)
            {
              LODWORD(__n) = v25;
            }
            else
            {
              *((_QWORD *)this + 7) = v28;
              if (v26 - v25 >= (unint64_t)*((unsigned int *)this + 13))
                v29 = *((unsigned int *)this + 13);
              else
                v29 = v26 - v25;
              if (v29)
                memcpy(&__dst[v25], *v21, v29);
              result = 0;
              LODWORD(__n) = v29 + v25;
            }
          }
          goto LABEL_57;
        }
      }
    }
    if (v22 >= __n)
    {
LABEL_49:
      *((_QWORD *)this + 7) = v15;
      result = (*(uint64_t (**)(_QWORD, _QWORD, int64_t, uint64_t, uint64_t, char *))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2), 0, v15, v22, v20, (char *)this + 52);
      if ((_DWORD)result && (_DWORD)result != -39)
        return result;
      if (*v19 >= __n)
        __n = __n;
      else
        __n = *v19;
      memcpy(__dst, *v21, __n);
      result = 0;
      goto LABEL_57;
    }
  }
  else if (v22 >= __n)
  {
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 5, *((unsigned int *)this + 12), 1);
    v22 = *((unsigned int *)this + 12);
    v20 = *((_QWORD *)this + 5);
    goto LABEL_49;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t, int64_t, size_t, char *, unsigned int *))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2), a2, a3, __n, __dst, &v30);
  LODWORD(__n) = v30;
  *((_QWORD *)this + 8) = v15 + v30;
LABEL_57:
  if (a6)
    *a6 = __n;
  return result;
}

uint64_t ACMP4BitStreams::GetADTSPacketSize(ACMP4BitStreams *this, unsigned int *a2, unsigned int *a3)
{
  int v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  __int16 v9;
  int v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v4 = ADTSHeader::Deserialize((ADTSHeader *)&v8, (const unsigned __int8 *)this, *a2);
  result = 0;
  if (!v4)
  {
    v6 = HIDWORD(v8);
    if ((v8 & 0x1000) != 0)
      v7 = 7;
    else
      v7 = 9;
    *a2 = v7;
    return (v6 >> 13) & 0x1FFF;
  }
  return result;
}

uint64_t ADTSHeader::Deserialize(ADTSHeader *this, const unsigned __int8 *a2, unsigned int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;

  if (a3 > 6)
  {
    v4 = a2[1];
    v5 = (*a2 << 24) | (v4 << 16);
    v6 = a2[2];
    *(_DWORD *)this = (a2[3] | (v6 << 8) | v5) >> 4;
    v7 = (a2[4] << 16) & 0xF0FFFFFF | ((a2[3] & 0xF) << 24) | (a2[5] << 8);
    *((_DWORD *)this + 1) = v7 | a2[6];
    if (v5 >> 20 != 4095)
    {
      v3 = 1937337955;
      goto LABEL_7;
    }
    if ((v4 & 6) != 0)
    {
      v3 = 1818327410;
      goto LABEL_7;
    }
    if ((v4 & 8) != 0 && (v6 & 0xC0) == 0xC0)
    {
      v3 = 1886547814;
      goto LABEL_7;
    }
    if ((v6 & 0x3Cu) >= 0x31)
    {
      v3 = 1918989413;
      goto LABEL_7;
    }
    v9 = (v7 >> 13) & 0x1FFF;
    if ((v4 & 1) != 0)
      v10 = 7;
    else
      v10 = 9;
    if (v9 > v10)
    {
      if ((v4 & 1) != 0)
      {
        *((_WORD *)this + 4) = 0;
        return *((unsigned int *)this + 3);
      }
      if (a3 > 8)
      {
        *((_WORD *)this + 4) = bswap32(*(unsigned __int16 *)(a2 + 7)) >> 16;
        return *((unsigned int *)this + 3);
      }
    }
  }
  v3 = 1651861094;
LABEL_7:
  *((_DWORD *)this + 3) = v3;
  return *((unsigned int *)this + 3);
}

uint64_t AudioFileObject::GetMaximumPacketSize(AudioFileObject *this)
{
  return *((unsigned int *)this + 28);
}

void AudioFileObject::AppendPacket(AudioFileObject *this, const AudioStreamPacketDescription *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  UInt32 mDataByteSize;
  _QWORD v9[3];
  __int128 v10;
  uint64_t v11;

  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    v5 = *((_DWORD *)this + 11);
  }
  else
  {
    v4 = operator new();
    v5 = *((_DWORD *)this + 11);
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)(v4 + 32) = v5;
    *((_QWORD *)this + 15) = v4;
  }
  v10 = (__int128)*a2;
  if (v5)
    v6 = v5;
  else
    v6 = DWORD2(v10);
  v7 = *(_QWORD *)(v4 + 24);
  if (v7)
  {
    CompressedPacketTable::operator[]((uint64_t)v9, (uint64_t *)v4, v7 - 1);
    v7 = v9[2];
  }
  v11 = v7 + v6;
  CompressedPacketTable::push_back((char **)v4, &v10);
  mDataByteSize = a2->mDataByteSize;
  if (mDataByteSize > *((_DWORD *)this + 28))
    *((_DWORD *)this + 28) = mDataByteSize;
}

uint64_t CompressedPacketTable::operator[](uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *exception;

  v3 = a3 >> 5;
  v4 = *a2;
  if (a3 >> 5 >= 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -1;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  v5 = v4 + 24 * v3;
  v6 = a3 & 0x1F;
  switch(*(_BYTE *)(v5 + 8))
  {
    case 0:
      v7 = *(_QWORD *)(v4 + 24 * v3 + 16);
      if ((a3 & 0x1F) != 0)
        v8 = *(unsigned __int16 *)(v7 + 2 * (v6 - 1));
      else
        v8 = 0;
      v17 = *(unsigned __int16 *)(v7 + 2 * (a3 & 0x1F));
      goto LABEL_21;
    case 1:
      v13 = *(_QWORD *)(v4 + 24 * v3 + 16);
      if ((a3 & 0x1F) != 0)
        v8 = *(unsigned __int16 *)(v13 + 4 * (v6 - 1));
      else
        v8 = 0;
      v9 = *(unsigned __int16 *)(v13 + 4 * (a3 & 0x1F) + 2);
      goto LABEL_30;
    case 2:
      v10 = *(_QWORD *)(v4 + 24 * v3 + 16);
      if ((a3 & 0x1F) != 0)
        v8 = *(unsigned int *)(v10 + 4 * (v6 - 1));
      else
        v8 = 0;
      v17 = *(_DWORD *)(v10 + 4 * (a3 & 0x1F));
LABEL_21:
      v9 = v17 - v8;
      goto LABEL_30;
    case 3:
      v11 = *(_QWORD *)(v4 + 24 * v3 + 16);
      if ((a3 & 0x1F) != 0)
        v8 = *(unsigned int *)(v11 + 8 * (v6 - 1));
      else
        v8 = 0;
      v9 = *(unsigned __int16 *)(v11 + 8 * (a3 & 0x1F) + 4);
      goto LABEL_30;
    case 4:
      v12 = *(_QWORD *)(v4 + 24 * v3 + 16);
      if ((a3 & 0x1F) != 0)
        v8 = *(_QWORD *)(v12 + 8 * (v6 - 1));
      else
        v8 = 0;
      v9 = *(_QWORD *)(v12 + 8 * (a3 & 0x1F)) - v8;
      goto LABEL_30;
    case 5:
      v14 = *(_QWORD *)(v4 + 24 * v3 + 16);
      if ((a3 & 0x1F) != 0)
        v8 = *(_QWORD *)(v14 + 16 * (v6 - 1));
      else
        v8 = 0;
      v9 = *(_DWORD *)(v14 + 16 * (a3 & 0x1F) + 8);
      goto LABEL_30;
    case 6:
      v15 = *(_QWORD *)(v4 + 24 * v3 + 16) + 24 * (a3 & 0x1F);
      *(_OWORD *)result = *(_OWORD *)v15;
      v16 = *(_QWORD *)(v15 + 16);
      goto LABEL_31;
    default:
      v8 = 0;
      v9 = 0;
LABEL_30:
      *(_QWORD *)result = *(_QWORD *)v5 + v8;
      *(_DWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = v9;
      v16 = *((unsigned int *)a2 + 8) + *((unsigned int *)a2 + 8) * a3;
LABEL_31:
      *(_QWORD *)(result + 16) = v16;
      return result;
  }
}

void CompressedPacketTable::push_back(char **a1, __int128 *a2)
{
  unint64_t v4;
  void *v5;
  void *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  char *v37;
  uint64_t v38;
  int64x2_t v39;
  uint64_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  uint32x2_t v45;
  uint32x2_t v46;
  uint32x2_t v47;
  uint32x2_t v48;
  unint64_t v49;
  uint32x2_t v50;
  uint32x2_t v51;
  char *v52;
  uint64_t v53;
  int64x2_t v54;
  uint64_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int32x4_t v58;
  char *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int64x2_t v66;
  uint64_t v67;
  int64x2_t v68;
  uint32x2_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  char *v79;
  std::bad_alloc *exception;
  std::bad_alloc *v81;

  v4 = (unint64_t)a1[3];
  if (((_DWORD)a1[3] & 0x1F) == 0)
  {
    v5 = malloc_type_malloc(0x300uLL, 0x7C51E058uLL);
    if (!v5)
      goto LABEL_77;
    v6 = v5;
    v8 = a1[1];
    v7 = (unint64_t)a1[2];
    if ((unint64_t)v8 >= v7)
    {
      v10 = *a1;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v10) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = (char *)operator new(24 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[24 * v11];
      *(_QWORD *)v16 = 0;
      v16[8] = 6;
      *((_QWORD *)v16 + 2) = v6;
      v9 = v16 + 24;
      if (v8 != v10)
      {
        do
        {
          v17 = *(_OWORD *)(v8 - 24);
          *((_QWORD *)v16 - 1) = *((_QWORD *)v8 - 1);
          *(_OWORD *)(v16 - 24) = v17;
          v16 -= 24;
          v8 -= 24;
        }
        while (v8 != v10);
        v8 = *a1;
      }
      *a1 = v16;
      a1[1] = v9;
      a1[2] = &v15[24 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v8 = 0;
      v8[8] = 6;
      *((_QWORD *)v8 + 2) = v5;
      v9 = v8 + 24;
    }
    a1[1] = v9;
  }
  v18 = v4 >> 5;
  v19 = *a1;
  v20 = (uint64_t)&(*a1)[24 * (v4 >> 5)];
  v22 = *(_QWORD *)(v20 + 16);
  v21 = v20 + 16;
  v23 = *a2;
  v24 = v22 + 24 * (v4 & 0x1F);
  *(_QWORD *)(v24 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v24 = v23;
  if ((v4 & 0x1F) == 0x1F)
  {
    v25 = *(_QWORD *)v21;
    if (!*(_DWORD *)(*(_QWORD *)v21 + 8))
    {
      v26 = (unint64_t *)&v19[24 * v18];
      v27 = -1;
      v28 = 32;
      do
      {
        if (v27 == 30)
          goto LABEL_27;
        v29 = *(_DWORD *)(v25 + v28);
        ++v27;
        v28 += 24;
      }
      while (!v29);
      if (v27 >= 0x1F)
      {
LABEL_27:
        v30 = *(_QWORD *)v25;
        v31 = *(_QWORD *)v25 + *(unsigned int *)(v25 + 12);
        if (v31 == *(_QWORD *)(v25 + 24))
        {
          v32 = 0;
          v33 = (unsigned int *)(v25 + 36);
          while (v32 != 30)
          {
            v31 += *v33;
            v34 = *(_QWORD *)(v33 + 3);
            ++v32;
            v33 += 6;
            if (v31 != v34)
              goto LABEL_35;
          }
          v32 = 31;
LABEL_35:
          v36 = v32 > 0x1E;
          v35 = *(_QWORD *)(v25 + 744) - v30 + *(unsigned int *)(v25 + 756);
          *v26 = v30;
          if (v35 < 0x10000)
          {
            if (v32 >= 0x1F)
            {
              v37 = (char *)malloc_type_malloc(0x40uLL, 0x7C51E058uLL);
              if (v37)
              {
                v38 = 0;
                *(_QWORD *)v21 = v37;
                v19[24 * v18 + 8] = 0;
                v39 = vdupq_n_s64(v30);
                v40 = v25 + 96;
                do
                {
                  v41.i64[0] = *(_QWORD *)(v40 - 48);
                  v41.i64[1] = *(_QWORD *)(v40 - 24);
                  v42.i64[0] = *(_QWORD *)(v40 - 96);
                  v42.i64[1] = *(_QWORD *)(v40 - 72);
                  v43.i64[0] = *(_QWORD *)(v40 + 48);
                  v43.i64[1] = *(_QWORD *)(v40 + 72);
                  v44.i64[0] = *(_QWORD *)v40;
                  v44.i64[1] = *(_QWORD *)(v40 + 24);
                  v45.i32[0] = *(_DWORD *)(v40 + 12);
                  v45.i32[1] = *(_DWORD *)(v40 + 36);
                  v46.i32[0] = *(_DWORD *)(v40 + 60);
                  v46.i32[1] = *(_DWORD *)(v40 + 84);
                  v47.i32[0] = *(_DWORD *)(v40 - 84);
                  v47.i32[1] = *(_DWORD *)(v40 - 60);
                  v48.i32[0] = *(_DWORD *)(v40 - 36);
                  v48.i32[1] = *(_DWORD *)(v40 - 12);
                  *(int16x8_t *)&v37[v38] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddw_u32((uint64x2_t)vsubq_s64(v42, v39), v47), (int32x4_t)vaddw_u32((uint64x2_t)vsubq_s64(v41, v39), v48)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddw_u32((uint64x2_t)vsubq_s64(v44, v39), v45), (int32x4_t)vaddw_u32((uint64x2_t)vsubq_s64(v43, v39), v46)));
                  v38 += 16;
                  v40 += 192;
                }
                while (v38 != 64);
LABEL_75:
                free((void *)v25);
                goto LABEL_76;
              }
              goto LABEL_77;
            }
LABEL_50:
            v59 = (char *)malloc_type_malloc(0x80uLL, 0x7C51E058uLL);
            if (v59)
            {
              v60 = 0;
              *(_QWORD *)v21 = v59;
              v19[24 * v18 + 8] = 1;
              do
              {
                if (v60 == 31)
                {
                  LOWORD(v61) = 0;
                  v62 = 32;
                }
                else
                {
                  v62 = v60 + 1;
                  v61 = *(_DWORD *)(v25 + 24 * (v60 + 1)) - v30;
                }
                v63 = &v59[4 * v60];
                *(_WORD *)v63 = v61;
                *((_WORD *)v63 + 1) = *(_DWORD *)(v25 + 24 * v60 + 12);
                v60 = v62;
              }
              while (v62 != 32);
              goto LABEL_75;
            }
            goto LABEL_77;
          }
        }
        else
        {
          v35 = *(_QWORD *)(v25 + 744) - v30 + *(unsigned int *)(v25 + 756);
          *v26 = v30;
          if (v35 < 0x10000)
            goto LABEL_50;
          v36 = 0;
        }
        v49 = HIDWORD(v35);
        if (HIDWORD(v35))
          goto LABEL_57;
        v50 = 0;
        do
        {
          v51.i32[0] = *(_DWORD *)(v25 + v49 + 12);
          v51.i32[1] = *(_DWORD *)(v25 + v49 + 36);
          v50 = vmax_u32(v51, v50);
          v49 += 48;
        }
        while (v49 != 768);
        if (HIWORD(vpmax_u32(v50, v50).u32[0]))
        {
LABEL_57:
          if (v36)
          {
            v64 = (char *)malloc_type_malloc(0x100uLL, 0x7C51E058uLL);
            if (v64)
            {
              v65 = 0;
              *(_QWORD *)v21 = v64;
              v19[24 * v18 + 8] = 4;
              v66 = vdupq_n_s64(v30);
              v67 = v25 + 24;
              do
              {
                v68.i64[0] = *(_QWORD *)(v67 - 24);
                v68.i64[1] = *(_QWORD *)v67;
                v69.i32[0] = *(_DWORD *)(v67 - 12);
                v69.i32[1] = *(_DWORD *)(v67 + 12);
                *(uint64x2_t *)&v64[v65] = vaddw_u32((uint64x2_t)vsubq_s64(v68, v66), v69);
                v65 += 16;
                v67 += 48;
              }
              while (v65 != 256);
              goto LABEL_75;
            }
          }
          else
          {
            v70 = (char *)malloc_type_malloc(0x200uLL, 0x7C51E058uLL);
            if (v70)
            {
              v71 = 0;
              *(_QWORD *)v21 = v70;
              v19[24 * v18 + 8] = 5;
              do
              {
                if (v71 == 31)
                {
                  v72 = 0;
                  v73 = 32;
                }
                else
                {
                  v73 = v71 + 1;
                  v72 = *(_QWORD *)(v25 + 24 * (v71 + 1)) - v30;
                }
                v74 = &v70[16 * v71];
                *(_QWORD *)v74 = v72;
                *((_DWORD *)v74 + 2) = *(_DWORD *)(v25 + 24 * v71 + 12);
                v71 = v73;
              }
              while (v73 != 32);
              goto LABEL_75;
            }
          }
        }
        else if (v36)
        {
          v52 = (char *)malloc_type_malloc(0x80uLL, 0x7C51E058uLL);
          if (v52)
          {
            v53 = 0;
            *(_QWORD *)v21 = v52;
            v19[24 * v18 + 8] = 2;
            v54 = vdupq_n_s64(v30);
            v55 = v25 + 48;
            do
            {
              v56.i64[0] = *(_QWORD *)(v55 - 48);
              v56.i64[1] = *(_QWORD *)(v55 - 24);
              v57.i64[0] = *(_QWORD *)v55;
              v57.i64[1] = *(_QWORD *)(v55 + 24);
              v58.i32[0] = *(_DWORD *)(v55 - 36);
              v58.i32[1] = *(_DWORD *)(v55 - 12);
              v58.i32[2] = *(_DWORD *)(v55 + 12);
              v58.i32[3] = *(_DWORD *)(v55 + 36);
              *(int32x4_t *)&v52[v53] = vaddq_s32(v58, vuzp1q_s32((int32x4_t)vsubq_s64(v56, v54), (int32x4_t)vsubq_s64(v57, v54)));
              v53 += 16;
              v55 += 96;
            }
            while (v53 != 128);
            goto LABEL_75;
          }
        }
        else
        {
          v75 = (char *)malloc_type_malloc(0x100uLL, 0x7C51E058uLL);
          if (v75)
          {
            v76 = 0;
            *(_QWORD *)v21 = v75;
            v19[24 * v18 + 8] = 3;
            do
            {
              if (v76 == 31)
              {
                v77 = 0;
                v78 = 32;
              }
              else
              {
                v78 = v76 + 1;
                v77 = *(_DWORD *)(v25 + 24 * (v76 + 1)) - v30;
              }
              v79 = &v75[8 * v76];
              *(_DWORD *)v79 = v77;
              *((_WORD *)v79 + 2) = *(_DWORD *)(v25 + 24 * v76 + 12);
              v76 = v78;
            }
            while (v78 != 32);
            goto LABEL_75;
          }
        }
LABEL_77:
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v81 = std::bad_alloc::bad_alloc(exception);
      }
    }
  }
LABEL_76:
  ++a1[3];
}

uint64_t UnixFile_DataSource::ReadBytes(UnixFile_DataSource *this, unsigned int a2, uint64_t a3, unsigned int a4, void *a5, unsigned int *a6)
{
  uint64_t v11;
  off_t v12;
  int v13;
  uint64_t v14;
  ssize_t v15;
  unsigned int v16;
  uint64_t result;

  if (a6)
    *a6 = 0;
  if (!a5)
    return 4294967246;
  v11 = UnixFile_DataSource::UFCurrentOffset(this, a2, a3);
  if (v11 < 0)
    return 4294967256;
  if (a4)
  {
    v12 = v11;
    v13 = (a2 >> 5) & 1;
    v14 = *((unsigned int *)this + 5);
    if ((_DWORD)v14 != v13)
    {
      *((_DWORD *)this + 5) = v13;
      fcntl(*((_DWORD *)this + 3), 48, v14);
    }
    v15 = pread(*((_DWORD *)this + 3), a5, a4, v12);
    if (v15 != -1)
    {
      v16 = v15;
      *((_QWORD *)this + 4) = v15 + v12;
      if (a6)
      {
        result = 0;
        *a6 = v16;
        return result;
      }
      return 0;
    }
    return 4294967256;
  }
  return 0;
}

uint64_t UnixFile_DataSource::UFCurrentOffset(UnixFile_DataSource *this, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v5)(void);

  if ((a2 & 3) == 2)
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)this + 24);
  }
  else
  {
    if ((a2 & 3) != 1)
    {
      if ((a2 & 3) != 0)
        return -1;
      else
        return a3;
    }
    v5 = *(uint64_t (**)(void))(*(_QWORD *)this + 40);
  }
  LODWORD(result) = v5();
  if ((_DWORD)result)
    return (int)result;
  else
    return a3;
}

uint64_t AudioFileObject::SetMaximumPacketSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 112) = a2;
  return this;
}

void CADeprecated::CAAutoFree<unsigned char>::allocBytes(void **a1, size_t size, int a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  std::bad_alloc *exception;
  std::bad_alloc *v11;

  v6 = *a1;
  if (v6)
  {
    free(v6);
    *a1 = 0;
  }
  if (a3)
  {
    v7 = malloc_type_malloc(size, 0x2C8E6D5CuLL);
    v8 = v7;
    if (!size || v7)
    {
      bzero(v7, size);
      goto LABEL_9;
    }
LABEL_10:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
  }
  v9 = malloc_type_malloc(size, 0x7C51E058uLL);
  v8 = v9;
  if (size && !v9)
    goto LABEL_10;
LABEL_9:
  *a1 = v8;
}

uint64_t AACAudioFile::GetEstimatedDuration(AACAudioFile *this, double *a2)
{
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  _BYTE v19[12];
  unsigned int v20;
  _QWORD v21[3];
  uint64_t v22;

  v4 = *((double *)this + 3);
  v5 = *((unsigned int *)this + 11);
  if (*((_BYTE *)this + 169))
  {
    if ((_DWORD)v5)
      v6 = (double)((*(uint64_t (**)(AACAudioFile *))(*(_QWORD *)this + 240))(this) * v5) / v4;
    else
      v6 = 0.0;
    v7 = 0;
LABEL_8:
    *a2 = v6;
    return v7;
  }
  *a2 = 0.0;
  if ((*(unsigned int (**)(AACAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, 16, 0, 1))
  {
    return 0;
  }
  v9 = *((_QWORD *)this + 15);
  if (!v9)
  {
    v9 = operator new();
    v10 = *((_DWORD *)this + 11);
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_DWORD *)(v9 + 32) = v10;
    *((_QWORD *)this + 15) = v9;
  }
  v22 = 0;
  v7 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v22);
  if (!(_DWORD)v7)
  {
    v22 -= *((_QWORD *)this + 9);
    v11 = *((_QWORD *)this + 15);
    if (v11)
      v11 = *(_QWORD *)(v11 + 24);
    v12 = v11 - 1;
    v13 = v11 >> 1;
    if (v13 >= 8)
      v14 = 8;
    else
      v14 = v13;
    v15 = v12 - v14;
    CompressedPacketTable::operator[]((uint64_t)v21, (uint64_t *)v9, v12);
    v16 = v21[0];
    CompressedPacketTable::operator[]((uint64_t)v19, (uint64_t *)v9, v12);
    v17 = v16 + v20;
    CompressedPacketTable::operator[]((uint64_t)v18, (uint64_t *)v9, v14);
    v6 = (double)v22 / (double)(v17 - v18[0]) * (double)(unint64_t)(v15 * v5) / v4;
    goto LABEL_8;
  }
  return v7;
}

uint64_t UnixFile_DataSource::GetSize(UnixFile_DataSource *this, uint64_t *a2)
{
  uint64_t result;
  off_t st_size;
  stat v6;

  *a2 = -1;
  if (fstat(*((_DWORD *)this + 3), &v6) == -1)
    return 4294967253;
  result = 0;
  st_size = v6.st_size;
  *((_QWORD *)this + 3) = v6.st_size;
  *a2 = st_size;
  return result;
}

uint64_t Cached_DataSource::GetSize(Cached_DataSource *this, uint64_t *a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2), a2);
}

uint64_t CAFAudioFile::GetEstimatedDuration(CAFAudioFile *this, double *a2)
{
  double v3;
  uint64_t v4;
  double v5;
  BOOL v7;
  int8x8_t *v8;
  int8x16_t v9;
  int8x8_t *v11;
  size_t size;

  v3 = *((double *)this + 3);
  v4 = *((unsigned int *)this + 11);
  LODWORD(size) = 0;
  v5 = 0.0;
  if (v3 != 0.0)
  {
    if ((*(unsigned int (**)(CAFAudioFile *, uint64_t, _QWORD, size_t *))(*(_QWORD *)this + 728))(this, 1885432692, 0, &size))
    {
      v7 = 0;
    }
    else
    {
      v7 = size >= 0x18;
    }
    if (v7)
    {
      v11 = 0;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v11, size, 1);
      v8 = v11;
      if ((*(unsigned int (**)(CAFAudioFile *, uint64_t, _QWORD, _QWORD, size_t *, int8x8_t *))(*(_QWORD *)this + 744))(this, 1885432692, 0, 0, &size, v11))
      {
        if (!v8)
          goto LABEL_12;
      }
      else
      {
        v9 = vrev64q_s8(*(int8x16_t *)v8->i8);
        *(int8x16_t *)v8->i8 = v9;
        v8[2] = vrev32_s8(v8[2]);
        v5 = (double)(v9.i64[1] & ~(v9.i64[1] >> 63)) / v3;
      }
      free(v8);
    }
    else
    {
      v5 = (double)((*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 240))(this) * v4) / v3;
    }
  }
LABEL_12:
  *a2 = v5;
  return 0;
}

void sub_18EE45BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9)
    free(a9);
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::GetUserChunkSize(CAFAudioFile *this, int a2, int a3, unsigned int *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;

  result = 1667787583;
  v8 = (char *)this + 144;
  v6 = *((_QWORD *)this + 18);
  v7 = *((_QWORD *)v8 + 1);
  v9 = v7 - v6;
  if (v7 != v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    v13 = 1;
    do
    {
      if (*(_DWORD *)(v6 + 24 * v10) == a2)
      {
        if (v11 == a3)
        {
          result = 0;
          *a4 = *(_DWORD *)(v6 + 24 * v10 + 8) - 12;
          return result;
        }
        ++v11;
      }
      v10 = v13;
    }
    while (v12 > v13++);
  }
  return result;
}

uint64_t CAFAudioFile::SetDataFormat(CAFAudioFile *this, AudioStreamBasicDescription *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = AudioFileObject::SetDataFormat(this, a2);
  v4 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
    MEMORY[0x193FFE460](v4, 0x1000C403E1C8BA9);
  return v3;
}

uint64_t AC3PacketParser::IsValid(AC3PacketParser *this)
{
  uint64_t result;

  if (!*(_BYTE *)this)
    return 0;
  if (*((_BYTE *)this + 1))
    return 1;
  if (ParseAC3Header(*((unsigned __int8 **)this + 1), 0xAu, (AudioStreamBasicDescription *)((char *)this + 24), (unsigned int *)this + 16, (unsigned int *)this + 17, 0, (unsigned int *)this + 21, 0))return 0;
  result = 1;
  *((_BYTE *)this + 1) = 1;
  return result;
}

uint64_t FillDescriptionFromCommonChunk(uint64_t a1, _QWORD *outPropertyData, UInt32 inSpecifierSize, void *inSpecifier)
{
  char v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  BOOL v14;
  double v16;
  uint64_t result;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  UInt32 ioPropertyDataSize;

  outPropertyData[4] = 0;
  *(_OWORD *)outPropertyData = 0u;
  *((_OWORD *)outPropertyData + 1) = 0u;
  v8 = *(_BYTE *)(a1 + 16);
  v9 = v8;
  v10 = *(unsigned __int8 *)(a1 + 17) | ((v8 & 0x7F) << 8);
  v11 = bswap32(*(_DWORD *)(a1 + 18));
  v12 = bswap32(*(_DWORD *)(a1 + 22));
  v13 = 0.0;
  if (v10)
    v14 = 0;
  else
    v14 = v11 == 0;
  if (!v14 || v12 != 0)
  {
    if (v10 == 0x7FFF)
    {
      v13 = INFINITY;
    }
    else
    {
      v16 = ldexp((double)(v11 - 0x80000000) + 2147483650.0, v10 - 16414);
      v13 = v16 + ldexp((double)(v12 - 0x80000000) + 2147483650.0, v10 - 16446);
    }
  }
  result = 1718449215;
  if (v9 < 0)
    v13 = -v13;
  *(double *)outPropertyData = v13;
  v18 = *(_DWORD *)(a1 + 26);
  *((_DWORD *)outPropertyData + 2) = v18;
  v19 = *(__int16 *)(a1 + 8);
  v20 = *(__int16 *)(a1 + 14);
  *((_DWORD *)outPropertyData + 7) = v19;
  *((_DWORD *)outPropertyData + 8) = v20;
  if (v18 == 1196641568)
  {
    *((_DWORD *)outPropertyData + 2) = 1634169709;
LABEL_15:
    *(_QWORD *)((char *)outPropertyData + 12) = 0;
    outPropertyData[4] = 0;
    *(_QWORD *)((char *)outPropertyData + 20) = 0;
    ioPropertyDataSize = 40;
    result = AudioFormatGetProperty(0x666D7469u, inSpecifierSize, inSpecifier, &ioPropertyDataSize, outPropertyData);
    if (*((_DWORD *)outPropertyData + 2) != 1819304813)
      return result;
    v21 = *((_DWORD *)outPropertyData + 3);
    goto LABEL_55;
  }
  v22 = (v20 + 7) >> 3;
  if (v18 <= 1768829491)
  {
    if (v18 > 1313820228)
    {
      if (v18 == 1313820229)
      {
        v34 = v22 * v19;
        *((_DWORD *)outPropertyData + 5) = 1;
        *((_DWORD *)outPropertyData + 6) = v34;
        *((_DWORD *)outPropertyData + 4) = v34;
        *((_DWORD *)outPropertyData + 2) = 1819304813;
        if ((v20 & 7) != 0)
        {
          v21 = 20;
          *((_DWORD *)outPropertyData + 3) = 20;
          v28 = 22;
        }
        else
        {
          v21 = 12;
          *((_DWORD *)outPropertyData + 3) = 12;
          v28 = 14;
        }
        goto LABEL_51;
      }
      if (v18 != 1718367026)
      {
        v24 = 1718367796;
        goto LABEL_36;
      }
    }
    else
    {
      if (v18 == 842231401)
      {
        result = 0;
        v29 = 4 * v19;
        *((_DWORD *)outPropertyData + 5) = 1;
        *((_DWORD *)outPropertyData + 6) = v29;
        *((_DWORD *)outPropertyData + 4) = v29;
        v30 = 32;
        goto LABEL_49;
      }
      if (v18 != 1179398962)
      {
        v24 = 1179399732;
LABEL_36:
        if (v18 != v24)
          goto LABEL_15;
        result = 0;
        v25 = 8 * v19;
        *((_DWORD *)outPropertyData + 5) = 1;
        *((_DWORD *)outPropertyData + 6) = v25;
        *((_DWORD *)outPropertyData + 4) = v25;
        *((_DWORD *)outPropertyData + 8) = 64;
        outPropertyData[1] = 0x96C70636DLL;
        v21 = 9;
LABEL_55:
        *((_DWORD *)outPropertyData + 3) = v21 | 2;
        return result;
      }
    }
    v27 = 4 * v19;
    *((_DWORD *)outPropertyData + 5) = 1;
    *((_DWORD *)outPropertyData + 6) = v27;
    *((_DWORD *)outPropertyData + 4) = v27;
    *((_DWORD *)outPropertyData + 8) = 32;
    outPropertyData[1] = 0x96C70636DLL;
    v28 = 11;
    v21 = 9;
    goto LABEL_51;
  }
  if (v18 > 1836253268)
  {
    if (v18 <= 1936684915)
    {
      if (v18 == 1836253269)
        return result;
      if (v18 != 1918990112)
        goto LABEL_15;
      result = 0;
      v23 = v22 * v19;
      *((_DWORD *)outPropertyData + 5) = 1;
      *((_DWORD *)outPropertyData + 6) = v23;
      *((_DWORD *)outPropertyData + 4) = v23;
      *((_DWORD *)outPropertyData + 2) = 1819304813;
      if ((v20 + 7) <= 0xF)
        v21 = 10;
      else
        v21 = 14;
      goto LABEL_55;
    }
    if (v18 != 1936684916)
    {
      if (v18 != 1953984371)
        goto LABEL_15;
      result = 0;
      v26 = v22 * v19;
      *((_DWORD *)outPropertyData + 5) = 1;
      *((_DWORD *)outPropertyData + 6) = v26;
      *((_DWORD *)outPropertyData + 4) = v26;
      outPropertyData[1] = 0xE6C70636DLL;
      v21 = 14;
      goto LABEL_55;
    }
    result = 0;
    v35 = 2 * v19;
    *((_DWORD *)outPropertyData + 5) = 1;
    *((_DWORD *)outPropertyData + 6) = v35;
    *((_DWORD *)outPropertyData + 4) = v35;
    v30 = 16;
LABEL_49:
    *((_DWORD *)outPropertyData + 8) = v30;
    outPropertyData[1] = 0xC6C70636DLL;
    return result;
  }
  switch(v18)
  {
    case 1768829492:
      v31 = 3 * v19;
      *((_DWORD *)outPropertyData + 5) = 1;
      *((_DWORD *)outPropertyData + 6) = v31;
      *((_DWORD *)outPropertyData + 4) = v31;
      v32 = 24;
      break;
    case 1768829746:
      v33 = 4 * v19;
      *((_DWORD *)outPropertyData + 5) = 1;
      *((_DWORD *)outPropertyData + 6) = v33;
      *((_DWORD *)outPropertyData + 4) = v33;
      v32 = 32;
      break;
    case 1836253264:
      return result;
    default:
      goto LABEL_15;
  }
  *((_DWORD *)outPropertyData + 8) = v32;
  outPropertyData[1] = 0xC6C70636DLL;
  v28 = 14;
  v21 = 12;
LABEL_51:
  if (inSpecifierSize < 0x16)
  {
    result = 0;
    goto LABEL_55;
  }
  result = 0;
  if (!*((_WORD *)inSpecifier + 10))
    *((_DWORD *)outPropertyData + 3) = v28;
  return result;
}

uint64_t updateReservedWriteIndex(uint64_t result, _DWORD *a2)
{
  _DWORD *v2;
  int v3;

  v2 = *(_DWORD **)(result + 24);
  v3 = a2[7] - (a2[2] + a2[6]);
  if (v3 < 0)
    v3 += *v2;
  v2[1] = v3;
  __dmb(0xBu);
  return result;
}

OSStatus AudioFileClose(AudioFileID inAudioFile)
{
  uint64_t v1;
  int v2;
  int v3;
  std::unique_lock<std::mutex>::mutex_type *m;
  int v5;
  OSStatus v6;
  AudioFileID v8;
  uint64_t v9;
  std::unique_lock<std::mutex> __lk;

  v8 = inAudioFile;
  v9 = 0;
  __lk.__m_ = &AudioFileMutex(void)::global;
  __lk.__owns_ = 1;
  std::mutex::lock(&AudioFileMutex(void)::global);
  if (!v8)
  {
    v2 = 0;
    m = &AudioFileMutex(void)::global;
LABEL_19:
    std::mutex::unlock(m);
    goto LABEL_20;
  }
  v1 = BaseOpaqueObject::ResolveOpaqueRef();
  v9 = v1;
  if (v1)
  {
    v2 = 1;
    if (*(_DWORD *)(v1 + 12))
    {
      ++*(_DWORD *)(v1 + 16);
      do
      {
        if (*(_BYTE *)(v1 + 20))
        {
          v2 = 0;
          --*(_DWORD *)(v1 + 16);
          goto LABEL_17;
        }
        std::condition_variable::wait(&AudioFileCondVar(void)::global, &__lk);
        v1 = v9;
      }
      while (*(_DWORD *)(v9 + 12));
      v3 = *(unsigned __int8 *)(v9 + 20);
      --*(_DWORD *)(v9 + 16);
      if (v3)
      {
        v2 = 0;
        goto LABEL_17;
      }
      v5 = *(_DWORD *)(v1 + 12) + 1;
    }
    else
    {
      v5 = 1;
    }
    *(_DWORD *)(v1 + 12) = v5;
    *(_BYTE *)(v1 + 20) = 1;
    std::condition_variable::notify_one(&AudioFileCondVar(void)::global);
    if (*(_DWORD *)(v9 + 16))
    {
      do
        std::condition_variable::wait(&AudioFileCondVar(void)::global, &__lk);
      while (*(_DWORD *)(v9 + 16));
      v2 = 1;
    }
  }
  else
  {
    v2 = 0;
    v8 = 0;
  }
LABEL_17:
  if (__lk.__owns_)
  {
    m = __lk.__m_;
    goto LABEL_19;
  }
LABEL_20:
  if (!v2)
  {
    v6 = -38;
    goto LABEL_26;
  }
  if (!v9)
  {
    v6 = -50;
    goto LABEL_26;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
  if (v6)
  {
LABEL_26:
    AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v8);
    return v6;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v9 = 0;
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v8);
  return 0;
}

void sub_18EE46374(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(&AudioFileMutex(void)::global);
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EE46360);
}

void AudioFileObjectHandle::~AudioFileObjectHandle(AudioFileObjectHandle *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2908408;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  BaseOpaqueObject::~BaseOpaqueObject(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2908408;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

uint64_t AudioFileObjectHandle::AFAPI_Close(AudioFileObjectHandle *this)
{
  _BYTE *v1;
  uint64_t result;

  v1 = (_BYTE *)*((_QWORD *)this + 3);
  if (v1[136])
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 216))(*((_QWORD *)this + 3));
    if ((_DWORD)result)
      return result;
    v1[136] = 0;
  }
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 56))(v1);
}

uint64_t AudioFileObject::DoClose(AudioFileObject *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 136))
  {
    result = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 216))(this);
    if ((_DWORD)result)
      return result;
    *((_BYTE *)this + 136) = 0;
  }
  return (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 56))(this);
}

void CAFAudioFile::~CAFAudioFile(CAFAudioFile *this)
{
  CAFAudioFile::~CAFAudioFile(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E2901DD8;
  v2 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v2)
    MEMORY[0x193FFE460](v2, 0x1000C403E1C8BA9);
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  AudioFileObject::~AudioFileObject(this);
}

void AudioFileObject::~AudioFileObject(AudioFileObject *this)
{
  uint64_t v2;
  const void *v3;

  *(_QWORD *)this = off_1E2905020;
  v2 = *((_QWORD *)this + 13);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  AudioFileObject::DeletePacketTable(this);
  v3 = (const void *)*((_QWORD *)this + 11);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 11) = 0;
  }
}

CompressedPacketTable *AudioFileObject::DeletePacketTable(AudioFileObject *this)
{
  CompressedPacketTable *result;

  result = (CompressedPacketTable *)*((_QWORD *)this + 15);
  if (result)
  {
    CompressedPacketTable::~CompressedPacketTable(result);
    result = (CompressedPacketTable *)MEMORY[0x193FFE460]();
  }
  *((_QWORD *)this + 15) = 0;
  return result;
}

uint64_t CAFAudioFile::Close(CAFAudioFile *this)
{
  char *v2;
  double v3;
  double v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (char *)this + 216;
  v3 = *((double *)this + 27);
  if (v3 != 0.0)
  {
    v4 = *((double *)this + 3);
    if (v4 != 0.0 && v3 != v4)
    {
      v6 = *((_QWORD *)this + 22);
      if (v6 < 0)
      {
        v7 = *((unsigned int *)this + 11);
        if ((_DWORD)v7)
          v6 = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 240))(this) * v7
             - (*((int *)this + 46)
              + (uint64_t)*((int *)this + 47));
      }
      if (v6 >= 1)
      {
        v8 = *((double *)this + 27) / *((double *)this + 3);
        v9 = *((int *)this + 46);
        v10 = *((int *)this + 47);
        v11 = vcvtmd_s64_f64(v8 * (double)(int)v9 + 0.5);
        v12 = vcvtmd_s64_f64(v8 * (double)(int)v10 + 0.5);
        v13 = *((_QWORD *)this + 22);
        if (v13 < 0)
        {
          v14 = *((unsigned int *)this + 11);
          if ((_DWORD)v14)
          {
            v15 = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 240))(this);
            v9 = *((int *)this + 46);
            v10 = *((int *)this + 47);
            v13 = v15 * v14 - (v9 + v10);
          }
        }
        *((_QWORD *)this + 22) = (int)(vcvtmd_s64_f64(v8 * (double)(v13 + v9 + v10) + 0.5) - (v12 + v11));
        *((_DWORD *)this + 46) = v11;
        *((_DWORD *)this + 47) = v12;
        CAFAudioFile::UpdatePacketTableChunk(this);
        (*(void (**)(CAFAudioFile *, char *))(*(_QWORD *)this + 184))(this, v2);
      }
    }
  }
  v16 = *((_QWORD *)this + 13);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  *((_QWORD *)this + 13) = 0;
  return 0;
}

void Cached_DataSource::~Cached_DataSource(Cached_DataSource *this)
{
  Cached_DataSource::~Cached_DataSource(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E29070A8;
  if (*((_BYTE *)this + 72))
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 5) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    free(v4);
    *((_QWORD *)this + 3) = 0;
  }
}

void UnixFile_DataSource::~UnixFile_DataSource(UnixFile_DataSource *this)
{
  UnixFile_DataSource::~UnixFile_DataSource(this);
  JUMPOUT(0x193FFE460);
}

{
  *(_QWORD *)this = &off_1E2907E40;
  if (*((_BYTE *)this + 8))
    close(*((_DWORD *)this + 3));
}

OSStatus AudioFileReadPackets(AudioFileID inAudioFile, Boolean inUseCache, UInt32 *outNumBytes, AudioStreamPacketDescription *outPacketDescriptions, SInt64 inStartingPacket, UInt32 *ioNumPackets, void *outBuffer)
{
  OSStatus v8;
  uint64_t v13;
  OSStatus v14;
  AudioFileID v16;
  uint64_t v17;

  if (!ioNumPackets)
    return -50;
  v8 = -50;
  if ((inStartingPacket & 0x8000000000000000) == 0 && *ioNumPackets)
  {
    v13 = inUseCache;
    v16 = inAudioFile;
    v17 = 0;
    if (AudioFileLocker::Lock((AudioFileLocker *)&v16))
    {
      if (v17)
      {
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, AudioStreamPacketDescription *, SInt64, UInt32 *, void *))(*(_QWORD *)v17 + 104))(v17, v13, outNumBytes, outPacketDescriptions, inStartingPacket, ioNumPackets, outBuffer);
        AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v16);
        if (v14 == -39)
          return 0;
        else
          return v14;
      }
    }
    else
    {
      v8 = -38;
    }
    AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v16);
  }
  return v8;
}

void sub_18EE468EC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x18EE468ACLL);
  }
  __cxa_end_catch();
  JUMPOUT(0x18EE468CCLL);
}

OSStatus AudioFileGetPropertyInfo(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 *outDataSize, UInt32 *isWritable)
{
  uint64_t v6;
  OSStatus v7;
  AudioFileID v9;
  uint64_t v10;

  if (!inAudioFile)
    return -50;
  v6 = *(_QWORD *)&inPropertyID;
  v9 = inAudioFile;
  v10 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v9))
  {
    if (v10)
      v7 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, UInt32 *))(*(_QWORD *)v10 + 136))(v10, v6, outDataSize, isWritable);
    else
      v7 = -50;
  }
  else
  {
    v7 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v9);
  return v7;
}

void sub_18EE469BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EE469A4);
}

OSStatus AudioFileGetProperty(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 *ioDataSize, void *outPropertyData)
{
  OSStatus v4;
  uint64_t v7;
  AudioFileID v9;
  uint64_t v10;

  v4 = -50;
  if (inAudioFile && ioDataSize && outPropertyData)
  {
    v7 = *(_QWORD *)&inPropertyID;
    v9 = inAudioFile;
    v10 = 0;
    if (AudioFileLocker::Lock((AudioFileLocker *)&v9))
    {
      if (v10)
        v4 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, void *))(*(_QWORD *)v10 + 144))(v10, v7, ioDataSize, outPropertyData);
    }
    else
    {
      v4 = -38;
    }
    AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v9);
  }
  return v4;
}

void sub_18EE46A88(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EE46A70);
}

void AudioFileLocker::~AudioFileLocker(AudioFileLocker *this)
{
  uint64_t v2;
  int v3;

  std::mutex::lock(&AudioFileMutex(void)::global);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 12);
    if (v3)
    {
      *(_DWORD *)(v2 + 12) = v3 - 1;
      std::condition_variable::notify_one(&AudioFileCondVar(void)::global);
    }
  }
  std::mutex::unlock(&AudioFileMutex(void)::global);
}

uint64_t AudioFileLocker::Lock(AudioFileLocker *this)
{
  std::unique_lock<std::mutex>::mutex_type *m;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  std::unique_lock<std::mutex> v8;

  m = &AudioFileMutex(void)::global;
  v8.__m_ = &AudioFileMutex(void)::global;
  v8.__owns_ = 1;
  std::mutex::lock(&AudioFileMutex(void)::global);
  if (!*(_QWORD *)this)
  {
    v5 = 0;
LABEL_18:
    std::mutex::unlock(m);
    return v5;
  }
  v3 = *((_QWORD *)this + 1);
  if (v3 || (v3 = BaseOpaqueObject::ResolveOpaqueRef(), (*((_QWORD *)this + 1) = v3) != 0))
  {
    if (*(_DWORD *)(v3 + 12))
    {
      ++*(_DWORD *)(v3 + 16);
      do
      {
        if (*(_BYTE *)(v3 + 20))
        {
          v5 = 0;
          --*(_DWORD *)(v3 + 16);
          goto LABEL_16;
        }
        std::condition_variable::wait(&AudioFileCondVar(void)::global, &v8);
        v3 = *((_QWORD *)this + 1);
      }
      while (*(_DWORD *)(v3 + 12));
      v4 = *(unsigned __int8 *)(v3 + 20);
      --*(_DWORD *)(v3 + 16);
      if (v4)
      {
        v5 = 0;
        goto LABEL_16;
      }
      v6 = *(_DWORD *)(v3 + 12) + 1;
    }
    else
    {
      v6 = 1;
    }
    *(_DWORD *)(v3 + 12) = v6;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_QWORD *)this = 0;
  }
LABEL_16:
  if (v8.__owns_)
  {
    m = v8.__m_;
    goto LABEL_18;
  }
  return v5;
}

void sub_18EE46C48(_Unwind_Exception *a1)
{
  std::mutex::unlock(&AudioFileMutex(void)::global);
  _Unwind_Resume(a1);
}

uint64_t AudioFileObject::GetProperty(AudioFileObject *this, int a2, unsigned int *a3, char *a4)
{
  AudioFileObject *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t (*v10)(AudioFileObject *, unsigned int *, char *);
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t (*v14)(AudioFileObject *, char *);
  __int128 v15;
  __int128 v16;
  const void *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(AudioFileObject *, uint64_t, char *, char *);
  uint64_t v21;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE cf[12];
  __int16 v32;
  int v33;
  uint64_t v34;

  v6 = this;
  v34 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v7 = 1886681407;
  if (a2 > 1835493730)
  {
    if (a2 > 1886086769)
    {
      if (a2 > 1886616164)
      {
        if (a2 <= 1920098671)
        {
          if (a2 != 1886616165)
          {
            if (a2 != 1919380595)
              return v7;
            bzero(a4, *a3);
            v10 = *(uint64_t (**)(AudioFileObject *, unsigned int *, char *))(*(_QWORD *)v6 + 384);
            goto LABEL_118;
          }
          if (*a3 != 4)
          {
            v7 = 561211770;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)cf = 136315394;
              *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
              v32 = 1024;
              v33 = 1659;
              v26 = MEMORY[0x1E0C81028];
              v27 = "%25s:%-5d  inDataSize is wrong";
              goto LABEL_201;
            }
            return v7;
          }
          v23 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 640))(this);
        }
        else
        {
          if (a2 != 1920098672)
          {
            if (a2 != 1935832164)
            {
              if (a2 == 1935893603)
              {
                if (*a3 == 8)
                {
                  *(_QWORD *)cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  *(_WORD *)&cf[8] = 257;
                  v7 = (*(uint64_t (**)(AudioFileObject *, _BYTE *))(*(_QWORD *)v6 + 456))(v6, cf);
                  if ((_DWORD)v7
                    && (*(unsigned int (**)(AudioFileObject *, _BYTE *))(*(_QWORD *)v6 + 496))(v6, cf))
                  {
                    goto LABEL_198;
                  }
                  v8 = *(const void **)cf;
                  if (*(_QWORD *)cf)
                  {
LABEL_23:
                    CFRetain(v8);
                    v9 = *(_QWORD *)cf;
LABEL_195:
                    v7 = 0;
                    goto LABEL_197;
                  }
LABEL_194:
                  v9 = 0;
                  goto LABEL_195;
                }
                v7 = 561211770;
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)cf = 136315394;
                  *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
                  v32 = 1024;
                  v33 = 1809;
                  v26 = MEMORY[0x1E0C81028];
                  v27 = "%25s:%-5d  inDataSize is wrong";
                  goto LABEL_201;
                }
              }
              return v7;
            }
            if (*a3 == 4)
            {
              *(_DWORD *)cf = 0;
              v24 = (*(uint64_t (**)(AudioFileObject *, _BYTE *))(*(_QWORD *)this + 696))(this, cf);
              v7 = v24;
              v13 = *(_DWORD *)cf;
              if ((_DWORD)v24 || !*(_DWORD *)cf)
              {
                if (*((_DWORD *)v6 + 8) == 1819304813)
                {
                  v13 = *((_DWORD *)v6 + 14);
                  if ((*((_BYTE *)v6 + 36) & 1) != 0)
                    v13 = -v13;
                }
                else if ((_DWORD)v24)
                {
                  return v7;
                }
              }
              v7 = 0;
              goto LABEL_204;
            }
            return 561211770;
          }
          if (*a3 != 4)
            return 561211770;
          v23 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 272))(this);
        }
LABEL_140:
        v7 = 0;
        *(_DWORD *)a4 = v23;
        return v7;
      }
      if (a2 > 1886090593)
      {
        if (a2 != 1886090594)
        {
          if (a2 != 1886549346)
            return v7;
          if (*a3 != 24)
          {
            v7 = 561211770;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)cf = 136315394;
              *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
              v32 = 1024;
              v33 = 1650;
              v26 = MEMORY[0x1E0C81028];
              v27 = "%25s:%-5d  inDataSize is wrong";
              goto LABEL_201;
            }
            return v7;
          }
          v19 = a4 + 16;
          v18 = *(_QWORD *)a4;
          v20 = *(uint64_t (**)(AudioFileObject *, uint64_t, char *, char *))(*(_QWORD *)this + 664);
          return v20(this, v18, a4 + 8, v19);
        }
        if (*a3 != 4)
        {
          v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)cf = 136315394;
            *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
            v32 = 1024;
            v33 = 1643;
            v26 = MEMORY[0x1E0C81028];
            v27 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_201;
          }
          return v7;
        }
        v23 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 656))(this);
        goto LABEL_140;
      }
      if (a2 == 1886086770)
      {
        if (*a3 != 24)
        {
          v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)cf = 136315394;
            *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
            v32 = 1024;
            v33 = 1702;
            v26 = MEMORY[0x1E0C81028];
            v27 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_201;
          }
          return v7;
        }
        v25 = (unsigned int *)*((_QWORD *)a4 + 1);
        v10 = *(uint64_t (**)(AudioFileObject *, unsigned int *, char *))(*(_QWORD *)this + 256);
        return v10(this, v25, a4);
      }
      if (a2 != 1886089836)
        return v7;
      if (*a3 != 16)
        return 561211770;
      if (a4)
      {
        if ((*(_QWORD *)a4 & 0x8000000000000000) == 0)
        {
          v14 = *(uint64_t (**)(AudioFileObject *, char *))(*(_QWORD *)this + 280);
          return v14(this, a4);
        }
        return 1885563711;
      }
      return 4294967246;
    }
    if (a2 > 1885564531)
    {
      if (a2 > 1886085752)
      {
        if (a2 == 1886085753)
        {
          if (*a3 != 24)
          {
            v7 = 561211770;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)cf = 136315394;
              *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
              v32 = 1024;
              v33 = 1774;
              v26 = MEMORY[0x1E0C81028];
              v27 = "%25s:%-5d  inDataSize is wrong";
              goto LABEL_201;
            }
            return v7;
          }
          v14 = *(uint64_t (**)(AudioFileObject *, char *))(*(_QWORD *)this + 304);
          return v14(this, a4);
        }
        if (a2 != 1886086256)
          return v7;
        if (*a3 != 16)
          return 561211770;
        if (a4)
        {
          if ((*(_QWORD *)a4 & 0x8000000000000000) == 0)
          {
            v14 = *(uint64_t (**)(AudioFileObject *, char *))(*(_QWORD *)this + 296);
            return v14(this, a4);
          }
          return 1885563711;
        }
        return 4294967246;
      }
      if (a2 == 1885564532)
      {
        if (*a3 != 8)
        {
          v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)cf = 136315394;
            *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
            v32 = 1024;
            v33 = 1637;
            v26 = MEMORY[0x1E0C81028];
            v27 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_201;
          }
          return v7;
        }
        v28 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 240))(this);
        v7 = 0;
        v29 = v28 & ~(v28 >> 63);
        goto LABEL_143;
      }
      if (a2 != 1885957732)
        return v7;
    }
    else
    {
      if (a2 <= 1852403299)
      {
        if (a2 == 1835493731)
        {
          v10 = *(uint64_t (**)(AudioFileObject *, unsigned int *, char *))(*(_QWORD *)this + 336);
        }
        else
        {
          if (a2 != 1835756659)
            return v7;
          v10 = *(uint64_t (**)(AudioFileObject *, unsigned int *, char *))(*(_QWORD *)this + 360);
        }
        goto LABEL_118;
      }
      if (a2 != 1852403300)
      {
        if (a2 != 1869640813)
          return v7;
        if (*a3 != 4)
        {
          v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)cf = 136315394;
            *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
            v32 = 1024;
            v33 = 1625;
            v26 = MEMORY[0x1E0C81028];
            v27 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_201;
          }
          return v7;
        }
        v7 = 0;
        v13 = *((_DWORD *)this + 20);
        goto LABEL_204;
      }
    }
    if (a2 == 1885957732)
      v21 = 0xFFFFFFFFLL;
    else
      v21 = 1;
    if (*a3 != 16)
      return 561211770;
    if (a4)
    {
      if ((*(_QWORD *)a4 & 0x8000000000000000) == 0)
        return (*(uint64_t (**)(AudioFileObject *, uint64_t, char *))(*(_QWORD *)this + 288))(this, v21, a4);
      return 1885563711;
    }
    return 4294967246;
  }
  if (a2 > 1701082481)
  {
    if (a2 > 1718775914)
    {
      if (a2 > 1768842862)
      {
        if (a2 == 1768842863)
        {
          if (*a3 != 8)
          {
            v7 = 561211770;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)cf = 136315394;
              *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
              v32 = 1024;
              v33 = 1793;
              v26 = MEMORY[0x1E0C81028];
              v27 = "%25s:%-5d  inDataSize is wrong";
              goto LABEL_201;
            }
            return v7;
          }
          *(_QWORD *)cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          *(_WORD *)&cf[8] = 257;
          v7 = (*(uint64_t (**)(AudioFileObject *, _BYTE *))(*(_QWORD *)v6 + 432))(v6, cf);
          if (!(_DWORD)v7)
          {
            v17 = *(const void **)cf;
            if (*(_QWORD *)cf)
              goto LABEL_105;
            goto LABEL_196;
          }
        }
        else
        {
          if (a2 != 1769172837)
          {
            if (a2 == 1819243876)
            {
              if (*a3 == 8)
              {
                *(_QWORD *)cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                *(_WORD *)&cf[8] = 257;
                v7 = (*(uint64_t (**)(AudioFileObject *, _BYTE *))(*(_QWORD *)v6 + 472))(v6, cf);
                if ((_DWORD)v7
                  && (*(unsigned int (**)(AudioFileObject *, _BYTE *))(*(_QWORD *)v6 + 504))(v6, cf))
                {
                  goto LABEL_198;
                }
                v8 = *(const void **)cf;
                if (*(_QWORD *)cf)
                  goto LABEL_23;
                goto LABEL_194;
              }
              v7 = 561211770;
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)cf = 136315394;
                *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
                v32 = 1024;
                v33 = 1829;
                v26 = MEMORY[0x1E0C81028];
                v27 = "%25s:%-5d  inDataSize is wrong";
                goto LABEL_201;
              }
            }
            return v7;
          }
          if (*a3 != 8)
          {
            v7 = 561211770;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)cf = 136315394;
              *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
              v32 = 1024;
              v33 = 1849;
              v26 = MEMORY[0x1E0C81028];
              v27 = "%25s:%-5d  inDataSize is wrong";
              goto LABEL_201;
            }
            return v7;
          }
          *(_QWORD *)cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          *(_WORD *)&cf[8] = 257;
          v7 = (*(uint64_t (**)(AudioFileObject *, _BYTE *))(*(_QWORD *)v6 + 480))(v6, cf);
          if (!(_DWORD)v7)
          {
            v17 = *(const void **)cf;
            if (*(_QWORD *)cf)
            {
LABEL_105:
              CFRetain(v17);
              v9 = *(_QWORD *)cf;
LABEL_197:
              *(_QWORD *)a4 = v9;
              goto LABEL_198;
            }
LABEL_196:
            v9 = 0;
            goto LABEL_197;
          }
        }
        goto LABEL_198;
      }
      if (a2 != 1718775915)
      {
        if (a2 != 1735159669)
          return v7;
        if (*a3 != 8)
        {
          v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)cf = 136315394;
            *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
            v32 = 1024;
            v33 = 1864;
            v26 = MEMORY[0x1E0C81028];
            v27 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_201;
          }
          return v7;
        }
        *(_QWORD *)cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *(_WORD *)&cf[8] = 257;
        v7 = (*(uint64_t (**)(AudioFileObject *, _BYTE *))(*(_QWORD *)v6 + 536))(v6, cf);
        if (!(_DWORD)v7)
        {
          v17 = *(const void **)cf;
          if (*(_QWORD *)cf)
            goto LABEL_105;
          goto LABEL_196;
        }
LABEL_198:
        CACFDictionary::~CACFDictionary((CACFDictionary *)cf);
        return v7;
      }
      if (*a3 != 24)
      {
        v7 = 561211770;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)cf = 136315394;
          *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
          v32 = 1024;
          v33 = 1711;
          v26 = MEMORY[0x1E0C81028];
          v27 = "%25s:%-5d  inDataSize is wrong";
          goto LABEL_201;
        }
        return v7;
      }
      v19 = a4 + 16;
      v18 = *(_QWORD *)a4;
      v20 = *(uint64_t (**)(AudioFileObject *, uint64_t, char *, char *))(*(_QWORD *)this + 264);
      return v20(this, v18, a4 + 8, v19);
    }
    if (a2 <= 1717988723)
    {
      if (a2 == 1701082482)
      {
        if (*a3 == 8)
        {
          *(_QWORD *)cf = 0;
          v7 = (*(uint64_t (**)(AudioFileObject *, _BYTE *))(*(_QWORD *)this + 544))(this, cf);
          *(double *)a4 = fmax(*(double *)cf, 0.0);
        }
        else
        {
          v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)cf = 136315394;
            *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
            v32 = 1024;
            v33 = 1880;
            v26 = MEMORY[0x1E0C81028];
            v27 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_201;
          }
        }
        return v7;
      }
      if (a2 != 1701799487)
        return v7;
      if (*a3 == 4)
      {
        *(_QWORD *)cf = 0;
        v7 = (*(uint64_t (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), cf);
        if ((_DWORD)v7)
          return v7;
        v11 = *((_QWORD *)v6 + 9);
        v12 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)v6 + 224))(v6);
        v13 = *(_QWORD *)cf >= v12 + v11;
        goto LABEL_204;
      }
      return 561211770;
    }
    if (a2 != 1717988724)
    {
      if (a2 != 1718383476)
        return v7;
      v10 = *(uint64_t (**)(AudioFileObject *, unsigned int *, char *))(*(_QWORD *)this + 200);
LABEL_118:
      this = v6;
      v25 = a3;
      return v10(this, v25, a4);
    }
    if (*a3 != 4)
    {
      v7 = 561211770;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)cf = 136315394;
        *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
        v32 = 1024;
        v33 = 1603;
        v26 = MEMORY[0x1E0C81028];
        v27 = "%25s:%-5d  inDataSize is wrong";
        goto LABEL_201;
      }
      return v7;
    }
    v7 = 0;
    v13 = *((_DWORD *)this + 21);
LABEL_204:
    *(_DWORD *)a4 = v13;
    return v7;
  }
  if (a2 <= 1668112751)
  {
    if (a2 > 1651663219)
    {
      if (a2 == 1651663220)
      {
        if (*a3 != 4)
        {
          v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)cf = 136315394;
            *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
            v32 = 1024;
            v33 = 1666;
            v26 = MEMORY[0x1E0C81028];
            v27 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_201;
          }
          return v7;
        }
        v14 = *(uint64_t (**)(AudioFileObject *, char *))(*(_QWORD *)this + 320);
      }
      else
      {
        if (a2 != 1652125803)
          return v7;
        if (*a3 != 24)
        {
          v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)cf = 136315394;
            *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
            v32 = 1024;
            v33 = 1783;
            v26 = MEMORY[0x1E0C81028];
            v27 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_201;
          }
          return v7;
        }
        v14 = *(uint64_t (**)(AudioFileObject *, char *))(*(_QWORD *)this + 312);
      }
    }
    else
    {
      if (a2 != 1280922179)
      {
        if (a2 == 1650683508)
        {
          if (*a3 == 8)
          {
            v7 = 0;
            *(_QWORD *)a4 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 224))(this);
          }
          else
          {
            v7 = 561211770;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)cf = 136315394;
              *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
              v32 = 1024;
              v33 = 1631;
              v26 = MEMORY[0x1E0C81028];
              v27 = "%25s:%-5d  inDataSize is wrong";
              goto LABEL_201;
            }
          }
        }
        return v7;
      }
      if (*a3 < 8)
        return 561211770;
      *a3 = 8;
      v14 = *(uint64_t (**)(AudioFileObject *, char *))(*(_QWORD *)this + 608);
    }
    return v14(this, a4);
  }
  if (a2 > 1685022309)
  {
    if (a2 != 1685022310)
    {
      if (a2 != 1685289589)
        return v7;
      if (*a3 != 4)
      {
        v7 = 561211770;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)cf = 136315394;
          *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
          v32 = 1024;
          v33 = 1694;
          v26 = MEMORY[0x1E0C81028];
          v27 = "%25s:%-5d  inDataSize is wrong";
          goto LABEL_201;
        }
        return v7;
      }
      v7 = 0;
      v13 = *((_DWORD *)this + 33);
      goto LABEL_204;
    }
    if (*a3 != 8)
    {
      v7 = 561211770;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)cf = 136315394;
        *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
        v32 = 1024;
        v33 = 1620;
        v26 = MEMORY[0x1E0C81028];
        v27 = "%25s:%-5d  inDataSize is wrong";
        goto LABEL_201;
      }
      return v7;
    }
    v7 = 0;
    v29 = *((_QWORD *)this + 9);
LABEL_143:
    *(_QWORD *)a4 = v29;
    return v7;
  }
  if (a2 == 1668112752)
  {
    v7 = (*(uint64_t (**)(AudioFileObject *, char *, uint64_t *))(*(_QWORD *)this + 400))(this, (char *)&v30 + 4, &v30);
    if ((_DWORD)v7)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v7;
      *(_DWORD *)cf = 136315394;
      *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
      v32 = 1024;
      v33 = 1686;
      v26 = MEMORY[0x1E0C81028];
      v27 = "%25s:%-5d  GetChannelLayoutSize failed";
    }
    else
    {
      if (*a3 == HIDWORD(v30))
        return (*(uint64_t (**)(AudioFileObject *, unsigned int *, char *))(*(_QWORD *)v6 + 408))(v6, a3, a4);
      v7 = 561211770;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v7;
      *(_DWORD *)cf = 136315394;
      *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
      v32 = 1024;
      v33 = 1687;
      v26 = MEMORY[0x1E0C81028];
      v27 = "%25s:%-5d  inDataSize is wrong";
    }
LABEL_201:
    _os_log_impl(&dword_18EE07000, v26, OS_LOG_TYPE_ERROR, v27, cf, 0x12u);
    return v7;
  }
  if (a2 == 1684434292)
  {
    if (*a3 == 40)
    {
      v7 = 0;
      v15 = *(_OWORD *)((char *)this + 24);
      v16 = *(_OWORD *)((char *)this + 40);
      *((_QWORD *)a4 + 4) = *((_QWORD *)this + 7);
      *(_OWORD *)a4 = v15;
      *((_OWORD *)a4 + 1) = v16;
    }
    else
    {
      v7 = 561211770;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)cf = 136315394;
        *(_QWORD *)&cf[4] = "AudioFileObject.cpp";
        v32 = 1024;
        v33 = 1614;
        v26 = MEMORY[0x1E0C81028];
        v27 = "%25s:%-5d  inDataSize is wrong";
        goto LABEL_201;
      }
    }
  }
  return v7;
}

void sub_18EE47FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t AudioFileObjectHandle::AFAPI_GetProperty(AudioFileObjectHandle *this, uint64_t a2, unsigned int *a3, void *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *, void *))(**((_QWORD **)this + 3) + 160))(*((_QWORD *)this + 3), a2, a3, a4);
}

uint64_t AudioFileObject::GetPropertyInfo(AudioFileObject *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v8;
  unsigned __int16 v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v15 = 0;
  result = 1886681407;
  if (a2 > 1835493730)
  {
    if (a2 <= 1886086769)
    {
      if (a2 > 1885564531)
      {
        if (a2 <= 1886085752)
        {
          if (a2 == 1885564532)
            goto LABEL_77;
          v11 = 1885957732;
          goto LABEL_72;
        }
        if (a2 == 1886085753)
          goto LABEL_75;
        v9 = 25712;
LABEL_71:
        v11 = v9 | 0x706B0000;
LABEL_72:
        if (a2 != v11)
          goto LABEL_92;
        goto LABEL_73;
      }
      if (a2 <= 1852403299)
      {
        if (a2 == 1835493731)
        {
          result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(_QWORD *)this + 328))(this, a3, &v15);
        }
        else if (a2 == 1835756659)
        {
          result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(_QWORD *)this + 352))(this, a3, &v15);
        }
        goto LABEL_92;
      }
      if (a2 == 1852403300)
      {
LABEL_73:
        if (!a3)
          goto LABEL_90;
        v13 = 16;
        goto LABEL_89;
      }
      if (a2 != 1869640813)
        goto LABEL_92;
    }
    else
    {
      if (a2 > 1886616164)
      {
        if (a2 <= 1920098671)
        {
          if (a2 != 1886616165)
          {
            if (a2 == 1919380595)
              result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(_QWORD *)this + 376))(this, a3, &v15);
            goto LABEL_92;
          }
        }
        else if (a2 != 1920098672)
        {
          if (a2 != 1935832164)
          {
            if (a2 == 1935893603)
              result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(_QWORD *)this + 448))(this, a3, &v15);
            goto LABEL_92;
          }
LABEL_29:
          if (!a3)
            goto LABEL_84;
          v8 = 4;
          goto LABEL_83;
        }
        goto LABEL_61;
      }
      if (a2 <= 1886090593)
      {
        if (a2 == 1886086770)
          goto LABEL_75;
        v9 = 29292;
        goto LABEL_71;
      }
      if (a2 != 1886090594)
      {
        if (a2 != 1886549346)
          goto LABEL_92;
        if (a3)
        {
          result = 0;
          v12 = 24;
LABEL_104:
          *a3 = v12;
          goto LABEL_92;
        }
LABEL_105:
        result = 0;
        goto LABEL_92;
      }
    }
LABEL_61:
    if (!a3)
      goto LABEL_90;
    v13 = 4;
LABEL_89:
    *a3 = v13;
    goto LABEL_90;
  }
  if (a2 <= 1701082481)
  {
    if (a2 <= 1668112751)
    {
      if (a2 <= 1651663219)
      {
        if (a2 == 1280922179)
        {
          if (!a3)
            goto LABEL_84;
          v8 = 8;
LABEL_83:
          *a3 = v8;
LABEL_84:
          v14 = 0;
          result = 0;
          if (!a4)
            return result;
          goto LABEL_94;
        }
        if (a2 != 1650683508)
          goto LABEL_92;
LABEL_77:
        v15 = 1;
        if (!a3)
          goto LABEL_105;
        goto LABEL_103;
      }
      if (a2 != 1651663220)
      {
        if (a2 != 1652125803)
          goto LABEL_92;
        goto LABEL_75;
      }
      if (a3)
      {
        result = 0;
        v12 = 4;
        goto LABEL_104;
      }
      goto LABEL_105;
    }
    if (a2 > 1685022309)
    {
      if (a2 == 1685022310)
      {
        if (a3)
        {
LABEL_103:
          result = 0;
          v12 = 8;
          goto LABEL_104;
        }
        goto LABEL_105;
      }
      if (a2 != 1685289589)
        goto LABEL_92;
      if (a3)
      {
        v10 = 4;
        goto LABEL_67;
      }
    }
    else
    {
      if (a2 == 1668112752)
      {
        result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(_QWORD *)this + 400))(this, a3, &v15);
        if (a3)
        {
          if (*a3 >= 0xC)
            result = result;
          else
            result = 561211770;
        }
        goto LABEL_92;
      }
      if (a2 != 1684434292)
        goto LABEL_92;
      if (a3)
      {
        v10 = 40;
LABEL_67:
        *a3 = v10;
      }
    }
    result = 0;
    v15 = 1;
    goto LABEL_92;
  }
  if (a2 <= 1718775914)
  {
    if (a2 <= 1717988723)
    {
      if (a2 == 1701082482)
      {
        if (a3)
        {
          v13 = 8;
          goto LABEL_89;
        }
        goto LABEL_90;
      }
      if (a2 != 1701799487)
        goto LABEL_92;
      goto LABEL_29;
    }
    if (a2 != 1717988724)
    {
      if (a2 == 1718383476)
        result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(_QWORD *)this + 192))(this, a3, &v15);
      goto LABEL_92;
    }
    goto LABEL_61;
  }
  if (a2 <= 1768842862)
  {
    if (a2 != 1718775915)
    {
      if (a2 != 1735159669)
        goto LABEL_92;
      result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(_QWORD *)this + 520))(this, a3, &v15);
LABEL_91:
      v15 = 0;
      goto LABEL_92;
    }
LABEL_75:
    if (a3)
    {
      v13 = 24;
      goto LABEL_89;
    }
LABEL_90:
    result = 0;
    goto LABEL_91;
  }
  if (a2 != 1768842863)
  {
    if (a2 != 1769172837)
    {
      if (a2 == 1819243876)
        result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(_QWORD *)this + 520))(this, a3, &v15);
      goto LABEL_92;
    }
    result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(_QWORD *)this + 528))(this, a3, &v15);
    goto LABEL_91;
  }
  result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(_QWORD *)this + 424))(this, a3, &v15);
LABEL_92:
  if (!a4)
    return result;
  v14 = v15;
LABEL_94:
  *a4 = v14;
  return result;
}

uint64_t AudioFileObjectHandle::AFAPI_GetPropertyInfo(AudioFileObjectHandle *this, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *, unsigned int *))(**((_QWORD **)this + 3) + 152))(*((_QWORD *)this + 3), a2, a3, a4);
}

uint64_t ChunkyAudioFile::GetProperty(ChunkyAudioFile *this, int a2, unsigned int *a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD **v21;
  _QWORD *v22[2];

  if (a2 == 1751217000)
  {
    if (*a3 == 20)
    {
      LODWORD(v21) = 20;
      return (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, _QWORD, _QWORD ***, char *))(*(_QWORD *)this + 576))(this, 1751217000, 0, &v21, a4);
    }
    else
    {
      return 561211770;
    }
  }
  else if (a2 == 1667787108)
  {
    v22[0] = 0;
    v22[1] = 0;
    v21 = v22;
    v7 = *((_QWORD *)this + 18);
    if (*((_QWORD *)this + 19) != v7)
    {
      v8 = 0;
      v9 = 1;
      do
      {
        v10 = *(_DWORD *)(v7 + 24 * v8);
        if (v10 != (*(unsigned int (**)(ChunkyAudioFile *))(*(_QWORD *)this + 728))(this))
        {
          v11 = *(_DWORD *)(*((_QWORD *)this + 18) + 24 * v8);
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v21, v11, v11);
        }
        v8 = v9;
        v7 = *((_QWORD *)this + 18);
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 19) - v7) >> 3) > v9++);
      v13 = *a3;
      if (v13 >= 4)
      {
        v14 = (uint64_t)v21;
        if (v21 != v22)
        {
          v15 = 0;
          v16 = v13 >> 2;
          do
          {
            *(_DWORD *)&a4[4 * v15] = *(_DWORD *)(v14 + 28);
            v17 = *(_QWORD **)(v14 + 8);
            v18 = v14;
            if (v17)
            {
              do
              {
                v14 = (uint64_t)v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v14 = *(_QWORD *)(v18 + 16);
                v19 = *(_QWORD *)v14 == v18;
                v18 = v14;
              }
              while (!v19);
            }
            ++v15;
          }
          while (v15 < v16 && (_QWORD **)v14 != v22);
        }
      }
    }
    return 0;
  }
  else
  {
    return AudioFileObject::GetProperty(this, a2, a3, a4);
  }
}

void sub_18EE486DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  _Unwind_Resume(a1);
}

uint64_t AIFFAudioFile::GetProperty(AIFFAudioFile *this, int a2, unsigned int *a3, char *a4)
{
  uint64_t result;
  uint64_t v6;

  result = 561211770;
  if (a3 && a4)
  {
    if (a2 == 1768174447)
    {
      result = 1886681407;
      v6 = *((_QWORD *)this + 59);
      if (v6 && (*((_BYTE *)this + 100) & 2) == 0)
      {
        result = 561211770;
        if (*a3 >= 8)
        {
          result = 0;
          *(_QWORD *)a4 = v6;
          *a3 = 8;
        }
      }
    }
    else
    {
      return ChunkyAudioFile::GetProperty(this, a2, a3, a4);
    }
  }
  return result;
}

uint64_t CAFAudioFile::GetProperty(CAFAudioFile *this, int a2, unsigned int *a3, char *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD *v25[2];

  if (a2 > 1886283374)
  {
    if (a2 != 1886283375)
    {
      if (a2 == 1920168566)
      {
        if ((*((_BYTE *)this + 100) & 2) == 0)
          return 1869627199;
        if (*a3 == 8)
        {
          result = 0;
          *(_QWORD *)a4 = *((_QWORD *)this + 25);
          return result;
        }
        return 561211770;
      }
      return AudioFileObject::GetProperty(this, a2, a3, a4);
    }
    if (*a3 < 0x10)
      return 561211770;
    v19 = *((_QWORD *)this + 22);
    if (v19 < 0 && (v20 = *((unsigned int *)this + 11), (_DWORD)v20))
    {
      v21 = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 240))(this);
      v22 = *((int *)this + 46);
      v23 = *((int *)this + 47);
      v19 = v21 * v20 - (v22 + v23);
    }
    else
    {
      LODWORD(v22) = *((_DWORD *)this + 46);
      LODWORD(v23) = *((_DWORD *)this + 47);
    }
    result = 0;
    *(_QWORD *)a4 = v19;
    *((_DWORD *)a4 + 2) = v22;
    *((_DWORD *)a4 + 3) = v23;
    *a3 = 16;
  }
  else
  {
    if (a2 != 1667787108)
    {
      if (a2 == 1751217000)
      {
        if (*a3 == 20)
        {
          LODWORD(v24) = 20;
          return (*(uint64_t (**)(CAFAudioFile *, uint64_t, _QWORD, _QWORD ***, char *))(*(_QWORD *)this + 576))(this, 1751217000, 0, &v24, a4);
        }
        return 561211770;
      }
      return AudioFileObject::GetProperty(this, a2, a3, a4);
    }
    v25[0] = 0;
    v25[1] = 0;
    v24 = v25;
    v8 = *((_QWORD *)this + 18);
    if (*((_QWORD *)this + 19) != v8)
    {
      v9 = 0;
      v10 = 1;
      do
      {
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v24, *(_DWORD *)(v8 + 24 * v9), *(_DWORD *)(v8 + 24 * v9));
        v9 = v10;
        v8 = *((_QWORD *)this + 18);
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 19) - v8) >> 3) > v10++);
      v12 = *a3;
      if (v12 >= 4)
      {
        v13 = (uint64_t)v24;
        if (v24 != v25)
        {
          v14 = 0;
          v15 = v12 >> 2;
          do
          {
            *(_DWORD *)&a4[4 * v14] = *(_DWORD *)(v13 + 28);
            v16 = *(_QWORD **)(v13 + 8);
            v17 = v13;
            if (v16)
            {
              do
              {
                v13 = (uint64_t)v16;
                v16 = (_QWORD *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v13 = *(_QWORD *)(v17 + 16);
                v18 = *(_QWORD *)v13 == v17;
                v17 = v13;
              }
              while (!v18);
            }
            ++v14;
          }
          while (v14 < v15 && (_QWORD **)v13 != v25);
        }
      }
    }
    return 0;
  }
  return result;
}

void sub_18EE489C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  _Unwind_Resume(a1);
}

uint64_t AudioFileObject::GetSoundCheckDictionarySize(AudioFileObject *this, unsigned int *a2, unsigned int *a3)
{
  return 1886681407;
}

void CACFDictionary::~CACFDictionary(CACFDictionary *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

uint64_t ChunkyAudioFile::GetPropertyInfo(ChunkyAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  _QWORD *v12;
  unsigned int v13;
  int v14;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  if (a2 == 1920168566)
  {
    if (a3)
      *a3 = 8;
    if (!a4)
      return 0;
    v14 = (*((unsigned __int8 *)this + 100) >> 1) & 1;
LABEL_21:
    *a4 = v14;
    return 0;
  }
  if (a2 == 1751217000)
  {
    if (a3)
      *a3 = 20;
    if (!a4)
      return 0;
    v14 = 1;
    goto LABEL_21;
  }
  if (a2 != 1667787108)
    return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
  if (a4)
    *a4 = 0;
  if (a3)
  {
    v17 = 0;
    v18 = 0;
    v16 = &v17;
    v6 = *((_QWORD *)this + 18);
    if (*((_QWORD *)this + 19) == v6)
    {
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = *(_DWORD *)(v6 + 24 * v7);
        if (v9 != (*(unsigned int (**)(ChunkyAudioFile *))(*(_QWORD *)this + 728))(this))
        {
          v10 = *(_DWORD *)(*((_QWORD *)this + 18) + 24 * v7);
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v16, v10, v10);
        }
        v7 = v8;
        v6 = *((_QWORD *)this + 18);
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 19) - v6) >> 3) > v8++);
      v12 = v17;
      v13 = 4 * v18;
    }
    *a3 = v13;
  }
  return 0;
}

void sub_18EE48BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  _Unwind_Resume(a1);
}

uint64_t AIFFAudioFile::GetPropertyInfo(AIFFAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 != 1768174447)
    return ChunkyAudioFile::GetPropertyInfo(this, a2, a3, a4);
  if (a3)
    *a3 = 8;
  if (a4)
    *a4 = 0;
  return 0;
}

uint64_t AACAudioFile::GetMagicCookieDataSize(AACAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a3)
    *a3 = *((_BYTE *)this + 100) & 2;
  if (!a2)
    return 0;
  v3 = *((_QWORD *)this + 18);
  v4 = *((_QWORD *)this + 19);
  if (v3 == v4)
    return 2003334207;
  result = 0;
  *a2 = v4 - v3;
  return result;
}

uint64_t AACAudioFile::GetMagicCookieData(AACAudioFile *this, unsigned int *a2, void *__dst)
{
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;

  result = 2003334207;
  if (__dst)
  {
    if (a2)
    {
      v6 = (_BYTE *)*((_QWORD *)this + 18);
      v7 = (_BYTE *)*((_QWORD *)this + 19);
      if (v6 != v7)
      {
        v8 = v7 - v6;
        result = 561211770;
        if (v8 <= *a2)
        {
          memmove(__dst, v6, v8);
          result = 0;
          *a2 = *((_DWORD *)this + 38) - *((_DWORD *)this + 36);
        }
      }
    }
    else
    {
      return 561211770;
    }
  }
  return result;
}

uint64_t AACAudioFile::GetFormatListInfo(AACAudioFile *this, UInt32 *outPropertyDataSize, unsigned int *a3)
{
  int v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  int v11;

  v5 = *((_DWORD *)this + 8);
  memset(v8, 0, sizeof(v8));
  DWORD2(v8[0]) = v5;
  v6 = *((_QWORD *)this + 18);
  v9 = 0;
  v10 = v6;
  v11 = *((_DWORD *)this + 38) - v6;
  if (AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, v8, outPropertyDataSize))
  {
    *outPropertyDataSize = 48;
    *a3 = 0;
  }
  return 0;
}

uint64_t AACAudioFile::GetFormatList(AACAudioFile *this, UInt32 *ioPropertyDataSize, AudioFormatListItem *outPropertyData)
{
  Float64 v6;
  AudioFormatID v7;
  uint64_t v8;
  _BYTE v10[28];
  _OWORD inSpecifier[2];
  uint64_t v12;
  uint64_t v13;
  int v14;

  v6 = *((double *)this + 3);
  v7 = *((_DWORD *)this + 8);
  *(_OWORD *)v10 = *(_OWORD *)((char *)this + 36);
  *(_OWORD *)&v10[12] = *((_OWORD *)this + 3);
  memset(inSpecifier, 0, sizeof(inSpecifier));
  DWORD2(inSpecifier[0]) = v7;
  v8 = *((_QWORD *)this + 18);
  v12 = 0;
  v13 = v8;
  v14 = *((_DWORD *)this + 38) - v8;
  if (AudioFormatGetProperty(0x666C7374u, 0x38u, inSpecifier, ioPropertyDataSize, outPropertyData))
  {
    outPropertyData->mASBD.mSampleRate = v6;
    outPropertyData->mASBD.mFormatID = v7;
    *(_OWORD *)&outPropertyData->mASBD.mFormatFlags = *(_OWORD *)v10;
    *(_OWORD *)&outPropertyData->mASBD.mBytesPerFrame = *(_OWORD *)&v10[12];
    outPropertyData->mChannelLayoutTag = *((_DWORD *)this + 35);
    *ioPropertyDataSize = 48;
  }
  return 0;
}

uint64_t AudioFileObjectHandle::AFAPI_ReadPackets(AudioFileObjectHandle *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *, AudioStreamPacketDescription *, uint64_t, unsigned int *, void *))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3), a2, a3, a4, a5, a6, a7);
}

uint64_t AudioFileObject::ReadPackets(AudioFileObject *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t v10;
  uint64_t result;
  int v12;
  unsigned int v13;
  int v14;
  NSObject *v15;
  const char *v16;
  unsigned int v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v17 = 136315394;
      v18 = "AudioFileObject.cpp";
      v19 = 1024;
      v20 = 867;
      v15 = MEMORY[0x1E0C81028];
      v16 = "%25s:%-5d  NULL buffer";
      goto LABEL_17;
    }
    return 4294967246;
  }
  if (!a6 || !*a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v17 = 136315394;
      v18 = "AudioFileObject.cpp";
      v19 = 1024;
      v20 = 869;
      v15 = MEMORY[0x1E0C81028];
      v16 = "%25s:%-5d  invalid num packets parameter";
LABEL_17:
      _os_log_impl(&dword_18EE07000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v17, 0x12u);
      return 4294967246;
    }
    return 4294967246;
  }
  v10 = *((unsigned int *)this + 10);
  v17 = v10 * *a6;
  result = (*(uint64_t (**)(AudioFileObject *, uint64_t, uint64_t, unsigned int *, void *))(*(_QWORD *)this
                                                                                                  + 72))(this, a2, v10 * a5, &v17, a7);
  if (!(_DWORD)result || (_DWORD)result == -39)
  {
    v12 = v17;
    v13 = *((_DWORD *)this + 10);
    if (v17 != v13 * *a6)
    {
      v14 = v17 / v13;
      *a6 = v17 / v13;
      v12 = *((_DWORD *)this + 10) * v14;
    }
    if (a3)
      *a3 = v12;
    if ((_DWORD)result == -39)
      return 0;
    else
      return result;
  }
  return result;
}

uint64_t AudioFileObject::ReadBytes(AudioFileObject *this, int a2, uint64_t a3, unsigned int *a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  BOOL v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a4 && a5)
  {
    v10 = *((_QWORD *)this + 9);
    if ((*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 224))(this) <= a3)
    {
      *a4 = 0;
      return 4294967257;
    }
    else
    {
      v11 = v10 + a3;
      v12 = v11 + *a4;
      v13 = *((_QWORD *)this + 9) + (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 224))(this);
      if (v12 <= v13)
      {
        v14 = *a4;
      }
      else
      {
        v14 = (*(unsigned int (**)(AudioFileObject *))(*(_QWORD *)this + 224))(this)
            - v11
            + *((_DWORD *)this + 18);
        *a4 = v14;
      }
      LODWORD(result) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 32 * (a2 == 0), v11, v14, a5, a4);
      if ((_DWORD)result)
        v16 = 1;
      else
        v16 = v12 <= v13;
      if (v16)
        return result;
      else
        return 4294967257;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v17 = 136315394;
      v18 = "AudioFileObject.cpp";
      v19 = 1024;
      v20 = 773;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid num bytes parameter", (uint8_t *)&v17, 0x12u);
    }
    return 4294967246;
  }
}

uint64_t AudioFileObject::GetNumBytes(AudioFileObject *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t CAFAudioFile::GetMagicCookieDataSize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v10;

  if (a3)
    *a3 = 1;
  v3 = *((_QWORD *)this + 18);
  v4 = *((_QWORD *)this + 19);
  v5 = v4 - v3;
  if (v4 == v3)
  {
LABEL_7:
    if (a2)
    {
      v10 = 0;
LABEL_11:
      *a2 = v10;
    }
  }
  else
  {
    v6 = 0;
    v7 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    v8 = 1;
    while (*(_DWORD *)(v3 + 24 * v6) != 1802857321)
    {
      v6 = v8;
      if (v7 <= v8++)
        goto LABEL_7;
    }
    if (a2)
    {
      v10 = *(_DWORD *)(v3 + 24 * v6 + 8) - 12;
      goto LABEL_11;
    }
  }
  return 0;
}

uint64_t CAFAudioFile::GetPropertyInfo(CAFAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v12;
  unsigned int v13;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  if (a2 <= 1886283374)
  {
    if (a2 == 1667787108)
    {
      if (a4)
        *a4 = 0;
      if (a3)
      {
        v16 = 0;
        v17 = 0;
        v15 = &v16;
        v8 = *((_QWORD *)this + 18);
        if (*((_QWORD *)this + 19) == v8)
        {
          v12 = 0;
          v13 = 0;
        }
        else
        {
          v9 = 0;
          v10 = 1;
          do
          {
            std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v15, *(_DWORD *)(v8 + 24 * v9), *(_DWORD *)(v8 + 24 * v9));
            v9 = v10;
            v8 = *((_QWORD *)this + 18);
          }
          while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 19) - v8) >> 3) > v10++);
          v12 = v16;
          v13 = 4 * v17;
        }
        *a3 = v13;
      }
      return 0;
    }
    if (a2 == 1751217000)
    {
      if (!a3)
        goto LABEL_22;
      v6 = 20;
      goto LABEL_21;
    }
    return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
  }
  if (a2 != 1886283375)
  {
    if (a2 == 1920168566)
    {
      if (a3)
        *a3 = 8;
      if (!a4)
        return 0;
      v7 = (*((unsigned __int8 *)this + 100) >> 1) & 1;
      goto LABEL_24;
    }
    return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
  }
  if (!a3)
    goto LABEL_22;
  v6 = 16;
LABEL_21:
  *a3 = v6;
LABEL_22:
  if (a4)
  {
    v7 = 1;
LABEL_24:
    *a4 = v7;
  }
  return 0;
}

void sub_18EE4933C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::ReadPackets(CAFAudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  UInt32 *p_mDataByteSize;
  uint64_t v28;
  UInt32 v29;
  unsigned int v30;
  _BYTE buf[12];
  _DWORD v32[3];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 10))
    v13 = *((_DWORD *)this + 11) == 0;
  else
    v13 = 1;
  if (!v13)
    return AudioFileObject::ReadPackets(this, a2, a3, a4, a5, a6, a7);
  if (!a6 || (v14 = *a6, !(_DWORD)v14))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
      LOWORD(v32[0]) = 1024;
      *(_DWORD *)((char *)v32 + 2) = 3100;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid num packets parameter", buf, 0x12u);
    }
    return 4294967246;
  }
  v15 = (uint64_t *)*((_QWORD *)this + 15);
  if (!v15)
    return 1685348671;
  v16 = v15[3];
  if (v16 <= a5)
  {
    if (a3)
      *a3 = 0;
    *a6 = 0;
    return 4294967257;
  }
  if (v14 + a5 > v16)
    *a6 = v16 - a5;
  if (a3)
    *a3 = 0;
  CompressedPacketTable::operator[]((uint64_t)buf, v15, a5);
  v18 = *(_QWORD *)buf;
  CompressedPacketTable::operator[]((uint64_t)buf, v15, a5 + *a6 - 1);
  v19 = *(_QWORD *)buf - v18 + v32[0];
  if (v19 > 0xFFFFFFFFLL)
    return 4294967246;
  v30 = *(_DWORD *)buf - v18 + v32[0];
  if (a7)
  {
    v20 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, unsigned int *, void *))(*(_QWORD *)this + 72))(this, a2, v18, &v30, a7);
    v21 = v20;
    if ((_DWORD)v20 != -39 && (_DWORD)v20)
    {
      if (a3)
        *a3 = 0;
      *a6 = 0;
      return v21;
    }
    LODWORD(v19) = v30;
    if (a3)
      *a3 = v30;
  }
  else
  {
    v21 = 0;
  }
  if (*a6)
  {
    v23 = 0;
    v24 = 0;
    v25 = v18 + v19;
    if (a7)
      v26 = 0;
    else
      v26 = v18;
    p_mDataByteSize = &a4->mDataByteSize;
    do
    {
      CompressedPacketTable::operator[]((uint64_t)buf, v15, a5 + v23);
      v28 = v32[0];
      if (*(_QWORD *)buf + v32[0] > v25)
        break;
      if (a4)
      {
        v29 = *(_DWORD *)&buf[8];
        *(_QWORD *)(p_mDataByteSize - 3) = v24 + v26;
        *(p_mDataByteSize - 1) = v29;
        *p_mDataByteSize = v28;
      }
      v24 += v28;
      ++v23;
      p_mDataByteSize += 4;
    }
    while (v23 < *a6);
  }
  else
  {
    LODWORD(v23) = 0;
  }
  *a6 = v23;
  return v21;
}

uint64_t AIFFAudioFile::GetChannelLayoutSize(AIFFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _DWORD *v10;

  if (a3)
    *a3 = 1;
  if (*((_DWORD *)this + 8) == 1667326771)
  {
    result = 0;
    v4 = 32;
  }
  else
  {
    v5 = *((_QWORD *)this + 18);
    v6 = *((_QWORD *)this + 19) - v5;
    if (v6)
    {
      v7 = 0;
      v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
      v9 = 1;
      while (1)
      {
        v10 = (_DWORD *)(v5 + 24 * v7);
        if (*v10 == 1128808782)
          break;
        v7 = v9;
        if (v8 <= v9++)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v10 = 0;
    }
    if (!a2)
      return 0;
    if (v10)
    {
      result = 0;
      v4 = v10[2] - 8;
    }
    else
    {
      v4 = 0;
      result = 1667787583;
    }
  }
  *a2 = v4;
  return result;
}

uint64_t AudioFileObject::GetFormatListInfo(AudioFileObject *this, unsigned int *a2, unsigned int *a3)
{
  *a2 = 48;
  *a3 = 0;
  return 0;
}

uint64_t AIFFAudioFile::GetMagicCookieDataSize(AIFFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v12;
  __int16 v14;
  _WORD *v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  _WORD v22[5];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 8) == 1667326771)
  {
    if (a3)
      *a3 = 0;
    if (a2)
    {
      *a2 = 0;
      v21 = 0;
      v4 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _WORD *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                + 48))(*((_QWORD *)this + 13), 0, *((_QWORD *)this + 9) + 8, 10, v22, &v21);
      if ((_DWORD)v4)
        return v4;
      v14 = 0;
      v15 = v22;
      v16 = v21;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0xF6400000000;
      if (v21 < 0xA)
        goto LABEL_23;
      if (v22[0] != 2935)
      {
        if (v22[0] != 30475)
        {
LABEL_23:
          if (AC3PacketParser::IsValid((AC3PacketParser *)&v14))
            *a2 = 11;
          if (v19)
            free(v19);
          return v4;
        }
        v17 = 1;
      }
      LOBYTE(v14) = 1;
      goto LABEL_23;
    }
    return 0;
  }
  if (a3)
    *a3 = 1;
  if (!a2)
    return 0;
  v5 = *((_QWORD *)this + 18);
  v6 = *((_QWORD *)this + 19);
  v7 = v6 - v5;
  if (v6 == v5)
  {
LABEL_17:
    v12 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
    v10 = 1;
    while (*(_DWORD *)(v5 + 24 * v8) != 2002876005)
    {
      v8 = v10;
      if (v9 <= v10++)
        goto LABEL_17;
    }
    v12 = *(_DWORD *)(v5 + 24 * v8 + 8) - 8;
  }
  v4 = 0;
  *a2 = v12;
  return v4;
}

uint64_t AudioFileGetLoudnessInfoFromSoundCheckDictionary(AudioFileObject *a1, CACFDictionary *a2)
{
  uint64_t v4;
  CFDictionaryRef Mutable;
  __int16 v7;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = 257;
  v4 = (*(uint64_t (**)(AudioFileObject *, CFDictionaryRef *))(*(_QWORD *)a1 + 456))(a1, &Mutable);
  if (!(_DWORD)v4)
    AudioFileGetLoudnessInfoFromSoundCheckDictionary(&Mutable, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v4;
}

void sub_18EE49930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

void CACFFormatter::CACFFormatter(CACFFormatter *this, const void *a2)
{
  const __CFString *v3;
  char *v4;
  CFIndex usedBufLen;
  CFRange v6;

  *(_QWORD *)this = 0;
  v3 = CFStringCreateWithFormat(0, 0, CFSTR("%@"), a2);
  usedBufLen = 0;
  v6.length = CFStringGetLength(v3);
  v6.location = 0;
  CFStringGetBytes(v3, v6, 0x8000100u, 0x3Fu, 0, 0, 0, &usedBufLen);
  v4 = (char *)malloc_type_malloc(usedBufLen + 1, 0x409FA1A0uLL);
  *(_QWORD *)this = v4;
  CFStringGetCString(v3, v4, usedBufLen + 1, 0x8000100u);
  CFRelease(v3);
}

void sub_18EE49A00(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFileObject::SetDataFormat(AudioFileObject *this, AudioStreamBasicDescription *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  UInt32 ioPropertyDataSize;

  v4 = 1718449215;
  if (AudioFileObject::IsDataFormatValid((AudioFileObject *)a2, a2)
    && (*(unsigned int (**)(AudioFileObject *, AudioStreamBasicDescription *))(*(_QWORD *)this + 616))(this, a2))
  {
    v5 = *((_DWORD *)this + 10);
    v6 = *(_QWORD *)&a2->mBitsPerChannel;
    v7 = *(_OWORD *)&a2->mSampleRate;
    *(_OWORD *)((char *)this + 40) = *(_OWORD *)&a2->mBytesPerPacket;
    *(_OWORD *)((char *)this + 24) = v7;
    *((_QWORD *)this + 7) = v6;
    v8 = *((_DWORD *)this + 10);
    if (v8)
    {
      if (v8 != v5)
      {
        v9 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 224))(this);
        (*(void (**)(AudioFileObject *, uint64_t))(*(_QWORD *)this + 248))(this, v9 / *((unsigned int *)this + 10));
        (*(void (**)(AudioFileObject *, _QWORD))(*(_QWORD *)this + 648))(this, *((unsigned int *)this + 10));
        if (!*((_BYTE *)this + 137) && (*((_BYTE *)this + 100) & 2) != 0)
        {
          if (*((_DWORD *)this + 33))
            *((_BYTE *)this + 136) = 1;
          else
            (*(void (**)(AudioFileObject *))(*(_QWORD *)this + 216))(this);
        }
      }
    }
    ioPropertyDataSize = 4;
    AudioFormatGetProperty(0x66646570u, 0x28u, a2, &ioPropertyDataSize, (char *)this + 64);
    v4 = 0;
    *((_BYTE *)this + 137) = 0;
  }
  return v4;
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioChannelLayout *a2)
{
  FILE *v4;
  FILE *v5;
  const char *v6;
  unint64_t v7;
  AudioChannelDescription *mChannelDescriptions;
  FILE *v9;
  FILE *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  UInt32 ioPropertyDataSize;
  CFStringRef outPropertyData;
  char buffer[96];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v4 = funopen(&v10, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  v5 = v4;
  v10 = v4;
  if (a2)
  {
    fprintf(v4, "tag=0x%x", a2->mChannelLayoutTag);
    if (a2->mChannelLayoutTag)
    {
      if (a2->mChannelLayoutTag == 0x10000)
        fprintf(v5, ", channel bitmap=0x%x\n", a2->mChannelBitmap);
    }
    else
    {
      v6 = "s";
      if (a2->mNumberChannelDescriptions == 1)
        v6 = "";
      fprintf(v5, ", %d channel description%s [", a2->mNumberChannelDescriptions, v6);
      if (a2->mNumberChannelDescriptions)
      {
        v7 = 0;
        mChannelDescriptions = a2->mChannelDescriptions;
        do
        {
          if (v7)
            fwrite(", ", 2uLL, 1uLL, v5);
          outPropertyData = 0;
          ioPropertyDataSize = 8;
          if (AudioFormatGetProperty(0x63736E6Du, 0x14u, mChannelDescriptions, &ioPropertyDataSize, &outPropertyData))
          {
            fprintf(v5, "%d", mChannelDescriptions->mChannelLabel);
          }
          else
          {
            CFStringGetCString(outPropertyData, buffer, 96, 0x8000100u);
            fputs(buffer, v5);
            CFRelease(outPropertyData);
          }
          ++v7;
          ++mChannelDescriptions;
        }
        while (v7 < a2->mNumberChannelDescriptions);
      }
      fputc(93, v5);
    }
  }
  else
  {
    fwrite("NULL", 4uLL, 1uLL, v4);
  }
  v9 = CAMemoryStream::cstr(&v10);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  *(_QWORD *)this = v9;
  fclose(v10);
  free(v11);
}

void sub_18EE49D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, FILE *a12, void *a13)
{
  fclose(a12);
  free(a13);
  _Unwind_Resume(a1);
}

OSStatus AudioFormatGetProperty(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  int8x8_t v5;
  unsigned int *v8;
  uint64_t v9;
  OSStatus DecoderSpecificBitStreamFromESDS;
  OSStatus v12;
  Float64 v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  OSStatus v18;
  uint64_t v20;
  uint64_t v21;
  AudioCodecPropertyID v22;
  int v23;
  int v24;
  int v25;
  UInt32 v26;
  AudioChannelLayout *v27;
  OSStatus v28;
  int v29;
  int v30;
  OSStatus v31;
  unsigned int v32;
  int8x8_t v33;
  OSStatus v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  Float64 v41;
  Float64 v42;
  Float64 v43;
  OSStatus v44;
  int v45;
  OSStatus v46;
  char v47;
  RegistryAccess *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  Float64 v55;
  uint64_t v56;
  UInt32 v57;
  char v58;
  int v59;
  Float64 v60;
  signed int v62;
  int v63;
  OSStatus CanBeAuthorized;
  OSStatus FormatListFromCodecs;
  uint64_t v66;
  Float64 v67;
  uint64_t v68;
  uint64_t v69;
  Float64 v70;
  Float64 v71;
  __int128 v72;
  Float64 mSampleRate;
  OSStatus v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  Float64 v79;
  Float64 v80;
  OSStatus v81;
  Float64 v82;
  OSStatus v83;
  uint64_t v84;
  const __CFString *v85;
  Float64 v86;
  Float64 v87;
  UInt32 v88;
  int v89;
  _BOOL4 v91;
  int v93;
  UInt32 v94;
  int v95;
  UInt32 v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  UInt32 v101;
  int8x8_t v102;
  int mSampleRate_low;
  int v105;
  int v106;
  int v107;
  unsigned __int16 v108;
  int v109;
  size_t v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int *v113;
  int v114;
  size_t v115;
  unsigned int v116;
  int v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  Float64 v123;
  size_t v124;
  unint64_t v125;
  int v126;
  char v127;
  int v128;
  int v129;
  int v130;
  __int128 v131;
  size_t v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int *v135;
  signed int v136;
  Float64 v137;
  __int128 v138;
  __int128 v139;
  int v140;
  size_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  Float64 v146;
  size_t v147;
  unint64_t v148;
  int v149;
  char v150;
  int v151;
  int v152;
  int v153;
  uint64_t *v154;
  int v155;
  UInt32 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  size_t v161;
  _BYTE *v162;
  int v163;
  char v164;
  int v165;
  int v166;
  int v167;
  int v168;
  UInt32 v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int *v172;
  uint64_t v173;
  BOOL *v174;
  uint64_t v175;
  int v176;
  _QWORD v177[2];
  uint64_t v178;
  AudioStreamBasicDescription v179;
  AudioStreamBasicDescription v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  __int16 v185;
  _DWORD v186[224];
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  AudioStreamBasicDescription v191[29];
  uint64_t v192;
  _QWORD v193[3];

  v8 = (unsigned int *)inSpecifier;
  v9 = *(_QWORD *)&inSpecifierSize;
  v193[2] = *MEMORY[0x1E0C80C00];
  if ((!ioPropertyDataSize || !outPropertyData)
    && inPropertyID != 1752589411
    && inPropertyID != 1986093932
    && inPropertyID != 1752589667)
  {
    return -50;
  }
  DecoderSpecificBitStreamFromESDS = 1886547824;
  if ((int)inPropertyID <= 1701733229)
  {
    if ((int)inPropertyID <= 1668047725)
    {
      if ((int)inPropertyID > 1634496372)
      {
        if ((int)inPropertyID <= 1667523439)
        {
          if ((int)inPropertyID <= 1635151458)
          {
            if (inPropertyID != 1634496373)
            {
              if (inPropertyID == 1635148901)
              {
                if (inSpecifierSize != 4)
                  return 561213539;
                if (!inSpecifier)
                  return -50;
                v77 = *(unsigned int *)inSpecifier;
                RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
                v78 = qword_1ECEF4E20;
                os_unfair_recursive_lock_lock_with_options();
                v18 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, void *))(*(_QWORD *)v78 + 104))(v78, v77, ioPropertyDataSize, outPropertyData);
              }
              else
              {
                if (inPropertyID != 1635149166)
                  return DecoderSpecificBitStreamFromESDS;
                if (inSpecifierSize != 4)
                  return 561213539;
                v16 = *(unsigned int *)inSpecifier;
                RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
                v17 = qword_1ECEF4E20;
                os_unfair_recursive_lock_lock_with_options();
                v18 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, void *))(*(_QWORD *)v17 + 96))(v17, v16, ioPropertyDataSize, outPropertyData);
              }
LABEL_414:
              DecoderSpecificBitStreamFromESDS = v18;
              os_unfair_recursive_lock_unlock();
              return DecoderSpecificBitStreamFromESDS;
            }
            v12 = 561213539;
            if (inSpecifierSize != 8)
              return v12;
            if (!inSpecifier)
              return -50;
            if (*ioPropertyDataSize != 8)
              return 561211770;
            v180.mSampleRate = 0.0;
            DecoderSpecificBitStreamFromESDS = AudioFormatProperty_AlbumLoudness((CFArrayRef *)inSpecifier, (const __CFDictionary **)&v180);
            goto LABEL_574;
          }
          if (inPropertyID != 1635151459)
          {
            if (inPropertyID != 1650551910)
            {
              if (inPropertyID != 1651340391)
                return DecoderSpecificBitStreamFromESDS;
              v12 = 561213539;
              if (inSpecifierSize != 4)
                return v12;
              if (!inSpecifier)
                return -50;
              if (*ioPropertyDataSize != 4)
                return 561211770;
              v35 = AudioFormatProperty_BitmapForLayoutTag(*(_DWORD *)inSpecifier);
              if (!v35)
                return 1718449215;
LABEL_398:
              DecoderSpecificBitStreamFromESDS = 0;
              *(_DWORD *)outPropertyData = v35;
              return DecoderSpecificBitStreamFromESDS;
            }
            v12 = 561213539;
            if (inSpecifierSize != 24)
              return v12;
            if (!inSpecifier)
              return -50;
            *(_OWORD *)&v180.mSampleRate = *(_OWORD *)inSpecifier;
            *(_QWORD *)&v180.mBytesPerPacket = *((_QWORD *)inSpecifier + 2);
            SanitizeClientAudioChannelLayout((const AudioChannelLayout *)v191, *(const void **)&v180.mBytesPerPacket, 20 * *(_DWORD *)(*(_QWORD *)&v180.mBytesPerPacket + 8) + 12);
            mSampleRate = v191[0].mSampleRate;
            *(Float64 *)&v180.mBytesPerPacket = v191[0].mSampleRate;
            LODWORD(v179.mSampleRate) = 0;
            v81 = AudioFormatProperty_NumberOfChannelsForLayout(*(const AudioChannelLayout **)&v191[0].mSampleRate, (unsigned int *)&v179);
            if (v81)
            {
              DecoderSpecificBitStreamFromESDS = v81;
LABEL_436:
              v47 = 0;
              v12 = DecoderSpecificBitStreamFromESDS;
              goto LABEL_641;
            }
            mSampleRate_low = LODWORD(v179.mSampleRate);
            if (*ioPropertyDataSize == 4 * LODWORD(v179.mSampleRate))
            {
              DecoderSpecificBitStreamFromESDS = AudioFormatProperty_BalanceFade((const AudioBalanceFade *)&v180, (unsigned int *)&v179, (float *)outPropertyData);
              if (DecoderSpecificBitStreamFromESDS)
                goto LABEL_436;
              v12 = 0;
              *ioPropertyDataSize = 4 * mSampleRate_low;
              v47 = 1;
            }
            else
            {
              v47 = 0;
              DecoderSpecificBitStreamFromESDS = 0;
              v12 = 561211770;
            }
LABEL_641:
            if (mSampleRate == 0.0)
              goto LABEL_653;
            goto LABEL_639;
          }
LABEL_267:
          if (inSpecifierSize != 40)
            return 561213539;
          if (!inSpecifier)
            return -50;
          RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
          v50 = qword_1ECEF4E20;
          os_unfair_recursive_lock_lock_with_options();
          v18 = (*(uint64_t (**)(uint64_t, unsigned int *, UInt32 *, void *, BOOL))(*(_QWORD *)v50 + 152))(v50, v8, ioPropertyDataSize, outPropertyData, inPropertyID == 1635151459);
          goto LABEL_414;
        }
        if ((int)inPropertyID <= 1667787890)
        {
          if (inPropertyID == 1667523440)
          {
            if (!inSpecifier)
              return -50;
            if (inSpecifierSize < 0x10)
              return 561213539;
            return AudioFormatProperty_CanDecodeAudioFormatIndicatedByCodecsParameterValue((uint64_t)inSpecifier, ioPropertyDataSize, outPropertyData);
          }
          if (inPropertyID != 1667786097)
          {
            if (inPropertyID != 1667786849)
              return DecoderSpecificBitStreamFromESDS;
            v12 = 561213539;
            if (*ioPropertyDataSize == 4)
            {
              if (inSpecifierSize != 8)
                return v12;
              if (!inSpecifier)
                return -50;
              v27 = (AudioChannelLayout *)operator new[]();
              *(_QWORD *)&v27->mChannelLayoutTag = *(_QWORD *)v8;
              DecoderSpecificBitStreamFromESDS = AudioFormatProperty_HashForChannelLayout(v27, (unsigned int *)outPropertyData);
              SanitizeClientAudioChannelLayout(AudioChannelLayout const*,unsigned int)::$_0::__invoke((uint64_t)v27);
              return DecoderSpecificBitStreamFromESDS;
            }
            return 561211770;
          }
          v12 = 561213539;
          if (*ioPropertyDataSize != 4)
            return 561211770;
          if (inSpecifierSize != 16)
            return v12;
          if (!inSpecifier)
            return -50;
          LODWORD(v179.mSampleRate) = 0;
          SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v180, *(const void **)inSpecifier, 20 * *(_DWORD *)(*(_QWORD *)inSpecifier + 8) + 12);
          v79 = v180.mSampleRate;
          SanitizeClientAudioChannelLayout((const AudioChannelLayout *)v191, *((const void **)v8 + 1), 20 * *(_DWORD *)(*((_QWORD *)v8 + 1) + 8) + 12);
          v80 = v191[0].mSampleRate;
          DecoderSpecificBitStreamFromESDS = AudioFormat_AreChannelLayoutsEquivalent(*(const AudioChannelLayout **)&v79, *(const AudioChannelLayout **)&v191[0].mSampleRate, (unsigned int *)&v179);
          if (v80 != 0.0)
            (*(void (**)(Float64))&v191[0].mFormatID)(COERCE_FLOAT64(*(_QWORD *)&v80));
          if (v79 != 0.0)
            (*(void (**)(Float64))&v180.mFormatID)(COERCE_FLOAT64(*(_QWORD *)&v79));
          v40 = LODWORD(v179.mSampleRate);
          goto LABEL_428;
        }
        if (inPropertyID != 1667787891)
        {
          if (inPropertyID != 1667788144)
          {
            if (inPropertyID != 1668047725)
              return DecoderSpecificBitStreamFromESDS;
            if (!inSpecifier)
              return -50;
            v12 = 561213539;
            if (inSpecifierSize == 4)
            {
              v39 = 0;
            }
            else
            {
              if (inSpecifierSize != 8)
                return v12;
              v39 = *((_DWORD *)inSpecifier + 1);
            }
            v100 = *(_DWORD *)inSpecifier;
            v101 = AudioFormatProperty_ChannelLayoutSizeForWAVEChannelMask(*(_DWORD *)inSpecifier, v39, v5);
            if (*ioPropertyDataSize >= v101)
            {
              if (*ioPropertyDataSize > v101)
                *ioPropertyDataSize = v101;
              AudioFormatProperty_ChannelLayoutForWAVEChannelMask(v100, v39, (AudioChannelLayout *)outPropertyData, v102);
              return 0;
            }
            return 561211770;
          }
          v12 = 561213539;
          if (inSpecifierSize != 16)
            return v12;
          if (!inSpecifier)
            return -50;
          SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v180, *(const void **)inSpecifier, 20 * *(_DWORD *)(*(_QWORD *)inSpecifier + 8) + 12);
          SanitizeClientAudioChannelLayout((const AudioChannelLayout *)v191, *((const void **)v8 + 1), 20 * *(_DWORD *)(*((_QWORD *)v8 + 1) + 8) + 12);
          v42 = v180.mSampleRate;
          v82 = v191[0].mSampleRate;
          LODWORD(v179.mSampleRate) = 0;
          v83 = AudioFormatProperty_NumberOfChannelsForLayout(*(const AudioChannelLayout **)&v191[0].mSampleRate, (unsigned int *)&v179);
          if (v83)
          {
            DecoderSpecificBitStreamFromESDS = v83;
LABEL_445:
            v47 = 0;
            v12 = DecoderSpecificBitStreamFromESDS;
            goto LABEL_644;
          }
          v105 = LODWORD(v179.mSampleRate);
          if (*ioPropertyDataSize == 4 * LODWORD(v179.mSampleRate))
          {
            DecoderSpecificBitStreamFromESDS = AudioFormatProperty_ChannelMap(*(const AudioChannelLayout *const **)&v42, *(const AudioChannelLayout **)&v82, (unsigned int *)&v179, outPropertyData);
            if (DecoderSpecificBitStreamFromESDS)
              goto LABEL_445;
            v12 = 0;
            *ioPropertyDataSize = 4 * v105;
            v47 = 1;
          }
          else
          {
            v47 = 0;
            DecoderSpecificBitStreamFromESDS = 0;
            v12 = 561211770;
          }
LABEL_644:
          if (v82 != 0.0)
            (*(void (**)(Float64))&v191[0].mFormatID)(COERCE_FLOAT64(*(_QWORD *)&v82));
          if (v42 != 0.0)
LABEL_652:
            (*(void (**)(Float64))&v180.mFormatID)(COERCE_FLOAT64(*(_QWORD *)&v42));
LABEL_653:
          if ((v47 & 1) == 0)
            return v12;
          return DecoderSpecificBitStreamFromESDS;
        }
        v12 = 561213539;
        if (inSpecifierSize < 0x51)
          return v12;
        if (!inSpecifier)
          return -50;
        v56 = *((unsigned int *)inSpecifier + 19);
        v180.mSampleRate = *((Float64 *)inSpecifier + 10);
        v55 = v180.mSampleRate;
        *(_QWORD *)&v180.mFormatID = *(_QWORD *)&v180.mSampleRate + v56;
        *(_QWORD *)&v180.mBytesPerPacket = 0;
        if ((LOBYTE(v180.mSampleRate) & 3) != 0 && (_DWORD)v56)
        {
          v57 = 0;
          v58 = LOBYTE(v180.mSampleRate) + 1;
          v59 = -8;
          *(_QWORD *)&v60 = *(_QWORD *)&v180.mSampleRate + 1;
          do
          {
            v180.mFramesPerPacket = v59 + 16;
            v180.mSampleRate = v60;
            v57 = *(unsigned __int8 *)(*(_QWORD *)&v60 - 1) | (v57 << 8);
            v180.mBytesPerPacket = v57;
            v59 += 8;
            if ((v58 & 3) == 0)
              break;
            ++v58;
          }
          while ((*(_QWORD *)&v60)++ < (unint64_t)(*(_QWORD *)&v55 + v56));
          v180.mBytesPerPacket = v57 << (24 - v59);
        }
        DecoderSpecificBitStreamFromESDS = 0;
        LODWORD(v179.mSampleRate) = v56;
        LODWORD(v172) = 0;
        v62 = *((_DWORD *)inSpecifier + 2);
        if (v62 > 1902207330)
        {
          if (v62 > 2053202274)
          {
            if (v62 > 2053202791)
            {
              if (v62 == 2053202792)
                goto LABEL_715;
              if (v62 == 2053464883)
              {
LABEL_618:
                *(_DWORD *)outPropertyData = bswap32(v62);
                *((_WORD *)outPropertyData + 2) = bswap32(*((unsigned __int16 *)inSpecifier + 36)) >> 16;
                *((_BYTE *)outPropertyData + 6) = 1;
                if (*ioPropertyDataSize >= 9)
                {
                  DecoderSpecificBitStreamFromESDS = 560226676;
                  if ((v56 - 46) >= 0xFFFFFFDF
                    && v55 != 0.0
                    && *ioPropertyDataSize - 8 >= (int)v56 - 8
                    && *(_DWORD *)(*(_QWORD *)&v55 + 4) == 862152036)
                  {
                    memcpy((char *)outPropertyData + 8, (const void *)(*(_QWORD *)&v55 + 8), (v56 - 8));
                    DecoderSpecificBitStreamFromESDS = 0;
                    *((_BYTE *)outPropertyData + 7) = v56 - 8;
                    *ioPropertyDataSize = v56;
                  }
                  return DecoderSpecificBitStreamFromESDS;
                }
                return 561211770;
              }
              v106 = 2053202800;
              goto LABEL_702;
            }
            if (v62 == 2053202275)
              goto LABEL_715;
            v140 = 2053202739;
          }
          else
          {
            if (v62 > 1902207847)
            {
              if (v62 == 1902207848 || v62 == 1902207856)
                goto LABEL_715;
              v63 = 1902469939;
              goto LABEL_584;
            }
            if (v62 == 1902207331)
              goto LABEL_715;
            v140 = 1902207795;
          }
        }
        else
        {
          if (v62 <= 1885430114)
          {
            if (v62 > 1633772399)
            {
              if (v62 != 1633772400)
              {
                if (v62 != 1633889587)
                {
                  v63 = 1700998451;
                  goto LABEL_584;
                }
LABEL_711:
                *(_DWORD *)outPropertyData = bswap32(v62);
                *((_WORD *)outPropertyData + 2) = bswap32(*((unsigned __int16 *)inSpecifier + 36)) >> 16;
                *((_BYTE *)outPropertyData + 6) = 1;
                if ((_DWORD)v56 == 10)
                {
                  DecoderSpecificBitStreamFromESDS = 0;
                  *((_BYTE *)outPropertyData + 7) = 10;
                  v171 = **(_QWORD **)&v55;
                  *((_WORD *)outPropertyData + 8) = *(_WORD *)(*(_QWORD *)&v55 + 8);
                  *((_QWORD *)outPropertyData + 1) = v171;
                }
                else
                {
                  if ((_DWORD)v56 != 11 || *(_DWORD *)(*(_QWORD *)&v55 + 4) != 862151012)
                    return 560360820;
                  LOWORD(v191[0].mFormatID) = 0;
                  *(_QWORD *)&v191[0].mSampleRate = 30475;
                  LODWORD(v177[0]) = 10;
                  ConvertAC3MP4CookieToAC3Header(*(_BYTE **)&v55, (uint64_t)v191, (unsigned __int8 *)v177, ioPropertyDataSize);
                  DecoderSpecificBitStreamFromESDS = 0;
                  *((_QWORD *)outPropertyData + 1) = *(_QWORD *)&v191[0].mSampleRate;
                  *((_WORD *)outPropertyData + 8) = v191[0].mFormatID;
                  *((_BYTE *)outPropertyData + 7) = 10;
                }
                v26 = 18;
                goto LABEL_784;
              }
LABEL_715:
              DecoderSpecificBitStreamFromESDS = ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS((uint64_t)&v180, (int *)&v179, (int *)&v172);
              if (DecoderSpecificBitStreamFromESDS)
                return DecoderSpecificBitStreamFromESDS;
              *(_DWORD *)outPropertyData = bswap32(v8[2]);
              *((_WORD *)outPropertyData + 2) = bswap32(*((unsigned __int16 *)v8 + 36)) >> 16;
              *((_BYTE *)outPropertyData + 6) = 1;
              v141 = LODWORD(v179.mSampleRate);
              *((_BYTE *)outPropertyData + 7) = LOBYTE(v179.mSampleRate);
              memcpy((char *)outPropertyData + 8, (const void *)(*((_QWORD *)v8 + 10) + v172), v141);
              v26 = v141 + 8;
              goto LABEL_784;
            }
            if (v62 == 1633772320)
              goto LABEL_715;
            v106 = 1633772392;
LABEL_702:
            if (v62 != v106)
              return DecoderSpecificBitStreamFromESDS;
            goto LABEL_715;
          }
          if (v62 > 1885430631)
          {
            if (v62 == 1885430632 || v62 == 1885430640)
              goto LABEL_715;
            v63 = 1885692723;
LABEL_584:
            if (v62 != v63)
              return DecoderSpecificBitStreamFromESDS;
            goto LABEL_618;
          }
          if (v62 == 1885430115)
            goto LABEL_715;
          v140 = 1885430579;
        }
        if (v62 != v140)
          return DecoderSpecificBitStreamFromESDS;
        goto LABEL_711;
      }
      if ((int)inPropertyID > 1633971810)
      {
        if ((int)inPropertyID <= 1634038641)
        {
          if (inPropertyID == 1633971811)
            goto LABEL_267;
          if (inPropertyID == 1634034290)
          {
            RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
            v66 = qword_1ECEF4E20;
            os_unfair_recursive_lock_lock_with_options();
            v18 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, UInt32 *, void *))(*(_QWORD *)v66 + 128))(v66, v9, v8, ioPropertyDataSize, outPropertyData);
            goto LABEL_414;
          }
          if (inPropertyID != 1634034540)
            return DecoderSpecificBitStreamFromESDS;
LABEL_270:
          if (inSpecifierSize != 40)
            return 561213539;
          if (!inSpecifier)
            return -50;
          RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
          v51 = qword_1ECEF4E20;
          os_unfair_recursive_lock_lock_with_options();
          v18 = (*(uint64_t (**)(uint64_t, unsigned int *, UInt32 *, void *, BOOL))(*(_QWORD *)v51 + 144))(v51, v8, ioPropertyDataSize, outPropertyData, inPropertyID == 1634034540);
          goto LABEL_414;
        }
        if (inPropertyID == 1634038642)
        {
          RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
          v54 = qword_1ECEF4E20;
          os_unfair_recursive_lock_lock_with_options();
          v18 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, UInt32 *, void *))(*(_QWORD *)v54 + 136))(v54, v9, v8, ioPropertyDataSize, outPropertyData);
          goto LABEL_414;
        }
        if (inPropertyID == 1634100078)
        {
          v12 = 561213539;
          if (inSpecifierSize != 40)
            return v12;
          if (!inSpecifier)
            return -50;
          if (*ioPropertyDataSize != 8)
            return 561211770;
          AudioFormatProperty_FormatCategoryName((const AudioStreamBasicDescription *)inSpecifier, (const __CFString **)outPropertyData, (uint64_t)inSpecifier, (const __CFString *)ioPropertyDataSize);
          return 0;
        }
        if (inPropertyID != 1634100080)
          return DecoderSpecificBitStreamFromESDS;
        if (!inSpecifier)
          return -50;
        if (inSpecifierSize >= 0x10)
          return AudioFormatProperty_AudioFormatFromCodecsParameterValue((uint64_t)inSpecifier, outPropertyData);
        return 561213539;
      }
      if ((int)inPropertyID <= 1633906533)
      {
        if (inPropertyID != 1633776744)
        {
          if (inPropertyID != 1633904998)
            return DecoderSpecificBitStreamFromESDS;
          RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
          v49 = qword_1ECEF4E20;
          os_unfair_recursive_lock_lock_with_options();
          v18 = (*(uint64_t (**)(uint64_t, UInt32 *, void *))(*(_QWORD *)v49 + 112))(v49, ioPropertyDataSize, outPropertyData);
          goto LABEL_414;
        }
        if (!inSpecifier)
          return -50;
        v12 = 561213539;
        if (inSpecifierSize < 0x38)
          return v12;
        if (*ioPropertyDataSize < 4)
          return 561211770;
        CanBeAuthorized = AudioFormatProperty_AudibleProtectedContentCanBeAuthorized((uint64_t)inSpecifier, outPropertyData);
        goto LABEL_370;
      }
      if (inPropertyID == 1633906534)
      {
        RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
        v52 = qword_1ECEF4E20;
        os_unfair_recursive_lock_lock_with_options();
        v18 = (*(uint64_t (**)(uint64_t, UInt32 *, void *))(*(_QWORD *)v52 + 120))(v52, ioPropertyDataSize, outPropertyData);
        goto LABEL_414;
      }
      if (inPropertyID == 1633969004)
        goto LABEL_270;
      if (inPropertyID != 1633971568)
        return DecoderSpecificBitStreamFromESDS;
      if (*ioPropertyDataSize != 40)
        return 561211770;
      if (!inSpecifier)
        return -50;
      v31 = MPEGPacketParser_ASBDFromMPEGPacket((unsigned int *)inSpecifier, inSpecifierSize, (AudioStreamBasicDescription *)outPropertyData);
LABEL_321:
      v12 = v31;
      if (v31)
        return v12;
      DecoderSpecificBitStreamFromESDS = 0;
      goto LABEL_323;
    }
    if ((int)inPropertyID <= 1668446575)
    {
      if ((int)inPropertyID <= 1668116587)
      {
        if ((int)inPropertyID <= 1668051810)
        {
          if (inPropertyID == 1668047726)
          {
            if (!inSpecifier)
              return -50;
            return AudioFormatProperty_ISOChannelLayoutForChannelLayout((AudioChannelLayout *)inSpecifier, inSpecifierSize, ioPropertyDataSize, (unsigned __int8 *)outPropertyData);
          }
          if (inPropertyID != 1668048489)
            return DecoderSpecificBitStreamFromESDS;
          if (inSpecifierSize < 0x38)
            return 561213539;
          if (!inSpecifier)
            return -50;
          v22 = 1868786720;
          return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, ioPropertyDataSize, outPropertyData, v22);
        }
        if (inPropertyID == 1668051811)
        {
          v12 = 561213539;
          if (inSpecifierSize != 8)
            return v12;
          if (!inSpecifier)
            return -50;
          if (*ioPropertyDataSize != 4)
            return 561211770;
          return AudioFormat_ComputeLoudnessScalar(*(_QWORD *)inSpecifier, 1, 0, (float *)outPropertyData);
        }
        if (inPropertyID == 1668113260)
        {
          if (!inSpecifier)
            return -50;
          if (*ioPropertyDataSize >= 4)
          {
            if (*ioPropertyDataSize != 4)
              *ioPropertyDataSize = 4;
            return AudioFormatProperty_WAVEChannelMaskForChannelLayout((const AudioChannelLayout *)inSpecifier, (unsigned int *)outPropertyData);
          }
          return 561211770;
        }
        if (inPropertyID != 1668116578)
          return DecoderSpecificBitStreamFromESDS;
        v12 = 561213539;
        if (inSpecifierSize != 4)
          return v12;
        if (!inSpecifier)
          return -50;
        v32 = (*(_DWORD *)inSpecifier >> 11) & 0x800 | *(_DWORD *)inSpecifier & 0xFFA3FFFF | (*(_DWORD *)inSpecifier >> 6) & 0x7000;
        LODWORD(v180.mSampleRate) = 0x10000;
        *(_QWORD *)((char *)&v180.mSampleRate + 4) = v32;
        LODWORD(v191[0].mSampleRate) = 0;
        AudioFormatProperty_NumberOfChannelsForLayout((const AudioChannelLayout *)&v180, (unsigned int *)v191);
        if (20 * (unint64_t)LODWORD(v191[0].mSampleRate) + 12 > *ioPropertyDataSize)
          return 561211770;
        AudioFormatProperty_ChannelLayoutForBitmap(v32, (AudioChannelLayout *)outPropertyData, v33);
        return 0;
      }
      if ((int)inPropertyID <= 1668178795)
      {
        if (inPropertyID == 1668116588)
        {
          v12 = 561213539;
          if (inSpecifierSize != 4)
            return v12;
          if (!inSpecifier)
            return -50;
          v53 = *(_DWORD *)inSpecifier;
          v180.mFormatID = 0;
          *(_QWORD *)&v180.mSampleRate = v53;
          LODWORD(v191[0].mSampleRate) = 0;
          AudioFormatProperty_NumberOfChannelsForLayout((const AudioChannelLayout *)&v180, (unsigned int *)v191);
          if (20 * (unint64_t)LODWORD(v191[0].mSampleRate) + 12 > *ioPropertyDataSize)
            return 561211770;
          return AudioFormatProperty_ChannelLayoutForTag(v53, (AudioChannelLayout *)outPropertyData);
        }
        if (inPropertyID != 1668116596)
        {
          if (inPropertyID != 1668178285)
            return DecoderSpecificBitStreamFromESDS;
          v12 = 561213539;
          if (*ioPropertyDataSize != 8)
            return 561211770;
          if (!inSpecifier)
            return -50;
          if (inSpecifierSize == 20)
            return AudioFormatProperty_ChannelName((AudioChannelDescription *)inSpecifier, (const __CFString **)outPropertyData, (uint64_t)inSpecifier, (const __CFString *)ioPropertyDataSize);
          if (inSpecifierSize != 4)
            return v12;
          v23 = *(_DWORD *)inSpecifier;
          *(_QWORD *)&v180.mFormatFlags = 0;
          *(Float64 *)((char *)&v180.mSampleRate + 4) = 0.0;
          LODWORD(v180.mSampleRate) = v23;
          return AudioFormatProperty_ChannelName((AudioChannelDescription *)&v180, (const __CFString **)outPropertyData, (uint64_t)inSpecifier, (const __CFString *)ioPropertyDataSize);
        }
        v12 = 561213539;
        if (*ioPropertyDataSize != 4)
          return 561211770;
        if (inSpecifierSize < 0xC)
          return v12;
        if (!inSpecifier)
          return -50;
        if (caulk::numeric::exceptional_cast<unsigned int,unsigned long>(20
                                                                                      * *((unsigned int *)inSpecifier + 2) + 12) > inSpecifierSize)
          return v12;
        LODWORD(v191[0].mSampleRate) = 0;
        SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v180, v8, v9);
        v67 = v180.mSampleRate;
        DecoderSpecificBitStreamFromESDS = AudioFormatProperty_TagForChannelLayout(*(const AudioChannelLayout **)&v180.mSampleRate, (unsigned int *)v191);
        if (v67 != 0.0)
          (*(void (**)(Float64))&v180.mFormatID)(COERCE_FLOAT64(*(_QWORD *)&v67));
LABEL_386:
        if (DecoderSpecificBitStreamFromESDS)
          return DecoderSpecificBitStreamFromESDS;
        v40 = LODWORD(v191[0].mSampleRate);
        goto LABEL_428;
      }
      if (inPropertyID == 1668178796)
      {
        if (!inSpecifier)
          return -50;
        return AudioFormatProperty_ChannelLayoutForISOChannelLayout(inSpecifierSize, (unsigned int *)inSpecifier, 0, ioPropertyDataSize, (AudioChannelLayout *)outPropertyData);
      }
      if (inPropertyID == 1668180324)
      {
        if (!inSpecifier)
          return -50;
        v12 = 561213539;
        if (inSpecifierSize < 0xC)
          return v12;
        if (*ioPropertyDataSize >= 8)
          return AudioFormatProperty_CodingNameForDecodeFormatID((int *)inSpecifier, (int *)ioPropertyDataSize, (int *)outPropertyData);
        return 561211770;
      }
      if (inPropertyID != 1668309350)
        return DecoderSpecificBitStreamFromESDS;
      if (!inSpecifier)
        return -50;
      if (inSpecifierSize >= 0x40)
        return AudioFormatProperty_CodecsParameterValueFromAudioFormat((uint64_t)inSpecifier, (CFStringRef *)outPropertyData);
      return 561213539;
    }
    if ((int)inPropertyID > 1685283691)
    {
      if ((int)inPropertyID <= 1701081955)
      {
        if (inPropertyID == 1685283692)
        {
          if (!inSpecifier)
            return -50;
          v12 = 561213539;
          if (inSpecifierSize < 4)
            return v12;
          if (*ioPropertyDataSize >= 0x14)
          {
            *(_QWORD *)outPropertyData = *(unsigned int *)inSpecifier;
            SetDefaultChannelPosition((uint64_t)outPropertyData);
            return 0;
          }
          return 561211770;
        }
        if (inPropertyID == 1701014883)
        {
          if (!inSpecifier)
            return -50;
          if (inSpecifierSize < 0x18)
            return 561213539;
          return AudioFormatProperty_EncapsulatedMagicCookieFromCanonicalMagicCookie((unsigned int *)inSpecifier, ioPropertyDataSize, (uint64_t)outPropertyData);
        }
        if (inPropertyID != 1701077868)
          return DecoderSpecificBitStreamFromESDS;
        if (*ioPropertyDataSize != 32)
          return 561211770;
        if (!inSpecifier)
          return -50;
        *(_OWORD *)outPropertyData = 0u;
        *((_OWORD *)outPropertyData + 1) = 0u;
        v28 = AudioFormatProperty_ChannelLayoutFromESD((unsigned __int8 *)inSpecifier, inSpecifierSize, (AudioChannelLayout *)outPropertyData);
        goto LABEL_264;
      }
      if (inPropertyID == 1701081956)
      {
        if (*ioPropertyDataSize != 40)
          return 561211770;
        if (!inSpecifier)
          return -50;
        v31 = AudioFormatProperty_ASBDFromESD((unsigned __int8 *)inSpecifier, inSpecifierSize, (AudioStreamBasicDescription *)outPropertyData);
        goto LABEL_321;
      }
      if (inPropertyID == 1701147492)
      {
        if (!inSpecifier)
          return -50;
        v34 = AudioFormatProperty_ESDFromESDS((unsigned __int8 *)inSpecifier, inSpecifierSize, outPropertyData, ioPropertyDataSize);
LABEL_448:
        v12 = v34;
        if (v34)
          return v12;
        return 0;
      }
      if (inPropertyID != 1701406313)
        return DecoderSpecificBitStreamFromESDS;
      if (!inSpecifier)
        return -50;
      v12 = 561213539;
      if (inSpecifierSize < 8)
        return v12;
      if (*ioPropertyDataSize < 4)
        return 561211770;
      v37 = AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(*(_DWORD *)inSpecifier, *((_DWORD *)inSpecifier + 1));
      if (!v37)
        return 560360820;
    }
    else
    {
      if ((int)inPropertyID <= 1684369509)
      {
        if (inPropertyID == 1668446576)
        {
          if (!inSpecifier)
            return 2003329396;
          v12 = 561213539;
          if (inSpecifierSize != 4)
            return v12;
          if (*ioPropertyDataSize != 4)
            return 561211770;
          AudioFormatProperty_FormatIsEncrypted(*(unsigned int *)inSpecifier, (unsigned int *)outPropertyData);
          return 0;
        }
        if (inPropertyID == 1668509293)
        {
          v12 = 561213539;
          if (*ioPropertyDataSize != 8)
            return 561211770;
          if (!inSpecifier)
            return -50;
          if (inSpecifierSize != 20 && inSpecifierSize != 4)
            return v12;
          return AudioFormatProperty_ChannelShortName(*(_DWORD *)inSpecifier, (const __CFString **)outPropertyData, (uint64_t)inSpecifier, (const __CFString *)ioPropertyDataSize);
        }
        if (inPropertyID != 1684235116)
          return DecoderSpecificBitStreamFromESDS;
        if (!inSpecifier)
          return -50;
        if (inSpecifierSize == 56)
          return AudioFormatProperty_ChannelLayoutForISOChannelLayout(*((_DWORD *)inSpecifier + 12), *((unsigned int **)inSpecifier + 5), (const AudioStreamBasicDescription *)inSpecifier, ioPropertyDataSize, (AudioChannelLayout *)outPropertyData);
        return 561213539;
      }
      if (inPropertyID == 1684369510)
      {
        if (!inSpecifier)
          return -50;
        if (inSpecifierSize < 0x38)
          return 561213539;
        v22 = 1684369510;
        return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, ioPropertyDataSize, outPropertyData, v22);
      }
      if (inPropertyID == 1685218164)
      {
        if (!inSpecifier)
          return -50;
        v12 = 561213539;
        if (inSpecifierSize < 0x48)
          return v12;
        if (*ioPropertyDataSize >= 4)
          return AudioFormat_GetDRCTypeFromPacket((uint64_t)inSpecifier, outPropertyData);
        return 561211770;
      }
      if (inPropertyID != 1685220460)
        return DecoderSpecificBitStreamFromESDS;
      v12 = 561213539;
      if (inSpecifierSize < 4)
        return v12;
      if (!inSpecifier)
        return -50;
      if (*ioPropertyDataSize < 4)
        return 561211770;
      v36 = AudioFormatEncryptedFormatTranslator::DecryptFormatID(*((unsigned int *)inSpecifier + 2 * (inSpecifierSize > 0x27)), (int *)&v180);
      v37 = 1;
      if (v36 > 1633772388)
      {
        v38 = v36 - 1633772389;
        if (v38 <= 0xE && ((1 << v38) & 0x488F) != 0)
          goto LABEL_782;
        goto LABEL_636;
      }
      if ((v36 - 778924081) >= 2)
      {
        if (v36 == 778924083)
        {
          if (v9 < 0x28)
            v37 = 18;
          else
            v37 = MPEGAudioMaximumNumberOfDependentPackets((const AudioStreamBasicDescription *)v8, 0);
          goto LABEL_782;
        }
        if (v36 != 1633772320)
LABEL_636:
          v37 = 0;
      }
    }
LABEL_782:
    DecoderSpecificBitStreamFromESDS = 0;
    *(_DWORD *)outPropertyData = v37;
    goto LABEL_783;
  }
  if ((int)inPropertyID <= 1818520673)
  {
    if ((int)inPropertyID > 1718642283)
    {
      if ((int)inPropertyID <= 1768186733)
      {
        if ((int)inPropertyID <= 1752589666)
        {
          if (inPropertyID == 1718642284)
          {
            if (!inSpecifier)
              return -50;
            v12 = 561213539;
            if (!inSpecifierSize)
              return v12;
            if (*ioPropertyDataSize == 4)
              return AudioFormatProperty_FirstPlayableFormatFromList((RegistryAccess *)(inSpecifierSize / 0x30uLL), (AudioFormatListItem *)inSpecifier, (unsigned int *)outPropertyData);
            return 561211770;
          }
          if (inPropertyID != 1719034482)
          {
            if (inPropertyID != 1752589411)
              return DecoderSpecificBitStreamFromESDS;
            if (inSpecifierSize != 4)
              return 561213539;
            if (!inSpecifier)
              return -50;
            v20 = *(unsigned int *)inSpecifier;
            RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
            v21 = qword_1ECEF4E20;
            os_unfair_recursive_lock_lock_with_options();
            v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v21 + 104))(v21, v20, 0, 0);
            goto LABEL_414;
          }
          goto LABEL_242;
        }
        if (inPropertyID == 1752589667)
        {
          if (inSpecifierSize != 4)
            return 561213539;
          if (!inSpecifier)
            return -50;
          v68 = *(unsigned int *)inSpecifier;
          RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
          v69 = qword_1ECEF4E20;
          os_unfair_recursive_lock_lock_with_options();
          v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v69 + 96))(v69, v68, 0, 0);
          goto LABEL_414;
        }
        if (inPropertyID != 1768174436)
        {
          if (inPropertyID != 1768174451)
            return DecoderSpecificBitStreamFromESDS;
          if (inSpecifierSize < 0xA)
            return 561213539;
          if (!inSpecifier)
            return -50;
          if (*(_BYTE *)inSpecifier != 84 || *((_BYTE *)inSpecifier + 1) != 65 || *((_BYTE *)inSpecifier + 2) != 71)
          {
            *(_QWORD *)&v180.mSampleRate = &off_1E2900F48;
            LOBYTE(v180.mFormatID) = 0;
            *(_QWORD *)&v180.mBytesPerFrame = &v180.mBytesPerFrame;
            *(_QWORD *)&v180.mBitsPerChannel = &v180.mBytesPerFrame;
            v181 = 0;
            v182 = 0;
            v184 = 0;
            v183 = 0;
            v185 = 0;
            *(_QWORD *)((char *)&v180.mFormatID + 1) = *(_QWORD *)inSpecifier;
            *(_WORD *)((char *)&v180.mBytesPerPacket + 1) = *((_WORD *)inSpecifier + 4);
            if (!ID3TagBase::Init((ID3TagBase *)&v180))
            {
              v12 = 2003329396;
              *(_QWORD *)&v180.mSampleRate = &off_1E2900F48;
              std::__list_imp<ID3FrameInfo>::clear(&v180.mBytesPerFrame);
              return v12;
            }
            *ioPropertyDataSize = 4;
            *(_DWORD *)outPropertyData = v183;
            *(_QWORD *)&v180.mSampleRate = &off_1E2900F48;
            std::__list_imp<ID3FrameInfo>::clear(&v180.mBytesPerFrame);
            return 0;
          }
          DecoderSpecificBitStreamFromESDS = 0;
          v40 = 128;
LABEL_428:
          *(_DWORD *)outPropertyData = v40;
          return DecoderSpecificBitStreamFromESDS;
        }
        if (inSpecifierSize < 0xA)
          return 561213539;
        if (!inSpecifier)
          return -50;
        v180.mSampleRate = 0.0;
        if (AudioFormatProperty_ID3TagToDictionary((unsigned __int8 *)inSpecifier, inSpecifierSize, (__CFDictionary **)&v180))return 2003329396;
        DecoderSpecificBitStreamFromESDS = 0;
LABEL_574:
        *(Float64 *)outPropertyData = v180.mSampleRate;
        return DecoderSpecificBitStreamFromESDS;
      }
      if ((int)inPropertyID <= 1769170536)
      {
        if (inPropertyID == 1768186734)
        {
          if (!inSpecifier)
            return -50;
          v12 = 561213539;
          if (inSpecifierSize < 8 || (unint64_t)*((unsigned int *)inSpecifier + 1) + 8 > inSpecifierSize)
            return v12;
          return AudioFormatProperty_DecodeFormatIDsForCodingName((int *)inSpecifier, ioPropertyDataSize, (unsigned int *)outPropertyData);
        }
        if (inPropertyID == 1768187246)
        {
          if (!inSpecifier)
            return -50;
          v12 = 561213539;
          if (inSpecifierSize < 8 || (unint64_t)*((unsigned int *)inSpecifier + 1) + 8 > inSpecifierSize)
            return v12;
          return AudioFormatProperty_DecodeFormatIDsForEncapsulatedMagicCookieName((int *)inSpecifier, ioPropertyDataSize, (unsigned int *)outPropertyData);
        }
        if (inPropertyID != 1768780388)
          return DecoderSpecificBitStreamFromESDS;
        if (!inSpecifier)
          return -50;
        if (inSpecifierSize >= 0x38)
        {
          v22 = 1768780388;
          return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, ioPropertyDataSize, outPropertyData, v22);
        }
        return 561213539;
      }
      if (inPropertyID != 1769170537)
      {
        if (inPropertyID != 1769172323)
        {
          if (inPropertyID != 1818389604)
            return DecoderSpecificBitStreamFromESDS;
          if (inSpecifierSize)
          {
            if (inSpecifier)
            {
              v180.mSampleRate = 0.0;
              DecoderSpecificBitStreamFromESDS = ISOLoudnessBoxForLoudnessInfoDictionary(*(const __CFDictionary **)inSpecifier, (const __CFData **)&v180);
              if (!DecoderSpecificBitStreamFromESDS)
              {
                v41 = v180.mSampleRate;
                if (*(_QWORD *)&v180.mSampleRate)
                {
                  *(_QWORD *)outPropertyData = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDataRef *)&v180.mSampleRate);
                  *ioPropertyDataSize = 8;
                  CFRelease(*(CFTypeRef *)&v41);
                }
              }
              return DecoderSpecificBitStreamFromESDS;
            }
            return -50;
          }
          return 561213539;
        }
        if (!inSpecifier)
          return -50;
        return GetMagicCookieFromISOSampleEntry((uint64_t)inSpecifier, inSpecifierSize, ioPropertyDataSize, (uint64_t)outPropertyData);
      }
      if (!inSpecifier)
        return -50;
      CanBeAuthorized = AudioFormatProperty_FormatIDFromISOAudioSampleEntry((uint64_t)inSpecifier, inSpecifierSize);
LABEL_370:
      DecoderSpecificBitStreamFromESDS = CanBeAuthorized;
      if (CanBeAuthorized)
        return DecoderSpecificBitStreamFromESDS;
      goto LABEL_783;
    }
    if ((int)inPropertyID > 1717855599)
    {
      if ((int)inPropertyID > 1718383475)
      {
        if (inPropertyID != 1718383476)
        {
          if (inPropertyID != 1718449257)
          {
            if (inPropertyID != 1718509933)
              return DecoderSpecificBitStreamFromESDS;
            v12 = 561213539;
            if (inSpecifierSize != 40)
              return v12;
            if (!inSpecifier)
              return -50;
            if (*ioPropertyDataSize != 8)
              return 561211770;
            return AudioFormatProperty_FormatName((AudioStreamBasicDescription *)inSpecifier, (const __CFString **)outPropertyData);
          }
          if (*ioPropertyDataSize == 40)
            return AudioFormatProperty_FormatInfo(*(uint64_t *)&inSpecifierSize, inSpecifier, (AudioStreamBasicDescription *)outPropertyData);
          return 561211770;
        }
        if (inSpecifier)
        {
          if (!inSpecifierSize)
            return 561213539;
          if (*ioPropertyDataSize != 48)
            return AudioFormatProperty_FormatList((const AudioFormatInfo *)inSpecifier, inSpecifierSize, ioPropertyDataSize, (AudioFormatListItem *)outPropertyData);
          LODWORD(v191[0].mSampleRate) = 0;
          DecoderSpecificBitStreamFromESDS = AudioFormatProperty_FormatListSize((const AudioFormatInfo *)inSpecifier, inSpecifierSize, (unsigned int *)v191);
          if (DecoderSpecificBitStreamFromESDS)
            return DecoderSpecificBitStreamFromESDS;
          CADeprecated::CAAutoFree<AudioFormatListItem>::CAAutoFree(&v180, LODWORD(v191[0].mSampleRate), 1);
          FormatListFromCodecs = AudioFormatProperty_FormatList((const AudioFormatInfo *)v8, v9, (unsigned int *)v191, *(AudioFormatListItem **)&v180.mSampleRate);
          goto LABEL_695;
        }
        return 2003329396;
      }
      if (inPropertyID == 1717855600 || inPropertyID == 1717925990)
      {
LABEL_242:
        if (!inSpecifier)
          return -50;
        v12 = 561213539;
        if (inSpecifierSize != 4)
        {
          if (inSpecifierSize != 40)
            return v12;
          v8 = (unsigned int *)((char *)inSpecifier + 8);
        }
        if (*ioPropertyDataSize != 4)
          return 561211770;
        v48 = (RegistryAccess *)*v8;
        if (inPropertyID == 1717855600)
          return AudioFormatProperty_FormatEmploysDependentPackets(v48, (unsigned int *)outPropertyData);
        if (inPropertyID == 1719034482 || inPropertyID == 1717925990)
          return AudioFormatProperty_FormatIsVBR(v48, (unsigned int *)outPropertyData);
        return 0;
      }
      if (inPropertyID != 1718183273)
        return DecoderSpecificBitStreamFromESDS;
      if (!inSpecifier)
        return -50;
      v12 = 561213539;
      if (inSpecifierSize < 4)
        return v12;
      if (*ioPropertyDataSize < 8)
        return 561211770;
      LODWORD(v180.mSampleRate) = 1969977198;
      v24 = AudioFormatEncryptedFormatTranslator::DecryptFormatID(*(unsigned int *)inSpecifier, (int *)&v180);
      v25 = LODWORD(v180.mSampleRate);
      if (LODWORD(v180.mSampleRate) != 1969977198)
      {
        DecoderSpecificBitStreamFromESDS = 0;
        *(_DWORD *)outPropertyData = v24;
        *((_DWORD *)outPropertyData + 1) = v25;
        v26 = 8;
        goto LABEL_784;
      }
      return 560360820;
    }
    if ((int)inPropertyID > 1702061156)
    {
      if (inPropertyID == 1702061157)
      {
        if (!inSpecifier)
          return -50;
        v34 = AudioFormatProperty_ESDSFromESD((unsigned __int8 *)inSpecifier, inSpecifierSize, (char *)outPropertyData, ioPropertyDataSize);
      }
      else
      {
        if (inPropertyID != 1702061673 && inPropertyID != 1702064996)
          return DecoderSpecificBitStreamFromESDS;
        if (*ioPropertyDataSize < 0x28)
          return 561211770;
        if (!inSpecifier)
          return -50;
        v34 = AudioFormatProperty_AudioFormatInfoFromESDS((unsigned __int8 *)inSpecifier, inSpecifierSize, ioPropertyDataSize, (AudioStreamBasicDescription *)outPropertyData);
      }
      goto LABEL_448;
    }
    if (inPropertyID == 1701733230)
    {
      if (!inSpecifier)
        return -50;
      v12 = 561213539;
      if (inSpecifierSize < 8 || (unint64_t)*((unsigned int *)inSpecifier + 1) + 8 > inSpecifierSize)
        return v12;
      return AudioFormatProperty_EncapsulatedMagicCookieNameForCodingName((int *)inSpecifier, ioPropertyDataSize, (int *)outPropertyData);
    }
    if (inPropertyID != 1702060908)
      return DecoderSpecificBitStreamFromESDS;
    if (*ioPropertyDataSize != 32)
      return 561211770;
    if (!inSpecifier)
      return -50;
    *(_OWORD *)outPropertyData = 0u;
    *((_OWORD *)outPropertyData + 1) = 0u;
    v28 = AudioFormatProperty_ChannelLayoutFromESDS((unsigned __int8 *)inSpecifier, inSpecifierSize, (AudioChannelLayout *)outPropertyData);
LABEL_264:
    v12 = v28;
    if (v28)
      return v12;
    DecoderSpecificBitStreamFromESDS = 0;
    goto LABEL_266;
  }
  if ((int)inPropertyID > 1935893601)
  {
    if ((int)inPropertyID <= 1986946670)
    {
      if ((int)inPropertyID <= 1936745323)
      {
        if (inPropertyID != 1935893602)
        {
          if (inPropertyID == 1935962211)
          {
            v12 = -50;
            if (inSpecifierSize != 40 || !inSpecifier)
              return v12;
            if (*ioPropertyDataSize >= 0xE)
            {
              if (*ioPropertyDataSize != 14)
                *ioPropertyDataSize = 14;
              return AudioFormatProperty_ISOPCMConfigForASBD(inSpecifier, (uint64_t)outPropertyData);
            }
            return 561211770;
          }
          if (inPropertyID != 1936286825)
            return DecoderSpecificBitStreamFromESDS;
          if (inSpecifierSize < 0x38)
            return 561213539;
          if (!inSpecifier)
            return -50;
          v22 = 1936286825;
          return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, ioPropertyDataSize, outPropertyData, v22);
        }
        if (inSpecifierSize != 8)
          return 561213539;
        if (!inSpecifier)
          return -50;
        DecoderSpecificBitStreamFromESDS = 0;
        *(float *)outPropertyData = AudioFormatProperty_SoundCheckVolumeDB(*(const __CFDictionary **)inSpecifier, 8, (float *)inSpecifier);
LABEL_783:
        v26 = 4;
        goto LABEL_784;
      }
      if (inPropertyID != 1936745324)
      {
        if (inPropertyID != 1952540515)
        {
          if (inPropertyID != 1986093932)
            return DecoderSpecificBitStreamFromESDS;
          SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v180, inSpecifier, inSpecifierSize);
          v13 = v180.mSampleRate;
          DecoderSpecificBitStreamFromESDS = AudioFormatProperty_ValidateChannelLayout(*(const AudioChannelLayout **)&v180.mSampleRate, v9);
          if (v13 == 0.0)
            return DecoderSpecificBitStreamFromESDS;
          goto LABEL_470;
        }
        if (inSpecifierSize != 4)
          return 561213539;
        if (!inSpecifier)
          return -50;
        v94 = 0;
        v95 = *(_DWORD *)inSpecifier;
        v96 = *ioPropertyDataSize >> 2;
        v97 = 2u;
        do
        {
          if (v97 != 49 && (unsigned __int16)gAllLayoutTags[v97] == v95)
          {
            if (outPropertyData && v94 < v96)
              *((_DWORD *)outPropertyData + v94) = gAllLayoutTags[v97];
            ++v94;
          }
          ++v97;
        }
        while (v97 != 122);
        DecoderSpecificBitStreamFromESDS = 0;
        v26 = 4 * v94;
        goto LABEL_784;
      }
      if (!inSpecifier)
        return -50;
      v12 = 561213539;
      if (inSpecifierSize < 0x20)
        return v12;
      if (*ioPropertyDataSize >= 4)
      {
        v35 = AudioFormatProperty_SpeakerHemispheresForChannelLayout((const AudioChannelLayout *)inSpecifier, *(const AudioChannelLayout **)&inSpecifierSize);
        goto LABEL_398;
      }
      return 561211770;
    }
    if ((int)inPropertyID <= 2020107115)
    {
      if (inPropertyID == 1986946671)
      {
        if (!inSpecifier)
          return -50;
        if (inSpecifierSize < 0x38)
          return 561213539;
        return AudioFormatProperty_VorbisModeInfoFromFormatInfo((const AudioFormatInfo *)inSpecifier, ioPropertyDataSize, (uint64_t)outPropertyData);
      }
      if (inPropertyID == 1987076466)
      {
        if (!inSpecifier)
          return -50;
        if (inSpecifierSize < 0x38)
          return 561213539;
        v22 = 1987076466;
        return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, ioPropertyDataSize, outPropertyData, v22);
      }
      if (inPropertyID != 2020106611)
        return DecoderSpecificBitStreamFromESDS;
      v12 = 561213539;
      if (inSpecifierSize < 8)
        return v12;
      if (!inSpecifier)
        return -50;
      DecoderSpecificBitStreamFromESDS = 0;
      v29 = bswap32(*(_DWORD *)inSpecifier);
      if (v29 > 1902207330)
      {
        if (v29 > 2053202274)
        {
          if (v29 > 2053202799)
          {
            if (v29 == 2053464883 || v29 == 2053319475)
              goto LABEL_684;
            v108 = 25456;
          }
          else
          {
            if (v29 == 2053202275)
              goto LABEL_675;
            if (v29 == 2053202739)
              goto LABEL_658;
            v108 = 25448;
          }
          v30 = v108 | 0x7A610000;
        }
        else
        {
          if (v29 > 1902207855)
          {
            if (v29 == 1902207856)
              goto LABEL_675;
            if (v29 == 1902324531)
              goto LABEL_684;
            v117 = 1902469939;
            goto LABEL_668;
          }
          if (v29 == 1902207331)
            goto LABEL_675;
          if (v29 == 1902207795)
            goto LABEL_658;
          v30 = 1902207848;
        }
      }
      else
      {
        if (v29 <= 1885430114)
        {
          if (v29 <= 1633889586)
          {
            if (v29 != 1633772320 && v29 != 1633772392)
            {
              v30 = 1633772400;
              goto LABEL_674;
            }
LABEL_675:
            DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)&v180);
            memset(v191, 0, 40);
            v120 = *((unsigned __int8 *)v8 + 7) + 2;
            MEMORY[0x1E0C80A78](v121);
            *(_QWORD *)&v123 = (char *)&v172 - v122;
            bzero(&v180, 0x4C8uLL);
            **(_BYTE **)&v123 = 5;
            v124 = *((unsigned __int8 *)v8 + 7);
            *(_BYTE *)(*(_QWORD *)&v123 + 1) = v124;
            memcpy((void *)(*(_QWORD *)&v123 + 2), v8 + 2, v124);
            v125 = *(_QWORD *)&v123 + v120;
            v179.mSampleRate = v123;
            *(_QWORD *)&v179.mFormatID = *(_QWORD *)&v123 + v120;
            *(_QWORD *)&v179.mBytesPerPacket = 0;
            if ((LOBYTE(v123) & 3) != 0)
            {
              v126 = 0;
              v127 = LOBYTE(v123) + 1;
              v128 = -8;
              do
              {
                v129 = v128;
                v130 = **(_BYTE **)&v123;
                ++*(_QWORD *)&v123;
                v126 = v130 | (v126 << 8);
                v128 += 8;
                if ((v127 & 3) == 0)
                  break;
                ++v127;
              }
              while (*(_QWORD *)&v123 < v125);
              v179.mSampleRate = v123;
              v179.mBytesPerPacket = v126 << (24 - v128);
              v179.mFramesPerPacket = v129 + 16;
            }
            DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload((uint64_t)&v180, (uint64_t)&v179, 0);
            DecoderSpecificBitStreamFromESDS = 1718449215;
            if (!DecoderConfigDescr::GetASBD((DecoderConfigDescr *)&v180, v191)
              && *ioPropertyDataSize >= 0x28)
            {
              DecoderSpecificBitStreamFromESDS = 0;
              v191[0].mFormatID = bswap32(*v8);
              *((_QWORD *)outPropertyData + 4) = *(_QWORD *)&v191[0].mBitsPerChannel;
              v131 = *(_OWORD *)&v191[0].mBytesPerPacket;
              *(_OWORD *)outPropertyData = *(_OWORD *)&v191[0].mSampleRate;
              *((_OWORD *)outPropertyData + 1) = v131;
              *ioPropertyDataSize = 40;
            }
LABEL_744:
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v188);
            v154 = &v187;
LABEL_774:
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v154);
            return DecoderSpecificBitStreamFromESDS;
          }
          if (v29 != 1633889587)
          {
            if (v29 != 1700997939)
            {
              v117 = 1700998451;
LABEL_668:
              if (v29 != v117)
                return DecoderSpecificBitStreamFromESDS;
            }
LABEL_684:
            if (*ioPropertyDataSize <= 0x27)
              goto LABEL_685;
            v26 = 0;
            DecoderSpecificBitStreamFromESDS = 560226676;
            memset(v191, 0, 40);
            v132 = *((unsigned __int8 *)inSpecifier + 7);
            if ((v132 - 5) > 0x20 || v132 > 0x25)
              goto LABEL_784;
            v133 = v132 + 8;
            *(_QWORD *)&v180.mSampleRate = bswap32(v132 + 8) | 0x3363656400000000;
            memcpy(&v180.mFormatID, v8 + 2, v132);
            DecoderSpecificBitStreamFromESDS = ParseEAC3MP4Cookie((unsigned int *)&v180, v133, 0, 0, (unsigned int *)v191, 0, v134, v135, v172, v173, v174, (unsigned int *)v175);
            *ioPropertyDataSize = 0;
            if (DecoderSpecificBitStreamFromESDS)
              return DecoderSpecificBitStreamFromESDS;
            v136 = bswap32(*v8);
            if (v136 > 1902324530)
            {
              if (v136 == 1902324531)
              {
                v136 = 1902469939;
              }
              else if (v136 == 2053319475)
              {
                v136 = 2053464883;
              }
            }
            else if (v136 == 1700997939)
            {
              v136 = 1700998451;
            }
            else if (v136 == 1885547315)
            {
              v136 = 1885692723;
            }
            DecoderSpecificBitStreamFromESDS = 0;
            v191[0].mFormatID = v136;
            *((_QWORD *)outPropertyData + 4) = *(_QWORD *)&v191[0].mBitsPerChannel;
            v118 = *(_OWORD *)&v191[0].mBytesPerPacket;
            v119 = *(_OWORD *)&v191[0].mSampleRate;
            goto LABEL_791;
          }
LABEL_658:
          DecoderSpecificBitStreamFromESDS = 1718449215;
          memset(&v180, 0, sizeof(v180));
          if (ParseAC3Header((unsigned __int8 *)inSpecifier + 8, *((unsigned __int8 *)inSpecifier + 7), &v180, 0, 0, 0, 0, 0)|| *ioPropertyDataSize < 0x28)
          {
            v26 = 0;
            goto LABEL_784;
          }
          DecoderSpecificBitStreamFromESDS = 0;
          v180.mFormatID = bswap32(*v8);
          *((_QWORD *)outPropertyData + 4) = *(_QWORD *)&v180.mBitsPerChannel;
          v119 = *(_OWORD *)&v180.mSampleRate;
          v118 = *(_OWORD *)&v180.mBytesPerPacket;
LABEL_791:
          *(_OWORD *)outPropertyData = v119;
          *((_OWORD *)outPropertyData + 1) = v118;
LABEL_323:
          v26 = 40;
          goto LABEL_784;
        }
        if (v29 > 1885430639)
        {
          if (v29 == 1885430640)
            goto LABEL_675;
          if (v29 == 1885547315)
            goto LABEL_684;
          v117 = 1885692723;
          goto LABEL_668;
        }
        if (v29 == 1885430115)
          goto LABEL_675;
        if (v29 == 1885430579)
          goto LABEL_658;
        v30 = 1885430632;
      }
LABEL_674:
      if (v29 != v30)
        return DecoderSpecificBitStreamFromESDS;
      goto LABEL_675;
    }
    if (inPropertyID != 2020107116)
    {
      if (inPropertyID != 2020109667)
      {
        if (inPropertyID != 2020110438)
          return DecoderSpecificBitStreamFromESDS;
        if (inSpecifierSize < 8)
          return 561213539;
        if (!inSpecifier)
          return -50;
        DecoderSpecificBitStreamFromESDS = 0;
        *(_DWORD *)outPropertyData = bswap32(*((unsigned __int16 *)inSpecifier + 2)) >> 16;
        v26 = 2;
        goto LABEL_784;
      }
      if (inSpecifierSize < 8)
        return 561213539;
      if (!inSpecifier)
        return -50;
      DecoderSpecificBitStreamFromESDS = 0;
      v98 = bswap32(*(_DWORD *)inSpecifier);
      if (v98 > 1902207330)
      {
        if (v98 > 2053202274)
        {
          if (v98 > 2053202791)
          {
            if (v98 == 2053202792)
              goto LABEL_758;
            if (v98 == 2053464883)
              goto LABEL_629;
            v109 = 2053202800;
            goto LABEL_747;
          }
          if (v98 == 2053202275)
            goto LABEL_758;
          v155 = 2053202739;
        }
        else
        {
          if (v98 > 1902207847)
          {
            if (v98 == 1902207848 || v98 == 1902207856)
              goto LABEL_758;
            v99 = 1902469939;
            goto LABEL_612;
          }
          if (v98 == 1902207331)
            goto LABEL_758;
          v155 = 1902207795;
        }
      }
      else
      {
        if (v98 <= 1885430114)
        {
          if (v98 > 1633772399)
          {
            if (v98 != 1633772400)
            {
              if (v98 != 1633889587)
              {
                v99 = 1700998451;
                goto LABEL_612;
              }
LABEL_756:
              v156 = *((unsigned __int8 *)inSpecifier + 7);
              if (*ioPropertyDataSize < v156)
                return 1718449215;
              return ConvertAC3HeaderToAC3MP4Cookie((unsigned __int8 *)inSpecifier + 8, v156, (unsigned __int8 *)outPropertyData, ioPropertyDataSize);
            }
LABEL_758:
            DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)v191);
            memset(&v179, 0, sizeof(v179));
            v157 = *((unsigned __int8 *)v8 + 7) + 2;
            MEMORY[0x1E0C80A78](v158);
            v160 = (char *)&v172 - v159;
            bzero(v191, 0x4C8uLL);
            *v160 = 5;
            v161 = *((unsigned __int8 *)v8 + 7);
            v160[1] = v161;
            memcpy(v160 + 2, v8 + 2, v161);
            v162 = &v160[v157];
            v177[0] = v160;
            v177[1] = &v160[v157];
            v178 = 0;
            if ((v160 & 3) != 0)
            {
              v163 = 0;
              v164 = (_BYTE)v160 + 1;
              v165 = -8;
              do
              {
                v166 = v165;
                v167 = *v160++;
                v163 = v167 | (v163 << 8);
                v165 += 8;
                if ((v164 & 3) == 0)
                  break;
                ++v164;
              }
              while (v160 < v162);
              v177[0] = v160;
              LODWORD(v178) = v163 << (24 - v165);
              HIDWORD(v178) = v166 + 16;
            }
            DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload((uint64_t)v191, (uint64_t)v177, 0);
            DecoderSpecificBitStreamFromESDS = 1718449215;
            if (DecoderConfigDescr::GetASBD((DecoderConfigDescr *)v191, &v179))
              v168 = 1718449215;
            else
              v168 = 0;
            v191[0].mFormatID = 64;
            *(_QWORD *)&v191[0].mFormatFlags = 5;
            v191[0].mChannelsPerFrame = 0;
            *(_QWORD *)&v191[0].mFramesPerPacket = 6144 * v179.mChannelsPerFrame;
            DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)v186);
            MP4AudioESDS::SetDecoderConfigDescriptor((MP4AudioESDS *)&v180, (const DecoderConfigDescr *)v191);
            if (v186[2] == 64)
              v169 = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount((DecoderConfigDescr *)v186) + 37;
            else
              v169 = 19;
            if (*ioPropertyDataSize >= v169)
            {
              v170 = operator new[]();
              v172 = (unsigned int *)v170;
              v173 = v170;
              v174 = (BOOL *)(v170 + v169);
              v175 = 0x2000000000;
              v176 = v170 & 3;
              if (!MP4AudioESDS::Serialize((uint64_t)&v180, (uint64_t)&v172, 0, 0))
              {
                memcpy(outPropertyData, (const void *)v170, v169);
                *ioPropertyDataSize = v169;
                DecoderSpecificBitStreamFromESDS = v168;
              }
              MEMORY[0x193FFE460](v170, 0x1000C4077774924);
            }
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v190);
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v189);
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v193);
            v154 = &v192;
            goto LABEL_774;
          }
          if (v98 == 1633772320)
            goto LABEL_758;
          v109 = 1633772392;
LABEL_747:
          if (v98 != v109)
            return DecoderSpecificBitStreamFromESDS;
          goto LABEL_758;
        }
        if (v98 > 1885430631)
        {
          if (v98 == 1885430632 || v98 == 1885430640)
            goto LABEL_758;
          v99 = 1885692723;
LABEL_612:
          if (v98 != v99)
            return DecoderSpecificBitStreamFromESDS;
LABEL_629:
          v115 = *((unsigned __int8 *)inSpecifier + 7);
          if ((v115 - 38) >= 0xFFFFFFDF
            && outPropertyData
            && (v116 = v115 + 8, *ioPropertyDataSize >= (int)v115 + 8))
          {
            *(_DWORD *)outPropertyData = bswap32(v116);
            *((_DWORD *)outPropertyData + 1) = 862152036;
            memcpy((char *)outPropertyData + 8, v8 + 2, v115);
            DecoderSpecificBitStreamFromESDS = 0;
            *ioPropertyDataSize = v116;
          }
          else
          {
            DecoderSpecificBitStreamFromESDS = 1718449215;
            *ioPropertyDataSize = 0;
          }
          return DecoderSpecificBitStreamFromESDS;
        }
        if (v98 == 1885430115)
          goto LABEL_758;
        v155 = 1885430579;
      }
      if (v98 != v155)
        return DecoderSpecificBitStreamFromESDS;
      goto LABEL_756;
    }
    v12 = 561213539;
    if (inSpecifierSize < 8)
      return v12;
    if (!inSpecifier)
      return -50;
    DecoderSpecificBitStreamFromESDS = 0;
    v75 = bswap32(*(_DWORD *)inSpecifier);
    if (v75 > 1902207330)
    {
      if (v75 > 2053202274)
      {
        if (v75 > 2053202791)
        {
          if (v75 == 2053202792)
            goto LABEL_734;
          if (v75 == 2053464883)
          {
LABEL_624:
            if (*ioPropertyDataSize <= 0x1F)
            {
LABEL_685:
              *ioPropertyDataSize = 0;
              return 561211770;
            }
            v26 = 0;
            DecoderSpecificBitStreamFromESDS = 560226676;
            LODWORD(v191[0].mSampleRate) = 0;
            v110 = *((unsigned __int8 *)inSpecifier + 7);
            if ((v110 - 5) > 0x20 || v110 > 0x25)
              goto LABEL_784;
            v111 = v110 + 8;
            *(_QWORD *)&v180.mSampleRate = bswap32(v110 + 8) | 0x3363656400000000;
            memcpy(&v180.mFormatID, v8 + 2, v110);
            DecoderSpecificBitStreamFromESDS = ParseEAC3MP4Cookie((unsigned int *)&v180, v111, 0, 0, 0, v191, v112, v113, v172, v173, v174, (unsigned int *)v175);
            *ioPropertyDataSize = 0;
            if (DecoderSpecificBitStreamFromESDS)
              return DecoderSpecificBitStreamFromESDS;
            *(_QWORD *)((char *)outPropertyData + 12) = 0;
            *(_QWORD *)((char *)outPropertyData + 4) = 0;
            *((_DWORD *)outPropertyData + 7) = 0;
            *(_QWORD *)((char *)outPropertyData + 20) = 0;
            v114 = LODWORD(v191[0].mSampleRate);
            goto LABEL_733;
          }
          v107 = 2053202800;
          goto LABEL_719;
        }
        if (v75 == 2053202275)
          goto LABEL_734;
        v142 = 2053202739;
      }
      else
      {
        if (v75 > 1902207847)
        {
          if (v75 == 1902207848 || v75 == 1902207856)
            goto LABEL_734;
          v76 = 1902469939;
          goto LABEL_594;
        }
        if (v75 == 1902207331)
          goto LABEL_734;
        v142 = 1902207795;
      }
    }
    else
    {
      if (v75 <= 1885430114)
      {
        if (v75 > 1633772399)
        {
          if (v75 != 1633772400)
          {
            if (v75 != 1633889587)
            {
              v76 = 1700998451;
              goto LABEL_594;
            }
LABEL_728:
            LODWORD(v180.mSampleRate) = 0;
            if (ParseAC3Header((unsigned __int8 *)inSpecifier + 8, *((unsigned __int8 *)inSpecifier + 7), 0, (unsigned int *)&v180, 0, 0, 0, 0))DecoderSpecificBitStreamFromESDS = 1718449215;
            else
              DecoderSpecificBitStreamFromESDS = 0;
            if (*ioPropertyDataSize < 0x20)
              return DecoderSpecificBitStreamFromESDS;
            *(_QWORD *)((char *)outPropertyData + 12) = 0;
            *(_QWORD *)((char *)outPropertyData + 4) = 0;
            *((_DWORD *)outPropertyData + 7) = 0;
            *(_QWORD *)((char *)outPropertyData + 20) = 0;
            v114 = LODWORD(v180.mSampleRate);
LABEL_733:
            *(_DWORD *)outPropertyData = v114;
LABEL_266:
            v26 = 32;
            goto LABEL_784;
          }
LABEL_734:
          DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)&v180);
          v143 = *((unsigned __int8 *)v8 + 7) + 2;
          MEMORY[0x1E0C80A78](v144);
          *(_QWORD *)&v146 = (char *)&v172 - v145;
          LODWORD(v179.mSampleRate) = 0;
          bzero(&v180, 0x4C8uLL);
          **(_BYTE **)&v146 = 5;
          v147 = *((unsigned __int8 *)v8 + 7);
          *(_BYTE *)(*(_QWORD *)&v146 + 1) = v147;
          memcpy((void *)(*(_QWORD *)&v146 + 2), v8 + 2, v147);
          v148 = *(_QWORD *)&v146 + v143;
          v191[0].mSampleRate = v146;
          *(_QWORD *)&v191[0].mFormatID = *(_QWORD *)&v146 + v143;
          *(_QWORD *)&v191[0].mBytesPerPacket = 0;
          if ((LOBYTE(v146) & 3) != 0)
          {
            v149 = 0;
            v150 = LOBYTE(v146) + 1;
            v151 = -8;
            do
            {
              v152 = v151;
              v153 = **(_BYTE **)&v146;
              ++*(_QWORD *)&v146;
              v149 = v153 | (v149 << 8);
              v151 += 8;
              if ((v150 & 3) == 0)
                break;
              ++v150;
            }
            while (*(_QWORD *)&v146 < v148);
            v191[0].mSampleRate = v146;
            v191[0].mFramesPerPacket = v152 + 16;
            v191[0].mBytesPerPacket = v149 << (24 - v151);
          }
          DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload((uint64_t)&v180, (uint64_t)v191, 0);
          if (DecoderConfigDescr::GetChannelLayoutTag((DecoderConfigDescr *)&v180, (unsigned int *)&v179))
            DecoderSpecificBitStreamFromESDS = 1718449215;
          else
            DecoderSpecificBitStreamFromESDS = 0;
          if (*ioPropertyDataSize >= 0x20)
          {
            *(_QWORD *)((char *)outPropertyData + 12) = 0;
            *(_QWORD *)((char *)outPropertyData + 4) = 0;
            *((_DWORD *)outPropertyData + 7) = 0;
            *(_QWORD *)((char *)outPropertyData + 20) = 0;
            *(_DWORD *)outPropertyData = LODWORD(v179.mSampleRate);
            *ioPropertyDataSize = 32;
          }
          goto LABEL_744;
        }
        if (v75 == 1633772320)
          goto LABEL_734;
        v107 = 1633772392;
LABEL_719:
        if (v75 != v107)
          return DecoderSpecificBitStreamFromESDS;
        goto LABEL_734;
      }
      if (v75 > 1885430631)
      {
        if (v75 == 1885430632 || v75 == 1885430640)
          goto LABEL_734;
        v76 = 1885692723;
LABEL_594:
        if (v75 != v76)
          return DecoderSpecificBitStreamFromESDS;
        goto LABEL_624;
      }
      if (v75 == 1885430115)
        goto LABEL_734;
      v142 = 1885430579;
    }
    if (v75 != v142)
      return DecoderSpecificBitStreamFromESDS;
    goto LABEL_728;
  }
  if ((int)inPropertyID > 1852008556)
  {
    if ((int)inPropertyID <= 1885433452)
    {
      if (inPropertyID != 1852008557)
      {
        if (inPropertyID != 1852992877)
        {
          if (inPropertyID != 1868983411)
            return DecoderSpecificBitStreamFromESDS;
          if (inSpecifier)
          {
            v12 = 561213539;
            if (!inSpecifierSize)
              return v12;
            if (*ioPropertyDataSize == 48)
            {
              LODWORD(v191[0].mSampleRate) = 0;
              DecoderSpecificBitStreamFromESDS = FetchFormatListFromCodecs((uint64_t (*)(void))GetOutputFormatListFromCodec, (const AudioFormatInfo *)inSpecifier, inSpecifierSize, (unsigned int *)v191, 0);
              if (DecoderSpecificBitStreamFromESDS)
                return DecoderSpecificBitStreamFromESDS;
              CADeprecated::CAAutoFree<AudioFormatListItem>::CAAutoFree(&v180, LODWORD(v191[0].mSampleRate), 1);
              if (LODWORD(v191[0].mSampleRate) < 0x30)
              {
                DecoderSpecificBitStreamFromESDS = 561211770;
                goto LABEL_696;
              }
              FormatListFromCodecs = FetchFormatListFromCodecs((uint64_t (*)(void))GetOutputFormatListFromCodec, (const AudioFormatInfo *)v8, v9, (unsigned int *)v191, *(AudioFormatListItem **)&v180.mSampleRate);
LABEL_695:
              DecoderSpecificBitStreamFromESDS = FormatListFromCodecs;
              if (!FormatListFromCodecs)
              {
                v137 = v180.mSampleRate;
                v139 = *(_OWORD *)(*(_QWORD *)&v180.mSampleRate + 16);
                v138 = *(_OWORD *)(*(_QWORD *)&v180.mSampleRate + 32);
                *(_OWORD *)outPropertyData = **(_OWORD **)&v180.mSampleRate;
                *((_OWORD *)outPropertyData + 1) = v139;
                *((_OWORD *)outPropertyData + 2) = v138;
LABEL_699:
                free(*(void **)&v137);
                return DecoderSpecificBitStreamFromESDS;
              }
LABEL_696:
              *ioPropertyDataSize = 0;
              v137 = v180.mSampleRate;
              if (!*(_QWORD *)&v180.mSampleRate)
                return DecoderSpecificBitStreamFromESDS;
              goto LABEL_699;
            }
            if (*ioPropertyDataSize >= 0x30)
              return FetchFormatListFromCodecs((uint64_t (*)(void))GetOutputFormatListFromCodec, (const AudioFormatInfo *)inSpecifier, inSpecifierSize, ioPropertyDataSize, (AudioFormatListItem *)outPropertyData);
            return 561211770;
          }
          return 2003329396;
        }
        v12 = 561213539;
        if (inSpecifierSize != 16)
          return v12;
        if (!inSpecifier)
          return -50;
        SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v180, *(const void **)inSpecifier, 20 * *(_DWORD *)(*(_QWORD *)inSpecifier + 8) + 12);
        SanitizeClientAudioChannelLayout((const AudioChannelLayout *)v191, *((const void **)v8 + 1), 20 * *(_DWORD *)(*((_QWORD *)v8 + 1) + 8) + 12);
        v86 = v180.mSampleRate;
        v87 = v191[0].mSampleRate;
        v88 = *ioPropertyDataSize;
        if (v88 == 4)
        {
          v89 = **(_DWORD **)&v191[0].mSampleRate;
          v91 = **(_DWORD **)&v180.mSampleRate == 7012356 || (**(_DWORD **)&v180.mSampleRate & 0xFFFE0000) == 12451840;
          v93 = v89 == 7012356 || (v89 & 0xFFFE0000) == 12451840 || v91;
          *(_DWORD *)outPropertyData = v93 ^ 1;
        }
        else if (!*(_QWORD *)&v191[0].mSampleRate)
        {
          goto LABEL_560;
        }
        (*(void (**)(Float64))&v191[0].mFormatID)(COERCE_FLOAT64(*(_QWORD *)&v87));
LABEL_560:
        if (v86 != 0.0)
          (*(void (**)(Float64))&v180.mFormatID)(COERCE_FLOAT64(*(_QWORD *)&v86));
        if (v88 != 4)
          return 561211770;
        return 0;
      }
      v12 = 561213539;
      if (*ioPropertyDataSize != 4)
        return 561211770;
      if (inSpecifierSize < 0xC)
        return v12;
      if (!inSpecifier)
        return -50;
      if (20 * *((_DWORD *)inSpecifier + 2) + 12 > inSpecifierSize)
        return v12;
      LODWORD(v191[0].mSampleRate) = 0;
      SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v180, inSpecifier, inSpecifierSize);
      v71 = v180.mSampleRate;
      DecoderSpecificBitStreamFromESDS = AudioFormatProperty_NumberOfChannelsForLayout(*(const AudioChannelLayout **)&v180.mSampleRate, (unsigned int *)v191);
      if (v71 != 0.0)
        (*(void (**)(Float64))&v180.mFormatID)(COERCE_FLOAT64(*(_QWORD *)&v71));
      goto LABEL_386;
    }
    if (inPropertyID != 1885433453)
    {
      if (inPropertyID == 1885565796)
      {
        if (*ioPropertyDataSize == 40)
        {
          v12 = -50;
          if (inSpecifierSize != 14 || !inSpecifier)
            return v12;
          return AudioFormatProperty_ASBDForISOPCMConfig((uint64_t)inSpecifier, (uint64_t)outPropertyData);
        }
        return 561211770;
      }
      if (inPropertyID != 1886677364)
        return DecoderSpecificBitStreamFromESDS;
      v12 = 561213539;
      if (!inSpecifierSize)
        return v12;
      if (!inSpecifier)
        return -50;
      if (*ioPropertyDataSize < 0x10)
        return 561211770;
      DecoderSpecificBitStreamFromESDS = ParseiTunesSMPBData((char *)inSpecifier, inSpecifierSize, (AudioFilePacketTableInfo *)outPropertyData);
      v26 = 16;
LABEL_784:
      *ioPropertyDataSize = v26;
      return DecoderSpecificBitStreamFromESDS;
    }
    v12 = 561213539;
    if (inSpecifierSize != 32)
      return v12;
    if (!inSpecifier)
      return -50;
    v72 = *((_OWORD *)inSpecifier + 1);
    *(_OWORD *)&v180.mSampleRate = *(_OWORD *)inSpecifier;
    *(_OWORD *)&v180.mBytesPerPacket = v72;
    SanitizeClientAudioChannelLayout((const AudioChannelLayout *)v191, *((const void **)&v72 + 1), 20 * *(_DWORD *)(*((_QWORD *)&v72 + 1) + 8) + 12);
    mSampleRate = v191[0].mSampleRate;
    *(Float64 *)&v180.mBytesPerFrame = v191[0].mSampleRate;
    LODWORD(v179.mSampleRate) = 0;
    v74 = AudioFormatProperty_NumberOfChannelsForLayout(*(const AudioChannelLayout **)&v191[0].mSampleRate, (unsigned int *)&v179);
    if (v74)
    {
      DecoderSpecificBitStreamFromESDS = v74;
      v47 = 0;
      v12 = v74;
    }
    else
    {
      v12 = 561211770;
      if (*ioPropertyDataSize == 4 * LODWORD(v179.mSampleRate))
      {
        DecoderSpecificBitStreamFromESDS = AudioFormatProperty_PanningMatrix((const AudioPanningInfo *)&v180, (float *)outPropertyData);
        v47 = 1;
      }
      else
      {
        v47 = 0;
        DecoderSpecificBitStreamFromESDS = 0;
      }
    }
    if (mSampleRate == 0.0)
      goto LABEL_653;
LABEL_639:
    (*(void (**)(Float64))&v191[0].mFormatID)(COERCE_FLOAT64(*(_QWORD *)&mSampleRate));
    goto LABEL_653;
  }
  if ((int)inPropertyID > 1835230309)
  {
    if (inPropertyID != 1835230310)
    {
      if (inPropertyID != 1835230563)
      {
        if (inPropertyID != 1835884912)
          return DecoderSpecificBitStreamFromESDS;
        v12 = 561213539;
        if (inSpecifierSize != 16)
          return v12;
        if (!inSpecifier)
          return -50;
        SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v180, *(const void **)inSpecifier, 20 * *(_DWORD *)(*(_QWORD *)inSpecifier + 8) + 12);
        SanitizeClientAudioChannelLayout((const AudioChannelLayout *)v191, *((const void **)v8 + 1), 20 * *(_DWORD *)(*((_QWORD *)v8 + 1) + 8) + 12);
        v42 = v180.mSampleRate;
        v43 = v191[0].mSampleRate;
        LODWORD(v179.mSampleRate) = *ioPropertyDataSize >> 2;
        v44 = AudioFormatProperty_MatrixMixMap(*(const AudioChannelLayout *const **)&v180.mSampleRate, *(const AudioChannelLayout **)&v191[0].mSampleRate, (float *)&v179, 0);
        v45 = LODWORD(v179.mSampleRate);
        if (*ioPropertyDataSize == 4 * LODWORD(v179.mSampleRate))
        {
          v46 = AudioFormatProperty_MatrixMixMap(*(const AudioChannelLayout *const **)&v42, *(const AudioChannelLayout **)&v43, (float *)&v179, outPropertyData);
          DecoderSpecificBitStreamFromESDS = v46;
          if (v46)
          {
            v47 = 0;
            v12 = v46;
          }
          else
          {
            v12 = 0;
            *ioPropertyDataSize = 4 * v45;
            v47 = 1;
          }
        }
        else
        {
          DecoderSpecificBitStreamFromESDS = v44;
          v47 = 0;
          v12 = 561211770;
        }
        if (v43 != 0.0)
          (*(void (**)(Float64))&v191[0].mFormatID)(COERCE_FLOAT64(*(_QWORD *)&v43));
        if (v42 != 0.0)
          goto LABEL_652;
        goto LABEL_653;
      }
      if (!inSpecifier)
        return -50;
      if (inSpecifierSize < 0x18)
        return 561213539;
      return AudioFormatProperty_CanonicalMagicCookieFromEncapsulatedMagicCookie((unsigned int *)inSpecifier, ioPropertyDataSize, outPropertyData);
    }
    if (*ioPropertyDataSize == 50)
    {
      if (!inSpecifier)
        return -50;
      return AudioFormatProperty_FLACdfLaAtomFromOldFLACMagicCookie(inSpecifier, inSpecifierSize, (char *)outPropertyData);
    }
    return 561211770;
  }
  if (inPropertyID == 1818520674)
  {
    if (inSpecifierSize)
    {
      if (inSpecifier)
      {
        v180.mSampleRate = 0.0;
        DecoderSpecificBitStreamFromESDS = LoudnessInfoDictionaryForISOLoudnessBox(*(const __CFData **)inSpecifier, (const __CFDictionary **)&v180);
        if (!DecoderSpecificBitStreamFromESDS)
        {
          v70 = v180.mSampleRate;
          if (*(_QWORD *)&v180.mSampleRate)
          {
            *(_QWORD *)outPropertyData = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)&v180.mSampleRate);
            *ioPropertyDataSize = 8;
            CFRelease(*(CFTypeRef *)&v70);
          }
        }
        return DecoderSpecificBitStreamFromESDS;
      }
      return -50;
    }
    return 561213539;
  }
  if (inPropertyID == 1819242093)
  {
    v12 = 561213539;
    if (*ioPropertyDataSize == 8)
    {
      if (inSpecifierSize < 0xC)
        return v12;
      if (!inSpecifier)
        return -50;
      SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v180, inSpecifier, inSpecifierSize);
      v13 = v180.mSampleRate;
      DecoderSpecificBitStreamFromESDS = AudioFormatProperty_ChannelLayoutName(*(const AudioChannelLayout **)&v180.mSampleRate, (const __CFString **)outPropertyData, v84, v85);
      if (v13 != 0.0)
        goto LABEL_470;
      return DecoderSpecificBitStreamFromESDS;
    }
    return 561211770;
  }
  if (inPropertyID != 1819504237)
    return DecoderSpecificBitStreamFromESDS;
  v12 = 561213539;
  if (*ioPropertyDataSize != 8)
    return 561211770;
  if (inSpecifierSize >= 0xC)
  {
    if (inSpecifier)
    {
      SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v180, inSpecifier, inSpecifierSize);
      v13 = v180.mSampleRate;
      DecoderSpecificBitStreamFromESDS = AudioFormatProperty_ChannelLayoutSimpleName(*(const AudioChannelLayout **)&v180.mSampleRate, (const __CFString **)outPropertyData, v14, v15);
      if (v13 != 0.0)
LABEL_470:
        (*(void (**)(Float64))&v180.mFormatID)(COERCE_FLOAT64(*(_QWORD *)&v13));
      return DecoderSpecificBitStreamFromESDS;
    }
    return -50;
  }
  return v12;
}

void sub_18EE4D1B4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18EE4D1C0);
  JUMPOUT(0x18EE4D328);
}

void sub_18EE4D1CC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18EE4D1D8);
  JUMPOUT(0x18EE4D328);
}

void sub_18EE4D22C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18EE4D328);
  JUMPOUT(0x18EE4D3C8);
}

void sub_18EE4D268(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (*(_QWORD *)(v2 + 112))
      (*(void (**)(void))(v2 + 120))();
    JUMPOUT(0x18EE4D3C8);
  }
  JUMPOUT(0x18EE4D328);
}

void sub_18EE4D28C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18EE4D29CLL);
  JUMPOUT(0x18EE4D328);
}

void sub_18EE4D2BC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18EE4D2CCLL);
  JUMPOUT(0x18EE4D328);
}

void sub_18EE4D320(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_18EE4D35C(uint64_t a1, int a2)
{
  if (a2)
  {
    os_unfair_recursive_lock_unlock();
    JUMPOUT(0x18EE4D3C8);
  }
  JUMPOUT(0x18EE4D328);
}

void sub_18EE4D378(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    if (v3)
      (*(void (**)(uint64_t))(v2 + 120))(v3);
    JUMPOUT(0x18EE4D3C8);
  }
  JUMPOUT(0x18EE4D328);
}

void sub_18EE4D3AC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18EE4D3B8);
  JUMPOUT(0x18EE4D328);
}

void sub_18EE4D3BC(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18EE4BBC8);
  }
  JUMPOUT(0x18EE4D328);
}

void sub_18EE4D3F0()
{
  JUMPOUT(0x18EE4D328);
}

uint64_t SanitizeClientAudioChannelLayout(AudioChannelLayout const*,unsigned int)::$_0::__invoke(uint64_t result)
{
  if (result)
    JUMPOUT(0x193FFE43CLL);
  return result;
}

void *SanitizeClientAudioChannelLayout(const AudioChannelLayout *a1, const void *a2, unsigned int a3)
{
  size_t v6;
  _DWORD *v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  unsigned int v12;

  v6 = a3;
  v7 = (_DWORD *)operator new[]();
  *(_QWORD *)&a1->mChannelLayoutTag = v7;
  *(_QWORD *)&a1->mNumberChannelDescriptions = SanitizeClientAudioChannelLayout(AudioChannelLayout const*,unsigned int)::$_0::__invoke;
  result = memcpy(v7, a2, v6);
  if (a3 >= 0xC)
  {
    if (*v7 == 0x10000)
      v7[1] = (v7[1] >> 11) & 0x800 | v7[1] & 0xFFA3FFFF | (v7[1] >> 6) & 0x7000;
    LODWORD(v9) = v7[2];
    if ((_DWORD)v9)
    {
      v10 = (v6 - 12) / 0x14;
      v9 = v9 >= v10 ? v10 : v9;
      if ((_DWORD)v9)
      {
        v11 = v7 + 3;
        do
        {
          v12 = *v11 - 46;
          if (v12 <= 4 && ((0x17u >> v12) & 1) != 0)
            *v11 = dword_18F0F81A0[v12];
          v11 += 5;
          --v9;
        }
        while (v9);
      }
    }
  }
  return result;
}

FILE *CAMemoryStream::cstr(FILE **this)
{
  FILE *v2;

  fflush(*this);
  v2 = this[1];
  if (!v2)
  {
    v2 = (FILE *)malloc_type_malloc(1uLL, 0xADAE35E5uLL);
    this[1] = v2;
    this[3] = (FILE *)1;
  }
  *((_BYTE *)&this[2]->_p + (_QWORD)v2) = 0;
  return this[1];
}

uint64_t AudioFormatProperty_TagForChannelLayout(const AudioChannelLayout *a1, unsigned int *a2)
{
  uint64_t v4;
  AudioChannelLayoutTag mChannelLayoutTag;
  unsigned int v7;
  unsigned int v8;
  char v9;
  char v10;
  AudioChannelLayout *v11;
  char v12;
  uint64_t i;
  int v14;
  unsigned int v16;
  signed int v17;
  AudioChannelLayout v18;
  unsigned int v19;
  AudioChannelLayout *v20;
  unsigned int v21;

  v21 = 0;
  v4 = AudioFormatProperty_NumberOfChannelsForLayout(a1, &v21);
  if (!(_DWORD)v4)
  {
    mChannelLayoutTag = a1->mChannelLayoutTag;
    if (a1->mChannelLayoutTag)
    {
      if (mChannelLayoutTag == 0x10000)
      {
        v7 = AudioFormatProperty_LayoutTagForBitmap(a1->mChannelBitmap);
        if (v7 == 0x10000)
        {
          return 560360820;
        }
        else
        {
          v4 = 0;
          *a2 = v7;
        }
      }
      else
      {
        v4 = 0;
        *a2 = mChannelLayoutTag;
      }
    }
    else
    {
      v20 = 0;
      v8 = v21;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v20, 20 * v21 + 12, 0);
      v9 = 0;
      v19 = 0;
      *(_QWORD *)&v18.mChannelBitmap = 0;
      v10 = 1;
      v11 = v20;
      while (2)
      {
        v12 = v10;
        for (i = 2; i != 122; ++i)
        {
          v14 = gAllLayoutTags[i];
          if ((i & 0x7FFFFFFE) == 0x5C || i == 49)
            v16 = v8;
          else
            v16 = 0;
          v17 = v14 | v16;
          v18.mChannelLayoutTag = v14 | v16;
          if (!AudioFormatProperty_NumberOfChannelsForLayout(&v18, &v19)
            && v8 == v19
            && !AudioFormatProperty_ChannelLayoutForTag(v17, v11)
            && (equalChannels(a1, v11, v9 & 1) & 1) != 0)
          {
            goto LABEL_27;
          }
        }
        if (!AudioFormatProperty_ChannelLayoutForTag(v8 | 0xF0010000, v11)
          && (equalChannels(a1, v11, v9 & 1) & 1) != 0)
        {
          v17 = v8 | 0xF0010000;
LABEL_27:
          v4 = 0;
          *a2 = v17;
          goto LABEL_28;
        }
        v10 = 0;
        v9 = 1;
        if ((v12 & 1) != 0)
          continue;
        break;
      }
      v4 = 560360820;
LABEL_28:
      if (v11)
        free(v11);
    }
  }
  return v4;
}

void sub_18EE4D72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15)
    free(a15);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_NumberOfChannelsForLayout(const AudioChannelLayout *a1, unsigned int *a2)
{
  AudioChannelLayoutTag mChannelLayoutTag;
  uint8x8_t v3;
  BOOL v4;
  unsigned int v5;
  BOOL v6;
  uint64_t result;

  *a2 = 0;
  mChannelLayoutTag = a1->mChannelLayoutTag;
  if ((a1->mChannelLayoutTag & 0x80000000) != 0)
  {
    if (mChannelLayoutTag == -267386874)
    {
      mChannelLayoutTag = 6;
      goto LABEL_25;
    }
    if (mChannelLayoutTag == -266338299)
    {
      mChannelLayoutTag = 5;
LABEL_25:
      result = 0;
      *a2 = mChannelLayoutTag;
      return result;
    }
  }
  else
  {
    if (mChannelLayoutTag == 0x10000)
    {
      v3 = (uint8x8_t)vcnt_s8((int8x8_t)a1->mChannelBitmap);
      v3.i16[0] = vaddlv_u8(v3);
      mChannelLayoutTag = v3.i32[0];
      goto LABEL_25;
    }
    if (!mChannelLayoutTag)
    {
      mChannelLayoutTag = a1->mNumberChannelDescriptions;
      goto LABEL_25;
    }
  }
  v4 = (mChannelLayoutTag & 0xFFFEFFFF) == 0 || mChannelLayoutTag > 0xFFFEFFFF;
  if (v4
    || ((v5 = mChannelLayoutTag & 0xFFFF0000, (mChannelLayoutTag & 0xFFFF0000) != 0x930000)
      ? (v6 = v5 == -268369920)
      : (v6 = 1),
        v6
     || v5 == 12451840
     || v5 == 12517376
     || mChannelLayoutTag == -267386874
     || mChannelLayoutTag == -266338299
     || (result = 560360820, mChannelLayoutTag - 14417920 >= 0xFF880000)
     && gAllLayoutTags[HIWORD(mChannelLayoutTag) - 98] == mChannelLayoutTag))
  {
    mChannelLayoutTag = (unsigned __int16)mChannelLayoutTag;
    goto LABEL_25;
  }
  return result;
}

uint64_t equalChannels(const AudioChannelLayout *a1, const AudioChannelLayout *a2, int a3)
{
  unint64_t mNumberChannelDescriptions;
  uint64_t v4;
  BOOL v5;
  AudioChannelDescription *mChannelDescriptions;
  AudioChannelDescription *v7;
  int v8;
  AudioChannelLabel mChannelLabel;
  int v10;
  AudioChannelLabel v11;
  int v12;
  char v13;
  uint64_t v15;
  float v16;

  mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
  if ((_DWORD)mNumberChannelDescriptions != a2->mNumberChannelDescriptions)
  {
    v13 = 0;
    return v13 & 1;
  }
  if (!(_DWORD)mNumberChannelDescriptions)
  {
    v5 = 1;
    goto LABEL_30;
  }
  v4 = 0;
  v5 = 0;
  mChannelDescriptions = a2->mChannelDescriptions;
  v7 = a1->mChannelDescriptions;
  while (1)
  {
    mChannelLabel = v7->mChannelLabel;
    ++v7;
    v8 = mChannelLabel;
    v11 = mChannelDescriptions->mChannelLabel;
    ++mChannelDescriptions;
    v10 = v11;
    if (a3)
    {
      if (v8 > 300)
      {
        if (v8 == 301)
        {
LABEL_10:
          v8 = 1;
        }
        else if (v8 == 302)
        {
LABEL_9:
          v8 = 2;
        }
      }
      else
      {
        switch(v8)
        {
          case 206:
          case 208:
            goto LABEL_10;
          case 207:
          case 209:
            goto LABEL_9;
          default:
            if (v8 == 42)
              v8 = 3;
            break;
        }
      }
      v12 = 1;
      if (v10 <= 300)
      {
        switch(v10)
        {
          case 206:
          case 208:
            goto LABEL_25;
          case 207:
          case 209:
            goto LABEL_17;
          default:
            if (v10 == 42)
              v10 = 3;
            goto LABEL_20;
        }
      }
      if (v10 == 301)
        goto LABEL_25;
      if (v10 == 302)
      {
LABEL_17:
        v12 = 2;
        goto LABEL_25;
      }
LABEL_20:
      if (v8 == 3 && v10 == 3)
        break;
    }
    v12 = v10;
LABEL_25:
    if (v8 == v12)
    {
      v5 = ++v4 >= mNumberChannelDescriptions;
      if (mNumberChannelDescriptions != v4)
        continue;
    }
    LOBYTE(mNumberChannelDescriptions) = 0;
    goto LABEL_30;
  }
  v12 = 3;
  if ((_DWORD)mNumberChannelDescriptions != 1)
    goto LABEL_25;
  v15 = 0;
  do
  {
    v16 = fabsf(a1->mChannelDescriptions[0].mCoordinates[v15]);
    LOBYTE(mNumberChannelDescriptions) = v16 < 0.00000011921;
  }
  while (v16 < 0.00000011921 && v15++ != 2);
LABEL_30:
  v13 = v5 | mNumberChannelDescriptions;
  return v13 & 1;
}

uint64_t AACAudioFile::IsDataFormatSupported(AACAudioFile *this, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID;
  uint64_t result;

  mFormatID = a2->mFormatID;
  result = 1;
  if ((mFormatID - 1633772392 > 0xB || ((1 << (mFormatID - 104)) & 0x901) == 0) && mFormatID != 1633772320)
    return 0;
  return result;
}

uint64_t CAFAudioFile::IsDataFormatSupported(CAFAudioFile *this, const AudioStreamBasicDescription *a2)
{
  UInt32 mBitsPerChannel;
  AudioFormatFlags mFormatFlags;
  int v4;
  UInt32 mChannelsPerFrame;
  unsigned int v8;

  if (a2->mFormatID != 1819304813)
    return 1;
  mBitsPerChannel = a2->mBitsPerChannel;
  mFormatFlags = a2->mFormatFlags;
  v4 = (mFormatFlags >> 2) & 1;
  if (mBitsPerChannel > 8)
    v4 = 1;
  if (v4 != 1 || (a2->mFormatFlags & 0x1F80) != 0)
    return 0;
  if ((mFormatFlags & 0x20) != 0)
    mChannelsPerFrame = 1;
  else
    mChannelsPerFrame = a2->mChannelsPerFrame;
  v8 = (mFormatFlags >> 4) & 1;
  if (mChannelsPerFrame * ((mBitsPerChannel + 7) >> 3) == a2->mBytesPerFrame)
    return 1;
  else
    return v8;
}

uint64_t AudioFormatProperty_FormatInfo(uint64_t a1, const void *a2, AudioStreamBasicDescription *a3)
{
  uint64_t mFormatID;
  uint64_t Property;
  uint64_t v8;
  UInt32 mBitsPerChannel;
  UInt32 v10;
  AudioFormatFlags mFormatFlags;
  int mBytesPerFrame;
  UInt32 mBytesPerPacket;
  OSType v14;
  RegistryAccess *v15;
  __int128 v16;
  uint64_t v17;
  AudioCodec v18;
  uint64_t v19;
  char v20;
  UInt32 v21;
  UInt32 mChannelsPerFrame;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  UInt32 v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  AudioCodec inCodec[3];
  AudioFormatInfo outPropertyData;
  Boolean outWritable;
  UInt32 outSize;
  unsigned int v36[2];
  int v37;

  mFormatID = a3->mFormatID;
  if ((int)mFormatID > 1819304812)
  {
    if ((_DWORD)mFormatID == 1970037111)
    {
      Property = 0;
      a3->mBitsPerChannel = 8;
      mChannelsPerFrame = a3->mChannelsPerFrame;
      a3->mFramesPerPacket = 1;
      a3->mBytesPerFrame = mChannelsPerFrame;
      a3->mBytesPerPacket = mChannelsPerFrame;
      v8 = 1970037111;
      goto LABEL_30;
    }
    if ((_DWORD)mFormatID != 1819304813)
      goto LABEL_14;
    a3->mFramesPerPacket = 1;
    mBitsPerChannel = a3->mBitsPerChannel;
    if (!mBitsPerChannel)
      return 0;
    v10 = a3->mChannelsPerFrame;
    if (!v10)
      return 0;
    mFormatFlags = a3->mFormatFlags;
    if ((mFormatFlags & 8) != 0)
    {
      if ((mBitsPerChannel & 7) != 0)
        return 1718449215;
      Property = 0;
      v27 = mBitsPerChannel >> 3;
      if ((mFormatFlags & 0x20) != 0)
        v10 = 1;
      mBytesPerFrame = v27 * v10;
      a3->mBytesPerFrame = mBytesPerFrame;
    }
    else
    {
      mBytesPerFrame = a3->mBytesPerFrame;
      mBytesPerPacket = a3->mBytesPerPacket;
      if (!mBytesPerFrame)
      {
        Property = 0;
        a3->mBytesPerFrame = mBytesPerPacket;
        return Property;
      }
      if (mBytesPerPacket)
      {
        if (mBytesPerFrame == mBytesPerPacket)
          return 0;
        return 1718449215;
      }
      Property = 0;
    }
    a3->mBytesPerPacket = mBytesPerFrame;
    return Property;
  }
  if ((_DWORD)mFormatID == 1634492791)
  {
    Property = 0;
    a3->mBitsPerChannel = 8;
    v21 = a3->mChannelsPerFrame;
    a3->mFramesPerPacket = 1;
    a3->mBytesPerFrame = v21;
    a3->mBytesPerPacket = v21;
    v8 = 1634492791;
    goto LABEL_30;
  }
  if ((_DWORD)mFormatID == 1768775988)
  {
    Property = 0;
    a3->mBitsPerChannel = 0;
    *(_QWORD *)&a3->mFramesPerPacket = 64;
    a3->mBytesPerPacket = 34 * a3->mChannelsPerFrame;
    v8 = 1768775988;
LABEL_30:
    *(_QWORD *)&a3->mFormatID = v8;
    return Property;
  }
LABEL_14:
  v37 = 1969977198;
  v14 = AudioFormatEncryptedFormatTranslator::DecryptFormatID(mFormatID, &v37);
  inCodec[0] = 0;
  if (OpenCodecComponent(v14, inCodec, 0x61646563u))
  {
    if (OpenCodecComponent(v14, inCodec, 0x61656E63u))
    {
      v15 = (RegistryAccess *)OpenCodecComponent(v14, inCodec, 0x61636463u);
      if ((_DWORD)v15)
        goto LABEL_19;
    }
  }
  *(AudioCodec *)v36 = inCodec[0];
  outSize = 0;
  outWritable = 0;
  if (AudioCodecGetPropertyInfo(inCodec[0], 0x61636669u, &outSize, &outWritable))
  {
    AudioCodecAutoDisposer::~AudioCodecAutoDisposer((OpaqueAudioComponentInstance **)v36);
LABEL_19:
    if (!(_DWORD)a1 || !a2)
      goto LABEL_49;
    v16 = *(_OWORD *)&a3->mBytesPerPacket;
    *(_OWORD *)&outPropertyData.mASBD.mSampleRate = *(_OWORD *)&a3->mSampleRate;
    *(_OWORD *)&outPropertyData.mASBD.mBytesPerPacket = v16;
    v17 = *(_QWORD *)&a3->mBitsPerChannel;
    outPropertyData.mASBD.mFormatID = v14;
    *(_QWORD *)&outPropertyData.mASBD.mBitsPerChannel = v17;
    outPropertyData.mMagicCookie = a2;
    outPropertyData.mMagicCookieSize = a1;
    v36[0] = 0;
    Property = AudioFormatProperty_FormatListSize(&outPropertyData, 0x38u, v36);
    if (!(_DWORD)Property)
    {
      Property = 2003329396;
      if (v36[0] >= 0x30)
      {
        std::vector<unsigned char>::vector(inCodec, v36[0]);
        v18 = inCodec[0];
        v19 = AudioFormatProperty_FormatList(&outPropertyData, 0x38u, v36, (AudioFormatListItem *)inCodec[0]);
        Property = v19;
        if ((_DWORD)v19 == -9405 || (_DWORD)v19 == 2003332927)
        {
          v20 = 1;
        }
        else if ((_DWORD)v19)
        {
          v20 = 0;
        }
        else if (v36[0] >= 0x30)
        {
          v29 = (char *)v18 + 48 * (v36[0] / 0x30);
          v30 = *((_OWORD *)v29 - 3);
          v31 = *((_OWORD *)v29 - 2);
          *(_QWORD *)&a3->mBitsPerChannel = *((_QWORD *)v29 - 2);
          *(_OWORD *)&a3->mSampleRate = v30;
          *(_OWORD *)&a3->mBytesPerPacket = v31;
          v20 = 0;
          Property = 0;
          if (v37 != 1969977198)
            a3->mFormatID = AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(a3->mFormatID, v37);
        }
        else
        {
          v20 = 0;
          Property = 2003329396;
        }
        v15 = inCodec[0];
        if (inCodec[0])
        {
          inCodec[1] = inCodec[0];
          operator delete(inCodec[0]);
        }
        if ((v20 & 1) != 0)
        {
LABEL_49:
          RegistryAccess::instance(v15);
          v28 = qword_1ECEF4E20;
          os_unfair_recursive_lock_lock_with_options();
          Property = (*(uint64_t (**)(uint64_t, uint64_t, const void *, AudioStreamBasicDescription *))(*(_QWORD *)v28 + 88))(v28, a1, a2, a3);
          os_unfair_recursive_lock_unlock();
        }
      }
    }
    return Property;
  }
  v24 = *(_OWORD *)&a3->mBytesPerPacket;
  *(_OWORD *)&outPropertyData.mASBD.mSampleRate = *(_OWORD *)&a3->mSampleRate;
  *(_OWORD *)&outPropertyData.mASBD.mBytesPerPacket = v24;
  v25 = *(_QWORD *)&a3->mBitsPerChannel;
  outPropertyData.mASBD.mFormatID = v14;
  *(_QWORD *)&outPropertyData.mASBD.mBitsPerChannel = v25;
  outPropertyData.mMagicCookie = a2;
  outPropertyData.mMagicCookieSize = a1;
  outSize = 56;
  Property = AudioCodecGetProperty(*(AudioCodec *)v36, 0x61636669u, &outSize, &outPropertyData);
  if (!(_DWORD)Property)
  {
    v26 = *(_OWORD *)&outPropertyData.mASBD.mBytesPerPacket;
    *(_OWORD *)&a3->mSampleRate = *(_OWORD *)&outPropertyData.mASBD.mSampleRate;
    *(_OWORD *)&a3->mBytesPerPacket = v26;
    *(_QWORD *)&a3->mBitsPerChannel = *(_QWORD *)&outPropertyData.mASBD.mBitsPerChannel;
    if (v37 != 1969977198)
      a3->mFormatID = AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(a3->mFormatID, v37);
  }
  AudioCodecAutoDisposer::~AudioCodecAutoDisposer((OpaqueAudioComponentInstance **)v36);
  return Property;
}

void sub_18EE4DE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::CodecConverterFactory::GetAvailableEncodeSampleRates(AudioComponent *this, unsigned int *a2, void *a3)
{
  uint64_t Property;
  AudioComponentInstance outInstance;

  outInstance = 0;
  Property = AudioComponentInstanceNew(this[4], &outInstance);
  if (!(_DWORD)Property)
  {
    Property = AudioCodecGetProperty(outInstance, 0x616F7372u, a2, a3);
    AudioComponentInstanceDispose(outInstance);
  }
  return Property;
}

BOOL AIFFAudioFile::IsDataFormatSupported(AIFFAudioFile *this, const AudioStreamBasicDescription *a2)
{
  signed int mFormatID;
  int v3;
  AudioFormatFlags mFormatFlags;
  uint64_t v5;
  int v6;

  mFormatID = a2->mFormatID;
  if (mFormatID == 1667326771)
    return 1;
  v3 = *((_DWORD *)this + 21);
  if (v3 != 1095321155)
  {
    if (v3 == 1095321158)
    {
      if (mFormatID != 1819304813)
        return 0;
      mFormatFlags = a2->mFormatFlags;
      if ((mFormatFlags & 5) != 4)
        return 0;
      if ((mFormatFlags & 2) != 0)
        return 1;
      return a2->mBitsPerChannel < 9 || (*((_BYTE *)this + 100) & 2) == 0;
    }
    goto LABEL_22;
  }
  v5 = 0;
  if (mFormatID > 1634169708)
  {
    if (mFormatID <= 1768775987)
    {
      if (mFormatID == 1634169709)
        goto LABEL_22;
      v6 = 1634492791;
    }
    else
    {
      if (mFormatID == 1768775988 || mFormatID == 1970037111)
        goto LABEL_22;
      v6 = 1819304813;
    }
  }
  else if (mFormatID <= 1363430705)
  {
    if (mFormatID == 1296122675)
      goto LABEL_22;
    v6 = 1296122678;
  }
  else
  {
    if (mFormatID == 1363430706 || mFormatID == 1363430723)
      goto LABEL_22;
    v6 = 1365470320;
  }
  if (mFormatID == v6)
  {
LABEL_22:
    if (mFormatID != 1819304813 || (a2->mFormatFlags & 2) != 0)
      return 1;
    return a2->mBitsPerChannel < 9 || (*((_BYTE *)this + 100) & 2) == 0;
  }
  return v5;
}

void AUOOPWorkgroupManager_AddRemoteIOWorkgroup(int a1, void *a2)
{
  auoop *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _DWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD v14[2];
  __int128 v15;
  _BYTE v16[25];
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = auoop::gWorkgroupManager(v3);
  v6 = caulk::mach::details::retain_os_object(v3, v5);
  caulk::mach::details::release_os_object(0, v7);
  v14[0] = MEMORY[0x1E0DDB760] + 16;
  v14[1] = v6;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  caulk::mach::details::release_os_object(0, v8);
  v13 = a1;
  caulk::mach::os_workgroup_managed::copy_mach_port((caulk::mach::os_workgroup_managed *)v14);
  v9 = (_DWORD *)auoop::tlsWorkgroupPort();
  *v9 = v10;
  v17[0] = &off_1E2915F90;
  v17[1] = &v13;
  v17[2] = v14;
  v18 = v17;
  auoop::WorkgroupManager_Base::mutateWorkgroups(v4, (uint64_t)v17);
  v11 = v18;
  if (v18 == v17)
  {
    v12 = 4;
    v11 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v12 = 5;
LABEL_5:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)v14);

}

void sub_18EE4E1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  void *v21;
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a21;
  if (a21 == v22)
  {
    v25 = 4;
    v24 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&a10);

  _Unwind_Resume(a1);
}

void auoop::WorkgroupManager_Base::mutateWorkgroups(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  uint64_t i;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id *v19;
  id *v20;
  void *v21;
  id *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id *v26;
  uint64_t v27;
  uint64_t v28;
  id *v29;
  uint64_t v30;
  id *v31;
  id *v32;
  os_unfair_lock_s *v33;
  uint64_t *v34;
  uint64_t *v35;
  void *__p;
  id *v37;
  id *v38;
  char v39;
  void **p_p;

  LOBYTE(__p) = 0;
  v39 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
  {
    while (1)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));

      if (!WeakRetained)
        break;
      v4 += 24;
      if (v4 == v5)
      {
        v4 = v5;
        goto LABEL_11;
      }
    }
    if (v4 != v5)
    {
      for (i = v4 + 24; i != v5; i += 24)
      {
        v8 = objc_loadWeakRetained((id *)(i + 16));

        if (v8)
        {
          *(_OWORD *)v4 = *(_OWORD *)i;
          v9 = objc_loadWeakRetained((id *)(i + 16));
          objc_storeWeak((id *)(v4 + 16), v9);

          v4 += 24;
        }
      }
    }
  }
LABEL_11:
  v10 = *(_QWORD *)(a1 + 16);
  if (v4 != v10)
  {
    v11 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *>(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16), v4);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12 != v11)
    {
      do
      {
        v13 = v12 - 24;
        objc_destroyWeak((id *)(v12 - 8));
        v12 = v13;
      }
      while (v13 != v11);
    }
    *(_QWORD *)(a1 + 16) = v11;
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  if (((v4 == v10) & ~(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v14, a1 + 8)) != 0)
    goto LABEL_46;
  if (!v39)
  {
    __p = 0;
    v37 = 0;
    v38 = 0;
    std::vector<auoop::TrackedWorkgroup>::__init_with_size[abi:ne180100]<auoop::TrackedWorkgroup*,auoop::TrackedWorkgroup*>(&__p, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
    v39 = 1;
LABEL_46:
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
    goto LABEL_47;
  }
  if (&__p == (void **)(a1 + 8))
    goto LABEL_46;
  v16 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3);
  v18 = (uint64_t)v38;
  v19 = (id *)__p;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (_BYTE *)__p) >> 3) >= v17)
  {
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (_BYTE *)__p) >> 3) >= v17)
    {
      v30 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *>(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)__p);
      v31 = v37;
      if (v37 != (id *)v30)
      {
        do
        {
          v32 = v31 - 3;
          objc_destroyWeak(v31 - 1);
          v31 = v32;
        }
        while (v32 != (id *)v30);
      }
      v37 = (id *)v30;
    }
    else
    {
      v28 = v16 + 8 * (((char *)v37 - (_BYTE *)__p) >> 3);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *>(*(_QWORD *)(a1 + 8), v28, (uint64_t)__p);
      v29 = v37;
      while (v28 != v15)
      {
        *(_OWORD *)v29 = *(_OWORD *)v28;
        objc_copyWeak(v29 + 2, (id *)(v28 + 16));
        v29 += 3;
        v28 += 24;
      }
      v37 = v29;
    }
  }
  else
  {
    if (__p)
    {
      v20 = v37;
      v21 = __p;
      if (v37 != __p)
      {
        do
        {
          v22 = v20 - 3;
          objc_destroyWeak(v20 - 1);
          v20 = v22;
        }
        while (v22 != v19);
        v21 = __p;
      }
      v37 = v19;
      operator delete(v21);
      v18 = 0;
      __p = 0;
      v37 = 0;
      v38 = 0;
    }
    if (v17 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_55;
    v23 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 3);
    v24 = 2 * v23;
    if (2 * v23 <= v17)
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3);
    v25 = v23 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v24;
    if (v25 > 0xAAAAAAAAAAAAAAALL)
LABEL_55:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v26 = (id *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v25);
    __p = v26;
    v37 = v26;
    v38 = &v26[3 * v27];
    while (v16 != v15)
    {
      *(_OWORD *)v26 = *(_OWORD *)v16;
      objc_copyWeak(v26 + 2, (id *)(v16 + 16));
      v26 += 3;
      v16 += 24;
    }
    v37 = v26;
  }
  if (a1)
    goto LABEL_46;
LABEL_47:
  if (v39)
  {
    v33 = (os_unfair_lock_s *)(a1 + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
    v35 = *(uint64_t **)(a1 + 40);
    v34 = *(uint64_t **)(a1 + 48);
    while (v35 != v34)
      auoop::WorkgroupPropagator::propagate(*v35++, (uint64_t *)&__p);
    os_unfair_lock_unlock(v33);
    if (v39)
    {
      p_p = &__p;
      std::vector<auoop::TrackedWorkgroup>::__destroy_vector::operator()[abi:ne180100](&p_p);
    }
  }
}

void sub_18EE4E5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  os_unfair_lock_s *v14;

  if (v14)
    os_unfair_lock_unlock(v14);
  if (a13)
  {
    a14 = &a10;
    std::vector<auoop::TrackedWorkgroup>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  }
  _Unwind_Resume(exception_object);
}

void auoop::WorkgroupManager_Base::State::addWorkgroup(auoop::WorkgroupManager_Base::State *this, int a2, id val)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  id *v25;
  uint64_t v26;
  id WeakRetained;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  id *v40;
  int64x2_t v41;
  char *v42;
  id *v43;
  uint64_t v44;
  id *v45;
  id *v46;
  id *v47;
  id *v48;
  id *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  id v55;
  char *v56;
  __int128 v57;
  char *v58;
  char *v59;
  char *v60;
  int64x2_t v61;
  char *v62;
  char *v63;

  v4 = *(_QWORD *)this;
  v5 = *((_QWORD *)this + 1);
  if (v5 != *(_QWORD *)this)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *(_QWORD *)this) >> 3);
    do
    {
      v7 = v6 >> 1;
      v8 = v4 + 24 * (v6 >> 1);
      v9 = *(_QWORD *)(v8 + 8);
      v10 = v8 + 24;
      v6 += ~(v6 >> 1);
      if (v9 > (unint64_t)val)
        v6 = v7;
      else
        v4 = v10;
    }
    while (v6);
    v5 = v4;
  }
  LODWORD(v54) = a2;
  *((_QWORD *)&v54 + 1) = val;
  objc_initWeak(&v55, val);
  v11 = *(_QWORD *)this;
  v12 = *((_QWORD *)this + 1);
  v13 = v5 - *(_QWORD *)this;
  v14 = v13 / 24;
  v15 = *(_QWORD *)this + 24 * (v13 / 24);
  v16 = *((_QWORD *)this + 2);
  if (v12 >= v16)
  {
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v11) >> 3) + 1;
    if (v20 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v11) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    v59 = (char *)this + 16;
    if (v22)
    {
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v22);
    }
    else
    {
      v24 = 0;
      v23 = 0;
    }
    v29 = (uint64_t)&v24[24 * v14];
    v56 = v24;
    *(_QWORD *)&v57 = v29;
    *((_QWORD *)&v57 + 1) = v29;
    v58 = &v24[24 * v23];
    if (v14 == v23)
    {
      if (v13 < 1)
      {
        if (v5 == v11)
          v32 = 1;
        else
          v32 = 2 * v14;
        v63 = (char *)this + 16;
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v32);
        v35 = v33;
        v36 = &v33[24 * (v32 >> 2)];
        v37 = &v33[24 * v34];
        v38 = v57;
        if (*((_QWORD *)&v57 + 1) == (_QWORD)v57)
        {
          v41 = vdupq_n_s64(v57);
          v39 = &v33[24 * (v32 >> 2)];
        }
        else
        {
          v53 = &v33[24 * v34];
          v39 = &v36[*((_QWORD *)&v57 + 1) - v57];
          v40 = (id *)&v33[24 * (v32 >> 2)];
          do
          {
            *(_OWORD *)v40 = *(_OWORD *)v38;
            objc_moveWeak(v40 + 2, (id *)(v38 + 16));
            v40 += 3;
            v38 += 24;
          }
          while (v40 != (id *)v39);
          v41 = (int64x2_t)v57;
          v37 = v53;
        }
        v42 = v58;
        v60 = v56;
        v56 = v35;
        *(_QWORD *)&v57 = v36;
        v61 = v41;
        *((_QWORD *)&v57 + 1) = v39;
        v58 = v37;
        v62 = v42;
        std::__split_buffer<auoop::TrackedWorkgroup>::~__split_buffer((uint64_t)&v60);
        v29 = *((_QWORD *)&v57 + 1);
      }
      else
      {
        v30 = v14 + 2;
        if (v14 >= -1)
          v30 = v14 + 1;
        v31 = -3 * (v30 >> 1);
        v29 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *>(v29, v29, v29 - 24 * (v30 >> 1));
        *(_QWORD *)&v57 = v57 + 8 * v31;
        *((_QWORD *)&v57 + 1) = v29;
      }
    }
    *(_OWORD *)v29 = v54;
    objc_moveWeak((id *)(v29 + 16), &v55);
    v43 = (id *)v57;
    v44 = *((_QWORD *)&v57 + 1) + 24;
    *((_QWORD *)&v57 + 1) += 24;
    v45 = *(id **)this;
    if (*(_QWORD *)this != v15)
    {
      v46 = (id *)(v11 + 24 * v14 - 8);
      v47 = (id *)(v57 - 8);
      do
      {
        v48 = v47;
        v49 = v46 - 2;
        *((_OWORD *)v47 - 1) = *((_OWORD *)v46 - 1);
        objc_moveWeak(v47, v46);
        v46 -= 3;
        v47 = v48 - 3;
      }
      while (v49 != v45);
      v43 = v48 - 2;
      v44 = *((_QWORD *)&v57 + 1);
    }
    *(_QWORD *)&v57 = v43;
    v50 = *((_QWORD *)this + 1);
    if (v50 != v15)
    {
      do
      {
        *(_OWORD *)v44 = *(_OWORD *)v15;
        objc_moveWeak((id *)(v44 + 16), (id *)(v15 + 16));
        v44 += 24;
        v15 += 24;
      }
      while (v15 != v50);
      v43 = (id *)v57;
      v15 = *((_QWORD *)this + 1);
    }
    v51 = *(char **)this;
    *(_QWORD *)this = v43;
    *((_QWORD *)this + 1) = v44;
    v52 = (char *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v58;
    *((_QWORD *)&v57 + 1) = v15;
    v58 = v52;
    v56 = v51;
    *(_QWORD *)&v57 = v51;
    std::__split_buffer<auoop::TrackedWorkgroup>::~__split_buffer((uint64_t)&v56);
  }
  else if (v15 == v12)
  {
    *(_OWORD *)v15 = v54;
    objc_moveWeak((id *)(v11 + 24 * v14 + 16), &v55);
    *((_QWORD *)this + 1) = v15 + 24;
  }
  else
  {
    v17 = v15 + 24;
    v18 = v12 - 24;
    v19 = *((_QWORD *)this + 1);
    while (v18 < v12)
    {
      *(_OWORD *)v19 = *(_OWORD *)v18;
      objc_moveWeak((id *)(v19 + 16), (id *)(v18 + 16));
      v19 += 24;
      v18 += 24;
    }
    *((_QWORD *)this + 1) = v19;
    if (v12 != v17)
    {
      v25 = (id *)(v12 - 8);
      v26 = 8 * ((uint64_t)(v12 - v17) >> 3);
      do
      {
        *((_OWORD *)v25 - 1) = *(_OWORD *)(v15 + v26 - 24);
        WeakRetained = objc_loadWeakRetained((id *)(v15 + v26 - 8));
        objc_storeWeak(v25, WeakRetained);

        v25 -= 3;
        v26 -= 24;
      }
      while (v26);
    }
    *(_OWORD *)v15 = v54;
    v28 = objc_loadWeakRetained(&v55);
    objc_storeWeak((id *)(v11 + 24 * v14 + 16), v28);

  }
  objc_destroyWeak(&v55);
}

void sub_18EE4EA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  id *v5;
  va_list va;

  va_start(va, a5);
  std::__split_buffer<auoop::TrackedWorkgroup>::~__split_buffer((uint64_t)va);
  objc_destroyWeak(v5);
  _Unwind_Resume(a1);
}

uint64_t auoop::gWorkgroupManager(auoop *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  {
    v3 = operator new();
    *(_DWORD *)v3 = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 32) = 0;
    auoop::gWorkgroupManager(void)::global = v3;
  }
  return auoop::gWorkgroupManager(void)::global;
}

void sub_18EE4EAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<auoop::TrackedWorkgroup>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    objc_destroyWeak((id *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ___ZL12setupLoggingv_block_invoke()
{
  CALog::Scope *v0;
  __CFString *v1;

  v0 = (CALog::Scope *)operator new();
  *((_QWORD *)v0 + 1) = 0;
  *(_QWORD *)v0 = os_log_create("com.apple.coreaudio", "hshm");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "hapticsharedmemory_verbose");
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  CALog::Scope::SetPriorityThresholdFromPreference(v0, CFSTR("com.apple.coreaudio"), v1);

  kHSHMScope = (uint64_t)v0;
}

void sub_18EE4EBD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AudioFileObject::GetEstimatedDuration(AudioFileObject *this, double *a2)
{
  uint64_t v3;
  double v4;
  double v5;

  v3 = *((unsigned int *)this + 11);
  if ((_DWORD)v3)
  {
    v4 = *((double *)this + 3);
    v5 = (double)((*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 240))(this) * v3) / v4;
  }
  else
  {
    v5 = 0.0;
  }
  *a2 = v5;
  return 0;
}

uint64_t AACAudioFile::OpenFromDataSource(AACAudioFile *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ASBD;
  unsigned int v4;
  NSObject *v5;
  const char *v6;
  ACMP4BitStreams *v7;
  uint64_t v8;
  unsigned int *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t ADTSPacketSize;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  const unsigned __int8 *v25;
  UInt32 v26;
  int v27;
  unsigned int v28;
  int v29;
  UInt32 v30;
  int v31;
  unsigned int *v32;
  unsigned int *v33;
  int v34;
  char v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  int v46;
  unsigned int v47;
  UInt32 ioPropertyDataSize;
  void *v49;
  __int16 v50;
  int v51;
  ACMP4BitStreams *v52;
  AudioStreamBasicDescription v53;
  unsigned int v54;
  AudioCodec inCodec;
  int v56;
  int v57;
  uint8_t buf[4];
  const char *v59;
  __int16 v60;
  int v61;
  _BYTE v62[24];
  uint64_t v63;
  int v64;
  const char *v65;
  __int16 v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  unsigned int v73[2];
  int v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v1 = MEMORY[0x1E0C80A78](this);
  v2 = 0;
  v77 = *MEMORY[0x1E0C80C00];
  do
  {
    v47 = 0x2000;
    ASBD = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint8_t *, unsigned int *))(**(_QWORD **)(v1 + 104)
                                                                                                  + 48))(*(_QWORD *)(v1 + 104), 0, v2, 0x2000, buf, &v47);
    if ((_DWORD)ASBD)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v64 = 136315394;
        v65 = "AACAudioFile.cpp";
        v66 = 1024;
        v67 = 492;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes Failed", (uint8_t *)&v64, 0x12u);
      }
      goto LABEL_32;
    }
    if (!v47)
    {
      ASBD = 2003334207;
      goto LABEL_32;
    }
    if (v47 < 0xA)
      break;
    v4 = ID3Size(v47, buf, &v64);
    v2 += v4;
  }
  while (v4);
  *(_QWORD *)(v1 + 72) = v2;
  v56 = 0;
  inCodec = 0;
  v54 = 9;
  HIDWORD(v65) = 0;
  v68 = 0;
  v70 = 0;
  v74 = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v73);
  v75 = 0u;
  v76 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)&v64);
  memset(&v53, 0, sizeof(v53));
  CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v52, 9uLL, 1);
  ASBD = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, ACMP4BitStreams *, int *))(**(_QWORD **)(v1 + 104)
                                                                                              + 48))(*(_QWORD *)(v1 + 104), 0, *(_QWORD *)(v1 + 72), 9, v52, &v56);
  if (!(_DWORD)ASBD)
  {
    if (v56 != 9)
    {
      ASBD = 2003334207;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_19;
      *(_DWORD *)v62 = 136315394;
      *(_QWORD *)&v62[4] = "AACAudioFile.cpp";
      *(_WORD *)&v62[12] = 1024;
      *(_DWORD *)&v62[14] = 527;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  ReadBytes Failed";
      goto LABEL_18;
    }
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v7 = v52;
    v8 = ADTSHeader::Deserialize((ADTSHeader *)&v49, (const unsigned __int8 *)v52, 9u);
    if ((_DWORD)v8)
    {
      ASBD = v8;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_19;
      *(_DWORD *)v62 = 136315394;
      *(_QWORD *)&v62[4] = "AACAudioFile.cpp";
      *(_WORD *)&v62[12] = 1024;
      *(_DWORD *)&v62[14] = 532;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  ReadBytes Failed";
      goto LABEL_18;
    }
    if (((unsigned __int16)v49 & 0x1000) != 0)
      v17 = 7;
    else
      v17 = 9;
    *(_DWORD *)(v1 + 172) = v17;
    v18 = *(_QWORD *)(v1 + 176);
    v19 = *(_QWORD *)(v1 + 184);
    v62[0] = 0;
    v20 = v19 - v18;
    if (v20 > 9)
    {
      if (v20 != 10)
        *(_QWORD *)(v1 + 184) = v18 + 10;
    }
    else
    {
      std::vector<unsigned char>::__append((_QWORD *)(v1 + 176), 10 - v20, v62);
      v17 = *(_DWORD *)(v1 + 172);
      v7 = v52;
    }
    v54 = v17;
    ADTSPacketSize = ACMP4BitStreams::GetADTSPacketSize(v7, &v54, v9);
    if (!(_DWORD)ADTSPacketSize)
    {
      ASBD = 1685348671;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_19;
      *(_DWORD *)v62 = 136315394;
      *(_QWORD *)&v62[4] = "AACAudioFile.cpp";
      *(_WORD *)&v62[12] = 1024;
      *(_DWORD *)&v62[14] = 541;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  GetADTSPacketSize Failed";
      goto LABEL_18;
    }
    v22 = ADTSPacketSize;
    CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v49, ADTSPacketSize, 1);
    ASBD = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, void *, int *))(**(_QWORD **)(v1 + 104) + 48))(*(_QWORD *)(v1 + 104), 0, *(_QWORD *)(v1 + 72), v22, v49, &v56);
    if ((_DWORD)ASBD)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v62 = 136315394;
        *(_QWORD *)&v62[4] = "AACAudioFile.cpp";
        *(_WORD *)&v62[12] = 1024;
        *(_DWORD *)&v62[14] = 545;
        v23 = MEMORY[0x1E0C81028];
        v24 = "%25s:%-5d  ReadBytes Failed";
LABEL_90:
        _os_log_impl(&dword_18EE07000, v23, OS_LOG_TYPE_ERROR, v24, v62, 0x12u);
        goto LABEL_91;
      }
      goto LABEL_91;
    }
    if (v56 != (_DWORD)v22)
    {
      ASBD = 2003334207;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v62 = 136315394;
        *(_QWORD *)&v62[4] = "AACAudioFile.cpp";
        *(_WORD *)&v62[12] = 1024;
        *(_DWORD *)&v62[14] = 546;
        v23 = MEMORY[0x1E0C81028];
        v24 = "%25s:%-5d  ReadBytes Failed";
        goto LABEL_90;
      }
LABEL_91:
      v46 = 4;
LABEL_92:
      if (v49)
        free(v49);
      if (v46 == 4)
        goto LABEL_19;
      if (v46)
      {
        ASBD = 1718449215;
        goto LABEL_19;
      }
      ASBD = DecoderConfigDescr::GetASBD((DecoderConfigDescr *)&v64, &v53);
      if ((_DWORD)ASBD)
        goto LABEL_19;
      ASBD = (*(uint64_t (**)(uint64_t, AudioStreamBasicDescription *))(*(_QWORD *)v1 + 176))(v1, &v53);
      if (!(_DWORD)ASBD)
      {
        ASBD = DecoderConfigDescr::GetChannelLayoutTag((DecoderConfigDescr *)&v64, (unsigned int *)(v1 + 140));
        goto LABEL_19;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_19;
      *(_DWORD *)v62 = 136315394;
      *(_QWORD *)&v62[4] = "AACAudioFile.cpp";
      *(_WORD *)&v62[12] = 1024;
      *(_DWORD *)&v62[14] = 585;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  bad data format";
LABEL_18:
      _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, v6, v62, 0x12u);
      goto LABEL_19;
    }
    ioPropertyDataSize = v22;
    v25 = (const unsigned __int8 *)v49;
    DecoderConfigDescr::cleanup((DecoderConfigDescr *)&v64);
    v71 = -1;
    v72 = -1;
    *(_QWORD *)v62 = 0;
    *(_WORD *)&v62[8] = 0;
    *(_DWORD *)&v62[12] = 0;
    if (ADTSHeader::Deserialize((ADTSHeader *)v62, v25, 0x10u))
    {
      v26 = 0;
      v27 = v69;
    }
    else
    {
      v28 = *(_DWORD *)v62;
      v29 = (*(_DWORD *)v62 >> 10) & 3;
      LODWORD(v68) = v29 + 1;
      v57 = 0;
      MP4SampleRate::SetFromIndex(&v57, (*(_DWORD *)v62 >> 6) & 0xF, 1);
      v27 = (v28 >> 2) & 7;
      HIDWORD(v68) = v57;
      v69 = v27;
      v73[1] = v29;
      v74 = v57;
      if ((v28 & 0x1000) != 0)
        v30 = 7;
      else
        v30 = 9;
      ioPropertyDataSize = v30;
      if ((v28 & 0x1000) != 0)
        v31 = -7;
      else
        v31 = -9;
      v26 = ((*(_DWORD *)&v62[4] >> 13) & 0x1FFF) + v31;
    }
    if (v27)
    {
LABEL_61:
      if (OpenCodecComponent(0x61616320u, &inCodec, 0x61646563u))
      {
        ASBD = 0;
      }
      else
      {
        ioPropertyDataSize = 32;
        *(_DWORD *)v62 = v22;
        *(_QWORD *)&v62[8] = v49;
        *(_DWORD *)&v62[16] = 0;
        v63 = 0;
        ASBD = AudioCodecGetProperty(inCodec, 0x6D327364u, &ioPropertyDataSize, v62);
        if (!(_DWORD)ASBD && *(_DWORD *)&v62[16])
        {
          v43 = *(_QWORD *)(v1 + 144);
          v44 = *(_QWORD *)(v1 + 152) - v43;
          if (*(unsigned int *)&v62[16] <= v44)
          {
            if (*(unsigned int *)&v62[16] < v44)
              *(_QWORD *)(v1 + 152) = v43 + *(unsigned int *)&v62[16];
          }
          else
          {
            std::vector<unsigned char>::__append((std::vector<char> *)(v1 + 144), *(unsigned int *)&v62[16] - v44);
            v43 = *(_QWORD *)(v1 + 144);
          }
          v63 = v43;
          ASBD = AudioCodecGetProperty(inCodec, 0x6D327364u, &ioPropertyDataSize, v62);
          if ((_DWORD)ASBD || !*(_DWORD *)&v62[16])
            *(_QWORD *)(v1 + 152) = *(_QWORD *)(v1 + 144);
          else
            ASBD = 0;
        }
        AudioComponentInstanceDispose(inCodec);
      }
      v46 = *(_QWORD *)(v1 + 144) == *(_QWORD *)(v1 + 152);
      goto LABEL_92;
    }
    if (v26 <= ioPropertyDataSize)
    {
LABEL_88:
      ASBD = 560226676;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v62 = 136315394;
        *(_QWORD *)&v62[4] = "AACAudioFile.cpp";
        *(_WORD *)&v62[12] = 1024;
        *(_DWORD *)&v62[14] = 551;
        v23 = MEMORY[0x1E0C81028];
        v24 = "%25s:%-5d  ACMP4BitStreams::GetDecoderConfigFromADTSHeaderAndPCE Failed";
        goto LABEL_90;
      }
      goto LABEL_91;
    }
    v32 = (unsigned int *)&v25[ioPropertyDataSize];
    v33 = (unsigned int *)((char *)v32 + v26 - ioPropertyDataSize);
    *(_QWORD *)v62 = v32;
    *(_QWORD *)&v62[8] = v33;
    *(_QWORD *)&v62[16] = 0;
    if ((v32 & 3) != 0)
    {
      v34 = 0;
      v35 = (_BYTE)v32 + 1;
      v36 = -8;
      do
      {
        v37 = (unsigned __int8 *)v32;
        v38 = v36 + 16;
        *(_DWORD *)&v62[20] = v36 + 16;
        *(_DWORD *)&v62[16] = v34 << 8;
        v32 = (unsigned int *)((char *)v32 + 1);
        *(_QWORD *)v62 = v32;
        v39 = *v37 | (v34 << 8);
        *(_DWORD *)&v62[16] = v39;
        v36 += 8;
        if ((v35 & 3) == 0)
          break;
        ++v35;
        v34 = v39;
      }
      while (v32 < v33);
      v40 = v39 << (24 - v36);
      v41 = v40 >> 29;
      *(_DWORD *)&v62[16] = v40;
      *(_DWORD *)&v62[20] = v38 - 3;
      if (v38 - 3 >= 0)
      {
        v42 = 8 * v40;
        goto LABEL_86;
      }
    }
    else
    {
      v41 = 0;
      *(_DWORD *)&v62[20] = -3;
    }
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v62, v32);
    *(_QWORD *)v62 += 4;
    v45 = v62[20];
    v41 |= *(_DWORD *)&v62[16] >> v62[20];
    *(_DWORD *)&v62[20] += 32;
    if (*(_DWORD *)&v62[20])
      v42 = *(_DWORD *)&v62[16] << -v45;
    else
      v42 = 0;
LABEL_86:
    *(_DWORD *)&v62[16] = v42;
    if (v41 == 5)
    {
      MP4AudioProgramConfig::Deserialize(v73, (uint64_t)v62);
      goto LABEL_61;
    }
    goto LABEL_88;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v62 = 136315394;
    *(_QWORD *)&v62[4] = "AACAudioFile.cpp";
    *(_WORD *)&v62[12] = 1024;
    *(_DWORD *)&v62[14] = 526;
    v5 = MEMORY[0x1E0C81028];
    v6 = "%25s:%-5d  ReadBytes Failed";
    goto LABEL_18;
  }
LABEL_19:
  if (v52)
    free(v52);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if ((_DWORD)ASBD)
  {
LABEL_32:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v59 = "AACAudioFile.cpp";
      v60 = 1024;
      v61 = 448;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AACAudioFile::ParseAudioFile failed", buf, 0x12u);
    }
  }
  return ASBD;
}

void sub_18EE4F64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  if (a10)
    free(a10);
  if (a12)
    free(a12);
  v13 = (std::__shared_weak_count *)STACK[0x2540];
  if (STACK[0x2540])
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)STACK[0x2530];
  if (STACK[0x2530])
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(_QWORD *a1, size_t size, int a3)
{
  void *v5;
  void *v6;
  void *v7;
  std::bad_alloc *exception;
  std::bad_alloc *v10;

  *a1 = 0;
  if (a3)
  {
    v5 = malloc_type_malloc(size, 0x2C8E6D5CuLL);
    v6 = v5;
    if (!size || v5)
    {
      bzero(v5, size);
      goto LABEL_7;
    }
LABEL_8:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_alloc::bad_alloc(exception);
  }
  v7 = malloc_type_malloc(size, 0x7C51E058uLL);
  v6 = v7;
  if (size && !v7)
    goto LABEL_8;
LABEL_7:
  *a1 = v6;
  return a1;
}

uint64_t acv2::CodecConverter::GetOutputLayout(char **this, std::vector<char> *a2, unsigned __int8 *a3)
{
  int Codec;
  std::vector<char>::pointer begin;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  std::vector<char>::pointer v11;
  unint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t message;
  caulk::concurrent::message *v18;
  uint64_t v19;
  int v20;
  std::vector<char> __p;

  acv2::CodecConverter::CheckInitialize((acv2::CodecConverter *)this, 0, 0);
  if (this[89])
  {
    if (this + 94 != (char **)a2)
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, this[94], this[95], this[95] - this[94]);
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    Codec = acv2::CodecConverter::GetCodecProperty<unsigned char>((uint64_t)this, 0x6F636C20u, &__p);
    begin = __p.__begin_;
    if (Codec)
    {
      if (__p.__begin_)
        operator delete(__p.__begin_);
      goto LABEL_16;
    }
    v8 = *((_DWORD *)__p.__begin_ + 2);
    if (v8 <= 1)
      v9 = 1;
    else
      v9 = *((_DWORD *)__p.__begin_ + 2);
    v10 = 20 * v9 + 12;
    v11 = a2->__begin_;
    v12 = a2->__end_ - a2->__begin_;
    if (v10 <= v12)
    {
      if (v10 < v12)
        a2->__end_ = &v11[v10];
    }
    else
    {
      std::vector<unsigned char>::__append(a2, v10 - v12);
      v11 = a2->__begin_;
      v8 = *((_DWORD *)begin + 2);
    }
    memcpy(v11, begin, 20 * v8 + 12);
    operator delete(begin);
  }
  LODWORD(__p.__begin_) = 0;
  if (AudioFormatProperty_NumberOfChannelsForLayout((const AudioChannelLayout *)a2->__begin_, (unsigned int *)&__p))
  {
LABEL_16:
    if (this + 94 != (char **)a2)
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, this[94], this[95], this[95] - this[94]);
    v13 = 0;
    *a3 = 1;
    return v13;
  }
  v15 = (int)__p.__begin_;
  if (LODWORD(__p.__begin_) == *((_DWORD *)this + 21))
    return 0;
  v13 = 1718449215;
  v16 = _os_log_pack_size();
  message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v16 + 88, 16);
  if (message)
  {
    v18 = (caulk::concurrent::message *)message;
    v19 = _os_log_pack_fill();
    v20 = *((_DWORD *)this + 21);
    *(_DWORD *)v19 = 67109376;
    *(_DWORD *)(v19 + 4) = v15;
    *(_WORD *)(v19 + 8) = 1024;
    *(_DWORD *)(v19 + 10) = v20;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v18);
  }
  return v13;
}

void sub_18EE4F990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t acv2::CodecConverter::GetCodecProperty<unsigned char>(uint64_t a1, AudioCodecPropertyID a2, std::vector<char> *a3)
{
  uint64_t result;
  std::vector<char>::pointer begin;
  unint64_t v8;
  unint64_t v9;
  Boolean outWritable;
  UInt32 outSize;

  outSize = 0;
  outWritable = 0;
  result = AudioCodecGetPropertyInfo(*(AudioCodec *)(a1 + 168), a2, &outSize, &outWritable);
  if (!(_DWORD)result)
  {
    begin = a3->__begin_;
    v8 = a3->__end_ - a3->__begin_;
    if (outSize <= v8)
    {
      if (outSize < v8)
        a3->__end_ = &begin[outSize];
    }
    else
    {
      std::vector<unsigned char>::__append(a3, outSize - v8);
      begin = a3->__begin_;
    }
    result = AudioCodecGetProperty(*(AudioCodec *)(a1 + 168), a2, &outSize, begin);
    if (!(_DWORD)result)
    {
      v9 = a3->__end_ - a3->__begin_;
      if (outSize <= v9)
      {
        if (outSize < v9)
        {
          result = 0;
          a3->__end_ = &a3->__begin_[outSize];
          return result;
        }
      }
      else
      {
        std::vector<unsigned char>::__append(a3, outSize - v9);
      }
      return 0;
    }
  }
  return result;
}

void std::vector<unsigned char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  char *end;
  std::vector<char>::pointer begin;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = value - begin;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v7];
    v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      v11 = v12;
    }
    else
    {
      v14 = &end[~(unint64_t)begin];
      do
      {
        v15 = *--end;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
      operator delete(end);
  }
}

void DecoderConfigDescr::DecoderConfigDescr(DecoderConfigDescr *this)
{
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 24) = 0;
  MP4AudioProgramConfig::Clear((DecoderConfigDescr *)((char *)this + 88));
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1208) = 0u;
  DecoderConfigDescr::cleanup(this);
}

void DecoderConfigDescr::cleanup(DecoderConfigDescr *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = (char *)this + 1192;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = 0;
  bzero((char *)this + 88, 0x44CuLL);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 150);
  *(_OWORD *)v2 = 0u;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 152);
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

OSStatus AudioFileOpenURL(CFURLRef inFileRef, AudioFilePermissions inPermissions, AudioFileTypeID inFileTypeHint, AudioFileID *outAudioFile)
{
  unsigned __int8 *v4;
  uint64_t v6;
  const __CFString *v8;
  const __CFString *v9;
  CFComparisonResult v10;
  uint64_t v11;
  uint64_t v12;
  off_t i;
  ssize_t v14;
  ssize_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  xpc_connection_t mach_service;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _xpc_connection_s *v24;
  const __CFString *v25;
  size_t v26;
  size_t v27;
  xpc_object_t v28;
  uint64_t v29;
  _xpc_connection_s *v30;
  xpc_object_t v31;
  void *v32;
  xpc_object_t v33;
  void *v34;
  int v35;
  OpaqueAudioFileID *v36;
  unsigned int v37;
  AudioFileFormatBase *v38;
  char v39;
  AudioFileFormatRegistry *AudioFileFormatRegistry;
  AudioFileFormatRegistry *v41;
  uint64_t v42;
  CFStringRef v43;
  uint64_t j;
  uint64_t k;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  AudioFileTypeID value;
  _QWORD value_4[2];
  char v56;
  unsigned __int8 *v57;
  xpc_object_t xdict;
  char v59;
  _QWORD v60[5];
  _QWORD aBlock[5];
  UInt8 buffer[1024];
  uint64_t v63;
  CFRange v64;

  v63 = *MEMORY[0x1E0C80C00];
  LODWORD(v4) = -50;
  if (!inFileRef || !outAudioFile)
    return (int)v4;
  v6 = inPermissions;
  value = inFileTypeHint;
  v8 = CFURLCopyScheme(inFileRef);
  if (v8)
  {
    v9 = v8;
    v64.location = 0;
    v64.length = 12;
    v10 = CFStringCompareWithOptions(v8, CFSTR("ipod-library"), v64, 0);
    CFRelease(v9);
    if (v10 == kCFCompareEqualTo)
    {
      v17 = operator new();
      BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)v17);
      *(_BYTE *)(v17 + 20) = 0;
      *(_QWORD *)(v17 + 12) = 0;
      *(_QWORD *)v17 = &off_1E29088E8;
      *(_QWORD *)(v17 + 24) = 0;
      SharableMemoryBlock::SharableMemoryBlock((SharableMemoryBlock *)(v17 + 32));
      *(_QWORD *)(v17 + 32) = &off_1E2908760;
      *(_BYTE *)(v17 + 88) = 0;
      *(_QWORD *)(v17 + 96) = 0;
      v18 = operator new();
      mach_service = xpc_connection_create_mach_service("com.apple.audio.AudioFileServer", 0, 0);
      v20 = MEMORY[0x1E0DDF080];
      *(_BYTE *)(v18 + 16) = 1;
      *(_QWORD *)v18 = v20 + 16;
      *(_QWORD *)(v18 + 8) = mach_service;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 40) = 0;
      XPC_Connection::Initialize((XPC_Connection *)v18);
      *(_QWORD *)(v17 + 24) = v18;
      v21 = MEMORY[0x1E0C809B0];
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZN22AudioFileIPODLibHandleC2EPK7__CFURLj_block_invoke;
      aBlock[3] = &__block_descriptor_tmp_1370;
      aBlock[4] = v17;
      v22 = *(_QWORD **)(v18 + 24);
      if (v22 != aBlock)
      {
        if (v22)
          _Block_release(v22);
        *(_QWORD *)(v18 + 24) = _Block_copy(aBlock);
        v18 = *(_QWORD *)(v17 + 24);
      }
      v60[0] = v21;
      v60[1] = 0x40000000;
      v60[2] = ___ZN22AudioFileIPODLibHandleC2EPK7__CFURLj_block_invoke_2;
      v60[3] = &__block_descriptor_tmp_16;
      v60[4] = v17;
      v23 = *(_QWORD **)(v18 + 40);
      if (v23 != v60)
      {
        if (v23)
          _Block_release(v23);
        *(_QWORD *)(v18 + 40) = _Block_copy(v60);
        v18 = *(_QWORD *)(v17 + 24);
      }
      v24 = *(_xpc_connection_s **)(v18 + 8);
      if (v24)
        xpc_connection_resume(v24);
      bzero(buffer, 0x400uLL);
      v25 = CFURLGetString(inFileRef);
      if (!v25)
        AudioFileIPODLibHandle::Fail((AudioFileIPODLibHandle *)v17, -43);
      CFStringGetCString(v25, (char *)buffer, 1024, 0x8000100u);
      v26 = strnlen((const char *)buffer, 0x400uLL);
      if (!v26)
        AudioFileIPODLibHandle::Fail((AudioFileIPODLibHandle *)v17, -50);
      v27 = v26;
      v28 = xpc_dictionary_create(0, 0, 0);
      v59 = 1;
      v29 = MEMORY[0x1E0DDF088];
      v57 = (unsigned __int8 *)(MEMORY[0x1E0DDF088] + 16);
      xdict = v28;
      if (v28)
      {
        xpc_dictionary_set_uint64(v28, "type", 0x6F70656EuLL);
        xpc_dictionary_set_uint64(xdict, "hint", value);
        xpc_dictionary_set_data(xdict, "data", buffer, v27 + 1);
      }
      v30 = *(_xpc_connection_s **)(*(_QWORD *)(v17 + 24) + 8);
      if (v30)
      {
        v31 = xpc_connection_send_message_with_reply_sync(v30, xdict);
        v32 = v31;
        if (!v31 || v31 == (xpc_object_t)MEMORY[0x1E0C81258] || v31 == (xpc_object_t)MEMORY[0x1E0C81260])
        {
          if (!v31)
            goto LABEL_98;
        }
        else if (object_getClass(v31) == (Class)MEMORY[0x1E0C812F8])
        {
          v56 = 1;
          value_4[0] = v29 + 16;
          value_4[1] = v32;
          v33 = xpc_dictionary_get_value(v32, "status");
          v34 = v33;
          if (v33)
          {
            if (object_getClass(v33) == (Class)MEMORY[0x1E0C81328])
            {
              v35 = xpc_int64_get_value(v34);
              if (v35)
                AudioFileIPODLibHandle::Fail((AudioFileIPODLibHandle *)v17, v35);
            }
          }
          XPC_Object::~XPC_Object((XPC_Object *)value_4);
          XPC_Object::~XPC_Object((XPC_Object *)&v57);
          LODWORD(v4) = 0;
          v36 = (OpaqueAudioFileID *)*(unsigned int *)(v17 + 8);
LABEL_39:
          *outAudioFile = v36;
          return (int)v4;
        }
        xpc_release(v32);
      }
LABEL_98:
      AudioFileIPODLibHandle::Fail((AudioFileIPODLibHandle *)v17, 1768973119);
    }
  }
  if (CFURLGetFileSystemRepresentation(inFileRef, 1u, buffer, 1024))
  {
    if ((_DWORD)v6 == 3)
      v11 = open((const char *)buffer, 2);
    else
      v11 = open((const char *)buffer, v6 == 2);
    v12 = v11;
    if ((v11 & 0x80000000) != 0)
    {
      v37 = *__error();
      if (v37 <= 0x1F)
      {
        if (((1 << v37) & 0x40022002) != 0)
        {
          LODWORD(v4) = -54;
          return (int)v4;
        }
        if (((1 << v37) & 0x1800000) != 0)
        {
          LODWORD(v4) = -42;
          return (int)v4;
        }
        if (v37 == 31)
        {
          LODWORD(v4) = 561017960;
          return (int)v4;
        }
      }
      LODWORD(v4) = 2003334207;
      return (int)v4;
    }
    CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v57, 0x2000uLL, 1);
    for (i = 0; ; lseek(v12, i, 0))
    {
      v14 = read(v12, v57, 0x2000uLL);
      v15 = v14;
      if (v14 < 1)
      {
        v38 = 0;
        v39 = 0;
        LODWORD(v4) = 2003334207;
        goto LABEL_86;
      }
      if ((unint64_t)v14 < 0xA)
        break;
      v16 = ID3Size(v14, v57, (int *)value_4);
      if (!v16)
        break;
      i += v16;
    }
    AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
    v41 = AudioFileFormatRegistry;
    v4 = v57;
    if (value)
    {
      v42 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, value);
      v38 = (AudioFileFormatBase *)v42;
      if (v42)
      {
        if ((*(unsigned int (**)(uint64_t, ssize_t, unsigned __int8 *))(*(_QWORD *)v42 + 24))(v42, v15, v4) == 1)
          goto LABEL_85;
      }
    }
    v43 = CFURLCopyPathExtension(inFileRef);
    if (v43)
    {
      for (j = *((_QWORD *)v41 + 1); j != *((_QWORD *)v41 + 2); j += 16)
      {
        v38 = *(AudioFileFormatBase **)(j + 8);
        if (v38
          && (*(unsigned int (**)(_QWORD, CFStringRef))(*(_QWORD *)v38 + 16))(*(_QWORD *)(j + 8), v43)
          && (*(unsigned int (**)(AudioFileFormatBase *, ssize_t, unsigned __int8 *))(*(_QWORD *)v38 + 24))(v38, v15, v4))
        {
LABEL_84:
          CFRelease(v43);
          goto LABEL_85;
        }
      }
      if (AudioFileFormatRegistry::AddComponentFormats(v41))
      {
        for (k = *((_QWORD *)v41 + 1); k != *((_QWORD *)v41 + 2); k += 16)
        {
          v38 = *(AudioFileFormatBase **)(k + 8);
          if (v38
            && (*(unsigned int (**)(_QWORD, CFStringRef))(*(_QWORD *)v38 + 16))(*(_QWORD *)(k + 8), v43)
            && (*(unsigned int (**)(AudioFileFormatBase *, ssize_t, unsigned __int8 *))(*(_QWORD *)v38 + 24))(v38, v15, v4))
          {
            goto LABEL_84;
          }
        }
      }
      CFRelease(v43);
    }
    v47 = *((_QWORD *)v41 + 1);
    v46 = *((_QWORD *)v41 + 2);
    while (v47 != v46)
    {
      v38 = *(AudioFileFormatBase **)(v47 + 8);
      if (v38)
      {
        if ((*(unsigned int (**)(_QWORD, ssize_t, unsigned __int8 *))(*(_QWORD *)v38 + 24))(*(_QWORD *)(v47 + 8), v15, v4) == 1)goto LABEL_85;
        v46 = *((_QWORD *)v41 + 2);
      }
      v47 += 16;
    }
    if (AudioFileFormatRegistry::AddComponentFormats(v41))
    {
      v49 = *((_QWORD *)v41 + 1);
      v48 = *((_QWORD *)v41 + 2);
      while (v49 != v48)
      {
        v38 = *(AudioFileFormatBase **)(v49 + 8);
        if (v38)
        {
          if ((*(unsigned int (**)(_QWORD, ssize_t, unsigned __int8 *))(*(_QWORD *)v38 + 24))(*(_QWORD *)(v49 + 8), v15, v4) == 1)goto LABEL_85;
          v48 = *((_QWORD *)v41 + 2);
        }
        v49 += 16;
      }
    }
    if (value
      && (v50 = AudioFileFormatRegistry::Get(v41, value), (v38 = (AudioFileFormatBase *)v50) != 0)
      && (*(unsigned int (**)(uint64_t, ssize_t, unsigned __int8 *))(*(_QWORD *)v50 + 24))(v50, v15, v4))
    {
LABEL_85:
      v39 = 1;
    }
    else
    {
      close(v12);
      v38 = 0;
      v39 = 0;
      LODWORD(v4) = 1954115647;
    }
LABEL_86:
    if (v57)
      free(v57);
    if ((v39 & 1) != 0)
    {
      v51 = NewAudioFileHandle(v38);
      v52 = (unsigned int *)v51;
      if (!v51)
      {
        LODWORD(v4) = 1954115647;
        return (int)v4;
      }
      LODWORD(v4) = (*(uint64_t (**)(uint64_t, CFURLRef, uint64_t, uint64_t))(*(_QWORD *)v51 + 48))(v51, inFileRef, v6, v12);
      if ((_DWORD)v4)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 8))(v52);
        *outAudioFile = 0;
        return (int)v4;
      }
      v36 = (OpaqueAudioFileID *)v52[2];
      goto LABEL_39;
    }
  }
  else
  {
    LODWORD(v4) = -43;
  }
  return (int)v4;
}

void sub_18EE506B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_18EE506BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ID3Size(unsigned int a1, const unsigned __int8 *a2, int *a3)
{
  uint64_t result;
  int v7;

  result = 0;
  *a3 = 0;
  if (a1 >= 3)
  {
    if (*(_WORD *)a2 == 17481 && a2[2] == 51)
    {
      if (a1 < 0xA || a2[3] == 255 || a2[4] == 255)
        return 0;
      result = (((a2[7] & 0x7F) << 14) & 0xF01FC000 | ((a2[6] & 0x7F) << 21) | a2[9] & 0x7F | ((a2[8] & 0x7F) << 7))
             + 10;
      v7 = 2;
    }
    else
    {
      if (*(_WORD *)a2 != 16724 || a2[2] != 71)
        return 0;
      result = 128;
      v7 = 1;
    }
    *a3 = v7;
  }
  return result;
}

uint64_t GetAudioFileFormatRegistry(void)
{
  uint64_t v0;
  uint64_t v1;
  AudioFileFormatBase *v2;
  AudioFileFormatBase *v3;
  AudioFileFormatBase *v4;
  AudioFileFormatBase *v5;
  AudioFileFormatBase *v6;
  AudioFileFormatBase *v7;
  AudioFileFormatBase *v8;
  AudioFileFormatBase *v9;
  AudioFileFormatBase *v10;
  AudioFileFormatBase *v11;
  AudioFileFormatBase *v12;
  AudioFileFormatBase *v13;
  AudioFileFormatBase *v14;
  AudioFileFormatBase *v15;
  AudioFileFormatBase *v16;
  AudioFileFormatBase *v17;
  AudioFileFormatBase *v18;
  AudioFileFormatBase *v19;
  uint64_t v20;
  AudioFileFormatBase *v21;
  AudioFileFormatBase *v22;
  AudioFileFormatBase *v23;
  AudioFileFormatBase *v24;
  AudioFileFormatBase *v25;
  AudioFileFormatRegistry *v26;
  AudioFileFormatBase *v27;

  std::mutex::lock(&AudioFileMutex(void)::global);
  v0 = sAudioFileFormatRegistry;
  if (!sAudioFileFormatRegistry)
  {
    v1 = operator new();
    *(_QWORD *)v1 = &off_1E2908B20;
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_BYTE *)(v1 + 56) = 0;
    sAudioFileFormatRegistry = v1;
    v2 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v2 + 2) = 1667327590;
    *(_QWORD *)v2 = &off_1E2904218;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v2);
    v3 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v3 + 2) = 1095321158;
    *(_QWORD *)v3 = &off_1E2904C80;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v3);
    v4 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v4 + 2) = 1095321155;
    *(_QWORD *)v4 = &off_1E2904BD8;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v4);
    v5 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v5 + 2) = 1315264596;
    *(_QWORD *)v5 = &off_1E2905BA0;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v5);
    v6 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v6 + 2) = 1634562662;
    *(_QWORD *)v6 = &off_1E2903F98;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v6);
    v7 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v7 + 2) = 1633973363;
    *(_QWORD *)v7 = &off_1E2903EF0;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v7);
    v8 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v8 + 2) = 1836069990;
    *(_QWORD *)v8 = &off_1E2905A08;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v8);
    v9 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v9 + 2) = 1832149350;
    *(_QWORD *)v9 = &off_1E2907C38;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v9);
    v10 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v10 + 2) = 1832149606;
    *(_QWORD *)v10 = &off_1E2907CE8;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v10);
    v11 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v11 + 2) = 862417008;
    *(_QWORD *)v11 = &off_1E2907B88;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v11);
    v12 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v12 + 2) = 862416946;
    *(_QWORD *)v12 = &off_1E2908130;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v12);
    v13 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v13 + 2) = 1297106737;
    *(_QWORD *)v13 = &off_1E2905AB8;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v13);
    v14 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v14 + 2) = 1297106738;
    *(_QWORD *)v14 = &off_1E2905AB8;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v14);
    v15 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v15 + 2) = 1297106739;
    *(_QWORD *)v15 = &off_1E2905AB8;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v15);
    v16 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v16 + 2) = 1463899717;
    *(_QWORD *)v16 = &off_1E2906578;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v16);
    v17 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v17 + 2) = 1380333108;
    *(_QWORD *)v17 = &off_1E2906578;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v17);
    v18 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v18 + 2) = 1113011764;
    *(_QWORD *)v18 = &off_1E2906578;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v18);
    v19 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v19 + 2) = 1463170150;
    *(_QWORD *)v19 = &off_1E2906578;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v19);
    v20 = operator new();
    *(_DWORD *)(v20 + 8) = 1229206304;
    *(_QWORD *)v20 = &off_1E29030A0;
    *(_QWORD *)(v1 + 64) = v20;
    v21 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v21 + 2) = 1718378851;
    *(_QWORD *)v21 = &off_1E2905678;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v21);
    v22 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v22 + 2) = 1819238771;
    *(_QWORD *)v22 = &off_1E2905848;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v22);
    v23 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v23 + 2) = 1332176742;
    *(_QWORD *)v23 = &off_1E2904818;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v23);
    v24 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v24 + 2) = 1700998451;
    *(_QWORD *)v24 = &off_1E29043C0;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v24);
    v25 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v25 + 2) = 1633889587;
    *(_QWORD *)v25 = &off_1E29043C0;
    AudioFileFormatRegistry::AddAudioFileType((AudioFileFormatRegistry *)v1, v25);
    v26 = (AudioFileFormatRegistry *)sAudioFileFormatRegistry;
    v27 = (AudioFileFormatBase *)operator new();
    *((_DWORD *)v27 + 2) = 1635083362;
    *(_QWORD *)v27 = &off_1E2907810;
    AudioFileFormatRegistry::AddAudioFileType(v26, v27);
    v0 = sAudioFileFormatRegistry;
  }
  std::mutex::unlock(&AudioFileMutex(void)::global);
  return v0;
}

void sub_18EE50DB8(_Unwind_Exception *a1)
{
  std::mutex::unlock(&AudioFileMutex(void)::global);
  _Unwind_Resume(a1);
}

void AudioFileFormatRegistry::AddAudioFileType(AudioFileFormatRegistry *this, AudioFileFormatBase *a2)
{
  unsigned int v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  int64_t v38;
  void *v39;
  unint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;

  v3 = *((_DWORD *)a2 + 2);
  LODWORD(v53) = v3;
  *((_QWORD *)&v53 + 1) = a2;
  v5 = (char *)*((_QWORD *)this + 4);
  v4 = (char *)*((_QWORD *)this + 5);
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v8 = (char *)*((_QWORD *)this + 5);
  }
  else
  {
    v7 = v6 >> 4;
    v8 = (char *)*((_QWORD *)this + 4);
    do
    {
      v9 = v7 >> 1;
      v10 = &v8[16 * (v7 >> 1)];
      v12 = *(_DWORD *)v10;
      v11 = v10 + 16;
      v7 += ~(v7 >> 1);
      if (v12 < v3)
        v8 = v11;
      else
        v7 = v9;
    }
    while (v7);
  }
  v13 = *((_QWORD *)this + 6);
  if ((unint64_t)v4 >= v13)
  {
    v18 = (v6 >> 4) + 1;
    if (v18 >> 60)
      goto LABEL_63;
    v19 = v8 - v5;
    v20 = (v8 - v5) >> 4;
    v21 = v13 - (_QWORD)v5;
    v22 = (uint64_t)(v13 - (_QWORD)v5) >> 3;
    if (v22 > v18)
      v18 = v22;
    if (v21 >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v18;
    if (v23)
    {
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v23);
    }
    else
    {
      v25 = 0;
      v24 = 0;
    }
    v27 = &v25[16 * v20];
    v28 = &v25[16 * v24];
    if (v20 == v24)
    {
      if (v19 < 1)
      {
        if (v8 == v5)
          v30 = 1;
        else
          v30 = v19 >> 3;
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v30);
        v27 = &v31[16 * (v30 >> 2)];
        v28 = &v31[16 * v32];
        if (v25)
          operator delete(v25);
      }
      else
      {
        v29 = v20 + 2;
        if (v20 >= -1)
          v29 = v20 + 1;
        v27 -= 16 * (v29 >> 1);
      }
    }
    *(_OWORD *)v27 = v53;
    v33 = (char *)*((_QWORD *)this + 4);
    v34 = v27;
    if (v33 != v8)
    {
      v35 = v8;
      v36 = v27;
      do
      {
        v34 = v36 - 16;
        *((_OWORD *)v36 - 1) = *((_OWORD *)v35 - 1);
        v35 -= 16;
        v36 -= 16;
      }
      while (v35 != v33);
    }
    v37 = (char *)*((_QWORD *)this + 5);
    v38 = v37 - v8;
    if (v37 != v8)
      memmove(v27 + 16, v8, v37 - v8);
    v39 = (void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v34;
    *((_QWORD *)this + 5) = &v27[v38 + 16];
    *((_QWORD *)this + 6) = v28;
    if (v39)
      operator delete(v39);
  }
  else if (v8 == v4)
  {
    *(_OWORD *)v4 = v53;
    *((_QWORD *)this + 5) = v4 + 16;
  }
  else
  {
    v14 = v8 + 16;
    v15 = v4 - 16;
    v16 = (_OWORD *)*((_QWORD *)this + 5);
    while (v15 < v4)
    {
      v17 = *(_OWORD *)v15;
      v15 += 16;
      *v16++ = v17;
    }
    *((_QWORD *)this + 5) = v16;
    if (v4 != v14)
      memmove(&v4[-16 * ((v4 - v14) >> 4)], v8, v4 - v14);
    v26 = &v53;
    if (v8 <= (char *)&v53)
      v26 = &v53 + (*((_QWORD *)this + 5) > (unint64_t)&v53);
    *(_OWORD *)v8 = *v26;
  }
  v41 = (_OWORD *)*((_QWORD *)this + 2);
  v40 = *((_QWORD *)this + 3);
  if ((unint64_t)v41 < v40)
  {
    *v41 = v53;
    v42 = v41 + 1;
    goto LABEL_62;
  }
  v43 = *((_QWORD *)this + 1);
  v44 = ((uint64_t)v41 - v43) >> 4;
  v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 60)
LABEL_63:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v46 = v40 - v43;
  if (v46 >> 3 > v45)
    v45 = v46 >> 3;
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
    v47 = 0xFFFFFFFFFFFFFFFLL;
  else
    v47 = v45;
  if (v47)
    v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v47);
  else
    v48 = 0;
  v49 = (_OWORD *)(v47 + 16 * v44);
  v50 = v47 + 16 * v48;
  *v49 = v53;
  v42 = v49 + 1;
  v52 = (char *)*((_QWORD *)this + 1);
  v51 = (char *)*((_QWORD *)this + 2);
  if (v51 != v52)
  {
    do
    {
      *--v49 = *((_OWORD *)v51 - 1);
      v51 -= 16;
    }
    while (v51 != v52);
    v51 = (char *)*((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 1) = v49;
  *((_QWORD *)this + 2) = v42;
  *((_QWORD *)this + 3) = v50;
  if (v51)
    operator delete(v51);
LABEL_62:
  *((_QWORD *)this + 2) = v42;
}

void sub_18EE510C8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFileObjectHandle::AFAPI_OpenURL(AudioFileObject **this, const __CFURL *a2, char a3)
{
  return AudioFileObject::DoOpen(this[3], a2, a3);
}

uint64_t NewAudioFileHandle(AudioFileFormatBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    return 0;
  v1 = (*(uint64_t (**)(AudioFileFormatBase *))(*(_QWORD *)a1 + 120))(a1);
  if (!v1)
    return 0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136))(v1);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = operator new();
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)v4);
  *(_BYTE *)(v4 + 20) = 0;
  *(_QWORD *)(v4 + 12) = 0;
  *(_QWORD *)v4 = &off_1E2908408;
  *(_QWORD *)(v4 + 24) = v3;
  return v4;
}

void sub_18EE5116C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10A1C408233FA8ELL);
  _Unwind_Resume(a1);
}

BOOL NextAudioFormat::ExtensionIsThisFormat(NextAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3;

  v3 = 1;
  if (CFStringCompare(theString1, CFSTR("snd"), 1uLL))
    return CFStringCompare(theString1, CFSTR("au"), 1uLL) == kCFCompareEqualTo;
  return v3;
}

BOOL AMRAudioFormat::ExtensionIsThisFormat(AMRAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3;

  v3 = 1;
  if (CFStringCompare(theString1, CFSTR("amr"), 1uLL))
    return CFStringCompare(theString1, CFSTR("awb"), 1uLL) == kCFCompareEqualTo;
  return v3;
}

BOOL AACAudioFormat::ExtensionIsThisFormat(AACAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3;

  v3 = 1;
  if (CFStringCompare(theString1, CFSTR("aac"), 1uLL))
    return CFStringCompare(theString1, CFSTR("adts"), 1uLL) == kCFCompareEqualTo;
  return v3;
}

uint64_t AudioFileObject::DoOpen(AudioFileObject *this, const __CFURL *a2, char a3)
{
  uint64_t v4;
  const AudioStreamBasicDescription *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 100) = a3;
  v4 = (*(uint64_t (**)(AudioFileObject *, const __CFURL *))(*(_QWORD *)this + 24))(this, a2);
  if ((_DWORD)v4)
  {
    v6 = v4;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "AudioFileObject.cpp";
      v12 = 1024;
      v13 = 80;
      v7 = MEMORY[0x1E0C81028];
      v8 = "%25s:%-5d  Open failed";
LABEL_7:
      _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v10, 0x12u);
    }
  }
  else
  {
    v6 = AudioFileObject::ValidateFormatAndData(this, v5);
    if ((_DWORD)v6 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "AudioFileObject.cpp";
      v12 = 1024;
      v13 = 83;
      v7 = MEMORY[0x1E0C81028];
      v8 = "%25s:%-5d  ValidateFormatAndData failed";
      goto LABEL_7;
    }
  }
  return v6;
}

uint64_t AudioFileObject::Open(AudioFileObject *this, const __CFURL *a2, char a3, int a4)
{
  uint64_t v4;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) == 0)
    return 1886547263;
  AudioFileObject::SetURL(this, a2);
  AudioFileObject::OpenFile(this, a3, a4);
  v4 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 40))(this);
  if ((_DWORD)v4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v9 = 136315394;
    v10 = "AudioFileObject.cpp";
    v11 = 1024;
    v12 = 105;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  OpenFromDataSource failed", (uint8_t *)&v9, 0x12u);
  }
  return v4;
}

uint64_t AudioFileObject::OpenFile(AudioFileObject *this, char a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = operator new();
  v7 = operator new();
  *(_BYTE *)(v7 + 8) = 1;
  *(_QWORD *)v7 = &off_1E2907E40;
  *(_DWORD *)(v7 + 12) = a3;
  *(_BYTE *)(v7 + 16) = a2;
  *(_DWORD *)(v7 + 20) = 0;
  *(_OWORD *)(v7 + 24) = xmmword_18F1173E0;
  *(_BYTE *)(v6 + 8) = 0;
  *(_QWORD *)v6 = &off_1E29070A8;
  *(_QWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 24) = 0;
  *(_DWORD *)(v6 + 32) = 4096;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0x8000;
  *(_OWORD *)(v6 + 56) = xmmword_18F1173E0;
  *(_BYTE *)(v6 + 72) = 1;
  v8 = *((_QWORD *)this + 13);
  if (v8 != v6)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    *((_QWORD *)this + 13) = v6;
  }
  *((_DWORD *)this + 24) = a3;
  *((_BYTE *)this + 100) = a2;
  return 0;
}

void sub_18EE515C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10B1C4026EC6CB3);
  _Unwind_Resume(a1);
}

void AudioFileObject::SetURL(AudioFileObject *this, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = (CFTypeRef)*((_QWORD *)this + 11);
  if (v3 != cf)
  {
    if (cf)
    {
      CFRetain(cf);
      v3 = (CFTypeRef)*((_QWORD *)this + 11);
    }
    if (v3)
      CFRelease(v3);
    *((_QWORD *)this + 11) = cf;
  }
}

uint64_t AudioFileObject::ValidateFormatAndData(AudioFileObject *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v3 = 1685348671;
  v4 = *(_OWORD *)((char *)this + 40);
  v8 = *(_OWORD *)((char *)this + 24);
  v9 = v4;
  v10 = *((_QWORD *)this + 7);
  if (AudioFileObject::IsDataFormatValid((AudioFileObject *)&v8, a2))
  {
    if (DWORD2(v8) != 1819304813)
      return 0;
    v5 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 224))(this);
    v6 = v5 / v9;
    if ((*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 240))(this) <= v6)
      return 0;
  }
  return v3;
}

BOOL AudioFileObject::IsDataFormatValid(AudioFileObject *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;

  v2 = 0;
  if (*(double *)this >= 0.0 && *(double *)this <= 3000000.0)
  {
    v3 = *((_DWORD *)this + 7);
    v2 = 0;
    if ((v3 - 0x100000) >= 0xFFF00001)
    {
      if (*((_DWORD *)this + 2) != 1819304813)
        return 1;
      v4 = *((_DWORD *)this + 8);
      if ((v4 - 65) >= 0xFFFFFFC0 && *((_DWORD *)this + 5) == 1)
      {
        v5 = *((_DWORD *)this + 4);
        if (v5)
        {
          if (*((_DWORD *)this + 6) == v5 && v5 >= (v4 * v3 + 7) >> 3)
            return 1;
        }
      }
    }
  }
  return v2;
}

uint64_t AudioFileObject::GetNumPackets(AudioFileObject *this)
{
  return *((_QWORD *)this + 2);
}

void MP4AudioProgramConfig::Clear(MP4AudioProgramConfig *this)
{
  *(_QWORD *)this = 0;
  bzero((char *)this + 8, 4uLL);
  bzero((char *)this + 12, 0x84uLL);
  bzero((char *)this + 144, 0x84uLL);
  bzero((char *)this + 276, 0x84uLL);
  bzero((char *)this + 408, 0x84uLL);
  bzero((char *)this + 540, 0x84uLL);
  bzero((char *)this + 672, 0x84uLL);
  bzero((char *)this + 804, 0xCuLL);
  bzero((char *)this + 816, 0xCuLL);
  bzero((char *)this + 828, 0xCuLL);
  *((_DWORD *)this + 210) = 0;
  bzero((char *)this + 844, 0x100uLL);
}

BOOL AIFFAudioFormat::ExtensionIsThisFormat(AIFFAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3;

  v3 = 1;
  if (CFStringCompare(theString1, CFSTR("aiff"), 1uLL))
    return CFStringCompare(theString1, CFSTR("aif"), 1uLL) == kCFCompareEqualTo;
  return v3;
}

BOOL CAFAudioFormat::ExtensionIsThisFormat(CAFAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3;

  v3 = 1;
  if (CFStringCompare(theString1, CFSTR("caf"), 1uLL))
    return CFStringCompare(theString1, CFSTR("caff"), 1uLL) == kCFCompareEqualTo;
  return v3;
}

uint64_t DecoderConfigDescr::GetBaseLevelASBD(DecoderConfigDescr *this, AudioStreamBasicDescription *a2)
{
  unint64_t v4;
  int v5;
  AudioFormatID v6;
  UInt32 FramesPerPacket;
  unint64_t v8;
  uint64_t v9;
  int v10;
  UInt32 v11;
  uint64_t result;
  unsigned int v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  bzero(a2, 0x28uLL);
  v5 = *((_DWORD *)this + 10);
  if (v5 <= 22)
  {
    v6 = 1633772397;
    switch(v5)
    {
      case 1:
        goto LABEL_12;
      case 2:
        v6 = 1633772320;
        goto LABEL_12;
      case 3:
        v6 = 1633772402;
        goto LABEL_12;
      case 4:
        v6 = 1633772404;
        goto LABEL_12;
      default:
        goto LABEL_32;
    }
  }
  switch(v5)
  {
    case 23:
      v6 = 1633772396;
      break;
    case 39:
      v6 = 1633772389;
      break;
    case 42:
      v6 = 1970495843;
      break;
    default:
LABEL_32:
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v15 = "ACMP4BitStreams.cpp";
        v16 = 1024;
        v17 = 2588;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DecoderConfigDescr::BaseLevelASBD: unsupported or unknown MP4 Audio Object Type", buf, 0x12u);
      }
      return 0xFFFFFFFFLL;
  }
LABEL_12:
  a2->mFormatID = v6;
  LODWORD(v4) = *((_DWORD *)this + 11);
  a2->mSampleRate = (double)v4;
  FramesPerPacket = DecoderConfigDescr::GetFramesPerPacket(this);
  a2->mFramesPerPacket = FramesPerPacket;
  if ((*((_DWORD *)this + 14) == 5 || (v5 - 5) >= 0xFFFFFFFC)
    && *((_DWORD *)this + 18) == 1
    && *((_DWORD *)this + 15) == 2 * *((_DWORD *)this + 11))
  {
    FramesPerPacket >>= 1;
    a2->mFramesPerPacket = FramesPerPacket;
  }
  v9 = *((_QWORD *)this + 149);
  if (v9)
  {
    v10 = *((_DWORD *)this + 10);
    if (v10 == 42)
    {
      LODWORD(v8) = *(_DWORD *)(v9 + 8);
      a2->mSampleRate = (double)v8;
    }
    else if (v10 == 39 && *(_DWORD *)(v9 + 28) == 1)
    {
      a2->mFramesPerPacket = FramesPerPacket >> 1;
    }
  }
  v11 = *((_DWORD *)this + 20);
  if (v11 == 1)
  {
    result = 0;
LABEL_30:
    a2->mChannelsPerFrame = v11;
    return result;
  }
  v13 = 0;
  result = DecoderConfigDescr::GetChannelLayoutTag(this, &v13);
  if (!(_DWORD)result)
  {
    v11 = (unsigned __int16)v13;
    goto LABEL_30;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v15 = "ACMP4BitStreams.cpp";
    v16 = 1024;
    v17 = 2626;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DecoderConfigDescr::BaseLevelASBD: the DecoderConfigDescriptor channelConfiguration is incorrect", buf, 0x12u);
  }
  return 4294967090;
}

uint64_t DecoderConfigDescr::GetChannelLayoutTag(DecoderConfigDescr *this, unsigned int *a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;

  result = 560226676;
  v4 = 6553601;
  switch(*((_DWORD *)this + 12))
  {
    case 0:
      if (*((_DWORD *)this + 10) != 36)
      {
        v6 = *((_DWORD *)this + 25);
        v7 = *((_DWORD *)this + 58);
        v8 = *((_DWORD *)this + 91);
        v9 = *((_DWORD *)this + 124);
        switch(v7 + v6 + v8 + v9)
        {
          case 1:
            if (v6 == 1)
            {
              v10 = *((_DWORD *)this + 26) == 0;
              v11 = 6619138;
              goto LABEL_13;
            }
            return result;
          case 2:
            if (v6 == 1 && v8 == 1)
            {
              if (*((_DWORD *)this + 26) && *((_DWORD *)this + 92))
              {
                v4 = 7077892;
                goto LABEL_89;
              }
            }
            else if (v6 == 2 && !*((_DWORD *)this + 26))
            {
              v10 = *((_DWORD *)this + 27) == 0;
              v11 = 7471107;
              v4 = 6619138;
              goto LABEL_13;
            }
            return result;
          case 3:
            if (v6 == 2 && v8 == 1 && !*((_DWORD *)this + 26) && *((_DWORD *)this + 27))
            {
              v10 = *((_DWORD *)this + 92) == 0;
              v11 = 7864325;
              v4 = 7602180;
              goto LABEL_13;
            }
            return result;
          case 4:
            if (v6 == 2 && v8 == 2)
            {
              if (!*((_DWORD *)this + 26)
                && *((_DWORD *)this + 27)
                && *((_DWORD *)this + 92)
                && !*((_DWORD *)this + 93))
              {
                v4 = 9240582;
                goto LABEL_89;
              }
              return result;
            }
            if (v6 != 2)
              return result;
            if (v7 == 1)
            {
              if (v8 != 1)
                return result;
              v13 = *((_DWORD *)this + 26);
              if (!v13 && *((_DWORD *)this + 27) && *((_DWORD *)this + 59))
              {
                if (*((_DWORD *)this + 92))
                  v4 = 9371655;
                else
                  v4 = 9240582;
                goto LABEL_89;
              }
              if (v9 != 1)
                return result;
            }
            else
            {
              if (v8 != 1 || v9 != 1)
                return result;
              v13 = *((_DWORD *)this + 26);
            }
            if (!v13 && *((_DWORD *)this + 27) && *((_DWORD *)this + 92))
              goto LABEL_88;
            return result;
          case 5:
            if (v6 == 2 && v8 == 2 && v9 == 1)
            {
              v12 = *((_DWORD *)this + 26);
              if (!v12 && *((_DWORD *)this + 27) && *((_DWORD *)this + 92) && !*((_DWORD *)this + 93))
                goto LABEL_81;
              if (v7)
              {
                if (v7 != 1 || v12)
                  return result;
                goto LABEL_39;
              }
            }
            else
            {
              if (v6 != 2)
              {
                if (v6 == 3
                  && !v7
                  && v8 == 1
                  && v9 == 1
                  && !*((_DWORD *)this + 26)
                  && *((_DWORD *)this + 27)
                  && *((_DWORD *)this + 92)
                  && *((_DWORD *)this + 28))
                {
                  goto LABEL_70;
                }
                return result;
              }
              if (v7)
              {
                if (v7 != 1)
                  return result;
                if (v8 == 1)
                {
                  if (v9 == 1 && !*((_DWORD *)this + 26) && *((_DWORD *)this + 27) && *((_DWORD *)this + 59))
                  {
                    v10 = *((_DWORD *)this + 92) == 0;
                    v11 = 8323080;
                    v4 = 9306119;
LABEL_13:
                    if (!v10)
                      v4 = v11;
                    goto LABEL_89;
                  }
                  return result;
                }
                if (v8 != 2 || *((_DWORD *)this + 26))
                  return result;
LABEL_39:
                if (*((_DWORD *)this + 27)
                  && *((_DWORD *)this + 59)
                  && *((_DWORD *)this + 92)
                  && !*((_DWORD *)this + 93))
                {
                  v4 = 9437192;
                  goto LABEL_89;
                }
                return result;
              }
            }
            if (v8 == 2
              && v9 == 1
              && !*((_DWORD *)this + 26)
              && *((_DWORD *)this + 27)
              && *((_DWORD *)this + 92)
              && *((_DWORD *)this + 93))
            {
              goto LABEL_77;
            }
            return result;
          default:
            return result;
        }
      }
      v5 = *((_QWORD *)this + 149);
      if (v5)
      {
        v4 = *(_DWORD *)(v5 + 24);
        goto LABEL_89;
      }
      return result;
    case 1:
      goto LABEL_89;
    case 2:
      v4 = 6619138;
      goto LABEL_89;
    case 3:
      v4 = 7471107;
      goto LABEL_89;
    case 4:
      v4 = 7602180;
      goto LABEL_89;
    case 5:
      v4 = 7864325;
      goto LABEL_89;
    case 6:
LABEL_88:
      v4 = 8126470;
      goto LABEL_89;
    case 7:
      v4 = 8323080;
      goto LABEL_89;
    case 0xB:
LABEL_81:
      v4 = 9306119;
      goto LABEL_89;
    case 0xC:
LABEL_77:
      v4 = 11993096;
      goto LABEL_89;
    case 0xE:
LABEL_70:
      v4 = 12058632;
LABEL_89:
      result = 0;
      *a2 = v4;
      return result;
    default:
      return result;
  }
}

uint64_t DecoderConfigDescr::GetFramesPerPacket(DecoderConfigDescr *this)
{
  int v1;
  uint64_t result;
  int v4;
  BOOL v5;
  char v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;

  v1 = *((_DWORD *)this + 10) - 1;
  result = 384;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 20:
    case 28:
      result = 1024;
      if (*((_QWORD *)this + 149))
      {
        if (*((_DWORD *)this + 13))
          result = 960;
        else
          result = 1024;
      }
      if (*((_DWORD *)this + 18) == 1)
      {
        v4 = *((_DWORD *)this + 11);
        if (v4)
        {
          v5 = *((_DWORD *)this + 15) == v4;
          goto LABEL_9;
        }
      }
      break;
    case 7:
    case 23:
      v7 = (_DWORD *)*((_QWORD *)this + 149);
      if (!v7)
        goto LABEL_40;
      if (v7[4])
      {
        v8 = v7[8];
        if (v8 >= 4)
          goto LABEL_40;
        result = dword_18F117600[v8];
      }
      else
      {
        v14 = v7[9];
        if (v7[5])
        {
          if (v14 >= 0x10)
          {
            result = 160;
            if (v14 >= 0x17)
            {
              if (v14 >= 0x20)
                result = 0;
              else
                result = 160;
            }
          }
          else
          {
            result = 320;
          }
        }
        else
        {
          if (v14 == 27)
            v15 = 240;
          else
            v15 = 0;
          if (v14 >= 0x1B)
            v16 = v15;
          else
            v16 = 80;
          if (v14 >= 0x16)
            v17 = v16;
          else
            v17 = 160;
          if (v14 >= 6)
            v18 = v17;
          else
            v18 = 240;
          if (v14 >= 3)
            result = v18;
          else
            result = 320;
          if (v7[11])
          {
            v12 = v7[13];
            goto LABEL_61;
          }
        }
      }
      break;
    case 8:
    case 24:
      result = 160;
      break;
    case 22:
      result = 512;
      if (*((_QWORD *)this + 149))
      {
        if (*((_DWORD *)this + 13))
          result = 480;
        else
          result = 512;
      }
      break;
    case 31:
      return result;
    case 32:
      result = 1152;
      break;
    case 33:
      if (*((_DWORD *)this + 11) <= 0x5DC0u)
        result = 576;
      else
        result = 1152;
      break;
    case 35:
      v10 = *((_QWORD *)this + 149);
      if (!v10)
        goto LABEL_40;
      result = *(unsigned int *)(v10 + 12);
      break;
    case 36:
    case 37:
      v9 = *((_QWORD *)this + 149);
      if (!v9)
        goto LABEL_40;
      result = (1024 << (*(_BYTE *)(v9 + 1116) & 7));
      break;
    case 38:
      v11 = (_DWORD *)*((_QWORD *)this + 149);
      result = 512;
      if (v11)
      {
        result = v11[4] ? 480 : 512;
        if (v11[6])
        {
          v12 = v11[7];
LABEL_61:
          v5 = v12 == 0;
LABEL_9:
          v6 = !v5;
          result = ((_DWORD)result << v6);
        }
      }
      break;
    case 41:
      v13 = *((_QWORD *)this + 149);
      if (v13 && *(_BYTE *)(v13 + 216))
        result = kUSACSbrFrameLengthInfoTable[4 * *(unsigned int *)(v13 + 12) + 2];
      else
LABEL_40:
        result = 0;
      break;
    default:
      result = 1024;
      break;
  }
  return result;
}

_DWORD *MP4SampleRate::SetFromIndex(_DWORD *this, unsigned int a2, int a3)
{
  _QWORD *exception;

  if (a2 > 0xC)
  {
    if (a2 >= 0x10 && a3 || a2 >= 0xF && !a3)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = "Error in MP4SampleRate::deserialize(): illegal sample rate index";
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
  }
  else
  {
    *this = MP4SampleRate::kMP4SampleRateTable[a2];
  }
  return this;
}

void std::vector<unsigned char>::__append(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

uint64_t DecoderConfigDescr::GetASBD(DecoderConfigDescr *this, AudioStreamBasicDescription *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t result;
  unint64_t v7;
  int v8;
  int v9;
  AudioFormatID v10;
  UInt32 v11;
  unsigned int v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 14))
    return DecoderConfigDescr::GetBaseLevelASBD(this, a2);
  if ((*((_DWORD *)this + 10) - 5) < 0xFFFFFFFC)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "ACMP4BitStreams.cpp";
      v15 = 1024;
      v16 = 2679;
      v4 = MEMORY[0x1E0C81028];
      v5 = "%25s:%-5d  DecoderConfigDescr::GetASBD: unsupported or unknown MP4 Audio Object Type / Extended Object Type combination";
LABEL_16:
      _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_ERROR, v5, buf, 0x12u);
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  v12 = 0;
  if (DecoderConfigDescr::GetChannelLayoutTag(this, &v12))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "ACMP4BitStreams.cpp";
      v15 = 1024;
      v16 = 2644;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DecoderConfigDescr::GetASBD: the DecoderConfigDescriptor channelConfiguration is incorrect", buf, 0x12u);
    }
    return 4294967090;
  }
  bzero(a2, 0x28uLL);
  if (*((_DWORD *)this + 14) != 5 || *((_DWORD *)this + 18) != 1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "ACMP4BitStreams.cpp";
      v15 = 1024;
      v16 = 2665;
      v4 = MEMORY[0x1E0C81028];
      v5 = "%25s:%-5d  DecoderConfigDescr::GetASBD: unsupported or unknown MP4 Extension Audio Object Type";
      goto LABEL_16;
    }
    return 0xFFFFFFFFLL;
  }
  switch(*((_DWORD *)this + 10))
  {
    case 1:
      v8 = *((_DWORD *)this + 20);
      v9 = 1633774960;
      v10 = 1633774963;
      goto LABEL_21;
    case 2:
      v8 = *((_DWORD *)this + 20);
      v10 = 1633772392;
      v9 = 1633772400;
      goto LABEL_21;
    case 3:
      v8 = *((_DWORD *)this + 20);
      v9 = 1633776240;
      v10 = 1633776243;
LABEL_21:
      if (v8)
        v10 = v9;
      goto LABEL_26;
    case 4:
      v8 = *((_DWORD *)this + 20);
      if (v8)
        v10 = 1633776752;
      else
        v10 = 1633776755;
LABEL_26:
      a2->mFormatID = v10;
      break;
    default:
      v8 = *((_DWORD *)this + 20);
      break;
  }
  LODWORD(v7) = *((_DWORD *)this + 15);
  a2->mSampleRate = (double)v7;
  a2->mFramesPerPacket = DecoderConfigDescr::GetFramesPerPacket(this);
  v11 = (unsigned __int16)v12;
  if (v8 != 1)
  {
    result = 0;
    goto LABEL_31;
  }
  if ((unsigned __int16)v12 == 1)
  {
    result = 0;
    v11 = 2;
LABEL_31:
    a2->mChannelsPerFrame = v11;
    return result;
  }
  result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    *(_DWORD *)buf = 136315394;
    v14 = "ACMP4BitStreams.cpp";
    v15 = 1024;
    v16 = 2673;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DecoderConfigDescr::GetASBD: unsupported number of channels", buf, 0x12u);
    return 0;
  }
  return result;
}

BOOL AIFCAudioFormat::ExtensionIsThisFormat(AIFCAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3;

  v3 = 1;
  if (CFStringCompare(theString1, CFSTR("aifc"), 1uLL))
  {
    v3 = 1;
    if (CFStringCompare(theString1, CFSTR("aiff"), 1uLL))
      return CFStringCompare(theString1, CFSTR("aif"), 1uLL) == kCFCompareEqualTo;
  }
  return v3;
}

double AACAudioFormat::New(AACAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 80) = 0x6164747300000001;
  *(_QWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 96) = -1;
  *(_WORD *)(v1 + 100) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0x100000000;
  *(_DWORD *)(v1 + 136) = 65792;
  result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)v1 = &off_1E2901800;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 156) = 0;
  *(_QWORD *)(v1 + 162) = 0;
  *(_QWORD *)(v1 + 140) = 0;
  *(_QWORD *)(v1 + 148) = 0;
  *(_DWORD *)(v1 + 172) = 7;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  return result;
}

uint64_t AACAudioFormat::FileDataIsThisFormat(AACAudioFormat *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v4;
  __int16 v5;
  int v6;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (ADTSHeader::Deserialize((ADTSHeader *)&v4, a3, a2))
    return 0xFFFFFFFFLL;
  else
    return 1;
}

uint64_t AudioFileFormatRegistry::Get(AudioFileFormatRegistry *this, unsigned int a2)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  unsigned int v17;

  v4 = (_DWORD *)*((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 5) - (_QWORD)v4;
  if (v5)
  {
    v6 = v5 >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[4 * (v6 >> 1)];
      v10 = *v8;
      v9 = v8 + 4;
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (*v4 == a2)
    return *((_QWORD *)v4 + 1);
  if (!AudioFileFormatRegistry::AddComponentFormats(this))
    return 0;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  v12 = *((_QWORD *)this + 5) - (_QWORD)v4;
  if (v12)
  {
    v13 = v12 >> 4;
    do
    {
      v14 = v13 >> 1;
      v15 = &v4[4 * (v13 >> 1)];
      v17 = *v15;
      v16 = v15 + 4;
      v13 += ~(v13 >> 1);
      if (v17 < a2)
        v4 = v16;
      else
        v13 = v14;
    }
    while (v13);
  }
  if (*v4 == a2)
    return *((_QWORD *)v4 + 1);
  else
    return 0;
}

double CAFAudioFormat::New(CAFAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 80) = 0x6361666600000001;
  *(_QWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 96) = -1;
  *(_WORD *)(v1 + 100) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0x100000000;
  *(_DWORD *)(v1 + 136) = 65792;
  result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)v1 = &off_1E2901DD8;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  *(_DWORD *)(v1 + 168) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 176) = -1;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_QWORD *)(v1 + 200) = 0x4072C00000000000;
  *(_BYTE *)(v1 + 208) = 0;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  return result;
}

BOOL CAFAudioFormat::FileDataIsThisFormat(CAFAudioFormat *this, unsigned int a2, _DWORD *a3)
{
  return a2 >= 4 && *a3 == 1717985635;
}

uint64_t CAFAudioFile::OpenFromDataSource(CAFAudioFile *this)
{
  uint64_t v1;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 784))(this);
  if ((_DWORD)v1 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "CAFAudioFile.cpp";
    v5 = 1024;
    v6 = 1146;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAFAudioFile::OpenFromDataSource Failed", (uint8_t *)&v3, 0x12u);
  }
  return v1;
}

BOOL AIFFAudioFormat::FileDataIsThisFormat(AIFFAudioFormat *this, unsigned int a2, _DWORD *a3)
{
  if (a2 < 0xC)
    return 0;
  return *a3 == 1297239878 && a3[2] == 1179011393;
}

uint64_t IPCAURegistrar_IsActiveHost(int a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  _QWORD block[6];
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = CADeprecated::TSingleton<IPCAURegistrar>::instance();
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v3 = *(NSObject **)(v2 + 224);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN14IPCAURegistrar12IsActiveHostEi_block_invoke;
  block[3] = &unk_1E2921D30;
  v9 = a1;
  block[4] = &v10;
  block[5] = v2;
  dispatch_sync(v3, block);
  if (kInterAppAudioScope)
  {
    v4 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_7;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = *((unsigned __int8 *)v11 + 24);
    *(_DWORD *)buf = 136315906;
    v15 = "IPCAURegistrar.mm";
    v16 = 1024;
    v17 = 523;
    v18 = 1024;
    v19 = a1;
    v20 = 1024;
    v21 = v5;
    _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d IsActiveHost(%d): %d", buf, 0x1Eu);
  }
LABEL_7:
  v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t CADeprecated::TSingleton<IPCAURegistrar>::instance()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&CADeprecated::TSingleton<IPCAURegistrar>::sOnce);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&CADeprecated::TSingleton<IPCAURegistrar>::sOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<IPCAURegistrar>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<IPCAURegistrar>::sInstance;
}

uint64_t *AudioMetadataTimeline_AP::AudioMetadataTimeline_AP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  char *v7;
  char *v8;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = *a1;
  }
  *((_OWORD *)a1 + 1) = 0u;
  *((_WORD *)a1 + 24) = 0;
  *((_OWORD *)a1 + 2) = 0u;
  if (!v3)
    __assert_rtn("AudioMetadataTimeline_AP", "AudioMetadataTimeline.cpp", 755, "mMemoryPool");
  v7 = (char *)operator new(0x14000uLL);
  v8 = v7 + 81920;
  a1[2] = (uint64_t)v7;
  a1[3] = (uint64_t)v7;
  a1[4] = (uint64_t)(v7 + 81920);
  bzero(v7, 0x14000uLL);
  a1[3] = (uint64_t)v8;
  return a1;
}

void sub_18EE52C70(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RegistryAccess::RegistryAccess(RegistryAccess *this)
{
  acv2::ConverterRegistry *v1;
  uint64_t v2;

  RegistryAccess::instance(void)::inst = 0;
  qword_1ECEF4E20 = 0;
  v1 = (acv2::ConverterRegistry *)operator new();
  acv2::ConverterRegistry::ConverterRegistry(v1);
  v2 = qword_1ECEF4E20;
  qword_1ECEF4E20 = (uint64_t)v1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_18EE52CFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = v1;
  MEMORY[0x193FFE460](v2, 0x1081C408399A26FLL);
  v4 = qword_1ECEF4E20;
  qword_1ECEF4E20 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

acv2::ConverterRegistry *acv2::ConverterRegistry::ConverterRegistry(acv2::ConverterRegistry *this)
{
  *(_QWORD *)this = &off_1E290A840;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  qmemcpy((char *)this + 40, "mcplmcplvnocmcpllppa", 20);
  *((_QWORD *)this + 4) = &off_1E290AC90;
  *((_WORD *)this + 32) = 0;
  acv2::ConverterRegistry::AddFactory(this, (acv2::ConverterRegistry *)((char *)this + 32));
  return this;
}

void sub_18EE52DB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Graph::getParameterList(DSPGraph::Graph *this@<X0>, char **a2@<X8>)
{
  uint64_t *v2;
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 67);
  if (v2)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      if ((unint64_t)v4 >= v6)
      {
        v8 = (v4 - v5) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v6 - (_QWORD)v5) >> 1 > v9)
          v9 = (uint64_t)(v6 - (_QWORD)v5) >> 1;
        if (v6 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
        else
          v11 = 0;
        v12 = (char *)(v10 + 4 * v8);
        *(_DWORD *)v12 = *((_DWORD *)v2 + 4);
        v7 = v12 + 4;
        while (v4 != v5)
        {
          v13 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v12 - 1) = v13;
          v12 -= 4;
        }
        v6 = v10 + 4 * v11;
        *a2 = v12;
        a2[1] = v7;
        a2[2] = (char *)v6;
        if (v5)
          operator delete(v5);
        v5 = v12;
      }
      else
      {
        *(_DWORD *)v4 = *((_DWORD *)v2 + 4);
        v7 = v4 + 4;
      }
      a2[1] = v7;
      v2 = (uint64_t *)*v2;
      v4 = v7;
    }
    while (v2);
  }
}

void sub_18EE52EDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFTypeID applesauce::CF::convert_as<std::string,0>(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID;
  CFTypeID result;
  char v6;
  __int128 v7;
  uint64_t v8;

  TypeID = CFStringGetTypeID();
  result = CFGetTypeID(a2);
  if (TypeID == result)
  {
    result = (CFTypeID)applesauce::CF::details::CFString_get_value<false>((uint64_t)&v7, a2);
    *(_OWORD *)a1 = v7;
    *(_QWORD *)(a1 + 16) = v8;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 24) = v6;
  return result;
}

_QWORD *applesauce::CF::details::CFString_get_value<false>(uint64_t a1, CFStringRef theString)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, CStringPtr);
  Length = CFStringGetLength(theString);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(theString, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a1, maxBufLen, 0);
  if (*(char *)(a1 + 23) >= 0)
    v7 = (UInt8 *)a1;
  else
    v7 = *(UInt8 **)a1;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(theString, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

uint64_t DSPGraph::Graph::setAUStrip(DSPGraph::Graph *this, CFTypeRef cf)
{
  const __CFNumber *v4;
  unint64_t v5;
  os_signpost_id_t v6;
  const __CFArray *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  const __CFArray *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 *v15;
  char *v16;
  const void *v17;
  const void *v18;
  NSObject *v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD *v22;
  const __CFNumber *v23;
  std::runtime_error *v24;
  uint64_t v25;
  const __CFDictionary *v26;
  const __CFArray *v28;
  const __CFArray *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  CFTypeRef v33;
  const void *v34;
  const void *v35;
  CFTypeID v36;
  NSObject *v37;
  _QWORD *v38;
  NSObject *v39;
  _QWORD *v40;
  _BYTE *v41;
  const __CFArray *v42;
  const __CFArray *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  CFTypeRef v48;
  const __CFNumber *v49;
  const __CFNumber *v50;
  const __CFNumber *v51;
  const void *v52;
  float v53;
  NSObject *v54;
  char *v55;
  NSObject *v56;
  char *v57;
  const __CFNumber *v58;
  const __CFBoolean *v59;
  unsigned __int16 v60;
  std::runtime_error *v61;
  std::runtime_error *v62;
  std::runtime_error *v63;
  std::runtime_error *v64;
  std::runtime_error *v65;
  std::runtime_error *v66;
  std::runtime_error *v67;
  std::runtime_error *v68;
  std::runtime_error *v69;
  std::runtime_error *v70;
  std::runtime_error *v71;
  std::runtime_error *v72;
  std::runtime_error *v73;
  std::runtime_error *v74;
  std::runtime_error *v75;
  std::runtime_error *v76;
  std::runtime_error *exception;
  std::runtime_error *v78;
  std::runtime_error *v79;
  std::runtime_error *v80;
  std::runtime_error *v81;
  std::runtime_error *v82;
  std::runtime_error *v83;
  std::runtime_error *v84;
  CFIndex v85;
  const __CFDictionary *v86;
  CFIndex Count;
  const __CFArray *theArray;
  CFIndex v89;
  unint64_t v90;
  CFIndex v91;
  _QWORD *v92;
  const __CFArray *v93;
  const __CFArray *v94;
  char **v95;
  CFIndex v96;
  os_signpost_id_t spid;
  CFIndex v98;
  char *v99;
  CFTypeRef cfa[2];
  void *__p;
  uint64_t v102;
  unsigned __int8 v103;
  CFTypeRef v104;
  const __CFArray *v105;
  char v106;
  CFTypeRef v107;
  const __CFDictionary *v108;
  char v109;
  const __CFDictionary *v110;
  const __CFDictionary *v111;
  _BYTE v112[12];
  _BYTE buf[12];
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  if (!cf)
  {
    cfa[0] = 0;
LABEL_198:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)cfa, cf);
  if (!cfa[0])
    goto LABEL_198;
  v4 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>((CFDictionaryRef)cfa[0], CFSTR("version"));
  if (!v4 || (v5 = applesauce::CF::convert_as<int,0>(v4), !HIDWORD(v5)) || (_DWORD)v5 == 1)
  {
    CFRetain(cf);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v108, cf);
    if (!v108)
    {
      v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v78, "Could not construct");
    }
    if (applesauce::CF::details::has_key<__CFString const* const&>(v108, CFSTR("strips")))
    {
      if (!v108)
      {
        v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v81, "Could not construct");
      }
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v105, v108, CFSTR("strips"));
      if (DSPGraph::getLog(void)::onceToken != -1)
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
      v6 = os_signpost_id_make_with_pointer((os_log_t)DSPGraph::getLog(void)::gLog, this);
      v7 = v105;
      if (!v105)
      {
LABEL_67:
        v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v24, "Could not construct");
      }
      v8 = 0;
      v9 = (_QWORD *)((char *)this + 784);
      v10 = v6 - 1;
      while (v8 < CFArrayGetCount(v7))
      {
        if (!v105)
        {
          v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v67, "Could not construct");
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)v112, v105, v8);
        if (!*(_QWORD *)v112)
        {
          v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v68, "Could not construct");
        }
        if (applesauce::CF::details::has_key<__CFString const* const&>(*(const __CFDictionary **)v112, CFSTR("effects")))
        {
          if (!*(_QWORD *)v112)
          {
            v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v69, "Could not construct");
          }
          applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v111, *(CFDictionaryRef *)v112, CFSTR("effects"));
          v11 = v111;
          if (!v111)
          {
LABEL_177:
            v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v61, "Could not construct");
          }
          v12 = 0;
          while (v12 < CFArrayGetCount(v11))
          {
            if (!v111)
            {
              v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v62, "Could not construct");
            }
            applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v110, v111, v12);
            if (!v110)
            {
              v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v63, "Could not construct");
            }
            applesauce::CF::details::find_at_key<std::string,__CFString const* const&>((uint64_t)&__p, v110, CFSTR("displayname"));
            v13 = v103;
            v14 = v103;
            if ((v103 & 0x80u) != 0)
              v13 = v102;
            if (!v13)
              __cxa_rethrow();
            v15 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>(v9, (unsigned __int8 *)&__p);
            if (v15)
            {
              v16 = (char *)*((_QWORD *)v15 + 5);
              if (v16)
              {
                if (!v110)
                {
                  v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v65, "Could not construct");
                }
                v17 = applesauce::CF::details::at_key<__CFString const* const&>(v110, CFSTR("aupreset"));
                if (!v17)
                {
                  v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v66, "Could not find item");
                }
                v18 = v17;
                CFRetain(v17);
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v107, v18);
                if (DSPGraph::getLog(void)::onceToken != -1)
                  dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
                if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v19 = DSPGraph::getLog(void)::gLog;
                  if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                  {
                    v20 = v16 + 32;
                    if (v16[55] < 0)
                      v20 = (_QWORD *)*v20;
                    *(_DWORD *)buf = 136315138;
                    *(_QWORD *)&buf[4] = v20;
                    _os_signpost_emit_with_name_impl(&dword_18EE07000, v19, OS_SIGNPOST_INTERVAL_BEGIN, v6, "Box::setPreset", "%s", buf, 0xCu);
                  }
                }
                (*(void (**)(char *, CFTypeRef))(*(_QWORD *)v16 + 352))(v16, v107);
                if (DSPGraph::getLog(void)::onceToken != -1)
                  dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
                if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v21 = DSPGraph::getLog(void)::gLog;
                  if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                  {
                    v22 = v16 + 32;
                    if (v16[55] < 0)
                      v22 = (_QWORD *)*v22;
                    *(_DWORD *)buf = 136315138;
                    *(_QWORD *)&buf[4] = v22;
                    _os_signpost_emit_with_name_impl(&dword_18EE07000, v21, OS_SIGNPOST_INTERVAL_END, v6, "Box::setPreset", "%s", buf, 0xCu);
                  }
                }
                if (!v110)
                {
                  v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v64, "Could not construct");
                }
                v23 = applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,__CFString const* const&>(v110);
                if (((unint64_t)v23 & 0xFF00000000) != 0)
                  (*(void (**)(char *, BOOL))(*(_QWORD *)v16 + 56))(v16, (_DWORD)v23 != 0);
                if (v107)
                  CFRelease(v107);
                v14 = v103;
              }
            }
            if ((v14 & 0x80) != 0)
              operator delete(__p);
            if (v110)
              CFRelease(v110);
            ++v12;
            v11 = v111;
            if (!v111)
              goto LABEL_177;
          }
          if (v111)
            CFRelease(v111);
        }
        if (*(_QWORD *)v112)
          CFRelease(*(CFTypeRef *)v112);
        ++v8;
        v7 = v105;
        if (!v105)
          goto LABEL_67;
      }
      if (v105)
        CFRelease(v105);
    }
    else
    {
      if (!v108)
      {
        v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v82, "Could not construct");
      }
      if (CFDictionaryGetCount(v108))
      {
        v25 = 1886548769;
        goto LABEL_74;
      }
    }
    v25 = 0;
LABEL_74:
    v26 = v108;
    if (!v108)
      goto LABEL_76;
    goto LABEL_75;
  }
  if ((_DWORD)v5 != 2)
  {
    v25 = 4294956445;
    goto LABEL_76;
  }
  CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v110, cf);
  if (!v110)
  {
    v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v83, "Could not construct");
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(&v108, v110, CFSTR("strips"));
  if (v109)
  {
    theArray = v108;
    if (v108)
    {
      Count = CFArrayGetCount(v108);
      v86 = v108;
      v85 = v108 ? CFArrayGetCount(v108) : 0;
      if (Count)
      {
        v90 = 0;
        v92 = (_QWORD *)((char *)this + 784);
        while (1)
        {
          if (theArray == v86 && v90 == v85)
            goto LABEL_174;
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v107, theArray, v90);
          if (!v107)
          {
            v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v80, "Could not construct");
          }
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(&v105, (CFDictionaryRef)v107, CFSTR("effects"));
          if (v106)
          {
            v28 = v105;
            if (v105)
            {
              v96 = CFArrayGetCount(v105);
              v29 = v105;
              v89 = v105 ? CFArrayGetCount(v105) : 0;
              if (v96)
                break;
            }
          }
LABEL_171:
          std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v105);
          if (v107)
            CFRelease(v107);
          if (++v90 == Count)
            goto LABEL_174;
        }
        v30 = 0;
        v93 = v29;
        v94 = v28;
        while (1)
        {
          if (v28 == v29 && v30 == v89)
            goto LABEL_171;
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v104, v28, v30);
          if (!v104)
          {
            v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v76, "Could not construct");
          }
          applesauce::CF::details::find_at_key<std::string,__CFString const* const&>((uint64_t)&__p, (CFDictionaryRef)v104, CFSTR("displayname"));
          v31 = v103;
          if ((v103 & 0x80u) != 0)
            v31 = v102;
          if (!v31)
            __cxa_rethrow();
          v32 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>(v92, (unsigned __int8 *)&__p);
          if (v32)
          {
            v99 = (char *)*((_QWORD *)v32 + 5);
            if (v99)
              break;
          }
LABEL_166:
          if ((char)v103 < 0)
            operator delete(__p);
          v29 = v93;
          v28 = v94;
          if (v104)
            CFRelease(v104);
          if (++v30 == v96)
            goto LABEL_171;
        }
        v33 = v104;
        if (v104)
          CFRetain(v104);
        cfa[1] = v33;
        if (DSPGraph::getLog(void)::onceToken != -1)
          dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
        spid = os_signpost_id_generate((os_log_t)DSPGraph::getLog(void)::gLog);
        if (!v33)
        {
          v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v79, "Could not construct");
        }
        v34 = applesauce::CF::details::at_key<__CFString const* const&>((CFDictionaryRef)v33, CFSTR("aupreset"));
        if (v34)
        {
          v35 = v34;
          CFRetain(v34);
          v36 = CFGetTypeID(v35);
          if (v36 == CFDictionaryGetTypeID())
          {
            *(_QWORD *)buf = v35;
            buf[8] = 1;
            if (DSPGraph::getLog(void)::onceToken != -1)
              dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
            if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v37 = DSPGraph::getLog(void)::gLog;
              if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
              {
                v38 = v99 + 32;
                if (v99[55] < 0)
                  v38 = (_QWORD *)*v38;
                *(_DWORD *)v112 = 136315138;
                *(_QWORD *)&v112[4] = v38;
                _os_signpost_emit_with_name_impl(&dword_18EE07000, v37, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setPreset", "%s", v112, 0xCu);
              }
            }
            (*(void (**)(char *, _QWORD))(*(_QWORD *)v99 + 352))(v99, *(_QWORD *)buf);
            if (DSPGraph::getLog(void)::onceToken != -1)
              dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
            if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v39 = DSPGraph::getLog(void)::gLog;
              if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
              {
                v40 = v99 + 32;
                if (v99[55] < 0)
                  v40 = (_QWORD *)*v40;
                *(_DWORD *)v112 = 136315138;
                *(_QWORD *)&v112[4] = v40;
                _os_signpost_emit_with_name_impl(&dword_18EE07000, v39, OS_SIGNPOST_INTERVAL_END, spid, "Box::setPreset", "%s", v112, 0xCu);
              }
            }
            goto LABEL_127;
          }
          CFRelease(v35);
        }
        buf[0] = 0;
        buf[8] = 0;
LABEL_127:
        v41 = (_BYTE *)std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v41, (CFDictionaryRef)v33, CFSTR("parameters"));
        if (buf[8])
        {
          v42 = *(const __CFArray **)buf;
          if (*(_QWORD *)buf)
          {
            v98 = CFArrayGetCount(*(CFArrayRef *)buf);
            v43 = *(const __CFArray **)buf;
            v91 = *(_QWORD *)buf ? CFArrayGetCount(*(CFArrayRef *)buf) : 0;
            if (v98)
            {
              v44 = 0;
              v45 = spid - 1;
              v95 = (char **)(v99 + 32);
              while (1)
              {
                if (v42 == v43 && v91 == v44)
                  goto LABEL_160;
                applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v111, v42, v44);
                if (!v111)
                {
                  v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v70, "Could not construct");
                }
                *(_DWORD *)v112 = 0;
                v46 = applesauce::CF::at_or<unsigned int,__CFString const* const&>(v111, CFSTR("scope"), (unsigned int *)v112);
                if (!v111)
                {
                  v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v75, "Could not construct");
                }
                *(_DWORD *)v112 = 0;
                v47 = applesauce::CF::at_or<unsigned int,__CFString const* const&>(v111, CFSTR("element"), (unsigned int *)v112);
                if (!v111)
                {
                  v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v74, "Could not construct");
                }
                v48 = v33;
                v49 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(v111, CFSTR("parameterID"));
                if (!v49)
                  break;
                v50 = applesauce::CF::convert_as<unsigned int,0>(v49);
                if (!((unint64_t)v50 >> 32))
                {
                  v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v73, "Could not convert");
                  goto LABEL_192;
                }
                v51 = v50;
                if (!v111)
                {
                  v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v72, "Could not construct");
                }
                v52 = applesauce::CF::details::at_key<__CFString const* const&>(v111, CFSTR("value"));
                if (!v52)
                {
                  v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v71, "Could not find item");
                }
                v53 = applesauce::CF::convert_to<float,0>((uint64_t)v52);
                if (DSPGraph::getLog(void)::onceToken != -1)
                  dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
                if (v45 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v54 = DSPGraph::getLog(void)::gLog;
                  if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                  {
                    v55 = v99 + 32;
                    if (v99[55] < 0)
                      v55 = *v95;
                    *(_DWORD *)v112 = 136315138;
                    *(_QWORD *)&v112[4] = v55;
                    _os_signpost_emit_with_name_impl(&dword_18EE07000, v54, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setParameter", "%s", v112, 0xCu);
                  }
                }
                (*(void (**)(char *, const __CFNumber *, unint64_t, unint64_t, _QWORD, float))(*(_QWORD *)v99 + 80))(v99, v51, v46, v47, 0, v53);
                v33 = v48;
                if (DSPGraph::getLog(void)::onceToken != -1)
                  dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
                if (v45 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v56 = DSPGraph::getLog(void)::gLog;
                  if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                  {
                    v57 = v99 + 32;
                    if (v99[55] < 0)
                      v57 = *v95;
                    *(_DWORD *)v112 = 136315138;
                    *(_QWORD *)&v112[4] = v57;
                    _os_signpost_emit_with_name_impl(&dword_18EE07000, v56, OS_SIGNPOST_INTERVAL_END, spid, "Box::setParameter", "%s", v112, 0xCu);
                  }
                }
                if (v111)
                  CFRelease(v111);
                if (v98 == ++v44)
                  goto LABEL_160;
              }
              v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v73, "Could not find item");
LABEL_192:
            }
          }
        }
LABEL_160:
        std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
        v58 = applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,__CFString const* const&>((const __CFDictionary *)v33);
        if (((unint64_t)v58 & 0xFF00000000) != 0)
          (*(void (**)(char *, BOOL))(*(_QWORD *)v99 + 56))(v99, (_DWORD)v58 != 0);
        v59 = (const __CFBoolean *)applesauce::CF::details::at_key<__CFString const* const&>((CFDictionaryRef)v33, CFSTR("bypass"));
        if (v59)
        {
          v60 = applesauce::CF::convert_as<BOOL,0>(v59);
          if (v60 >= 0x100u)
            (*(void (**)(char *, BOOL))(*(_QWORD *)v99 + 56))(v99, v60 != 0);
        }
        CFRelease(v33);
        goto LABEL_166;
      }
    }
  }
  else
  {
    if (!v110)
    {
      v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v84, "Could not construct");
    }
    if (CFDictionaryGetCount(v110))
    {
      v25 = 1886548769;
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v108);
      goto LABEL_175;
    }
  }
LABEL_174:
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v108);
  v25 = 0;
LABEL_175:
  v26 = v110;
  if (v110)
LABEL_75:
    CFRelease(v26);
LABEL_76:
  if (cfa[0])
    CFRelease(cfa[0]);
  return v25;
}

void sub_18EE54110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  void *v41;
  uint64_t v42;

  if (a2)
  {
    __cxa_free_exception(v41);
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v42 - 176);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x18EE53BD4);
  }
  _Unwind_Resume(exception_object);
}

const void *applesauce::CF::details::at_key<__CFString const* const&>(CFDictionaryRef theDict, const void *a2)
{
  const void *result;

  result = 0;
  if (theDict)
  {
    if (a2)
      return CFDictionaryGetValue(theDict, a2);
  }
  return result;
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return this;
}

void sub_18EE545BC(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

const __CFNumber *applesauce::CF::convert_as<unsigned int,0>(const __CFNumber *result)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  double valuePtr;

  if (result)
  {
    v1 = result;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_15;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          v9 = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_22;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          v10 = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberSInt64Type:
          valuePtr = 0.0;
          v10 = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          v10 = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_29;
        case kCFNumberFloat64Type:
          valuePtr = 0.0;
          v10 = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_35;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_15:
          v11 = Value != 0;
          if (Value)
            v12 = LOBYTE(valuePtr);
          else
            v12 = 0;
          v13 = -256;
          if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0)
            v13 = 0;
          v8 = v11 << 32;
          LODWORD(v5) = v13 & 0xFFFFFF00 | v12;
          v7 = v5 & 0xFFFFFF00;
          break;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          v9 = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_22:
          if (v9)
            v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
          else
            v5 = 0;
          goto LABEL_38;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          v10 = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
          goto LABEL_33;
        case kCFNumberLongType:
          valuePtr = 0.0;
          v10 = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_33;
        case kCFNumberLongLongType:
          valuePtr = 0.0;
          v10 = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          v10 = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_29:
          v14 = *(float *)&valuePtr;
          goto LABEL_36;
        case kCFNumberDoubleType:
          valuePtr = 0.0;
          v10 = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_35;
        case kCFNumberCFIndexType:
          valuePtr = 0.0;
          v10 = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_33;
        case kCFNumberNSIntegerType:
          valuePtr = 0.0;
          v10 = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_33:
          v14 = LODWORD(valuePtr);
          goto LABEL_36;
        case kCFNumberCGFloatType:
          valuePtr = 0.0;
          v10 = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_35:
          v14 = valuePtr;
LABEL_36:
          v5 = v14 | 0x100000000;
          if (!v10)
            v5 = 0;
LABEL_38:
          v7 = v5 & 0xFFFFFF00;
          v8 = v5 & 0x100000000;
          break;
        default:
          v7 = 0;
          v8 = 0;
          LOBYTE(v5) = 0;
          break;
      }
      v6 = v8 | v7 & 0xFFFFFF00;
      v5 = v5;
    }
    else
    {
      v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1))
      {
        v5 = CFBooleanGetValue(v1);
        v6 = 0x100000000;
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    return (const __CFNumber *)(v6 | v5);
  }
  return result;
}

applesauce::CF::DictionaryRef *applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(applesauce::CF::DictionaryRef *a1, CFArrayRef theArray, unint64_t a3)
{
  const void *ValueAtIndex;
  const void *v7;
  std::runtime_error *exception;

  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (v7 = ValueAtIndex) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  CFRetain(ValueAtIndex);
  return applesauce::CF::DictionaryRef::DictionaryRef(a1, v7);
}

void sub_18EE5492C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::AUBox::setPreset(DSPGraph::AUBox *this, const __CFDictionary *a2)
{
  const __CFDictionary *v3;

  v3 = a2;
  return (*(uint64_t (**)(DSPGraph::AUBox *, _QWORD, _QWORD, _QWORD, uint64_t, const __CFDictionary **))(*(_QWORD *)this + 312))(this, 0, 0, 0, 8, &v3);
}

uint64_t DSPGraph::AUBox::bypass(DSPGraph::AUBox *this, int a2)
{
  int v3;

  v3 = a2;
  return (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, _QWORD, _QWORD, uint64_t, int *))(*(_QWORD *)this + 312))(this, 21, 0, 0, 4, &v3);
}

_QWORD *applesauce::CF::details::find_at_key<std::string,__CFString const* const&>(uint64_t a1, CFDictionaryRef theDict, const void *a3)
{
  const __CFString *v4;
  std::runtime_error *exception;

  v4 = (const __CFString *)applesauce::CF::details::at_key<__CFString const* const&>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<std::string,0>(a1, v4);
}

void sub_18EE54A20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,__CFString const* const&>(const __CFDictionary *a1)
{
  const __CFNumber *result;

  result = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(a1, CFSTR("bypass"));
  if (result)
    return applesauce::CF::convert_as<unsigned int,0>(result);
  return result;
}

_QWORD *applesauce::CF::convert_to<std::string,0>(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID;
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v8;
  std::runtime_error *exception;
  CFIndex maxBufLen;
  CFRange v11;
  CFRange v12;

  if (!a2 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  CStringPtr = (char *)CFStringGetCStringPtr(a2, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, CStringPtr);
  Length = CFStringGetLength(a2);
  maxBufLen = 0;
  v11.location = 0;
  v11.length = Length;
  CFStringGetBytes(a2, v11, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a1, maxBufLen, 0);
  if (*(char *)(a1 + 23) >= 0)
    v8 = (UInt8 *)a1;
  else
    v8 = *(UInt8 **)a1;
  v12.location = 0;
  v12.length = Length;
  return (_QWORD *)CFStringGetBytes(a2, v12, 0x8000100u, 0, 0, v8, maxBufLen, &maxBufLen);
}

void sub_18EE54B84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL applesauce::CF::details::has_key<__CFString const* const&>(const __CFDictionary *a1, const void *a2)
{
  return a2 && CFDictionaryContainsKey(a1, a2) != 0;
}

applesauce::CF::ArrayRef *applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>(applesauce::CF::ArrayRef *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<__CFString const* const&>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::ArrayRef::ArrayRef(a1, v5);
}

void sub_18EE54C40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *AUProcessingBlock_DSPGraph::AUProcessingBlock_DSPGraph(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef cf;

  v4 = *a2;
  v5 = (char *)(*a2 + 408);
  if (*(char *)(v4 + 431) < 0)
    v5 = *(char **)v5;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v5);
  AUProcessingBlockBase::AUProcessingBlockBase((AUProcessingBlockBase *)a1, (const __CFString *)cf);
  if (cf)
    CFRelease(cf);
  *a1 = (uint64_t)&off_1E2909100;
  v6 = *a2;
  v7 = a2[1];
  a1[6] = *a2;
  a1[7] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v6 = a1[6];
  }
  a1[8] = 0;
  for (i = *(_QWORD **)(v6 + 24); i; i = (_QWORD *)*i)
  {
    AUPBRegisterAU(a1[2], *(_QWORD *)(i[2] + 56));
    v11 = i[2];
    v12 = *(_QWORD *)(v11 + 312);
    v13 = *(_QWORD *)(v11 + 320);
    while (v12 != v13)
    {
      AUPBRegisterAU(a1[2], *(_QWORD *)(*(_QWORD *)v12 + 88));
      v12 += 8;
    }
  }
  AUPBPropertyChanged(a1[2], 1735554168);
  return a1;
}

void sub_18EE54D64(_Unwind_Exception *a1)
{
  AUProcessingBlockBase *v1;
  uint64_t v2;
  DSPGraph::Profiler **v3;

  std::unique_ptr<DSPGraph::Profiler>::reset[abi:ne180100](v3, 0);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2);
  AUProcessingBlockBase::~AUProcessingBlockBase(v1);
  _Unwind_Resume(a1);
}

uint64_t AUPBRegisterAU(uint64_t a1, uint64_t a2)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBServer registerAU:inBlock:](+[AUPBServer sharedInstance](AUPBServer, "sharedInstance"), "registerAU:inBlock:", a2, a1);
  else
    return 561145191;
}

void AUProcessingBlockBase::AUProcessingBlockBase(AUProcessingBlockBase *this, const __CFString *a2)
{
  *(_QWORD *)this = off_1E2908310;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  AUProcessingBlockBase::SetName(this, a2);
  AUPBRegister((uint64_t)&gAUPBMethods, (uint64_t)this, (OpaqueAUPB **)this + 2);
}

void sub_18EE54E74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUProcessingBlockBase::SetName(AUProcessingBlockBase *this, const __CFString *a2)
{
  const void *v4;
  const __CFString *v5;
  int v7;

  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
    CFRelease(v4);
  if (a2)
    v5 = a2;
  else
    v5 = &stru_1E2923288;
  *((_QWORD *)this + 1) = v5;
  CFRetain(v5);
  v7 = 1851878757;
  return AUPBPropertiesChanged(*((_QWORD *)this + 2), 1, (uint64_t)&v7, 0, 0);
}

uint64_t AUPBPropertiesChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (!AUPBEnableSPI(void)::isAppleInternal)
    return 561145191;
  -[AUPBServer processingBlock:properties:count:changedWithQualifierData:length:](+[AUPBServer sharedInstance](AUPBServer, "sharedInstance"), "processingBlock:properties:count:changedWithQualifierData:length:", a1, a3, a2, a4, a5);
  return 0;
}

uint64_t AUPBRegister(uint64_t a1, uint64_t a2, OpaqueAUPB **a3)
{
  uint64_t result;
  OpaqueAUPB *v7;

  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (!AUPBEnableSPI(void)::isAppleInternal)
    return 561145191;
  result = 4294967246;
  if (a1)
  {
    if (a3)
    {
      v7 = -[AUPBServer registerBlock:withUserData:](+[AUPBServer sharedInstance](AUPBServer, "sharedInstance"), "registerBlock:withUserData:", a1, a2);
      result = 0;
      *a3 = v7;
    }
  }
  return result;
}

uint64_t AUPBPropertyChanged(uint64_t a1, uint64_t a2)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (!AUPBEnableSPI(void)::isAppleInternal)
    return 561145191;
  -[AUPBServer processingBlockRef:propertyChanged:](+[AUPBServer sharedInstance](AUPBServer, "sharedInstance"), "processingBlockRef:propertyChanged:", a1, a2);
  return 0;
}

int32x2_t acv2::Resampler2Wrapper::CalcPrimeInfo(acv2::Resampler2Wrapper *this, AudioConverterPrimeInfo *a2)
{
  double *v3;
  uint64x2_t v4;
  int32x2_t result;
  int32x2_t v6;

  v3 = (double *)**((_QWORD **)this + 3);
  (*(void (**)(double *, int32x2_t *))(*(_QWORD *)v3 + 16))(v3, &v6);
  v4.i64[0] = a2->leadingFrames;
  v4.i64[1] = HIDWORD(*(unint64_t *)a2);
  result = vadd_s32(v6, vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndpq_f64(vmulq_n_f64(vcvtq_f64_u64(v4), v3[22])))));
  *a2 = (AudioConverterPrimeInfo)result;
  return result;
}

uint64_t Resampler2::GetPrimeInfo(uint64_t this, AudioConverterPrimeInfo *a2)
{
  double v2;
  UInt32 v3;

  if ((*(_DWORD *)(this + 120) | 2) == 2)
  {
    v2 = 0.5;
    if (*(_DWORD *)(this + 116) != 1818848869)
      v2 = *(double *)(this + 168) + (double)*(int *)(*(_QWORD *)(this + 56) + 20);
    v3 = vcvtpd_u64_f64(v2);
  }
  else
  {
    v3 = 0;
  }
  a2->leadingFrames = v3;
  a2->trailingFrames = v3;
  return this;
}

uint64_t DSPGraph::Graph::setSliceDuration(uint64_t result, int a2, int a3, int a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*(_BYTE *)(result + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "setSliceDuration");
    std::string::basic_string[abi:ne180100]<0>(&v4, "cannot set slice duration if graph is already configured.");
    DSPGraph::ThrowException(1667655457, &v6, 231, &v5, &v4);
  }
  *(_DWORD *)(result + 688) = a2;
  *(_DWORD *)(result + 692) = a3;
  *(_BYTE *)(result + 760) = a4 == 1;
  return result;
}

void sub_18EE55330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void AT::Resampler::create(AT::Resampler *this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, int a5@<W1>, uint64_t a6@<X2>, char a7@<W3>, Resampler2 **a8@<X8>)
{
  int v12;
  Resampler2 *v16;

  v12 = (int)this;
  v16 = (Resampler2 *)operator new();
  Resampler2::Resampler2(v16, a2, a3, v12, a5, a6, a4, a7);
  *(_QWORD *)v16 = &off_1E2909FC0;
  *((_BYTE *)v16 + 280) = 0;
  *((_BYTE *)v16 + 416) = 0;
  *a8 = v16;
}

void sub_18EE55428(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10E3C40D45BBD2DLL);
  _Unwind_Resume(a1);
}

uint64_t acv2::SampleRateConverter::ReplaceResampler(acv2::SampleRateConverter *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  int v28;
  Resampler2 *v29;
  unint64_t v30;
  Resampler2 **v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  Resampler2 **v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  Resampler2 *v42;
  int64x2_t v43;
  unint64_t v44;
  unsigned __int8 v45;
  int v46;
  unsigned int v47;
  unsigned __int8 v48;
  int v49;
  int v50;
  uint64_t result;
  char *v52;
  uint64_t v53;
  void *v54;
  _BYTE *v55;
  char v56;
  char *v57;
  uint64_t v58;
  void *v59;
  _BYTE *v60;
  char v61;
  char *v62;
  uint64_t v63;
  void *v64;
  _BYTE *v65;
  char v66;
  char *v67;
  uint64_t v68;
  void *v69;
  _BYTE *v70;
  char v71;
  _WORD *v72;
  _WORD *v73;
  _WORD *v74;
  _WORD *v75;
  const std::__fs::filesystem::path **v76;
  const std::__fs::filesystem::path **v77;
  int64x2_t *v79;
  void *v80[2];
  char v81;
  void *__p[2];
  char v83;
  void *v84;
  int64x2_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v2 = (void *)*((_QWORD *)this + 2);
  v3 = *((unsigned int *)this + 11);
  v4 = (void *)*((_QWORD *)this + 37);
  v5 = *((_DWORD *)this + 68);
  v6 = *((unsigned int *)this + 69);
  if (v5 == 1835626096 || *((_BYTE *)this + 312) != 0)
  {
    v8 = operator new();
    *(_DWORD *)(v8 + 16) = v3;
    *(_QWORD *)v8 = &off_1E290A8F0;
    *(_QWORD *)(v8 + 8) = this;
    v9 = operator new();
    MEMORY[0x193FFD740](v9, v3, v6, *(double *)&v2, *(double *)&v4);
    *(_QWORD *)(v8 + 24) = v9;
    v84 = 0;
    std::vector<float *>::vector((_QWORD *)(v8 + 32), (int)v3, &v84);
    v84 = 0;
    std::vector<float *>::vector((_QWORD *)(v8 + 56), (int)v3, &v84);
    *(_QWORD *)(v8 + 88) = 0;
    *(_DWORD *)(v8 + 80) = v3;
    *(_QWORD *)(v8 + 96) = 0;
    v10 = atomic_load((unsigned __int8 *)&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc97ELc109ELc115ELc116ELc97ELc100ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
    if ((v10 & 1) != 0
      || !__cxa_guard_acquire(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc97ELc109ELc115ELc116ELc97ELc100ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input))
    {
LABEL_6:
      if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc97ELc109ELc115ELc116ELc97ELc100ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input)
      {
        v11 = *(_DWORD *)(*(_QWORD *)(v8 + 8) + 28) & 0x20 | 9;
        v12 = 4 * v3;
        if ((*(_DWORD *)(*(_QWORD *)(v8 + 8) + 28) & 0x20) != 0)
          v12 = 4;
        v84 = v2;
        v85.i32[0] = 1819304813;
        *(uint64_t *)((char *)v85.i64 + 4) = __PAIR64__(v12, v11);
        v85.i32[3] = 1;
        v86 = __PAIR64__(v3, v12);
        v87 = 32;
        acv2::AudioConverterBase::createCapturer(__p, "-RamstadSRCInput", (const std::__fs::filesystem::path **)(v8 + 88), (__int128 *)&v84, (const void *)v8);
        if (v83 < 0)
          operator delete(__p[0]);
      }
      v13 = atomic_load((unsigned __int8 *)_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc97ELc109ELc115ELc116ELc97ELc100ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input);
      if ((v13 & 1) != 0
        || !__cxa_guard_acquire(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc97ELc109ELc115ELc116ELc97ELc100ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input))
      {
        goto LABEL_12;
      }
      v57 = getenv("CoreAudio_CaptureRamstad_Output");
      if (!v57)
        goto LABEL_82;
      std::string::basic_string[abi:ne180100]<0>(&v84, v57);
      v58 = v85.u8[15];
      if (v85.i8[15] < 0)
        v58 = v85.i64[0];
      if (v58 == 2)
      {
        v59 = v84;
        v73 = &v84;
        if (v85.i8[15] < 0)
          v73 = v84;
        if (*v73 == 20302)
          goto LABEL_80;
      }
      else if (v58 == 1)
      {
        v59 = v84;
        v60 = &v84;
        if (v85.i8[15] < 0)
          v60 = v84;
        if (*v60 == 48)
        {
LABEL_80:
          if (v85.i8[15] < 0)
            operator delete(v59);
LABEL_82:
          v61 = 0;
LABEL_121:
          _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc97ELc109ELc115ELc116ELc97ELc100ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input = v61;
          __cxa_guard_release(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc97ELc109ELc115ELc116ELc97ELc100ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input);
LABEL_12:
          if (!_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc97ELc109ELc115ELc116ELc97ELc100ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input)
            goto LABEL_56;
          v14 = *(_DWORD *)(*(_QWORD *)(v8 + 8) + 68) & 0x20 | 9;
          v15 = 4 * v3;
          if ((*(_DWORD *)(*(_QWORD *)(v8 + 8) + 68) & 0x20) != 0)
            v15 = 4;
          v84 = v4;
          v85.i32[0] = 1819304813;
          *(uint64_t *)((char *)v85.i64 + 4) = __PAIR64__(v15, v14);
          v85.i32[3] = 1;
          v86 = __PAIR64__(v3, v15);
          v87 = 32;
          acv2::AudioConverterBase::createCapturer(v80, "-RamstadSRCOutput", (const std::__fs::filesystem::path **)(v8 + 96), (__int128 *)&v84, (const void *)v8);
          goto LABEL_54;
        }
      }
      if (v85.i8[15] < 0)
        operator delete(v84);
      v61 = 1;
      goto LABEL_121;
    }
    v52 = getenv("CoreAudio_CaptureRamstad_Input");
    if (!v52)
      goto LABEL_70;
    std::string::basic_string[abi:ne180100]<0>(&v84, v52);
    v53 = v85.u8[15];
    if (v85.i8[15] < 0)
      v53 = v85.i64[0];
    if (v53 == 2)
    {
      v54 = v84;
      v72 = &v84;
      if (v85.i8[15] < 0)
        v72 = v84;
      if (*v72 == 20302)
        goto LABEL_68;
    }
    else if (v53 == 1)
    {
      v54 = v84;
      v55 = &v84;
      if (v85.i8[15] < 0)
        v55 = v84;
      if (*v55 == 48)
      {
LABEL_68:
        if (v85.i8[15] < 0)
          operator delete(v54);
LABEL_70:
        v56 = 0;
LABEL_114:
        _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc97ELc109ELc115ELc116ELc97ELc100ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input = v56;
        __cxa_guard_release(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc97ELc109ELc115ELc116ELc97ELc100ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
        goto LABEL_6;
      }
    }
    if (v85.i8[15] < 0)
      operator delete(v84);
    v56 = 1;
    goto LABEL_114;
  }
  v16 = *((unsigned int *)this + 70);
  v17 = *((double *)this + 38);
  v18 = operator new();
  v8 = v18;
  *(_DWORD *)(v18 + 16) = v3;
  *(_QWORD *)v18 = &off_1E290A970;
  *(_QWORD *)(v18 + 8) = this;
  *(_QWORD *)(v18 + 24) = 0;
  v79 = (int64x2_t *)(v18 + 24);
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  v19 = v18 + 40;
  *(_DWORD *)(v18 + 48) = 1;
  *(_BYTE *)(v18 + 52) = 0;
  *(_QWORD *)(v18 + 56) = 0;
  v77 = (const std::__fs::filesystem::path **)(v18 + 56);
  *(_QWORD *)(v18 + 64) = 0;
  v76 = (const std::__fs::filesystem::path **)(v18 + 64);
  if ((_DWORD)v3)
  {
    if ((v3 & 0x80000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v87 = v18 + 40;
    v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>((int)v3);
    v23 = *(_QWORD **)(v8 + 24);
    v22 = *(_QWORD **)(v8 + 32);
    if (v22 == v23)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = v20;
    }
    else
    {
      v24 = v20;
      do
      {
        v25 = *--v22;
        *v22 = 0;
        *((_QWORD *)v24 - 1) = v25;
        v24 -= 8;
      }
      while (v22 != v23);
      v26 = *v79;
    }
    *(_QWORD *)(v8 + 24) = v24;
    *(_QWORD *)(v8 + 32) = v20;
    v85 = v26;
    v27 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 40) = &v20[8 * v21];
    v86 = v27;
    v84 = (void *)v26.i64[0];
    std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)&v84);
    v28 = 0;
    do
    {
      v29 = (Resampler2 *)operator new();
      Resampler2::Resampler2(v29, *(double *)&v2, *(double *)&v4, v5, v6, v16, v17, 0);
      v31 = *(Resampler2 ***)(v8 + 32);
      v30 = *(_QWORD *)(v8 + 40);
      if ((unint64_t)v31 >= v30)
      {
        v33 = ((uint64_t)v31 - v79->i64[0]) >> 3;
        if ((unint64_t)(v33 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v34 = v30 - v79->i64[0];
        v35 = v34 >> 2;
        if (v34 >> 2 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v87 = v19;
        if (v36)
          v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v36);
        else
          v37 = 0;
        v38 = (Resampler2 **)(v36 + 8 * v33);
        v39 = v36 + 8 * v37;
        v86 = v39;
        *v38 = v29;
        v32 = v38 + 1;
        v85.i64[1] = (uint64_t)(v38 + 1);
        v41 = *(_QWORD **)(v8 + 24);
        v40 = *(_QWORD **)(v8 + 32);
        if (v40 == v41)
        {
          v43 = vdupq_n_s64((unint64_t)v40);
        }
        else
        {
          do
          {
            v42 = (Resampler2 *)*--v40;
            *v40 = 0;
            *--v38 = v42;
          }
          while (v40 != v41);
          v43 = *v79;
          v32 = (_QWORD *)v85.i64[1];
          v39 = v86;
        }
        *(_QWORD *)(v8 + 24) = v38;
        *(_QWORD *)(v8 + 32) = v32;
        v85 = v43;
        v44 = *(_QWORD *)(v8 + 40);
        *(_QWORD *)(v8 + 40) = v39;
        v86 = v44;
        v84 = (void *)v43.i64[0];
        std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)&v84);
      }
      else
      {
        *v31 = v29;
        v32 = v31 + 1;
      }
      *(_QWORD *)(v8 + 32) = v32;
      ++v28;
    }
    while (v28 != (_DWORD)v3);
  }
  v45 = atomic_load((unsigned __int8 *)_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm33EEEtlA33_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc101ELc115ELc97ELc109ELc112ELc108ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
  if ((v45 & 1) == 0
    && __cxa_guard_acquire(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm33EEEtlA33_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc101ELc115ELc97ELc109ELc112ELc108ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input))
  {
    v62 = getenv("CoreAudio_CaptureResampler_Input");
    if (!v62)
    {
LABEL_94:
      v66 = 0;
LABEL_128:
      _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm33EEEtlA33_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc101ELc115ELc97ELc109ELc112ELc108ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input = v66;
      __cxa_guard_release(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm33EEEtlA33_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc101ELc115ELc97ELc109ELc112ELc108ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
      goto LABEL_42;
    }
    std::string::basic_string[abi:ne180100]<0>(&v84, v62);
    v63 = v85.u8[15];
    if (v85.i8[15] < 0)
      v63 = v85.i64[0];
    if (v63 == 2)
    {
      v64 = v84;
      v74 = &v84;
      if (v85.i8[15] < 0)
        v74 = v84;
      if (*v74 == 20302)
        goto LABEL_92;
    }
    else if (v63 == 1)
    {
      v64 = v84;
      v65 = &v84;
      if (v85.i8[15] < 0)
        v65 = v84;
      if (*v65 == 48)
      {
LABEL_92:
        if (v85.i8[15] < 0)
          operator delete(v64);
        goto LABEL_94;
      }
    }
    if (v85.i8[15] < 0)
      operator delete(v84);
    v66 = 1;
    goto LABEL_128;
  }
LABEL_42:
  if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm33EEEtlA33_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc101ELc115ELc97ELc109ELc112ELc108ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input)
  {
    v46 = *(_DWORD *)(*(_QWORD *)(v8 + 8) + 28) & 0x20 | 9;
    v47 = (*(_DWORD *)(*(_QWORD *)(v8 + 8) + 28) & 0x20) != 0 ? 4 : 4 * v3;
    v84 = v2;
    v85.i32[0] = 1819304813;
    *(uint64_t *)((char *)v85.i64 + 4) = __PAIR64__(v47, v46);
    v85.i32[3] = 1;
    v86 = __PAIR64__(v3, v47);
    v87 = 32;
    acv2::AudioConverterBase::createCapturer(__p, "-ResamplerInput", v77, (__int128 *)&v84, (const void *)v8);
    if (v83 < 0)
      operator delete(__p[0]);
  }
  v48 = atomic_load((unsigned __int8 *)&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm34EEEtlA34_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc101ELc115ELc97ELc109ELc112ELc108ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input);
  if ((v48 & 1) != 0
    || !__cxa_guard_acquire(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm34EEEtlA34_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc101ELc115ELc97ELc109ELc112ELc108ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input))
  {
    goto LABEL_49;
  }
  v67 = getenv("CoreAudio_CaptureResampler_Output");
  if (!v67)
    goto LABEL_106;
  std::string::basic_string[abi:ne180100]<0>(&v84, v67);
  v68 = v85.u8[15];
  if (v85.i8[15] < 0)
    v68 = v85.i64[0];
  if (v68 == 2)
  {
    v69 = v84;
    v75 = &v84;
    if (v85.i8[15] < 0)
      v75 = v84;
    if (*v75 == 20302)
      goto LABEL_104;
LABEL_132:
    if (v85.i8[15] < 0)
      operator delete(v84);
    v71 = 1;
    goto LABEL_135;
  }
  if (v68 != 1)
    goto LABEL_132;
  v69 = v84;
  v70 = &v84;
  if (v85.i8[15] < 0)
    v70 = v84;
  if (*v70 != 48)
    goto LABEL_132;
LABEL_104:
  if (v85.i8[15] < 0)
    operator delete(v69);
LABEL_106:
  v71 = 0;
LABEL_135:
  _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm34EEEtlA34_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc101ELc115ELc97ELc109ELc112ELc108ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input = v71;
  __cxa_guard_release(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm34EEEtlA34_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc101ELc115ELc97ELc109ELc112ELc108ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input);
LABEL_49:
  if (!_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm34EEEtlA34_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc82ELc101ELc115ELc97ELc109ELc112ELc108ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input)
    goto LABEL_56;
  v49 = *(_DWORD *)(*(_QWORD *)(v8 + 8) + 68) & 0x20 | 9;
  if ((*(_DWORD *)(*(_QWORD *)(v8 + 8) + 68) & 0x20) != 0)
    v50 = 4;
  else
    v50 = 4 * v3;
  v84 = v4;
  v85.i32[0] = 1819304813;
  *(uint64_t *)((char *)v85.i64 + 4) = __PAIR64__(v50, v49);
  v85.i32[3] = 1;
  v86 = __PAIR64__(v3, v50);
  v87 = 32;
  acv2::AudioConverterBase::createCapturer(v80, "-ResamplerOutput", v76, (__int128 *)&v84, (const void *)v8);
LABEL_54:
  if (v81 < 0)
    operator delete(v80[0]);
LABEL_56:
  result = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v8;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void Resampler2::Resampler2(Resampler2 *this, double a2, double a3, int a4, int a5, uint64_t a6, double a7, char a8)
{
  double v12;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E2900FA0;
  *((_BYTE *)this + 24) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((double *)this + 12) = a2;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = a5;
  *((_DWORD *)this + 29) = a4;
  *((_DWORD *)this + 31) = 0;
  *((_WORD *)this + 66) = 0;
  *((double *)this + 18) = a7;
  *((_QWORD *)this + 20) = 0;
  v12 = a2 / a3;
  *((double *)this + 21) = v12;
  *((double *)this + 22) = 1.0 / v12;
  *((_BYTE *)this + 184) = a8;
  *((_BYTE *)this + 185) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_BYTE *)this + 200) = 1;
  RateRamp::RateRamp((Resampler2 *)((char *)this + 208));
  *((_BYTE *)this + 264) = 0;
  *((_QWORD *)this + 34) = 0;
  Resampler2::ConstructorBody((uint64_t)this, 1, a6, a2, a3, 0.0, 0.0);
}

uint64_t Resampler2::SetPrimeMethod(uint64_t this, int a2)
{
  uint64_t v2;
  double v3;

  v2 = this;
  if (*(_DWORD *)(this + 116) == 1818848869)
  {
    *(_DWORD *)(this + 72) = 1;
  }
  else
  {
    *(_DWORD *)(this + 120) = a2;
    if (a2)
    {
      if (a2 == 2)
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 152))(this);
        a2 = this - 1;
      }
      else
      {
        a2 = *(_DWORD *)(*(_QWORD *)(this + 56) + 20);
      }
    }
    *(_DWORD *)(v2 + 72) = a2;
    *(_QWORD *)(v2 + 192) = 0;
    *(_BYTE *)(v2 + 200) = 1;
    v3 = *(double *)(v2 + 144);
    *(double *)(v2 + 160) = v3;
    if (v3 != 0.0)
    {
      *(_BYTE *)(v2 + 133) = 0;
      return Resampler2::SetConverterFunction(v2);
    }
  }
  return this;
}

uint64_t Resampler2::SetConverterFunction(uint64_t this)
{
  void *v1;

  if (*(_DWORD *)(this + 116) == 1818848869)
  {
    v1 = Resampler2::ConvertLinear;
  }
  else if (*(int *)(this + 128) < 1)
  {
    if (*(_BYTE *)(this + 264))
      v1 = Resampler2::ConvertScalar<Resampler2::RampedRate>;
    else
      v1 = Resampler2::ConvertScalar<Resampler2::FixedRate>;
  }
  else if (*(_BYTE *)(this + 133))
  {
    v1 = Resampler2::ConvertSIMD_SmallIntegerRatio;
  }
  else if (*(_BYTE *)(this + 264))
  {
    v1 = Resampler2::ConvertSIMD<Resampler2::RampedRate>;
  }
  else
  {
    v1 = Resampler2::ConvertSIMD<Resampler2::FixedRate>;
  }
  *(_QWORD *)(this + 8) = v1;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

SharableMemoryBlock *createHapticCommandWriter(void *a1, int a2)
{
  id v3;
  id v4;
  xpc_object_t v5;
  xpc_object_t v6;
  SharableMemoryBlock *v7;
  _QWORD *v8;
  uint64_t v10;
  int v11;
  int v12;
  void *v13;
  void *v14;

  v3 = a1;
  if (setupLogging(void)::once != -1)
    dispatch_once(&setupLogging(void)::once, &__block_literal_global_2338);
  v4 = v3;
  v5 = v4;
  if (!v4)
    v5 = xpc_null_create();

  v11 = 1;
  v10 = MEMORY[0x1E0DDF0A0] + 16;
  v6 = xpc_null_create();
  v12 = a2;
  applesauce::xpc::object::object(&v14, v5);
  v13 = v14;
  v14 = 0;

  v7 = (SharableMemoryBlock *)operator new();
  SharableMemoryBlock::SharableMemoryBlock(v7);
  *v8 = &off_1E2908CA8;
  if (SharableMemoryBlock::InitClient())
  {
    (*(void (**)(SharableMemoryBlock *))(*(_QWORD *)v7 + 8))(v7);
    v7 = 0;
  }
  MEMORY[0x193FFDA4C](&v10);

  return v7;
}

void sub_18EE5628C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  MEMORY[0x193FFDA4C](&a9);

  _Unwind_Resume(a1);
}

void SharableMemoryBlock::SharableMemoryBlock(SharableMemoryBlock *this)
{
  uint64_t v1;

  *((_WORD *)this + 4) = 0;
  v1 = MEMORY[0x1E0DDF090];
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = v1 + 16;
  *((_QWORD *)this + 4) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = xpc_null_create();
}

void **applesauce::xpc::object::object(void **a1, void *a2)
{
  id v3;
  xpc_object_t v4;
  void *v5;

  v3 = a2;
  *a1 = v3;
  if (!v3)
  {
    v4 = xpc_null_create();
    v5 = *a1;
    *a1 = v4;

  }
  return a1;
}

OSStatus AudioOutputUnitStart(AudioUnit ci)
{
  uint64_t (***v1)(_QWORD);
  uint64_t (***v2)(_QWORD);
  uint64_t (*v3)(_QWORD);

  if (!ci)
    return -50;
  v1 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)ci + 8))(ci);
  if (!v1)
    return 560947818;
  v2 = v1;
  if (*(_WORD *)((**v1)(v1) + 38) != 24949)
    return -3000;
  v3 = *(uint64_t (**)(_QWORD))(*(_QWORD *)((**v2)(v2) + 112) + 144);
  if (v3)
    return v3(v2[3]);
  else
    return -4;
}

void DSPGraph::Graph::setPropertyStrip(DSPGraph::Graph *this, CFTypeRef cf, const __CFString *a3)
{
  unint64_t v3;
  const void *v6;
  const void *v7;
  CFTypeID v8;
  const __CFString *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  const __CFDictionary *v12;
  const void *Value;
  CFTypeID v14;
  unint64_t v15;
  unint64_t v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  uint64_t v19;
  const __CFDictionary *v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  uint64_t v23;
  NSObject *v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  char *v28;
  const void *v29;
  const void *v30;
  CFTypeID v31;
  NSObject *v32;
  char *v33;
  CFIndex Length;
  CFIndex v35;
  const UInt8 *BytePtr;
  uint64_t v37;
  NSObject *v38;
  char *v39;
  const __CFNumber *v40;
  const void *v41;
  const void *v42;
  CFTypeID TypeID;
  CFIndex Count;
  int v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  const __CFNumber *v50;
  const __CFNumber *v51;
  char v52;
  uint64_t v53;
  const __CFArray *v54;
  const __CFArray *v55;
  CFTypeID v56;
  int v57;
  CFIndex v58;
  uint64_t v59;
  unint64_t v60;
  const __CFNumber *v61;
  const __CFNumber *v62;
  char v63;
  const __CFNumber *v64;
  unint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  const void *v73;
  unint64_t v74;
  const void *v75;
  const void *v76;
  CFTypeID v77;
  int v78;
  CFIndex v79;
  unint64_t v80;
  float *v81;
  const void *v82;
  unint64_t v83;
  int v84;
  float *v85;
  float *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  float *v91;
  int v92;
  uint64_t v93;
  CFIndex v94;
  uint64_t v95;
  char *v96;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int v106;
  BOOL v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  const void *v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  const void *v116;
  const void *v117;
  CFTypeID v118;
  CFIndex v119;
  int v120;
  double *v121;
  uint64_t v122;
  char *v123;
  const __CFDictionary *v124;
  const __CFString *v125;
  CFTypeID v126;
  CFStringRef v127;
  NSObject *v128;
  char *v129;
  uint64_t v130;
  NSObject *v131;
  char *v132;
  const __CFString *v133;
  const __CFString *v134;
  CFTypeID v135;
  __CFReadStream *v136;
  __CFReadStream *v137;
  CFPropertyListRef v138;
  NSObject *v139;
  char *v140;
  uint64_t v141;
  NSObject *v142;
  char *v143;
  const __CFDictionary *v144;
  const __CFString *v145;
  CFTypeID v146;
  NSObject *v147;
  char *v148;
  uint64_t v149;
  NSObject *v150;
  char *v151;
  CFIndex v152;
  uint64_t v153;
  double *v154;
  const void *v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  double *v163;
  double *v164;
  uint64_t v165;
  _BOOL4 v166;
  uint64_t v167;
  std::runtime_error *v168;
  std::runtime_error *v169;
  std::runtime_error *v170;
  std::runtime_error *v171;
  void **v172;
  std::runtime_error *v173;
  std::string *v174;
  std::runtime_error *v175;
  std::runtime_error *v176;
  void **v177;
  void **v178;
  std::string *v179;
  std::runtime_error *v180;
  std::runtime_error *v181;
  std::runtime_error *v182;
  std::runtime_error *v183;
  std::runtime_error *v184;
  std::runtime_error *v185;
  std::string *v186;
  std::string *v187;
  std::runtime_error *v188;
  std::string *v189;
  void **v190;
  std::runtime_error *v191;
  std::string *v192;
  void **v193;
  std::runtime_error *v194;
  std::string *v195;
  void **v196;
  std::string *v197;
  std::runtime_error *exception;
  const __CFString **v199;
  std::string *v200;
  const __CFString **v201;
  std::string *v202;
  const __CFString **v203;
  std::string *v204;
  const __CFAllocator *alloc;
  _QWORD *v207;
  unint64_t v208;
  float *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  const void *v215;
  unint64_t v216;
  os_signpost_id_t spid;
  char *v218;
  char *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  void *v224[4];
  void *v225[2];
  CFTypeRef v226;
  CFURLRef anURL;
  char v228;
  void *v229[2];
  CFTypeRef cfa;
  unsigned int __val[2];
  char v232;
  CFDataRef theData;
  char v234;
  const void *v235;
  CFDictionaryRef theDict;
  char v237;
  CFArrayRef theArray;
  char v239;
  void *__p[2];
  unsigned __int8 v241;
  char v242;
  const __CFDictionary *v243;
  char v244;
  CFArrayRef v245;
  char v246;
  const __CFDictionary *v247;
  std::string v248;
  __int128 v249;
  __int128 v250;
  __int128 buf;
  unint64_t v252;
  uint64_t v253;

  v253 = *MEMORY[0x1E0C80C00];
  if (!cf)
  {
    v247 = 0;
LABEL_460:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v247, cf);
  if (!v247)
    goto LABEL_460;
  v6 = applesauce::CF::details::at_key<char const(&)[6]>(v247, "Boxes");
  if (!v6)
    goto LABEL_462;
  v7 = v6;
  CFRetain(v6);
  v8 = CFGetTypeID(v7);
  if (v8 != CFArrayGetTypeID())
  {
    CFRelease(v7);
LABEL_462:
    LOBYTE(v245) = 0;
    v246 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&buf, "setPropertyStrip");
    std::string::basic_string[abi:ne180100]<0>(&v250, "'Boxes' key not found");
    DSPGraph::ThrowException(1886548769, (__int128 *)__p, 2050, &buf, &v250);
  }
  v245 = (CFArrayRef)v7;
  v246 = 1;
  if (DSPGraph::getLog(void)::onceToken != -1)
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
  spid = os_signpost_id_make_with_pointer((os_log_t)DSPGraph::getLog(void)::gLog, this);
  v211 = 0;
  v207 = (_QWORD *)((char *)this + 784);
  v220 = spid - 1;
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    if (!v245)
    {
      v180 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v180, "Could not construct");
    }
    if (v211 >= CFArrayGetCount(v245))
      break;
    if (!v246)
      std::__throw_bad_optional_access[abi:ne180100]();
    if (!v245)
    {
      v182 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v182, "Could not construct");
    }
    applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v243, v245, v211);
    if (!v244)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&buf, "setPropertyStrip");
      std::string::basic_string[abi:ne180100]<0>(&v250, "BoxInfo must be a dictionary");
      DSPGraph::ThrowException(1886548769, (__int128 *)__p, 2060, &buf, &v250);
    }
    if (!v243)
    {
      v183 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v183, "Could not construct");
    }
    v9 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[5]>(v243, "Name");
    if (!v9)
    {
      LOBYTE(__p[0]) = 0;
      v242 = 0;
LABEL_397:
      std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
      std::string::basic_string[abi:ne180100]<0>(&v249, "'Name' not found in BoxInfo dictionary");
      DSPGraph::ThrowException(1886548769, &buf, 2066, &v250, &v249);
    }
    applesauce::CF::convert_as<std::string,0>((uint64_t)__p, v9);
    if (!v242)
      goto LABEL_397;
    v10 = v241;
    if ((v241 & 0x80u) != 0)
      v10 = (unint64_t)__p[1];
    if (!v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
      std::string::basic_string[abi:ne180100]<0>(&v249, "Box name is empty");
      DSPGraph::ThrowException(1886548769, &buf, 2069, &v250, &v249);
    }
    v11 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>(v207, (unsigned __int8 *)__p);
    if (!v11 || (v219 = (char *)*((_QWORD *)v11 + 5)) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
      v178 = __p;
      if ((v241 & 0x80u) != 0)
        v178 = (void **)__p[0];
      DSPGraph::strprintf((DSPGraph *)"Box %s not found", &v249, v178);
      DSPGraph::ThrowException(1852204065, &buf, 2074, &v250, &v249);
    }
    if (!v244)
      std::__throw_bad_optional_access[abi:ne180100]();
    v12 = v243;
    if (!v243)
    {
      v181 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v181, "Could not construct");
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&buf, "Properties");
    Value = CFDictionaryGetValue(v12, (const void *)buf);
    if ((_QWORD)buf)
      CFRelease((CFTypeRef)buf);
    if (!Value)
      goto LABEL_476;
    CFRetain(Value);
    v14 = CFGetTypeID(Value);
    if (v14 != CFArrayGetTypeID())
    {
      CFRelease(Value);
LABEL_476:
      LOBYTE(theArray) = 0;
      v239 = 0;
      std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
      std::string::basic_string[abi:ne180100]<0>(&v249, "'Properties' array not found in BoxInfo dictionary");
      DSPGraph::ThrowException(1886548769, &buf, 2079, &v250, &v249);
    }
    v15 = 0;
    v223 = 0;
    theArray = (CFArrayRef)Value;
    v239 = 1;
    v218 = v219 + 32;
    while (CFArrayGetCount((CFArrayRef)Value) > v15)
    {
      if (!v239)
        std::__throw_bad_optional_access[abi:ne180100]();
      if (!theArray)
      {
        v169 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v169, "Could not construct");
      }
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&theDict, theArray, v15);
      if (!v237)
      {
        std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
        std::string::basic_string[abi:ne180100]<0>(&v249, "Property dictionary not found");
        DSPGraph::ThrowException(1886548769, &buf, 2088, &v250, &v249);
      }
      v16 = DSPGraph::Graph::setPropertyStrip(__CFDictionary const*,__CFString const*)::$_0::operator()<char const*>(&theDict, "PropertyID");
      if (!HIDWORD(v16))
      {
        v16 = DSPGraph::Graph::setPropertyStrip(__CFDictionary const*,__CFString const*)::$_0::operator()<char const*>(&theDict, "Number");
        if (!HIDWORD(v16))
        {
          std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
          std::string::basic_string[abi:ne180100]<0>(&v249, "PropertyID not found");
          DSPGraph::ThrowException(1886548769, &buf, 2108, &v250, &v249);
        }
      }
      if (!theDict)
      {
        v170 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v170, "Could not construct");
      }
      v17 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[6]>(theDict, "Scope");
      if (v17)
      {
        v18 = applesauce::CF::convert_as<unsigned int,0>(v17);
        v19 = 0x100000000;
        if ((unint64_t)v18 > 0x100000000)
          v19 = (uint64_t)v18;
        v222 = v19;
      }
      else
      {
        v222 = 0;
      }
      v20 = theDict;
      if (!theDict)
      {
        v171 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v171, "Could not construct");
      }
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&buf, "Element");
      v21 = (const __CFNumber *)CFDictionaryGetValue(v20, (const void *)buf);
      if ((_QWORD)buf)
        CFRelease((CFTypeRef)buf);
      if (v21)
      {
        v22 = applesauce::CF::convert_as<unsigned int,0>(v21);
        v23 = 0x100000000;
        if ((unint64_t)v22 > 0x100000000)
          v23 = (uint64_t)v22;
        v221 = v23;
      }
      else
      {
        v221 = 0;
      }
      v235 = 0;
      v235 = CFDictionaryGetValue(theDict, CFSTR("Value"));
      if (!v235)
      {
        if (!theDict)
        {
          v173 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v173, "Could not construct");
        }
        v29 = applesauce::CF::details::at_key<char const(&)[5]>(theDict, "Data");
        if (v29)
        {
          v30 = v29;
          CFRetain(v29);
          v31 = CFGetTypeID(v30);
          if (v31 == CFDataGetTypeID())
          {
            theData = (CFDataRef)v30;
            v234 = 1;
            if (DSPGraph::getLog(void)::onceToken != -1)
              dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
            if (v220 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v32 = DSPGraph::getLog(void)::gLog;
              if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
              {
                v33 = v219 + 32;
                if (v219[55] < 0)
                  v33 = *(char **)v218;
                LODWORD(buf) = 136315138;
                *(_QWORD *)((char *)&buf + 4) = v33;
                _os_signpost_emit_with_name_impl(&dword_18EE07000, v32, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
              }
            }
            if (!v234)
              std::__throw_bad_optional_access[abi:ne180100]();
            if (!theData)
            {
              v176 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v176, "Could not construct");
            }
            Length = CFDataGetLength(theData);
            if (!v234)
              std::__throw_bad_optional_access[abi:ne180100]();
            v35 = Length;
            if (!theData)
            {
              v175 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v175, "Could not construct");
            }
            BytePtr = CFDataGetBytePtr(theData);
            v37 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, CFIndex, const UInt8 *))(*(_QWORD *)v219 + 312))(v219, v16, v222, v221, v35, BytePtr);
            if (DSPGraph::getLog(void)::onceToken != -1)
              dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
            if (v220 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v38 = DSPGraph::getLog(void)::gLog;
              if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
              {
                v39 = v219 + 32;
                if (v219[55] < 0)
                  v39 = *(char **)v218;
                LODWORD(buf) = 136315138;
                *(_QWORD *)((char *)&buf + 4) = v39;
                _os_signpost_emit_with_name_impl(&dword_18EE07000, v38, OS_SIGNPOST_INTERVAL_END, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
              }
            }
            if ((_DWORD)v37)
            {
              std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
              v177 = __p;
              if ((v241 & 0x80u) != 0)
                v177 = (void **)__p[0];
              DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u failed with error %d", &v249, v177, v16, v222, v221, v37);
              DSPGraph::ThrowException(v37, &buf, 2139, &v250, &v249);
            }
            goto LABEL_303;
          }
          CFRelease(v30);
        }
        LOBYTE(theData) = 0;
        v234 = 0;
        if (!theDict)
          goto LABEL_402;
        v40 = applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>(theDict, "UInt32");
        if ((unint64_t)v40 >> 32)
        {
          __val[0] = v40;
          v49 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v219 + 312))(v219, v16, v222, v221, 4, __val);
          if ((_DWORD)v49)
          {
            std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v250, "applyPropertyStripScalarValue");
            if (v219[55] < 0)
              v218 = *(char **)v218;
            std::to_string(&v248, __val[0]);
            if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v174 = &v248;
            else
              v174 = (std::string *)v248.__r_.__value_.__r.__words[0];
            DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to %s from property strip key %s failed with error %d", &v249, v218, v16, v222, v221, v174, "UInt32", v49);
            DSPGraph::ThrowException(v49, &buf, 1988, &v250, &v249);
          }
          goto LABEL_303;
        }
        if (!theDict)
          goto LABEL_402;
        v41 = applesauce::CF::details::at_key<char const*&>(theDict, "UInt32");
        if (!v41 || (v42 = v41, TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(v42)))
        {
          v216 &= 0xFFFFFFFFFFFFFF00;
          goto LABEL_100;
        }
        v212 = (unint64_t *)v3;
        Count = CFArrayGetCount((CFArrayRef)v42);
        v45 = Count;
        if (Count << 32)
        {
          if (Count << 32 < 0)
LABEL_359:
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((int)Count);
          v48 = &v46[4 * v47];
        }
        else
        {
          v46 = 0;
          v48 = 0;
        }
        if (v45 < 1)
        {
          v107 = 1;
          goto LABEL_187;
        }
        v94 = 0;
        v95 = v45;
        v96 = v46;
        while (1)
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v42, v94);
          v98 = applesauce::CF::convert_as<unsigned int,0>(ValueAtIndex);
          if (!((unint64_t)v98 >> 32))
            break;
          v99 = (int)v98;
          if (v96 >= v48)
          {
            v100 = (v96 - v46) >> 2;
            v101 = v100 + 1;
            if ((unint64_t)(v100 + 1) >> 62)
              goto LABEL_359;
            if ((v48 - v46) >> 1 > v101)
              v101 = (v48 - v46) >> 1;
            if ((unint64_t)(v48 - v46) >= 0x7FFFFFFFFFFFFFFCLL)
              v102 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v102 = v101;
            if (v102)
              v102 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v102);
            else
              v103 = 0;
            v104 = (char *)(v102 + 4 * v100);
            *(_DWORD *)v104 = v99;
            v105 = v104 + 4;
            while (v96 != v46)
            {
              v106 = *((_DWORD *)v96 - 1);
              v96 -= 4;
              *((_DWORD *)v104 - 1) = v106;
              v104 -= 4;
            }
            v48 = (char *)(v102 + 4 * v103);
            if (v46)
              operator delete(v46);
            v46 = v104;
            v96 = v105;
          }
          else
          {
            *(_DWORD *)v96 = (_DWORD)v98;
            v96 += 4;
          }
          if (++v94 == v95)
          {
            v107 = v46 == v96;
            if (v46 != v96)
            {
              v108 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)v219 + 312))(v219, v16, v222, v221, ((_DWORD)v96 - (_DWORD)v46) & 0xFFFFFFFC, v46);
              if ((_DWORD)v108)
              {
                std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v250, "applyPropertyStripScalarValue");
                if (v219[55] < 0)
                  v218 = *(char **)v218;
                std::to_string(&v248, *(_DWORD *)v46);
                if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v192 = &v248;
                else
                  v192 = (std::string *)v248.__r_.__value_.__r.__words[0];
                DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to [%s, ...] from property strip key %s failed with error %d", &v249, v218, v16, v222, v221, v192, "UInt32", v108);
                DSPGraph::ThrowException(v108, &buf, 1996, &v250, &v249);
              }
LABEL_187:
              v3 = (unint64_t)v212;
              v216 = (unint64_t)v46;
              if (v46)
                operator delete(v46);
              if (!v107)
              {
LABEL_303:
                std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theData);
                goto LABEL_304;
              }
LABEL_100:
              if (theDict)
              {
                v50 = (const __CFNumber *)applesauce::CF::details::at_key<char const*&>(theDict, "UInt64");
                if (v50)
                {
                  v51 = applesauce::CF::convert_as<unsigned long long,0>(v50);
                  if (v52)
                  {
                    *(_QWORD *)__val = v51;
                    v53 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v219 + 312))(v219, v16, v222, v221, 8, __val);
                    if ((_DWORD)v53)
                    {
                      std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                      std::string::basic_string[abi:ne180100]<0>(&v250, "applyPropertyStripScalarValue");
                      if (v219[55] < 0)
                        v218 = *(char **)v218;
                      std::to_string(&v248, *(unint64_t *)__val);
                      if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v179 = &v248;
                      else
                        v179 = (std::string *)v248.__r_.__value_.__r.__words[0];
                      DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to %s from property strip key %s failed with error %d", &v249, v218, v16, v222, v221, v179, "UInt64", v53);
                      DSPGraph::ThrowException(v53, &buf, 1988, &v250, &v249);
                    }
                    goto LABEL_303;
                  }
                }
                if (theDict)
                {
                  v54 = (const __CFArray *)applesauce::CF::details::at_key<char const*&>(theDict, "UInt64");
                  if (v54 && (v55 = v54, v56 = CFArrayGetTypeID(), v56 == CFGetTypeID(v55)))
                  {
                    v57 = CFArrayGetCount(v55);
                    buf = 0uLL;
                    v252 = 0;
                    std::vector<unsigned long long>::reserve((void **)&buf, v57);
                    if (v57 <= 0)
                    {
                      v66 = (_QWORD *)*((_QWORD *)&buf + 1);
                      v3 = buf;
LABEL_194:
                      v109 = v66;
                      if ((_QWORD *)v3 != v66)
                      {
                        v110 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, _QWORD, unint64_t))(*(_QWORD *)v219 + 312))(v219, v16, v222, v221, ((_DWORD)v66 - (_DWORD)v3) & 0xFFFFFFF8, v3);
                        v109 = (void *)v3;
                        if ((_DWORD)v110)
                        {
                          std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                          std::string::basic_string[abi:ne180100]<0>(&v250, "applyPropertyStripScalarValue");
                          if (v219[55] < 0)
                            v218 = *(char **)v218;
                          std::to_string(&v248, *(_QWORD *)v3);
                          if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v189 = &v248;
                          else
                            v189 = (std::string *)v248.__r_.__value_.__r.__words[0];
                          DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to [%s, ...] from property strip key %s failed with error %d", &v249, v218, v16, v222, v221, v189, "UInt64", v110);
                          DSPGraph::ThrowException(v110, &buf, 1996, &v250, &v249);
                        }
                      }
                      if (v109)
                        operator delete(v109);
                      if ((_QWORD *)v3 != v66)
                        goto LABEL_303;
                    }
                    else
                    {
                      v213 = v3;
                      v58 = 0;
                      v59 = v57;
                      v60 = v252;
                      v3 = buf;
                      while (1)
                      {
                        v61 = (const __CFNumber *)CFArrayGetValueAtIndex(v55, v58);
                        v62 = applesauce::CF::convert_as<unsigned long long,0>(v61);
                        if (!v63)
                          break;
                        v64 = v62;
                        v65 = (unint64_t *)*((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1) >= v60)
                        {
                          v67 = (uint64_t)(*((_QWORD *)&buf + 1) - v3) >> 3;
                          v68 = v67 + 1;
                          if ((unint64_t)(v67 + 1) >> 61)
                          {
                            v252 = v60;
                            *(_QWORD *)&buf = v3;
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          }
                          if ((uint64_t)(v60 - v3) >> 2 > v68)
                            v68 = (uint64_t)(v60 - v3) >> 2;
                          if (v60 - v3 >= 0x7FFFFFFFFFFFFFF8)
                            v69 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v69 = v68;
                          if (v69)
                            v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v69);
                          else
                            v70 = 0;
                          v71 = (unint64_t *)(v69 + 8 * v67);
                          *v71 = (unint64_t)v64;
                          v66 = v71 + 1;
                          while (v65 != (unint64_t *)v3)
                          {
                            v72 = *--v65;
                            *--v71 = v72;
                          }
                          v60 = v69 + 8 * v70;
                          *((_QWORD *)&buf + 1) = v66;
                          if (v3)
                            operator delete((void *)v3);
                          v3 = (unint64_t)v71;
                        }
                        else
                        {
                          **((_QWORD **)&buf + 1) = v62;
                          v66 = v65 + 1;
                        }
                        *((_QWORD *)&buf + 1) = v66;
                        if (++v58 == v59)
                          goto LABEL_194;
                      }
                      v252 = v60;
                      *(_QWORD *)&buf = v3;
                      if (v3)
                      {
                        *((_QWORD *)&buf + 1) = v3;
                        operator delete((void *)v3);
                      }
                      v3 = v213 & 0xFFFFFFFFFFFFFF00;
                    }
                  }
                  else
                  {
                    v3 &= 0xFFFFFFFFFFFFFF00;
                  }
                  if (theDict)
                  {
                    v73 = applesauce::CF::details::at_key<char const*&>(theDict, "Float32");
                    if (v73)
                    {
                      v74 = applesauce::CF::convert_as<float,0>((uint64_t)v73);
                      if (HIDWORD(v74))
                      {
                        __val[0] = v74;
                        v93 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v219 + 312))(v219, v16, v222, v221, 4, __val);
                        if ((_DWORD)v93)
                        {
                          std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                          std::string::basic_string[abi:ne180100]<0>(&v250, "applyPropertyStripScalarValue");
                          if (v219[55] < 0)
                            v218 = *(char **)v218;
                          std::to_string(&v248, *(float *)__val);
                          if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v186 = &v248;
                          else
                            v186 = (std::string *)v248.__r_.__value_.__r.__words[0];
                          DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to %s from property strip key %s failed with error %d", &v249, v218, v16, v222, v221, v186, "Float32", v93);
                          DSPGraph::ThrowException(v93, &buf, 1988, &v250, &v249);
                        }
                        goto LABEL_303;
                      }
                    }
                    if (theDict)
                    {
                      v75 = applesauce::CF::details::at_key<char const*&>(theDict, "Float32");
                      if (!v75)
                        goto LABEL_214;
                      v76 = v75;
                      v77 = CFArrayGetTypeID();
                      if (v77 != CFGetTypeID(v76))
                        goto LABEL_214;
                      v78 = CFArrayGetCount((CFArrayRef)v76);
                      buf = 0uLL;
                      v252 = 0;
                      std::vector<float>::reserve((void **)&buf, v78);
                      if (v78 <= 0)
                      {
                        v86 = (float *)*((_QWORD *)&buf + 1);
                        v81 = (float *)buf;
LABEL_204:
                        if (v81 != v86)
                        {
                          v111 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, _QWORD, float *))(*(_QWORD *)v219 + 312))(v219, v16, v222, v221, ((_DWORD)v86 - (_DWORD)v81) & 0xFFFFFFFC, v81);
                          if ((_DWORD)v111)
                          {
                            std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                            std::string::basic_string[abi:ne180100]<0>(&v250, "applyPropertyStripScalarValue");
                            if (v219[55] < 0)
                              v218 = *(char **)v218;
                            std::to_string(&v248, *v81);
                            if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v195 = &v248;
                            else
                              v195 = (std::string *)v248.__r_.__value_.__r.__words[0];
                            DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to [%s, ...] from property strip key %s failed with error %d", &v249, v218, v16, v222, v221, v195, "Float32", v111);
                            DSPGraph::ThrowException(v111, &buf, 1996, &v250, &v249);
                          }
                        }
                        if (v81)
                          operator delete(v81);
                        if (v81 == v86)
                          goto LABEL_215;
LABEL_302:
                        v209 = v81;
                        goto LABEL_303;
                      }
                      v79 = 0;
                      v214 = v78;
                      v80 = v252;
                      v81 = (float *)buf;
                      while (1)
                      {
                        v82 = CFArrayGetValueAtIndex((CFArrayRef)v76, v79);
                        v83 = applesauce::CF::convert_as<float,0>((uint64_t)v82);
                        if (!HIDWORD(v83))
                          break;
                        v84 = v83;
                        v85 = (float *)*((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1) >= v80)
                        {
                          v87 = (uint64_t)(*((_QWORD *)&buf + 1) - (_QWORD)v81) >> 2;
                          v88 = v87 + 1;
                          if ((unint64_t)(v87 + 1) >> 62)
                          {
                            v252 = v80;
                            *(_QWORD *)&buf = v81;
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          }
                          if ((uint64_t)(v80 - (_QWORD)v81) >> 1 > v88)
                            v88 = (uint64_t)(v80 - (_QWORD)v81) >> 1;
                          if (v80 - (unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
                            v89 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v89 = v88;
                          if (v89)
                            v89 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v89);
                          else
                            v90 = 0;
                          v91 = (float *)(v89 + 4 * v87);
                          *(_DWORD *)v91 = v84;
                          v86 = v91 + 1;
                          while (v85 != v81)
                          {
                            v92 = *((_DWORD *)v85-- - 1);
                            *((_DWORD *)v91-- - 1) = v92;
                          }
                          v80 = v89 + 4 * v90;
                          *((_QWORD *)&buf + 1) = v86;
                          if (v81)
                            operator delete(v81);
                          v81 = v91;
                        }
                        else
                        {
                          **((_DWORD **)&buf + 1) = v83;
                          v86 = v85 + 1;
                        }
                        *((_QWORD *)&buf + 1) = v86;
                        if (++v79 == v214)
                          goto LABEL_204;
                      }
                      v252 = v80;
                      *(_QWORD *)&buf = v81;
                      if (v81)
                      {
                        *((_QWORD *)&buf + 1) = v81;
                        operator delete(v81);
                      }
LABEL_214:
                      v81 = (float *)((unint64_t)v209 & 0xFFFFFFFFFFFFFF00);
LABEL_215:
                      if (theDict)
                      {
                        v112 = applesauce::CF::details::at_key<char const*&>(theDict, "Float64");
                        if (v112)
                        {
                          v113 = applesauce::CF::convert_as<double,0>((unint64_t)v112);
                          if (v114)
                          {
                            *(_QWORD *)__val = v113;
                            v115 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v219 + 312))(v219, v16, v222, v221, 8, __val);
                            if ((_DWORD)v115)
                            {
                              std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                              std::string::basic_string[abi:ne180100]<0>(&v250, "applyPropertyStripScalarValue");
                              if (v219[55] < 0)
                                v218 = *(char **)v218;
                              std::to_string(&v248, *(double *)__val);
                              if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v187 = &v248;
                              else
                                v187 = (std::string *)v248.__r_.__value_.__r.__words[0];
                              DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to %s from property strip key %s failed with error %d", &v249, v218, v16, v222, v221, v187, "Float64", v115);
                              DSPGraph::ThrowException(v115, &buf, 1988, &v250, &v249);
                            }
                            goto LABEL_302;
                          }
                        }
                        if (theDict)
                        {
                          v116 = applesauce::CF::details::at_key<char const*&>(theDict, "Float64");
                          if (!v116 || (v117 = v116, v118 = CFArrayGetTypeID(), v118 != CFGetTypeID(v117)))
                          {
                            v208 &= 0xFFFFFFFFFFFFFF00;
                            goto LABEL_227;
                          }
                          v119 = CFArrayGetCount((CFArrayRef)v117);
                          v120 = v119;
                          if (v119 << 32)
                          {
                            if (v119 << 32 < 0)
LABEL_389:
                              std::vector<float>::__throw_length_error[abi:ne180100]();
                            v121 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>((int)v119);
                            v123 = (char *)&v121[v122];
                          }
                          else
                          {
                            v123 = 0;
                            v121 = 0;
                          }
                          if (v120 < 1)
                          {
                            v166 = 1;
                            if (!v121)
                              goto LABEL_335;
                          }
                          else
                          {
                            v152 = 0;
                            v153 = v120;
                            v154 = v121;
                            v215 = v117;
                            v210 = v153;
                            do
                            {
                              v155 = CFArrayGetValueAtIndex((CFArrayRef)v117, v152);
                              v156 = applesauce::CF::convert_as<double,0>((unint64_t)v155);
                              if (!v157)
                              {
                                v208 &= 0xFFFFFFFFFFFFFF00;
                                if (v154)
                                  operator delete(v154);
                                goto LABEL_227;
                              }
                              v158 = v156;
                              if (v121 >= (double *)v123)
                              {
                                v159 = v121 - v154;
                                v160 = v159 + 1;
                                if ((unint64_t)(v159 + 1) >> 61)
                                  goto LABEL_389;
                                if ((v123 - (char *)v154) >> 2 > v160)
                                  v160 = (v123 - (char *)v154) >> 2;
                                if ((unint64_t)(v123 - (char *)v154) >= 0x7FFFFFFFFFFFFFF8)
                                  v161 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v161 = v160;
                                if (v161)
                                  v161 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v161);
                                else
                                  v162 = 0;
                                v163 = (double *)(v161 + 8 * v159);
                                *(_QWORD *)v163 = v158;
                                v164 = v163 + 1;
                                while (v121 != v154)
                                {
                                  v165 = *((_QWORD *)v121-- - 1);
                                  *((_QWORD *)v163-- - 1) = v165;
                                }
                                v123 = (char *)(v161 + 8 * v162);
                                if (v154)
                                  operator delete(v154);
                                v154 = v163;
                                v121 = v164;
                                v117 = v215;
                                v153 = v210;
                              }
                              else
                              {
                                *(_QWORD *)v121++ = v156;
                              }
                              ++v152;
                            }
                            while (v152 != v153);
                            v166 = v154 == v121;
                            if (v154 != v121)
                            {
                              v167 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, _QWORD, double *))(*(_QWORD *)v219 + 312))(v219, v16, v222, v221, ((_DWORD)v121 - (_DWORD)v154) & 0xFFFFFFF8, v154);
                              if ((_DWORD)v167)
                              {
                                std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                                std::string::basic_string[abi:ne180100]<0>(&v250, "applyPropertyStripScalarValue");
                                if (v219[55] < 0)
                                  v218 = *(char **)v218;
                                std::to_string(&v248, *v154);
                                if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v197 = &v248;
                                else
                                  v197 = (std::string *)v248.__r_.__value_.__r.__words[0];
                                DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to [%s, ...] from property strip key %s failed with error %d", &v249, v218, v16, v222, v221, v197, "Float64", v167);
                                DSPGraph::ThrowException(v167, &buf, 1996, &v250, &v249);
                              }
                            }
                            v121 = v154;
                            if (!v154)
                            {
LABEL_335:
                              v208 = (unint64_t)v121;
                              if (!v166)
                                goto LABEL_302;
LABEL_227:
                              v124 = theDict;
                              if (!theDict)
                              {
                                v185 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::runtime_error::runtime_error(v185, "Could not construct");
                              }
                              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&buf, "FilePath");
                              v125 = (const __CFString *)CFDictionaryGetValue(v124, (const void *)buf);
                              if ((_QWORD)buf)
                                CFRelease((CFTypeRef)buf);
                              if (v125)
                              {
                                CFRetain(v125);
                                v126 = CFGetTypeID(v125);
                                if (v126 == CFStringGetTypeID())
                                {
                                  *(_QWORD *)__val = v125;
                                  v232 = 1;
                                  DSPGraph::createAbsoluteURL((DSPGraph *)&anURL, v125, a3);
                                  if (!anURL)
                                  {
                                    v194 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                    std::runtime_error::runtime_error(v194, "Could not construct");
                                  }
                                  v127 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
                                  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, v127);
                                  if (!cfa)
                                  {
                                    std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                                    std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
                                    if (!v232)
                                      std::__throw_bad_optional_access[abi:ne180100]();
                                    v199 = (const __CFString **)applesauce::CF::StringRef::operator->(__val);
                                    std::string::basic_string[abi:ne180100]<0>(v229, "???");
                                    applesauce::CF::StringRef_proxy::convert_or(&v248, *v199, (uint64_t)v229);
                                    if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v200 = &v248;
                                    else
                                      v200 = (std::string *)v248.__r_.__value_.__r.__words[0];
                                    DSPGraph::strprintf((DSPGraph *)"Couldn't create file path '%s'. CFURLCopyFileSystemPath failed.", &v249, v200);
                                    DSPGraph::ThrowException(1886548769, &buf, 2150, &v250, &v249);
                                  }
                                  v248.__r_.__value_.__r.__words[0] = (std::string::size_type)cfa;
                                  if (DSPGraph::getLog(void)::onceToken != -1)
                                    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
                                  if (v220 <= 0xFFFFFFFFFFFFFFFDLL)
                                  {
                                    v128 = DSPGraph::getLog(void)::gLog;
                                    if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                                    {
                                      v129 = v219 + 32;
                                      if (v219[55] < 0)
                                        v129 = *(char **)v218;
                                      LODWORD(buf) = 136315138;
                                      *(_QWORD *)((char *)&buf + 4) = v129;
                                      _os_signpost_emit_with_name_impl(&dword_18EE07000, v128, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
                                    }
                                  }
                                  v130 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)v219 + 312))(v219, v16, v222, v221, 8, &v248);
                                  if (DSPGraph::getLog(void)::onceToken != -1)
                                    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
                                  if (v220 <= 0xFFFFFFFFFFFFFFFDLL)
                                  {
                                    v131 = DSPGraph::getLog(void)::gLog;
                                    if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                                    {
                                      v132 = v219 + 32;
                                      if (v219[55] < 0)
                                        v132 = *(char **)v218;
                                      LODWORD(buf) = 136315138;
                                      *(_QWORD *)((char *)&buf + 4) = v132;
                                      _os_signpost_emit_with_name_impl(&dword_18EE07000, v131, OS_SIGNPOST_INTERVAL_END, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
                                    }
                                  }
                                  if ((_DWORD)v130)
                                  {
                                    std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                                    std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
                                    v193 = __p;
                                    if ((v241 & 0x80u) != 0)
                                      v193 = (void **)__p[0];
                                    DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u failed with error %d", &v249, v193, v16, v222, v221, v130);
                                    DSPGraph::ThrowException(v130, &buf, 2157, &v250, &v249);
                                  }
                                  if (cfa)
                                    CFRelease(cfa);
                                  if (anURL)
                                    CFRelease(anURL);
                                  goto LABEL_301;
                                }
                                CFRelease(v125);
                              }
                              LOBYTE(__val[0]) = 0;
                              v232 = 0;
                              if (!theDict)
                              {
                                v188 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::runtime_error::runtime_error(v188, "Could not construct");
                              }
                              v133 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[5]>(theDict, "Path");
                              if (v133)
                              {
                                v134 = v133;
                                CFRetain(v133);
                                v135 = CFGetTypeID(v134);
                                if (v135 == CFStringGetTypeID())
                                {
                                  anURL = (CFURLRef)v134;
                                  v228 = 1;
                                  DSPGraph::createAbsoluteURL((DSPGraph *)&cfa, v134, a3);
                                  v136 = CFReadStreamCreateWithFile(alloc, (CFURLRef)cfa);
                                  v137 = v136;
                                  v226 = v136;
                                  if (!v136)
                                  {
                                    std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                                    std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
                                    if (!v228)
                                      std::__throw_bad_optional_access[abi:ne180100]();
                                    v203 = (const __CFString **)applesauce::CF::StringRef::operator->(&anURL);
                                    std::string::basic_string[abi:ne180100]<0>(v225, "???");
                                    applesauce::CF::StringRef_proxy::convert_or(&v248, *v203, (uint64_t)v225);
                                    if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v204 = &v248;
                                    else
                                      v204 = (std::string *)v248.__r_.__value_.__r.__words[0];
                                    DSPGraph::strprintf((DSPGraph *)"Couldn't load plist from path '%s'. CFReadStreamCreateWithFile failed.", &v249, v204);
                                    DSPGraph::ThrowException(1886548769, &buf, 2169, &v250, &v249);
                                  }
                                  CFReadStreamOpen(v136);
                                  v138 = CFPropertyListCreateWithStream(alloc, v137, 0, 0, 0, 0);
                                  v224[3] = (void *)v138;
                                  CFReadStreamClose(v137);
                                  if (!v138)
                                  {
                                    std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                                    std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
                                    if (!v228)
                                      std::__throw_bad_optional_access[abi:ne180100]();
                                    v201 = (const __CFString **)applesauce::CF::StringRef::operator->(&anURL);
                                    std::string::basic_string[abi:ne180100]<0>(v224, "???");
                                    applesauce::CF::StringRef_proxy::convert_or(&v248, *v201, (uint64_t)v224);
                                    if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v202 = &v248;
                                    else
                                      v202 = (std::string *)v248.__r_.__value_.__r.__words[0];
                                    DSPGraph::strprintf((DSPGraph *)"Couldn't load plist from path '%s'. CFPropertyListCreateWithStream failed.", &v249, v202);
                                    DSPGraph::ThrowException(1886548769, &buf, 2175, &v250, &v249);
                                  }
                                  v248.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
                                  if (DSPGraph::getLog(void)::onceToken != -1)
                                    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
                                  if (v220 <= 0xFFFFFFFFFFFFFFFDLL)
                                  {
                                    v139 = DSPGraph::getLog(void)::gLog;
                                    if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                                    {
                                      v140 = v219 + 32;
                                      if (v219[55] < 0)
                                        v140 = *(char **)v218;
                                      LODWORD(buf) = 136315138;
                                      *(_QWORD *)((char *)&buf + 4) = v140;
                                      _os_signpost_emit_with_name_impl(&dword_18EE07000, v139, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
                                    }
                                  }
                                  v141 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)v219 + 312))(v219, v16, v222, v221, 8, &v248);
                                  if (DSPGraph::getLog(void)::onceToken != -1)
                                    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
                                  if (v220 <= 0xFFFFFFFFFFFFFFFDLL)
                                  {
                                    v142 = DSPGraph::getLog(void)::gLog;
                                    if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                                    {
                                      v143 = v219 + 32;
                                      if (v219[55] < 0)
                                        v143 = *(char **)v218;
                                      LODWORD(buf) = 136315138;
                                      *(_QWORD *)((char *)&buf + 4) = v143;
                                      _os_signpost_emit_with_name_impl(&dword_18EE07000, v142, OS_SIGNPOST_INTERVAL_END, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
                                    }
                                  }
                                  if ((_DWORD)v141)
                                  {
                                    std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                                    std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
                                    v196 = __p;
                                    if ((v241 & 0x80u) != 0)
                                      v196 = (void **)__p[0];
                                    DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u failed with error %d", &v249, v196, v16, v222, v221, v141);
                                    DSPGraph::ThrowException(v141, &buf, 2183, &v250, &v249);
                                  }
                                  CFRelease(v138);
                                  CFRelease(v137);
                                  if (cfa)
                                    CFRelease(cfa);
LABEL_300:
                                  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&anURL);
LABEL_301:
                                  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__val);
                                  goto LABEL_302;
                                }
                                CFRelease(v134);
                              }
                              LOBYTE(anURL) = 0;
                              v228 = 0;
                              v144 = theDict;
                              if (!theDict)
                              {
                                v191 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::runtime_error::runtime_error(v191, "Could not construct");
                              }
                              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&buf, "URL");
                              v145 = (const __CFString *)CFDictionaryGetValue(v144, (const void *)buf);
                              if ((_QWORD)buf)
                                CFRelease((CFTypeRef)buf);
                              if (v145)
                              {
                                CFRetain(v145);
                                v146 = CFGetTypeID(v145);
                                if (v146 == CFStringGetTypeID())
                                {
                                  v248.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
                                  v248.__r_.__value_.__s.__data_[8] = 1;
                                  DSPGraph::createAbsoluteURL((DSPGraph *)&cfa, v145, a3);
                                  v226 = cfa;
                                  if (DSPGraph::getLog(void)::onceToken != -1)
                                    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
                                  if (v220 <= 0xFFFFFFFFFFFFFFFDLL)
                                  {
                                    v147 = DSPGraph::getLog(void)::gLog;
                                    if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                                    {
                                      v148 = v219 + 32;
                                      if (v219[55] < 0)
                                        v148 = *(char **)v218;
                                      LODWORD(buf) = 136315138;
                                      *(_QWORD *)((char *)&buf + 4) = v148;
                                      _os_signpost_emit_with_name_impl(&dword_18EE07000, v147, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
                                    }
                                  }
                                  v149 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)v219 + 312))(v219, v16, v222, v221, 8, &v226);
                                  if (DSPGraph::getLog(void)::onceToken != -1)
                                    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
                                  if (v220 <= 0xFFFFFFFFFFFFFFFDLL)
                                  {
                                    v150 = DSPGraph::getLog(void)::gLog;
                                    if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                                    {
                                      v151 = v219 + 32;
                                      if (v219[55] < 0)
                                        v151 = *(char **)v218;
                                      LODWORD(buf) = 136315138;
                                      *(_QWORD *)((char *)&buf + 4) = v151;
                                      _os_signpost_emit_with_name_impl(&dword_18EE07000, v150, OS_SIGNPOST_INTERVAL_END, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
                                    }
                                  }
                                  if ((_DWORD)v149)
                                  {
                                    std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                                    std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
                                    v190 = __p;
                                    if ((v241 & 0x80u) != 0)
                                      v190 = (void **)__p[0];
                                    DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u failed with error %d", &v249, v190, v16, v222, v221, v149);
                                    DSPGraph::ThrowException(v149, &buf, 2197, &v250, &v249);
                                  }
                                  if (cfa)
                                    CFRelease(cfa);
                                  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v248);
                                  goto LABEL_300;
                                }
                                CFRelease(v145);
                              }
                              v248.__r_.__value_.__s.__data_[0] = 0;
                              v248.__r_.__value_.__s.__data_[8] = 0;
                              std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                              std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
                              std::string::basic_string[abi:ne180100]<0>(&v249, "Must provide either a 'Value', 'Data', 'Path', 'FilePath', 'URL', or a recognized number type for properties");
                              DSPGraph::ThrowException(1886548769, &buf, 2204, &v250, &v249);
                            }
                          }
                          operator delete(v121);
                          goto LABEL_335;
                        }
                      }
                    }
                  }
                }
              }
LABEL_402:
              v184 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v184, "Could not construct");
            }
            operator delete(v96);
            v216 = (unint64_t)v46;
LABEL_211:
            v3 = (unint64_t)v212;
            goto LABEL_100;
          }
        }
        v216 &= 0xFFFFFFFFFFFFFF00;
        if (v46)
          operator delete(v46);
        goto LABEL_211;
      }
      if (DSPGraph::getLog(void)::onceToken != -1)
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
      if (v220 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v24 = DSPGraph::getLog(void)::gLog;
        if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
        {
          v25 = v219 + 32;
          if (v219[55] < 0)
            v25 = *(char **)v218;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v25;
          _os_signpost_emit_with_name_impl(&dword_18EE07000, v24, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
        }
      }
      v26 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, const void **))(*(_QWORD *)v219 + 312))(v219, v16, v222, v221, 8, &v235);
      if (DSPGraph::getLog(void)::onceToken != -1)
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
      if (v220 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v27 = DSPGraph::getLog(void)::gLog;
        if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
        {
          v28 = v219 + 32;
          if (v219[55] < 0)
            v28 = *(char **)v218;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v28;
          _os_signpost_emit_with_name_impl(&dword_18EE07000, v27, OS_SIGNPOST_INTERVAL_END, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
        }
      }
      if ((_DWORD)v26)
      {
        std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v250, "setPropertyStrip");
        v172 = __p;
        if ((v241 & 0x80u) != 0)
          v172 = (void **)__p[0];
        DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u failed with error %d", &v249, v172, v16, v222, v221, v26);
        DSPGraph::ThrowException(v26, &buf, 2131, &v250, &v249);
      }
LABEL_304:
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theDict);
      if (!v239)
        std::__throw_bad_optional_access[abi:ne180100]();
      v15 = (v223 + 1);
      Value = theArray;
      ++v223;
      if (!theArray)
      {
        v168 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v168, "Could not construct");
      }
    }
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
    if (v242 && (char)v241 < 0)
      operator delete(__p[0]);
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v243);
    ++v211;
    if (!v246)
      std::__throw_bad_optional_access[abi:ne180100]();
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v245);
  if (v247)
    CFRelease(v247);
}

void sub_18EE592D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  uint64_t v63;

  if (*(char *)(v63 - 153) < 0)
    operator delete(*(void **)(v63 - 176));
  if (*(char *)(v63 - 129) < 0)
    operator delete(*(void **)(v63 - 152));
  if (*(char *)(v63 - 105) < 0)
    operator delete(*(void **)(v63 - 128));
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a55);
  if (a63)
  {
    if (a62 < 0)
      operator delete(a57);
  }
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](v63 - 240);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v63 - 224);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v63 - 208));
  _Unwind_Resume(a1);
}

void sub_18EE5933C()
{
  JUMPOUT(0x18EE594D8);
}

void sub_18EE59344()
{
  JUMPOUT(0x18EE594F8);
}

void sub_18EE59360()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  if (*(char *)(v0 - 129) < 0)
    operator delete(*(void **)(v0 - 152));
  JUMPOUT(0x18EE59424);
}

void sub_18EE593CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  void *v63;
  uint64_t v64;

  __cxa_free_exception(v63);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a50);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a53);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a55);
  if (a63)
  {
    if (a62 < 0)
      operator delete(a57);
  }
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](v64 - 240);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v64 - 224);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v64 - 208));
  _Unwind_Resume(a1);
}

void sub_18EE593EC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    *(_QWORD *)(v4 - 112) = v2;
    *(_QWORD *)(v4 - 128) = v3;
    JUMPOUT(0x18EE594C0);
  }
  JUMPOUT(0x18EE59508);
}

void sub_18EE59420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;

  if (*(char *)(v53 - 105) < 0)
    operator delete(*(void **)(v53 - 128));
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a53);
  JUMPOUT(0x18EE594D0);
}

void sub_18EE59438(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    *(_QWORD *)(v4 - 112) = v3;
    *(_QWORD *)(v4 - 128) = v2;
    JUMPOUT(0x18EE594C0);
  }
  JUMPOUT(0x18EE59508);
}

void sub_18EE59474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  void *v53;

  __cxa_free_exception(v53);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a53);
  JUMPOUT(0x18EE594D0);
}

void sub_18EE59484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  void *v63;
  uint64_t v64;

  __cxa_free_exception(v63);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a55);
  if (a63)
  {
    if (a62 < 0)
      operator delete(a57);
  }
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](v64 - 240);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v64 - 224);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v64 - 208));
  _Unwind_Resume(a1);
}

void sub_18EE594B8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x18EE59508);
}

const void *applesauce::CF::details::at_key<char const*&>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_18EE59570(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EE59554);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, char *a2)
{
  void **v3;
  CFIndex v4;
  CFStringRef v5;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v9;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (CFIndex)__p[1];
  v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(_QWORD *)this = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_18EE5964C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void *applesauce::CF::details::at_key<char const(&)[5]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  return Value;
}

void sub_18EE596E0(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EE596C8);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>(const __CFDictionary *a1, char *a2)
{
  const __CFNumber *result;

  result = (const __CFNumber *)applesauce::CF::details::at_key<char const*&>(a1, a2);
  if (result)
    return applesauce::CF::convert_as<unsigned int,0>(result);
  return result;
}

void applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(_BYTE *a1, CFArrayRef theArray, unint64_t a3)
{
  const void *ValueAtIndex;
  const void *v7;
  CFTypeID v8;
  char v9;

  if (CFArrayGetCount(theArray) <= a3)
    goto LABEL_6;
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  v7 = ValueAtIndex;
  if (!ValueAtIndex)
    goto LABEL_6;
  CFRetain(ValueAtIndex);
  v8 = CFGetTypeID(v7);
  if (v8 != CFDictionaryGetTypeID())
  {
    CFRelease(v7);
LABEL_6:
    v9 = 0;
    *a1 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v7;
  v9 = 1;
LABEL_7:
  a1[8] = v9;
}

const void *applesauce::CF::details::at_key<char const(&)[6]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  return Value;
}

void sub_18EE59824(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EE5980CLL);
}

void DSPGraph::createAbsoluteURL(DSPGraph *this, const __CFString *a2, const __CFString *a3)
{
  const __CFAllocator *v6;
  CFURLRef v7;
  CFURLRef v8;
  CFURLRef v9;
  CFURLRef v10;
  const __CFURL *v11;
  const __CFURL *v12;
  CFURLRef v13;
  const __CFURL *v14;
  const __CFString **v15;
  std::string *v16;
  const __CFString **v17;
  std::string *v18;
  std::runtime_error *exception;
  const __CFString **v20;
  const __CFString *v21;
  std::string *v22;
  const __CFString **v23;
  std::string *v24;
  _QWORD v25[3];
  uint64_t v26;
  std::string v27;
  _QWORD v28[3];
  _QWORD v29[2];
  _QWORD v30[3];
  CFTypeRef cf;
  _QWORD v32[3];
  std::string v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  const __CFURL *v37;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, kCFURLPOSIXPathStyle, 0);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v37, v7);
  if (!v37)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v35, "createAbsoluteURL");
    applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&v27, a2);
    v15 = (const __CFString **)applesauce::CF::StringRef::operator->(&v27);
    std::string::basic_string[abi:ne180100]<0>(v32, "???");
    applesauce::CF::StringRef_proxy::convert_or(&v33, *v15, (uint64_t)v32);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v33;
    else
      v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
    DSPGraph::strprintf((DSPGraph *)"Could not create URL from file path '%s'. CFURLCreateWithFileSystemPath failed.", &v34, v16);
    DSPGraph::ThrowException(1886548769, &v36, 2010, &v35, &v34);
  }
  v8 = CFURLGetBaseURL(v37);
  v9 = v8;
  if (v8)
    CFRetain(v8);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v36, v9);
  if ((_QWORD)v36)
  {
    CFRelease((CFTypeRef)v36);
    if (!a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v35, "createAbsoluteURL");
      std::string::basic_string[abi:ne180100]<0>(&v34, "Property strip resource path required if path is relative");
      DSPGraph::ThrowException(1886548769, &v36, 2016, &v35, &v34);
    }
    v10 = CFURLCreateWithFileSystemPath(v6, a3, kCFURLPOSIXPathStyle, 1u);
    applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&cf, v10);
    if (!cf)
    {
      std::string::basic_string[abi:ne180100]<0>(&v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v35, "createAbsoluteURL");
      applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&v27, a3);
      v17 = (const __CFString **)applesauce::CF::StringRef::operator->(&v27);
      std::string::basic_string[abi:ne180100]<0>(v30, "???");
      applesauce::CF::StringRef_proxy::convert_or(&v33, *v17, (uint64_t)v30);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v33;
      else
        v18 = (std::string *)v33.__r_.__value_.__r.__words[0];
      DSPGraph::strprintf((DSPGraph *)"Could not create file URL from path '%s'.", &v34, v18);
      DSPGraph::ThrowException(1886548769, &v36, 2020, &v35, &v34);
    }
    v11 = (const __CFURL *)MEMORY[0x193FFD488](0, a2, 0, 0);
    v12 = v11;
    v29[1] = v11;
    if (!v11)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    v13 = CFURLCopyAbsoluteURL(v11);
    applesauce::CF::URLRef::URLRef(this, v13);
    if (!*(_QWORD *)this)
    {
      std::string::basic_string[abi:ne180100]<0>(&v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v35, "createAbsoluteURL");
      applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)v29, a2);
      v20 = (const __CFString **)applesauce::CF::StringRef::operator->(v29);
      std::string::basic_string[abi:ne180100]<0>(v28, "???");
      v21 = *v20;
      v22 = &v33;
      applesauce::CF::StringRef_proxy::convert_or(&v33, v21, (uint64_t)v28);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = (std::string *)v33.__r_.__value_.__r.__words[0];
      applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&v26, a3);
      v23 = (const __CFString **)applesauce::CF::StringRef::operator->(&v26);
      std::string::basic_string[abi:ne180100]<0>(v25, "???");
      applesauce::CF::StringRef_proxy::convert_or(&v27, *v23, (uint64_t)v25);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v27;
      else
        v24 = (std::string *)v27.__r_.__value_.__r.__words[0];
      DSPGraph::strprintf((DSPGraph *)"Could not create absolute URL from path '%s' with base '%s'.", &v34, v22, v24);
      DSPGraph::ThrowException(1886548769, &v36, 2028, &v35, &v34);
    }
    CFRelease(v12);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v14 = v37;
    if (v37)
      CFRetain(v37);
    *(_QWORD *)this = v14;
  }
  if (v37)
    CFRelease(v37);
}

void sub_18EE59C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,const void *a30,const void *a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,const void *a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  const void **v44;
  uint64_t v45;

  if (*(char *)(v45 - 105) < 0)
    operator delete(*(void **)(v45 - 128));
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  applesauce::CF::StringRef::~StringRef(&a17);
  if (*(char *)(v45 - 129) < 0)
    operator delete(*(void **)(v45 - 152));
  if (a29 < 0)
    operator delete(a24);
  applesauce::CF::StringRef::~StringRef(&a30);
  if (*(char *)(v45 - 81) < 0)
    operator delete(*(void **)(v45 - 104));
  if (*(char *)(v45 - 57) < 0)
    operator delete(*(void **)(v45 - 80));
  applesauce::CF::URLRef::~URLRef(v44);
  applesauce::CF::URLRef::~URLRef(&a31);
  applesauce::CF::URLRef::~URLRef(&a38);
  applesauce::CF::URLRef::~URLRef((const void **)(v45 - 56));
  _Unwind_Resume(a1);
}

applesauce::CF::URLRef *applesauce::CF::URLRef::URLRef(applesauce::CF::URLRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFURLGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return this;
}

void sub_18EE59F0C(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

void ___ZL32AudioConverterExecuteWorkaroundsv_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "bundleIdentifier");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v2;
    if (!v2)
    {
LABEL_19:

      goto LABEL_20;
    }
    if (objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.mobilegarageband")))
    {
      objc_msgSend(v1, "infoDictionary");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v4;
      if (v4
        && (objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("CFBundleVersion")),
            v6 = (void *)objc_claimAutoreleasedReturnValue(),
            (v7 = v6) != 0))
      {
        v8 = objc_msgSend(v6, "intValue");

        if (v8 >> 1 > 0xA22)
          goto LABEL_11;
      }
      else
      {

        v8 = 0;
      }
      ACv2Workarounds::fix84702776_86723525_86479548_89800354_SinglePacketDesc = 1;
      AudioConverterLog();
      v9 = objc_retainAutorelease((id)AudioConverterLog(void)::gLog);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v12 = 136315906;
        v13 = "ACv2Workarounds.mm";
        v14 = 1024;
        v15 = 41;
        v16 = 2112;
        v17 = v3;
        v18 = 1024;
        LODWORD(v19) = v8;
        _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %@ 0x%x: fix84702776_86723525_86479548_89800354_SinglePacketDesc", (uint8_t *)&v12, 0x22u);
      }
    }
LABEL_11:
    if ((objc_msgSend(v3, "hasPrefix:", CFSTR("com.iqiyi.")) & 1) != 0
      || objc_msgSend(v3, "hasPrefix:", CFSTR("com.qiyi.")))
    {
      ACv2Workarounds::fix84702776_86723525_86479548_89800354_SinglePacketDesc = 1;
    }
    AudioConverterLog();
    v10 = objc_retainAutorelease((id)AudioConverterLog(void)::gLog);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v13 = "ACv2Workarounds.mm";
      v12 = 136315906;
      v14 = 1024;
      if (ACv2Workarounds::fix84702776_86723525_86479548_89800354_SinglePacketDesc)
        v11 = "true";
      else
        v11 = "false";
      v15 = 51;
      v16 = 2112;
      v17 = v3;
      v18 = 2080;
      v19 = v11;
      _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %@: fix84702776_86723525_86479548_89800354_SinglePacketDesc: %s", (uint8_t *)&v12, 0x26u);
    }
    goto LABEL_19;
  }
LABEL_20:

}

void sub_18EE5A19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t clientParamToFixedParam(int a1)
{
  uint64_t result;

  result = 0;
  if (a1 > 1999)
  {
    if (a1 <= 2009)
    {
      if (a1 == 2000)
      {
        return 330;
      }
      else if (a1 == 2001)
      {
        return 331;
      }
    }
    else
    {
      switch(a1)
      {
        case 2010:
          return 333;
        case 2011:
          return 334;
        case 2012:
          return 335;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 1000:
        return 330;
      case 1001:
        return 331;
      case 1010:
        return 333;
      case 1011:
        return 334;
      case 1012:
        return 335;
      case 1013:
        result = 336;
        break;
      case 1015:
        result = 332;
        break;
      case 1016:
        result = 337;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t AudioFormatProperty_ChannelLayoutName(const AudioChannelLayout *a1, const __CFString **a2, uint64_t a3, const __CFString *a4)
{
  signed int mChannelLayoutTag;
  __CFBundle *v7;
  int8x8_t mChannelBitmap;
  int8x8_t v9;
  __int32 v10;
  AudioChannelLayout *p_mChannelLabel;
  AudioChannelLabel v12;
  uint64_t v13;
  AudioChannelLayout *v14;
  int8x8_t v15;
  unsigned int v17;
  const __CFString *v18;
  void *v19;
  const __CFString *v20;
  AudioChannelLayout v21;
  unsigned int v22;
  AudioChannelLabel mChannelLabel;
  uint64_t v24;
  uint64_t v25;

  mChannelLayoutTag = a1->mChannelLayoutTag;
  v22 = a1->mChannelLayoutTag;
  v7 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v7 = (__CFBundle *)sAudioToolboxBundle;
    if (mChannelLayoutTag)
    {
LABEL_3:
      if (mChannelLayoutTag == 0x10000)
      {
        mChannelBitmap = (int8x8_t)a1->mChannelBitmap;
        v9 = vcnt_s8(mChannelBitmap);
        v9.i16[0] = vaddlv_u8((uint8x8_t)v9);
        v10 = v9.i32[0];
        if (v9.i32[0] == 1)
        {
          AudioFormatProperty_ChannelLayoutForBitmap(mChannelBitmap.i32[0], &v21, v9);
          v24 = 0;
          v25 = 0;
          mChannelLabel = v21.mChannelDescriptions[0].mChannelLabel;
          p_mChannelLabel = (AudioChannelLayout *)&mChannelLabel;
          return AudioFormatProperty_ChannelName((AudioChannelDescription *)p_mChannelLabel, a2, a3, a4);
        }
        mChannelLayoutTag = AudioFormatProperty_LayoutTagForBitmap(mChannelBitmap.i32[0]);
        v22 = mChannelLayoutTag;
        if (mChannelLayoutTag == 0x10000)
        {
          *(_QWORD *)&v21.mChannelLayoutTag = 0;
          CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v21, (20 * v10 + 12), 0);
          v14 = *(AudioChannelLayout **)&v21.mChannelLayoutTag;
          AudioFormatProperty_ChannelLayoutForBitmap(mChannelBitmap.i32[0], *(AudioChannelLayout **)&v21.mChannelLayoutTag, v15);
          v13 = AudioFormatProperty_ChannelLayoutNameFromDescriptions(v14, a2, 0);
          if (v14)
            free(v14);
          return v13;
        }
      }
      goto LABEL_16;
    }
  }
  else if (mChannelLayoutTag)
  {
    goto LABEL_3;
  }
  if (a1->mNumberChannelDescriptions == 1)
  {
    v12 = a1->mChannelDescriptions[0].mChannelLabel;
    *(_QWORD *)&v21.mChannelDescriptions[0].mChannelLabel = 0;
    *(_QWORD *)&v21.mChannelBitmap = 0;
    v21.mChannelLayoutTag = v12;
    p_mChannelLabel = &v21;
    return AudioFormatProperty_ChannelName((AudioChannelDescription *)p_mChannelLabel, a2, a3, a4);
  }
  if (AudioFormatProperty_TagForChannelLayout(a1, &v22))
    return AudioFormatProperty_ChannelLayoutNameFromDescriptions(a1, a2, 0);
  mChannelLayoutTag = v22;
LABEL_16:
  v17 = mChannelLayoutTag & 0xFFFF0000;
  if ((mChannelLayoutTag & 0xFFFF0000) == 0xBF0000)
  {
    v20 = CFSTR("High-Order Ambisonics, ACN/N3D");
  }
  else if (v17 == 12451840)
  {
    v20 = CFSTR("High-Order Ambisonics, ACN/SN3D");
  }
  else
  {
    if (v17 == 9633792)
    {
      if ((unsigned __int16)mChannelLayoutTag == 1)
        v18 = CFSTR("Discrete Channel");
      else
        v18 = CFSTR("Discrete Channels");
      v19 = ThreadSafeCFCopyLocalizedStringFromTableInBundle(v18, CFSTR("AudioChannelLayouts"), v7, a4);
      *a2 = CFStringCreateWithFormat(0, 0, CFSTR("%d %@"), (unsigned __int16)mChannelLayoutTag, v19);
      CFRelease(v19);
      return 0;
    }
    v13 = 560360820;
    if (mChannelLayoutTag <= 10420230)
    {
      if (mChannelLayoutTag > 8454151)
      {
        if (mChannelLayoutTag <= 9371654)
        {
          if (mChannelLayoutTag > 8912899)
          {
            if (mChannelLayoutTag <= 9109509)
            {
              switch(mChannelLayoutTag)
              {
                case 8912900:
                  v20 = CFSTR("3.1 (L R C LFE)");
                  break;
                case 8978437:
                  v20 = CFSTR("4.1 (L R C LFE Cs)");
                  break;
                case 9043973:
                  v20 = CFSTR("4.1 (L R Ls Rs LFE)");
                  break;
                default:
                  return v13;
              }
            }
            else if (mChannelLayoutTag > 9240581)
            {
              if (mChannelLayoutTag == 9240582)
              {
                v20 = CFSTR("6.0 (C L R Ls Rs Cs)");
              }
              else
              {
                if (mChannelLayoutTag != 9306119)
                  return v13;
                v20 = CFSTR("6.1 (C L R Ls Rs Cs LFE)");
              }
            }
            else if (mChannelLayoutTag == 9109510)
            {
              v20 = CFSTR("6.0 (L R Ls Rs C Cs)");
            }
            else
            {
              if (mChannelLayoutTag != 9175047)
                return v13;
              v20 = CFSTR("7.0 (L R Ls Rs C Rls Rrs)");
            }
          }
          else if (mChannelLayoutTag <= 8650755)
          {
            switch(mChannelLayoutTag)
            {
              case 8454152:
                v20 = CFSTR("7.1 (L R Ls Rs C LFE Lc Rc)");
                break;
              case 8519688:
                v20 = CFSTR("SMPTE DTV (L R C LFE Ls Rs Lt Rt)");
                break;
              case 8585219:
                v20 = CFSTR("3.0 (L R Cs)");
                break;
              default:
                return v13;
            }
          }
          else if (mChannelLayoutTag > 8781827)
          {
            if (mChannelLayoutTag == 8781828)
            {
              v20 = CFSTR("3.1 (L R LFE Cs)");
            }
            else
            {
              if (mChannelLayoutTag != 8847365)
                return v13;
              v20 = CFSTR("4.1 (L R LFE Ls Rs)");
            }
          }
          else if (mChannelLayoutTag == 8650756)
          {
            v20 = CFSTR("4.0 (L R Ls Rs)");
          }
          else
          {
            if (mChannelLayoutTag != 8716291)
              return v13;
            v20 = CFSTR("2.1 (L R LFE)");
          }
        }
        else if (mChannelLayoutTag <= 9895939)
        {
          if (mChannelLayoutTag <= 9568276)
          {
            switch(mChannelLayoutTag)
            {
              case 9371655:
                v20 = CFSTR("7.0 (C L R Ls Rs Rls Rrs)");
                break;
              case 9437192:
                v20 = CFSTR("8.0 (C L R Ls Rs Rls Rrs Cs)");
                break;
              case 9502736:
                v20 = CFSTR("TMH 10.2 (16 channel)");
                break;
              default:
                return v13;
            }
          }
          else if (mChannelLayoutTag > 9764865)
          {
            if (mChannelLayoutTag == 9764866)
            {
              v20 = CFSTR("1.1 (C LFE)");
            }
            else
            {
              if (mChannelLayoutTag != 9830403)
                return v13;
              v20 = CFSTR("3.0 (L C R)");
            }
          }
          else if (mChannelLayoutTag == 9568277)
          {
            v20 = CFSTR("TMH 10.2 (21 channel)");
          }
          else
          {
            if (mChannelLayoutTag != 9699335)
              return v13;
            v20 = CFSTR("7.0 (L R Ls Rs C Lc Rc)");
          }
        }
        else if (mChannelLayoutTag > 10158085)
        {
          if (mChannelLayoutTag > 10289158)
          {
            if (mChannelLayoutTag == 10289159)
            {
              v20 = CFSTR("6.1 (L C R Ls Rs LFE Cs)");
            }
            else
            {
              if (mChannelLayoutTag != 10354695)
                return v13;
              v20 = CFSTR("6.1 (L C R Ls Rs LFE Ts)");
            }
          }
          else if (mChannelLayoutTag == 10158086)
          {
            v20 = CFSTR("6.0 (L C R Ls Rs Cs)");
          }
          else
          {
            if (mChannelLayoutTag != 10223623)
              return v13;
            v20 = CFSTR("7.0 (L C R Ls Rs Rls Rrs)");
          }
        }
        else if (mChannelLayoutTag > 10027011)
        {
          if (mChannelLayoutTag == 10027012)
          {
            v20 = CFSTR("3.1 (L R Cs LFE)");
          }
          else
          {
            if (mChannelLayoutTag != 10092549)
              return v13;
            v20 = CFSTR("4.1 (L C R Cs LFE)");
          }
        }
        else if (mChannelLayoutTag == 9895940)
        {
          v20 = CFSTR("4.0 (L C R Cs)");
        }
        else
        {
          if (mChannelLayoutTag != 9961476)
            return v13;
          v20 = CFSTR("3.1 (L C R LFE)");
        }
      }
      else if (mChannelLayoutTag <= 7471106)
      {
        if (mChannelLayoutTag > 7012355)
        {
          if (mChannelLayoutTag <= 7208965)
          {
            switch(mChannelLayoutTag)
            {
              case 7012356:
                v20 = CFSTR("Ambisonic B Format (W X Y Z)");
                break;
              case 7077892:
                v20 = CFSTR("Quadraphonic");
                break;
              case 7143429:
                v20 = CFSTR("Pentagonal");
                break;
              default:
                return v13;
            }
          }
          else if (mChannelLayoutTag > 7340039)
          {
            if (mChannelLayoutTag == 7340040)
            {
              v20 = CFSTR("Cube");
            }
            else
            {
              if (mChannelLayoutTag != 7405571)
                return v13;
              v20 = CFSTR("3.0 (L R C)");
            }
          }
          else if (mChannelLayoutTag == 7208966)
          {
            v20 = CFSTR("Hexagonal");
          }
          else
          {
            if (mChannelLayoutTag != 7274504)
              return v13;
            v20 = CFSTR("Octagonal");
          }
        }
        else if (mChannelLayoutTag <= 6750209)
        {
          switch(mChannelLayoutTag)
          {
            case 6553601:
              v20 = CFSTR("Mono");
              break;
            case 6619138:
              v20 = CFSTR("Stereo (L R)");
              break;
            case 6684674:
              v20 = CFSTR("Stereo Headphones");
              break;
            default:
              return v13;
          }
        }
        else if (mChannelLayoutTag > 6881281)
        {
          if (mChannelLayoutTag == 6881282)
          {
            v20 = CFSTR("X-Y");
          }
          else
          {
            if (mChannelLayoutTag != 6946818)
              return v13;
            v20 = CFSTR("Binaural");
          }
        }
        else if (mChannelLayoutTag == 6750210)
        {
          v20 = CFSTR("Matrix Stereo (Lt Rt)");
        }
        else
        {
          if (mChannelLayoutTag != 6815746)
            return v13;
          v20 = CFSTR("Mid-Side");
        }
      }
      else if (mChannelLayoutTag <= 7929861)
      {
        if (mChannelLayoutTag <= 7667716)
        {
          switch(mChannelLayoutTag)
          {
            case 7471107:
              v20 = CFSTR("3.0 (C L R)");
              break;
            case 7536644:
              v20 = CFSTR("4.0 (L R C Cs)");
              break;
            case 7602180:
              v20 = CFSTR("4.0 (C L R Cs)");
              break;
            default:
              return v13;
          }
        }
        else if (mChannelLayoutTag > 7798788)
        {
          if (mChannelLayoutTag == 7798789)
          {
            v20 = CFSTR("5.0 (L C R Ls Rs)");
          }
          else
          {
            if (mChannelLayoutTag != 7864325)
              return v13;
            v20 = CFSTR("5.0 (C L R Ls Rs)");
          }
        }
        else if (mChannelLayoutTag == 7667717)
        {
          v20 = CFSTR("5.0 (L R C Ls Rs)");
        }
        else
        {
          if (mChannelLayoutTag != 7733253)
            return v13;
          v20 = CFSTR("5.0 (L R Ls Rs C)");
        }
      }
      else if (mChannelLayoutTag > 8192006)
      {
        if (mChannelLayoutTag > 8323079)
        {
          if (mChannelLayoutTag == 8323080)
          {
            v20 = CFSTR("7.1 (C Lc Rc L R Ls Rs LFE)");
          }
          else
          {
            if (mChannelLayoutTag != 8388616)
              return v13;
            v20 = CFSTR("7.1 (L R C LFE Ls Rs Rls Rrs)");
          }
        }
        else if (mChannelLayoutTag == 8192007)
        {
          v20 = CFSTR("6.1 (L R C LFE Ls Rs Cs)");
        }
        else
        {
          if (mChannelLayoutTag != 8257544)
            return v13;
          v20 = CFSTR("7.1 (L R C LFE Ls Rs Lc Rc)");
        }
      }
      else if (mChannelLayoutTag > 8060933)
      {
        if (mChannelLayoutTag == 8060934)
        {
          v20 = CFSTR("5.1 (L C R Ls Rs LFE)");
        }
        else
        {
          if (mChannelLayoutTag != 8126470)
            return v13;
          v20 = CFSTR("5.1 (C L R Ls Rs LFE)");
        }
      }
      else if (mChannelLayoutTag == 7929862)
      {
        v20 = CFSTR("5.1 (L R C LFE Ls Rs)");
      }
      else
      {
        if (mChannelLayoutTag != 7995398)
          return v13;
        v20 = CFSTR("5.1 (L R Ls Rs C LFE)");
      }
    }
    else if (mChannelLayoutTag <= 12320774)
    {
      if (mChannelLayoutTag <= 11337734)
      {
        if (mChannelLayoutTag > 10878983)
        {
          if (mChannelLayoutTag <= 11075588)
          {
            switch(mChannelLayoutTag)
            {
              case 10878984:
                v20 = CFSTR("7.1 (L C R Ls Rs LFE Cs Vhc)");
                break;
              case 10944520:
                v20 = CFSTR("7.1 (L C R Ls Rs LFE Ts Vhc)");
                break;
              case 11010052:
                v20 = CFSTR("3.1 (C L R LFE)");
                break;
              default:
                return v13;
            }
          }
          else if (mChannelLayoutTag > 11206661)
          {
            if (mChannelLayoutTag == 11206662)
            {
              v20 = CFSTR("6.0 (C L R Rls Rrs Ts)");
            }
            else
            {
              if (mChannelLayoutTag != 11272198)
                return v13;
              v20 = CFSTR("6.0 (C Cs L R Rls Rrs)");
            }
          }
          else if (mChannelLayoutTag == 11075589)
          {
            v20 = CFSTR("4.1 (C L R Cs LFE)");
          }
          else
          {
            if (mChannelLayoutTag != 11141126)
              return v13;
            v20 = CFSTR("6.0 (Lc Rc L R Ls Rs)");
          }
        }
        else if (mChannelLayoutTag <= 10616839)
        {
          switch(mChannelLayoutTag)
          {
            case 10420231:
              v20 = CFSTR("6.1 (L C R Ls Rs LFE Vhc)");
              break;
            case 10485768:
              v20 = CFSTR("7.1 (L C R Ls Rs LFE Rls Rrs)");
              break;
            case 10551304:
              v20 = CFSTR("7.1 (L C R Ls Rs LFE Lc Rc)");
              break;
            default:
              return v13;
          }
        }
        else if (mChannelLayoutTag > 10747911)
        {
          if (mChannelLayoutTag == 10747912)
          {
            v20 = CFSTR("7.1 (L C R Ls Rs LFE Vhl Vhr)");
          }
          else
          {
            if (mChannelLayoutTag != 10813448)
              return v13;
            v20 = CFSTR("7.1 (L C R Ls Rs LFE Cs Ts)");
          }
        }
        else if (mChannelLayoutTag == 10616840)
        {
          v20 = CFSTR("7.1 (L C R Ls Rs LFE Lsd Rsd)");
        }
        else
        {
          if (mChannelLayoutTag != 10682376)
            return v13;
          v20 = CFSTR("7.1 (L C R Ls Rs LFE Lw Rw)");
        }
      }
      else if (mChannelLayoutTag <= 11796488)
      {
        if (mChannelLayoutTag <= 11534342)
        {
          switch(mChannelLayoutTag)
          {
            case 11337735:
              v20 = CFSTR("6.1 (Lc Rc L R Ls Rs LFE)");
              break;
            case 11403271:
              v20 = CFSTR("6.1 (C L R Rls Rrs Ts LFE)");
              break;
            case 11468807:
              v20 = CFSTR("6.1 (C Cs L R Rls Rrs LFE)");
              break;
            default:
              return v13;
          }
        }
        else if (mChannelLayoutTag > 11665415)
        {
          if (mChannelLayoutTag == 11665416)
          {
            v20 = CFSTR("8.0 (Lc Rc L R Ls Rs Rls Rrs)");
          }
          else
          {
            if (mChannelLayoutTag != 11730952)
              return v13;
            v20 = CFSTR("8.0 (Lc C Rc L R Ls Cs Rs)");
          }
        }
        else if (mChannelLayoutTag == 11534343)
        {
          v20 = CFSTR("7.1 (Lc C Rc L R Ls Rs)");
        }
        else
        {
          if (mChannelLayoutTag != 11599880)
            return v13;
          v20 = CFSTR("7.1 (Lc C Rc L R Ls Rs LFE)");
        }
      }
      else if (mChannelLayoutTag > 12058631)
      {
        if (mChannelLayoutTag > 12189700)
        {
          if (mChannelLayoutTag == 12189701)
          {
            v20 = CFSTR("5.0 (L R C Rls Rrs)");
          }
          else
          {
            if (mChannelLayoutTag != 12255238)
              return v13;
            v20 = CFSTR("5.1 (L R C LFE Rls Rrs)");
          }
        }
        else if (mChannelLayoutTag == 12058632)
        {
          v20 = CFSTR("7.1 (C L R Ls Rs LFE Vhl Vhr)");
        }
        else
        {
          if (mChannelLayoutTag != 12124164)
            return v13;
          v20 = CFSTR("4.0 (L R Rls Rrs)");
        }
      }
      else if (mChannelLayoutTag > 11927558)
      {
        if (mChannelLayoutTag == 11927559)
        {
          v20 = CFSTR("6.1 (C L R Ls Rs LFE Cs)");
        }
        else
        {
          if (mChannelLayoutTag != 11993096)
            return v13;
          v20 = CFSTR("7.1 (C L R Ls Rs Rls Rrs LFE)");
        }
      }
      else if (mChannelLayoutTag == 11796489)
      {
        v20 = CFSTR("8.1 (Lc Rc L R Ls Rs Rls Rrs LFE)");
      }
      else
      {
        if (mChannelLayoutTag != 11862025)
          return v13;
        v20 = CFSTR("8.1 (Lc C Rc L R Ls Cs Rs LFE)");
      }
    }
    else if (mChannelLayoutTag > 13434887)
    {
      if (mChannelLayoutTag <= 13893636)
      {
        if (mChannelLayoutTag <= 13631499)
        {
          switch(mChannelLayoutTag)
          {
            case 13434888:
              v20 = CFSTR("7.1 (L R C LFE Ls Rs Vhl Vhr)");
              break;
            case 13500428:
              v20 = CFSTR("10.2 (L R C LFE2 Rls Rrs LFE3 Lss Rss Vhl Vhr Ctr)");
              break;
            case 13565962:
              v20 = CFSTR("9.1 (L R C LFE Ls Rs Vhl Vhr Lts Rts)");
              break;
            default:
              return v13;
          }
        }
        else if (mChannelLayoutTag > 13762571)
        {
          if (mChannelLayoutTag == 13762572)
          {
            v20 = CFSTR("11.1 (L R C LFE Rls Rrs Lss Rss Vhl Vhr Ltr Rtr)");
          }
          else
          {
            if (mChannelLayoutTag != 13828110)
              return v13;
            v20 = CFSTR("13.1 (L R C LFE Rls Rrs Lss Rss Vhl Vhr Ltr Rtr Leos Reos)");
          }
        }
        else if (mChannelLayoutTag == 13631500)
        {
          v20 = CFSTR("11.1 (L R C LFE Ls Rs Vhl Vhr Vhc Lts Rts Ts)");
        }
        else
        {
          if (mChannelLayoutTag != 13697038)
            return v13;
          v20 = CFSTR("13.1 (L R C LFE Ls Rs Lbs Rbs Vhl Vhr Vhc Lts Rts Ts)");
        }
      }
      else if (mChannelLayoutTag > 14155780)
      {
        if (mChannelLayoutTag > 14286854)
        {
          if (mChannelLayoutTag == 14286855)
          {
            v20 = CFSTR("6.1 (L R Ls Rs C Cs LFE)");
          }
          else
          {
            if (mChannelLayoutTag != 14352392)
              return v13;
            v20 = CFSTR("7.1 (L R Rls Rrs Ls Rs C LFE)");
          }
        }
        else if (mChannelLayoutTag == 14155781)
        {
          v20 = CFSTR("5.0 (L R Rls Rrs C)");
        }
        else
        {
          if (mChannelLayoutTag != 14221318)
            return v13;
          v20 = CFSTR("5.1 (L R Rls Rrs C LFE)");
        }
      }
      else if (mChannelLayoutTag > 14024710)
      {
        if (mChannelLayoutTag == 14024711)
        {
          v20 = CFSTR("6.1 (L C R Ls Rs Cs LFE)");
        }
        else
        {
          if (mChannelLayoutTag != 14090248)
            return v13;
          v20 = CFSTR("7.1 (L C R Ls Rs Rls Rrs LFE)");
        }
      }
      else if (mChannelLayoutTag == 13893637)
      {
        v20 = CFSTR("5.0 (L C R Rls Rrs)");
      }
      else
      {
        if (mChannelLayoutTag != 13959174)
          return v13;
        v20 = CFSTR("5.1 (L C R Rls Rrs LFE)");
      }
    }
    else if (mChannelLayoutTag <= 12910595)
    {
      if (mChannelLayoutTag <= 12648463)
      {
        switch(mChannelLayoutTag)
        {
          case 12320775:
            v20 = CFSTR("6.1 (L R C LFE Cs Ls Rs)");
            break;
          case 12386312:
            v20 = CFSTR("7.1 (L R C LFE Rls Rrs Ls Rs)");
            break;
          case 12582924:
            v20 = CFSTR("7.1.4 (L R C LFE Ls Rs Rls Rrs Vhl Vhr Ltr Rtr)");
            break;
          default:
            return v13;
        }
      }
      else if (mChannelLayoutTag > 12779529)
      {
        if (mChannelLayoutTag == 12779530)
        {
          v20 = CFSTR("5.1.4 (L R C LFE Ls Rs Vhl Vhr Ltr Rtr)");
        }
        else
        {
          if (mChannelLayoutTag != 12845066)
            return v13;
          v20 = CFSTR("7.1.2 (L R C LFE Ls Rs Rls Rrs Ltm Rtm)");
        }
      }
      else if (mChannelLayoutTag == 12648464)
      {
        v20 = CFSTR("9.1.6 (L R C LFE Ls Rs Rls Rrs Lw Rw Vhl Vhr Ltm Rtm Ltr Rtr)");
      }
      else
      {
        if (mChannelLayoutTag != 12713992)
          return v13;
        v20 = CFSTR("5.1.2 (L R C LFE Ls Rs Ltm Rtm)");
      }
    }
    else if (mChannelLayoutTag > 13172743)
    {
      if (mChannelLayoutTag > 13303821)
      {
        if (mChannelLayoutTag == 13303822)
        {
          v20 = CFSTR("7.1.6 (L R Rls Rrs Ls Rs C LFE Vhl Vhr Ltm Rtm Ltr Rtr)");
        }
        else
        {
          if (mChannelLayoutTag != 13369368)
            return v13;
          v20 = CFSTR("22.2 (Lw Rw C LFE2 Rls Rrs L R Cs LFE3 Lss Rss Vhl Vhr Vhc Ts Ltr Rtr Ltm Rtm Ctr Cb Lb Rb)");
        }
      }
      else if (mChannelLayoutTag == 13172744)
      {
        v20 = CFSTR("7.1 (L R Ls Rs Rls Rrs C LFE)");
      }
      else
      {
        if (mChannelLayoutTag != 13238284)
          return v13;
        v20 = CFSTR("7.1.4 (L R Rls Rrs Ls Rs C LFE Vhl Vhr Ltr Rtr)");
      }
    }
    else if (mChannelLayoutTag > 13041670)
    {
      if (mChannelLayoutTag == 13041671)
      {
        v20 = CFSTR("6.1 (L R Ls Rs Cs C LFE)");
      }
      else
      {
        if (mChannelLayoutTag != 13107207)
          return v13;
        v20 = CFSTR("6.1 (L C R Ls Cs Rs LFE)");
      }
    }
    else if (mChannelLayoutTag == 12910596)
    {
      v20 = CFSTR("4.0 (L R Cs C)");
    }
    else
    {
      if (mChannelLayoutTag != 12976134)
        return v13;
      v20 = CFSTR("6.0 (L R Ls Rs Cs C)");
    }
  }
  v13 = 0;
  *a2 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v20, CFSTR("AudioChannelLayouts"), v7, a4);
  return v13;
}

void sub_18EE5B4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12)
    free(a12);
  _Unwind_Resume(exception_object);
}

const __CFString *AudioFormatProperty_FormatCategoryName(const AudioStreamBasicDescription *a1, const __CFString **a2, uint64_t a3, const __CFString *a4)
{
  __CFBundle *v6;
  signed int mFormatID;
  const __CFString *v8;
  BOOL v9;
  int v10;
  const __CFString *result;

  v6 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v6 = (__CFBundle *)sAudioToolboxBundle;
  }
  mFormatID = a1->mFormatID;
  v8 = CFSTR("Dolby Atmos");
  if (mFormatID > 1902324530)
  {
    v9 = mFormatID == 1902324531;
    v10 = 2053319475;
  }
  else
  {
    v9 = mFormatID == 1700997939;
    v10 = 1885547315;
  }
  if (!v9 && mFormatID != v10)
  {
    if (a1->mChannelsPerFrame <= 2)
      v8 = CFSTR("Stereo");
    else
      v8 = CFSTR("Multichannel");
  }
  result = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v8, CFSTR("FormatNames"), v6, a4);
  *a2 = result;
  return result;
}

uint64_t AudioFormatProperty_ChannelShortName(int a1, const __CFString **a2, uint64_t a3, const __CFString *a4)
{
  __CFBundle *v6;
  const __CFAllocator *v7;
  CFMutableStringRef Mutable;
  const __CFString *v9;
  const __CFString *v10;
  uint64_t result;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  char __str[16];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v6 = (__CFBundle *)sAudioToolboxBundle;
  }
  if ((a1 & 0xFFFF0000) == 0x10000)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    v10 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Discrete"), CFSTR("AudioChannelLabels"), v6, v9);
    snprintf(__str, 0x10uLL, "-%u", (unsigned __int16)a1);
    CFStringAppendCString(Mutable, __str, 0x8000100u);
    CFStringInsert(Mutable, 0, v10);
    *a2 = CFStringCreateCopy(v7, Mutable);
    CFRelease(Mutable);
    CFRelease(v10);
    return 0;
  }
  else
  {
    result = 560360820;
    if (a1 > 199)
    {
      if (a1 > 300)
      {
        switch(a1)
        {
          case 301:
            v12 = CFSTR("phoneL");
            goto LABEL_73;
          case 302:
            v12 = CFSTR("phoneR");
            goto LABEL_73;
          case 303:
            return result;
          case 304:
            v12 = CFSTR("Click");
            goto LABEL_73;
          case 305:
            v12 = CFSTR("Lang");
            goto LABEL_73;
          default:
            if (a1 == 400)
            {
              v12 = CFSTR("Discrete");
              v13 = CFSTR("AudioChannelLabels");
            }
            else
            {
              if (a1 != 99999)
                return result;
              v12 = CFSTR("AAAAA - NOTE");
LABEL_73:
              v13 = CFSTR("AudioChannelShortLabels");
            }
            v14 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v12, v13, v6, a4);
            result = 0;
            *a2 = v14;
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 200:
            v12 = CFSTR("W");
            goto LABEL_73;
          case 201:
          case 206:
            v12 = CFSTR("X");
            goto LABEL_73;
          case 202:
          case 207:
            v12 = CFSTR("Y");
            goto LABEL_73;
          case 203:
            v12 = CFSTR("Z");
            goto LABEL_73;
          case 204:
            v12 = CFSTR("Mid");
            goto LABEL_73;
          case 205:
            v12 = CFSTR("Side");
            goto LABEL_73;
          default:
            return result;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case -1:
          v12 = CFSTR("?");
          goto LABEL_73;
        case 0:
          v12 = CFSTR("_");
          goto LABEL_73;
        case 1:
          v12 = CFSTR("L");
          goto LABEL_73;
        case 2:
          v12 = CFSTR("R");
          goto LABEL_73;
        case 3:
          v12 = CFSTR("C");
          goto LABEL_73;
        case 4:
          v12 = CFSTR("LFE");
          goto LABEL_73;
        case 5:
          v12 = CFSTR("Ls");
          goto LABEL_73;
        case 6:
          v12 = CFSTR("Rs");
          goto LABEL_73;
        case 7:
          v12 = CFSTR("Lc");
          goto LABEL_73;
        case 8:
          v12 = CFSTR("Rc");
          goto LABEL_73;
        case 9:
          v12 = CFSTR("Cs");
          goto LABEL_73;
        case 10:
          v12 = CFSTR("Lsd");
          goto LABEL_73;
        case 11:
          v12 = CFSTR("Rsd");
          goto LABEL_73;
        case 12:
          v12 = CFSTR("Ts");
          goto LABEL_73;
        case 13:
          v12 = CFSTR("Vhl");
          goto LABEL_73;
        case 14:
          v12 = CFSTR("Vhc");
          goto LABEL_73;
        case 15:
          v12 = CFSTR("Vhr");
          goto LABEL_73;
        case 16:
          v12 = CFSTR("Tbl");
          goto LABEL_73;
        case 17:
          v12 = CFSTR("Tbc");
          goto LABEL_73;
        case 18:
          v12 = CFSTR("Tbr");
          goto LABEL_73;
        case 33:
          v12 = CFSTR("Rls");
          goto LABEL_73;
        case 34:
          v12 = CFSTR("Rrs");
          goto LABEL_73;
        case 35:
          v12 = CFSTR("Lw");
          goto LABEL_73;
        case 36:
          v12 = CFSTR("Rw");
          goto LABEL_73;
        case 37:
          v12 = CFSTR("LFE2");
          goto LABEL_73;
        case 38:
          v12 = CFSTR("Lt");
          goto LABEL_73;
        case 39:
          v12 = CFSTR("Rt");
          goto LABEL_73;
        case 40:
          v12 = CFSTR("HI");
          goto LABEL_73;
        case 41:
          v12 = CFSTR("VI-N");
          goto LABEL_73;
        case 42:
          v12 = CFSTR("Mono");
          goto LABEL_73;
        case 43:
          v12 = CFSTR("Dlg");
          goto LABEL_73;
        case 44:
          v12 = CFSTR("Csd");
          goto LABEL_73;
        case 45:
          v12 = CFSTR("Haptic");
          goto LABEL_73;
        case 49:
          v12 = CFSTR("Ltm");
          goto LABEL_73;
        case 51:
          v12 = CFSTR("Rtm");
          goto LABEL_73;
        case 52:
          v12 = CFSTR("Ltr");
          goto LABEL_73;
        case 53:
          v12 = CFSTR("Ctr");
          goto LABEL_73;
        case 54:
          v12 = CFSTR("Rtr");
          goto LABEL_73;
        case 55:
          v12 = CFSTR("Lss");
          goto LABEL_73;
        case 56:
          v12 = CFSTR("Rss");
          goto LABEL_73;
        case 57:
          v12 = CFSTR("Lb");
          goto LABEL_73;
        case 58:
          v12 = CFSTR("Rb");
          goto LABEL_73;
        case 59:
          v12 = CFSTR("Cb");
          goto LABEL_73;
        case 60:
          v12 = CFSTR("Lts");
          goto LABEL_73;
        case 61:
          v12 = CFSTR("Rts");
          goto LABEL_73;
        case 62:
          v12 = CFSTR("LFE3");
          goto LABEL_73;
        case 63:
          v12 = CFSTR("Lbs");
          goto LABEL_73;
        case 64:
          v12 = CFSTR("Rbs");
          goto LABEL_73;
        case 65:
          v12 = CFSTR("Leos");
          goto LABEL_73;
        case 66:
          v12 = CFSTR("Reos");
          goto LABEL_73;
        default:
          return result;
      }
    }
  }
  return result;
}

void *ThreadSafeCFCopyLocalizedStringFromTableInBundle(const __CFString *a1, const __CFString *a2, __CFBundle *a3, const __CFString *a4)
{
  void *v7;
  void *v8;
  char v10;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v10);
  if (a3)
    v7 = (void *)CFBundleCopyLocalizedString(a3, a1, a1, a2);
  else
    v7 = (void *)CFRetain(a1);
  v8 = v7;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v10);
  return v8;
}

void sub_18EE5BAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool_AP::AudioMetadataMemoryPool_AP(AudioMetadataMemoryPool_AP *this)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  int64x2_t v16;
  _QWORD *v17;
  uint64_t v18;
  int64x2_t v19;
  char *v20;
  char *v21;

  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = (char *)this + 16;
  v21 = (char *)this + 16;
  v3 = (char *)operator new(0x8000uLL);
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v3 + 0x8000;
  v20 = 0;
  v18 = 0;
  v19 = 0uLL;
  std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v18);
  v5 = *(_QWORD **)this;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v6 = (uint64_t)v4 - *(_QWORD *)this;
  if ((unint64_t)v6 >> 15)
  {
    if (v6 != 0x8000)
    {
      v17 = v5 + 4096;
      while (v4 != v17)
      {
        v4 -= 2;
        std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v4);
      }
      *((_QWORD *)this + 1) = v17;
    }
  }
  else
  {
    v7 = 2048 - (v6 >> 4);
    v8 = *(char **)v2;
    if (v7 <= (uint64_t)(*(_QWORD *)v2 - (_QWORD)v4) >> 4)
    {
      bzero(*((void **)this + 1), 16 * v7);
      *((_QWORD *)this + 1) = &v4[2 * v7];
    }
    else
    {
      v9 = (v8 - (char *)v5) >> 3;
      if (v9 <= 0x800)
        v9 = 2048;
      if ((unint64_t)(v8 - (char *)v5) >= 0x7FFFFFFFFFFFFFF0)
        v10 = 0xFFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      v21 = v2;
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
      v12 = &v11[16 * (v6 >> 4)];
      v13 = &v11[16 * v10];
      v20 = v13;
      bzero(v12, 16 * v7);
      v14 = &v12[16 * v7];
      v19.i64[1] = (uint64_t)v14;
      if (v4 == v5)
      {
        v16 = vdupq_n_s64((unint64_t)v4);
      }
      else
      {
        do
        {
          v15 = *((_OWORD *)v4 - 1);
          v4 -= 2;
          *((_OWORD *)v12 - 1) = v15;
          v12 -= 16;
          *v4 = 0;
          v4[1] = 0;
        }
        while (v4 != v5);
        v16 = *(int64x2_t *)this;
        v14 = (char *)v19.i64[1];
        v13 = v20;
        v8 = (char *)*((_QWORD *)this + 2);
      }
      *(_QWORD *)this = v12;
      *((_QWORD *)this + 1) = v14;
      v19 = v16;
      *((_QWORD *)this + 2) = v13;
      v20 = v8;
      v18 = v16.i64[0];
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v18);
    }
  }
}

void sub_18EE5BCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  void **v9;

  a9 = v9 + 3;
  std::vector<std::pair<BOOL,std::shared_ptr<unsigned char []>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = v9;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void DSPGraph::Interpreter::parseNamedFormatCommand(DSPGraph::Interpreter *this, const char **a2)
{
  __int128 v4;
  __int128 v5[2];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  AudioStreamBasicDescription v9;

  memset(&v9, 0, 24);
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)&v9) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8, "parseNamedFormatCommand");
    std::string::basic_string[abi:ne180100]<0>(&v7, "named format : expected name.");
    DSPGraph::ThrowException(1886548769, v5, 1178, &v8, &v7);
  }
  v6 = 0u;
  memset(v5, 0, sizeof(v5));
  DWORD2(v6) = 1;
  if ((DSPGraph::Interpreter::parseFormat((DSPGraph *)a2, (uint64_t)v5) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "parseNamedFormatCommand");
    std::string::basic_string[abi:ne180100]<0>(&v4, "named format : expected format.");
    DSPGraph::ThrowException(1886548769, &v8, 1183, &v7, &v4);
  }
  DSPGraph::Graph::setFormat(*((_QWORD *)this + 1), &v9, (DSPGraph *)v5);
  if (SHIBYTE(v9.mFramesPerPacket) < 0)
    operator delete(*(void **)&v9.mSampleRate);
}

void sub_18EE5BDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (*(char *)(v31 - 41) < 0)
    operator delete(*(void **)(v31 - 64));
  if (*(char *)(v31 - 17) < 0)
    operator delete(*(void **)(v31 - 40));
  _Unwind_Resume(exception_object);
}

char *DSPGraph::Graph::setFormat(uint64_t a1, AudioStreamBasicDescription *a2, DSPGraph *this)
{
  uint64_t *v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (*(_BYTE *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "setFormat");
    std::string::basic_string[abi:ne180100]<0>(&v11, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v13, 2996, &v12, &v11);
  }
  if (*((_DWORD *)this + 2) == 1718773105 && *((_DWORD *)this + 8) != 64)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "setFormat");
    std::string::basic_string[abi:ne180100]<0>(&v11, "frequency domain format should be 64 bits.");
    DSPGraph::ThrowException(1718449215, &v13, 3000, &v12, &v11);
  }
  if (*(double *)this != floor(*(double *)this))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "setFormat");
    std::string::basic_string[abi:ne180100]<0>(&v11, "only integer sample rates are supported.");
    DSPGraph::ThrowException(1718449215, &v13, 3004, &v12, &v11);
  }
  if (!DSPGraph::MinimalSafetyCheck(this, a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "setFormat");
    std::string::basic_string[abi:ne180100]<0>(&v11, "format failed sanity check.");
    DSPGraph::ThrowException(1718449215, &v13, 3007, &v12, &v11);
  }
  v6 = (uint64_t *)(a1 + 600);
  *(_QWORD *)&v13 = a2;
  v7 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)a2, (__int128 **)&v13);
  v8 = *(_OWORD *)this;
  v9 = *((_OWORD *)this + 1);
  *(_OWORD *)(v7 + 68) = *(_OWORD *)((char *)this + 28);
  *(_OWORD *)(v7 + 56) = v9;
  *(_OWORD *)(v7 + 40) = v8;
  *(_QWORD *)&v13 = a2;
  return std::__hash_table<std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)a2, (__int128 **)&v13)+ 40;
}

void sub_18EE5C09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x58uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  v18 = a1 + 2;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 20) = 1;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = a1[1];
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v18;
          if (*v18)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = v18;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v13 = *v37;
LABEL_75:
    *v37 = v13;
    goto LABEL_76;
  }
  *(_QWORD *)v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v36 + 8 * v3) = v18;
  if (*(_QWORD *)v13)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_18EE5C534(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

BOOL DSPGraph::MinimalSafetyCheck(DSPGraph *this, const AudioStreamBasicDescription *a2)
{
  _BOOL8 result;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  _BOOL4 v9;

  result = 0;
  if (*(double *)this >= 0.0 && *(double *)this < 3000000.0)
  {
    v4 = *((_DWORD *)this + 4);
    if (v4 >= 0xF4240)
      return 0;
    v5 = *((_DWORD *)this + 5);
    if (v5 >= 0xF4240)
      return 0;
    v6 = *((_DWORD *)this + 6);
    if (v6 >= 0xF4240)
      return 0;
    result = 0;
    if ((*((_DWORD *)this + 7) - 1) > 0x3FF || *((_DWORD *)this + 8) > 0x400u)
      return result;
    v7 = *((_DWORD *)this + 2);
    if (!v7)
      return 0;
    v9 = v5 == 1 && v4 == v6;
    return v7 != 1819304813 || v9;
  }
  return result;
}

uint64_t writeCommand(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  int v9;
  unsigned int v11;
  void *__dst;
  size_t __n;
  void *v14;
  size_t v15;

  v4 = *a2;
  __dst = 0;
  LODWORD(__n) = 0;
  v14 = 0;
  v15 = 0;
  v11 = 0;
  v5 = HapticSharedMemoryWriter::reserveForWrite(a1, v4, (uint64_t)&__dst, &v11);
  if ((_DWORD)v5)
  {
    if (!__dst)
      __assert_rtn("write", "HapticSharedMemoryWriter.h", 134, "res.address0 != NULL");
    v6 = __n;
    if (!(_DWORD)__n)
      __assert_rtn("write", "HapticSharedMemoryWriter.h", 135, "res.size0 != 0");
    memcpy(__dst, a2, __n);
    v7 = v15;
    if (v14 && (_DWORD)v15)
    {
      memcpy(v14, (char *)a2 + v6, v15);
      v7 = 0;
      LODWORD(v15) = 0;
    }
    LODWORD(__n) = 0;
    v8 = *(_DWORD **)(a1 + 24);
    v9 = HIDWORD(v15) - v7;
    if (HIDWORD(v15) - v7 < 0)
      v9 += *v8;
    v8[1] = v9;
    __dmb(0xBu);
  }
  return v5;
}

uint64_t HapticSharedMemoryWriter::reserveForWrite(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  unsigned int *v5;
  unsigned int v7;
  uint64_t result;
  NSObject *v9;
  NSObject *v10;
  int i;
  uint64_t v13;
  int v14;
  unsigned int v15;
  id v16;
  NSObject *v17;
  id v18;
  unsigned int v19;
  unsigned int v20;
  id v21;
  const char *v22;
  NSObject *v23;
  os_log_type_t v24;
  signed int v25;
  _DWORD *v26;
  signed int v27;
  int v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  id v33;
  int v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  unsigned int v41;
  __int16 v42;
  unsigned int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((a2 & 3) != 0)
    __assert_rtn("reserveForWrite", "HapticSharedMemoryWriter.h", 25, "(inSize & 3) == 0");
  v5 = *(unsigned int **)(a1 + 24);
  if (!v5)
  {
    if (kHSHMScope)
    {
      v10 = *(id *)kHSHMScope;
      if (!v10)
      {
LABEL_23:
        result = 0;
        *a4 = 0;
        return result;
      }
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v34 = 136315650;
      v35 = "HapticSharedMemoryWriter.h";
      v36 = 1024;
      v37 = 29;
      v38 = 2080;
      v39 = "reserveForWrite";
      _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Cannot write to shared ring buffer (already deallocated?)!", (uint8_t *)&v34, 0x1Cu);
    }

    goto LABEL_23;
  }
  v7 = *v5;
  *a4 = *v5;
  if (!a2)
    return 0;
  if (v7 < a2)
  {
    if (kHSHMScope)
    {
      result = (uint64_t)*(id *)kHSHMScope;
      v9 = result;
      if (!result)
        return result;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v18 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v19 = *a4;
      v34 = 136316162;
      v35 = "HapticSharedMemoryWriter.h";
      v37 = 39;
      v38 = 2080;
      v36 = 1024;
      v39 = "reserveForWrite";
      v40 = 1024;
      v41 = a2;
      v42 = 1024;
      v43 = v19;
      _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s: WARNING: Command block size (%u) is larger than entire ring buffer (%u)", (uint8_t *)&v34, 0x28u);
    }

    return 0;
  }
  if (a2 < v7 >> 1)
  {
    for (i = -5; ; ++i)
    {
      v13 = (int)v5[1];
      v14 = v13 - v5[2];
      if (v14 < 0)
        v15 = ~v14;
      else
        v15 = *v5 + ~v14;
      if (v15 >= a2)
        goto LABEL_44;
      if (!i)
        break;
      usleep(0x1388u);
    }
    if (v14 < 0)
      v20 = ~v14;
    else
      v20 = *v5 + ~v14;
    if (v20 >= a2)
    {
LABEL_44:
      v27 = *v5;
      v26 = v5 + 4;
      v25 = v27;
      if ((int)(v13 + a2) >= v27)
        v28 = v25;
      else
        v28 = 0;
      v29 = v13 + a2 - v28;
      *(_DWORD *)(a3 + 28) = v29;
      *(_QWORD *)a3 = (char *)v26 + v13;
      if (v29 <= (int)v13)
      {
        v30 = v25 - v13;
        *(_DWORD *)(a3 + 8) = v30;
        v31 = a2 >= v30;
        v32 = a2 - v30;
        if (v32 != 0 && v31)
        {
          *(_QWORD *)(a3 + 16) = v26;
          *(_DWORD *)(a3 + 24) = v32;
        }
        return 1;
      }
      else
      {
        *(_DWORD *)(a3 + 8) = a2;
        *(_QWORD *)(a3 + 16) = 0;
        result = 1;
        *(_DWORD *)(a3 + 24) = 0;
      }
      return result;
    }
    if (kHSHMScope)
    {
      v17 = *(id *)kHSHMScope;
      if (!v17)
        goto LABEL_37;
    }
    else
    {
      v17 = MEMORY[0x1E0C81028];
      v33 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v34 = 136315650;
      v35 = "HapticSharedMemoryWriter.h";
      v36 = 1024;
      v37 = 50;
      v38 = 2080;
      v39 = "reserveForWrite";
      v22 = "%25s:%-5d %s: WARNING: Unable to wait for enough write space in ring buffer";
      v23 = v17;
      v24 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (!kHSHMScope)
  {
    v17 = MEMORY[0x1E0C81028];
    v21 = MEMORY[0x1E0C81028];
LABEL_34:
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v34 = 136315650;
      v35 = "HapticSharedMemoryWriter.h";
      v36 = 1024;
      v37 = 55;
      v38 = 2080;
      v39 = "reserveForWrite";
      v22 = "%25s:%-5d %s: WARNING: Not enough space in ring buffer";
      v23 = v17;
      v24 = OS_LOG_TYPE_DEBUG;
LABEL_36:
      _os_log_impl(&dword_18EE07000, v23, v24, v22, (uint8_t *)&v34, 0x1Cu);
    }
LABEL_37:

    return 0;
  }
  result = (uint64_t)*(id *)kHSHMScope;
  v17 = result;
  if (result)
    goto LABEL_34;
  return result;
}

OSStatus MusicDeviceStartNote(MusicDeviceComponent inUnit, MusicDeviceInstrumentID inInstrument, MusicDeviceGroupID inGroupID, NoteInstanceID *outNoteInstanceID, UInt32 inOffsetSampleFrame, const MusicDeviceNoteParams *inParams)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t (***v11)(_QWORD);
  uint64_t (***v12)(_QWORD);
  uint64_t (*v13)(uint64_t (**)(_QWORD), uint64_t, uint64_t, NoteInstanceID *, uint64_t, const MusicDeviceNoteParams *);

  if (!inUnit)
    return -50;
  v7 = *(_QWORD *)&inOffsetSampleFrame;
  v9 = *(_QWORD *)&inGroupID;
  v10 = *(_QWORD *)&inInstrument;
  v11 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(MusicDeviceComponent))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v11)
    return 560947818;
  v12 = v11;
  if (*(_WORD *)((**v11)(v11) + 38) != 24949)
    return -3000;
  v13 = *(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, uint64_t, NoteInstanceID *, uint64_t, const MusicDeviceNoteParams *))(*(_QWORD *)((**v12)(v12) + 112) + 176);
  if (v13)
    return v13(v12[3], v10, v9, outNoteInstanceID, v7, inParams);
  else
    return -4;
}

uint64_t AT::RingBuffer::Store(AT::RingBuffer *this, const AudioBufferList *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  size_t v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  size_t v41;
  size_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  void **p_mData;
  void *v48;
  unsigned int *v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  _DWORD *v58;
  unint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  unint64_t v63;
  size_t v64;
  uint64_t v65;
  _DWORD *v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  void **v73;
  void *v74;
  unsigned int *v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  void **v89;
  char *v90;
  unsigned int *v91;
  uint64_t v92;
  int v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  unsigned int **v104;
  unsigned int **v105;
  uint64_t (*v106)(unsigned int ***, uint64_t);
  int **v107;
  unsigned int *v108;
  unsigned int *v109;
  unsigned int v110;

  if (!a3)
    goto LABEL_69;
  v5 = *((_QWORD *)this + 6);
  if (*(_DWORD *)(v5 + 40) < a3)
  {
    AT::RingBufferErrorCategory::instance(this);
    return 3;
  }
  if (**(_DWORD **)(v5 + 64) != a2->mNumberBuffers)
  {
    AT::RingBufferErrorCategory::instance(this);
    return 4294967291;
  }
  v9 = a4 + a3;
  v10 = v5 + 176;
  v11 = (unsigned int *)(v5 + 944);
  v12 = atomic_load((unsigned int *)(v5 + 944));
  if (*(_QWORD *)(v5 + 176 + 24 * (v12 & 0x1F) + 8) > a4 || *(_BYTE *)(v5 + 948) && *(_BYTE *)(v5 + 949))
  {
    v13 = atomic_load(v11);
    v14 = v10 + 24 * (++v13 & 0x1F);
    *(_QWORD *)v14 = a4;
    *(_QWORD *)(v14 + 8) = a4;
    *(_DWORD *)(v14 + 16) = v13;
    atomic_store(v13, v11);
    *(_BYTE *)(v5 + 948) = 0;
  }
  else
  {
    v24 = (unsigned int *)(v5 + 944);
    v25 = atomic_load((unsigned int *)(v5 + 944));
    v26 = *(unsigned int *)(v5 + 40);
    if (v9 - *(_QWORD *)(v10 + 24 * (v25 & 0x1F)) > v26)
    {
      v27 = v9 - v26;
      v28 = atomic_load(v24);
      v29 = *(_QWORD *)(v10 + 24 * (v28 & 0x1F) + 8);
      v30 = atomic_load(v24);
      v31 = v30 + 1;
      v32 = v10 + 24 * (v31 & 0x1F);
      *(_QWORD *)v32 = v27;
      if (v27 <= v29)
        v27 = v29;
      *(_QWORD *)(v32 + 8) = v27;
      *(_DWORD *)(v32 + 16) = v31;
      atomic_store(v31, v24);
    }
  }
  v15 = atomic_load((unsigned int *)(v5 + 944));
  v16 = *(_QWORD *)(v10 + 24 * (v15 & 0x1F) + 8);
  v17 = *(int *)(v5 + 40);
  v18 = *(_DWORD *)(v5 + 48);
  if (v16 >= a4)
  {
    v20 = ((v17 & ((int)(a4 % v17) >> 31)) + (a4 % v17)) * v18;
    goto LABEL_29;
  }
  v102 = a4 + a3;
  v19 = ((v17 & ((int)(v16 % v17) >> 31)) + (v16 % v17)) * v18;
  v20 = ((v17 & ((int)(a4 % v17) >> 31)) + (a4 % v17)) * v18;
  v21 = *(_DWORD **)(v5 + 64);
  if (v19 >= v20)
  {
    if (*v21)
    {
      v101 = v5 + 176;
      v33 = 0;
      v34 = *(unsigned int *)(v5 + 52) - v19;
      v35 = 4;
      do
      {
        bzero((void *)(*(_QWORD *)&v21[v35] + v19), v34);
        ++v33;
        v35 += 4;
      }
      while (v33 < *v21);
      v36 = *(_DWORD **)(v5 + 64);
      if (*v36)
      {
        v37 = 0;
        v38 = 4;
        do
        {
          bzero(*(void **)&v36[v38], v20);
          ++v37;
          v38 += 4;
        }
        while (v37 < *v36);
      }
      goto LABEL_27;
    }
  }
  else if (*v21)
  {
    v101 = v5 + 176;
    v22 = 0;
    v23 = 4;
    do
    {
      bzero((void *)(*(_QWORD *)&v21[v23] + v19), v20 - v19);
      ++v22;
      v23 += 4;
    }
    while (v22 < *v21);
LABEL_27:
    v10 = v101;
    v9 = v102;
    goto LABEL_29;
  }
  v9 = a4 + a3;
LABEL_29:
  LODWORD(v39) = *(_DWORD *)(v5 + 40);
  v40 = v9 % (int)v39;
  v41 = ((v39 & (v40 >> 31)) + v40) * *(_DWORD *)(v5 + 48);
  v42 = v41 - v20;
  if (v41 > v20)
  {
    if (!*(_BYTE *)(v5 + 168))
    {
      v58 = *(_DWORD **)(v5 + 64);
      if (*v58)
      {
        v59 = 0;
        v60 = 4;
        do
        {
          memcpy((void *)(*(_QWORD *)&v58[v60] + v20), *(const void **)((char *)&a2->mNumberBuffers + v60 * 4), v42);
          ++v59;
          v60 += 4;
        }
        while (v59 < *v58);
      }
      goto LABEL_68;
    }
    v43 = *(unsigned int **)(v5 + 112);
    v44 = *v43;
    if ((_DWORD)v44)
    {
      v45 = *(_DWORD *)(v5 + 96) * a3;
      v46 = v43 + 4;
      p_mData = &a2->mBuffers[0].mData;
      do
      {
        v48 = *p_mData;
        p_mData += 2;
        *v46 = v48;
        *((_DWORD *)v46 - 1) = v45;
        v46 += 2;
        --v44;
      }
      while (v44);
    }
    v49 = *(unsigned int **)(v5 + 136);
    v50 = *v49;
    if ((_DWORD)v50)
    {
      v51 = *(_DWORD *)(v5 + 24) * a3;
      v52 = v49 + 4;
      v53 = (uint64_t *)(*(_QWORD *)(v5 + 64) + 16);
      do
      {
        v54 = *v53;
        v53 += 2;
        *v52 = v54 + v20;
        *((_DWORD *)v52 - 1) = v51;
        v52 += 2;
        --v50;
      }
      while (v50);
    }
    v55 = *(_QWORD *)(v5 + 160);
    v110 = a3;
    v108 = v49;
    v109 = v43;
    v103 = (int *)&v110;
    v104 = &v109;
    v105 = &v108;
    v106 = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertComplexBuffer::$_0>;
    v107 = &v103;
    goto LABEL_67;
  }
  if (!*(_BYTE *)(v5 + 168))
  {
    v61 = *(_DWORD **)(v5 + 64);
    if (*v61)
    {
      v62 = v10;
      v63 = 0;
      v64 = *(unsigned int *)(v5 + 52) - v20;
      v65 = 4;
      do
      {
        memcpy((void *)(*(_QWORD *)&v61[v65] + v20), *(const void **)((char *)&a2->mNumberBuffers + v65 * 4), v64);
        ++v63;
        v65 += 4;
      }
      while (v63 < *v61);
      v66 = *(_DWORD **)(v5 + 64);
      v10 = v62;
      if (*v66)
      {
        v67 = 0;
        v68 = 4;
        do
        {
          memcpy(*(void **)&v66[v68], (const void *)(*(_QWORD *)((char *)&a2->mNumberBuffers + v68 * 4) + v64), v41);
          ++v67;
          v68 += 4;
        }
        while (v67 < *v66);
      }
    }
    goto LABEL_68;
  }
  v56 = (v39 & ((int)(a4 % (int)v39) >> 31)) + a4 % (int)v39;
  v57 = v39 - v56;
  if ((_DWORD)v39 != v56)
  {
    v69 = *(unsigned int **)(v5 + 112);
    v70 = *v69;
    if ((_DWORD)v70)
    {
      v71 = *(_DWORD *)(v5 + 96) * v57;
      v72 = v69 + 4;
      v73 = &a2->mBuffers[0].mData;
      do
      {
        v74 = *v73;
        v73 += 2;
        *v72 = v74;
        *((_DWORD *)v72 - 1) = v71;
        v72 += 2;
        --v70;
      }
      while (v70);
    }
    v75 = *(unsigned int **)(v5 + 136);
    v76 = *v75;
    if ((_DWORD)v76)
    {
      v77 = *(_DWORD *)(v5 + 24) * v57;
      v78 = v75 + 4;
      v79 = (uint64_t *)(*(_QWORD *)(v5 + 64) + 16);
      do
      {
        v80 = *v79;
        v79 += 2;
        *v78 = v80 + v20;
        *((_DWORD *)v78 - 1) = v77;
        v78 += 2;
        --v76;
      }
      while (v76);
    }
    v81 = *(_QWORD *)(v5 + 160);
    v110 = v57;
    v108 = v75;
    v109 = v69;
    v103 = (int *)&v110;
    v104 = &v109;
    v105 = &v108;
    v106 = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertComplexBuffer::$_0>;
    v107 = &v103;
    with_resolved(v81, (uint64_t (**)(uint64_t, uint64_t))&v106);
    v39 = *(int *)(v5 + 40);
    v40 = v9 % v39;
  }
  v82 = (v39 & (v40 >> 31)) + v40;
  if (v82)
  {
    v83 = *(unsigned int **)(v5 + 112);
    v84 = *v83;
    if ((_DWORD)v84)
    {
      v85 = *(_DWORD *)(v5 + 96);
      v86 = v85 * v57;
      v87 = v85 * v82;
      v88 = v83 + 4;
      v89 = &a2->mBuffers[0].mData;
      do
      {
        v90 = (char *)*v89;
        v89 += 2;
        *v88 = &v90[v86];
        *((_DWORD *)v88 - 1) = v87;
        v88 += 2;
        --v84;
      }
      while (v84);
    }
    v91 = *(unsigned int **)(v5 + 136);
    v92 = *v91;
    if ((_DWORD)v92)
    {
      v93 = *(_DWORD *)(v5 + 24) * v82;
      v94 = v91 + 4;
      v95 = (uint64_t *)(*(_QWORD *)(v5 + 64) + 16);
      do
      {
        v96 = *v95;
        v95 += 2;
        *v94 = v96;
        *((_DWORD *)v94 - 1) = v93;
        v94 += 2;
        --v92;
      }
      while (v92);
    }
    v55 = *(_QWORD *)(v5 + 160);
    v110 = v82;
    v108 = v91;
    v109 = v83;
    v103 = (int *)&v110;
    v104 = &v109;
    v105 = &v108;
    v106 = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertComplexBuffer::$_0>;
    v107 = &v103;
LABEL_67:
    with_resolved(v55, (uint64_t (**)(uint64_t, uint64_t))&v106);
  }
LABEL_68:
  v97 = atomic_load((unsigned int *)(v5 + 944));
  v98 = *(_QWORD *)(v10 + 24 * (v97 & 0x1F));
  v99 = atomic_load((unsigned int *)(v5 + 944));
  v100 = v10 + 24 * (++v99 & 0x1F);
  *(_QWORD *)v100 = v98;
  *(_QWORD *)(v100 + 8) = v9;
  *(_DWORD *)(v100 + 16) = v99;
  atomic_store(v99, (unsigned int *)(v5 + 944));
LABEL_69:
  std::system_category();
  return 0;
}

double AIFFAudioFormat::New(AIFFAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 80) = 0x4149464600000001;
  *(_QWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 96) = -1;
  *(_WORD *)(v1 + 100) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0x100000000;
  *(_DWORD *)(v1 + 136) = 65792;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  result = 2.51689377e93;
  *(_OWORD *)(v1 + 168) = xmmword_18F1170A0;
  *(_DWORD *)(v1 + 184) = 16;
  *(_WORD *)(v1 + 188) = 258;
  *(_QWORD *)v1 = &off_1E2902A50;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 448) = 0;
  *(_QWORD *)(v1 + 472) = 0;
  *(_QWORD *)(v1 + 480) = 0;
  *(_QWORD *)(v1 + 464) = 0;
  return result;
}

uint64_t acv2::ConverterRegistry::GetAvailableEncodeSampleRates(acv2::ConverterRegistry *this, unsigned int a2, unsigned int *a3, unsigned int *a4, void *a5)
{
  uint64_t FactoryBySpecifier;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  FactoryBySpecifier = acv2::ConverterRegistry::FindFactoryBySpecifier(this, a2, a3);
  if (FactoryBySpecifier)
    return (*(uint64_t (**)(uint64_t, unsigned int *, void *))(*(_QWORD *)FactoryBySpecifier + 88))(FactoryBySpecifier, a4, a5);
  AudioConverterLog();
  v9 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v10 = 136315394;
    v11 = "ConverterFactory.cpp";
    v12 = 1024;
    v13 = 613;
    _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for encode sample rates", (uint8_t *)&v10, 0x12u);
  }
  return 1718449215;
}

uint64_t acv2::ConverterRegistry::FindFactoryBySpecifier(acv2::ConverterRegistry *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v3;

  switch(a2)
  {
    case 0u:
      return 0;
    case 0x28u:
      v3 = a3[2];
      return (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 16))(this, 1819304813, v3, 0, 0);
    case 4u:
      v3 = *a3;
      return (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 16))(this, 1819304813, v3, 0, 0);
  }
  if (a2 % 0xC)
    return 0;
  else
    return (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, _QWORD, unsigned int *, _QWORD))(*(_QWORD *)this + 16))(this, 1819304813, a3[1], a3, a2 / 0xC);
}

void DSPGraph::Graph::addProperty(uint64_t a1, unsigned int a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  void **v8;
  int v9;
  void *v11;
  char v12;
  char *v13;
  char *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  size_t v29;
  void *v30;
  char *v31;
  __int128 v32;
  char *v33;
  unsigned __int8 v34;
  char v35;
  void *__src;
  char *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  unsigned int v41;

  v41 = a2;
  if (*(_BYTE *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v40, "addProperty");
    std::string::basic_string[abi:ne180100]<0>(&v39, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v32, 2217, &v40, &v39);
  }
  LODWORD(v32) = a2;
  std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100]((uint64_t)&v32 + 8, a3);
  v35 = a4;
  v37 = 0;
  v38 = 0;
  __src = 0;
  v7 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 560, a2, &v41);
  *((_DWORD *)v7 + 6) = v32;
  v8 = (void **)(v7 + 4);
  v9 = *((unsigned __int8 *)v7 + 56);
  if (v9 == v34)
  {
    if (v8 != (void **)((char *)&v32 + 8) && v9 != 0)
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v8, *((char **)&v32 + 1), v33, (unint64_t)&v33[-*((_QWORD *)&v32 + 1)]);
  }
  else
  {
    if (*((_BYTE *)v7 + 56))
    {
      v11 = *v8;
      if (v11)
      {
        v7[5] = (uint64_t)v11;
        operator delete(v11);
      }
      v12 = 0;
    }
    else
    {
      *v8 = 0;
      v7[5] = 0;
      v7[6] = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v8, *((const void **)&v32 + 1), (uint64_t)v33, (size_t)&v33[-*((_QWORD *)&v32 + 1)]);
      v12 = 1;
    }
    *((_BYTE *)v7 + 56) = v12;
  }
  *((_BYTE *)v7 + 64) = v35;
  v13 = (char *)__src;
  if (v7 + 3 != (uint64_t *)&v32)
  {
    v14 = (char *)v7[9];
    v15 = v37;
    v16 = v37 - (_BYTE *)__src;
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (_BYTE *)__src) >> 3);
    v18 = v7[11];
    if (0xAAAAAAAAAAAAAAABLL * ((v18 - (uint64_t)v14) >> 3) >= v17)
    {
      v25 = v7[10];
      v22 = v7 + 10;
      v24 = (char *)v25;
      v26 = v25 - (_QWORD)v14;
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v14) >> 3);
      if (v27 < v17)
      {
        v28 = (char *)__src + 24 * v27;
        if (v24 != v14)
        {
          memmove(v14, __src, v26 - 4);
          v14 = (char *)*v22;
        }
        v16 = v15 - v28;
        if (v15 == v28)
          goto LABEL_34;
        v29 = v16 - 4;
        v30 = v14;
        v31 = v28;
        goto LABEL_33;
      }
    }
    else
    {
      if (v14)
      {
        v7[10] = (uint64_t)v14;
        operator delete(v14);
        v18 = 0;
        v7[9] = 0;
        v7[10] = 0;
        v7[11] = 0;
      }
      if (v17 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_42;
      v19 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 3);
      v20 = 2 * v19;
      if (2 * v19 <= v17)
        v20 = v17;
      v21 = v19 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v20;
      if (v21 > 0xAAAAAAAAAAAAAAALL)
LABEL_42:
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v21);
      v7[10] = (uint64_t)v14;
      v22 = v7 + 10;
      *(v22 - 1) = (uint64_t)v14;
      v22[1] = (uint64_t)&v14[24 * v23];
    }
    if (v15 == v13)
    {
LABEL_34:
      *v22 = (uint64_t)&v14[v16];
      v13 = (char *)__src;
      goto LABEL_35;
    }
    v29 = v16 - 4;
    v30 = v14;
    v31 = v13;
LABEL_33:
    memmove(v30, v31, v29);
    goto LABEL_34;
  }
LABEL_35:
  if (v13)
  {
    v37 = v13;
    operator delete(v13);
  }
  if (v34)
  {
    if (*((_QWORD *)&v32 + 1))
    {
      v33 = (char *)*((_QWORD *)&v32 + 1);
      operator delete(*((void **)&v32 + 1));
    }
  }
}

void sub_18EE5D6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x60uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *((_QWORD *)v13 + 11) = 0;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = (int8x8_t)v18;
  else
    prime = (int8x8_t)v17;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = operator new(8 * *(_QWORD *)&prime);
  v21 = *(void **)a1;
  *(_QWORD *)a1 = v20;
  if (v21)
    operator delete(v21);
  v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
  while (*(_QWORD *)&prime != v22);
  v23 = (_QWORD *)*v12;
  if (*v12)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&prime)
        v24 %= *(_QWORD *)&prime;
    }
    else
    {
      v24 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
    v29 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *v23 = *v29;
          *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
          v29 = v23;
        }
        v30 = v24;
LABEL_56:
        v23 = v29;
        v29 = (_QWORD *)*v29;
        v24 = v30;
      }
      while (v29);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_18EE5DB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_AudioFormatInfoFromESDS(unsigned __int8 *a1, AudioFormatID a2, unsigned int *a3, AudioStreamBasicDescription *a4)
{
  int v8;
  char v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t v14;
  double v15;
  AudioFormatID mFormatID;
  unsigned int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int v25;
  _QWORD v26[2];
  uint64_t v27;
  unsigned int v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  char v33[296];
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD v39[276];
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v37 = 0;
  v38 = 0;
  v39[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v39);
  v41 = 0u;
  v40 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)&v34);
  v28 = 0;
  v26[0] = a1;
  v26[1] = &a1[a2];
  v27 = 0;
  if ((a1 & 3) != 0 && a2)
  {
    v8 = 0;
    v9 = (_BYTE)a1 + 1;
    v10 = -8;
    v11 = a1;
    do
    {
      v12 = v10;
      v13 = *v11++;
      v8 = v13 | (v8 << 8);
      v10 += 8;
      if ((v9 & 3) == 0)
        break;
      ++v9;
    }
    while (v11 < &a1[a2]);
    v26[0] = v11;
    LODWORD(v27) = v8 << (24 - v10);
    HIDWORD(v27) = v12 + 16;
  }
  v14 = MP4AudioESDS::Deserialize((uint64_t)v33, (uint64_t)v26, (int *)&v28, 2);
  if ((_DWORD)v14)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v30 = "AudioFormatCookies.cpp";
      v31 = 1024;
      v32 = 49;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to parse ESDS", buf, 0x12u);
    }
    goto LABEL_18;
  }
  if (!a3 || *a3 < 0x28)
  {
    v14 = 0;
    goto LABEL_18;
  }
  v14 = 1718449215;
  if (!DecoderConfigDescr::MakeStreamDescription((DecoderConfigDescr *)&v34, a4, v15))
  {
    mFormatID = a4->mFormatID;
    if (mFormatID)
    {
      if (*a3 <= 0x37)
      {
        if (mFormatID == 1987015266)
          goto LABEL_18;
        v17 = 40;
LABEL_38:
        v14 = 0;
        *a3 = v17;
        goto LABEL_18;
      }
      if (mFormatID == 1987015266)
      {
        v14 = AudioFormatProperty_FormatInfo(v36, &a1[v28], a4);
        if ((_DWORD)v14)
          goto LABEL_18;
        mFormatID = a4->mFormatID;
      }
      *(_QWORD *)&a4[1].mSampleRate = a1;
      a4[1].mFormatID = a2;
      if (mFormatID == 1987015266)
      {
        *(_QWORD *)&a4[1].mSampleRate = &a1[v28];
        v25 = v36;
      }
      else
      {
        if ((v35 - 105) < 0xFFFFFFFD)
        {
LABEL_37:
          v17 = 56;
          goto LABEL_38;
        }
        v25 = 0;
        a4[1].mSampleRate = 0.0;
      }
      a4[1].mFormatID = v25;
      goto LABEL_37;
    }
  }
LABEL_18:
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v14;
}

void sub_18EE5DE50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x618]);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1 + 1488);
  _Unwind_Resume(a1);
}

uint64_t DecoderConfigDescr::MakeStreamDescription(DecoderConfigDescr *this, AudioStreamBasicDescription *a2, double a3)
{
  int v5;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned __int16 *v12;
  UInt32 v13;
  UInt32 v14;
  uint64_t v15;
  UInt32 FramesPerPacket;
  unint64_t v17;
  UInt32 v18;
  int v19;
  AudioFormatID v20;
  AudioFormatID v21;
  uint64_t v22;
  _DWORD *v23;

  v5 = *((_DWORD *)this + 2);
  if ((v5 - 64) <= 0x28 && ((1 << (v5 - 64)) & 0x1C000000001) != 0)
  {
    v7 = *((_DWORD *)this + 10);
    v8 = v7 > 0x2C;
    v9 = (1 << v7) & 0x1480609A007ELL;
    if (!v8 && v9 != 0)
      return DecoderConfigDescr::GetBaseLevelASBD(this, a2);
    LODWORD(a3) = *((_DWORD *)this + 11);
    a2->mSampleRate = (double)*(unint64_t *)&a3;
    a2->mBytesPerPacket = 0;
    FramesPerPacket = DecoderConfigDescr::GetFramesPerPacket(this);
    a2->mFormatFlags = 0;
    a2->mFramesPerPacket = FramesPerPacket;
    a2->mBytesPerFrame = 0;
    *(_QWORD *)&a2->mBitsPerChannel = 0;
    v18 = *((_DWORD *)this + 12);
    if (v18 == 7)
      v18 = 8;
    a2->mChannelsPerFrame = v18;
    v19 = *((_DWORD *)this + 10);
    if ((v19 - 39) >= 0xFFFFFFFE)
    {
      if (v19 == 37)
        v21 = 1936487267;
      else
        v21 = 1936487278;
      a2->mFormatID = v21;
      v22 = *((_QWORD *)this + 149);
      if (v22)
        a2->mFormatFlags = *(unsigned __int8 *)(v22 + 1116) >> 5;
      goto LABEL_33;
    }
    if (((v19 - 8) & 0xFFFFFFEF) != 0)
    {
      if (v19 == 21 || v19 == 7)
      {
        v20 = 1953986161;
      }
      else
      {
        if (((v19 - 9) & 0xFFFFFFEF) != 0)
        {
          switch(v19)
          {
            case ' ':
              v20 = 778924081;
              goto LABEL_32;
            case '!':
              v20 = 778924082;
              goto LABEL_32;
            case '"':
              v20 = 1836069684;
              goto LABEL_32;
            case '$':
              a2->mFormatID = 1634497332;
              v23 = (_DWORD *)*((_QWORD *)this + 149);
              if (v23)
              {
                LODWORD(v17) = v23[2];
                a2->mSampleRate = (double)v17;
                v18 = v23[4];
                a2->mFormatFlags = v23[5];
                a2->mChannelsPerFrame = v18;
              }
              break;
            default:
              a2->mFormatID = 0;
              break;
          }
          goto LABEL_33;
        }
        v20 = 1752594531;
      }
    }
    else
    {
      v20 = 1667591280;
    }
LABEL_32:
    a2->mFormatID = v20;
LABEL_33:
    if (!v18)
      a2->mChannelsPerFrame = MP4AudioProgramConfig::TotalNumChannels((DecoderConfigDescr *)((char *)this + 88));
    return 0;
  }
  if (((v5 - 105) & 0xFFFFFFFD) == 0)
  {
    v15 = *((_QWORD *)this + 151);
    if (v15)
      return MPEGPacketParser_ASBDFromMPEGPacket((unsigned int *)(v15 + 8), 4u, a2);
LABEL_18:
    a2->mFormatID = 0;
    return 0;
  }
  if (v5 != 225)
  {
    if ((v5 - 223) >= 0xFFFFFFFE)
    {
      bzero(a2, 0x28uLL);
      a2->mFormatID = 1987015266;
    }
    return 0;
  }
  v12 = (unsigned __int16 *)*((_QWORD *)this + 151);
  if (!v12)
    goto LABEL_18;
  a2->mFormatID = 1365470320;
  LOWORD(a3) = v12[63];
  a2->mSampleRate = (double)*(unint64_t *)&a3;
  a2->mChannelsPerFrame = 1;
  v13 = v12[61];
  v14 = v12[62];
  a2->mBytesPerPacket = v13;
  a2->mFramesPerPacket = v14;
  return 0;
}

uint64_t MP4AudioESDS::Deserialize(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v8;
  int v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  NSObject *v28;
  const char *v29;
  uint64_t result;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  int *v54;
  int v55;
  int v56;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_DWORD *)a2;
  v10 = *(_DWORD *)(a2 + 20);
  v56 = 0;
  v11 = (unsigned int *)(a1 + 296);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 0;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)(a1 + 296));
  v12 = *(_DWORD *)(a2 + 16);
  v13 = HIBYTE(v12);
  v14 = *(_DWORD *)(a2 + 20) - 8;
  *(_DWORD *)(a2 + 20) = v14;
  if (v14 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v16 = *(_DWORD *)(a2 + 16);
    v17 = *(_DWORD *)(a2 + 20);
    v13 |= v16 >> v17;
    v14 = v17 + 32;
    *(_DWORD *)(a2 + 20) = v17 + 32;
    if (v17 == -32)
      v15 = 0;
    else
      v15 = v16 << -(char)v17;
  }
  else
  {
    v15 = v12 << 8;
  }
  *(_DWORD *)(a2 + 16) = v15;
  *(_DWORD *)(a1 + 4) = v13;
  if (v13 == 3)
  {
    v18 = 0;
    v19 = v8 - v9;
    v20 = -1;
    while (1)
    {
      v21 = HIBYTE(v15);
      v14 -= 8;
      *(_DWORD *)(a2 + 20) = v14;
      if (v14 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v22 = *(_DWORD *)(a2 + 16);
        v23 = *(_DWORD *)(a2 + 20);
        v21 |= v22 >> v23;
        v14 = v23 + 32;
        *(_DWORD *)(a2 + 20) = v23 + 32;
        v15 = v23 == -32 ? 0 : v22 << -(char)v23;
      }
      else
      {
        v15 <<= 8;
      }
      *(_DWORD *)(a2 + 16) = v15;
      if (v20 == 4)
        break;
      v24 = v21 & 0x7F | (v18 << 7);
      ++v20;
      v18 = v24;
      if ((v21 & 0x80) == 0)
      {
        *(_DWORD *)(a1 + 8) = v24;
        if (v20 < 4)
        {
          *(_DWORD *)a1 = v20 + v24 + 2;
          v25 = HIWORD(v15);
          v26 = v14 - 16;
          *(_DWORD *)(a2 + 20) = v26;
          if (v26 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
            *(_QWORD *)a2 += 4;
            v31 = *(_DWORD *)(a2 + 16);
            v32 = *(_DWORD *)(a2 + 20);
            v25 |= v31 >> v32;
            *(_DWORD *)(a2 + 20) = v32 + 32;
            if (v32 == -32)
              v27 = 0;
            else
              v27 = v31 << -(char)v32;
          }
          else
          {
            v27 = v15 << 16;
          }
          *(_DWORD *)(a2 + 16) = v27;
          *(_DWORD *)(a1 + 12) = v25;
          *(_DWORD *)(a1 + 16) = TBitstreamReader<unsigned int>::GetBit(a2);
          *(_DWORD *)(a1 + 20) = TBitstreamReader<unsigned int>::GetBit(a2);
          TBitstreamReader<unsigned int>::SkipBits(a2, 1);
          v33 = *(_DWORD *)(a2 + 16);
          v34 = v33 >> 27;
          v35 = *(_DWORD *)(a2 + 20) - 5;
          *(_DWORD *)(a2 + 20) = v35;
          if (v35 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
            *(_QWORD *)a2 += 4;
            v37 = *(_DWORD *)(a2 + 16);
            v38 = *(_DWORD *)(a2 + 20);
            v34 |= v37 >> v38;
            v35 = v38 + 32;
            *(_DWORD *)(a2 + 20) = v38 + 32;
            if (v38 == -32)
              v36 = 0;
            else
              v36 = v37 << -(char)v38;
          }
          else
          {
            v36 = 32 * v33;
          }
          *(_DWORD *)(a2 + 16) = v36;
          *(_DWORD *)(a1 + 24) = v34;
          if (*(_DWORD *)(a1 + 16))
          {
            v39 = HIWORD(v36);
            v35 -= 16;
            *(_DWORD *)(a2 + 20) = v35;
            if (v35 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(_QWORD *)a2 += 4;
              v40 = *(_DWORD *)(a2 + 16);
              v41 = *(_DWORD *)(a2 + 20);
              v39 |= v40 >> v41;
              v35 = v41 + 32;
              *(_DWORD *)(a2 + 20) = v41 + 32;
              if (v41 == -32)
                v36 = 0;
              else
                v36 = v40 << -(char)v41;
            }
            else
            {
              v36 <<= 16;
            }
            *(_DWORD *)(a2 + 16) = v36;
            *(_DWORD *)(a1 + 28) = v39;
          }
          if (*(_DWORD *)(a1 + 20))
          {
            v42 = HIBYTE(v36);
            v35 -= 8;
            *(_DWORD *)(a2 + 20) = v35;
            if (v35 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(_QWORD *)a2 += 4;
              v44 = *(_DWORD *)(a2 + 16);
              v45 = *(_DWORD *)(a2 + 20);
              v42 |= v44 >> v45;
              v35 = v45 + 32;
              *(_DWORD *)(a2 + 20) = v45 + 32;
              v43 = v45 == -32 ? 0 : v44 << -(char)v45;
            }
            else
            {
              v43 = v36 << 8;
            }
            *(_DWORD *)(a2 + 16) = v43;
            *(_DWORD *)(a1 + 32) = v42;
            if (v42)
            {
              v46 = 0;
              do
              {
                v47 = *(_DWORD *)(a2 + 16);
                v48 = HIBYTE(v47);
                v49 = *(_DWORD *)(a2 + 20) - 8;
                *(_DWORD *)(a2 + 20) = v49;
                if (v49 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                  *(_QWORD *)a2 += 4;
                  v51 = *(_DWORD *)(a2 + 16);
                  v52 = *(_DWORD *)(a2 + 20);
                  v48 |= v51 >> v52;
                  *(_DWORD *)(a2 + 20) = v52 + 32;
                  if (v52 == -32)
                    v50 = 0;
                  else
                    v50 = v51 << -(char)v52;
                }
                else
                {
                  v50 = v47 << 8;
                }
                *(_DWORD *)(a2 + 16) = v50;
                *(_BYTE *)(a1 + 36 + v46++) = v48;
              }
              while (v46 < *(unsigned int *)(a1 + 32));
              v35 = *(_DWORD *)(a2 + 20);
            }
          }
          v53 = (v10 - v35 + 8 * (*(_DWORD *)a2 - *(_DWORD *)(a2 + 8) + v19)) / 8;
          if ((a4 - 1) < 2)
          {
            v54 = &v56;
            v55 = a4;
LABEL_62:
            result = DecoderConfigDescr::Deserialize(v11, a2, v54, v55);
            if (a3 && a4)
            {
              if (v54)
                *a3 = *v54 + v53;
            }
            return result;
          }
          if (!a4)
          {
            v54 = 0;
            if (a3)
              *a3 = v53;
            v55 = 1;
            goto LABEL_62;
          }
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return 4294967090;
          *(_DWORD *)buf = 136315394;
          v58 = "ACMP4BitStreams.cpp";
          v59 = 1024;
          v60 = 3193;
          v28 = MEMORY[0x1E0C81028];
          v29 = "%25s:%-5d  MP4AudioESDS::Deserialize: the requested byte offset is not supported";
LABEL_23:
          _os_log_impl(&dword_18EE07000, v28, OS_LOG_TYPE_ERROR, v29, buf, 0x12u);
          return 4294967090;
        }
LABEL_21:
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return 4294967090;
        *(_DWORD *)buf = 136315394;
        v58 = "ACMP4BitStreams.cpp";
        v59 = 1024;
        v60 = 3143;
        v28 = MEMORY[0x1E0C81028];
        v29 = "%25s:%-5d  MP4AudioESDS::Deserialize: the ES_Descriptor tag size is incorrect";
        goto LABEL_23;
      }
    }
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_21;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v58 = "ACMP4BitStreams.cpp";
    v59 = 1024;
    v60 = 3139;
    v28 = MEMORY[0x1E0C81028];
    v29 = "%25s:%-5d  MP4AudioESDS::Deserialize: the ES_Descriptor tag is incorrect";
    goto LABEL_23;
  }
  return 4294967090;
}

uint64_t MP4GASpecificConfig::Deserialize(uint64_t a1, uint64_t a2)
{
  int Bit;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  void *v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t result;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  const char *v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 20) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
  Bit = TBitstreamReader<unsigned int>::GetBit(a2);
  *(_BYTE *)(a1 + 21) = Bit != 0;
  if (Bit)
  {
    v5 = *(_DWORD *)(a2 + 16);
    v6 = v5 >> 18;
    v7 = *(_DWORD *)(a2 + 20) - 14;
    *(_DWORD *)(a2 + 20) = v7;
    if (v7 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v9 = *(_DWORD *)(a2 + 16);
      v10 = *(_DWORD *)(a2 + 20);
      v6 |= v9 >> v10;
      *(_DWORD *)(a2 + 20) = v10 + 32;
      if (v10 == -32)
        v8 = 0;
      else
        v8 = v9 << -(char)v10;
    }
    else
    {
      v8 = v5 << 14;
    }
    *(_DWORD *)(a2 + 16) = v8;
    *(_DWORD *)(a1 + 24) = v6;
  }
  *(_BYTE *)(a1 + 28) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
  v11 = (void *)(a1 + 32);
  if (*(_DWORD *)(a1 + 16))
  {
    bzero(v11, 0x44CuLL);
    v12 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 36) = 1;
    *(_DWORD *)(a1 + 40) = v12;
LABEL_11:
    v13 = *(_DWORD *)(a1 + 8);
    if (v13 == 20 || v13 == 6)
    {
      v14 = *(_DWORD *)(a2 + 16);
      v15 = v14 >> 29;
      v16 = *(_DWORD *)(a2 + 20) - 3;
      *(_DWORD *)(a2 + 20) = v16;
      if (v16 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v18 = *(_DWORD *)(a2 + 16);
        v19 = *(_DWORD *)(a2 + 20);
        v15 |= v18 >> v19;
        *(_DWORD *)(a2 + 20) = v19 + 32;
        if (v19 == -32)
          v17 = 0;
        else
          v17 = v18 << -(char)v19;
      }
      else
      {
        v17 = 8 * v14;
      }
      *(_DWORD *)(a2 + 16) = v17;
      *(_DWORD *)(a1 + 1132) = v15;
    }
    if (!*(_BYTE *)(a1 + 28))
      return 0;
    v21 = *(_DWORD *)(a1 + 8);
    if (v21 != 22)
      goto LABEL_37;
    v22 = *(_DWORD *)(a2 + 16);
    v23 = v22 >> 27;
    v24 = *(_DWORD *)(a2 + 20) - 5;
    *(_DWORD *)(a2 + 20) = v24;
    if (v24 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      v26 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v26;
      v27 = *(_DWORD *)(a2 + 16);
      v28 = *(_DWORD *)(a2 + 20);
      v23 |= v27 >> v28;
      v24 = v28 + 32;
      if (v28 == -32)
      {
        v29 = 0;
        *(_DWORD *)(a1 + 1136) = v23;
        *(_QWORD *)(a2 + 16) = 0xFFFFFFF500000000;
        goto LABEL_33;
      }
      v25 = v27 << -(char)v28;
    }
    else
    {
      v25 = 32 * v22;
    }
    *(_DWORD *)(a2 + 16) = v25;
    *(_DWORD *)(a1 + 1136) = v23;
    v29 = v25 >> 21;
    v30 = v24 - 11;
    *(_DWORD *)(a2 + 20) = v30;
    if (v30 >= 0)
    {
      v31 = v25 << 11;
LABEL_36:
      *(_DWORD *)(a2 + 16) = v31;
      *(_DWORD *)(a1 + 1140) = v29;
      v21 = *(_DWORD *)(a1 + 8);
LABEL_37:
      if (v21 == 23 || v21 == 17)
      {
        v34 = *(_DWORD *)(a2 + 16);
        v35 = v34 >> 29;
        v36 = *(_DWORD *)(a2 + 20) - 3;
        *(_DWORD *)(a2 + 20) = v36;
        if (v36 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(_QWORD *)a2 += 4;
          v38 = *(_DWORD *)(a2 + 16);
          v39 = *(_DWORD *)(a2 + 20);
          v35 |= v38 >> v39;
          *(_DWORD *)(a2 + 20) = v39 + 32;
          if (v39 == -32)
            v37 = 0;
          else
            v37 = v38 << -(char)v39;
        }
        else
        {
          v37 = 8 * v34;
        }
        *(_DWORD *)(a2 + 16) = v37;
        *(_DWORD *)(a1 + 1144) = 2 * v35;
      }
      v40 = TBitstreamReader<unsigned int>::GetBit(a2);
      result = 0;
      *(_DWORD *)(a1 + 1144) |= v40;
      return result;
    }
    v26 = *(unsigned int **)a2;
LABEL_33:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v26);
    *(_QWORD *)a2 += 4;
    v32 = *(_DWORD *)(a2 + 16);
    v33 = *(_DWORD *)(a2 + 20);
    v29 |= v32 >> v33;
    *(_DWORD *)(a2 + 20) = v33 + 32;
    if (v33 == -32)
      v31 = 0;
    else
      v31 = v32 << -(char)v33;
    goto LABEL_36;
  }
  MP4AudioProgramConfig::Deserialize((unsigned int *)v11, a2);
  if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a1 + 12))
    goto LABEL_11;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v41 = 136315394;
    v42 = "MP4GASpecificConfig.cpp";
    v43 = 1024;
    v44 = 35;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4GASpecificConfig::Deserialize: the Program sampleRate is incorrect", (uint8_t *)&v41, 0x12u);
  }
  return 4294967090;
}

uint64_t TBitstreamReader<unsigned int>::GetBit(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = v2 >> 31;
  v4 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v4;
  if (v4 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
    *(_QWORD *)a1 += 4;
    v6 = *(_DWORD *)(a1 + 16);
    v7 = *(_DWORD *)(a1 + 20);
    v3 |= v6 >> v7;
    *(_DWORD *)(a1 + 20) = v7 + 32;
    if (v7 == -32)
      v5 = 0;
    else
      v5 = v6 << -(char)v7;
  }
  else
  {
    v5 = 2 * v2;
  }
  *(_DWORD *)(a1 + 16) = v5;
  return v3;
}

uint64_t DecoderConfigDescr::Deserialize(unsigned int *a1, uint64_t a2, int *a3, int a4)
{
  int v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  NSObject *v28;
  const char *v29;
  uint64_t result;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int *v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  BOOL v52;
  int v53;
  int v54;
  int *v55;
  int v56;
  uint64_t ObjectTypeSpecific;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(unsigned int **)a2;
  v62 = 0;
  v10 = *(_DWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 20);
  v12 = HIBYTE(v10);
  v13 = v11 - 8;
  *(_DWORD *)(a2 + 20) = v11 - 8;
  if (v11 - 8 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v9);
    v15 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v15;
    v16 = *(_DWORD *)(a2 + 16);
    v17 = *(_DWORD *)(a2 + 20);
    v12 |= v16 >> v17;
    v13 = v17 + 32;
    *(_DWORD *)(a2 + 20) = v17 + 32;
    if (v17 == -32)
      v14 = 0;
    else
      v14 = v16 << -(char)v17;
  }
  else
  {
    v14 = v10 << 8;
    v15 = v9;
  }
  *(_DWORD *)(a2 + 16) = v14;
  *a1 = v12;
  if (v12 != 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v64 = "ACMP4BitStreams.cpp";
      v65 = 1024;
      v66 = 1982;
      v28 = MEMORY[0x1E0C81028];
      v29 = "%25s:%-5d  DecoderConfigDescr::Deserialize: the DecoderConfigDescriptor tag is incorrect";
      goto LABEL_23;
    }
    return 4294967090;
  }
  v18 = 0;
  v19 = v8 - (_DWORD)v9;
  v20 = -1;
  do
  {
    v21 = HIBYTE(v14);
    v13 -= 8;
    *(_DWORD *)(a2 + 20) = v13;
    if (v13 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v15);
      v15 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v15;
      v22 = *(_DWORD *)(a2 + 16);
      v23 = *(_DWORD *)(a2 + 20);
      v21 |= v22 >> v23;
      v13 = v23 + 32;
      *(_DWORD *)(a2 + 20) = v23 + 32;
      if (v23 == -32)
        v14 = 0;
      else
        v14 = v22 << -(char)v23;
    }
    else
    {
      v14 <<= 8;
    }
    *(_DWORD *)(a2 + 16) = v14;
    if (v20 == 4)
    {
      a1[1] = 0;
      goto LABEL_21;
    }
    v24 = v21 & 0x7F | (v18 << 7);
    ++v20;
    v18 = v24;
  }
  while ((v21 & 0x80) != 0);
  a1[1] = v24;
  if (v20 >= 4)
  {
LABEL_21:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294967090;
    *(_DWORD *)buf = 136315394;
    v64 = "ACMP4BitStreams.cpp";
    v65 = 1024;
    v66 = 1986;
    v28 = MEMORY[0x1E0C81028];
    v29 = "%25s:%-5d  DecoderConfigDescr::Deserialize: the Decoder config descriptor tag size is incorrect";
    goto LABEL_23;
  }
  v25 = HIBYTE(v14);
  v26 = v13 - 8;
  *(_DWORD *)(a2 + 20) = v26;
  if (v26 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v15);
    v15 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v15;
    v31 = *(_DWORD *)(a2 + 16);
    v32 = *(_DWORD *)(a2 + 20);
    v25 |= v31 >> v32;
    *(_DWORD *)(a2 + 20) = v32 + 32;
    if (v32 == -32)
      v27 = 0;
    else
      v27 = v31 << -(char)v32;
  }
  else
  {
    v27 = v14 << 8;
  }
  *(_DWORD *)(a2 + 16) = v27;
  a1[2] = v25;
  if (v25 == 64
    || ((v25 - 105) & 0xFFFFFFFD) == 0
    || v25 - 102 < 3
    || v25 - 221 <= 4 && ((1 << (v25 + 35)) & 0x13) != 0)
  {
    v33 = *(_DWORD *)(a2 + 16);
    v34 = v33 >> 26;
    v35 = *(_DWORD *)(a2 + 20) - 6;
    *(_DWORD *)(a2 + 20) = v35;
    if (v35 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v15);
      *(_QWORD *)a2 += 4;
      v37 = *(_DWORD *)(a2 + 16);
      v38 = *(_DWORD *)(a2 + 20);
      v34 |= v37 >> v38;
      *(_DWORD *)(a2 + 20) = v38 + 32;
      if (v38 == -32)
        v36 = 0;
      else
        v36 = v37 << -(char)v38;
    }
    else
    {
      v36 = v33 << 6;
    }
    *(_DWORD *)(a2 + 16) = v36;
    a1[3] = v34;
    if (v34 != 5)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294967090;
      *(_DWORD *)buf = 136315394;
      v64 = "ACMP4BitStreams.cpp";
      v65 = 1024;
      v66 = 1999;
      v28 = MEMORY[0x1E0C81028];
      v29 = "%25s:%-5d  DecoderConfigDescr::Deserialize: the stream type is incorrect";
      goto LABEL_23;
    }
    a1[4] = TBitstreamReader<unsigned int>::GetBit(a2);
    TBitstreamReader<unsigned int>::SkipBits(a2, 1);
    v40 = *(_DWORD *)(a2 + 16);
    v39 = *(_DWORD *)(a2 + 20);
    v41 = v40 >> 8;
    *(_DWORD *)(a2 + 20) = v39 - 24;
    if (v39 - 24 >= 0)
    {
      v42 = v40 << 24;
      *(_DWORD *)(a2 + 16) = v40 << 24;
      v43 = *(unsigned int **)a2;
      v44 = v39 - 56;
      goto LABEL_46;
    }
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v43 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v43;
    v45 = *(_DWORD *)(a2 + 16);
    v44 = *(_DWORD *)(a2 + 20);
    v41 |= v45 >> v44;
    if (v44 == -32)
    {
      v42 = 0;
      a1[5] = v41;
      *(_QWORD *)(a2 + 16) = 0xFFFFFFE000000000;
      goto LABEL_49;
    }
    v42 = v45 << -(char)v44;
    *(_DWORD *)(a2 + 16) = v42;
LABEL_46:
    a1[5] = v41;
    *(_DWORD *)(a2 + 20) = v44;
    v46 = v42;
    if (v44 < 0)
    {
LABEL_49:
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v43);
      v43 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v43;
      v47 = *(_DWORD *)(a2 + 16);
      v48 = *(_DWORD *)(a2 + 20);
      v46 = (v47 >> v48) | v42;
      v44 = v48 + 32;
      if (v48 != -32)
      {
        v42 = v47 << -(char)v48;
        *(_DWORD *)(a2 + 16) = v42;
        goto LABEL_51;
      }
      v42 = 0;
      a1[6] = v46;
      *(_QWORD *)(a2 + 16) = 0xFFFFFFE000000000;
LABEL_54:
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v43);
      v51 = *(_DWORD *)(a2 + 16);
      v50 = *(_DWORD *)(a2 + 20);
      v49 = v50 + 32;
      v52 = v50 == -32;
      v43 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v43;
      v42 |= v51 >> v50;
      v53 = v51 << -(char)v50;
      if (v52)
        v53 = 0;
      *(_DWORD *)(a2 + 16) = v53;
      *(_DWORD *)(a2 + 20) = v49;
    }
    else
    {
LABEL_51:
      a1[6] = v46;
      v49 = v44 - 32;
      *(_DWORD *)(a2 + 20) = v49;
      if (v49 < 0)
        goto LABEL_54;
    }
    a1[7] = v42;
    v54 = (v11 - v49 + 8 * ((int)v43 - *(_DWORD *)(a2 + 8) + v19)) / 8;
    if (a4 == 2)
    {
      v55 = &v62;
      goto LABEL_62;
    }
    if (a4 != 1)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294967090;
      *(_DWORD *)buf = 136315394;
      v64 = "ACMP4BitStreams.cpp";
      v65 = 1024;
      v66 = 2029;
      v28 = MEMORY[0x1E0C81028];
      v29 = "%25s:%-5d  DecoderConfigDescr::Deserialize: the requested byte offset is not supported";
      goto LABEL_23;
    }
    v55 = 0;
    if (a3)
      *a3 = v54;
LABEL_62:
    v56 = a1[2];
    if (v56 == 64)
    {
      result = DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload((uint64_t)a1, a2, v55);
      goto LABEL_81;
    }
    ObjectTypeSpecific = MP4OTISpecificBase::MakeObjectTypeSpecific(v56);
    std::shared_ptr<MP4OTISpecificBase>::reset[abi:ne180100]<MP4OTISpecificBase,void>((uint64_t)(a1 + 302), ObjectTypeSpecific);
    v58 = a1[2];
    if (((v58 - 105) & 0xFFFFFFFD) == 0)
    {
      result = DecoderConfigDescr::DeserializeMPEG1Or2AudioDecoderSpecificPayload((uint64_t)a1, a2, v55);
      goto LABEL_81;
    }
    if (v58 - 105 < 0xFFFFFFFD)
    {
      if (v58 == 225)
      {
        result = DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload((uint64_t)a1, a2, v55);
      }
      else if (v58 - 223 >= 0xFFFFFFFE)
      {
        result = DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload((uint64_t)a1, a2, v55);
      }
      else
      {
        result = 0;
      }
      goto LABEL_81;
    }
    v59 = *(_DWORD *)(a2 + 8);
    v60 = *(_DWORD *)a2;
    v61 = *(_DWORD *)(a2 + 20);
    result = DecoderConfigDescr::DeserializeMPEG2AACAudioDecoderSpecificPayload((uint64_t)a1, a2, v55);
    if ((_DWORD)result)
    {
      if (a1[2] != 103)
        return result;
      TBitstreamReader<unsigned int>::PutBack(a2, v61 - *(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)a2 - *(_DWORD *)(a2 + 8) + v59 - v60));
      result = DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload((uint64_t)a1, a2, v55);
      if (a1[10] != 2)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return 4294967090;
        *(_DWORD *)buf = 136315394;
        v64 = "ACMP4BitStreams.cpp";
        v65 = 1024;
        v66 = 2057;
        v28 = MEMORY[0x1E0C81028];
        v29 = "%25s:%-5d  DecoderConfigDescr::Deserialize: OTI 0x67 with mismatching audio object type";
        goto LABEL_23;
      }
    }
LABEL_81:
    if (!a3 || a4 != 2 || (_DWORD)result)
      return result;
    if (v55)
    {
      result = 0;
      *a3 = *v55 + v54;
      return result;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v64 = "ACMP4BitStreams.cpp";
      v65 = 1024;
      v66 = 2073;
      v28 = MEMORY[0x1E0C81028];
      v29 = "%25s:%-5d  DecoderConfigDescr::Deserialize: failed to obtain offset to decoder specific config";
      goto LABEL_23;
    }
  }
  else
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294967090;
    *(_DWORD *)buf = 136315394;
    v64 = "ACMP4BitStreams.cpp";
    v65 = 1024;
    v66 = 1995;
    v28 = MEMORY[0x1E0C81028];
    v29 = "%25s:%-5d  DecoderConfigDescr::Deserialize: the object type ID is incorrect";
LABEL_23:
    _os_log_impl(&dword_18EE07000, v28, OS_LOG_TYPE_ERROR, v29, buf, 0x12u);
  }
  return 4294967090;
}

uint64_t TBitstreamReader<unsigned int>::FillCacheFrom(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  int v7;

  v2 = (*(_QWORD *)(result + 8) - (_QWORD)a2) & ~((uint64_t)(*(_QWORD *)(result + 8) - (_QWORD)a2) >> 63);
  if (v2 <= 3)
  {
    v4 = *(_DWORD *)(result + 16);
    if ((_DWORD)v2)
    {
      v5 = (*(_DWORD *)(result + 8) - (_DWORD)a2) & ~((uint64_t)(*(_QWORD *)(result + 8) - (_QWORD)a2) >> 63);
      do
      {
        *(_DWORD *)(result + 16) = v4 << 8;
        v6 = *(_BYTE *)a2;
        a2 = (unsigned int *)((char *)a2 + 1);
        v3 = v6 | (v4 << 8);
        *(_DWORD *)(result + 16) = v3;
        v4 = v3;
        --v5;
      }
      while (v5);
    }
    else
    {
      v3 = *(_DWORD *)(result + 16);
    }
    v7 = v2 - 4;
    do
      v3 = (v3 << 8) | 0xFF;
    while (!__CFADD__(v7++, 1));
  }
  else
  {
    v3 = bswap32(*a2);
  }
  *(_DWORD *)(result + 16) = v3;
  return result;
}

uint64_t DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  void *v25;
  void *v26;
  size_t v27;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  BOOL v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  int Bit;
  unsigned int *v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int *v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  unsigned int *v103;
  MP4SpatialAudioSpecificConfig *v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  _DWORD *v109;
  int *v110;
  uint8_t buf[4];
  const char *v112;
  __int16 v113;
  int v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = *(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2);
    v7 = v6 - a3;
    if (v6 < a3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v112 = "ACMP4BitStreams.cpp";
        v113 = 1024;
        v114 = 1489;
        v8 = MEMORY[0x1E0C81028];
        v9 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig(): BitstreamReader doesn't provide acces"
             "s to the full specified length of the AudioSpecificConfig";
LABEL_22:
        _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x12u);
        return 4294967090;
      }
      return 4294967090;
    }
  }
  else
  {
    v7 = 0;
  }
  MP4AudioObjectType::Deserialize(a1 + 40, a2);
  MP4SampleRate::Deserialize((MP4SampleRate *)(a1 + 44), a2, 1);
  if (!*(_DWORD *)(a1 + 44))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v112 = "ACMP4BitStreams.cpp";
      v113 = 1024;
      v114 = 1500;
      v8 = MEMORY[0x1E0C81028];
      v9 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: invalid sample rate";
      goto LABEL_22;
    }
    return 4294967090;
  }
  v109 = (_DWORD *)(a1 + 44);
  v10 = *(_DWORD *)(a2 + 16);
  v11 = v10 >> 28;
  v12 = *(_DWORD *)(a2 + 20) - 4;
  *(_DWORD *)(a2 + 20) = v12;
  if (v12 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v14 = *(_DWORD *)(a2 + 16);
    v15 = *(_DWORD *)(a2 + 20);
    v11 |= v14 >> v15;
    *(_DWORD *)(a2 + 20) = v15 + 32;
    if (v15 == -32)
      v13 = 0;
    else
      v13 = v14 << -(char)v15;
  }
  else
  {
    v13 = 16 * v10;
  }
  *(_DWORD *)(a2 + 16) = v13;
  *(_DWORD *)(a1 + 56) = 0;
  v16 = (_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  v17 = (_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 80) = -1;
  v18 = (_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 48) = v11;
  *(_DWORD *)(a1 + 60) = 0;
  v19 = (_DWORD *)(a1 + 60);
  v20 = *(_DWORD *)(a1 + 40);
  if (v20 == 29)
  {
    *v16 = 5;
    *v17 = 1;
LABEL_18:
    *v18 = 1;
    MP4SampleRate::Deserialize((MP4SampleRate *)(a1 + 60), a2, 1);
    if (*v19 != *v109 && *v19 != 2 * *v109)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v112 = "ACMP4BitStreams.cpp";
        v113 = 1024;
        v114 = 1522;
        v8 = MEMORY[0x1E0C81028];
        v9 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: the sampleRate is incorrect";
        goto LABEL_22;
      }
      return 4294967090;
    }
    MP4AudioObjectType::Deserialize(a1 + 40, a2);
    v20 = *(_DWORD *)(a1 + 40);
    v11 = *(_DWORD *)(a1 + 48);
    goto LABEL_26;
  }
  if (v20 == 5)
  {
    *v16 = 5;
    v18 = (_DWORD *)(a1 + 72);
    goto LABEL_18;
  }
LABEL_26:
  v110 = (int *)(a1 + 40);
  v108 = v7;
  v23 = 0;
  v24 = *(_DWORD *)(a1 + 44);
  if (v20 <= 20)
  {
    if ((v20 - 1) < 4 || v20 == 7)
    {
LABEL_30:
      v23 = operator new();
      *(_QWORD *)v23 = &off_1E2907B50;
      *(_DWORD *)(v23 + 8) = v20;
      *(_DWORD *)(v23 + 12) = v24;
      *(_DWORD *)(v23 + 16) = v11;
      *(_WORD *)(v23 + 20) = 0;
      *(_DWORD *)(v23 + 24) = 0;
      *(_BYTE *)(v23 + 28) = 0;
      v25 = (void *)(v23 + 32);
      *(_DWORD *)(v23 + 40) = 0;
      MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)(v23 + 32));
      *(_OWORD *)(v23 + 1132) = 0u;
LABEL_31:
      v26 = v25;
      v27 = 1100;
LABEL_32:
      bzero(v26, v27);
    }
    else if (v20 == 8)
    {
LABEL_51:
      v23 = operator new();
      *(_QWORD *)v23 = &off_1E2908660;
      *(_DWORD *)(v23 + 8) = v20;
      *(_OWORD *)(v23 + 12) = 0u;
      *(_OWORD *)(v23 + 28) = 0u;
      *(_OWORD *)(v23 + 44) = 0u;
      *(_DWORD *)(v23 + 60) = 0;
    }
  }
  else
  {
    switch(v20)
    {
      case 21:
      case 23:
        goto LABEL_30;
      case 24:
        goto LABEL_51;
      case 30:
        v23 = operator new();
        MP4SpatialAudioSpecificConfig::MP4SpatialAudioSpecificConfig((MP4SpatialAudioSpecificConfig *)v23);
        break;
      case 36:
        v23 = operator new();
        *(_QWORD *)v23 = &off_1E2908088;
        *(_DWORD *)(v23 + 8) = v24;
        *(_OWORD *)(v23 + 12) = xmmword_18F116FB0;
        break;
      case 37:
      case 38:
        v23 = operator new();
        *(_QWORD *)v23 = &off_1E29080F8;
        *(_DWORD *)(v23 + 8) = v24;
        *(_DWORD *)(v23 + 12) = v11;
        v25 = (void *)(v23 + 16);
        *(_DWORD *)(v23 + 24) = 0;
        MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)(v23 + 16));
        *(_BYTE *)(v23 + 1116) = 0;
        goto LABEL_31;
      case 39:
        v23 = operator new();
        *(_QWORD *)v23 = &off_1E29080C0;
        *(_DWORD *)(v23 + 8) = v24;
        *(_DWORD *)(v23 + 12) = v11;
        v26 = (void *)(v23 + 36);
        *(_QWORD *)(v23 + 112) = 0;
        *(_OWORD *)(v23 + 16) = 0u;
        *(_OWORD *)(v23 + 32) = 0u;
        *(_OWORD *)(v23 + 48) = 0u;
        *(_OWORD *)(v23 + 64) = 0u;
        *(_OWORD *)(v23 + 80) = 0u;
        *(_OWORD *)(v23 + 92) = 0u;
        v27 = 65;
        goto LABEL_32;
      case 42:
        v23 = operator new();
        *(_QWORD *)v23 = &off_1E2908698;
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 16) = 0;
        *(_WORD *)(v23 + 99) = 0;
        *(_DWORD *)(v23 + 104) = 0;
        *(_BYTE *)(v23 + 108) = 0;
        *(_OWORD *)(v23 + 24) = 0u;
        *(_OWORD *)(v23 + 40) = 0u;
        *(_OWORD *)(v23 + 56) = 0u;
        *(_OWORD *)(v23 + 72) = 0u;
        *(_OWORD *)(v23 + 81) = 0u;
        *(_OWORD *)(v23 + 112) = 0u;
        *(_OWORD *)(v23 + 128) = 0u;
        *(_OWORD *)(v23 + 144) = 0u;
        *(_OWORD *)(v23 + 160) = 0u;
        *(_OWORD *)(v23 + 170) = 0u;
        *(_QWORD *)(v23 + 200) = 0;
        *(_QWORD *)(v23 + 208) = 0;
        *(_BYTE *)(v23 + 216) = 0;
        *(_QWORD *)(v23 + 192) = 0;
        break;
      default:
        break;
    }
  }
  v28 = (_QWORD *)operator new();
  v29 = (_QWORD *)(a1 + 1192);
  *v28 = &off_1E2917D70;
  v28[1] = 0;
  v28[2] = 0;
  v28[3] = v23;
  *(_QWORD *)&v30 = v23;
  *((_QWORD *)&v30 + 1) = v28;
  v31 = *(std::__shared_weak_count **)(a1 + 1200);
  *(_OWORD *)(a1 + 1192) = v30;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *v110;
  v35 = *v110 > 0x22 || ((1 << v34) & 0x702000200) == 0;
  if (v35 && !*v29)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294967090;
    *(_DWORD *)buf = 136315394;
    v112 = "ACMP4BitStreams.cpp";
    v113 = 1024;
    v114 = 1539;
    v8 = MEMORY[0x1E0C81028];
    v9 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: cannot create AOT parser";
    goto LABEL_22;
  }
  switch(v34)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 21:
    case 23:
      v36 = *v29;
      v37 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v29 + 16))(*v29, a2, 0);
      if (!(_DWORD)v37)
      {
        memcpy((void *)(a1 + 88), (const void *)(v36 + 32), 0x44CuLL);
        v44 = *(unsigned __int8 *)(v36 + 20);
        goto LABEL_55;
      }
      v21 = v37;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v21;
      *(_DWORD *)buf = 136315394;
      v112 = "ACMP4BitStreams.cpp";
      v113 = 1024;
      v114 = 1553;
      v38 = MEMORY[0x1E0C81028];
      v39 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: cannot parse MP4GASpecificConfig";
      goto LABEL_177;
    case 8:
    case 24:
      v45 = *v29;
      v46 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v29 + 16))(*v29, a2, 0);
      if (!(_DWORD)v46)
      {
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(v45 + 60);
        goto LABEL_93;
      }
      v21 = v46;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v21;
      *(_DWORD *)buf = 136315394;
      v112 = "ACMP4BitStreams.cpp";
      v113 = 1024;
      v114 = 1564;
      v38 = MEMORY[0x1E0C81028];
      v39 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: cannot parse MP4CelpSpecificConfig";
      goto LABEL_177;
    case 9:
    case 25:
      goto LABEL_93;
    case 30:
      TBitstreamReader<unsigned int>::GetBit(a2);
      v51 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v29 + 16))(*v29, a2, (*(_DWORD *)(a2 + 20) - v108 + 8 * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2)));
      if (!(_DWORD)v51)
        goto LABEL_93;
      v21 = v51;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v21;
      *(_DWORD *)buf = 136315394;
      v112 = "ACMP4BitStreams.cpp";
      v113 = 1024;
      v114 = 1576;
      v38 = MEMORY[0x1E0C81028];
      v39 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: cannot parse MP4SpatialAudioSpecificConfig";
      goto LABEL_177;
    case 32:
    case 33:
    case 34:
      v40 = *(_DWORD *)(a2 + 16);
      v41 = v40 >> 31;
      v42 = *(_DWORD *)(a2 + 20) - 1;
      *(_DWORD *)(a2 + 20) = v42;
      if (v42 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v49 = *(_DWORD *)(a2 + 16);
        v50 = *(_DWORD *)(a2 + 20);
        v41 |= v49 >> v50;
        *(_DWORD *)(a2 + 20) = v50 + 32;
        if (v50 == -32)
          v43 = 0;
        else
          v43 = v49 << -(char)v50;
      }
      else
      {
        v43 = 2 * v40;
      }
      *(_DWORD *)(a2 + 16) = v43;
      if (!v41)
        goto LABEL_93;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v112 = "ACMP4BitStreams.cpp";
        v113 = 1024;
        v114 = 1593;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: cannot parse MPEG_1_2_SpecificConfig", buf, 0x12u);
      }
      return 0;
    case 36:
      v52 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v29 + 16))(*v29, a2, 0);
      if (!(_DWORD)v52)
        goto LABEL_93;
      v21 = v52;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v21;
      *(_DWORD *)buf = 136315394;
      v112 = "ACMP4BitStreams.cpp";
      v113 = 1024;
      v114 = 1601;
      v38 = MEMORY[0x1E0C81028];
      v39 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: cannot parse MP4ALSSpecificConfig";
      goto LABEL_177;
    case 37:
    case 38:
      v47 = *v29;
      v48 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v29 + 16))(*v29, a2, 0);
      if (!(_DWORD)v48)
      {
        if (!*(_DWORD *)(a1 + 48))
          memcpy((void *)(a1 + 88), (const void *)(v47 + 16), 0x44CuLL);
        goto LABEL_93;
      }
      v21 = v48;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v21;
      *(_DWORD *)buf = 136315394;
      v112 = "ACMP4BitStreams.cpp";
      v113 = 1024;
      v114 = 1610;
      v38 = MEMORY[0x1E0C81028];
      v39 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: cannot parse MP4SLSSpecificConfig";
      goto LABEL_177;
    case 39:
      v53 = *v29;
      v54 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v29 + 16))(*v29, a2, 0);
      if (!(_DWORD)v54)
      {
        v44 = *(_DWORD *)(v53 + 16);
LABEL_55:
        *(_DWORD *)(a1 + 52) = v44;
        goto LABEL_93;
      }
      v21 = v54;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v21;
      *(_DWORD *)buf = 136315394;
      v112 = "ACMP4BitStreams.cpp";
      v113 = 1024;
      v114 = 1583;
      v38 = MEMORY[0x1E0C81028];
      v39 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: cannot parse MP4ELDSpecificConfig";
      goto LABEL_177;
    case 42:
      v55 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v29 + 16))(*v29, a2, 0);
      if ((_DWORD)v55)
      {
        v21 = v55;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return v21;
        *(_DWORD *)buf = 136315394;
        v112 = "ACMP4BitStreams.cpp";
        v113 = 1024;
        v114 = 1620;
        v38 = MEMORY[0x1E0C81028];
        v39 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: cannot parse MP4USACSpecificConfig";
        goto LABEL_177;
      }
      if (*(_BYTE *)(*v29 + 99) && *(_DWORD *)(a1 + 48) == 1)
        *(_DWORD *)(a1 + 48) = 2;
LABEL_93:
      v56 = *v110;
      if ((*v110 - 19) < 9 || v56 == 39 || v56 == 17)
      {
        v57 = *(_DWORD *)(a2 + 16);
        v58 = v57 >> 30;
        v59 = *(_DWORD *)(a2 + 20) - 2;
        *(_DWORD *)(a2 + 20) = v59;
        if (v59 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(_QWORD *)a2 += 4;
          v61 = *(_DWORD *)(a2 + 16);
          v62 = *(_DWORD *)(a2 + 20);
          v58 |= v61 >> v62;
          *(_DWORD *)(a2 + 20) = v62 + 32;
          v60 = v62 == -32 ? 0 : v61 << -(char)v62;
        }
        else
        {
          v60 = 4 * v57;
        }
        *(_DWORD *)(a2 + 16) = v60;
        *(_DWORD *)(a1 + 64) = v58;
        if (v58 == 3)
          TBitstreamReader<unsigned int>::GetBit(a2);
      }
      if (a3)
      {
        v63 = *(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2);
        v64 = __OFSUB__(v63, v108);
        v65 = v63 - v108;
        if ((v65 < 0) ^ v64 | (v65 == 0))
          v65 = 0;
      }
      else
      {
        v65 = 0;
      }
      v21 = 0;
      if (*v110 > 0x2C || ((1 << *v110) & 0x1080609A007ELL) == 0)
        return v21;
      if (v65 < 0xB)
        return 0;
      v66 = *(_DWORD *)(a2 + 16);
      v67 = v66 >> 21;
      v68 = *(_DWORD *)(a2 + 20) - 11;
      *(_DWORD *)(a2 + 20) = v68;
      if (v68 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v70 = *(_DWORD *)(a2 + 16);
        v71 = *(_DWORD *)(a2 + 20);
        v67 |= v70 >> v71;
        v68 = v71 + 32;
        *(_DWORD *)(a2 + 20) = v71 + 32;
        if (v71 == -32)
          v69 = 0;
        else
          v69 = v70 << -(char)v71;
      }
      else
      {
        v69 = v66 << 11;
      }
      *(_DWORD *)(a2 + 16) = v69;
      *(_DWORD *)(a1 + 68) = v67;
      if (v67 != 695)
        goto LABEL_144;
      v72 = v68 + 8 * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2);
      v64 = __OFSUB__(v72, v108);
      v73 = v72 - v108;
      if ((v73 < 0) ^ v64 | (v73 == 0))
        goto LABEL_143;
      v67 = -1;
      if (*v16 != 5 && v73 >= 5)
      {
        if ((*v110 - 5) <= 0xFFFFFFFB)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return 4294967090;
          *(_DWORD *)buf = 136315394;
          v112 = "ACMP4BitStreams.cpp";
          v113 = 1024;
          v114 = 1664;
          v8 = MEMORY[0x1E0C81028];
          v9 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: SBR config is not supported";
          goto LABEL_22;
        }
        MP4AudioObjectType::Deserialize(a1 + 56, a2);
        if (*v16 == 22)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return 4294967090;
          *(_DWORD *)buf = 136315394;
          v112 = "ACMP4BitStreams.cpp";
          v113 = 1024;
          v114 = 1694;
          v8 = MEMORY[0x1E0C81028];
          v9 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: unsupported ER BSAC extension audio object";
          goto LABEL_22;
        }
        if (*v16 == 5)
        {
          Bit = TBitstreamReader<unsigned int>::GetBit(a2);
          *v17 = Bit;
          if (Bit)
          {
            MP4SampleRate::Deserialize((MP4SampleRate *)(a1 + 60), a2, 1);
            if (*v19 != *v109 && *v19 != 2 * *v109)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                return 4294967090;
              *(_DWORD *)buf = 136315394;
              v112 = "ACMP4BitStreams.cpp";
              v113 = 1024;
              v114 = 1674;
              v8 = MEMORY[0x1E0C81028];
              v9 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: the sampleRate is incorrect";
              goto LABEL_22;
            }
          }
          else
          {
            *v16 = 0;
          }
          v75 = *(unsigned int **)a2;
          v76 = *(_DWORD *)(a2 + 20);
          v77 = v76 + 8 * (*(_DWORD *)(a2 + 8) - *(_QWORD *)a2);
          v64 = __OFSUB__(v77, v108);
          v78 = v77 - v108;
          if (!((v78 < 0) ^ v64 | (v78 == 0)) && v78 >= 0xC)
          {
            v79 = *(_DWORD *)(a2 + 16);
            v67 = v79 >> 21;
            v80 = v76 - 11;
            *(_DWORD *)(a2 + 20) = v80;
            if (v80 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, v75);
              *(_QWORD *)a2 += 4;
              v82 = *(_DWORD *)(a2 + 16);
              v83 = *(_DWORD *)(a2 + 20);
              v67 |= v82 >> v83;
              *(_DWORD *)(a2 + 20) = v83 + 32;
              v81 = v83 == -32 ? 0 : v82 << -(char)v83;
            }
            else
            {
              v81 = v79 << 11;
            }
            *(_DWORD *)(a2 + 16) = v81;
            *(_DWORD *)(a1 + 68) = v67;
            if (v67 == 1352)
            {
              *(_DWORD *)(a1 + 76) = 1352;
              *(_DWORD *)(a1 + 80) = TBitstreamReader<unsigned int>::GetBit(a2);
LABEL_143:
              v67 = -1;
            }
          }
        }
      }
LABEL_144:
      v84 = *(unsigned int **)a2;
      v85 = *(_DWORD *)(a2 + 20);
      v86 = v85 + 8 * (*(_DWORD *)(a2 + 8) - *(_QWORD *)a2);
      v64 = __OFSUB__(v86, v108);
      v87 = v86 - v108;
      if ((v87 < 0) ^ v64 | (v87 == 0) || v67 != -1 || v87 < 0xB)
      {
        v89 = *(_DWORD *)(a1 + 68);
      }
      else
      {
        v88 = *(_DWORD *)(a2 + 16);
        v89 = v88 >> 21;
        v85 -= 11;
        *(_DWORD *)(a2 + 20) = v85;
        if (v85 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v84);
          v84 = (unsigned int *)(*(_QWORD *)a2 + 4);
          *(_QWORD *)a2 = v84;
          v91 = *(_DWORD *)(a2 + 16);
          v92 = *(_DWORD *)(a2 + 20);
          v89 |= v91 >> v92;
          v85 = v92 + 32;
          *(_DWORD *)(a2 + 20) = v92 + 32;
          if (v92 == -32)
            v90 = 0;
          else
            v90 = v91 << -(char)v92;
        }
        else
        {
          v90 = v88 << 11;
        }
        *(_DWORD *)(a2 + 16) = v90;
        *(_DWORD *)(a1 + 68) = v89;
      }
      if (v89 != 1898)
        return 0;
      if (v85 + 8 * (*(_DWORD *)(a2 + 8) - (int)v84) <= v108)
        return 0;
      if (*v110 == 30)
        return 0;
      v93 = TBitstreamReader<unsigned int>::GetBit(a2);
      *(_DWORD *)(a1 + 84) = v93;
      if (!v93)
        return 0;
      v94 = *(_DWORD *)(a2 + 16);
      v95 = HIBYTE(v94);
      v96 = *(_DWORD *)(a2 + 20) - 8;
      *(_DWORD *)(a2 + 20) = v96;
      if (v96 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v98 = *(_DWORD *)(a2 + 16);
        v99 = *(_DWORD *)(a2 + 20);
        v95 |= v98 >> v99;
        v96 = v99 + 32;
        *(_DWORD *)(a2 + 20) = v99 + 32;
        if (v99 == -32)
          v97 = 0;
        else
          v97 = v98 << -(char)v99;
      }
      else
      {
        v97 = v94 << 8;
      }
      *(_DWORD *)(a2 + 16) = v97;
      if (v95 == 255)
      {
        v96 -= 16;
        *(_DWORD *)(a2 + 20) = v96;
        if (v96 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          v101 = *(_DWORD *)(a2 + 20);
          *(_QWORD *)a2 += 4;
          v96 = v101 + 32;
          *(_DWORD *)(a2 + 20) = v101 + 32;
          if (v101 == -32)
            v100 = 0;
          else
            v100 = *(_DWORD *)(a2 + 16) << -(char)v101;
        }
        else
        {
          v100 = v97 << 16;
        }
        *(_DWORD *)(a2 + 16) = v100;
      }
      v103 = *(unsigned int **)a2;
      v102 = *(_QWORD *)(a2 + 8);
      v104 = (MP4SpatialAudioSpecificConfig *)operator new();
      MP4SpatialAudioSpecificConfig::MP4SpatialAudioSpecificConfig(v104);
      v105 = v96 + 8 * (v102 - (_DWORD)v103);
      v64 = __OFSUB__(v105, v108);
      v106 = v105 - v108;
      if ((v106 < 0) ^ v64 | (v106 == 0))
        v107 = 0;
      else
        v107 = v106;
      std::shared_ptr<MP4AOTSpecificBase>::reset[abi:ne180100]<MP4SpatialAudioSpecificConfig,void>((uint64_t)v29, (uint64_t)v104);
      v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v29 + 16))(*v29, a2, v107);
      if ((_DWORD)v21 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v112 = "ACMP4BitStreams.cpp";
        v113 = 1024;
        v114 = 1722;
        v38 = MEMORY[0x1E0C81028];
        v39 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: cannot parse MP4SpatialAudioSpecificConfig";
LABEL_177:
        _os_log_impl(&dword_18EE07000, v38, OS_LOG_TYPE_ERROR, v39, buf, 0x12u);
      }
      return v21;
    default:
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294967090;
      *(_DWORD *)buf = 136315394;
      v112 = "ACMP4BitStreams.cpp";
      v113 = 1024;
      v114 = 1631;
      v8 = MEMORY[0x1E0C81028];
      v9 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: Unsupported AudioObjectType";
      goto LABEL_22;
  }
}

void sub_18EE60478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10A1C40A5657A2CLL);
  _Unwind_Resume(a1);
}

uint64_t TBitstreamReader<unsigned int>::SkipBits(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v2 = result;
  v3 = *(_DWORD *)(result + 20);
  v4 = a2 - v3;
  if (a2 > v3)
  {
    *(_QWORD *)(result + 16) = 0;
    v3 = 0;
    if (v4 >= 0x20)
    {
      *(_QWORD *)result += (v4 >> 3) & 0x1FFFFFFC;
      a2 = v4 & 0x1F;
    }
    else
    {
      a2 = v4;
    }
  }
  if ((a2 - 33) >= 0xFFFFFFE0)
  {
    v5 = *(_DWORD *)(result + 16);
    v6 = v3 - a2;
    *(_DWORD *)(result + 20) = v6;
    if (v6 < 0)
    {
      result = TBitstreamReader<unsigned int>::FillCacheFrom(result, *(unsigned int **)result);
      v8 = *(_DWORD *)(v2 + 20);
      *(_QWORD *)v2 += 4;
      *(_DWORD *)(v2 + 20) = v8 + 32;
      if (v8 == -32)
        v7 = 0;
      else
        v7 = *(_DWORD *)(v2 + 16) << -(char)v8;
    }
    else
    {
      v7 = v5 << a2;
    }
    *(_DWORD *)(v2 + 16) = v7;
  }
  return result;
}

uint64_t MP4AudioObjectType::Deserialize(uint64_t result, uint64_t a2)
{
  _DWORD *v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v3 = (_DWORD *)result;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = v4 >> 27;
  v6 = *(_DWORD *)(a2 + 20) - 5;
  *(_DWORD *)(a2 + 20) = v6;
  if (v6 < 0)
  {
    result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v8 = *(_DWORD *)(a2 + 16);
    v9 = *(_DWORD *)(a2 + 20);
    v5 |= v8 >> v9;
    v6 = v9 + 32;
    *(_DWORD *)(a2 + 20) = v9 + 32;
    if (v9 == -32)
      v7 = 0;
    else
      v7 = v8 << -(char)v9;
  }
  else
  {
    v7 = 32 * v4;
  }
  *(_DWORD *)(a2 + 16) = v7;
  *v3 = v5;
  if (v5 == 31)
  {
    v10 = v7 >> 26;
    v11 = v6 - 6;
    *(_DWORD *)(a2 + 20) = v11;
    if (v11 < 0)
    {
      result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v13 = *(_DWORD *)(a2 + 16);
      v14 = *(_DWORD *)(a2 + 20);
      v10 |= v13 >> v14;
      *(_DWORD *)(a2 + 20) = v14 + 32;
      if (v14 == -32)
        v12 = 0;
      else
        v12 = v13 << -(char)v14;
    }
    else
    {
      v12 = v7 << 6;
    }
    *(_DWORD *)(a2 + 16) = v12;
    v5 = v10 + *v3 + 1;
    *v3 = v5;
  }
  if ((v5 & 0xFFFFFFFE) == 0xA)
    *v3 = 0;
  return result;
}

uint64_t DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  NSObject *v24;
  const char *v25;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned int **)a2;
  v8 = *(_DWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 20);
  v10 = HIBYTE(v8);
  v11 = v9 - 8;
  *(_DWORD *)(a2 + 20) = v9 - 8;
  if (v9 - 8 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v7);
    v13 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v13;
    v14 = *(_DWORD *)(a2 + 16);
    v15 = *(_DWORD *)(a2 + 20);
    v10 |= v14 >> v15;
    v11 = v15 + 32;
    *(_DWORD *)(a2 + 20) = v15 + 32;
    if (v15 == -32)
      v12 = 0;
    else
      v12 = v14 << -(char)v15;
  }
  else
  {
    v12 = v8 << 8;
    v13 = v7;
  }
  *(_DWORD *)(a2 + 16) = v12;
  *(_DWORD *)(a1 + 32) = v10;
  if (v10 == 5)
  {
    v16 = 0;
    v17 = v6 - (_DWORD)v7;
    v18 = -1;
    do
    {
      v19 = HIBYTE(v12);
      v11 -= 8;
      *(_DWORD *)(a2 + 20) = v11;
      if (v11 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
        v13 = (unsigned int *)(*(_QWORD *)a2 + 4);
        *(_QWORD *)a2 = v13;
        v20 = *(_DWORD *)(a2 + 16);
        v21 = *(_DWORD *)(a2 + 20);
        v19 |= v20 >> v21;
        v11 = v21 + 32;
        *(_DWORD *)(a2 + 20) = v21 + 32;
        if (v21 == -32)
          v12 = 0;
        else
          v12 = v20 << -(char)v21;
      }
      else
      {
        v12 <<= 8;
      }
      *(_DWORD *)(a2 + 16) = v12;
      if (v18 == 4)
      {
        *(_DWORD *)(a1 + 36) = 0;
        goto LABEL_22;
      }
      v22 = v19 & 0x7F | (v16 << 7);
      ++v18;
      v16 = v22;
    }
    while ((v19 & 0x80) != 0);
    *(_DWORD *)(a1 + 36) = v22;
    if (v18 < 4)
    {
      if (a3)
      {
        *a3 = (v9 - v11 + 8 * ((int)v13 - *(_DWORD *)(a2 + 8) + v17)) / 8;
        v22 = *(_DWORD *)(a1 + 36);
      }
      return DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig(a1, a2, 8 * v22);
    }
LABEL_22:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294967090;
    v26 = 136315394;
    v27 = "ACMP4BitStreams.cpp";
    v28 = 1024;
    v29 = 1750;
    v24 = MEMORY[0x1E0C81028];
    v25 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload: the Decoder specific info tag size is incorrect";
    goto LABEL_24;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v26 = 136315394;
    v27 = "ACMP4BitStreams.cpp";
    v28 = 1024;
    v29 = 1746;
    v24 = MEMORY[0x1E0C81028];
    v25 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload: the DecoderSpecificInfo tag is incorrect";
LABEL_24:
    _os_log_impl(&dword_18EE07000, v24, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&v26, 0x12u);
  }
  return 4294967090;
}

uint64_t MP4SampleRate::Deserialize(MP4SampleRate *this, uint64_t a2, int a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;

  v6 = *(_DWORD *)(a2 + 16);
  v7 = v6 >> 28;
  v8 = *(_DWORD *)(a2 + 20) - 4;
  *(_DWORD *)(a2 + 20) = v8;
  if (v8 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v10 = *(_DWORD *)(a2 + 16);
    v11 = *(_DWORD *)(a2 + 20);
    v7 |= v10 >> v11;
    *(_DWORD *)(a2 + 20) = v11 + 32;
    if (v11 == -32)
      v9 = 0;
    else
      v9 = v10 << -(char)v11;
  }
  else
  {
    v9 = 16 * v6;
  }
  *(_DWORD *)(a2 + 16) = v9;
  result = (uint64_t)MP4SampleRate::SetFromIndex(this, v7, a3);
  if (v7 == 15)
  {
    v13 = *(_DWORD *)(a2 + 16);
    v14 = v13 >> 8;
    v15 = *(_DWORD *)(a2 + 20) - 24;
    *(_DWORD *)(a2 + 20) = v15;
    if (v15 < 0)
    {
      result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v17 = *(_DWORD *)(a2 + 16);
      v18 = *(_DWORD *)(a2 + 20);
      v14 |= v17 >> v18;
      *(_DWORD *)(a2 + 20) = v18 + 32;
      if (v18 == -32)
        v16 = 0;
      else
        v16 = v17 << -(char)v18;
    }
    else
    {
      v16 = v13 << 24;
    }
    *(_DWORD *)(a2 + 16) = v16;
    *(_DWORD *)this = v14;
  }
  return result;
}

uint64_t AudioFormatProperty_ChannelLayoutForTag(signed int a1, AudioChannelLayout *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  AudioChannelDescription *mChannelDescriptions;
  unsigned int v9;
  uint64_t i;
  BOOL v11;
  int v12;
  double v13;
  uint64_t ii;
  AudioChannelFlags v15;
  UInt32 v16;
  int v17;
  AudioChannelLayoutTag v18;
  int v19;
  AudioChannelLayoutTag v20;
  int v21;
  int v22;
  UInt32 v23;
  AudioChannelLayoutTag v24;
  AudioChannelBitmap v25;
  AudioChannelFlags v26;
  uint64_t n;
  char *v28;
  UInt32 v29;
  int v30;
  int v31;
  AudioChannelFlags v32;
  UInt32 v33;
  AudioChannelLayoutTag v34;
  int v35;
  AudioChannelLayoutTag v36;
  AudioChannelFlags v37;
  int v38;
  AudioChannelLayoutTag v39;
  uint64_t k;
  char *v41;
  int v42;
  UInt32 v43;
  int v44;
  AudioChannelLayoutTag v45;
  AudioChannelLayoutTag v46;
  AudioChannelLayoutTag v47;
  AudioChannelBitmap v48;
  int v49;
  AudioChannelLayoutTag v50;
  AudioChannelBitmap v51;
  AudioChannelLayoutTag v52;
  UInt32 v53;
  AudioChannelLayoutTag v54;
  UInt32 v55;
  AudioChannelFlags v56;
  int v57;
  int v58;
  int v59;
  UInt32 v60;
  uint64_t m;
  char *v62;
  int v63;
  int v64;
  AudioChannelFlags v65;
  AudioChannelLayoutTag v66;
  AudioChannelLayoutTag v67;
  AudioChannelFlags v68;
  AudioChannelFlags v69;
  uint64_t j;
  char *v71;
  AudioChannelBitmap v72;
  AudioChannelLayoutTag v73;
  int v74;
  unint64_t v75;
  Float32 *v76;
  float v77;
  unsigned int v78;
  AudioChannelLayout v79;
  uint64_t v80;
  uint64_t v81;

  if (a1 == 0x10000)
    return 1718449215;
  v80 = v2;
  v81 = v3;
  a2->mChannelLayoutTag = a1;
  a2->mChannelBitmap = 0;
  v79.mChannelBitmap = 0;
  v79.mNumberChannelDescriptions = 0;
  v78 = 0;
  v79.mChannelLayoutTag = a1;
  AudioFormatProperty_NumberOfChannelsForLayout(&v79, &v78);
  v7 = v78;
  a2->mNumberChannelDescriptions = v78;
  mChannelDescriptions = a2->mChannelDescriptions;
  bzero(a2->mChannelDescriptions, 20 * v7);
  if (a1 == -266338299)
  {
    result = 0;
    a2->mChannelLayoutTag = 0;
    a2->mChannelDescriptions[0].mChannelLabel = 0x20000;
    a2[1].mChannelLayoutTag = 131073;
    LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 131074;
    a2[2].mNumberChannelDescriptions = 131075;
    LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 3;
    return result;
  }
  if (a1 == -267386874)
  {
    result = 0;
    a2->mChannelLayoutTag = 0;
    a2->mChannelDescriptions[0].mChannelLabel = 208;
    a2[1].mChannelLayoutTag = 209;
    LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 0x20000;
    a2[2].mNumberChannelDescriptions = 131073;
    LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 131074;
    a2[3].mChannelDescriptions[0].mChannelFlags = 131075;
    return result;
  }
  v9 = a1 & 0xFFFF0000;
  if ((int)(a1 & 0xFFFF0000) >= 12451840)
  {
    if (v9 != 12451840 && v9 != 12517376)
      goto LABEL_28;
    result = 560360820;
    v11 = v9 == 12451840;
    v12 = 196608;
    if (v11)
      v12 = 0x20000;
    if (v7 <= 0xFE01)
    {
      v13 = sqrt((double)v7) + 0.5;
      if (v13 * v13 == (_DWORD)v7)
      {
        if (!(_DWORD)v7)
          return 0;
        result = 0;
        do
        {
          mChannelDescriptions->mChannelLabel = v12;
          ++mChannelDescriptions;
          ++v12;
          --v7;
        }
        while (v7);
      }
    }
  }
  else
  {
    if (v9 != -268369920)
    {
      if (v9 == 9633792)
      {
        if ((_DWORD)v7)
        {
          for (i = 0; i != v7; ++i)
          {
            result = 0;
            mChannelDescriptions->mChannelLabel = i | 0x10000;
            ++mChannelDescriptions;
          }
          return result;
        }
        return 0;
      }
LABEL_28:
      result = 560360820;
      if (a1 > 10420230)
      {
        if (a1 > 12320774)
        {
          if (a1 <= 13434887)
          {
            if (a1 > 12910595)
            {
              if (a1 <= 13172743)
              {
                if (a1 <= 13041670)
                {
                  if (a1 != 12910596)
                  {
                    if (a1 != 12976134)
                      return result;
                    a2->mChannelDescriptions[0].mChannelLabel = 1;
                    a2[1].mChannelLayoutTag = 2;
                    LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
                    a2[2].mNumberChannelDescriptions = 6;
                    LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 9;
                    v15 = 3;
                    goto LABEL_361;
                  }
                  a2->mChannelDescriptions[0].mChannelLabel = 1;
                  a2[1].mChannelLayoutTag = 2;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 9;
                  v33 = 3;
                  goto LABEL_338;
                }
                if (a1 == 13041671)
                {
                  a2->mChannelDescriptions[0].mChannelLabel = 1;
                  a2[1].mChannelLayoutTag = 2;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
                  a2[2].mNumberChannelDescriptions = 6;
                  LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 9;
                  v37 = 3;
                  goto LABEL_376;
                }
                if (a1 != 13107207)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 3;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
                a2[2].mNumberChannelDescriptions = 5;
                v44 = 9;
LABEL_306:
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v44;
                v37 = 6;
LABEL_376:
                a2[3].mChannelDescriptions[0].mChannelFlags = v37;
                v25 = 4;
                goto LABEL_377;
              }
              if (a1 <= 13303821)
              {
                if (a1 != 13172744)
                {
                  if (a1 != 13238284)
                    return result;
                  a2->mChannelDescriptions[0].mChannelLabel = 1;
                  a2[1].mChannelLayoutTag = 2;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 33;
                  a2[2].mNumberChannelDescriptions = 34;
                  LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                  a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                  a2[4].mChannelBitmap = 3;
                  v31 = 4;
                  goto LABEL_350;
                }
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
                a2[2].mNumberChannelDescriptions = 6;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
                v56 = 34;
                goto LABEL_283;
              }
              if (a1 != 13303822)
              {
                if (a1 != 13369368)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 35;
                a2[1].mChannelLayoutTag = 36;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 37;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
                a2[3].mChannelDescriptions[0].mChannelFlags = 34;
                a2[4].mChannelBitmap = 1;
                LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 2;
                a2[5].mChannelDescriptions[0].mChannelLabel = 9;
                a2[6].mChannelLayoutTag = 62;
                LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 55;
                a2[7].mNumberChannelDescriptions = 56;
                LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 13;
                a2[8].mChannelDescriptions[0].mChannelFlags = 15;
                a2[9].mChannelBitmap = 14;
                LODWORD(a2[9].mChannelDescriptions[0].mCoordinates[1]) = 12;
                a2[10].mChannelDescriptions[0].mChannelLabel = 52;
                a2[11].mChannelLayoutTag = 54;
                LODWORD(a2[11].mChannelDescriptions[0].mCoordinates[0]) = 49;
                a2[12].mNumberChannelDescriptions = 51;
                LODWORD(a2[12].mChannelDescriptions[0].mCoordinates[2]) = 53;
                a2[13].mChannelDescriptions[0].mChannelFlags = 59;
                a2[14].mChannelBitmap = 57;
                LODWORD(a2[14].mChannelDescriptions[0].mCoordinates[1]) = 58;
                goto LABEL_378;
              }
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 33;
              a2[2].mNumberChannelDescriptions = 34;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
              a2[3].mChannelDescriptions[0].mChannelFlags = 6;
              a2[4].mChannelBitmap = 3;
              LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 4;
              a2[5].mChannelDescriptions[0].mChannelLabel = 13;
              a2[6].mChannelLayoutTag = 15;
              LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 49;
              a2[7].mNumberChannelDescriptions = 51;
              LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 52;
              v26 = 54;
LABEL_363:
              a2[8].mChannelDescriptions[0].mChannelFlags = v26;
              goto LABEL_378;
            }
            if (a1 > 12648463)
            {
              if (a1 <= 12779529)
              {
                if (a1 != 12648464)
                {
                  if (a1 != 12713992)
                    return result;
                  a2->mChannelDescriptions[0].mChannelLabel = 1;
                  a2[1].mChannelLayoutTag = 2;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                  a2[2].mNumberChannelDescriptions = 4;
                  LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                  a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                  a2[4].mChannelBitmap = 49;
                  v21 = 51;
                  goto LABEL_367;
                }
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 4;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                a2[4].mChannelBitmap = 33;
                LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 34;
                a2[5].mChannelDescriptions[0].mChannelLabel = 35;
                a2[6].mChannelLayoutTag = 36;
                LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 13;
                a2[7].mNumberChannelDescriptions = 15;
                LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 49;
                a2[8].mChannelDescriptions[0].mChannelFlags = 51;
                a2[9].mChannelBitmap = 52;
                v38 = 54;
                goto LABEL_270;
              }
              if (a1 == 12779530)
              {
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 4;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                a2[4].mChannelBitmap = 13;
                LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 15;
                a2[5].mChannelDescriptions[0].mChannelLabel = 52;
                v39 = 54;
              }
              else
              {
                if (a1 != 12845066)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 4;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                a2[4].mChannelBitmap = 33;
                LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 34;
                a2[5].mChannelDescriptions[0].mChannelLabel = 49;
                v39 = 51;
              }
LABEL_340:
              a2[6].mChannelLayoutTag = v39;
              goto LABEL_378;
            }
            if (a1 != 12320775)
            {
              if (a1 != 12386312)
              {
                if (a1 != 12582924)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 4;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                a2[4].mChannelBitmap = 33;
                v31 = 34;
                goto LABEL_350;
              }
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
              a2[3].mChannelDescriptions[0].mChannelFlags = 34;
              v51 = 5;
              goto LABEL_300;
            }
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
            a2[2].mNumberChannelDescriptions = 4;
            v59 = 9;
            goto LABEL_298;
          }
          if (a1 > 13893636)
          {
            if (a1 <= 14155780)
            {
              if (a1 <= 14024710)
              {
                if (a1 != 13893637)
                {
                  if (a1 != 13959174)
                    return result;
                  a2->mChannelDescriptions[0].mChannelLabel = 1;
                  a2[1].mChannelLayoutTag = 3;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
                  a2[2].mNumberChannelDescriptions = 33;
                  v19 = 34;
                  goto LABEL_326;
                }
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 3;
                v58 = 2;
                goto LABEL_369;
              }
              if (a1 != 14024711)
              {
                if (a1 != 14090248)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                v46 = 3;
                goto LABEL_208;
              }
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              v54 = 3;
              goto LABEL_331;
            }
            if (a1 > 14286854)
            {
              if (a1 != 14286855)
              {
                if (a1 != 14352392)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 33;
                a2[2].mNumberChannelDescriptions = 34;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                v56 = 6;
LABEL_283:
                a2[3].mChannelDescriptions[0].mChannelFlags = v56;
                v48 = 3;
                goto LABEL_366;
              }
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
              a2[2].mNumberChannelDescriptions = 6;
              v74 = 3;
LABEL_375:
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v74;
              v37 = 9;
              goto LABEL_376;
            }
            if (a1 != 14155781)
            {
              if (a1 != 14221318)
                return result;
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 33;
              v16 = 34;
              goto LABEL_145;
            }
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 33;
            v23 = 34;
            goto LABEL_288;
          }
          if (a1 > 13631499)
          {
            if (a1 > 13762571)
            {
              if (a1 == 13762572)
              {
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 4;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
                a2[3].mChannelDescriptions[0].mChannelFlags = 34;
                a2[4].mChannelBitmap = 55;
                v31 = 56;
LABEL_350:
                LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = v31;
                a2[5].mChannelDescriptions[0].mChannelLabel = 13;
                a2[6].mChannelLayoutTag = 15;
                LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 52;
                v60 = 54;
                goto LABEL_351;
              }
              if (a1 != 13828110)
                return result;
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
              a2[3].mChannelDescriptions[0].mChannelFlags = 34;
              a2[4].mChannelBitmap = 55;
              LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 56;
              a2[5].mChannelDescriptions[0].mChannelLabel = 13;
              a2[6].mChannelLayoutTag = 15;
              LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 52;
              a2[7].mNumberChannelDescriptions = 54;
              LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 65;
              v26 = 66;
              goto LABEL_363;
            }
            if (a1 != 13631500)
            {
              if (a1 != 13697038)
                return result;
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
              a2[3].mChannelDescriptions[0].mChannelFlags = 6;
              a2[4].mChannelBitmap = 63;
              LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 64;
              a2[5].mChannelDescriptions[0].mChannelLabel = 13;
              a2[6].mChannelLayoutTag = 15;
              LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 14;
              a2[7].mNumberChannelDescriptions = 60;
              LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 61;
              v26 = 12;
              goto LABEL_363;
            }
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
            a2[2].mNumberChannelDescriptions = 4;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
            a2[3].mChannelDescriptions[0].mChannelFlags = 6;
            a2[4].mChannelBitmap = 13;
            LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 15;
            a2[5].mChannelDescriptions[0].mChannelLabel = 14;
            a2[6].mChannelLayoutTag = 60;
            LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 61;
            v60 = 12;
            goto LABEL_351;
          }
          if (a1 != 13434888)
          {
            if (a1 != 13500428)
            {
              if (a1 != 13565962)
                return result;
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
              a2[3].mChannelDescriptions[0].mChannelFlags = 6;
              a2[4].mChannelBitmap = 13;
              LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 15;
              a2[5].mChannelDescriptions[0].mChannelLabel = 60;
              v39 = 61;
              goto LABEL_340;
            }
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
            a2[2].mNumberChannelDescriptions = 37;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
            a2[3].mChannelDescriptions[0].mChannelFlags = 34;
            a2[4].mChannelBitmap = 62;
            LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 55;
            a2[5].mChannelDescriptions[0].mChannelLabel = 56;
            a2[6].mChannelLayoutTag = 13;
            LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 15;
            v60 = 53;
LABEL_351:
            a2[7].mNumberChannelDescriptions = v60;
            goto LABEL_378;
          }
          a2->mChannelDescriptions[0].mChannelLabel = 1;
          a2[1].mChannelLayoutTag = 2;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
          a2[2].mNumberChannelDescriptions = 4;
          LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
          v69 = 6;
LABEL_335:
          a2[3].mChannelDescriptions[0].mChannelFlags = v69;
          a2[4].mChannelBitmap = 13;
          v21 = 15;
          goto LABEL_367;
        }
        if (a1 > 11337734)
        {
          if (a1 > 11796488)
          {
            if (a1 <= 12058631)
            {
              if (a1 <= 11927558)
              {
                if (a1 == 11796489)
                {
                  a2->mChannelDescriptions[0].mChannelLabel = 7;
                  a2[1].mChannelLayoutTag = 8;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 1;
                  a2[2].mNumberChannelDescriptions = 2;
                  LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                  a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                  a2[4].mChannelBitmap = 33;
                  v17 = 34;
                }
                else
                {
                  if (a1 != 11862025)
                    return result;
                  a2->mChannelDescriptions[0].mChannelLabel = 7;
                  a2[1].mChannelLayoutTag = 3;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 8;
                  a2[2].mNumberChannelDescriptions = 1;
                  LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 2;
                  a2[3].mChannelDescriptions[0].mChannelFlags = 5;
                  a2[4].mChannelBitmap = 9;
                  v17 = 6;
                }
                LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = v17;
                a2[5].mChannelDescriptions[0].mChannelLabel = 4;
                goto LABEL_378;
              }
              if (a1 != 11927559)
              {
                if (a1 != 11993096)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 3;
                v46 = 1;
LABEL_208:
                a2[1].mChannelLayoutTag = v46;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
                a2[2].mNumberChannelDescriptions = 5;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
                a2[3].mChannelDescriptions[0].mChannelFlags = 33;
                v48 = 34;
LABEL_366:
                a2[4].mChannelBitmap = v48;
                v21 = 4;
                goto LABEL_367;
              }
              a2->mChannelDescriptions[0].mChannelLabel = 3;
              v73 = 1;
              goto LABEL_372;
            }
            if (a1 <= 12189700)
            {
              if (a1 != 12058632)
              {
                if (a1 != 12124164)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 33;
                v33 = 34;
                goto LABEL_338;
              }
              a2->mChannelDescriptions[0].mChannelLabel = 3;
              v66 = 1;
LABEL_334:
              a2[1].mChannelLayoutTag = v66;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
              a2[2].mNumberChannelDescriptions = 5;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
              v69 = 4;
              goto LABEL_335;
            }
            if (a1 == 12189701)
            {
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              v58 = 3;
LABEL_369:
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = v58;
              a2[2].mNumberChannelDescriptions = 33;
              v63 = 34;
              goto LABEL_370;
            }
            if (a1 != 12255238)
              return result;
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
            v53 = 4;
            goto LABEL_251;
          }
          if (a1 <= 11534342)
          {
            if (a1 != 11337735)
            {
              if (a1 == 11403271)
              {
                a2->mChannelDescriptions[0].mChannelLabel = 3;
                a2[1].mChannelLayoutTag = 1;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
                a2[2].mNumberChannelDescriptions = 33;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 34;
                v37 = 12;
              }
              else
              {
                if (a1 != 11468807)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 3;
                a2[1].mChannelLayoutTag = 9;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 1;
                a2[2].mNumberChannelDescriptions = 2;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
                v37 = 34;
              }
              goto LABEL_376;
            }
            a2->mChannelDescriptions[0].mChannelLabel = 7;
            a2[1].mChannelLayoutTag = 8;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 1;
            a2[2].mNumberChannelDescriptions = 2;
            v44 = 5;
            goto LABEL_306;
          }
          if (a1 <= 11665415)
          {
            if (a1 == 11534343)
            {
              a2->mChannelDescriptions[0].mChannelLabel = 7;
              a2[1].mChannelLayoutTag = 3;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 8;
              a2[2].mNumberChannelDescriptions = 1;
              v59 = 2;
LABEL_298:
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v59;
              a2[3].mChannelDescriptions[0].mChannelFlags = 5;
              v25 = 6;
              goto LABEL_377;
            }
            if (a1 != 11599880)
              return result;
            a2->mChannelDescriptions[0].mChannelLabel = 7;
            v24 = 3;
LABEL_365:
            a2[1].mChannelLayoutTag = v24;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 8;
            a2[2].mNumberChannelDescriptions = 1;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 2;
            a2[3].mChannelDescriptions[0].mChannelFlags = 5;
            v48 = 6;
            goto LABEL_366;
          }
          if (a1 != 11665416)
          {
            if (a1 != 11730952)
              return result;
            a2->mChannelDescriptions[0].mChannelLabel = 7;
            a2[1].mChannelLayoutTag = 3;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 8;
            a2[2].mNumberChannelDescriptions = 1;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 2;
            a2[3].mChannelDescriptions[0].mChannelFlags = 5;
            v51 = 9;
LABEL_300:
            a2[4].mChannelBitmap = v51;
            v21 = 6;
            goto LABEL_367;
          }
          a2->mChannelDescriptions[0].mChannelLabel = 7;
          a2[1].mChannelLayoutTag = 8;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 1;
          v55 = 2;
LABEL_345:
          a2[2].mNumberChannelDescriptions = v55;
          LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
          v68 = 6;
          goto LABEL_346;
        }
        if (a1 <= 10878983)
        {
          if (a1 > 10616839)
          {
            if (a1 <= 10747911)
            {
              if (a1 == 10616840)
              {
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 3;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
                a2[2].mNumberChannelDescriptions = 5;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
                a2[3].mChannelDescriptions[0].mChannelFlags = 4;
                a2[4].mChannelBitmap = 10;
                v21 = 11;
              }
              else
              {
                if (a1 != 10682376)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 3;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
                a2[2].mNumberChannelDescriptions = 5;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
                a2[3].mChannelDescriptions[0].mChannelFlags = 4;
                a2[4].mChannelBitmap = 35;
                v21 = 36;
              }
              goto LABEL_367;
            }
            if (a1 != 10747912)
            {
              if (a1 != 10813448)
                return result;
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 3;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
              a2[2].mNumberChannelDescriptions = 5;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
              a2[3].mChannelDescriptions[0].mChannelFlags = 4;
              a2[4].mChannelBitmap = 9;
              v21 = 12;
              goto LABEL_367;
            }
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            v66 = 3;
            goto LABEL_334;
          }
          if (a1 == 10420231)
          {
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 3;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
            a2[2].mNumberChannelDescriptions = 5;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
            a2[3].mChannelDescriptions[0].mChannelFlags = 4;
            v25 = 14;
LABEL_377:
            a2[4].mChannelBitmap = v25;
            goto LABEL_378;
          }
          if (a1 == 10485768)
          {
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 3;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
            a2[2].mNumberChannelDescriptions = 5;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
            v68 = 4;
LABEL_346:
            a2[3].mChannelDescriptions[0].mChannelFlags = v68;
            a2[4].mChannelBitmap = 33;
            v21 = 34;
            goto LABEL_367;
          }
          if (a1 != 10551304)
            return result;
          a2->mChannelDescriptions[0].mChannelLabel = 1;
          a2[1].mChannelLayoutTag = 3;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
          a2[2].mNumberChannelDescriptions = 5;
          v35 = 6;
          goto LABEL_294;
        }
        if (a1 > 11075588)
        {
          if (a1 > 11206661)
          {
            if (a1 == 11206662)
            {
              a2->mChannelDescriptions[0].mChannelLabel = 3;
              a2[1].mChannelLayoutTag = 1;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
              a2[2].mNumberChannelDescriptions = 33;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 34;
              v15 = 12;
              goto LABEL_361;
            }
            if (a1 != 11272198)
              return result;
            a2->mChannelDescriptions[0].mChannelLabel = 3;
            a2[1].mChannelLayoutTag = 9;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 1;
            v53 = 2;
LABEL_251:
            a2[2].mNumberChannelDescriptions = v53;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
            v15 = 34;
LABEL_361:
            a2[3].mChannelDescriptions[0].mChannelFlags = v15;
            goto LABEL_378;
          }
          if (a1 != 11075589)
          {
            if (a1 != 11141126)
              return result;
            a2->mChannelDescriptions[0].mChannelLabel = 7;
            a2[1].mChannelLayoutTag = 8;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 1;
            v29 = 2;
            goto LABEL_260;
          }
          a2->mChannelDescriptions[0].mChannelLabel = 3;
          v47 = 1;
          goto LABEL_279;
        }
        switch(a1)
        {
          case 10878984:
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 3;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
            a2[2].mNumberChannelDescriptions = 5;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
            a2[3].mChannelDescriptions[0].mChannelFlags = 4;
            v72 = 9;
            break;
          case 10944520:
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 3;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
            a2[2].mNumberChannelDescriptions = 5;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
            a2[3].mChannelDescriptions[0].mChannelFlags = 4;
            v72 = 12;
            break;
          case 11010052:
            a2->mChannelDescriptions[0].mChannelLabel = 3;
            v18 = 1;
            goto LABEL_188;
          default:
            return result;
        }
        a2[4].mChannelBitmap = v72;
        v21 = 14;
        goto LABEL_367;
      }
      if (a1 <= 8454151)
      {
        if (a1 > 7471106)
        {
          if (a1 > 7929861)
          {
            if (a1 > 8192006)
            {
              if (a1 > 8323079)
              {
                if (a1 == 8323080)
                {
                  a2->mChannelDescriptions[0].mChannelLabel = 3;
                  v24 = 7;
                  goto LABEL_365;
                }
                if (a1 != 8388616)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                v55 = 4;
                goto LABEL_345;
              }
              if (a1 == 8192007)
              {
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 4;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                v65 = 6;
LABEL_373:
                a2[3].mChannelDescriptions[0].mChannelFlags = v65;
                v25 = 9;
                goto LABEL_377;
              }
              if (a1 != 8257544)
                return result;
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
              v32 = 6;
              goto LABEL_295;
            }
            if (a1 > 8060933)
            {
              if (a1 == 8060934)
              {
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                v45 = 3;
              }
              else
              {
                if (a1 != 8126470)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 3;
                v45 = 1;
              }
              a2[1].mChannelLayoutTag = v45;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
              a2[2].mNumberChannelDescriptions = 5;
              v19 = 6;
              goto LABEL_326;
            }
            if (a1 != 7929862)
            {
              if (a1 != 7995398)
                return result;
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
              v16 = 6;
LABEL_145:
              a2[2].mNumberChannelDescriptions = v16;
              v19 = 3;
LABEL_326:
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v19;
              v15 = 4;
              goto LABEL_361;
            }
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
            v29 = 4;
LABEL_260:
            a2[2].mNumberChannelDescriptions = v29;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
            v15 = 6;
            goto LABEL_361;
          }
          if (a1 > 7667716)
          {
            if (a1 > 7798788)
            {
              if (a1 == 7798789)
              {
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                v50 = 3;
              }
              else
              {
                if (a1 != 7864325)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 3;
                v50 = 1;
              }
              a2[1].mChannelLayoutTag = v50;
              v49 = 2;
            }
            else
            {
              if (a1 != 7667717)
              {
                if (a1 != 7733253)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
                v23 = 6;
LABEL_288:
                a2[2].mNumberChannelDescriptions = v23;
                v63 = 3;
                goto LABEL_370;
              }
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              v49 = 3;
            }
LABEL_343:
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = v49;
            a2[2].mNumberChannelDescriptions = 5;
            v63 = 6;
            goto LABEL_370;
          }
          if (a1 != 7471107)
          {
            if (a1 == 7536644)
            {
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              v57 = 3;
              goto LABEL_337;
            }
            if (a1 != 7602180)
              return result;
            a2->mChannelDescriptions[0].mChannelLabel = 3;
            v36 = 1;
            goto LABEL_264;
          }
          a2->mChannelDescriptions[0].mChannelLabel = 3;
          v52 = 1;
          goto LABEL_302;
        }
        if (a1 <= 7012355)
        {
          if (a1 <= 6750209)
          {
            switch(a1)
            {
              case 6553601:
                mChannelDescriptions->mChannelLabel = 42;
                goto LABEL_378;
              case 6619138:
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                v20 = 2;
                break;
              case 6684674:
                a2->mChannelDescriptions[0].mChannelLabel = 301;
                v20 = 302;
                break;
              default:
                return result;
            }
          }
          else if (a1 > 6881281)
          {
            if (a1 == 6881282)
            {
              a2->mChannelDescriptions[0].mChannelLabel = 206;
              v20 = 207;
            }
            else
            {
              if (a1 != 6946818)
                return result;
              a2->mChannelDescriptions[0].mChannelLabel = 208;
              v20 = 209;
            }
          }
          else if (a1 == 6750210)
          {
            a2->mChannelDescriptions[0].mChannelLabel = 38;
            v20 = 39;
          }
          else
          {
            if (a1 != 6815746)
              return result;
            a2->mChannelDescriptions[0].mChannelLabel = 204;
            v20 = 205;
          }
          goto LABEL_348;
        }
        if (a1 <= 7208965)
        {
          if (a1 != 7012356)
          {
            if (a1 == 7077892)
            {
              for (j = 0; j != 80; j += 20)
              {
                v71 = (char *)a2 + j;
                *((_DWORD *)v71 + 4) = 2;
                *((_DWORD *)v71 + 7) = 1065353216;
              }
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
              a2[2].mNumberChannelDescriptions = 6;
              a2->mChannelDescriptions[0].mCoordinates[0] = -45.0;
              a2[1].mNumberChannelDescriptions = 1110704128;
              a2[1].mChannelDescriptions[0].mCoordinates[2] = -135.0;
              a2[2].mChannelDescriptions[0].mChannelFlags = 1124532224;
            }
            else
            {
              if (a1 != 7143429)
                return result;
              for (k = 0; k != 100; k += 20)
              {
                v41 = (char *)a2 + k;
                *((_DWORD *)v41 + 4) = 2;
                *((_DWORD *)v41 + 7) = 1065353216;
              }
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
              a2[2].mNumberChannelDescriptions = 6;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 3;
              a2->mChannelDescriptions[0].mCoordinates[0] = -72.0;
              a2[1].mNumberChannelDescriptions = 1116733440;
              a2[1].mChannelDescriptions[0].mCoordinates[2] = -144.0;
              a2[2].mChannelDescriptions[0].mChannelFlags = 1125122048;
              a2[3].mChannelBitmap = 0;
            }
            goto LABEL_378;
          }
          a2->mChannelDescriptions[0].mChannelLabel = 200;
          a2[1].mChannelLayoutTag = 201;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 202;
          v33 = 203;
          goto LABEL_338;
        }
        if (a1 <= 7340039)
        {
          if (a1 == 7208966)
          {
            for (m = 0; m != 120; m += 20)
            {
              v62 = (char *)a2 + m;
              *((_DWORD *)v62 + 4) = 2;
              *((_DWORD *)v62 + 7) = 1065353216;
            }
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
            a2[2].mNumberChannelDescriptions = 6;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 3;
            a2[3].mChannelDescriptions[0].mChannelFlags = 9;
            a2->mChannelDescriptions[0].mCoordinates[0] = -60.0;
            a2[1].mNumberChannelDescriptions = 1114636288;
            a2[1].mChannelDescriptions[0].mCoordinates[2] = -120.0;
            a2[2].mChannelDescriptions[0].mChannelFlags = 1123024896;
            a2[3].mChannelBitmap = 0;
            a2[3].mChannelDescriptions[0].mCoordinates[1] = 180.0;
          }
          else
          {
            if (a1 != 7274504)
              return result;
            for (n = 0; n != 160; n += 20)
            {
              v28 = (char *)a2 + n;
              *((_DWORD *)v28 + 4) = 2;
              *((_DWORD *)v28 + 7) = 1065353216;
            }
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
            a2[2].mNumberChannelDescriptions = 6;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 3;
            a2[3].mChannelDescriptions[0].mChannelFlags = 9;
            a2[4].mChannelBitmap = 35;
            LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 36;
            a2->mChannelDescriptions[0].mCoordinates[0] = -45.0;
            a2[1].mNumberChannelDescriptions = 1110704128;
            a2[1].mChannelDescriptions[0].mCoordinates[2] = -135.0;
            a2[2].mChannelDescriptions[0].mChannelFlags = 1124532224;
            a2[3].mChannelBitmap = 0;
            a2[3].mChannelDescriptions[0].mCoordinates[1] = 180.0;
            a2[4].mChannelDescriptions[0].mChannelLabel = -1028390912;
            a2[5].mChannelLayoutTag = 1119092736;
          }
          goto LABEL_378;
        }
        if (a1 == 7340040)
        {
          v75 = 0;
          v76 = &a2->mChannelDescriptions[0].mCoordinates[2];
          do
          {
            *((_DWORD *)v76 - 3) = 2;
            *v76 = 1.0;
            v77 = 45.0;
            if (v75 < 4)
              v77 = 0.0;
            *(v76 - 1) = v77;
            ++v75;
            v76 += 5;
          }
          while (v75 != 8);
          a2->mChannelDescriptions[0].mChannelLabel = 1;
          a2[1].mChannelLayoutTag = 2;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
          a2[2].mNumberChannelDescriptions = 6;
          LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 13;
          a2[3].mChannelDescriptions[0].mChannelFlags = 15;
          a2[4].mChannelBitmap = 52;
          LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 54;
          a2->mChannelDescriptions[0].mCoordinates[0] = -45.0;
          a2[1].mNumberChannelDescriptions = 1110704128;
          a2[1].mChannelDescriptions[0].mCoordinates[2] = -135.0;
          a2[2].mChannelDescriptions[0].mChannelFlags = 1124532224;
          a2[3].mChannelBitmap = -1036779520;
          a2[3].mChannelDescriptions[0].mCoordinates[1] = 45.0;
          a2[4].mChannelDescriptions[0].mChannelLabel = -1022951424;
          a2[5].mChannelLayoutTag = 1124532224;
          goto LABEL_378;
        }
        if (a1 != 7405571)
          return result;
        a2->mChannelDescriptions[0].mChannelLabel = 1;
        a2[1].mChannelLayoutTag = 2;
        v22 = 3;
LABEL_303:
        LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = v22;
        goto LABEL_378;
      }
      if (a1 <= 9371654)
      {
        if (a1 <= 8912899)
        {
          if (a1 <= 8650755)
          {
            if (a1 == 8454152)
            {
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
              a2[2].mNumberChannelDescriptions = 6;
              v35 = 3;
LABEL_294:
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v35;
              v32 = 4;
LABEL_295:
              a2[3].mChannelDescriptions[0].mChannelFlags = v32;
              a2[4].mChannelBitmap = 7;
              v21 = 8;
              goto LABEL_367;
            }
            if (a1 == 8519688)
            {
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
              a2[3].mChannelDescriptions[0].mChannelFlags = 6;
              a2[4].mChannelBitmap = 38;
              v21 = 39;
              goto LABEL_367;
            }
            if (a1 != 8585219)
              return result;
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 2;
            v22 = 9;
          }
          else
          {
            if (a1 > 8781827)
            {
              if (a1 != 8781828)
              {
                if (a1 != 8847365)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 2;
                v49 = 4;
                goto LABEL_343;
              }
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              v57 = 4;
LABEL_337:
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = v57;
              v33 = 9;
              goto LABEL_338;
            }
            if (a1 == 8650756)
            {
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
              v33 = 6;
LABEL_338:
              a2[2].mNumberChannelDescriptions = v33;
              goto LABEL_378;
            }
            if (a1 != 8716291)
              return result;
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 2;
            v22 = 4;
          }
          goto LABEL_303;
        }
        if (a1 <= 9109509)
        {
          if (a1 != 8912900)
          {
            if (a1 == 8978437)
            {
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              v63 = 9;
              goto LABEL_370;
            }
            if (a1 != 9043973)
              return result;
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
            v43 = 6;
            goto LABEL_280;
          }
          a2->mChannelDescriptions[0].mChannelLabel = 1;
          a2[1].mChannelLayoutTag = 2;
          v42 = 3;
          goto LABEL_329;
        }
        if (a1 <= 9240581)
        {
          if (a1 != 9109510)
          {
            if (a1 != 9175047)
              return result;
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
            a2[2].mNumberChannelDescriptions = 6;
            v30 = 3;
            goto LABEL_310;
          }
          a2->mChannelDescriptions[0].mChannelLabel = 1;
          a2[1].mChannelLayoutTag = 2;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
          a2[2].mNumberChannelDescriptions = 6;
          v64 = 3;
LABEL_360:
          LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v64;
          v15 = 9;
          goto LABEL_361;
        }
        if (a1 != 9240582)
        {
          if (a1 != 9306119)
            return result;
          a2->mChannelDescriptions[0].mChannelLabel = 3;
          v54 = 1;
LABEL_331:
          a2[1].mChannelLayoutTag = v54;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
          a2[2].mNumberChannelDescriptions = 5;
          v74 = 6;
          goto LABEL_375;
        }
        a2->mChannelDescriptions[0].mChannelLabel = 3;
        v67 = 1;
      }
      else
      {
        if (a1 <= 9895939)
        {
          if (a1 > 9568276)
          {
            if (a1 <= 9764865)
            {
              if (a1 != 9568277)
              {
                if (a1 != 9699335)
                  return result;
                a2->mChannelDescriptions[0].mChannelLabel = 1;
                a2[1].mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
                a2[2].mNumberChannelDescriptions = 6;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 3;
                a2[3].mChannelDescriptions[0].mChannelFlags = 7;
                v25 = 8;
                goto LABEL_377;
              }
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 14;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 10;
              a2[3].mChannelDescriptions[0].mChannelFlags = 11;
              a2[4].mChannelBitmap = 5;
              LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 6;
              a2[5].mChannelDescriptions[0].mChannelLabel = 13;
              a2[6].mChannelLayoutTag = 15;
              LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 35;
              a2[7].mNumberChannelDescriptions = 36;
              LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 44;
              a2[8].mChannelDescriptions[0].mChannelFlags = 9;
              a2[9].mChannelBitmap = 4;
              LODWORD(a2[9].mChannelDescriptions[0].mCoordinates[1]) = 37;
              a2[10].mChannelDescriptions[0].mChannelLabel = 7;
              a2[11].mChannelLayoutTag = 8;
              LODWORD(a2[11].mChannelDescriptions[0].mCoordinates[0]) = 40;
              a2[12].mNumberChannelDescriptions = 41;
              LODWORD(a2[12].mChannelDescriptions[0].mCoordinates[2]) = 45;
LABEL_378:
              if (!(_DWORD)v7)
                return 0;
              do
              {
                SetDefaultChannelPosition((uint64_t)mChannelDescriptions);
                result = 0;
                ++mChannelDescriptions;
                --v7;
              }
              while (v7);
              return result;
            }
            if (a1 != 9764866)
            {
              if (a1 != 9830403)
                return result;
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              v52 = 3;
LABEL_302:
              a2[1].mChannelLayoutTag = v52;
              v22 = 2;
              goto LABEL_303;
            }
            a2->mChannelDescriptions[0].mChannelLabel = 3;
            v20 = 4;
LABEL_348:
            a2[1].mChannelLayoutTag = v20;
            goto LABEL_378;
          }
          if (a1 != 9371655)
          {
            if (a1 != 9437192)
            {
              if (a1 != 9502736)
                return result;
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              a2[1].mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 14;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 10;
              a2[3].mChannelDescriptions[0].mChannelFlags = 11;
              a2[4].mChannelBitmap = 5;
              LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 6;
              a2[5].mChannelDescriptions[0].mChannelLabel = 13;
              a2[6].mChannelLayoutTag = 15;
              LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 35;
              a2[7].mNumberChannelDescriptions = 36;
              LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 44;
              a2[8].mChannelDescriptions[0].mChannelFlags = 9;
              a2[9].mChannelBitmap = 4;
              v38 = 37;
LABEL_270:
              LODWORD(a2[9].mChannelDescriptions[0].mCoordinates[1]) = v38;
              goto LABEL_378;
            }
            a2->mChannelDescriptions[0].mChannelLabel = 3;
            a2[1].mChannelLayoutTag = 1;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
            a2[2].mNumberChannelDescriptions = 5;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
            a2[3].mChannelDescriptions[0].mChannelFlags = 33;
            a2[4].mChannelBitmap = 34;
            v21 = 9;
LABEL_367:
            LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = v21;
            goto LABEL_378;
          }
          a2->mChannelDescriptions[0].mChannelLabel = 3;
          v34 = 1;
          goto LABEL_309;
        }
        if (a1 <= 10158085)
        {
          if (a1 > 10027011)
          {
            if (a1 != 10027012)
            {
              if (a1 != 10092549)
                return result;
              a2->mChannelDescriptions[0].mChannelLabel = 1;
              v47 = 3;
LABEL_279:
              a2[1].mChannelLayoutTag = v47;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
              v43 = 9;
LABEL_280:
              a2[2].mNumberChannelDescriptions = v43;
              v63 = 4;
LABEL_370:
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v63;
              goto LABEL_378;
            }
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 2;
            v42 = 9;
            goto LABEL_329;
          }
          if (a1 != 9895940)
          {
            if (a1 != 9961476)
              return result;
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            v18 = 3;
LABEL_188:
            a2[1].mChannelLayoutTag = v18;
            v42 = 2;
LABEL_329:
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = v42;
            v33 = 4;
            goto LABEL_338;
          }
          a2->mChannelDescriptions[0].mChannelLabel = 1;
          v36 = 3;
LABEL_264:
          a2[1].mChannelLayoutTag = v36;
          v57 = 2;
          goto LABEL_337;
        }
        if (a1 > 10289158)
        {
          if (a1 != 10289159)
          {
            if (a1 != 10354695)
              return result;
            a2->mChannelDescriptions[0].mChannelLabel = 1;
            a2[1].mChannelLayoutTag = 3;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
            a2[2].mNumberChannelDescriptions = 5;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
            a2[3].mChannelDescriptions[0].mChannelFlags = 4;
            v25 = 12;
            goto LABEL_377;
          }
          a2->mChannelDescriptions[0].mChannelLabel = 1;
          v73 = 3;
LABEL_372:
          a2[1].mChannelLayoutTag = v73;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
          a2[2].mNumberChannelDescriptions = 5;
          LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
          v65 = 4;
          goto LABEL_373;
        }
        if (a1 != 10158086)
        {
          if (a1 != 10223623)
            return result;
          a2->mChannelDescriptions[0].mChannelLabel = 1;
          v34 = 3;
LABEL_309:
          a2[1].mChannelLayoutTag = v34;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
          a2[2].mNumberChannelDescriptions = 5;
          v30 = 6;
LABEL_310:
          LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v30;
          a2[3].mChannelDescriptions[0].mChannelFlags = 33;
          v25 = 34;
          goto LABEL_377;
        }
        a2->mChannelDescriptions[0].mChannelLabel = 1;
        v67 = 3;
      }
      a2[1].mChannelLayoutTag = v67;
      LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
      a2[2].mNumberChannelDescriptions = 5;
      v64 = 6;
      goto LABEL_360;
    }
    if (!(_DWORD)v7)
      return 0;
    for (ii = 0; ii != v7; ++ii)
    {
      result = 0;
      mChannelDescriptions->mChannelLabel = ii | 0x40000;
      ++mChannelDescriptions;
    }
  }
  return result;
}

uint64_t SetDefaultChannelPosition(uint64_t result)
{
  int v1;
  int v2;
  int32x2_t v3;

  if ((*(_BYTE *)(result + 4) & 3) != 0)
    return result;
  *(_DWORD *)(result + 4) = 2;
  *(_QWORD *)(result + 12) = 0x3F80000000000000;
  v1 = *(_DWORD *)result;
  if (*(int *)result > 207)
  {
    if (v1 > 300)
    {
      if (v1 == 302)
      {
LABEL_12:
        v2 = 1106247680;
        goto LABEL_44;
      }
      if (v1 != 301)
      {
LABEL_45:
        *(_QWORD *)(result + 4) = 0;
        *(_DWORD *)(result + 16) = 0;
        return result;
      }
    }
    else if (v1 != 208)
    {
      if (v1 != 209)
        goto LABEL_45;
      goto LABEL_12;
    }
LABEL_11:
    v2 = -1041235968;
LABEL_44:
    *(_DWORD *)(result + 8) = v2;
    return result;
  }
  switch(v1)
  {
    case 1:
      goto LABEL_11;
    case 2:
      goto LABEL_12;
    case 3:
      *(_DWORD *)(result + 8) = 0;
      return result;
    case 5:
    case 10:
      v2 = -1025769472;
      goto LABEL_44;
    case 6:
    case 11:
      v2 = 1121714176;
      goto LABEL_44;
    case 7:
      v2 = -1049624576;
      goto LABEL_44;
    case 8:
      v2 = 1097859072;
      goto LABEL_44;
    case 9:
    case 44:
      v2 = 1127481344;
      goto LABEL_44;
    case 12:
      v3 = (int32x2_t)0x42B4000000000000;
      goto LABEL_42;
    case 13:
      v3 = (int32x2_t)0x42340000C2340000;
      goto LABEL_42;
    case 14:
      v3 = (int32x2_t)0x41F0000000000000;
      goto LABEL_42;
    case 15:
      v3 = vdup_n_s32(0x42340000u);
      goto LABEL_42;
    case 16:
      v3 = (int32x2_t)0x41F00000C3160000;
      goto LABEL_42;
    case 17:
      v3 = (int32x2_t)0x41F0000043340000;
      goto LABEL_42;
    case 18:
      v3 = (int32x2_t)0x41F0000043160000;
      goto LABEL_42;
    case 33:
    case 63:
      v2 = -1021968384;
      goto LABEL_44;
    case 34:
    case 64:
      v2 = 1125515264;
      goto LABEL_44;
    case 35:
    case 65:
      v2 = -1032847360;
      goto LABEL_44;
    case 36:
    case 66:
      v2 = 1114636288;
      goto LABEL_44;
    case 37:
      v2 = -1036779520;
      goto LABEL_44;
    case 49:
      v3 = (int32x2_t)0x42340000C2B40000;
      goto LABEL_42;
    case 51:
      v3 = (int32x2_t)0x4234000042B40000;
      goto LABEL_42;
    case 52:
      v3 = (int32x2_t)0x42340000C3070000;
      goto LABEL_42;
    case 53:
      v3 = (int32x2_t)0x4234000043340000;
      goto LABEL_42;
    case 54:
      v3 = (int32x2_t)0x4234000043070000;
      goto LABEL_42;
    case 55:
      v2 = -1028390912;
      goto LABEL_44;
    case 56:
      v2 = 1119092736;
      goto LABEL_44;
    case 57:
      v3 = (int32x2_t)0xC1700000C2340000;
      goto LABEL_42;
    case 58:
      v3 = (int32x2_t)0xC170000042340000;
      goto LABEL_42;
    case 59:
      v3 = (int32x2_t)0xC170000000000000;
      goto LABEL_42;
    case 60:
      v3 = (int32x2_t)0x420C0000C2DC0000;
      goto LABEL_42;
    case 61:
      v3 = (int32x2_t)0x420C000042DC0000;
LABEL_42:
      *(int32x2_t *)(result + 8) = v3;
      break;
    case 62:
      v2 = 1110704128;
      goto LABEL_44;
    default:
      goto LABEL_45;
  }
  return result;
}

void DSPGraph::Interpreter::parseGraphNameCommand(DSPGraph::Interpreter *this, const char **a2)
{
  const std::string::value_type *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void *v7[2];
  uint64_t v8;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)v7) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "parseGraphNameCommand");
    std::string::basic_string[abi:ne180100]<0>(&v4, "expected a string in 'graphName' command");
    DSPGraph::ThrowException(1886548769, &v6, 1152, &v5, &v4);
  }
  if (v8 >= 0)
    v3 = (const std::string::value_type *)v7;
  else
    v3 = (const std::string::value_type *)v7[0];
  std::string::__assign_external((std::string *)(*((_QWORD *)this + 1) + 408), v3);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
}

void sub_18EE63154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

uint64_t AudioFormatProperty_MatrixMixMap(const AudioChannelLayout *const *a1, const AudioChannelLayout *a2, float *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int mChannelLayoutTag;
  int v15;
  size_t v16;
  int8x8_t v17;
  unsigned int *v18;
  int8x8_t v19;
  AudioChannelLayout *v20;
  uint64_t mNumberChannelDescriptions;
  AudioChannelDescription *mChannelDescriptions;
  int mChannelLabel;
  uint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  AudioChannelDescription *v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  HOA *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  int *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int v50;
  char v51;
  int *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned __int16 *v58;
  unsigned int v59;
  unsigned int v60;
  float v61;
  uint64_t v62;
  AudioChannelLayout *v63;
  int v64;
  int v65;
  unsigned int v66;
  unint64_t v67;
  int ABitmapForCompare;
  int v69;
  uint64_t v70;
  int v71;
  AudioChannelLabel v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  AudioChannelLayout *v81;
  int v82;
  float *v83;
  float v84;
  float *v85;
  unsigned int v86;
  uint64_t v87;
  _BYTE *v88;
  int v89;
  unsigned int v90;
  _BOOL4 v91;
  _BOOL4 v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  signed int v96;
  float v97;
  int v98;
  int v99;
  uint64_t v100;
  AudioChannelLayout *v101;
  int v102;
  float *v103;
  float v104;
  uint64_t v105;
  AudioChannelLayout *v106;
  int v107;
  float *v108;
  float v109;
  float v110;
  uint64_t v111;
  AudioChannelLayout *v112;
  int v113;
  float *v114;
  int v115;
  AudioChannelLayout *v116;
  uint64_t v117;
  AudioChannelLayout *v118;
  int v119;
  float *v120;
  float v121;
  unint64_t v122;
  unint64_t v123;
  _DWORD *v124;
  _BYTE *v125;
  int64_t v126;
  NSObject *v127;
  uint64_t v128;
  AudioChannelLayout *v129;
  int v130;
  float v131;
  float *v132;
  int v133;
  uint64_t v134;
  AudioChannelLayout *v135;
  int v136;
  float *v137;
  float v138;
  float v139;
  uint64_t v140;
  AudioChannelLayout *v141;
  int v142;
  float *v143;
  AudioChannelLayout *v144;
  uint64_t v145;
  AudioChannelLayout *v146;
  int v147;
  int v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  char *v154;
  int v155;
  int v156;
  int v157;
  float v158;
  uint64_t v159;
  AudioChannelLayout *v160;
  int v161;
  float *v162;
  int v163;
  uint64_t v164;
  AudioChannelLayout *v165;
  int v166;
  float *v167;
  float v168;
  AudioChannelLayout *v169;
  float v170;
  uint64_t v171;
  AudioChannelLayout *v172;
  int v173;
  float *v174;
  float v175;
  uint64_t v176;
  AudioChannelLayout *v177;
  int v178;
  float *v179;
  float v180;
  uint64_t v181;
  AudioChannelLayout *v182;
  int v183;
  float *v184;
  uint64_t v185;
  AudioChannelLayout *v186;
  int v187;
  float *v188;
  float v189;
  float v190;
  uint64_t v191;
  AudioChannelLayout *v192;
  int v193;
  float *v194;
  uint64_t v195;
  AudioChannelLayout *v196;
  int v197;
  uint64_t v198;
  AudioChannelLayout *v199;
  int v200;
  uint64_t v201;
  AudioChannelLayout *v202;
  int v203;
  uint64_t v204;
  AudioChannelLayout *v205;
  int v206;
  uint64_t v207;
  AudioChannelLayout *v208;
  int v209;
  uint64_t v210;
  AudioChannelLayout *v211;
  int v212;
  int v213;
  int v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  AudioChannelLayout *v218;
  uint64_t v219;
  _BOOL4 v220;
  int v221;
  void *__p[3];
  _BYTE *v223;
  _BYTE *v224;
  uint64_t v225;
  _BYTE *v226;
  _BYTE *v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  void *__dst;
  AudioChannelLayout *v233;
  uint8_t buf[24];
  __int16 v235;
  unsigned int v236;
  unsigned int v237[14];
  const void *v238;
  uint64_t v239;
  uint64_t v240;

  v240 = *MEMORY[0x1E0C80C00];
  __dst = 0;
  v233 = 0;
  v231 = 0;
  v8 = AudioFormatProperty_NumberOfChannelsForLayout((const AudioChannelLayout *)a1, &v231);
  if ((_DWORD)v8)
  {
    v9 = v8;
    goto LABEL_4;
  }
  v230 = 0;
  v9 = AudioFormatProperty_NumberOfChannelsForLayout(a2, &v230);
  if (!(_DWORD)v9)
  {
    v12 = v230;
    v11 = v231;
    v13 = v230 * v231;
    if (!a4)
    {
      v9 = 0;
      *(_DWORD *)a3 = v13;
      goto LABEL_4;
    }
    if (v13 > *(_DWORD *)a3)
    {
      v9 = 4294967246;
      goto LABEL_4;
    }
    *(_DWORD *)a3 = v13;
    mChannelLayoutTag = a2->mChannelLayoutTag;
    v15 = *(_DWORD *)a1;
    v228 = *(_DWORD *)a1;
    v229 = mChannelLayoutTag;
    v219 = v11;
    v16 = (20 * v11 + 12);
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v233, v16, 0);
    CADeprecated::CAAutoFree<unsigned char>::allocBytes(&__dst, (20 * v12 + 12), 0);
    if (mChannelLayoutTag == 0x10000)
    {
      v18 = (unsigned int *)__dst;
      AudioFormatProperty_ChannelLayoutForBitmap(a2->mChannelBitmap, (AudioChannelLayout *)__dst, v17);
      v229 = AudioFormatProperty_LayoutTagForBitmap(a2->mChannelBitmap);
    }
    else if (mChannelLayoutTag)
    {
      v18 = (unsigned int *)__dst;
      v9 = AudioFormatProperty_ChannelLayoutForTag(a2->mChannelLayoutTag, (AudioChannelLayout *)__dst);
      if ((_DWORD)v9)
        goto LABEL_4;
    }
    else
    {
      v18 = (unsigned int *)__dst;
      memcpy(__dst, a2, (20 * v12 + 12));
      AudioFormatProperty_TagForChannelLayout((const AudioChannelLayout *)v18, &v229);
    }
    if (v15 == 0x10000)
    {
      v20 = v233;
      AudioFormatProperty_ChannelLayoutForBitmap(*((_DWORD *)a1 + 1), v233, v19);
      v228 = AudioFormatProperty_LayoutTagForBitmap(*((_DWORD *)a1 + 1));
    }
    else if (v15)
    {
      v20 = v233;
      v9 = AudioFormatProperty_ChannelLayoutForTag(*(_DWORD *)a1, v233);
      if ((_DWORD)v9)
        goto LABEL_4;
    }
    else
    {
      v20 = v233;
      memcpy(v233, a1, v16);
      AudioFormatProperty_TagForChannelLayout(v20, &v228);
    }
    mNumberChannelDescriptions = v20->mNumberChannelDescriptions;
    if ((_DWORD)mNumberChannelDescriptions)
    {
      mChannelDescriptions = v20->mChannelDescriptions;
      do
      {
        mChannelLabel = mChannelDescriptions->mChannelLabel;
        if ((int)mChannelDescriptions->mChannelLabel > 300)
        {
          if (mChannelLabel == 301)
          {
LABEL_30:
            mChannelLabel = 1;
          }
          else if (mChannelLabel == 302)
          {
LABEL_29:
            mChannelLabel = 2;
          }
        }
        else
        {
          switch(mChannelLabel)
          {
            case 206:
            case 208:
              goto LABEL_30;
            case 207:
            case 209:
              goto LABEL_29;
            default:
              if (mChannelLabel == 42)
                mChannelLabel = 3;
              break;
          }
        }
        mChannelDescriptions->mChannelLabel = mChannelLabel;
        ++mChannelDescriptions;
        --mNumberChannelDescriptions;
      }
      while (mNumberChannelDescriptions);
    }
    v24 = v18[2];
    if ((_DWORD)v24)
    {
      v25 = (int *)(v18 + 3);
      do
      {
        v26 = *v25;
        if (*v25 > 300)
        {
          if (v26 == 301)
          {
LABEL_41:
            v26 = 1;
          }
          else if (v26 == 302)
          {
LABEL_40:
            v26 = 2;
          }
        }
        else
        {
          switch(v26)
          {
            case 206:
            case 208:
              goto LABEL_41;
            case 207:
            case 209:
              goto LABEL_40;
            default:
              if (v26 == 42)
                v26 = 3;
              break;
          }
        }
        *v25 = v26;
        v25 += 5;
        --v24;
      }
      while (v24);
    }
    octagonalCompatibility(v20, (AudioChannelLayout *)v18);
    singleSurroundPairCompatibility(v20, (AudioChannelLayout *)v18);
    bzero(a4, 4 * *(unsigned int *)a3);
    v27 = v18[2];
    if ((_DWORD)v27)
    {
      v28 = (char *)(v18 + 3);
      v29 = v27 - 1;
      do
      {
        v30 = *((unsigned __int16 *)v28 + 1) << 16;
        v31 = v29-- != 0;
        v32 = v31;
        if (v30 != 0x10000)
          break;
        v28 += 20;
      }
      while ((v32 & 1) != 0);
      if (v30 == 0x10000)
      {
        v33 = v20->mNumberChannelDescriptions;
        if (!(_DWORD)v33)
          goto LABEL_102;
        v34 = v20->mChannelDescriptions;
        v35 = v33 - 1;
        do
        {
          v36 = HIWORD(v34->mChannelLabel) << 16;
          v37 = v36 == 0x10000 || v35-- == 0;
          ++v34;
        }
        while (!v37);
        if (v36 != 0x10000)
        {
LABEL_102:
          if ((_DWORD)v12)
          {
            v57 = 0;
            v58 = (unsigned __int16 *)(v18 + 3);
            do
            {
              v60 = *v58;
              v58 += 10;
              v59 = v60;
              if (v60 < v219)
                a4[v57 + v59 * (_DWORD)v12] = 1065353216;
              ++v57;
            }
            while (v12 != v57);
          }
          goto LABEL_160;
        }
      }
    }
    v38 = (HOA *)v228;
    if (!v228)
    {
      v47 = *((unsigned int *)a1 + 2);
      if ((_DWORD)v47)
      {
        v48 = (char *)a1 + 12;
        v49 = v47 - 1;
        do
        {
          v50 = *((unsigned __int16 *)v48 + 1) << 16;
          v31 = v49-- != 0;
          v51 = v31;
          if (v50 != 0x10000)
            break;
          v48 += 20;
        }
        while ((v51 & 1) != 0);
        if (v50 == 0x10000)
        {
          v52 = (int *)a1 + 3;
          v53 = -65536;
          do
          {
            v55 = *v52;
            v52 += 5;
            v54 = v55;
            if (v55 - 0x10000 < v12)
              a4[v53 + v54] = 1065353216;
            v53 += v12;
            --v47;
          }
          while (v47);
          goto LABEL_160;
        }
      }
    }
    if ((_DWORD)v219)
    {
      v39 = 0;
      v40 = 0;
      do
      {
        v41 = v20->mChannelDescriptions[v39].mChannelLabel;
        if (HIWORD(v41)
          || (v41 <= 0x2D ? (v42 = ((1 << v41) & 0x3B0000070000) == 0) : (v42 = 1),
              !v42 || v41 - 304 < 2 || v41 == 400))
        {
          v43 = (int *)(v18 + 3);
          v44 = v12;
          if ((_DWORD)v12)
          {
            do
            {
              v45 = *v43;
              v43 += 5;
              if (v41 == v45)
                a4[v40] = 1065353216;
              ++v40;
              --v44;
            }
            while (v44);
          }
        }
        else
        {
          v40 += v12;
        }
        ++v39;
      }
      while (v39 != v219);
    }
    if ((_DWORD)v38 == 6750210)
    {
      v46 = v229;
      if ((int)v229 > 6750209)
      {
        if ((int)v229 > 6946817)
        {
          if (v229 == 6946818)
            goto LABEL_112;
          if (v229 == 8519688)
            goto LABEL_116;
          goto LABEL_117;
        }
        goto LABEL_100;
      }
    }
    else
    {
      if ((_DWORD)v38 != 8519688)
        goto LABEL_117;
      v46 = v229;
      if ((int)v229 > 6750209)
      {
        if ((int)v229 > 6946817)
        {
          if (v229 != 6946818)
          {
            if (v229 == 8519688)
            {
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 1, (float *)a4, 1.0);
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 2, 2, (float *)a4, 1.0);
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 3, 3, (float *)a4, 1.0);
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 4, 4, (float *)a4, 1.0);
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 5, 5, (float *)a4, 1.0);
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 6, 6, (float *)a4, 1.0);
LABEL_116:
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 38, 38, (float *)a4, 1.0);
              v61 = 1.0;
              v62 = (uint64_t)v20;
              v63 = (AudioChannelLayout *)v18;
              v64 = 39;
LABEL_157:
              v65 = 39;
              goto LABEL_158;
            }
            goto LABEL_117;
          }
LABEL_112:
          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 38, 1, (float *)a4, 1.0);
          v61 = 1.0;
          v62 = (uint64_t)v20;
          v63 = (AudioChannelLayout *)v18;
          v64 = 39;
          goto LABEL_113;
        }
LABEL_100:
        if (v46 == 6750210)
          goto LABEL_116;
        v56 = 6881282;
        goto LABEL_111;
      }
    }
    if (v46 == 6553601)
    {
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 38, 3, (float *)a4, 1.0);
      v61 = 1.0;
      v62 = (uint64_t)v20;
      v63 = (AudioChannelLayout *)v18;
      v64 = 39;
      goto LABEL_146;
    }
    if (v46 == 6619138)
      goto LABEL_112;
    v56 = 6684674;
LABEL_111:
    if (v46 == v56)
      goto LABEL_112;
LABEL_117:
    HIDWORD(v67) = (_DWORD)v38 - 6619138;
    LODWORD(v67) = (_DWORD)v38 - 6619138;
    v66 = v67 >> 16;
    if (v66 > 5 || ((1 << v66) & 0x33) == 0)
      goto LABEL_126;
    if ((int)v229 <= 6750209)
    {
      if (v229 == -267386874)
      {
        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 1, (float *)a4, 1.0);
        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 2, 2, (float *)a4, 1.0);
      }
      else if (v229 != -266338299)
      {
LABEL_126:
        if ((_DWORD)v38 != 6553601)
          goto LABEL_131;
        if (v229 == -267386874)
        {
          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 3, 1, (float *)a4, 1.0);
          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 3, 2, (float *)a4, 1.0);
          v61 = 1.0;
          v62 = (uint64_t)v20;
          v63 = (AudioChannelLayout *)v18;
          v64 = 3;
          v65 = 0x20000;
          goto LABEL_158;
        }
        if (v229 != -266338299)
        {
          if (v229 == 6684674)
          {
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 3, 1, (float *)a4, 1.0);
            v61 = 1.0;
            v62 = (uint64_t)v20;
            v63 = (AudioChannelLayout *)v18;
            v64 = 3;
            goto LABEL_113;
          }
LABEL_131:
          ChannelLabelReduceMatrixStereo((uint64_t)v20);
          ChannelLabelReduceMatrixStereo((uint64_t)v18);
          ABitmapForCompare = AudioFormatProperty_GetABitmapForCompare(a2);
          v69 = AudioFormatProperty_GetABitmapForCompare((const AudioChannelLayout *)a1);
          if (ABitmapForCompare && v69 && (v69 & ~ABitmapForCompare & 0xFFFFFFF7) == 0)
          {
            if ((_DWORD)v219)
            {
              v70 = 0;
              v71 = 0;
              do
              {
                if ((_DWORD)v12)
                {
                  v72 = v20->mChannelDescriptions[v70].mChannelLabel;
                  v73 = (int *)(v18 + 3);
                  v74 = v12;
                  v75 = v219;
                  do
                  {
                    v76 = *v73;
                    v73 += 5;
                    if (v72 == v76)
                      a4[v71] = 1065353216;
                    ++v71;
                    --v74;
                  }
                  while (v74);
                }
                else
                {
                  v75 = v219;
                }
                v9 = 0;
                ++v70;
              }
              while (v70 != v75);
              goto LABEL_4;
            }
LABEL_160:
            v9 = 0;
            goto LABEL_4;
          }
          v77 = AudioFormatProperty_GetABitmapForCompare((const AudioChannelLayout *)v18);
          v78 = AudioFormatProperty_GetABitmapForCompare(v20);
          v79 = v78;
          v218 = (AudioChannelLayout *)v18;
          if (v77 && v78 && ((v78 | v77) & 0x825D0000) == 0)
          {
            if ((v78 & 4) == 0)
              goto LABEL_218;
            if ((v77 & 4) != 0)
            {
              v84 = 1.0;
              v80 = (uint64_t)v20;
              v81 = (AudioChannelLayout *)v18;
              v82 = 3;
              v83 = (float *)a4;
            }
            else
            {
              if ((v77 & 3) == 0)
                goto LABEL_218;
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 3, 1, (float *)a4, 0.70711);
              v80 = (uint64_t)v20;
              v81 = (AudioChannelLayout *)v18;
              v82 = 2;
              v83 = (float *)a4;
              v84 = 0.70711;
            }
            SetMatrixCoefficient(v80, v81, 3, v82, v83, v84);
LABEL_218:
            if ((v79 & 3) == 0)
              goto LABEL_224;
            if ((v77 & 7) == 4)
            {
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 3, (float *)a4, 0.70711);
              v100 = (uint64_t)v20;
              v101 = (AudioChannelLayout *)v18;
              v102 = 3;
              v103 = (float *)a4;
              v104 = 0.70711;
            }
            else
            {
              if ((v77 & 3) == 0)
                goto LABEL_224;
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 1, (float *)a4, 1.0);
              v104 = 1.0;
              v100 = (uint64_t)v20;
              v101 = (AudioChannelLayout *)v18;
              v102 = 2;
              v103 = (float *)a4;
            }
            SetMatrixCoefficient(v100, v101, 2, v102, v103, v104);
LABEL_224:
            if ((v79 & 0x2000) == 0)
              goto LABEL_232;
            if ((v77 & 0x2000) != 0)
            {
              v109 = 1.0;
              v105 = (uint64_t)v20;
              v106 = (AudioChannelLayout *)v18;
              v107 = 14;
            }
            else
            {
              if ((v77 & 0x5000) != 0)
              {
                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 14, 13, (float *)a4, 0.70711);
                v105 = (uint64_t)v20;
                v106 = (AudioChannelLayout *)v18;
                v107 = 15;
LABEL_228:
                v108 = (float *)a4;
                v109 = 0.70711;
LABEL_231:
                SetMatrixCoefficient(v105, v106, 14, v107, v108, v109);
                goto LABEL_232;
              }
              if ((v77 & 7) != 4)
              {
                if ((v77 & 3) == 0)
                {
LABEL_232:
                  v221 = v77 & 0x30;
                  if ((v79 & 0xC0) == 0)
                    goto LABEL_259;
                  if ((~v77 & 0xC0) != 0)
                  {
                    if ((v77 & 7) == 4)
                    {
                      v115 = 1060439283;
                      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 7, 3, (float *)a4, 0.70711);
                      v111 = (uint64_t)v20;
                      v112 = (AudioChannelLayout *)v18;
                      v113 = 3;
                    }
                    else
                    {
                      if ((v77 & 7) == 7)
                      {
                        v115 = 1060439283;
                        v116 = (AudioChannelLayout *)v18;
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 7, 1, (float *)a4, 0.70711);
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 7, 3, (float *)a4, 0.70711);
                        v117 = (uint64_t)v20;
                        v118 = (AudioChannelLayout *)v18;
                        v119 = 3;
                        v120 = (float *)a4;
                        v121 = 0.70711;
                      }
                      else
                      {
                        if ((v77 & 3) == 0)
                          goto LABEL_259;
                        v115 = 1063105495;
                        v116 = (AudioChannelLayout *)v18;
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 7, 1, (float *)a4, 0.86603);
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 7, 2, (float *)a4, 0.5);
                        v121 = 0.5;
                        v117 = (uint64_t)v20;
                        v118 = (AudioChannelLayout *)v18;
                        v119 = 1;
                        v120 = (float *)a4;
                      }
                      SetMatrixCoefficient(v117, v118, 8, v119, v120, v121);
                      v111 = (uint64_t)v20;
                      v112 = v116;
                      v113 = 2;
                    }
                    v114 = (float *)a4;
                    v110 = *(float *)&v115;
                  }
                  else
                  {
                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 7, 7, (float *)a4, 1.0);
                    v110 = 1.0;
                    v111 = (uint64_t)v20;
                    v112 = (AudioChannelLayout *)v18;
                    v113 = 8;
                    v114 = (float *)a4;
                  }
                  SetMatrixCoefficient(v111, v112, 8, v113, v114, v110);
LABEL_259:
                  if ((v79 & 0x100) == 0)
                    goto LABEL_287;
                  if ((v77 & 0x100) != 0)
                  {
                    v131 = 1.0;
                    v128 = (uint64_t)v20;
                    v129 = (AudioChannelLayout *)v18;
                    v130 = 9;
                  }
                  else
                  {
                    if ((v77 & 0x60000000) != 0)
                    {
                      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 9, 33, (float *)a4, 0.70711);
                      v128 = (uint64_t)v20;
                      v129 = (AudioChannelLayout *)v18;
                      v130 = 34;
LABEL_285:
                      v132 = (float *)a4;
                      v131 = 0.70711;
                      goto LABEL_286;
                    }
                    if ((v77 & 0x30) != 0)
                    {
                      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 9, 5, (float *)a4, 0.70711);
                      v128 = (uint64_t)v20;
                      v129 = (AudioChannelLayout *)v18;
                      v130 = 6;
                      goto LABEL_285;
                    }
                    if ((v77 & 3) != 0)
                    {
                      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 9, 1, (float *)a4, 0.70711);
                      v128 = (uint64_t)v20;
                      v129 = (AudioChannelLayout *)v18;
                      v130 = 2;
                      goto LABEL_285;
                    }
                    if ((v77 & 4) == 0)
                    {
LABEL_287:
                      if ((v79 & 0x30) == 0)
                        goto LABEL_297;
                      if ((v77 & 0x130) == 0x100)
                      {
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 5, 9, (float *)a4, 0.70711);
                        v134 = (uint64_t)v20;
                        v135 = (AudioChannelLayout *)v18;
                        v136 = 9;
LABEL_290:
                        v137 = (float *)a4;
                        v138 = 0.70711;
LABEL_296:
                        SetMatrixCoefficient(v134, v135, 6, v136, v137, v138);
                        goto LABEL_297;
                      }
                      if ((v77 & 0x30) != 0)
                      {
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 5, 5, (float *)a4, 1.0);
                        v138 = 1.0;
                        v134 = (uint64_t)v20;
                        v135 = (AudioChannelLayout *)v18;
                        v136 = 6;
                      }
                      else
                      {
                        if ((v77 & 7) != 4)
                        {
                          if ((v77 & 3) == 0)
                          {
LABEL_297:
                            if ((v79 & 0x60000000) == 0)
                              goto LABEL_336;
                            if ((~v77 & 0x60000000) == 0)
                            {
                              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 33, 33, (float *)a4, 1.0);
                              v139 = 1.0;
                              v140 = (uint64_t)v20;
                              v141 = (AudioChannelLayout *)v18;
                              v142 = 34;
                              v143 = (float *)a4;
LABEL_335:
                              SetMatrixCoefficient(v140, v141, 34, v142, v143, v139);
LABEL_336:
                              v157 = v77 & 0xA00000;
                              if ((v79 & 0x18000000) == 0)
                                goto LABEL_345;
                              if ((~v77 & 0x18000000) != 0)
                              {
                                if ((v77 & 3) != 0)
                                {
                                  SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 35, 1, (float *)a4, 0.70711);
                                  v159 = (uint64_t)v20;
                                  v160 = (AudioChannelLayout *)v18;
                                  v161 = 2;
                                }
                                else
                                {
                                  if ((v77 & 4) == 0)
                                    goto LABEL_345;
                                  SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 35, 3, (float *)a4, 0.70711);
                                  v159 = (uint64_t)v20;
                                  v160 = (AudioChannelLayout *)v18;
                                  v161 = 3;
                                }
                                v162 = (float *)a4;
                                v158 = 0.70711;
                              }
                              else
                              {
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 35, 35, (float *)a4, 1.0);
                                v158 = 1.0;
                                v159 = (uint64_t)v20;
                                v160 = (AudioChannelLayout *)v18;
                                v161 = 36;
                                v162 = (float *)a4;
                              }
                              SetMatrixCoefficient(v159, v160, 36, v161, v162, v158);
LABEL_345:
                              v163 = v77 & 0x600;
                              if ((v79 & 0x5000) == 0)
                                goto LABEL_352;
                              if ((v77 & 0x7000) == 0x2000)
                              {
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 13, 14, (float *)a4, 0.70711);
                                v164 = (uint64_t)v20;
                                v165 = (AudioChannelLayout *)v18;
                                v166 = 14;
LABEL_348:
                                v167 = (float *)a4;
                                v168 = 0.70711;
LABEL_351:
                                SetMatrixCoefficient(v164, v165, 15, v166, v167, v168);
                                goto LABEL_352;
                              }
                              if ((v77 & 0x5000) != 0)
                              {
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 13, 13, (float *)a4, 1.0);
                                v168 = 1.0;
                                v164 = (uint64_t)v20;
                                v165 = (AudioChannelLayout *)v18;
                                v166 = 15;
                                v167 = (float *)a4;
                                goto LABEL_351;
                              }
                              if (v157)
                              {
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 13, 49, (float *)a4, 0.70711);
                                v164 = (uint64_t)v20;
                                v165 = (AudioChannelLayout *)v18;
                                v166 = 51;
                                goto LABEL_348;
                              }
                              if (v163 == 1536)
                              {
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 13, 10, (float *)a4, 0.70711);
                                v210 = (uint64_t)v20;
                                v211 = (AudioChannelLayout *)v18;
                                v212 = 11;
                              }
                              else
                              {
                                if ((v77 & 3) == 0)
                                {
                                  if ((v77 & 4) != 0)
                                  {
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 13, 3, (float *)a4, 0.70711);
                                    v164 = (uint64_t)v20;
                                    v165 = (AudioChannelLayout *)v18;
                                    v166 = 3;
                                    goto LABEL_348;
                                  }
LABEL_352:
                                  v169 = (AudioChannelLayout *)v18;
                                  if ((v79 & 0xA00000) == 0)
                                    goto LABEL_361;
                                  if (v157 == 10485760)
                                  {
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 49, (float *)a4, 1.0);
                                    v170 = 1.0;
                                    v171 = (uint64_t)v20;
                                    v172 = (AudioChannelLayout *)v18;
                                    v173 = 51;
                                    v174 = (float *)a4;
LABEL_360:
                                    SetMatrixCoefficient(v171, v172, 51, v173, v174, v170);
                                    goto LABEL_361;
                                  }
                                  if ((~v77 & 0x5005000) == 0)
                                  {
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 13, (float *)a4, 0.70711);
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 52, (float *)a4, 0.70711);
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 51, 15, (float *)a4, 0.70711);
                                    v171 = (uint64_t)v20;
                                    v172 = (AudioChannelLayout *)v18;
                                    v173 = 54;
LABEL_359:
                                    v174 = (float *)a4;
                                    v170 = 0.70711;
                                    goto LABEL_360;
                                  }
                                  if (v221 == 48)
                                  {
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 5, (float *)a4, 0.70711);
                                    v171 = (uint64_t)v20;
                                    v172 = (AudioChannelLayout *)v18;
                                    v173 = 6;
                                    goto LABEL_359;
                                  }
                                  if (v163 == 1536)
                                  {
                                    v169 = (AudioChannelLayout *)v18;
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 10, (float *)a4, 0.70711);
                                    v198 = (uint64_t)v20;
                                    v199 = (AudioChannelLayout *)v18;
                                    v200 = 11;
                                  }
                                  else
                                  {
                                    if ((v77 & 3) == 0)
                                    {
                                      v169 = (AudioChannelLayout *)v18;
                                      if ((v77 & 4) != 0)
                                      {
                                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 3, (float *)a4, 0.70711);
                                        v171 = (uint64_t)v20;
                                        v172 = (AudioChannelLayout *)v18;
                                        v173 = 3;
                                        goto LABEL_359;
                                      }
LABEL_361:
                                      if ((v79 & 0x5000000) == 0)
                                      {
LABEL_368:
                                        if ((v79 & 0x600) == 0)
                                          goto LABEL_375;
                                        if (v163 == 1536)
                                          goto LABEL_370;
                                        if ((~v77 & 0x5000000) == 0)
                                        {
                                          SetMatrixCoefficient((uint64_t)v20, v169, 10, 52, (float *)a4, 1.0);
                                          v180 = 1.0;
                                          v181 = (uint64_t)v20;
                                          v182 = v169;
                                          v183 = 54;
                                          goto LABEL_373;
                                        }
                                        if (v157)
                                        {
                                          SetMatrixCoefficient((uint64_t)v20, v169, 10, 49, (float *)a4, 0.70711);
                                          v181 = (uint64_t)v20;
                                          v182 = v169;
                                          v183 = 51;
LABEL_383:
                                          v184 = (float *)a4;
                                          v180 = 0.70711;
                                          goto LABEL_374;
                                        }
                                        if ((~v77 & 0x60000000) == 0)
                                        {
                                          v169 = (AudioChannelLayout *)v18;
                                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 10, 33, (float *)a4, 0.70711);
                                          v207 = (uint64_t)v20;
                                          v208 = (AudioChannelLayout *)v18;
                                          v209 = 34;
LABEL_440:
                                          SetMatrixCoefficient(v207, v208, 11, v209, (float *)a4, 0.70711);
                                          goto LABEL_375;
                                        }
                                        if (v221 == 48)
                                        {
                                          v169 = (AudioChannelLayout *)v18;
                                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 10, 5, (float *)a4, 0.70711);
                                          v207 = (uint64_t)v20;
                                          v208 = (AudioChannelLayout *)v18;
                                          v209 = 6;
                                          goto LABEL_440;
                                        }
                                        if ((v77 & 3) != 0)
                                        {
                                          v169 = (AudioChannelLayout *)v18;
                                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 10, 1, (float *)a4, 0.70711);
                                          v207 = (uint64_t)v20;
                                          v208 = (AudioChannelLayout *)v18;
                                          v209 = 2;
                                          goto LABEL_440;
                                        }
                                        v169 = (AudioChannelLayout *)v18;
                                        if ((v77 & 4) != 0)
                                        {
                                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 10, 3, (float *)a4, 0.70711);
                                          v181 = (uint64_t)v20;
                                          v182 = (AudioChannelLayout *)v18;
                                          v183 = 3;
                                          goto LABEL_383;
                                        }
LABEL_375:
                                        if ((v79 & 0x800) == 0)
                                          goto LABEL_387;
                                        if ((v77 & 0x800) != 0)
                                        {
                                          v189 = 1.0;
                                          v185 = (uint64_t)v20;
                                          v186 = v169;
                                          v187 = 12;
                                        }
                                        else if ((v77 & 0x100) != 0)
                                        {
                                          v189 = 1.0;
                                          v185 = (uint64_t)v20;
                                          v186 = v169;
                                          v187 = 9;
                                        }
                                        else
                                        {
                                          if ((~v77 & 0x60000000) == 0)
                                          {
                                            SetMatrixCoefficient((uint64_t)v20, v169, 12, 33, (float *)a4, 0.70711);
                                            v185 = (uint64_t)v20;
                                            v186 = v169;
                                            v187 = 34;
                                            v188 = (float *)a4;
                                            v189 = 0.70711;
LABEL_386:
                                            SetMatrixCoefficient(v185, v186, 12, v187, v188, v189);
                                            goto LABEL_387;
                                          }
                                          if (v221 == 48)
                                          {
                                            v169 = (AudioChannelLayout *)v18;
                                            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 12, 5, (float *)a4, 0.70711);
                                            v201 = (uint64_t)v20;
                                            v202 = (AudioChannelLayout *)v18;
                                            v203 = 6;
LABEL_420:
                                            SetMatrixCoefficient(v201, v202, 12, v203, (float *)a4, 0.70711);
                                            goto LABEL_387;
                                          }
                                          if ((v77 & 3) != 0)
                                          {
                                            v169 = (AudioChannelLayout *)v18;
                                            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 12, 1, (float *)a4, 0.70711);
                                            v201 = (uint64_t)v20;
                                            v202 = (AudioChannelLayout *)v18;
                                            v203 = 2;
                                            goto LABEL_420;
                                          }
                                          v169 = (AudioChannelLayout *)v18;
                                          if ((v77 & 4) == 0)
                                          {
LABEL_387:
                                            if ((v79 & 0x28000) == 0)
                                            {
LABEL_394:
                                              if ((v77 & v79 & 8) == 0)
                                                goto LABEL_160;
                                              v61 = 1.0;
                                              v62 = (uint64_t)v20;
                                              v63 = v169;
                                              v64 = 4;
                                              v65 = 4;
                                              goto LABEL_158;
                                            }
                                            if ((~v77 & 0x28000) == 0)
                                            {
                                              SetMatrixCoefficient((uint64_t)v20, v169, 0x8000, 0x8000, (float *)a4, 1.0);
                                              v190 = 1.0;
                                              v191 = (uint64_t)v20;
                                              v192 = v169;
                                              v193 = 0x20000;
LABEL_392:
                                              v194 = (float *)a4;
LABEL_393:
                                              SetMatrixCoefficient(v191, v192, 0x20000, v193, v194, v190);
                                              goto LABEL_394;
                                            }
                                            if ((~v77 & 0x5000000) == 0)
                                            {
                                              SetMatrixCoefficient((uint64_t)v20, v169, 0x8000, 52, (float *)a4, 1.0);
                                              v190 = 1.0;
                                              v191 = (uint64_t)v20;
                                              v192 = v169;
                                              v193 = 54;
                                              goto LABEL_392;
                                            }
                                            if (v157)
                                            {
                                              SetMatrixCoefficient((uint64_t)v20, v169, 0x8000, 49, (float *)a4, 0.70711);
                                              v191 = (uint64_t)v20;
                                              v192 = v169;
                                              v193 = 51;
LABEL_398:
                                              v194 = (float *)a4;
                                              v190 = 0.70711;
                                              goto LABEL_393;
                                            }
                                            if ((~v77 & 0x60000000) != 0)
                                            {
                                              if (v221 == 48)
                                              {
                                                v169 = (AudioChannelLayout *)v18;
                                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 0x8000, 5, (float *)a4, 0.70711);
                                                v204 = (uint64_t)v20;
                                                v205 = (AudioChannelLayout *)v18;
                                                v206 = 6;
                                              }
                                              else if (v163 == 1536)
                                              {
                                                v169 = (AudioChannelLayout *)v18;
                                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 0x8000, 10, (float *)a4, 0.70711);
                                                v204 = (uint64_t)v20;
                                                v205 = (AudioChannelLayout *)v18;
                                                v206 = 11;
                                              }
                                              else
                                              {
                                                if ((v77 & 3) == 0)
                                                {
                                                  v169 = (AudioChannelLayout *)v18;
                                                  if ((v77 & 4) == 0)
                                                    goto LABEL_394;
                                                  SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 0x8000, 3, (float *)a4, 0.70711);
                                                  v191 = (uint64_t)v20;
                                                  v192 = (AudioChannelLayout *)v18;
                                                  v193 = 3;
                                                  goto LABEL_398;
                                                }
                                                v169 = (AudioChannelLayout *)v18;
                                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 0x8000, 1, (float *)a4, 0.70711);
                                                v204 = (uint64_t)v20;
                                                v205 = (AudioChannelLayout *)v18;
                                                v206 = 2;
                                              }
                                            }
                                            else
                                            {
                                              v169 = (AudioChannelLayout *)v18;
                                              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 0x8000, 33, (float *)a4, 0.70711);
                                              v204 = (uint64_t)v20;
                                              v205 = (AudioChannelLayout *)v18;
                                              v206 = 34;
                                            }
                                            SetMatrixCoefficient(v204, v205, 0x20000, v206, (float *)a4, 0.70711);
                                            goto LABEL_394;
                                          }
                                          v189 = 0.70711;
                                          v185 = (uint64_t)v20;
                                          v186 = (AudioChannelLayout *)v18;
                                          v187 = 3;
                                        }
                                        v188 = (float *)a4;
                                        goto LABEL_386;
                                      }
                                      if ((~v77 & 0x5000000) == 0)
                                      {
                                        SetMatrixCoefficient((uint64_t)v20, v169, 52, 52, (float *)a4, 1.0);
                                        v175 = 1.0;
                                        v176 = (uint64_t)v20;
                                        v177 = v169;
                                        v178 = 54;
                                        v179 = (float *)a4;
LABEL_367:
                                        SetMatrixCoefficient(v176, v177, 54, v178, v179, v175);
                                        goto LABEL_368;
                                      }
                                      if (v157)
                                      {
                                        SetMatrixCoefficient((uint64_t)v20, v169, 52, 49, (float *)a4, 0.70711);
                                        v176 = (uint64_t)v20;
                                        v177 = v169;
                                        v178 = 51;
LABEL_366:
                                        v179 = (float *)a4;
                                        v175 = 0.70711;
                                        goto LABEL_367;
                                      }
                                      if ((~v77 & 0x60000000) != 0)
                                      {
                                        if (v221 == 48)
                                        {
                                          v169 = (AudioChannelLayout *)v18;
                                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 52, 5, (float *)a4, 0.70711);
                                          v195 = (uint64_t)v20;
                                          v196 = (AudioChannelLayout *)v18;
                                          v197 = 6;
                                        }
                                        else
                                        {
                                          if (v163 == 1536)
                                          {
                                            v169 = (AudioChannelLayout *)v18;
                                            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 52, 10, (float *)a4, 0.70711);
                                            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 54, 11, (float *)a4, 0.70711);
                                            if ((v79 & 0x600) != 0)
                                            {
LABEL_370:
                                              SetMatrixCoefficient((uint64_t)v20, v169, 10, 10, (float *)a4, 1.0);
                                              v180 = 1.0;
                                              v181 = (uint64_t)v20;
                                              v182 = v169;
                                              v183 = 11;
LABEL_373:
                                              v184 = (float *)a4;
LABEL_374:
                                              SetMatrixCoefficient(v181, v182, 11, v183, v184, v180);
                                              goto LABEL_375;
                                            }
                                            goto LABEL_375;
                                          }
                                          if ((v77 & 3) == 0)
                                          {
                                            v169 = (AudioChannelLayout *)v18;
                                            if ((v77 & 4) == 0)
                                              goto LABEL_368;
                                            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 52, 3, (float *)a4, 0.70711);
                                            v176 = (uint64_t)v20;
                                            v177 = (AudioChannelLayout *)v18;
                                            v178 = 3;
                                            goto LABEL_366;
                                          }
                                          v169 = (AudioChannelLayout *)v18;
                                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 52, 1, (float *)a4, 0.70711);
                                          v195 = (uint64_t)v20;
                                          v196 = (AudioChannelLayout *)v18;
                                          v197 = 2;
                                        }
                                      }
                                      else
                                      {
                                        v169 = (AudioChannelLayout *)v18;
                                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 52, 33, (float *)a4, 0.70711);
                                        v195 = (uint64_t)v20;
                                        v196 = (AudioChannelLayout *)v18;
                                        v197 = 34;
                                      }
                                      SetMatrixCoefficient(v195, v196, 54, v197, (float *)a4, 0.70711);
                                      goto LABEL_368;
                                    }
                                    v169 = (AudioChannelLayout *)v18;
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 1, (float *)a4, 0.70711);
                                    v198 = (uint64_t)v20;
                                    v199 = (AudioChannelLayout *)v18;
                                    v200 = 2;
                                  }
                                  SetMatrixCoefficient(v198, v199, 51, v200, (float *)a4, 0.70711);
                                  goto LABEL_361;
                                }
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 13, 1, (float *)a4, 0.70711);
                                v210 = (uint64_t)v20;
                                v211 = (AudioChannelLayout *)v18;
                                v212 = 2;
                              }
                              SetMatrixCoefficient(v210, v211, 15, v212, (float *)a4, 0.70711);
                              goto LABEL_352;
                            }
                            if ((~v77 & 0x130) != 0)
                            {
                              if (v221 == 48)
                              {
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 33, 5, (float *)a4, 0.70711);
                                v140 = (uint64_t)v20;
                                v141 = (AudioChannelLayout *)v18;
                                v142 = 6;
                                goto LABEL_334;
                              }
                              if ((v77 & 0x100) == 0)
                              {
                                if ((v77 & 3) != 0)
                                {
                                  SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 33, 1, (float *)a4, 0.70711);
                                  v140 = (uint64_t)v20;
                                  v141 = (AudioChannelLayout *)v18;
                                  v142 = 2;
                                }
                                else
                                {
                                  if ((v77 & 4) == 0)
                                    goto LABEL_336;
                                  SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 33, 3, (float *)a4, 0.70711);
                                  v140 = (uint64_t)v20;
                                  v141 = (AudioChannelLayout *)v18;
                                  v142 = 3;
                                }
                                goto LABEL_334;
                              }
                              v145 = (uint64_t)v20;
                              v144 = (AudioChannelLayout *)v18;
                              v146 = (AudioChannelLayout *)v18;
                              v147 = 33;
                              v148 = 9;
                            }
                            else
                            {
                              v144 = (AudioChannelLayout *)v18;
                              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 33, 5, (float *)a4, 0.70711);
                              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 33, 9, (float *)a4, 0.70711);
                              v145 = (uint64_t)v20;
                              v146 = (AudioChannelLayout *)v18;
                              v147 = 34;
                              v148 = 6;
                            }
                            SetMatrixCoefficient(v145, v146, v147, v148, (float *)a4, 0.70711);
                            v140 = (uint64_t)v20;
                            v141 = v144;
                            v142 = 9;
LABEL_334:
                            v143 = (float *)a4;
                            v139 = 0.70711;
                            goto LABEL_335;
                          }
                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 5, 1, (float *)a4, 0.70711);
                          v134 = (uint64_t)v20;
                          v135 = (AudioChannelLayout *)v18;
                          v136 = 2;
                          goto LABEL_290;
                        }
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 5, 3, (float *)a4, 0.5);
                        v138 = 0.5;
                        v134 = (uint64_t)v20;
                        v135 = (AudioChannelLayout *)v18;
                        v136 = 3;
                      }
                      v137 = (float *)a4;
                      goto LABEL_296;
                    }
                    v131 = 0.70711;
                    v128 = (uint64_t)v20;
                    v129 = (AudioChannelLayout *)v18;
                    v130 = 3;
                  }
                  v132 = (float *)a4;
LABEL_286:
                  SetMatrixCoefficient(v128, v129, 9, v130, v132, v131);
                  goto LABEL_287;
                }
                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 14, 1, (float *)a4, 0.70711);
                v105 = (uint64_t)v20;
                v106 = (AudioChannelLayout *)v18;
                v107 = 2;
                goto LABEL_228;
              }
              v109 = 0.70711;
              v105 = (uint64_t)v20;
              v106 = (AudioChannelLayout *)v18;
              v107 = 3;
            }
            v108 = (float *)a4;
            goto LABEL_231;
          }
          v215 = v229;
          if ((_DWORD)v38 == 7012356 || (v38 & 0xFFFE0000 | 0x10000) == 0xBF0000)
          {
            v217 = v38 & 0xFFFF0000;
            *(_OWORD *)v237 = xmmword_18F117150;
            std::vector<int>::vector[abi:ne180100](&v226, v237, 4uLL);
            v86 = v215 & 0xFFFF0000;
            if (v215 != 7012356 && (v215 & 0xFFFE0000 | 0x10000) != 0xBF0000)
            {
              HOA::HOA(v237, v38);
              v223 = 0;
              v224 = 0;
              v225 = 0;
              memset(__p, 0, sizeof(__p));
              if (v215 == 6553601)
              {
                if (v18[4])
                  __assert_rtn("AudioFormatProperty_MatrixMixMap", "AudioFormatPanningMixing.cpp", 2283, "destLayout->mChannelDescriptions[0].mChannelFlags == 0");
                v18[5] = 0;
                v18[6] = 0;
                v18[4] = 2;
              }
              v122 = v18[2];
              if ((_DWORD)v122)
              {
                v123 = 0;
                v124 = v18 + 6;
                do
                {
                  if ((*(_BYTE *)(v124 - 2) & 2) != 0)
                  {
                    std::vector<float>::push_back[abi:ne180100]((uint64_t)&v223, v124 - 1);
                    std::vector<float>::push_back[abi:ne180100]((uint64_t)__p, v124);
                    v122 = v18[2];
                  }
                  ++v123;
                  v124 += 5;
                }
                while (v123 < v122);
                v9 = 1718449215;
                v125 = v223;
                v126 = v224 - v223;
                if (v224 == v223)
                {
                  v125 = v224;
                }
                else if (HOA::createDecoder(v237, (uint64_t)&v223, (uint64_t)__p))
                {
                  logSubsystem();
                  v127 = logSubsystem(void)::category;
                  if (os_log_type_enabled((os_log_t)logSubsystem(void)::category, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "AudioFormatPanningMixing.cpp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 2309;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = (_DWORD)v38;
                    v235 = 1024;
                    v236 = v215;
                    _os_log_impl(&dword_18EE07000, v127, OS_LOG_TYPE_ERROR, "%25s:%-5d Error creating HOA decoder matrix for %08X -> %08X", buf, 0x1Eu);
                  }
                }
                else
                {
                  memset(buf, 0, sizeof(buf));
                  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(buf, v238, v239, (v239 - (uint64_t)v238) >> 2);
                  v149 = v18[2];
                  v150 = *(char **)buf;
                  if ((_DWORD)v149)
                  {
                    v151 = 0;
                    v152 = 0;
                    do
                    {
                      if ((v18[5 * v151 + 4] & 2) != 0)
                      {
                        v153 = v219;
                        if ((_DWORD)v219)
                        {
                          v154 = &v150[4 * v152];
                          v155 = v151;
                          do
                          {
                            a4[v155] = *(_DWORD *)v154;
                            v155 += v12;
                            v154 += v126 & 0xFFFFFFFFFFFFFFFCLL;
                            --v153;
                          }
                          while (v153);
                        }
                        ++v152;
                      }
                      ++v151;
                    }
                    while (v151 != v149);
                  }
                  if (v150)
                    operator delete(v150);
                  v9 = 0;
                }
              }
              else
              {
                v125 = 0;
                v9 = 1718449215;
              }
              if (__p[0])
                operator delete(__p[0]);
              if (v125)
              {
                v224 = v125;
                operator delete(v125);
              }
              HOA::~HOA((HOA *)v237);
              v88 = v226;
              if (v226)
              {
LABEL_213:
                v227 = v88;
                operator delete(v88);
              }
              goto LABEL_4;
            }
            if (v12 >= v219)
              v12 = v219;
            else
              v12 = v12;
            if ((int)v12 < 4)
              __assert_rtn("AudioFormatProperty_MatrixMixMap", "AudioFormatPanningMixing.cpp", 2232, "channelsToCopy >= 4");
            v87 = 0;
            v88 = v226;
            if (v217 == 12517376)
              v89 = 196608;
            else
              v89 = 0x20000;
            v214 = v89;
            v90 = v215 & 0xFFFF0000;
            v91 = v86 != 12517376 && v217 == 12517376;
            v92 = v86 == 12517376 && v217 != 12517376;
            v220 = v92;
            v93 = (int)((v227 - v226) >> 2);
            if (v86 == 12517376)
              v94 = 196608;
            else
              v94 = 0x20000;
            v216 = v94;
            while (1)
            {
              v95 = v87 + 1;
              v96 = vcvtpd_s64_f64(sqrt((double)((int)v87 + 1))) - 1;
              if (v91)
              {
                v97 = 1.0 / sqrt((double)v96 * 2.0 + 1.0);
              }
              else
              {
                v97 = 1.0;
                if (v220)
                  v97 = sqrt((double)v96 * 2.0 + 1.0);
              }
              if (v87)
                break;
              if ((_DWORD)v38 == 7012356)
              {
                v97 = v97 * 1.41421356;
                v99 = v216;
                goto LABEL_197;
              }
              if (v215 != 7012356)
              {
                if (v217 == 12517376)
                  v98 = 196608;
                else
                  v98 = 0x20000;
                if (v90 == 12517376)
                  v99 = 196608;
                else
                  v99 = 0x20000;
                goto LABEL_202;
              }
              v97 = v97 * 0.707106781;
              v98 = v214;
LABEL_200:
              if (v87 >= v93)
              {
                v213 = 2262;
LABEL_459:
                __assert_rtn("AudioFormatProperty_MatrixMixMap", "AudioFormatPanningMixing.cpp", v213, "t < (int)bformatChannels.size()");
              }
              v99 = *(_DWORD *)&v88[4 * v87];
LABEL_202:
              SetMatrixCoefficient((uint64_t)v20, v218, v98, v99, (float *)a4, v97);
              v87 = v95;
              if (v12 == v95)
              {
                v9 = 0;
                if (v88)
                  goto LABEL_213;
                goto LABEL_4;
              }
            }
            if (v217 == 12517376)
              v98 = v87 + 196608;
            else
              v98 = v87 + 0x20000;
            if (v90 == 12517376)
              v99 = v87 + 196608;
            else
              v99 = v87 + 0x20000;
            if ((_DWORD)v38 == 7012356)
            {
LABEL_197:
              if (v87 >= v93)
              {
                v213 = 2257;
                goto LABEL_459;
              }
              v98 = *(_DWORD *)&v88[4 * v87];
            }
            if (v215 != 7012356)
              goto LABEL_202;
            goto LABEL_200;
          }
          if ((~v77 & 3) == 0 && (_DWORD)v38 == 6815746)
          {
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 204, 1, (float *)a4, 0.70711);
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 204, 2, (float *)a4, 0.70711);
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 205, 1, (float *)a4, 0.70711);
            v61 = -0.70711;
            v62 = (uint64_t)v20;
            v63 = (AudioChannelLayout *)v18;
            v64 = 205;
            goto LABEL_113;
          }
          if (v229 == 6815746 && (v78 & 3) == 3)
          {
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 204, (float *)a4, 0.70711);
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 2, 204, (float *)a4, 0.70711);
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 205, (float *)a4, 0.70711);
            v61 = -0.70711;
            v62 = (uint64_t)v20;
            v63 = (AudioChannelLayout *)v18;
            v64 = 2;
            v65 = 205;
            goto LABEL_158;
          }
          v9 = 1718449215;
          if ((int)v229 <= 6750209)
          {
            if (v229 == 6553601)
            {
              if ((_DWORD)v38 != 6815746)
              {
                if ((_DWORD)v38 == 9633793)
                {
                  v9 = 0;
                  *a4 = 1065353216;
                }
                goto LABEL_4;
              }
              goto LABEL_447;
            }
            if (v229 == 6619138)
            {
LABEL_446:
              if ((_DWORD)v38 != 9633793)
                goto LABEL_4;
              goto LABEL_447;
            }
            v156 = 6684674;
          }
          else
          {
            if ((int)v229 <= 6881281)
            {
              if (v229 != 6750210)
              {
                if (v229 != 6815746)
                  goto LABEL_4;
                if ((int)v38 > 6750209)
                {
                  if ((_DWORD)v38 != 6750210 && (_DWORD)v38 != 6881282)
                  {
                    v133 = 6946818;
LABEL_470:
                    if ((_DWORD)v38 != v133)
                      goto LABEL_4;
                  }
LABEL_471:
                  v9 = 0;
                  *(_OWORD *)a4 = xmmword_18F117140;
                  goto LABEL_4;
                }
                if ((_DWORD)v38 != 6553601)
                {
                  if ((_DWORD)v38 != 6619138)
                  {
                    v133 = 6684674;
                    goto LABEL_470;
                  }
                  goto LABEL_471;
                }
LABEL_447:
                v9 = 0;
                *(_QWORD *)a4 = 1065353216;
                goto LABEL_4;
              }
              goto LABEL_446;
            }
            if (v229 == 6881282)
              goto LABEL_446;
            v156 = 6946818;
          }
          if (v229 != v156)
            goto LABEL_4;
          goto LABEL_446;
        }
        v61 = 1.0;
        v62 = (uint64_t)v20;
        v63 = (AudioChannelLayout *)v18;
        v64 = 3;
LABEL_146:
        v65 = 3;
        goto LABEL_158;
      }
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 0x20000, (float *)a4, 1.0);
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 2, 0x20000, (float *)a4, 1.0);
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 131073, (float *)a4, 0.5);
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 2, 131073, (float *)a4, -0.5);
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 131075, (float *)a4, 0.86603);
      v62 = (uint64_t)v20;
      v63 = (AudioChannelLayout *)v18;
      v64 = 2;
      v65 = 131075;
      v85 = (float *)a4;
      v61 = 0.86603;
LABEL_159:
      SetMatrixCoefficient(v62, v63, v64, v65, v85, v61);
      goto LABEL_160;
    }
    if (v229 == 6750210)
    {
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 38, (float *)a4, 1.0);
      v61 = 1.0;
      v62 = (uint64_t)v20;
      v63 = (AudioChannelLayout *)v18;
      v64 = 2;
      goto LABEL_157;
    }
    if (v229 != 8519688)
      goto LABEL_126;
    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 1, (float *)a4, 1.0);
    v61 = 1.0;
    v62 = (uint64_t)v20;
    v63 = (AudioChannelLayout *)v18;
    v64 = 2;
LABEL_113:
    v65 = 2;
LABEL_158:
    v85 = (float *)a4;
    goto LABEL_159;
  }
LABEL_4:
  if (__dst)
    free(__dst);
  if (v233)
    free(v233);
  return v9;
}

void sub_18EE65804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
  {
    if (__p)
      operator delete(__p);
    if (a19)
      operator delete(a19);
    HOA::~HOA((HOA *)&a33);
    if (a22)
      operator delete(a22);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x18EE63D08);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_GetABitmapForCompare(const AudioChannelLayout *a1)
{
  signed int mChannelLayoutTag;
  uint64_t result;
  uint64_t mNumberChannelDescriptions;
  AudioChannelDescription *mChannelDescriptions;
  int v6;
  int mChannelLabel;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  mChannelLayoutTag = a1->mChannelLayoutTag;
  if (!a1->mChannelLayoutTag)
  {
    mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
    if (!(_DWORD)mNumberChannelDescriptions)
      return 0;
    LODWORD(result) = 0;
    mChannelDescriptions = a1->mChannelDescriptions;
    do
    {
      mChannelLabel = mChannelDescriptions->mChannelLabel;
      ++mChannelDescriptions;
      v6 = mChannelLabel;
      if (mChannelLabel > 207)
      {
        if (v6 == 302)
          v8 = 2;
        else
          v8 = 0;
        if (v6 == 301)
          v8 = 1;
        if (v6 == 209)
          v9 = 2;
        else
          v9 = 0;
        if (v6 == 208)
          v9 = 1;
        if (v6 <= 300)
          v8 = v9;
      }
      else
      {
        v8 = 0;
        switch(v6)
        {
          case 1:
          case 38:
            v8 = 1;
            break;
          case 2:
          case 39:
            v8 = 2;
            break;
          case 3:
          case 42:
            v8 = 4;
            break;
          case 4:
          case 37:
            v8 = 8;
            break;
          case 5:
            v8 = 16;
            break;
          case 6:
            v8 = 32;
            break;
          case 7:
            v8 = 64;
            break;
          case 8:
            v8 = 128;
            break;
          case 9:
            v8 = 256;
            break;
          case 10:
            v8 = 512;
            break;
          case 11:
            v8 = 1024;
            break;
          case 12:
            v8 = 2048;
            break;
          case 13:
            v8 = 4096;
            break;
          case 14:
            v8 = 0x2000;
            break;
          case 15:
            v8 = 0x4000;
            break;
          case 16:
            v8 = 0x8000;
            break;
          case 17:
            v8 = 0x10000;
            break;
          case 18:
            v8 = 0x20000;
            break;
          case 33:
            v8 = 0x20000000;
            break;
          case 34:
            v8 = 0x40000000;
            break;
          case 35:
            v8 = 0x8000000;
            break;
          case 36:
            v8 = 0x10000000;
            break;
          case 49:
            v8 = 0x200000;
            break;
          case 51:
            v8 = 0x800000;
            break;
          case 52:
            v8 = 0x1000000;
            break;
          case 53:
            v8 = 0x2000000;
            break;
          case 54:
            v8 = 0x4000000;
            break;
          default:
            break;
        }
      }
      result = v8 | result;
      --mNumberChannelDescriptions;
    }
    while (mNumberChannelDescriptions);
    return result;
  }
  if (mChannelLayoutTag == 0x10000)
    return a1->mChannelBitmap;
  if (mChannelLayoutTag > 10289158)
  {
    if (mChannelLayoutTag <= 11993095)
    {
      if (mChannelLayoutTag <= 11141125)
      {
        if (mChannelLayoutTag > 10682375)
        {
          if (mChannelLayoutTag <= 10878983)
          {
            if (mChannelLayoutTag == 10682376)
              return 402653247;
            if (mChannelLayoutTag != 10747912)
            {
              if (mChannelLayoutTag == 10813448)
                return 2367;
              return 0;
            }
            return 20543;
          }
          if (mChannelLayoutTag <= 11010051)
          {
            if (mChannelLayoutTag != 10878984)
            {
              if (mChannelLayoutTag == 10944520)
                return 10303;
              return 0;
            }
            return 8511;
          }
          if (mChannelLayoutTag == 11010052)
            return 15;
          v11 = 11075589;
          goto LABEL_207;
        }
        if (mChannelLayoutTag > 10485767)
        {
          if (mChannelLayoutTag != 10485768)
          {
            if (mChannelLayoutTag != 10551304)
            {
              if (mChannelLayoutTag == 10616840)
                return 1599;
              return 0;
            }
            return 255;
          }
          return 1610612799;
        }
        if (mChannelLayoutTag != 10289159)
        {
          if (mChannelLayoutTag != 10354695)
          {
            if (mChannelLayoutTag == 10420231)
              return 8255;
            return 0;
          }
          return 2111;
        }
        return 319;
      }
      if (mChannelLayoutTag <= 11534342)
      {
        if (mChannelLayoutTag > 11337734)
        {
          switch(mChannelLayoutTag)
          {
            case 11337735:
              return 251;
            case 11403271:
              return 1610614799;
            case 11468807:
              return 1610613007;
            default:
              return 0;
          }
        }
        else
        {
          switch(mChannelLayoutTag)
          {
            case 11141126:
              return 243;
            case 11206662:
              return 1610614791;
            case 11272198:
              return 1610612999;
            default:
              return 0;
          }
        }
      }
      if (mChannelLayoutTag > 11730951)
      {
        if (mChannelLayoutTag <= 11862024)
        {
          if (mChannelLayoutTag != 11730952)
          {
            if (mChannelLayoutTag == 11796489)
              return 1610612987;
            return 0;
          }
          return 503;
        }
        if (mChannelLayoutTag == 11862025)
          return 511;
        v10 = 11927559;
        goto LABEL_221;
      }
      if (mChannelLayoutTag != 11534343)
      {
        if (mChannelLayoutTag != 11599880)
        {
          if (mChannelLayoutTag == 11665416)
            return 1610612979;
          return 0;
        }
        return 255;
      }
      return 247;
    }
    if (mChannelLayoutTag <= 13041670)
    {
      if (mChannelLayoutTag > 12582923)
      {
        if (mChannelLayoutTag > 12779529)
        {
          if (mChannelLayoutTag <= 12910595)
          {
            if (mChannelLayoutTag != 12779530)
            {
              if (mChannelLayoutTag == 12845066)
                return 1621098559;
              return 0;
            }
            return 83906623;
          }
          if (mChannelLayoutTag != 12910596)
          {
            if (mChannelLayoutTag == 12976134)
              return 311;
            return 0;
          }
          return 263;
        }
        if (mChannelLayoutTag != 12582924)
        {
          if (mChannelLayoutTag != 12648464)
          {
            if (mChannelLayoutTag == 12713992)
              return 10485823;
            return 0;
          }
          return 2107658303;
        }
        return 1694519359;
      }
      if (mChannelLayoutTag <= 12255237)
      {
        if (mChannelLayoutTag == 11993096)
          return 1610612799;
        if (mChannelLayoutTag == 12124164)
          return 1610612739;
        v14 = 12189701;
LABEL_199:
        if (mChannelLayoutTag != v14)
          return 0;
        return 1610612743;
      }
      if (mChannelLayoutTag != 12255238)
      {
        if (mChannelLayoutTag == 12320775)
          return 319;
        v17 = 12386312;
        goto LABEL_230;
      }
      return 1610612751;
    }
    if (mChannelLayoutTag <= 13959173)
    {
      if (mChannelLayoutTag > 13238283)
      {
        if (mChannelLayoutTag == 13238284)
          return 1694519359;
        if (mChannelLayoutTag == 13303822)
          return 1705005119;
        v14 = 13893637;
        goto LABEL_199;
      }
      if (mChannelLayoutTag == 13041671 || mChannelLayoutTag == 13107207)
        return 319;
      v17 = 13172744;
    }
    else
    {
      if (mChannelLayoutTag > 14155780)
      {
        if (mChannelLayoutTag > 14286854)
        {
          if (mChannelLayoutTag == 14286855)
            return 319;
          v17 = 14352392;
          goto LABEL_230;
        }
        if (mChannelLayoutTag == 14155781)
          return 1610612743;
        if (mChannelLayoutTag != 14221318)
          return 0;
        return 1610612751;
      }
      if (mChannelLayoutTag == 13959174)
        return 1610612751;
      if (mChannelLayoutTag == 14024711)
        return 319;
      v17 = 14090248;
    }
LABEL_230:
    if (mChannelLayoutTag != v17)
      return 0;
    return 1610612799;
  }
  if (mChannelLayoutTag > 8388615)
  {
    if (mChannelLayoutTag <= 9240581)
    {
      if (mChannelLayoutTag > 8781827)
      {
        if (mChannelLayoutTag > 8978436)
        {
          if (mChannelLayoutTag <= 9109509)
          {
            if (mChannelLayoutTag != 8978437)
            {
              if (mChannelLayoutTag != 9043973)
                return 0;
              return 59;
            }
            return 271;
          }
          if (mChannelLayoutTag == 9109510)
            return 311;
          v16 = 9175047;
LABEL_225:
          if (mChannelLayoutTag == v16)
            return 1610612791;
          return 0;
        }
        if (mChannelLayoutTag != 8781828)
        {
          if (mChannelLayoutTag == 8847365)
            return 59;
          v18 = 8912900;
          goto LABEL_162;
        }
        return 267;
      }
      if (mChannelLayoutTag > 8585218)
      {
        if (mChannelLayoutTag != 8585219)
        {
          if (mChannelLayoutTag != 8650756)
          {
            if (mChannelLayoutTag == 8716291)
              return 11;
            return 0;
          }
          return 51;
        }
        return 259;
      }
      if (mChannelLayoutTag != 8388616)
      {
        if (mChannelLayoutTag == 8454152)
          return 255;
        v13 = 8519688;
        goto LABEL_153;
      }
      return 1610612799;
    }
    if (mChannelLayoutTag > 9830402)
    {
      if (mChannelLayoutTag <= 10027011)
      {
        if (mChannelLayoutTag == 9830403)
          return 7;
        if (mChannelLayoutTag == 9895940)
          return 263;
        v18 = 9961476;
LABEL_162:
        if (mChannelLayoutTag != v18)
          return 0;
        return 15;
      }
      if (mChannelLayoutTag > 10158085)
      {
        if (mChannelLayoutTag == 10158086)
          return 311;
        v16 = 10223623;
        goto LABEL_225;
      }
      if (mChannelLayoutTag == 10027012)
        return 267;
      v11 = 10092549;
LABEL_207:
      if (mChannelLayoutTag != v11)
        return 0;
      return 271;
    }
    if (mChannelLayoutTag <= 9437191)
    {
      if (mChannelLayoutTag == 9240582)
        return 311;
      if (mChannelLayoutTag != 9306119)
      {
        v16 = 9371655;
        goto LABEL_225;
      }
      return 319;
    }
    if (mChannelLayoutTag == 9437192)
      return 1610613047;
    if (mChannelLayoutTag != 9699335)
    {
      if (mChannelLayoutTag == 9764866)
        return 12;
      return 0;
    }
    return 247;
  }
  if (mChannelLayoutTag > 7536643)
  {
    if (mChannelLayoutTag > 7929861)
    {
      if (mChannelLayoutTag > 8126469)
      {
        if (mChannelLayoutTag <= 8257543)
        {
          if (mChannelLayoutTag != 8126470)
          {
            v10 = 8192007;
LABEL_221:
            if (mChannelLayoutTag != v10)
              return 0;
            return 319;
          }
          return 63;
        }
        if (mChannelLayoutTag != 8257544 && mChannelLayoutTag != 8323080)
          return 0;
        return 255;
      }
      if (mChannelLayoutTag == 7929862 || mChannelLayoutTag == 7995398)
        return 63;
      v13 = 8060934;
LABEL_153:
      if (mChannelLayoutTag != v13)
        return 0;
      return 63;
    }
    if (mChannelLayoutTag > 7733252)
    {
      if (mChannelLayoutTag == 7733253 || mChannelLayoutTag == 7798789)
        return 55;
      v15 = 7864325;
LABEL_186:
      if (mChannelLayoutTag != v15)
        return 0;
      return 55;
    }
    if (mChannelLayoutTag != 7536644 && mChannelLayoutTag != 7602180)
    {
      v15 = 7667717;
      goto LABEL_186;
    }
    return 263;
  }
  if (mChannelLayoutTag > 7012355)
  {
    if (mChannelLayoutTag > 7208965)
    {
      if (mChannelLayoutTag <= 7405570)
      {
        if (mChannelLayoutTag != 7208966)
        {
          if (mChannelLayoutTag == 7274504)
            return 1847;
          return 0;
        }
        return 311;
      }
      if (mChannelLayoutTag == 7405571 || mChannelLayoutTag == 7471107)
        return 7;
      return 0;
    }
    if (mChannelLayoutTag == 7012356)
      return 0;
    if (mChannelLayoutTag != 7077892)
    {
      v15 = 7143429;
      goto LABEL_186;
    }
    return 51;
  }
  if (mChannelLayoutTag > 6750209)
  {
    if (mChannelLayoutTag == 6750210 || mChannelLayoutTag == 6881282)
      return 3;
    v12 = 6946818;
    goto LABEL_170;
  }
  if (mChannelLayoutTag != 6553601)
  {
    if (mChannelLayoutTag == 6619138)
      return 3;
    v12 = 6684674;
LABEL_170:
    if (mChannelLayoutTag != v12)
      return 0;
    return 3;
  }
  return 4;
}

uint64_t ChannelLabelReduceMatrixStereo(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int *v6;
  uint64_t v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  int v12;

  v1 = *(unsigned int *)(result + 8);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = (int *)(result + 12);
    v7 = *(unsigned int *)(result + 8);
    do
    {
      v9 = *v6;
      v6 += 5;
      v8 = v9;
      if (v9 > 37)
      {
        if (v8 == 39)
        {
          v2 = 1;
        }
        else if (v8 == 38)
        {
          v4 = 1;
        }
      }
      else if (v8 == 1)
      {
        v5 = 1;
      }
      else if (v8 == 2)
      {
        v3 = 1;
      }
      --v7;
    }
    while (v7);
    if ((v5 & v4 & 1) == 0 && (v3 & v2 & 1) == 0)
    {
      v10 = (int *)(result + 12);
      do
      {
        if (*v10 == 39)
          v11 = 2;
        else
          v11 = *v10;
        if (*v10 == 38)
          v12 = 1;
        else
          v12 = v11;
        *v10 = v12;
        v10 += 5;
        --v1;
      }
      while (v1);
    }
  }
  return result;
}

uint64_t singleSurroundPairCompatibility(AudioChannelLayout *a1, AudioChannelLayout *a2)
{
  int SingleSurroundPairStyle;
  uint64_t result;

  SingleSurroundPairStyle = getSingleSurroundPairStyle(a1);
  result = getSingleSurroundPairStyle(a2);
  switch(SingleSurroundPairStyle)
  {
    case 3:
      if ((_DWORD)result == 2)
        return transformSurroundsToSideDirect((uint64_t)a1);
LABEL_10:
      if ((_DWORD)result == 1)
        return transformSurroundsToSide((uint64_t)a1);
      return result;
    case 2:
      if ((_DWORD)result == 3)
        return transformSurroundsToRear((uint64_t)a1);
      goto LABEL_10;
    case 1:
      if ((_DWORD)result != 3)
      {
        if ((_DWORD)result != 2)
          return result;
        return transformSurroundsToSideDirect((uint64_t)a1);
      }
      return transformSurroundsToRear((uint64_t)a1);
  }
  return result;
}

uint64_t getSingleSurroundPairStyle(const AudioChannelLayout *a1)
{
  UInt32 mNumberChannelDescriptions;
  unsigned int v3;
  AudioChannelDescription *mChannelDescriptions;
  uint64_t v5;
  AudioChannelLabel v6;
  AudioChannelLabel mChannelLabel;
  int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
  if (mNumberChannelDescriptions - 7 < 0xFFFFFFFE)
    return 0;
  v3 = 0;
  mChannelDescriptions = a1->mChannelDescriptions;
  v5 = a1->mNumberChannelDescriptions;
  do
  {
    mChannelLabel = mChannelDescriptions->mChannelLabel;
    ++mChannelDescriptions;
    v6 = mChannelLabel;
    switch(mChannelLabel)
    {
      case 1u:
        v3 |= 1u;
        break;
      case 2u:
        v3 |= 2u;
        break;
      case 3u:
        v3 |= 4u;
        break;
      case 4u:
        v3 |= 8u;
        break;
      case 5u:
        v3 |= 0x10u;
        break;
      case 6u:
        v3 |= 0x20u;
        break;
      case 7u:
      case 8u:
      case 9u:
        break;
      case 0xAu:
        v3 |= 0x40u;
        break;
      case 0xBu:
        v3 |= 0x80u;
        break;
      default:
        v8 = v3 | 0x100;
        if (v6 == 34)
          v3 |= 0x200u;
        if (v6 == 33)
          v3 = v8;
        break;
    }
    --v5;
  }
  while (v5);
  v9 = (v3 & 8) != 0 && mNumberChannelDescriptions == 6;
  v10 = v3 & 0xFFFFFFF7;
  if (!v9)
    v10 = v3;
  if (v10 == 199)
    v11 = 2;
  else
    v11 = 0;
  if (v10 == 775)
    v12 = 3;
  else
    v12 = v11;
  if (v10 == 55)
    v13 = 1;
  else
    v13 = v12;
  if ((~v10 & 7) != 0)
    return 0;
  else
    return v13;
}

uint64_t octagonalCompatibility(AudioChannelLayout *a1, AudioChannelLayout *a2)
{
  int OctagonalStyle;
  uint64_t result;
  uint64_t v6;
  Float32 *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  Float32 *i;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  Float32 *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  Float32 *j;
  int v23;
  int v24;
  int v25;
  uint64_t mNumberChannelDescriptions;
  Float32 *mCoordinates;
  int v28;
  unsigned int v29;
  Float32 *v30;
  int v31;
  uint64_t v32;
  Float32 *v33;
  int v34;
  int v35;
  int v36;

  OctagonalStyle = getOctagonalStyle(a1);
  result = getOctagonalStyle(a2);
  if (OctagonalStyle == 3)
  {
    if ((_DWORD)result == 2)
    {
      mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
      if ((_DWORD)mNumberChannelDescriptions)
      {
        mCoordinates = a1->mChannelDescriptions[0].mCoordinates;
        do
        {
          v28 = *((_DWORD *)mCoordinates - 2);
          v29 = v28 - 5;
          if ((v28 - 5) > 6)
          {
            v30 = mCoordinates;
          }
          else
          {
            v30 = mCoordinates;
            if (((0x63u >> v29) & 1) != 0)
            {
              v28 = *(_DWORD *)&asc_18F10C678[4 * v29];
              v30 = (Float32 *)((char *)&unk_18F10C694 + 4 * v29);
            }
          }
          v31 = *(_DWORD *)v30;
          *((_DWORD *)mCoordinates - 2) = v28;
          if ((*(_BYTE *)(mCoordinates - 1) & 2) != 0)
            *(_DWORD *)mCoordinates = v31;
          mCoordinates += 5;
          --mNumberChannelDescriptions;
        }
        while (mNumberChannelDescriptions);
      }
      return result;
    }
    if ((_DWORD)result != 1)
      return result;
    v11 = a1->mNumberChannelDescriptions;
    if (!(_DWORD)v11)
      return result;
    for (i = a1->mChannelDescriptions[0].mCoordinates; ; i += 5)
    {
      v13 = *((_DWORD *)i - 2);
      if (v13 > 9)
      {
        if (v13 == 10)
        {
          v13 = 35;
          v14 = -1028390912;
        }
        else
        {
          if (v13 != 11)
          {
LABEL_37:
            v15 = *(_DWORD *)i;
            goto LABEL_38;
          }
          v13 = 36;
          v14 = 1119092736;
        }
      }
      else if (v13 == 1)
      {
        v14 = -1036779520;
      }
      else
      {
        if (v13 != 2)
          goto LABEL_37;
        v14 = 1110704128;
      }
      v15 = v14;
LABEL_38:
      *((_DWORD *)i - 2) = v13;
      if ((*(_BYTE *)(i - 1) & 2) != 0)
        *(_DWORD *)i = v15;
      if (!--v11)
        return result;
    }
  }
  if (OctagonalStyle == 2)
  {
    if ((_DWORD)result == 3)
    {
      v32 = a1->mNumberChannelDescriptions;
      if ((_DWORD)v32)
      {
        v33 = a1->mChannelDescriptions[0].mCoordinates;
        while (2)
        {
          v34 = *((_DWORD *)v33 - 2);
          switch(v34)
          {
            case 1:
              v35 = -1036779520;
              goto LABEL_100;
            case 2:
              v35 = 1110704128;
              goto LABEL_100;
            case 3:
            case 4:
              goto LABEL_95;
            case 5:
              v34 = 10;
              v35 = -1028390912;
              goto LABEL_100;
            case 6:
              v34 = 11;
              v35 = 1119092736;
              goto LABEL_100;
            default:
              if (v34 == 33)
              {
                v34 = 5;
                v35 = -1022951424;
              }
              else
              {
                if (v34 != 34)
                {
LABEL_95:
                  v36 = *(_DWORD *)v33;
                  goto LABEL_101;
                }
                v34 = 6;
                v35 = 1124532224;
              }
LABEL_100:
              v36 = v35;
LABEL_101:
              *((_DWORD *)v33 - 2) = v34;
              if ((*(_BYTE *)(v33 - 1) & 2) != 0)
                *(_DWORD *)v33 = v36;
              v33 += 5;
              if (!--v32)
                return result;
              continue;
          }
        }
      }
    }
    else if ((_DWORD)result == 1)
    {
      v16 = a1->mNumberChannelDescriptions;
      if ((_DWORD)v16)
      {
        v17 = a1->mChannelDescriptions[0].mCoordinates;
        while (2)
        {
          v18 = *((_DWORD *)v17 - 2);
          switch(v18)
          {
            case 1:
              v19 = -1036779520;
              goto LABEL_56;
            case 2:
              v19 = 1110704128;
              goto LABEL_56;
            case 3:
            case 4:
              goto LABEL_51;
            case 5:
              v18 = 35;
              v19 = -1028390912;
              goto LABEL_56;
            case 6:
              v18 = 36;
              v19 = 1119092736;
              goto LABEL_56;
            default:
              if (v18 == 33)
              {
                v18 = 5;
                v19 = -1022951424;
              }
              else
              {
                if (v18 != 34)
                {
LABEL_51:
                  v20 = *(_DWORD *)v17;
                  goto LABEL_57;
                }
                v18 = 6;
                v19 = 1124532224;
              }
LABEL_56:
              v20 = v19;
LABEL_57:
              *((_DWORD *)v17 - 2) = v18;
              if ((*(_BYTE *)(v17 - 1) & 2) != 0)
                *(_DWORD *)v17 = v20;
              v17 += 5;
              if (!--v16)
                return result;
              continue;
          }
        }
      }
    }
    return result;
  }
  if (OctagonalStyle != 1)
    return result;
  if ((_DWORD)result == 3)
  {
    v21 = a1->mNumberChannelDescriptions;
    if (!(_DWORD)v21)
      return result;
    for (j = a1->mChannelDescriptions[0].mCoordinates; ; j += 5)
    {
      v23 = *((_DWORD *)j - 2);
      if (v23 > 34)
      {
        if (v23 == 35)
        {
          v23 = 10;
          v24 = -1028390912;
        }
        else
        {
          if (v23 != 36)
          {
LABEL_73:
            v25 = *(_DWORD *)j;
            goto LABEL_74;
          }
          v23 = 11;
          v24 = 1119092736;
        }
      }
      else if (v23 == 1)
      {
        v24 = -1036779520;
      }
      else
      {
        if (v23 != 2)
          goto LABEL_73;
        v24 = 1110704128;
      }
      v25 = v24;
LABEL_74:
      *((_DWORD *)j - 2) = v23;
      if ((*(_BYTE *)(j - 1) & 2) != 0)
        *(_DWORD *)j = v25;
      if (!--v21)
        return result;
    }
  }
  if ((_DWORD)result == 2)
  {
    v6 = a1->mNumberChannelDescriptions;
    if ((_DWORD)v6)
    {
      v7 = a1->mChannelDescriptions[0].mCoordinates;
      do
      {
        v8 = *((_DWORD *)v7 - 2);
        if (v8 > 34)
        {
          if (v8 == 35)
          {
            v8 = 5;
            v9 = -1025769472;
          }
          else
          {
            if (v8 != 36)
            {
LABEL_18:
              v10 = *(_DWORD *)v7;
              goto LABEL_19;
            }
            v8 = 6;
            v9 = 1121714176;
          }
        }
        else if (v8 == 5)
        {
          v8 = 33;
          v9 = -1021968384;
        }
        else
        {
          if (v8 != 6)
            goto LABEL_18;
          v8 = 34;
          v9 = 1125515264;
        }
        v10 = v9;
LABEL_19:
        *((_DWORD *)v7 - 2) = v8;
        if ((*(_BYTE *)(v7 - 1) & 2) != 0)
          *(_DWORD *)v7 = v10;
        v7 += 5;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t getOctagonalStyle(const AudioChannelLayout *a1)
{
  uint64_t mNumberChannelDescriptions;
  int v2;
  AudioChannelDescription *mChannelDescriptions;
  AudioChannelLabel v4;
  AudioChannelLabel mChannelLabel;
  int v6;
  int v7;
  unsigned int v8;

  mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
  if (!(_DWORD)mNumberChannelDescriptions)
    return 0;
  v2 = 0;
  mChannelDescriptions = a1->mChannelDescriptions;
  do
  {
    mChannelLabel = mChannelDescriptions->mChannelLabel;
    ++mChannelDescriptions;
    v4 = mChannelLabel;
    switch(mChannelLabel)
    {
      case 1u:
        v2 |= 1u;
        break;
      case 2u:
        v2 |= 2u;
        break;
      case 3u:
        v2 |= 0x400u;
        break;
      case 4u:
      case 7u:
      case 8u:
        break;
      case 5u:
        v2 |= 4u;
        break;
      case 6u:
        v2 |= 8u;
        break;
      case 9u:
        v2 |= 0x800u;
        break;
      case 0xAu:
        v2 |= 0x40u;
        break;
      case 0xBu:
        v2 |= 0x80u;
        break;
      default:
        switch(v4)
        {
          case '!':
            v2 |= 0x100u;
            break;
          case '"':
            v2 |= 0x200u;
            break;
          case '#':
            v2 |= 0x10u;
            break;
          case '$':
            v2 |= 0x20u;
            break;
          default:
            goto LABEL_17;
        }
        break;
    }
LABEL_17:
    --mNumberChannelDescriptions;
  }
  while (mNumberChannelDescriptions);
  if (v2 == 3279)
    v6 = 3;
  else
    v6 = 0;
  if (v2 == 3855)
    v7 = 2;
  else
    v7 = v6;
  if (v2 == 3135)
    v8 = 1;
  else
    v8 = v7;
  if ((~v2 & 0xC0F) != 0)
    return 0;
  else
    return v8;
}

OSStatus AudioUnitScheduleParameters(AudioUnit inUnit, const AudioUnitParameterEvent *inParameterEvent, UInt32 inNumParamEvents)
{
  uint64_t v3;
  uint64_t (***v5)(_QWORD);
  uint64_t (***v6)(_QWORD);
  uint64_t (*v7)(uint64_t (**)(_QWORD), const AudioUnitParameterEvent *, uint64_t);

  if (!inUnit)
    return -50;
  v3 = *(_QWORD *)&inNumParamEvents;
  v5 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v5)
    return 560947818;
  v6 = v5;
  if (*(_WORD *)((**v5)(v5) + 38) != 24949)
    return -3000;
  v7 = *(uint64_t (**)(uint64_t (**)(_QWORD), const AudioUnitParameterEvent *, uint64_t))(*(_QWORD *)((**v6)(v6) + 112) + 96);
  if (v7)
    return v7(v6[3], inParameterEvent, v3);
  else
    return -4;
}

OSStatus AudioUnitAddPropertyListener(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitPropertyListenerProc inProc, void *inProcUserData)
{
  uint64_t v6;
  uint64_t (***v7)(_QWORD);
  uint64_t (***v8)(_QWORD);
  uint64_t (*v9)(uint64_t (**)(_QWORD), uint64_t, AudioUnitPropertyListenerProc, void *);

  if (!inUnit)
    return -50;
  v6 = *(_QWORD *)&inID;
  v7 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v7)
    return 560947818;
  v8 = v7;
  if (*(_WORD *)((**v7)(v7) + 38) != 24949)
    return -3000;
  v9 = *(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, AudioUnitPropertyListenerProc, void *))(*(_QWORD *)((**v8)(v8) + 112) + 40);
  if (v9)
    return v9(v8[3], v6, inProc, inProcUserData);
  else
    return -4;
}

void ___ZN22AudioComponentMgr_Base36postRegistrationsChangedNotificationEv_block_invoke()
{
  os_log_t v0;
  _QWORD *v1;
  NSObject *v2;
  __CFNotificationCenter *LocalCenter;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (gAudioComponentLogCategory)
  {
    v0 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v1 = (_QWORD *)operator new();
    v1[1] = 0;
    v0 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v1 = v0;
    gAudioComponentLogCategory = (uint64_t)v1;
  }
  v2 = objc_retainAutorelease(v0);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315394;
    v5 = "AudioComponentPluginMgr.mm";
    v6 = 1024;
    v7 = 1117;
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d component registrations changed", (uint8_t *)&v4, 0x12u);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("com.apple.coreaudio.AudioComponentRegistrationsChanged"), 0, 0, 1u);
}

uint64_t ChunkyAudioFile::GetLoudnessInfo(ChunkyAudioFile *this, CACFDictionary *a2)
{
  uint64_t v4;
  const __CFDictionary *v5;
  CFTypeID v6;
  CFDictionaryRef theDict;
  char v9;
  CFDataRef v10;
  char v11;
  CFStringRef errorString;
  UInt8 *bytes;
  unsigned int v14;

  v14 = 0;
  v4 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)this + 736))(this, 1819243876, 0, &v14);
  if (!(_DWORD)v4)
  {
    CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&bytes, v14, 1);
    v4 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, _QWORD, _QWORD, unsigned int *, UInt8 *))(*(_QWORD *)this + 752))(this, 1819243876, 0, 0, &v14, bytes);
    if (!(_DWORD)v4)
    {
      errorString = 0;
      v11 = 1;
      v10 = CFDataCreate(0, bytes, v14);
      v5 = (const __CFDictionary *)CFPropertyListCreateFromXMLData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10, 0, &errorString);
      if (errorString)
        CFRelease(errorString);
      v4 = 1667787583;
      if (v5)
      {
        theDict = v5;
        v9 = 1;
        v6 = CFGetTypeID(v5);
        if (v6 == CFDictionaryGetTypeID())
        {
          CACFDictionary::SetCFMutableDictionaryFromCopy(a2, theDict, 1);
          v4 = 0;
        }
        CACFObject<void const*>::~CACFObject((uint64_t)&theDict);
      }
      CACFData::~CACFData((CACFData *)&v10);
    }
    if (bytes)
      free(bytes);
  }
  return v4;
}

void sub_18EE67000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15)
    free(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ChunkyAudioFile::GetUserChunkSize(ChunkyAudioFile *this, int a2, int a3, unsigned int *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v15;
  int v16;
  unint64_t v17;

  result = 1667787583;
  v8 = (char *)this + 144;
  v6 = *((_QWORD *)this + 18);
  v7 = *((_QWORD *)v8 + 1);
  v9 = v7 - v6;
  if (v7 != v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    v13 = 1;
    do
    {
      if (*(_DWORD *)(v6 + 24 * v10) == a2)
      {
        if (v11 == a3)
        {
          v15 = v6 + 24 * v10;
          v16 = *(_DWORD *)(v15 + 4);
          v17 = *(_QWORD *)(v15 + 8);
          if (v17 <= ~v16)
          {
            result = 0;
            *a4 = v17 - v16;
          }
          return result;
        }
        ++v11;
      }
      v10 = v13;
    }
    while (v12 > v13++);
  }
  return result;
}

void DSPGraph::Interpreter::compileFile(uint64_t *a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X2>, __int128 **a4@<X3>, uint64_t *a5@<X8>)
{
  std::string *v10;
  int v11;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  std::ios_base *v19;
  uint64_t v20;
  std::string *p_p;
  NSObject *v22;
  std::__fs::filesystem::path v23;
  std::error_code __ec;
  std::string __p;
  __int128 buf;
  _BYTE v27[120];
  uint64_t v28;
  _QWORD v29[21];

  v29[19] = *MEMORY[0x1E0C80C00];
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  memset(&v23, 0, sizeof(v23));
  v10 = (std::string *)((char *)a2 - 1);
  do
  {
    v11 = v10->__r_.__value_.__s.__data_[1];
    v10 = (std::string *)((char *)v10 + 1);
  }
  while (v11);
  std::string::append[abi:ne180100]<char const*,0>(&v23.__pn_, a2, v10);
  std::__fs::filesystem::__status(&v23, &__ec);
  if (buf != 1 || __ec.__val_ != 0)
  {
    if (DSPGraph::getLog(void)::onceToken != -1)
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_7262);
    v13 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = a2;
      _os_log_error_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, "cannot find file \"%s\"", (uint8_t *)&buf, 0xCu);
    }
LABEL_24:
    *a5 = 0;
    goto LABEL_25;
  }
  v14 = MEMORY[0x1E0DE4FA8];
  v15 = MEMORY[0x1E0DE4FA8] + 64;
  v16 = (_QWORD *)MEMORY[0x1E0DE4F40];
  v17 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v18 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  v29[0] = MEMORY[0x1E0DE4FA8] + 64;
  *(_QWORD *)&buf = v17;
  *(_QWORD *)&v27[*(_QWORD *)(v17 - 24) - 16] = v18;
  *((_QWORD *)&buf + 1) = 0;
  v19 = (std::ios_base *)&v27[*(_QWORD *)(buf - 24) - 16];
  std::ios_base::init(v19, v27);
  v19[1].__vftable = 0;
  v19[1].__fmtflags_ = -1;
  *(_QWORD *)&buf = v14 + 24;
  v29[0] = v15;
  MEMORY[0x193FFE10C](v27);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)&v27[*(_QWORD *)(buf - 24) - 16], *(_DWORD *)&v27[*(_QWORD *)(buf - 24) + 16] | 4);
  v20 = v28;
  if (v28)
  {
    std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&__p, *(_QWORD **)&v27[*(_QWORD *)(buf - 24) + 24], 0);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    DSPGraph::Interpreter::compileText(a1, (char *)p_p, a3, a4, a5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (DSPGraph::getLog(void)::onceToken != -1)
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_7262);
    v22 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_error_impl(&dword_18EE07000, v22, OS_LOG_TYPE_ERROR, "cannot open file \"%s\"", (uint8_t *)&__p, 0xCu);
    }
  }
  *(_QWORD *)&buf = *v16;
  *(_QWORD *)&v27[*(_QWORD *)(buf - 24) - 16] = v16[3];
  MEMORY[0x193FFE118](v27);
  std::istream::~istream();
  MEMORY[0x193FFE3A0](v29);
  if (!v20)
    goto LABEL_24;
LABEL_25:
  if (SHIBYTE(v23.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__pn_.__r_.__value_.__l.__data_);
}

void sub_18EE673EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a23 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a25);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

char *DSPGraph::Graph::addParameter(DSPGraph::Graph *this, unsigned int a2, float a3, char a4)
{
  char *result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int v11;

  v11 = a2;
  if (*((_BYTE *)this + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v9, "addParameter");
    std::string::basic_string[abi:ne180100]<0>(&v8, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v10, 2309, &v9, &v8);
  }
  result = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)this + 65, a2, &v11);
  *((_DWORD *)result + 6) = a2;
  *((float *)result + 7) = a3;
  result[32] = a4;
  *((_QWORD *)result + 6) = *((_QWORD *)result + 5);
  return result;
}

void sub_18EE67524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_QWORD *)v10 + 7) = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = (void *)*a1;
      *a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*v12;
  if (*v12)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v23) = v12;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*a1 + 8 * v29))
          {
            *(_QWORD *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*a1 + 8 * v29);
          **(_QWORD **)(*a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v6);
  if (v31)
  {
    *(_QWORD *)v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *(_QWORD *)v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v6) = v12;
  if (*(_QWORD *)v10)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_18EE6795C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t AudioFormat_ComputeLoudnessScalar(uint64_t a1, int a2, int a3, float *a4)
{
  NSObject *v8;
  _BOOL4 v9;
  os_log_t *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v13;
  double v14;
  float v15;
  float v16;
  NSObject *v17;
  int AppBooleanValue;
  _BOOL4 v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  int v27;
  float v28;
  const char *v29;
  NSObject *v30;
  double v31;
  int Float32;
  int v33;
  float v34;
  NSObject *v35;
  float v36;
  float v37;
  float v38;
  NSObject *v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  os_log_t *v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  const char *v53;
  const char *v54;
  unsigned int v56;
  __CFDictionary *v57;
  __int16 v58;
  BOOL v59;
  BOOL v60;
  float v61;
  float v62;
  float v63;
  __CFDictionary *v64;
  BOOL v65;
  CFStringRef theString1;
  uint64_t v67;
  __int16 v68;
  uint8_t buf[4];
  const char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  _DWORD v74[7];

  *(_QWORD *)&v74[5] = *MEMORY[0x1E0C80C00];
  AudioFormatRegisterScopeOnce();
  if (kAudioFormatSubsystem)
  {
    if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
    {
      v8 = *(NSObject **)kAudioFormatSubsystem;
      if (*(_QWORD *)kAudioFormatSubsystem)
      {
        if (!os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
          goto LABEL_224;
        *(_DWORD *)buf = 136315906;
        v70 = "AudioFormatCommon.cpp";
        v71 = 1024;
        v72 = 307;
        v73 = 1024;
        v74[0] = a2;
        LOWORD(v74[1]) = 1024;
        *(_DWORD *)((char *)&v74[1] + 2) = a3;
        _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d ->AudioFormat_ComputeLoudnessScalar %d %x", buf, 0x1Eu);
        if (kAudioFormatSubsystem)
        {
          if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
          {
            v8 = *(NSObject **)kAudioFormatSubsystem;
            if (*(_QWORD *)kAudioFormatSubsystem)
            {
LABEL_224:
              if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315650;
                v70 = "AudioFormatCommon.cpp";
                v71 = 1024;
                v72 = 308;
                v73 = 2112;
                *(_QWORD *)v74 = a1;
                _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loudness Info Dictionary %@", buf, 0x1Cu);
              }
            }
          }
        }
      }
    }
  }
  if (a4)
  {
    *a4 = 1.0;
    theString1 = 0;
    v67 = a1;
    v68 = 0;
    v9 = a1
      && (CACFDictionary::GetString((CACFDictionary *)&v67, CFSTR("media kind"), &theString1), theString1)
      && CFStringCompare(theString1, CFSTR("Music"), 0) == kCFCompareEqualTo;
    v10 = (os_log_t *)kAudioFormatSubsystem;
    if (kAudioFormatSubsystem)
    {
      if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
      {
        v11 = *(NSObject **)kAudioFormatSubsystem;
        if (*(_QWORD *)kAudioFormatSubsystem)
        {
          if (!os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
            goto LABEL_225;
          *(_DWORD *)buf = 136315650;
          v70 = "AudioFormatCommon.cpp";
          v71 = 1024;
          v72 = 325;
          v73 = 1024;
          v74[0] = a2;
          _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d inSoundCheckEnabled %d", buf, 0x18u);
          v10 = (os_log_t *)kAudioFormatSubsystem;
          if (kAudioFormatSubsystem)
          {
            if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
            {
              v11 = *(NSObject **)kAudioFormatSubsystem;
              if (*(_QWORD *)kAudioFormatSubsystem)
              {
LABEL_225:
                if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
                  goto LABEL_223;
                *(_DWORD *)buf = 136315650;
                v70 = "AudioFormatCommon.cpp";
                v71 = 1024;
                v72 = 326;
                v73 = 1024;
                v74[0] = v9;
                _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d isMusic %d", buf, 0x18u);
                v10 = (os_log_t *)kAudioFormatSubsystem;
                if (kAudioFormatSubsystem)
                {
                  if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
                  {
LABEL_223:
                    v12 = *v10;
                    if (*v10)
                    {
                      if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136315650;
                        v70 = "AudioFormatCommon.cpp";
                        v71 = 1024;
                        v72 = 327;
                        v73 = 1024;
                        v74[0] = a3 & 1;
                        _os_log_impl(&dword_18EE07000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d isToSpeaker %d", buf, 0x18u);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (a2)
      v13 = v9;
    else
      v13 = 0;
    if (!v13)
    {
      v24 = kAudioFormatSubsystem;
      if (kAudioFormatSubsystem)
      {
        v25 = *(NSObject **)kAudioFormatSubsystem;
        if (!*(_QWORD *)kAudioFormatSubsystem)
          goto LABEL_82;
      }
      else
      {
        v25 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v70 = "AudioFormatCommon.cpp";
        v71 = 1024;
        v72 = 331;
        v29 = "%25s:%-5d Not Music media kind or sound check not enabled, no gain adjustment.";
LABEL_80:
        _os_log_impl(&dword_18EE07000, v25, OS_LOG_TYPE_DEBUG, v29, buf, 0x12u);
      }
LABEL_81:
      v24 = kAudioFormatSubsystem;
      if (!kAudioFormatSubsystem)
      {
LABEL_86:
        v23 = 0;
LABEL_219:
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v67);
        return v23;
      }
LABEL_82:
      if ((*(_BYTE *)(v24 + 8) & 1) != 0)
      {
        v30 = *(NSObject **)v24;
        if (*(_QWORD *)v24)
        {
          if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
          {
            v31 = *a4;
            *(_DWORD *)buf = 136315650;
            v70 = "AudioFormatCommon.cpp";
            v71 = 1024;
            v72 = 496;
            v73 = 2048;
            *(double *)v74 = v31;
            _os_log_impl(&dword_18EE07000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d adjust scalar   %12.6f (linear amplitude)", buf, 0x1Cu);
          }
        }
      }
      goto LABEL_86;
    }
    if (!v67)
      goto LABEL_81;
    v65 = 0;
    CACFPreferencesGetAppFloatValue(CFSTR("target_loudness"), CFSTR("com.apple.coreaudio"), &v65);
    v15 = v14;
    if (v65)
      v16 = v15;
    else
      v16 = -16.0;
    if (kAudioFormatSubsystem)
    {
      if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
      {
        v17 = *(NSObject **)kAudioFormatSubsystem;
        if (*(_QWORD *)kAudioFormatSubsystem)
        {
          if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            v70 = "AudioFormatCommon.cpp";
            v71 = 1024;
            v72 = 348;
            v73 = 2048;
            *(double *)v74 = v16;
            _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d targetLoudness  %12.3f dB", buf, 0x1Cu);
          }
        }
      }
    }
    v64 = 0;
    v62 = 0.0;
    v63 = -144.0;
    v61 = 0.0;
    v60 = 0;
    if (CACFDictionary::HasKey((CACFDictionary *)&v67, CFSTR("adjust to album loudness")))
      CACFDictionary::GetBool((CACFDictionary *)&v67, CFSTR("adjust to album loudness"), &v60);
    v59 = 0;
    AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("force_album_loudness"), CFSTR("com.apple.coreaudio"), &v59);
    if (v59)
    {
      v19 = AppBooleanValue;
      v60 = AppBooleanValue;
      if (!kAudioFormatSubsystem)
      {
LABEL_50:
        if (v19
          && CACFDictionary::GetDictionary((CACFDictionary *)&v67, CFSTR("album loudness parameters"), &v64))
        {
          if (kAudioFormatSubsystem)
          {
            if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
            {
              v21 = *(NSObject **)kAudioFormatSubsystem;
              if (*(_QWORD *)kAudioFormatSubsystem)
              {
                if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  v70 = "AudioFormatCommon.cpp";
                  v71 = 1024;
                  v72 = 370;
                  _os_log_impl(&dword_18EE07000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d USING ALBUM LOUDNESS PARAMS", buf, 0x12u);
                }
              }
            }
          }
          v57 = v64;
          v58 = 0;
          if ((CACFDictionary::GetFloat32((CACFDictionary *)&v57, CFSTR("aa itu loudness"), &v62) & 1) != 0)
          {
            if ((LODWORD(v62) & 0x7FFFFFFFu) < 0x7F800000)
            {
              CACFDictionary::GetFloat32((CACFDictionary *)&v57, CFSTR("aa itu true peak"), &v63);
              if ((LODWORD(v63) & 0x7FFFFFFFu) >= 0x7F800000)
              {
                if (kAudioFormatSubsystem)
                {
                  v22 = *(NSObject **)kAudioFormatSubsystem;
                  if (!*(_QWORD *)kAudioFormatSubsystem)
                    goto LABEL_217;
                }
                else
                {
                  v22 = MEMORY[0x1E0C81028];
                }
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315394;
                  v70 = "AudioFormatCommon.cpp";
                  v71 = 1024;
                  v72 = 384;
                  v53 = "%25s:%-5d ItuTruePeak value is not finite.";
                  goto LABEL_216;
                }
LABEL_217:
                CACFDictionary::~CACFDictionary((CACFDictionary *)&v57);
                goto LABEL_218;
              }
              goto LABEL_76;
            }
            if (kAudioFormatSubsystem)
            {
              v22 = *(NSObject **)kAudioFormatSubsystem;
              if (!*(_QWORD *)kAudioFormatSubsystem)
                goto LABEL_217;
            }
            else
            {
              v22 = MEMORY[0x1E0C81028];
            }
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              goto LABEL_217;
            *(_DWORD *)buf = 136315394;
            v70 = "AudioFormatCommon.cpp";
            v71 = 1024;
            v72 = 378;
            v53 = "%25s:%-5d ItuLoudness value is not finite.";
          }
          else
          {
            if (kAudioFormatSubsystem)
            {
              v22 = *(NSObject **)kAudioFormatSubsystem;
              if (!*(_QWORD *)kAudioFormatSubsystem)
                goto LABEL_217;
            }
            else
            {
              v22 = MEMORY[0x1E0C81028];
            }
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              goto LABEL_217;
            *(_DWORD *)buf = 136315394;
            v70 = "AudioFormatCommon.cpp";
            v71 = 1024;
            v72 = 374;
            v53 = "%25s:%-5d ItuLoudnessKey not present in AlbumLoudnessParameters dictionary.";
          }
          goto LABEL_216;
        }
        if (CACFDictionary::GetDictionary((CACFDictionary *)&v67, CFSTR("main loudness parameters"), &v64))
        {
          if (kAudioFormatSubsystem)
          {
            if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
            {
              v26 = *(NSObject **)kAudioFormatSubsystem;
              if (*(_QWORD *)kAudioFormatSubsystem)
              {
                if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  v70 = "AudioFormatCommon.cpp";
                  v71 = 1024;
                  v72 = 388;
                  _os_log_impl(&dword_18EE07000, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d USING MAIN LOUDNESS PARAMS", buf, 0x12u);
                }
              }
            }
          }
          v57 = v64;
          v58 = 0;
          if ((CACFDictionary::GetFloat32((CACFDictionary *)&v57, CFSTR("aa itu loudness"), &v62) & 1) != 0)
          {
            if ((LODWORD(v62) & 0x7FFFFFFFu) >= 0x7F800000)
            {
              if (kAudioFormatSubsystem)
              {
                v22 = *(NSObject **)kAudioFormatSubsystem;
                if (!*(_QWORD *)kAudioFormatSubsystem)
                  goto LABEL_217;
              }
              else
              {
                v22 = MEMORY[0x1E0C81028];
              }
              if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                goto LABEL_217;
              *(_DWORD *)buf = 136315394;
              v70 = "AudioFormatCommon.cpp";
              v71 = 1024;
              v72 = 396;
              v53 = "%25s:%-5d ItuLoudness value is not finite.";
            }
            else
            {
              CACFDictionary::GetFloat32((CACFDictionary *)&v57, CFSTR("aa itu true peak"), &v63);
              if ((LODWORD(v63) & 0x7FFFFFFFu) < 0x7F800000)
              {
LABEL_76:
                CACFDictionary::~CACFDictionary((CACFDictionary *)&v57);
                v27 = 0;
                v28 = 20.0;
                goto LABEL_118;
              }
              if (kAudioFormatSubsystem)
              {
                v22 = *(NSObject **)kAudioFormatSubsystem;
                if (!*(_QWORD *)kAudioFormatSubsystem)
                  goto LABEL_217;
              }
              else
              {
                v22 = MEMORY[0x1E0C81028];
              }
              if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                goto LABEL_217;
              *(_DWORD *)buf = 136315394;
              v70 = "AudioFormatCommon.cpp";
              v71 = 1024;
              v72 = 402;
              v53 = "%25s:%-5d ItuTruePeak value is not finite.";
            }
          }
          else
          {
            if (kAudioFormatSubsystem)
            {
              v22 = *(NSObject **)kAudioFormatSubsystem;
              if (!*(_QWORD *)kAudioFormatSubsystem)
                goto LABEL_217;
            }
            else
            {
              v22 = MEMORY[0x1E0C81028];
            }
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              goto LABEL_217;
            *(_DWORD *)buf = 136315394;
            v70 = "AudioFormatCommon.cpp";
            v71 = 1024;
            v72 = 392;
            v53 = "%25s:%-5d ItuLoudnessKey not present in MainLoudnessParameters dictionary.";
          }
LABEL_216:
          _os_log_impl(&dword_18EE07000, v22, OS_LOG_TYPE_DEFAULT, v53, buf, 0x12u);
          goto LABEL_217;
        }
        Float32 = CACFDictionary::GetFloat32((CACFDictionary *)&v67, CFSTR("precalculated sc adjustment"), &v61);
        if (v65)
          v33 = 0;
        else
          v33 = Float32;
        if (v33 == 1)
        {
          v34 = v61;
          if ((LODWORD(v61) & 0x7FFFFFFFu) < 0x7F800000)
          {
            if (kAudioFormatSubsystem)
            {
              if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
              {
                v35 = *(NSObject **)kAudioFormatSubsystem;
                if (*(_QWORD *)kAudioFormatSubsystem)
                {
                  if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136315394;
                    v70 = "AudioFormatCommon.cpp";
                    v71 = 1024;
                    v72 = 410;
                    _os_log_impl(&dword_18EE07000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d USING precalculated adjustment", buf, 0x12u);
                    v34 = v61;
                  }
                }
              }
            }
            v36 = 1.1755e-38;
            if (v34 >= 1.1755e-38)
              v36 = v34;
            v37 = log10f(v36);
            v27 = 0;
            v38 = v37 * 20.0;
            v62 = -16.0 - v38;
            v28 = fminf(v38, 20.0);
            goto LABEL_118;
          }
          if (kAudioFormatSubsystem)
          {
            v51 = *(NSObject **)kAudioFormatSubsystem;
            if (!*(_QWORD *)kAudioFormatSubsystem)
              goto LABEL_218;
          }
          else
          {
            v51 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            v70 = "AudioFormatCommon.cpp";
            v71 = 1024;
            v72 = 407;
            v54 = "%25s:%-5d PrecalculatedSCAdjustment value is not finite.";
LABEL_212:
            _os_log_impl(&dword_18EE07000, v51, OS_LOG_TYPE_DEFAULT, v54, buf, 0x12u);
          }
        }
        else
        {
          if (CACFDictionary::GetDictionary((CACFDictionary *)&v67, CFSTR("sound check info"), &v64))
          {
            if (kAudioFormatSubsystem)
            {
              if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
              {
                v39 = *(NSObject **)kAudioFormatSubsystem;
                if (*(_QWORD *)kAudioFormatSubsystem)
                {
                  if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136315394;
                    v70 = "AudioFormatCommon.cpp";
                    v71 = 1024;
                    v72 = 416;
                    _os_log_impl(&dword_18EE07000, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d USING SOUND CHECK INFO", buf, 0x12u);
                  }
                }
              }
            }
            v57 = v64;
            v58 = 0;
            v56 = 0;
            if ((GetMaxSoundCheckValue((CACFDictionary *)&v57, CFSTR("sc ave perceived power coeff"), &v56) & 1) == 0)
            {
              if (kAudioFormatSubsystem)
              {
                v22 = *(NSObject **)kAudioFormatSubsystem;
                if (!*(_QWORD *)kAudioFormatSubsystem)
                  goto LABEL_217;
              }
              else
              {
                v22 = MEMORY[0x1E0C81028];
              }
              if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                goto LABEL_217;
              *(_DWORD *)buf = 136315394;
              v70 = "AudioFormatCommon.cpp";
              v71 = 1024;
              v72 = 422;
              v53 = "%25s:%-5d AvePerceivedPowerCoeff is not present in SoundCheck dictionary.";
              goto LABEL_216;
            }
            v40 = v56;
            if (!v56)
            {
              if (kAudioFormatSubsystem)
              {
                v22 = *(NSObject **)kAudioFormatSubsystem;
                if (!*(_QWORD *)kAudioFormatSubsystem)
                  goto LABEL_217;
              }
              else
              {
                v22 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                v70 = "AudioFormatCommon.cpp";
                v71 = 1024;
                v72 = 426;
                v53 = "%25s:%-5d AvePerceivedPowerCoeff is not present in SoundCheck dictionary.";
                goto LABEL_216;
              }
              goto LABEL_217;
            }
            *(_DWORD *)buf = 0;
            if (GetMaxSoundCheckValue((CACFDictionary *)&v57, CFSTR("sc peak amplitude"), (unsigned int *)buf))
            {
              v41 = (float)*(unsigned int *)buf / 32767.0;
              if (v41 < 1.1755e-38)
                v41 = 1.1755e-38;
              v63 = log10f(v41) * 20.0;
            }
            v42 = sqrtf(1000.0 / (float)v40);
            if (v42 < 1.1755e-38)
              v42 = 1.1755e-38;
            v28 = 20.0;
            v62 = -16.0 - (float)(log10f(v42) * 20.0);
            CACFDictionary::~CACFDictionary((CACFDictionary *)&v57);
            v27 = 1;
LABEL_118:
            v43 = v16 - v62;
            if ((float)(v16 - v62) > 0.0)
            {
              v44 = fmaxf(-1.0 - v63, 0.0);
              if (v44 < v43)
                v43 = v44;
              if (v28 < v43)
                v43 = v28;
            }
            v45 = floorf(v43 + 0.5);
            if (v27)
              v46 = v45;
            else
              v46 = v43;
            *a4 = __exp10f(v46 * 0.05);
            v47 = (os_log_t *)kAudioFormatSubsystem;
            if (kAudioFormatSubsystem)
            {
              if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
              {
                v48 = *(NSObject **)kAudioFormatSubsystem;
                if (*(_QWORD *)kAudioFormatSubsystem)
                {
                  if (!os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
                    goto LABEL_231;
                  *(_DWORD *)buf = 136315650;
                  v70 = "AudioFormatCommon.cpp";
                  v71 = 1024;
                  v72 = 486;
                  v73 = 2048;
                  *(double *)v74 = v16;
                  _os_log_impl(&dword_18EE07000, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d targetLoudness  %12.3f dB", buf, 0x1Cu);
                  v47 = (os_log_t *)kAudioFormatSubsystem;
                  if (kAudioFormatSubsystem)
                  {
                    if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
                    {
                      v48 = *(NSObject **)kAudioFormatSubsystem;
                      if (*(_QWORD *)kAudioFormatSubsystem)
                      {
LABEL_231:
                        if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
                          goto LABEL_226;
                        *(_DWORD *)buf = 136315650;
                        v70 = "AudioFormatCommon.cpp";
                        v71 = 1024;
                        v72 = 487;
                        v73 = 2048;
                        *(double *)v74 = v62;
                        _os_log_impl(&dword_18EE07000, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d programLoudness %12.3f dB", buf, 0x1Cu);
                        v47 = (os_log_t *)kAudioFormatSubsystem;
                        if (kAudioFormatSubsystem)
                        {
                          if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
                          {
LABEL_226:
                            v49 = *v47;
                            if (*v47)
                            {
                              if (!os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG))
                                goto LABEL_227;
                              *(_DWORD *)buf = 136315650;
                              v70 = "AudioFormatCommon.cpp";
                              v71 = 1024;
                              v72 = 488;
                              v73 = 2048;
                              *(double *)v74 = v63;
                              _os_log_impl(&dword_18EE07000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d peakDB          %12.3f dB", buf, 0x1Cu);
                              v47 = (os_log_t *)kAudioFormatSubsystem;
                              if (kAudioFormatSubsystem)
                              {
                                if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
                                {
                                  v49 = *(NSObject **)kAudioFormatSubsystem;
                                  if (*(_QWORD *)kAudioFormatSubsystem)
                                  {
LABEL_227:
                                    if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
                                      goto LABEL_228;
                                    *(_DWORD *)buf = 136315650;
                                    v70 = "AudioFormatCommon.cpp";
                                    v71 = 1024;
                                    v72 = 489;
                                    v73 = 2048;
                                    *(double *)v74 = v28;
                                    _os_log_impl(&dword_18EE07000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d maxAdjust       %12.3f dB", buf, 0x1Cu);
                                    v47 = (os_log_t *)kAudioFormatSubsystem;
                                    if (kAudioFormatSubsystem)
                                    {
                                      if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
                                      {
LABEL_228:
                                        v50 = *v47;
                                        if (*v47)
                                        {
                                          if (!os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG))
                                            goto LABEL_229;
                                          *(_DWORD *)buf = 136315650;
                                          v70 = "AudioFormatCommon.cpp";
                                          v71 = 1024;
                                          v72 = 490;
                                          v73 = 2048;
                                          *(double *)v74 = v46;
                                          _os_log_impl(&dword_18EE07000, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d adjust          %12.3f dB", buf, 0x1Cu);
                                          v47 = (os_log_t *)kAudioFormatSubsystem;
                                          if (kAudioFormatSubsystem)
                                          {
                                            if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
                                            {
                                              v50 = *(NSObject **)kAudioFormatSubsystem;
                                              if (*(_QWORD *)kAudioFormatSubsystem)
                                              {
LABEL_229:
                                                if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
                                                  goto LABEL_230;
                                                *(_DWORD *)buf = 136315650;
                                                v70 = "AudioFormatCommon.cpp";
                                                v71 = 1024;
                                                v72 = 491;
                                                v73 = 2048;
                                                *(double *)v74 = (float)(v46 + v62);
                                                _os_log_impl(&dword_18EE07000, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d result loudness %12.3f dB", buf, 0x1Cu);
                                                v47 = (os_log_t *)kAudioFormatSubsystem;
                                                if (kAudioFormatSubsystem)
                                                {
                                                  if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
                                                  {
LABEL_230:
                                                    v25 = *v47;
                                                    if (*v47)
                                                    {
                                                      if (os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG))
                                                      {
                                                        *(_DWORD *)buf = 136315394;
                                                        v70 = "AudioFormatCommon.cpp";
                                                        v71 = 1024;
                                                        v72 = 492;
                                                        v29 = "%25s:%-5d ---";
                                                        goto LABEL_80;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_81;
          }
          if (kAudioFormatSubsystem)
          {
            if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
            {
              v52 = *(NSObject **)kAudioFormatSubsystem;
              if (*(_QWORD *)kAudioFormatSubsystem)
              {
                if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  v70 = "AudioFormatCommon.cpp";
                  v71 = 1024;
                  v72 = 456;
                  _os_log_impl(&dword_18EE07000, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d LID HAS NO LOUDNESS INFO", buf, 0x12u);
                }
              }
            }
          }
          if (theString1)
            goto LABEL_86;
          if (kAudioFormatSubsystem)
          {
            v51 = *(NSObject **)kAudioFormatSubsystem;
            if (!*(_QWORD *)kAudioFormatSubsystem)
              goto LABEL_218;
          }
          else
          {
            v51 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            v70 = "AudioFormatCommon.cpp";
            v71 = 1024;
            v72 = 458;
            v54 = "%25s:%-5d Loudness Info Dictionary contains neither MainLoudnessParametersKey nor SoundCheckInfoKey no"
                  "r PrecalculatedSCAdjustmentKey nor MediaKindKey.";
            goto LABEL_212;
          }
        }
LABEL_218:
        v23 = 4294967246;
        goto LABEL_219;
      }
      if ((*(_BYTE *)(kAudioFormatSubsystem + 8) & 1) != 0)
      {
        v20 = *(NSObject **)kAudioFormatSubsystem;
        if (*(_QWORD *)kAudioFormatSubsystem)
        {
          if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            v70 = "AudioFormatCommon.cpp";
            v71 = 1024;
            v72 = 366;
            v73 = 1024;
            v74[0] = v19;
            _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Force album loudness to %d", buf, 0x18u);
          }
        }
      }
    }
    v19 = v60;
    goto LABEL_50;
  }
  return 4294967246;
}

void sub_18EE68C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  _Unwind_Resume(a1);
}

void AudioFormatRegisterScopeOnce(void)
{
  unint64_t v0;
  char v1;
  char **v2;
  char *v3;

  v0 = atomic_load(AudioFormatRegisterScopeOnce(void)::onceflag);
  if (v0 != -1)
  {
    v3 = &v1;
    v2 = &v3;
    std::__call_once(AudioFormatRegisterScopeOnce(void)::onceflag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AudioFormatRegisterScopeOnce(void)::$_0 &&>>);
  }
}

void DSPGraph::Preprocessor::preprocess(std::string *a1, DSPGraph::Preprocessor *a2, uint64_t a3, int a4)
{
  int v4;
  std::string::value_type *v7;
  int v8;
  std::string::value_type *v9;
  int v10;
  int v11;
  std::string::value_type *v12;
  std::string *p_p;
  uint64_t v14;
  __int128 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  std::__split_buffer<std::string>::pointer first;
  std::string::size_type end_high;
  std::__split_buffer<std::string>::pointer v22;
  char v23;
  __int128 *v24;
  BOOL v25;
  BOOL v26;
  int v28;
  int v29;
  __int128 *v31;
  const std::string::value_type *v32;
  __int128 *v33;
  uint64_t v34;
  int v35;
  __int128 *v37;
  __int128 *v38;
  _BOOL4 v39;
  _BOOL4 v40;
  __int128 *v41;
  __int128 *v42;
  int v43;
  int v44;
  __int128 *v46;
  int v47;
  int v48;
  const char **v50;
  const char **v51;
  std::string *v52;
  std::string::size_type size;
  __int128 *v54;
  int v56;
  int v57;
  uint64_t v59;
  const char **v60;
  __int128 *v61;
  uint64_t v62;
  const char **v63;
  std::string::size_type v64;
  std::string *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 v71;
  std::vector<std::string>::pointer v72;
  std::string *v73;
  std::string::size_type v74;
  int v75;
  int v76;
  _BOOL4 v78;
  NSObject *v79;
  std::string *v80;
  _OWORD *v81;
  __int128 v82;
  std::vector<std::string>::pointer v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  char v90;
  uint64_t v91;
  int v92;
  char v93;
  char v94;
  BOOL v95;
  BOOL v96;
  __int128 *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const void **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const void **v108;
  __int128 *v109;
  uint64_t v110;
  _QWORD *v111;
  std::string *v112;
  const std::string::value_type *v113;
  uint64_t v114;
  uint64_t v115;
  __int128 *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  std::string *v122;
  std::string::size_type v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 *v135;
  uint64_t v136;
  int v137;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  std::string *v143;
  uint64_t v144;
  const std::string::value_type *v145;
  const std::string::value_type *v146;
  const DSPGraph::Macro *v147;
  uint64_t v148;
  BOOL v149;
  BOOL v150;
  __int128 *v151;
  uint64_t v152;
  uint64_t v153;
  __int128 *v154;
  uint64_t v155;
  __int128 *v156;
  __int128 *v157;
  uint64_t v158;
  __int128 *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  std::string *v164;
  std::__split_buffer<std::string>::pointer v165;
  std::string::size_type begin;
  std::__split_buffer<std::string>::pointer v167;
  std::string *v168;
  std::string *v169;
  std::__fs::filesystem::path *v170;
  std::string::size_type v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  std::string::size_type v191;
  std::string::size_type v192;
  _QWORD *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  std::string *v200;
  std::__split_buffer<std::string>::pointer end;
  __int128 v202;
  uint64_t *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  __int128 *v207;
  uint64_t v208;
  const char **v209;
  const char **v210;
  std::string *v211;
  std::string *v212;
  __int128 *v213;
  std::string *v214;
  std::runtime_error *exception;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  std::string v220;
  char v221;
  std::error_code __ec;
  std::string v223;
  std::__fs::filesystem::path v224;
  std::string v225;
  __int128 v226;
  uint64_t v227;
  std::string *v228;
  std::string __p;
  std::string::value_type *v230;
  _QWORD v231[2];
  void *v232;
  uint64_t *v233;
  unint64_t v234;
  std::__split_buffer<std::string> buf[3];
  uint64_t v236;
  uint64_t v237;

  v4 = a4;
  v237 = *MEMORY[0x1E0C80C00];
  v7 = *(std::string::value_type **)a3;
  if (*(char *)(a3 + 23) >= 0)
    v7 = (std::string::value_type *)a3;
  v232 = 0;
  v233 = 0;
  v234 = 0;
  v231[0] = a2;
  v231[1] = &v232;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    v9 = v7 + 1;
    v8 = *v7;
    v230 = v7 + 1;
    if (v8 <= 90)
      break;
    if (v8 != 91)
    {
      if (v8 == 92)
      {
        v230 = v7 + 2;
        v8 = v7[1];
        if (v8 > 101)
        {
          v10 = v8 - 110;
          LOBYTE(v8) = 10;
          switch(v10)
          {
            case 0:
              goto LABEL_234;
            case 1:
            case 2:
            case 3:
            case 5:
            case 7:
            case 9:
              LOBYTE(v8) = v7[1];
              goto LABEL_234;
            case 4:
              LOBYTE(v8) = 13;
              goto LABEL_234;
            case 6:
              LOBYTE(v8) = 9;
              goto LABEL_234;
            case 8:
              LOBYTE(v8) = 11;
              goto LABEL_234;
            case 10:
              if (v7[2] < 0
                || (v88 = v7[2],
                    v89 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v88 + 60),
                    (v89 & 0x10000) == 0))
              {
                std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v220, "preprocess");
                std::string::basic_string[abi:ne180100]<0>(&__p, "preprocessor error: expected hex digit");
                DSPGraph::ThrowException(1886548769, (__int128 *)buf, 433, (__int128 *)&v220, (__int128 *)&__p);
              }
              if ((v89 & 0x9000) != 0)
                v90 = 9;
              else
                v90 = 0;
              v230 = v7 + 4;
              v91 = v7[3];
              if (!v91)
                goto LABEL_580;
              if ((v91 & 0x80000000) != 0
                || (v92 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v91 + 60), (v92 & 0x10000) == 0))
              {
                std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v220, "preprocess");
                std::string::basic_string[abi:ne180100]<0>(&__p, "preprocessor error: expected hex digit");
                DSPGraph::ThrowException(1886548769, (__int128 *)buf, 448, (__int128 *)&v220, (__int128 *)&__p);
              }
              v93 = v88 + v90;
              if ((v92 & 0x1000) != 0)
                v94 = -87;
              else
                v94 = -48;
              if ((v92 & 0x8000) != 0)
                v94 = -55;
              std::string::push_back(a1, (v91 + v94) | (16 * v93));
              break;
            default:
              LOBYTE(v8) = v7[1];
              goto LABEL_234;
          }
          goto LABEL_559;
        }
        if (!v7[1])
          goto LABEL_559;
        if (v8 == 98)
          v23 = 8;
        else
          v23 = v7[1];
        if (v8 == 97)
          LOBYTE(v8) = 7;
        else
          LOBYTE(v8) = v23;
LABEL_234:
        std::string::push_back(a1, v8);
        goto LABEL_559;
      }
LABEL_32:
      if (v8 != 123 || v4 == 0)
        goto LABEL_234;
      memset(buf, 0, 24);
      DSPGraph::Preprocessor::parseToEnd(&v230, 123, 125, (std::string *)buf);
      std::string::push_back(a1, 123);
      if (SHIBYTE(buf[0].__end_) >= 0)
        first = (std::__split_buffer<std::string>::pointer)buf;
      else
        first = buf[0].__first_;
      if (SHIBYTE(buf[0].__end_) >= 0)
        end_high = HIBYTE(buf[0].__end_);
      else
        end_high = (std::string::size_type)buf[0].__begin_;
      std::string::append(a1, (const std::string::value_type *)first, end_high);
      std::string::push_back(a1, 125);
      if (SHIBYTE(buf[0].__end_) < 0)
      {
        v22 = buf[0].__first_;
LABEL_558:
        operator delete(v22);
        goto LABEL_559;
      }
      goto LABEL_559;
    }
    memset(&__p, 0, sizeof(__p));
    DSPGraph::Preprocessor::parseToEnd(&v230, 91, 93, &__p);
    DSPGraph::Preprocessor::preprocess(buf, a2, &__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[0].__first_;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)buf[0].__end_;
    p_p = &__p;
    if (SHIBYTE(buf[0].__end_) < 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v227 = 0;
    v228 = p_p;
    v226 = 0uLL;
    if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v226))
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v220, "preprocess");
      std::string::basic_string[abi:ne180100]<0>(&v225, "preprocessor error: expected macro name");
      DSPGraph::ThrowException(1886548769, (__int128 *)buf, 494, (__int128 *)&v220, (__int128 *)&v225);
    }
    v14 = HIBYTE(v227);
    if (v227 < 0)
      v14 = *((_QWORD *)&v226 + 1);
    switch(v14)
    {
      case 1:
        v15 = (__int128 *)v226;
        if (v227 >= 0)
          v15 = &v226;
        v16 = *(unsigned __int8 *)v15;
        if (v16 == 42)
        {
          memset(buf, 0, 24);
          v114 = 1;
          while (DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
          {
            v115 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"multiplication", 584, "preprocess");
            v114 = caulk::numeric::exceptional_mul<long>(v114, v115);
          }
          std::to_string(&v220, v114);
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = &v220;
          else
            v52 = (std::string *)v220.__r_.__value_.__r.__words[0];
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v220.__r_.__value_.__r.__words[2]);
          else
            size = v220.__r_.__value_.__l.__size_;
          goto LABEL_407;
        }
        if (v16 == 43)
        {
          v17 = 0;
          memset(buf, 0, 24);
          while (DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
          {
            v18 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"addition", 576, "preprocess");
            v17 = caulk::numeric::exceptional_add<long>(v17, v18);
          }
          std::to_string(&v220, v17);
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = &v220;
          else
            v52 = (std::string *)v220.__r_.__value_.__r.__words[0];
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v220.__r_.__value_.__r.__words[2]);
          else
            size = v220.__r_.__value_.__l.__size_;
          goto LABEL_407;
        }
        v40 = v14 == 2;
        v116 = (__int128 *)v226;
        if (v227 >= 0)
          v116 = &v226;
        v117 = *(unsigned __int8 *)v116;
        if (v117 == 47)
        {
          memset(buf, 0, 24);
          memset(&v220, 0, sizeof(v220));
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
          {
            std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 663, (__int128 *)&v224, (__int128 *)&v223);
          }
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v220))
          {
            std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 666, (__int128 *)&v224, (__int128 *)&v223);
          }
          v152 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"division", 668, "preprocess");
          v153 = DSPGraph::strToLong((uint64_t *)&v220, (uint64_t)"division", 669, "preprocess");
          if (!v153)
          {
            std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v223, "division by zero is not allowed");
            DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 671, (__int128 *)&v224, (__int128 *)&v223);
          }
          std::to_string(&v225, v152 / v153);
          if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v122 = &v225;
          else
            v122 = (std::string *)v225.__r_.__value_.__r.__words[0];
          if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v123 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
          else
            v123 = v225.__r_.__value_.__l.__size_;
          goto LABEL_492;
        }
        if (v117 == 45)
        {
          memset(buf, 0, 24);
          memset(&v220, 0, sizeof(v220));
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
          {
            std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 651, (__int128 *)&v224, (__int128 *)&v223);
          }
          v118 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"subtraction", 653, "preprocess");
          if (DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v220))
          {
            v119 = DSPGraph::strToLong((uint64_t *)&v220, (uint64_t)"subtraction", 655, "preprocess");
            v120 = __OFSUB__(v118, v119);
            v121 = v118 - v119;
            if (v120)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "arithmetic subtraction overflow");
              exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5030] + 16);
            }
            std::to_string(&v225, v121);
            if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v122 = &v225;
            else
              v122 = (std::string *)v225.__r_.__value_.__r.__words[0];
            if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v123 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
            else
              v123 = v225.__r_.__value_.__l.__size_;
          }
          else
          {
            v180 = caulk::numeric::exceptional_mul<long>(v118, -1);
            std::to_string(&v225, v180);
            if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v122 = &v225;
            else
              v122 = (std::string *)v225.__r_.__value_.__r.__words[0];
            if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v123 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
            else
              v123 = v225.__r_.__value_.__l.__size_;
          }
          goto LABEL_492;
        }
        v39 = 1;
        if (v14 == 2)
          goto LABEL_95;
        goto LABEL_371;
      case 2:
        v37 = (__int128 *)v226;
        if (v227 >= 0)
          v37 = &v226;
        if (*(_WORD *)v37 == 29295)
        {
          v95 = 0;
          memset(buf, 0, 24);
          while (1)
          {
            v96 = v95;
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
              break;
            v95 = 1;
            if (!v96)
            {
              if (v227 >= 0)
                v97 = &v226;
              else
                v97 = (__int128 *)v226;
              v95 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)v97, 595, "preprocess") != 0;
            }
          }
          if (v96)
            v113 = "1";
          else
            v113 = "0";
LABEL_357:
          std::string::append(a1, v113, 1uLL);
          if (SHIBYTE(buf[0].__end_) < 0)
            goto LABEL_516;
          goto LABEL_554;
        }
        v38 = (__int128 *)v226;
        if (v227 >= 0)
          v38 = &v226;
        if (*(_WORD *)v38 == 15677)
        {
          memset(buf, 0, 24);
          memset(&v220, 0, sizeof(v220));
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
          {
            std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 636, (__int128 *)&v224, (__int128 *)&v223);
          }
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v220))
          {
            std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 639, (__int128 *)&v224, (__int128 *)&v223);
          }
          v144 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"equality", 641, "preprocess");
          if (v144 == DSPGraph::strToLong((uint64_t *)&v220, (uint64_t)"equality", 642, "preprocess"))
            v145 = "1";
          else
            v145 = "0";
          goto LABEL_505;
        }
        v39 = v14 == 1;
        v40 = 1;
LABEL_95:
        v41 = (__int128 *)v226;
        if (v227 >= 0)
          v41 = &v226;
        if (*(_WORD *)v41 == 15649)
        {
          memset(buf, 0, 24);
          memset(&v220, 0, sizeof(v220));
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
          {
            std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 677, (__int128 *)&v224, (__int128 *)&v223);
          }
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v220))
          {
            std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 680, (__int128 *)&v224, (__int128 *)&v223);
          }
          v148 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"inequality", 682, "preprocess");
          if (v148 == DSPGraph::strToLong((uint64_t *)&v220, (uint64_t)"inequality", 683, "preprocess"))
            v145 = "0";
          else
            v145 = "1";
          goto LABEL_505;
        }
        if (v39)
        {
LABEL_371:
          v154 = (__int128 *)v226;
          if (v227 >= 0)
            v154 = &v226;
          if (*(_BYTE *)v154 == 60)
          {
            memset(buf, 0, 24);
            memset(&v220, 0, sizeof(v220));
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 692, (__int128 *)&v224, (__int128 *)&v223);
            }
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v220))
            {
              std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 695, (__int128 *)&v224, (__int128 *)&v223);
            }
            v155 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"less than", 697, "preprocess");
            if (v155 >= DSPGraph::strToLong((uint64_t *)&v220, (uint64_t)"less than", 698, "preprocess"))
              v145 = "0";
            else
              v145 = "1";
LABEL_505:
            std::string::append(a1, v145, 1uLL);
            goto LABEL_513;
          }
        }
        if (v40)
        {
          v156 = (__int128 *)v226;
          if (v227 >= 0)
            v156 = &v226;
          if (*(_WORD *)v156 == 15676)
          {
            memset(buf, 0, 24);
            memset(&v220, 0, sizeof(v220));
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 707, (__int128 *)&v224, (__int128 *)&v223);
            }
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v220))
            {
              std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 710, (__int128 *)&v224, (__int128 *)&v223);
            }
            v181 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"less than or equal", 712, "preprocess");
            if (v181 <= DSPGraph::strToLong((uint64_t *)&v220, (uint64_t)"less than or equal", 713, "preprocess"))
              v145 = "1";
            else
              v145 = "0";
            goto LABEL_505;
          }
        }
        if (v39)
        {
          v157 = (__int128 *)v226;
          if (v227 >= 0)
            v157 = &v226;
          if (*(_BYTE *)v157 == 62)
          {
            memset(buf, 0, 24);
            memset(&v220, 0, sizeof(v220));
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 722, (__int128 *)&v224, (__int128 *)&v223);
            }
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v220))
            {
              std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 725, (__int128 *)&v224, (__int128 *)&v223);
            }
            v158 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"greater than", 727, "preprocess");
            if (v158 <= DSPGraph::strToLong((uint64_t *)&v220, (uint64_t)"greater than", 728, "preprocess"))
              v145 = "0";
            else
              v145 = "1";
            goto LABEL_505;
          }
        }
        if (v40)
        {
          v159 = (__int128 *)v226;
          if (v227 >= 0)
            v159 = &v226;
          if (*(_WORD *)v159 == 15678)
          {
            memset(buf, 0, 24);
            memset(&v220, 0, sizeof(v220));
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 737, (__int128 *)&v224, (__int128 *)&v223);
            }
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v220))
            {
              std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 740, (__int128 *)&v224, (__int128 *)&v223);
            }
            v182 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"greater than or equal", 742, "preprocess");
            if (v182 >= DSPGraph::strToLong((uint64_t *)&v220, (uint64_t)"greater than or equal", 743, "preprocess"))
              v145 = "1";
            else
              v145 = "0";
            goto LABEL_505;
          }
          if (*(_WORD *)v159 == 26217)
          {
            memset(buf, 0, 24);
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v220, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v225, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocessor error: if: expected condition");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v220, 752, (__int128 *)&v225, (__int128 *)&v224);
            }
            if (v227 >= 0)
              v207 = &v226;
            else
              v207 = (__int128 *)v226;
            v208 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)v207, 754, "preprocess");
            memset(&v220, 0, sizeof(v220));
            if (v208)
            {
              if (!DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v228, (uint64_t)&v220))
              {
                std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
                std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: ifdef expected thenClause");
                DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 759, (__int128 *)&v224, (__int128 *)&v223);
              }
              DSPGraph::Preprocessor::skipMacroBody((std::string::value_type **)&v228, v210);
              DSPGraph::Preprocessor::preprocess(&v225, a2, &v220, 1);
              if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v122 = &v225;
              else
                v122 = (std::string *)v225.__r_.__value_.__r.__words[0];
              if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v123 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
              else
                v123 = v225.__r_.__value_.__l.__size_;
LABEL_492:
              std::string::append(a1, (const std::string::value_type *)v122, v123);
              if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v225.__r_.__value_.__l.__data_);
            }
            else
            {
              if ((DSPGraph::Preprocessor::skipMacroBody((std::string::value_type **)&v228, v209) & 1) == 0)
              {
                std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
                std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: ifdef expected thenClause");
                DSPGraph::ThrowException(1886548769, (__int128 *)&v225, 765, (__int128 *)&v224, (__int128 *)&v223);
              }
              if (DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v228, (uint64_t)&v220))
              {
                DSPGraph::Preprocessor::preprocess(&v225, a2, &v220, 1);
                if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v122 = &v225;
                else
                  v122 = (std::string *)v225.__r_.__value_.__r.__words[0];
                if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v123 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
                else
                  v123 = v225.__r_.__value_.__l.__size_;
                goto LABEL_492;
              }
            }
LABEL_513:
            if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v220.__r_.__value_.__l.__data_);
LABEL_515:
            if ((SHIBYTE(buf[0].__end_) & 0x80000000) == 0)
              goto LABEL_554;
LABEL_516:
            v167 = buf[0].__first_;
LABEL_517:
            operator delete(v167);
            goto LABEL_554;
          }
        }
        if (v14 != 5)
          goto LABEL_134;
LABEL_106:
        if (v227 >= 0)
          v46 = &v226;
        else
          v46 = (__int128 *)v226;
        v47 = *(_DWORD *)v46;
        v48 = *((unsigned __int8 *)v46 + 4);
        if (v47 == 1701078633 && v48 == 102)
        {
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v226))
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v220, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v225, "preprocessor error: expected name");
            DSPGraph::ThrowException(1886548769, (__int128 *)buf, 773, (__int128 *)&v220, (__int128 *)&v225);
          }
          memset(buf, 0, 24);
          if (DSPGraph::Preprocessor::find(a2, (unsigned __int8 **)&v226))
          {
            if (!DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v228, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v220, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v225, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocessor error: ifdef expected thenClause");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v220, 779, (__int128 *)&v225, (__int128 *)&v224);
            }
            DSPGraph::Preprocessor::skipMacroBody((std::string::value_type **)&v228, v51);
            DSPGraph::Preprocessor::preprocess(&v220, a2, buf, 1);
            if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v52 = &v220;
            else
              v52 = (std::string *)v220.__r_.__value_.__r.__words[0];
            if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v220.__r_.__value_.__r.__words[2]);
            else
              size = v220.__r_.__value_.__l.__size_;
          }
          else
          {
            if ((DSPGraph::Preprocessor::skipMacroBody((std::string::value_type **)&v228, v50) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&v220, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v225, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocessor error: ifdef expected thenClause");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v220, 785, (__int128 *)&v225, (__int128 *)&v224);
            }
            if (!DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v228, (uint64_t)buf))
              goto LABEL_515;
            DSPGraph::Preprocessor::preprocess(&v220, a2, buf, 1);
            if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v52 = &v220;
            else
              v52 = (std::string *)v220.__r_.__value_.__r.__words[0];
            if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v220.__r_.__value_.__r.__words[2]);
            else
              size = v220.__r_.__value_.__l.__size_;
          }
LABEL_407:
          std::string::append(a1, (const std::string::value_type *)v52, size);
          goto LABEL_513;
        }
LABEL_134:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v226, "ifset"))
        {
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v226))
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v220, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v225, "preprocessor error: expected name");
            DSPGraph::ThrowException(1886548769, (__int128 *)buf, 793, (__int128 *)&v220, (__int128 *)&v225);
          }
          memset(buf, 0, 24);
          v59 = DSPGraph::Preprocessor::find(a2, (unsigned __int8 **)&v226);
          if (!v59)
            goto LABEL_156;
          memset(&v225, 0, sizeof(v225));
          (*(void (**)(std::string *__return_ptr, uint64_t, DSPGraph::Preprocessor *, std::string *))(*(_QWORD *)v59 + 16))(&v220, v59, a2, &v225);
          if (v227 >= 0)
            v61 = &v226;
          else
            v61 = (__int128 *)v226;
          v62 = DSPGraph::strToLong((uint64_t *)&v220, (uint64_t)v61, 797, "preprocess");
          if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v220.__r_.__value_.__l.__data_);
          v224.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v225;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v224);
          if (v62 == 1)
          {
            if (!DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v228, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v220, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v225, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocessor error: ifdef expected thenClause");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v220, 799, (__int128 *)&v225, (__int128 *)&v224);
            }
            DSPGraph::Preprocessor::skipMacroBody((std::string::value_type **)&v228, v63);
            DSPGraph::Preprocessor::preprocess(&v220, a2, buf, 1);
            if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v52 = &v220;
            else
              v52 = (std::string *)v220.__r_.__value_.__r.__words[0];
            if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v220.__r_.__value_.__r.__words[2]);
            else
              size = v220.__r_.__value_.__l.__size_;
          }
          else
          {
LABEL_156:
            if ((DSPGraph::Preprocessor::skipMacroBody((std::string::value_type **)&v228, v60) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&v220, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v225, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocessor error: ifdef expected thenClause");
              DSPGraph::ThrowException(1886548769, (__int128 *)&v220, 805, (__int128 *)&v225, (__int128 *)&v224);
            }
            if (!DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v228, (uint64_t)buf))
              goto LABEL_515;
            DSPGraph::Preprocessor::preprocess(&v220, a2, buf, 1);
            if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v52 = &v220;
            else
              v52 = (std::string *)v220.__r_.__value_.__r.__words[0];
            if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v220.__r_.__value_.__r.__words[2]);
            else
              size = v220.__r_.__value_.__l.__size_;
          }
          goto LABEL_407;
        }
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v226, "include"))
        {
          v68 = DSPGraph::Preprocessor::find(a2, (unsigned __int8 **)&v226);
          if (!v68)
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v220, "preprocess");
            v213 = &v226;
            if (v227 < 0)
              v213 = (__int128 *)v226;
            DSPGraph::strprintf((DSPGraph *)"preprocessor error: macro %s not found.", &v225, v213);
            DSPGraph::ThrowException(1852204065, (__int128 *)buf, 865, (__int128 *)&v220, (__int128 *)&v225);
          }
          v69 = v68;
          memset(buf, 0, 24);
          memset(&v220, 0, sizeof(v220));
          while (DSPGraph::Preprocessor::parseActualArg((uint64_t)a2, (std::string::value_type **)&v228, (uint64_t)buf))
          {
            v70 = (_OWORD *)v220.__r_.__value_.__l.__size_;
            if (v220.__r_.__value_.__l.__size_ >= v220.__r_.__value_.__r.__words[2])
            {
              v72 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)&v220, (__int128 *)buf);
            }
            else
            {
              if (SHIBYTE(buf[0].__end_) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v220.__r_.__value_.__l.__size_, (const std::string::value_type *)buf[0].__first_, (std::string::size_type)buf[0].__begin_);
              }
              else
              {
                v71 = *(_OWORD *)&buf[0].__first_;
                *(_QWORD *)(v220.__r_.__value_.__l.__size_ + 16) = buf[0].__end_;
                *v70 = v71;
              }
              v72 = (std::vector<std::string>::pointer)((char *)v70 + 24);
            }
            v220.__r_.__value_.__l.__size_ = (std::string::size_type)v72;
          }
          (*(void (**)(std::string *__return_ptr, uint64_t, DSPGraph::Preprocessor *, std::string *))(*(_QWORD *)v69 + 16))(&v225, v69, a2, &v220);
          if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v73 = &v225;
          else
            v73 = (std::string *)v225.__r_.__value_.__r.__words[0];
          if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v74 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
          else
            v74 = v225.__r_.__value_.__l.__size_;
          std::string::append(a1, (const std::string::value_type *)v73, v74);
          if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v225.__r_.__value_.__l.__data_);
          v225.__r_.__value_.__r.__words[0] = (std::string::size_type)&v220;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v225);
          goto LABEL_515;
        }
        memset(&v225, 0, sizeof(v225));
        if ((DSPGraph::Preprocessor::parseString((std::string::value_type **)&v228, (uint64_t)&v225) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v220, "preprocess");
          std::string::basic_string[abi:ne180100]<0>(&v224, "preprocessor error: expected filename");
          DSPGraph::ThrowException(1886548769, (__int128 *)buf, 814, (__int128 *)&v220, (__int128 *)&v224);
        }
        if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
        {
          v64 = v225.__r_.__value_.__l.__size_;
          if (v225.__r_.__value_.__l.__size_ < 3)
          {
LABEL_600:
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v220, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v224, "preprocessor error: empty filename");
            DSPGraph::ThrowException(1886548769, (__int128 *)buf, 818, (__int128 *)&v220, (__int128 *)&v224);
          }
          v65 = (std::string *)v225.__r_.__value_.__r.__words[0];
          if (*v225.__r_.__value_.__l.__data_ == 34)
            goto LABEL_327;
        }
        else
        {
          v64 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
          if (HIBYTE(v225.__r_.__value_.__r.__words[2]) <= 2u)
            goto LABEL_600;
          if (v225.__r_.__value_.__s.__data_[0] == 34)
          {
            v65 = &v225;
LABEL_327:
            if (v65->__r_.__value_.__s.__data_[v64 - 1] == 34)
            {
              std::string::erase(&v225, 0, 1uLL);
              if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
              {
                v143 = (std::string *)v225.__r_.__value_.__r.__words[0];
                v142 = --v225.__r_.__value_.__l.__size_;
              }
              else
              {
                v142 = HIBYTE(v225.__r_.__value_.__r.__words[2]) - 1;
                *((_BYTE *)&v225.__r_.__value_.__s + 23) = v142 & 0x7F;
                v143 = &v225;
              }
              v143->__r_.__value_.__s.__data_[v142] = 0;
            }
          }
        }
        __ec.__val_ = 0;
        __ec.__cat_ = std::system_category();
        v220.__r_.__value_.__s.__data_[0] = 0;
        v221 = 0;
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v224.__pn_, &v225);
        if (std::__fs::filesystem::path::__root_directory(&v224).__size_)
        {
          if (std::__fs::filesystem::is_regular_file[abi:ne180100](&v224, &__ec) && !__ec.__val_)
          {
            std::ifstream::basic_ifstream(buf);
            if (!v236)
            {
              std::string::basic_string[abi:ne180100]<0>(&v223, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v219, "preprocess");
              v214 = &v225;
              if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v214 = (std::string *)v225.__r_.__value_.__r.__words[0];
              DSPGraph::strprintf((DSPGraph *)"preprocessor error: cannot open include file '%s'", &v218, v214);
              DSPGraph::ThrowException(1886548769, (__int128 *)&v223, 836, &v219, &v218);
            }
            v223.__r_.__value_.__r.__words[0] = *(std::string::size_type *)((char *)&buf[1].__first_
                                                                          + buf[0].__first_[-1].__r_.__value_.__r.__words[0]);
            *(_QWORD *)&v219 = 0;
            std::optional<std::string>::emplace[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,void>(&v220, &v223, (_QWORD **)&v219);
            std::ifstream::~ifstream(buf);
          }
        }
        else
        {
          v169 = (std::string *)*((_QWORD *)a2 + 6);
          v168 = (std::string *)*((_QWORD *)a2 + 7);
          while (v169 != v168)
          {
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)buf, v169);
            if (SHIBYTE(buf[0].__end_) < 0)
            {
              std::string::__init_copy_ctor_external(&v223, (const std::string::value_type *)buf[0].__first_, (std::string::size_type)buf[0].__begin_);
            }
            else
            {
              *(_OWORD *)&v223.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[0].__first_;
              v223.__r_.__value_.__r.__words[2] = (std::string::size_type)buf[0].__end_;
            }
            if (std::__fs::filesystem::path::__root_directory(&v224).__size_)
            {
              std::string::operator=(&v223, &v224.__pn_);
            }
            else
            {
              if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&v223).__size_)
                std::string::push_back(&v223, 47);
              if ((v224.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v170 = &v224;
              else
                v170 = (std::__fs::filesystem::path *)v224.__pn_.__r_.__value_.__r.__words[0];
              if ((v224.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v171 = HIBYTE(v224.__pn_.__r_.__value_.__r.__words[2]);
              else
                v171 = v224.__pn_.__r_.__value_.__l.__size_;
              std::string::append(&v223, (const std::string::value_type *)v170, v171);
            }
            if (SHIBYTE(buf[0].__end_) < 0)
              operator delete(buf[0].__first_);
            std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v223, &__ec);
            if (LOBYTE(buf[0].__first_) == 1 && !__ec.__val_)
            {
              std::ifstream::basic_ifstream(buf);
              if (!v236)
              {
                std::string::basic_string[abi:ne180100]<0>(&v219, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v218, "preprocess");
                v211 = &v225;
                if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v211 = (std::string *)v225.__r_.__value_.__r.__words[0];
                DSPGraph::strprintf((DSPGraph *)"preprocessor error: cannot open include file '%s'", &v217, v211);
                DSPGraph::ThrowException(1886548769, &v219, 848, &v218, &v217);
              }
              *(_QWORD *)&v219 = *(std::__split_buffer<std::string>::pointer *)((char *)&buf[1].__first_
                                                                              + buf[0].__first_[-1].__r_.__value_.__r.__words[0]);
              *(_QWORD *)&v218 = 0;
              std::optional<std::string>::emplace[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,void>(&v220, (_QWORD **)&v219, (_QWORD **)&v218);
              std::ifstream::~ifstream(buf);
            }
            if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v223.__r_.__value_.__l.__data_);
            ++v169;
          }
        }
        if (SHIBYTE(v224.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v224.__pn_.__r_.__value_.__l.__data_);
        if (!v221)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
          v212 = &v225;
          if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v212 = (std::string *)v225.__r_.__value_.__r.__words[0];
          DSPGraph::strprintf((DSPGraph *)"preprocessor error: cannot find include file '%s'", &v223, v212);
          DSPGraph::ThrowException(1886548769, (__int128 *)buf, 856, (__int128 *)&v224, (__int128 *)&v223);
        }
        if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v164 = &v220;
        else
          v164 = (std::string *)v220.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v224, (char *)v164);
        DSPGraph::Preprocessor::preprocess(buf, a2, &v224, 1);
        if (SHIBYTE(buf[0].__end_) >= 0)
          v165 = (std::__split_buffer<std::string>::pointer)buf;
        else
          v165 = buf[0].__first_;
        if (SHIBYTE(buf[0].__end_) >= 0)
          begin = HIBYTE(buf[0].__end_);
        else
          begin = (std::string::size_type)buf[0].__begin_;
        std::string::append(a1, (const std::string::value_type *)v165, begin);
        if (SHIBYTE(buf[0].__end_) < 0)
          operator delete(buf[0].__first_);
        if (SHIBYTE(v224.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v224.__pn_.__r_.__value_.__l.__data_);
        if (v221 && SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v220.__r_.__value_.__l.__data_);
        if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
        {
          v167 = (std::__split_buffer<std::string>::pointer)v225.__r_.__value_.__r.__words[0];
          goto LABEL_517;
        }
        goto LABEL_554;
      case 3:
        if (v227 >= 0)
          v24 = &v226;
        else
          v24 = (__int128 *)v226;
        v25 = *(_WORD *)v24 == 25956 && *((_BYTE *)v24 + 2) == 102;
        if (v25 || (*(_WORD *)v24 == 25964 ? (v26 = *((_BYTE *)v24 + 2) == 116) : (v26 = 0), v26))
        {
          v75 = *(unsigned __int16 *)v24;
          v76 = *((unsigned __int8 *)v24 + 2);
          v78 = v75 != 25964 || v76 != 116;
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v226))
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v220, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v225, "preprocessor error: expected name");
            DSPGraph::ThrowException(1886548769, (__int128 *)buf, 503, (__int128 *)&v220, (__int128 *)&v225);
          }
          if (DSPGraph::Preprocessor::find(a2, (unsigned __int8 **)&v226))
          {
            if (DSPGraph::getLog(void)::onceToken != -1)
              dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_7917);
            v79 = DSPGraph::getLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_INFO))
            {
              if (v227 >= 0)
                v80 = (std::string *)&v226;
              else
                v80 = (std::string *)v226;
              LODWORD(buf[0].__first_) = 136315138;
              *(std::__split_buffer<std::string>::pointer *)((char *)&buf[0].__first_ + 4) = v80;
              _os_log_impl(&dword_18EE07000, v79, OS_LOG_TYPE_INFO, "Preprocessor: redefining macro '%s'", (uint8_t *)buf, 0xCu);
            }
          }
          memset(&v220, 0, sizeof(v220));
          memset(buf, 0, 24);
          while (DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
          {
            v81 = (_OWORD *)v220.__r_.__value_.__l.__size_;
            if (v220.__r_.__value_.__l.__size_ >= v220.__r_.__value_.__r.__words[2])
            {
              v83 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)&v220, (__int128 *)buf);
            }
            else
            {
              if (SHIBYTE(buf[0].__end_) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v220.__r_.__value_.__l.__size_, (const std::string::value_type *)buf[0].__first_, (std::string::size_type)buf[0].__begin_);
              }
              else
              {
                v82 = *(_OWORD *)&buf[0].__first_;
                *(_QWORD *)(v220.__r_.__value_.__l.__size_ + 16) = buf[0].__end_;
                *v81 = v82;
              }
              v83 = (std::vector<std::string>::pointer)((char *)v81 + 24);
            }
            v220.__r_.__value_.__l.__size_ = (std::string::size_type)v83;
          }
          if (SHIBYTE(buf[0].__end_) < 0)
            operator delete(buf[0].__first_);
          memset(&v225, 0, sizeof(v225));
          if (DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v228, (uint64_t)&v225))
          {
            v84 = DSPGraph::Preprocessor::def((uint64_t)a2, (unsigned __int8 **)&v226, (__int128 *)&v225);
            v85 = v84;
            if (!v78)
            {
              v86 = v233;
              if ((unint64_t)v233 >= v234)
              {
                v172 = ((char *)v233 - (_BYTE *)v232) >> 3;
                if ((unint64_t)(v172 + 1) >> 61)
                  goto LABEL_615;
                v173 = (uint64_t)(v234 - (_QWORD)v232) >> 2;
                if (v173 <= v172 + 1)
                  v173 = v172 + 1;
                if (v234 - (unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8)
                  v174 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v174 = v173;
                if (v174)
                  v174 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v174);
                else
                  v175 = 0;
                v187 = (uint64_t *)(v174 + 8 * v172);
                *v187 = v85;
                v87 = v187 + 1;
                v189 = (char *)v232;
                v188 = (char *)v233;
                if (v233 != v232)
                {
                  do
                  {
                    v190 = *((_QWORD *)v188 - 1);
                    v188 -= 8;
                    *--v187 = v190;
                  }
                  while (v188 != v189);
                  v188 = (char *)v232;
                }
                v232 = v187;
                v233 = v87;
                v234 = v174 + 8 * v175;
                if (v188)
                  operator delete(v188);
              }
              else
              {
                *v233 = v84;
                v87 = v86 + 1;
              }
              v233 = v87;
            }
            v191 = v220.__r_.__value_.__l.__size_;
            v192 = v220.__r_.__value_.__r.__words[0];
            if (v220.__r_.__value_.__r.__words[0] != v220.__r_.__value_.__l.__size_)
            {
              v193 = (_QWORD *)(v85 + 32);
              v194 = (unint64_t *)(v85 + 48);
              v195 = *(_QWORD *)(v85 + 40);
              do
              {
                if (v195 >= *v194)
                {
                  v196 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v195 - *v193) >> 3);
                  v197 = v196 + 1;
                  if (v196 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * ((uint64_t)(*v194 - *v193) >> 3) > v197)
                    v197 = 0x5555555555555556 * ((uint64_t)(*v194 - *v193) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v194 - *v193) >> 3) >= 0x555555555555555)
                    v198 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v198 = v197;
                  buf[0].__end_cap_.__value_ = (std::allocator<std::string> *)(v85 + 48);
                  if (v198)
                  {
                    v200 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v198);
                  }
                  else
                  {
                    v200 = 0;
                    v199 = 0;
                  }
                  end = v200 + v196;
                  buf[0].__first_ = v200;
                  buf[0].__begin_ = end;
                  buf[0].__end_ = end;
                  buf[0].__end_cap_.__value_ = &v200[v199];
                  if (*(char *)(v192 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v192, *(_QWORD *)(v192 + 8));
                    end = buf[0].__end_;
                  }
                  else
                  {
                    v202 = *(_OWORD *)v192;
                    end->__r_.__value_.__r.__words[2] = *(_QWORD *)(v192 + 16);
                    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v202;
                  }
                  buf[0].__end_ = end + 1;
                  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v85 + 32), buf);
                  v195 = *(_QWORD *)(v85 + 40);
                  std::__split_buffer<std::string>::~__split_buffer(buf);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(v85 + 32, (__int128 *)v192);
                  v195 += 24;
                }
                *(_QWORD *)(v85 + 40) = v195;
                v192 += 24;
              }
              while (v192 != v191);
            }
          }
          else
          {
            if (v220.__r_.__value_.__l.__size_ - v220.__r_.__value_.__r.__words[0] != 24)
            {
              std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v224, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v223, "preprocessor error: expected macro body");
              DSPGraph::ThrowException(1886548769, (__int128 *)buf, 527, (__int128 *)&v224, (__int128 *)&v223);
            }
            v124 = DSPGraph::Preprocessor::def((uint64_t)a2, (unsigned __int8 **)&v226, (__int128 *)v220.__r_.__value_.__l.__data_);
            if (!v78)
            {
              v125 = v124;
              v126 = v233;
              if ((unint64_t)v233 >= v234)
              {
                v176 = ((char *)v233 - (_BYTE *)v232) >> 3;
                if ((unint64_t)(v176 + 1) >> 61)
LABEL_615:
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v177 = (uint64_t)(v234 - (_QWORD)v232) >> 2;
                if (v177 <= v176 + 1)
                  v177 = v176 + 1;
                if (v234 - (unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8)
                  v178 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v178 = v177;
                if (v178)
                  v178 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v178);
                else
                  v179 = 0;
                v203 = (uint64_t *)(v178 + 8 * v176);
                *v203 = v125;
                v127 = v203 + 1;
                v205 = (char *)v232;
                v204 = (char *)v233;
                if (v233 != v232)
                {
                  do
                  {
                    v206 = *((_QWORD *)v204 - 1);
                    v204 -= 8;
                    *--v203 = v206;
                  }
                  while (v204 != v205);
                  v204 = (char *)v232;
                }
                v232 = v203;
                v233 = v127;
                v234 = v178 + 8 * v179;
                if (v204)
                  operator delete(v204);
              }
              else
              {
                *v233 = v124;
                v127 = v126 + 1;
              }
              v233 = v127;
            }
          }
          if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v225.__r_.__value_.__l.__data_);
          buf[0].__first_ = &v220;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          v4 = a4;
          goto LABEL_554;
        }
        if (*(_WORD *)v24 == 28257 && *((_BYTE *)v24 + 2) == 100)
        {
          memset(buf, 0, 24);
          v149 = 1;
          while (1)
          {
            v150 = v149;
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
              break;
            v149 = 0;
            if (v150)
            {
              if (v227 >= 0)
                v151 = &v226;
              else
                v151 = (__int128 *)v226;
              v149 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)v151, 612, "preprocess") != 0;
            }
          }
          if (v150)
            v113 = "1";
          else
            v113 = "0";
          goto LABEL_357;
        }
        v28 = *(unsigned __int16 *)v24;
        v29 = *((unsigned __int8 *)v24 + 2);
        if (v28 != 28526 || v29 != 116)
          goto LABEL_134;
        memset(buf, 0, 24);
        if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
        {
          std::string::basic_string[abi:ne180100]<0>(&v220, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v225, "preprocess");
          std::string::basic_string[abi:ne180100]<0>(&v224, "preprocessor error: not: expected condition");
          DSPGraph::ThrowException(1886548769, (__int128 *)&v220, 625, (__int128 *)&v225, (__int128 *)&v224);
        }
        if (v227 >= 0)
          v31 = &v226;
        else
          v31 = (__int128 *)v226;
        if (DSPGraph::strToLong((uint64_t *)buf, (uint64_t)v31, 627, "preprocess"))
          v32 = "0";
        else
          v32 = "1";
        std::string::append(a1, v32, 1uLL);
        goto LABEL_515;
      case 5:
        v42 = (__int128 *)v226;
        if (v227 >= 0)
          v42 = &v226;
        v43 = *(_DWORD *)v42;
        v44 = *((unsigned __int8 *)v42 + 4);
        if (v43 != 1701080693 || v44 != 102)
          goto LABEL_106;
        if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v226))
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v220, "preprocess");
          std::string::basic_string[abi:ne180100]<0>(&v225, "preprocessor error: expected name");
          DSPGraph::ThrowException(1886548769, (__int128 *)buf, 541, (__int128 *)&v220, (__int128 *)&v225);
        }
        v98 = *((_QWORD *)a2 + 1);
        if (*((_QWORD *)a2 + 2) != v98)
        {
          v99 = *((_QWORD *)a2 + 4);
          v100 = (uint64_t *)(v98 + 8 * (v99 >> 9));
          v101 = *v100;
          v102 = *v100 + 8 * (v99 & 0x1FF);
          v103 = *(_QWORD *)(v98 + (((*((_QWORD *)a2 + 5) + v99) >> 6) & 0x3FFFFFFFFFFFFF8))
               + 8 * ((*((_QWORD *)a2 + 5) + v99) & 0x1FF);
          while (1)
          {
            if (v102 == v103)
            {
              v147 = 0;
LABEL_341:
              v4 = a4;
              goto LABEL_360;
            }
            v104 = *(const void ***)v102;
            v105 = *(unsigned __int8 *)(*(_QWORD *)v102 + 31);
            if ((v105 & 0x80u) == 0)
              v106 = *(unsigned __int8 *)(*(_QWORD *)v102 + 31);
            else
              v106 = *(_QWORD *)(*(_QWORD *)v102 + 16);
            v107 = HIBYTE(v227);
            if (v227 < 0)
              v107 = *((_QWORD *)&v226 + 1);
            if (v106 == v107)
            {
              v108 = v104 + 1;
              if (v227 >= 0)
                v109 = &v226;
              else
                v109 = (__int128 *)v226;
              if ((v105 & 0x80) != 0)
              {
                if (memcmp(*v108, v109, *(_QWORD *)(*(_QWORD *)v102 + 16)))
                  goto LABEL_263;
              }
              else if (*(_BYTE *)(*(_QWORD *)v102 + 31))
              {
                while (*(unsigned __int8 *)v108 == *(unsigned __int8 *)v109)
                {
                  v108 = (const void **)((char *)v108 + 1);
                  v109 = (__int128 *)((char *)v109 + 1);
                  if (!--v105)
                    goto LABEL_261;
                }
                goto LABEL_263;
              }
LABEL_261:
              if (!(*((unsigned int (**)(const void **, __int128 *))*v104 + 3))(v104, v109))
              {
                v147 = *(const DSPGraph::Macro **)v102;
                goto LABEL_341;
              }
              v101 = *v100;
            }
LABEL_263:
            v102 += 8;
            if (v102 - v101 == 4096)
            {
              v110 = v100[1];
              ++v100;
              v101 = v110;
              v102 = v110;
            }
          }
        }
        v147 = 0;
LABEL_360:
        DSPGraph::Preprocessor::undef(a2, v147);
LABEL_554:
        if (SHIBYTE(v227) < 0)
          operator delete((void *)v226);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v22 = (std::__split_buffer<std::string>::pointer)__p.__r_.__value_.__r.__words[0];
          goto LABEL_558;
        }
LABEL_559:
        v7 = v230;
        break;
      case 7:
        if (v227 >= 0)
          v54 = &v226;
        else
          v54 = (__int128 *)v226;
        if (*(_DWORD *)v54 == 1853189987 && *(_DWORD *)((char *)v54 + 3) == 1919251566)
          goto LABEL_164;
        v56 = *(_DWORD *)v54;
        v57 = *(_DWORD *)((char *)v54 + 3);
        if (v56 != 1768318308 || v57 != 1684369001)
          goto LABEL_134;
        if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v226))
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v220, "preprocess");
          std::string::basic_string[abi:ne180100]<0>(&v225, "preprocessor error: expected name");
          DSPGraph::ThrowException(1886548769, (__int128 *)buf, 564, (__int128 *)&v220, (__int128 *)&v225);
        }
        if (DSPGraph::Preprocessor::find(a2, (unsigned __int8 **)&v226))
          v146 = "1";
        else
          v146 = "0";
        std::string::append(a1, v146, 1uLL);
        goto LABEL_554;
      case 10:
        if (v227 >= 0)
          v33 = &v226;
        else
          v33 = (__int128 *)v226;
        v34 = *(_QWORD *)v33;
        v35 = *((unsigned __int16 *)v33 + 4);
        if (v34 != 0x746E756F4374656CLL || v35 != 29285)
          goto LABEL_134;
LABEL_164:
        if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v226))
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v220, "preprocess");
          std::string::basic_string[abi:ne180100]<0>(&v225, "preprocessor error: expected name");
          DSPGraph::ThrowException(1886548769, (__int128 *)buf, 546, (__int128 *)&v220, (__int128 *)&v225);
        }
        memset(buf, 0, 24);
        memset(&v220, 0, sizeof(v220));
        if (DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)buf))
        {
          v66 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"counter start value", 551, "preprocess");
          if (DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v228, (uint64_t)&v220))
          {
            v67 = DSPGraph::strToLong((uint64_t *)&v220, (uint64_t)"counter step", 553, "preprocess");
            goto LABEL_267;
          }
        }
        else
        {
          v66 = 0;
        }
        v67 = 1;
LABEL_267:
        v111 = (_QWORD *)operator new();
        *v111 = off_1E2911C90;
        v112 = (std::string *)(v111 + 1);
        if (SHIBYTE(v227) < 0)
        {
          std::string::__init_copy_ctor_external(v112, (const std::string::value_type *)v226, *((std::string::size_type *)&v226 + 1));
        }
        else
        {
          *(_OWORD *)&v112->__r_.__value_.__l.__data_ = v226;
          v111[3] = v227;
        }
        v111[4] = 0;
        v111[5] = 0;
        *v111 = &off_1E290C670;
        v111[6] = 0;
        v111[7] = v66;
        v111[8] = v67;
        v128 = *((_QWORD *)a2 + 4);
        if (!v128)
        {
          std::deque<std::unique_ptr<DSPGraph::Macro>>::__add_front_capacity((char **)a2);
          v128 = *((_QWORD *)a2 + 4);
        }
        v129 = *((_QWORD *)a2 + 1);
        v130 = (_QWORD *)(v129 + 8 * (v128 >> 9));
        if (*((_QWORD *)a2 + 2) == v129)
          v131 = 0;
        else
          v131 = *v130 + 8 * (v128 & 0x1FF);
        if (v131 == *v130)
          v131 = *(v130 - 1) + 4096;
        *(_QWORD *)(v131 - 8) = v111;
        v132 = v128 - 1;
        v133 = *((_QWORD *)a2 + 5) + 1;
        *((_QWORD *)a2 + 4) = v132;
        *((_QWORD *)a2 + 5) = v133;
        v134 = HIBYTE(v227);
        if (v227 < 0)
          v134 = *((_QWORD *)&v226 + 1);
        if (v134 == 12)
        {
          v135 = v227 >= 0 ? &v226 : (__int128 *)v226;
          v136 = *(_QWORD *)v135;
          v137 = *((_DWORD *)v135 + 2);
          if (v136 == 0x756F436C61636F6CLL && v137 == 1919251566)
          {
            v139 = *(_QWORD *)(*(_QWORD *)(v129 + ((v132 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v132 & 0x1FF));
            v140 = v233;
            if ((unint64_t)v233 >= v234)
            {
              v160 = ((char *)v233 - (_BYTE *)v232) >> 3;
              if ((unint64_t)(v160 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v161 = (uint64_t)(v234 - (_QWORD)v232) >> 2;
              if (v161 <= v160 + 1)
                v161 = v160 + 1;
              if (v234 - (unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8)
                v162 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v162 = v161;
              if (v162)
                v162 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v162);
              else
                v163 = 0;
              v183 = (uint64_t *)(v162 + 8 * v160);
              *v183 = v139;
              v141 = v183 + 1;
              v185 = (char *)v232;
              v184 = (char *)v233;
              if (v233 != v232)
              {
                do
                {
                  v186 = *((_QWORD *)v184 - 1);
                  v184 -= 8;
                  *--v183 = v186;
                }
                while (v184 != v185);
                v184 = (char *)v232;
              }
              v232 = v183;
              v233 = v141;
              v234 = v162 + 8 * v163;
              if (v184)
                operator delete(v184);
            }
            else
            {
              *v233 = v139;
              v141 = v140 + 1;
            }
            v233 = v141;
          }
        }
        goto LABEL_513;
      default:
        goto LABEL_134;
    }
  }
  if (v8 == 59)
  {
    v11 = *v9;
    if (*v9)
    {
      v12 = v7 + 2;
      do
      {
        v9 = v12;
        if (v11 == 10)
          break;
        ++v12;
        v11 = *v9;
      }
      while (*v9);
    }
    v230 = v9;
    LOBYTE(v8) = 10;
    goto LABEL_234;
  }
  if (v8)
    goto LABEL_32;
LABEL_580:
  DSPGraph::UndefineLocals::~UndefineLocals((DSPGraph::UndefineLocals *)v231);
  if (v232)
  {
    v233 = (uint64_t *)v232;
    operator delete(v232);
  }
}

void sub_18EE6B710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  char a68;
  void *a70;
  void *a71;
  void *a72;
  char a73;
  uint64_t v73;

  if (a39 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  if (a52 < 0)
    operator delete(a47);
  if (a30 < 0)
    operator delete(a25);
  if (a73 < 0)
    operator delete(a72);
  if (a58 < 0)
    operator delete(a53);
  if (a65 < 0)
    operator delete(a60);
  if (*(char *)(v73 + 23) < 0)
    operator delete(*(void **)v73);
  DSPGraph::UndefineLocals::~UndefineLocals((DSPGraph::UndefineLocals *)&a68);
  if (a70)
  {
    a71 = a70;
    operator delete(a70);
  }
  _Unwind_Resume(a1);
}

void DSPGraph::UndefineLocals::~UndefineLocals(DSPGraph::UndefineLocals *this)
{
  const DSPGraph::Macro ***v2;
  const DSPGraph::Macro **v3;
  const DSPGraph::Macro **v4;

  v2 = (const DSPGraph::Macro ***)*((_QWORD *)this + 1);
  v3 = *v2;
  v4 = v2[1];
  while (v3 != v4)
    DSPGraph::Preprocessor::undef(*(DSPGraph::Preprocessor **)this, *v3++);
}

void std::vector<float *>::insert(_QWORD *a1, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  int64_t v34;
  char *v35;

  if (a3)
  {
    v4 = a4;
    v6 = __src;
    v8 = (char *)a1[1];
    v9 = a1[2];
    if (a3 <= (v9 - (uint64_t)v8) >> 3)
    {
      v16 = v8 - __src;
      if (a3 <= (v8 - __src) >> 3)
      {
        v19 = (char *)a1[1];
        v18 = a3;
      }
      else
      {
        v17 = 0;
        v18 = v16 >> 3;
        v19 = &v8[8 * (a3 - (v16 >> 3))];
        do
        {
          *(_QWORD *)&v8[v17] = *(_QWORD *)a4;
          v17 += 8;
        }
        while (8 * a3 - 8 * v18 != v17);
        a1[1] = v19;
        if (v8 == __src)
          return;
      }
      v20 = &__src[8 * a3];
      v21 = &v19[-8 * a3];
      v22 = v19;
      if (v21 < v8)
      {
        v22 = v19;
        do
        {
          v23 = *(_QWORD *)v21;
          v21 += 8;
          *(_QWORD *)v22 = v23;
          v22 += 8;
        }
        while (v21 < v8);
      }
      a1[1] = v22;
      if (v19 != v20)
        memmove(&v19[-8 * ((v19 - v20) >> 3)], __src, v19 - v20);
      if (v6 <= v4)
      {
        if (a1[1] <= (unint64_t)v4)
          v24 = 0;
        else
          v24 = a3;
        v4 += 8 * v24;
      }
      do
      {
        *(_QWORD *)v6 = *(_QWORD *)v4;
        v6 += 8;
        --v18;
      }
      while (v18);
    }
    else
    {
      v10 = (char *)*a1;
      v11 = a3 + ((uint64_t)&v8[-*a1] >> 3);
      if (v11 >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v12 = (__src - v10) >> 3;
      v13 = v9 - (_QWORD)v10;
      if (v13 >> 2 > v11)
        v11 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v11;
      if (v14)
        v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v14);
      else
        v15 = 0;
      v25 = (_QWORD *)(v14 + 8 * v12);
      v26 = (char *)&v25[a3];
      v27 = 8 * a3;
      v28 = v25;
      do
      {
        *v28++ = *(_QWORD *)v4;
        v27 -= 8;
      }
      while (v27);
      v29 = (char *)*a1;
      if ((char *)*a1 != v6)
      {
        v30 = v6;
        do
        {
          v31 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *--v25 = v31;
        }
        while (v30 != v29);
      }
      v32 = v14 + 8 * v15;
      v33 = (char *)a1[1];
      v34 = v33 - v6;
      if (v33 != v6)
        memmove(v26, v6, v33 - v6);
      v35 = (char *)*a1;
      *a1 = v25;
      a1[1] = &v26[v34];
      a1[2] = v32;
      if (v35)
        operator delete(v35);
    }
  }
}

void std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

uint64_t *std::unordered_map<`anonymous namespace'::FormatID,std::vector<`anonymous namespace'::BlockFormatID>>::operator[](uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL4 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  void *v36;
  _QWORD v37[2];
  char v38;

  v5 = *a2;
  v6 = a2[1];
  v7 = v6 + v5;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = v6 + v5;
      if (v7 >= v8)
        v2 = v7 % v8;
    }
    else
    {
      v2 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v2);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t **)*i)
      {
        v12 = (unint64_t)i[1];
        if (v12 == v7)
        {
          if (*((unsigned __int16 *)i + 8) == (_DWORD)v5 && *((unsigned __int16 *)i + 9) == (_DWORD)v6)
            return (uint64_t *)(i + 3);
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v2)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x30uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = *(_DWORD *)a2;
  v15[4] = 0;
  v15[5] = 0;
  v15[3] = 0;
  v38 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3)
      v18 = 0;
    v19 = (2 * v8) | !v18;
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v8)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(void **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*v14;
          if (*v14)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v14;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_59;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_59:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_63;
        }
        v36 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v8 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_63:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v33)
  {
    *(_QWORD *)v37[0] = *v33;
    *v33 = v37[0];
  }
  else
  {
    *(_QWORD *)v37[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v37[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v14;
    if (*(_QWORD *)v37[0])
    {
      v34 = *(_QWORD *)(*(_QWORD *)v37[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v34 >= v8)
          v34 %= v8;
      }
      else
      {
        v34 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v37[0];
    }
  }
  i = (uint64_t **)v37[0];
  v37[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  return (uint64_t *)(i + 3);
}

void sub_18EE6C62C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*,false>(__int128 *a1, unint64_t a2, uint64_t a3, char a4)
{
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 *v25;
  __int128 *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 *v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  BOOL v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _BOOL4 v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  BOOL v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  BOOL v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  __int128 v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  __int128 *v112;
  __int128 v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  _BOOL4 v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  __int128 v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  BOOL v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  __int128 *v148;
  __int128 v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  _BOOL4 v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  std::__shared_weak_count *v160;
  unint64_t *p_shared_owners;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _BOOL4 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  _BOOL4 v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  BOOL v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  int64_t v197;
  int64_t v198;
  int64_t v199;
  uint64_t v200;
  __int128 *v201;
  uint64_t v202;
  __int128 v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _BOOL4 v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  __int128 v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  BOOL v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  int64_t v234;
  unint64_t *v235;
  unint64_t v236;
  _BOOL4 v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  _QWORD *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  _BOOL4 v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  __int128 *v257;
  uint64_t v258;
  int64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  _BOOL4 v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  __int128 *v277;
  __int128 v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  _BOOL4 v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  __int128 v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  BOOL v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  _BOOL4 v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  __int128 v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  BOOL v329;
  unint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  int64_t v348;
  uint64_t v349;
  __int128 *v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;

LABEL_1:
  v342 = a2 - 32;
  v343 = a2 - 16;
  v341 = a2 - 48;
  v7 = a1;
  v345 = a2;
  while (2)
  {
    v8 = (uint64_t)v7;
    v9 = a2 - (_QWORD)v7;
    v10 = (uint64_t)(a2 - (_QWORD)v7) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v159 = *(_QWORD **)(a2 - 16);
        v160 = *(std::__shared_weak_count **)(a2 - 8);
        if (v160)
        {
          p_shared_owners = (unint64_t *)&v160->__shared_owners_;
          do
            v162 = __ldxr(p_shared_owners);
          while (__stxr(v162 + 1, p_shared_owners));
        }
        v163 = *(std::__shared_weak_count **)(v8 + 8);
        *(_QWORD *)&v353 = *(_QWORD *)v8;
        *((_QWORD *)&v353 + 1) = v163;
        if (v163)
        {
          v164 = (unint64_t *)&v163->__shared_owners_;
          do
            v165 = __ldxr(v164);
          while (__stxr(v165 + 1, v164));
          v166 = lessThan(v159, (_QWORD **)&v353);
          do
            v167 = __ldaxr(v164);
          while (__stlxr(v167 - 1, v164));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        else
        {
          v166 = lessThan(v159, (_QWORD **)&v353);
        }
        if (v160)
        {
          v336 = (unint64_t *)&v160->__shared_owners_;
          do
            v337 = __ldaxr(v336);
          while (__stlxr(v337 - 1, v336));
          if (!v337)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        if (v166)
        {
          v338 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v338;
          v339 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v339;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v8, v8 + 16, v343);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v8, v8 + 16, v8 + 32, v343);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v8, v8 + 16, v8 + 32, v8 + 48, v343);
        return;
      default:
        if (v9 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (v8 == a2)
              return;
            v168 = v8 + 16;
            if (v8 + 16 == a2)
              return;
            v169 = v8;
            while (1)
            {
              v170 = v168;
              v171 = *(_QWORD **)(v169 + 16);
              v172 = *(std::__shared_weak_count **)(v169 + 24);
              if (v172)
              {
                v173 = (unint64_t *)&v172->__shared_owners_;
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
              }
              v175 = *(std::__shared_weak_count **)(v169 + 8);
              *(_QWORD *)&v353 = *(_QWORD *)v169;
              *((_QWORD *)&v353 + 1) = v175;
              if (v175)
              {
                v176 = (unint64_t *)&v175->__shared_owners_;
                do
                  v177 = __ldxr(v176);
                while (__stxr(v177 + 1, v176));
                v178 = lessThan(v171, (_QWORD **)&v353);
                do
                  v179 = __ldaxr(v176);
                while (__stlxr(v179 - 1, v176));
                if (!v179)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              else
              {
                v178 = lessThan(v171, (_QWORD **)&v353);
              }
              if (!v172)
                goto LABEL_290;
              v180 = (unint64_t *)&v172->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                std::__shared_weak_count::__release_weak(v172);
                if (!v178)
                  goto LABEL_318;
              }
              else
              {
LABEL_290:
                if (!v178)
                  goto LABEL_318;
              }
              v352 = *(_OWORD *)v170;
              *(_QWORD *)v170 = 0;
              *(_QWORD *)(v170 + 8) = 0;
              v182 = v170;
              while (1)
              {
                v183 = v182;
                v182 = v169;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v183, (__int128 *)v169);
                if (v169 == v8)
                  break;
                v184 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v185 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v186 = __ldxr(v185);
                  while (__stxr(v186 + 1, v185));
                }
                *(_QWORD *)&v353 = *(_QWORD *)(v169 - 16);
                v187 = *(std::__shared_weak_count **)(v169 - 8);
                *((_QWORD *)&v353 + 1) = v187;
                if (v187)
                {
                  v188 = (unint64_t *)&v187->__shared_owners_;
                  do
                    v189 = __ldxr(v188);
                  while (__stxr(v189 + 1, v188));
                  v190 = lessThan((_QWORD *)v184, (_QWORD **)&v353);
                  do
                    v191 = __ldaxr(v188);
                  while (__stlxr(v191 - 1, v188));
                  if (!v191)
                  {
                    ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                    std::__shared_weak_count::__release_weak(v187);
                  }
                }
                else
                {
                  v190 = lessThan((_QWORD *)v184, (_QWORD **)&v353);
                }
                if (*((_QWORD *)&v184 + 1))
                {
                  v192 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
                  do
                    v193 = __ldaxr(v192);
                  while (__stlxr(v193 - 1, v192));
                  if (!v193)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v184 + 1) + 16))(*((_QWORD *)&v184 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v184 + 1));
                  }
                }
                v169 = v182 - 16;
                if (!v190)
                  goto LABEL_312;
              }
              v182 = v8;
LABEL_312:
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v182, &v352);
              v194 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              if (*((_QWORD *)&v352 + 1))
              {
                v195 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v196 = __ldaxr(v195);
                while (__stlxr(v196 - 1, v195));
                if (!v196)
                {
                  ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                  std::__shared_weak_count::__release_weak(v194);
                }
              }
LABEL_318:
              v168 = v170 + 16;
              v169 = v170;
              if (v170 + 16 == a2)
                return;
            }
          }
          if (v8 == a2)
            return;
          v308 = v8 + 16;
          while (1)
          {
            if (v308 == a2)
              return;
            v309 = v308;
            v310 = *(_QWORD **)(v8 + 16);
            v311 = *(std::__shared_weak_count **)(v8 + 24);
            if (v311)
            {
              v312 = (unint64_t *)&v311->__shared_owners_;
              do
                v313 = __ldxr(v312);
              while (__stxr(v313 + 1, v312));
            }
            v314 = *(std::__shared_weak_count **)(v8 + 8);
            *(_QWORD *)&v353 = *(_QWORD *)v8;
            *((_QWORD *)&v353 + 1) = v314;
            if (v314)
            {
              v315 = (unint64_t *)&v314->__shared_owners_;
              do
                v316 = __ldxr(v315);
              while (__stxr(v316 + 1, v315));
              v317 = lessThan(v310, (_QWORD **)&v353);
              do
                v318 = __ldaxr(v315);
              while (__stlxr(v318 - 1, v315));
              if (!v318)
              {
                ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                std::__shared_weak_count::__release_weak(v314);
              }
            }
            else
            {
              v317 = lessThan(v310, (_QWORD **)&v353);
            }
            if (!v311)
              goto LABEL_503;
            v319 = (unint64_t *)&v311->__shared_owners_;
            do
              v320 = __ldaxr(v319);
            while (__stlxr(v320 - 1, v319));
            if (!v320)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
              if (!v317)
                goto LABEL_528;
            }
            else
            {
LABEL_503:
              if (!v317)
                goto LABEL_528;
            }
            v352 = *(_OWORD *)v309;
            *(_QWORD *)v309 = 0;
            *(_QWORD *)(v309 + 8) = 0;
            v321 = v309;
            do
            {
              v322 = v321;
              v321 = v8;
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v322, (__int128 *)v8);
              v323 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v324 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v325 = __ldxr(v324);
                while (__stxr(v325 + 1, v324));
              }
              *(_QWORD *)&v353 = *(_QWORD *)(v8 - 16);
              v326 = *(std::__shared_weak_count **)(v8 - 8);
              *((_QWORD *)&v353 + 1) = v326;
              if (v326)
              {
                v327 = (unint64_t *)&v326->__shared_owners_;
                do
                  v328 = __ldxr(v327);
                while (__stxr(v328 + 1, v327));
                v329 = lessThan((_QWORD *)v323, (_QWORD **)&v353);
                do
                  v330 = __ldaxr(v327);
                while (__stlxr(v330 - 1, v327));
                if (!v330)
                {
                  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                  std::__shared_weak_count::__release_weak(v326);
                }
              }
              else
              {
                v329 = lessThan((_QWORD *)v323, (_QWORD **)&v353);
              }
              if (*((_QWORD *)&v323 + 1))
              {
                v331 = (unint64_t *)(*((_QWORD *)&v323 + 1) + 8);
                do
                  v332 = __ldaxr(v331);
                while (__stlxr(v332 - 1, v331));
                if (!v332)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v323 + 1) + 16))(*((_QWORD *)&v323 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v323 + 1));
                }
              }
              v8 -= 16;
            }
            while (v329);
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v321, &v352);
            v333 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
            if (*((_QWORD *)&v352 + 1))
            {
              v334 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
              do
                v335 = __ldaxr(v334);
              while (__stlxr(v335 - 1, v334));
              if (!v335)
              {
                ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                std::__shared_weak_count::__release_weak(v333);
              }
            }
LABEL_528:
            v308 = v309 + 16;
            v8 = v309;
          }
        }
        v350 = (__int128 *)v8;
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = (__int128 *)(v8 + 16 * ((unint64_t)v10 >> 1));
          if ((unint64_t)v9 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)v12, v8, v343);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v8, (uint64_t)v12, v343);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v8 + 16, (uint64_t)(v12 - 1), v342);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v8 + 32, v8 + 16 + 16 * v11, v341);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)(v12 - 1), (uint64_t)v12, v8 + 16 + 16 * v11);
            v13 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v12;
            *v12 = v13;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v14 = *(_QWORD **)(v8 - 16);
            v15 = *(std::__shared_weak_count **)(v8 - 8);
            if (v15)
            {
              v16 = (unint64_t *)&v15->__shared_owners_;
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            v18 = *(std::__shared_weak_count **)(v8 + 8);
            *(_QWORD *)&v353 = *(_QWORD *)v8;
            *((_QWORD *)&v353 + 1) = v18;
            if (v18)
            {
              v19 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
              v21 = lessThan(v14, (_QWORD **)&v353);
              do
                v22 = __ldaxr(v19);
              while (__stlxr(v22 - 1, v19));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            else
            {
              v21 = lessThan(v14, (_QWORD **)&v353);
            }
            if (v15)
            {
              v23 = (unint64_t *)&v15->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            if (!v21)
            {
              v91 = *(_QWORD **)v350;
              v92 = (std::__shared_weak_count *)*((_QWORD *)v350 + 1);
              *(_QWORD *)&v352 = *(_QWORD *)v350;
              *((_QWORD *)&v352 + 1) = v92;
              *(_QWORD *)v350 = 0;
              *((_QWORD *)v350 + 1) = 0;
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldxr(v93);
                while (__stxr(v94 + 1, v93));
              }
              *(_QWORD *)&v353 = *(_QWORD *)(v345 - 16);
              v95 = *(std::__shared_weak_count **)(v345 - 8);
              *((_QWORD *)&v353 + 1) = v95;
              if (v95)
              {
                v96 = (unint64_t *)&v95->__shared_owners_;
                do
                  v97 = __ldxr(v96);
                while (__stxr(v97 + 1, v96));
                v98 = lessThan(v91, (_QWORD **)&v353);
                do
                  v99 = __ldaxr(v96);
                while (__stlxr(v99 - 1, v96));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              else
              {
                v98 = lessThan(v91, (_QWORD **)&v353);
              }
              if (v92)
              {
                v100 = (unint64_t *)&v92->__shared_owners_;
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 - 1, v100));
                if (!v101)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v7 = v350;
              if (v98)
              {
                v7 = v350;
                do
                {
                  v102 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v103 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v104 = __ldxr(v103);
                    while (__stxr(v104 + 1, v103));
                  }
                  v105 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v7 + 2);
                  *((_QWORD *)&v353 + 1) = v105;
                  if (v105)
                  {
                    v106 = (unint64_t *)&v105->__shared_owners_;
                    do
                      v107 = __ldxr(v106);
                    while (__stxr(v107 + 1, v106));
                    v108 = lessThan((_QWORD *)v102, (_QWORD **)&v353);
                    do
                      v109 = __ldaxr(v106);
                    while (__stlxr(v109 - 1, v106));
                    if (!v109)
                    {
                      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                      std::__shared_weak_count::__release_weak(v105);
                    }
                  }
                  else
                  {
                    v108 = lessThan((_QWORD *)v102, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v102 + 1))
                  {
                    v110 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
                    do
                      v111 = __ldaxr(v110);
                    while (__stlxr(v111 - 1, v110));
                    if (!v111)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
                    }
                  }
                  ++v7;
                }
                while (!v108);
              }
              else
              {
                while (1)
                {
                  v148 = v7++;
                  if ((unint64_t)v7 >= v345)
                    break;
                  v149 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v150 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v151 = __ldxr(v150);
                    while (__stxr(v151 + 1, v150));
                  }
                  v152 = (std::__shared_weak_count *)*((_QWORD *)v148 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v148 + 2);
                  *((_QWORD *)&v353 + 1) = v152;
                  if (v152)
                  {
                    v153 = (unint64_t *)&v152->__shared_owners_;
                    do
                      v154 = __ldxr(v153);
                    while (__stxr(v154 + 1, v153));
                    v155 = lessThan((_QWORD *)v149, (_QWORD **)&v353);
                    do
                      v156 = __ldaxr(v153);
                    while (__stlxr(v156 - 1, v153));
                    if (!v156)
                    {
                      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                      std::__shared_weak_count::__release_weak(v152);
                    }
                  }
                  else
                  {
                    v155 = lessThan((_QWORD *)v149, (_QWORD **)&v353);
                  }
                  if (!*((_QWORD *)&v149 + 1))
                    goto LABEL_250;
                  v157 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                  do
                    v158 = __ldaxr(v157);
                  while (__stlxr(v158 - 1, v157));
                  if (!v158)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
                    if (v155)
                      break;
                  }
                  else
                  {
LABEL_250:
                    if (v155)
                      break;
                  }
                }
              }
              v112 = (__int128 *)v345;
              if ((unint64_t)v7 < v345)
              {
                v112 = (__int128 *)v345;
                do
                {
                  v113 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v114 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v115 = __ldxr(v114);
                    while (__stxr(v115 + 1, v114));
                  }
                  *(_QWORD *)&v353 = *((_QWORD *)v112 - 2);
                  v116 = (std::__shared_weak_count *)*((_QWORD *)v112 - 1);
                  *((_QWORD *)&v353 + 1) = v116;
                  if (v116)
                  {
                    v117 = (unint64_t *)&v116->__shared_owners_;
                    do
                      v118 = __ldxr(v117);
                    while (__stxr(v118 + 1, v117));
                    v119 = lessThan((_QWORD *)v113, (_QWORD **)&v353);
                    do
                      v120 = __ldaxr(v117);
                    while (__stlxr(v120 - 1, v117));
                    if (!v120)
                    {
                      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                      std::__shared_weak_count::__release_weak(v116);
                    }
                  }
                  else
                  {
                    v119 = lessThan((_QWORD *)v113, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v113 + 1))
                  {
                    v121 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v113 + 1) + 16))(*((_QWORD *)&v113 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v113 + 1));
                    }
                  }
                  --v112;
                }
                while (v119);
              }
              while (v7 < v112)
              {
                v123 = *(_QWORD *)v7;
                *(_QWORD *)v7 = *(_QWORD *)v112;
                *(_QWORD *)v112 = v123;
                v124 = *((_QWORD *)v7 + 1);
                *((_QWORD *)v7 + 1) = *((_QWORD *)v112 + 1);
                *((_QWORD *)v112 + 1) = v124;
                do
                {
                  v125 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v126 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v127 = __ldxr(v126);
                    while (__stxr(v127 + 1, v126));
                  }
                  v128 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v7 + 2);
                  *((_QWORD *)&v353 + 1) = v128;
                  if (v128)
                  {
                    v129 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v130 = __ldxr(v129);
                    while (__stxr(v130 + 1, v129));
                    v131 = lessThan((_QWORD *)v125, (_QWORD **)&v353);
                    do
                      v132 = __ldaxr(v129);
                    while (__stlxr(v132 - 1, v129));
                    if (!v132)
                    {
                      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                      std::__shared_weak_count::__release_weak(v128);
                    }
                  }
                  else
                  {
                    v131 = lessThan((_QWORD *)v125, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v125 + 1))
                  {
                    v133 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
                    do
                      v134 = __ldaxr(v133);
                    while (__stlxr(v134 - 1, v133));
                    if (!v134)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v125 + 1) + 16))(*((_QWORD *)&v125 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v125 + 1));
                    }
                  }
                  ++v7;
                }
                while (!v131);
                do
                {
                  v135 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v136 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v137 = __ldxr(v136);
                    while (__stxr(v137 + 1, v136));
                  }
                  *(_QWORD *)&v353 = *((_QWORD *)v112 - 2);
                  v138 = (std::__shared_weak_count *)*((_QWORD *)v112 - 1);
                  *((_QWORD *)&v353 + 1) = v138;
                  if (v138)
                  {
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldxr(v139);
                    while (__stxr(v140 + 1, v139));
                    v141 = lessThan((_QWORD *)v135, (_QWORD **)&v353);
                    do
                      v142 = __ldaxr(v139);
                    while (__stlxr(v142 - 1, v139));
                    if (!v142)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                  else
                  {
                    v141 = lessThan((_QWORD *)v135, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v135 + 1))
                  {
                    v143 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
                    do
                      v144 = __ldaxr(v143);
                    while (__stlxr(v144 - 1, v143));
                    if (!v144)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v135 + 1) + 16))(*((_QWORD *)&v135 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v135 + 1));
                    }
                  }
                  --v112;
                }
                while (v141);
              }
              if (v7 - 1 != v350)
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v350, v7 - 1);
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v7 - 1), &v352);
              v145 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              a2 = v345;
              if (*((_QWORD *)&v352 + 1))
              {
                v146 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                if (!v147)
                {
                  ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                  std::__shared_weak_count::__release_weak(v145);
                }
              }
              a4 = 0;
              continue;
            }
          }
          v352 = *v350;
          *(_QWORD *)v350 = 0;
          *((_QWORD *)v350 + 1) = 0;
          v25 = v350;
          do
          {
            while (1)
            {
              v26 = v25;
              v27 = (_QWORD *)*((_QWORD *)v25 + 2);
              v28 = (std::__shared_weak_count *)*((_QWORD *)v25++ + 3);
              if (v28)
              {
                v29 = (unint64_t *)&v28->__shared_owners_;
                do
                  v30 = __ldxr(v29);
                while (__stxr(v30 + 1, v29));
              }
              v31 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v32 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v33 = __ldxr(v32);
                while (__stxr(v33 + 1, v32));
                v34 = lessThan(v27, (_QWORD **)&v353);
                do
                  v35 = __ldaxr(v32);
                while (__stlxr(v35 - 1, v32));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
              else
              {
                v34 = lessThan(v27, (_QWORD **)&v353);
              }
              if (v28)
              {
                v36 = (unint64_t *)&v28->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                  break;
              }
              if (!v34)
                goto LABEL_45;
            }
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          while (v34);
LABEL_45:
          v38 = (__int128 *)v345;
          if (v26 == v350)
          {
            v38 = (__int128 *)v345;
            do
            {
              if (v25 >= v38)
                break;
              v50 = (_QWORD *)*((_QWORD *)v38 - 2);
              v51 = (std::__shared_weak_count *)*((_QWORD *)v38-- - 1);
              if (v51)
              {
                v52 = (unint64_t *)&v51->__shared_owners_;
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }
              v54 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v55 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v56 = __ldxr(v55);
                while (__stxr(v56 + 1, v55));
                v57 = lessThan(v50, (_QWORD **)&v353);
                do
                  v58 = __ldaxr(v55);
                while (__stlxr(v58 - 1, v55));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              else
              {
                v57 = lessThan(v50, (_QWORD **)&v353);
              }
              if (v51)
              {
                v59 = (unint64_t *)&v51->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
            }
            while (!v57);
          }
          else
          {
            do
            {
              while (1)
              {
                v39 = (_QWORD *)*((_QWORD *)v38 - 2);
                v40 = (std::__shared_weak_count *)*((_QWORD *)v38-- - 1);
                if (v40)
                {
                  v41 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                v43 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                v353 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v44 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v45 = __ldxr(v44);
                  while (__stxr(v45 + 1, v44));
                  v46 = lessThan(v39, (_QWORD **)&v353);
                  do
                    v47 = __ldaxr(v44);
                  while (__stlxr(v47 - 1, v44));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                    std::__shared_weak_count::__release_weak(v43);
                  }
                }
                else
                {
                  v46 = lessThan(v39, (_QWORD **)&v353);
                }
                if (v40)
                {
                  v48 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                    break;
                }
                if (v46)
                  goto LABEL_84;
              }
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
            while (!v46);
          }
LABEL_84:
          if (v25 < v38)
          {
            v61 = v25;
            v62 = v38;
            do
            {
              v63 = *(_QWORD *)v61;
              *(_QWORD *)v61 = *(_QWORD *)v62;
              *(_QWORD *)v62 = v63;
              v64 = *((_QWORD *)v61 + 1);
              *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
              *((_QWORD *)v62 + 1) = v64;
              do
              {
                while (1)
                {
                  v26 = v61;
                  v65 = (_QWORD *)*((_QWORD *)v61 + 2);
                  v66 = (std::__shared_weak_count *)*((_QWORD *)v61++ + 3);
                  if (v66)
                  {
                    v67 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v68 = __ldxr(v67);
                    while (__stxr(v68 + 1, v67));
                  }
                  v69 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  v353 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v70 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v71 = __ldxr(v70);
                    while (__stxr(v71 + 1, v70));
                    v72 = lessThan(v65, (_QWORD **)&v353);
                    do
                      v73 = __ldaxr(v70);
                    while (__stlxr(v73 - 1, v70));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                  else
                  {
                    v72 = lessThan(v65, (_QWORD **)&v353);
                  }
                  if (v66)
                  {
                    v74 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                      break;
                  }
                  if (!v72)
                    goto LABEL_107;
                }
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
              while (v72);
              do
              {
                while (1)
                {
LABEL_107:
                  v76 = (_QWORD *)*((_QWORD *)v62 - 2);
                  v77 = (std::__shared_weak_count *)*((_QWORD *)v62-- - 1);
                  if (v77)
                  {
                    v78 = (unint64_t *)&v77->__shared_owners_;
                    do
                      v79 = __ldxr(v78);
                    while (__stxr(v79 + 1, v78));
                  }
                  v80 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  v353 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v81 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v82 = __ldxr(v81);
                    while (__stxr(v82 + 1, v81));
                    v83 = lessThan(v76, (_QWORD **)&v353);
                    do
                      v84 = __ldaxr(v81);
                    while (__stlxr(v84 - 1, v81));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  else
                  {
                    v83 = lessThan(v76, (_QWORD **)&v353);
                  }
                  if (!v77)
                    break;
                  v85 = (unint64_t *)&v77->__shared_owners_;
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (v86)
                    break;
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                  if (v83)
                    goto LABEL_123;
                }
              }
              while (!v83);
LABEL_123:
              ;
            }
            while (v61 < v62);
          }
          a1 = v350;
          if (v26 != v350)
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v350, v26);
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v26, &v352);
          v87 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          a2 = v345;
          if (*((_QWORD *)&v352 + 1))
          {
            v88 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          if (v25 < v38)
          {
LABEL_134:
            std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*,false>(v350, v26, a3, a4 & 1);
            a4 = 0;
            v7 = v26 + 1;
            continue;
          }
          v90 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)v350, (uint64_t)v26);
          v7 = v26 + 1;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)(v26 + 1), v345))
          {
            if (v90)
              continue;
            goto LABEL_134;
          }
          a2 = (unint64_t)v26;
          if (v90)
            return;
          goto LABEL_1;
        }
        if (v8 == a2)
          return;
        v197 = (unint64_t)(v10 - 2) >> 1;
        v198 = v197;
        v344 = v9;
        v340 = v10;
        do
        {
          v199 = v198;
          if (v197 >= v198)
          {
            v200 = (2 * v198) | 1;
            v201 = &v350[v200];
            v202 = 2 * v198 + 2;
            v348 = v198;
            if (v202 < v10)
            {
              v203 = *v201;
              v204 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
              if (v204)
              {
                v205 = (unint64_t *)&v204->__shared_owners_;
                do
                  v206 = __ldxr(v205);
                while (__stxr(v206 + 1, v205));
              }
              *(_QWORD *)&v353 = *((_QWORD *)v201 + 2);
              v207 = (std::__shared_weak_count *)*((_QWORD *)v201 + 3);
              *((_QWORD *)&v353 + 1) = v207;
              if (v207)
              {
                v208 = (unint64_t *)&v207->__shared_owners_;
                do
                  v209 = __ldxr(v208);
                while (__stxr(v209 + 1, v208));
                v210 = lessThan((_QWORD *)v203, (_QWORD **)&v353);
                do
                  v211 = __ldaxr(v208);
                while (__stlxr(v211 - 1, v208));
                if (!v211)
                {
                  ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                  std::__shared_weak_count::__release_weak(v207);
                }
              }
              else
              {
                v210 = lessThan((_QWORD *)v203, (_QWORD **)&v353);
              }
              if (v204)
              {
                v212 = (unint64_t *)&v204->__shared_owners_;
                do
                  v213 = __ldaxr(v212);
                while (__stlxr(v213 - 1, v212));
                if (!v213)
                {
                  ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                  std::__shared_weak_count::__release_weak(v204);
                }
              }
              if (v210)
              {
                ++v201;
                v200 = v202;
              }
              v199 = v348;
            }
            v214 = *(_QWORD **)v201;
            v215 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
            if (v215)
            {
              v216 = (unint64_t *)&v215->__shared_owners_;
              do
                v217 = __ldxr(v216);
              while (__stxr(v217 + 1, v216));
            }
            v218 = (uint64_t)&v350[v199];
            v219 = *(_OWORD *)v218;
            v353 = v219;
            v220 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
            if (*((_QWORD *)&v219 + 1))
            {
              v221 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
              do
                v222 = __ldxr(v221);
              while (__stxr(v222 + 1, v221));
              v223 = lessThan(v214, (_QWORD **)&v353);
              do
                v224 = __ldaxr(v221);
              while (__stlxr(v224 - 1, v221));
              if (!v224)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
            }
            else
            {
              v223 = lessThan(v214, (_QWORD **)&v353);
            }
            if (v215)
            {
              v225 = (unint64_t *)&v215->__shared_owners_;
              do
                v226 = __ldaxr(v225);
              while (__stlxr(v226 - 1, v225));
              if (!v226)
              {
                ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                std::__shared_weak_count::__release_weak(v215);
              }
            }
            v9 = v344;
            v199 = v348;
            if (!v223)
            {
              v352 = *(_OWORD *)v218;
              *(_QWORD *)v218 = 0;
              *(_QWORD *)(v218 + 8) = 0;
              while (1)
              {
                v227 = (uint64_t)v201;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v218, v201);
                if (v197 < v200)
                {
LABEL_401:
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v227, &v352);
                  v252 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v253 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v254 = __ldaxr(v253);
                    while (__stlxr(v254 - 1, v253));
                    if (!v254)
                    {
                      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                      std::__shared_weak_count::__release_weak(v252);
                    }
                  }
                  v9 = v344;
                  v199 = v348;
                  goto LABEL_407;
                }
                v228 = (2 * v200) | 1;
                v201 = &v350[v228];
                v200 = 2 * v200 + 2;
                if (v200 < v10)
                  break;
                v200 = v228;
LABEL_384:
                v241 = *(_QWORD **)v201;
                v242 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
                if (v242)
                {
                  v243 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v244 = __ldxr(v243);
                  while (__stxr(v244 + 1, v243));
                }
                v245 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                v353 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v246 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v247 = __ldxr(v246);
                  while (__stxr(v247 + 1, v246));
                  v248 = lessThan(v241, (_QWORD **)&v353);
                  do
                    v249 = __ldaxr(v246);
                  while (__stlxr(v249 - 1, v246));
                  if (!v249)
                  {
                    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                    std::__shared_weak_count::__release_weak(v245);
                  }
                }
                else
                {
                  v248 = lessThan(v241, (_QWORD **)&v353);
                }
                if (v242)
                {
                  v250 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v251 = __ldaxr(v250);
                  while (__stlxr(v251 - 1, v250));
                  if (!v251)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                  }
                }
                v218 = v227;
                if (v248)
                  goto LABEL_401;
              }
              v229 = *v201;
              v230 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
              if (v230)
              {
                v231 = (unint64_t *)&v230->__shared_owners_;
                do
                  v232 = __ldxr(v231);
                while (__stxr(v232 + 1, v231));
              }
              *(_QWORD *)&v353 = *((_QWORD *)v201 + 2);
              v233 = (std::__shared_weak_count *)*((_QWORD *)v201 + 3);
              *((_QWORD *)&v353 + 1) = v233;
              if (v233)
              {
                v234 = v197;
                v235 = (unint64_t *)&v233->__shared_owners_;
                do
                  v236 = __ldxr(v235);
                while (__stxr(v236 + 1, v235));
                v237 = lessThan((_QWORD *)v229, (_QWORD **)&v353);
                do
                  v238 = __ldaxr(v235);
                while (__stlxr(v238 - 1, v235));
                if (!v238)
                {
                  ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                  std::__shared_weak_count::__release_weak(v233);
                }
                v197 = v234;
                v10 = v340;
                if (!v230)
                  goto LABEL_381;
              }
              else
              {
                v237 = lessThan((_QWORD *)v229, (_QWORD **)&v353);
                if (!v230)
                {
LABEL_381:
                  if (v237)
                    ++v201;
                  else
                    v200 = v228;
                  goto LABEL_384;
                }
              }
              v239 = (unint64_t *)&v230->__shared_owners_;
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                std::__shared_weak_count::__release_weak(v230);
              }
              goto LABEL_381;
            }
          }
LABEL_407:
          v198 = v199 - 1;
        }
        while (v199);
        v255 = (unint64_t)v9 >> 4;
        v256 = v345;
        v257 = v350;
        do
        {
          if (v255 < 2)
            goto LABEL_483;
          v346 = v256;
          v349 = v255;
          v258 = 0;
          v351 = *v257;
          *(_QWORD *)v257 = 0;
          *((_QWORD *)v257 + 1) = 0;
          v259 = (unint64_t)(v255 - 2) >> 1;
          v260 = (uint64_t)v257;
          do
          {
            v261 = v260 + 16 * v258 + 16;
            v262 = (2 * v258) | 1;
            v263 = 2 * v258 + 2;
            if (v263 >= v255)
              goto LABEL_431;
            v264 = *(_OWORD *)v261;
            v265 = *(std::__shared_weak_count **)(v260 + 16 * v258 + 24);
            if (v265)
            {
              v266 = (unint64_t *)&v265->__shared_owners_;
              do
                v267 = __ldxr(v266);
              while (__stxr(v267 + 1, v266));
            }
            *(_QWORD *)&v353 = *(_QWORD *)(v261 + 16);
            v268 = *(std::__shared_weak_count **)(v261 + 24);
            *((_QWORD *)&v353 + 1) = v268;
            if (v268)
            {
              v269 = (unint64_t *)&v268->__shared_owners_;
              do
                v270 = __ldxr(v269);
              while (__stxr(v270 + 1, v269));
              v271 = lessThan((_QWORD *)v264, (_QWORD **)&v353);
              do
                v272 = __ldaxr(v269);
              while (__stlxr(v272 - 1, v269));
              if (!v272)
              {
                ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                std::__shared_weak_count::__release_weak(v268);
              }
              v255 = v349;
              if (!v265)
                goto LABEL_429;
LABEL_425:
              v273 = (unint64_t *)&v265->__shared_owners_;
              do
                v274 = __ldaxr(v273);
              while (__stlxr(v274 - 1, v273));
              if (!v274)
              {
                ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                std::__shared_weak_count::__release_weak(v265);
              }
              goto LABEL_429;
            }
            v271 = lessThan((_QWORD *)v264, (_QWORD **)&v353);
            if (v265)
              goto LABEL_425;
LABEL_429:
            if (v271)
            {
              v261 += 16;
              v262 = v263;
            }
LABEL_431:
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v260, (__int128 *)v261);
            v260 = v261;
            v258 = v262;
          }
          while (v262 <= v259);
          v256 = v346;
          if (v261 == v346 - 16)
          {
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, &v351);
            v257 = v350;
            goto LABEL_478;
          }
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, (__int128 *)(v346 - 16));
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v346 - 16, &v351);
          v257 = v350;
          v275 = v261 - (_QWORD)v350 + 16;
          if (v275 < 17)
            goto LABEL_478;
          v276 = (unint64_t)((v275 >> 4) - 2) >> 1;
          v277 = &v350[v276];
          v278 = *v277;
          v279 = (std::__shared_weak_count *)*((_QWORD *)v277 + 1);
          if (v279)
          {
            v280 = (unint64_t *)&v279->__shared_owners_;
            do
              v281 = __ldxr(v280);
            while (__stxr(v281 + 1, v280));
          }
          *(_QWORD *)&v353 = *(_QWORD *)v261;
          v282 = *(std::__shared_weak_count **)(v261 + 8);
          *((_QWORD *)&v353 + 1) = v282;
          if (!v282)
          {
            v285 = lessThan((_QWORD *)v278, (_QWORD **)&v353);
            if (!v279)
              goto LABEL_452;
LABEL_448:
            v287 = (unint64_t *)&v279->__shared_owners_;
            do
              v288 = __ldaxr(v287);
            while (__stlxr(v288 - 1, v287));
            if (!v288)
            {
              ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
              std::__shared_weak_count::__release_weak(v279);
            }
            goto LABEL_452;
          }
          v283 = (unint64_t *)&v282->__shared_owners_;
          do
            v284 = __ldxr(v283);
          while (__stxr(v284 + 1, v283));
          v285 = lessThan((_QWORD *)v278, (_QWORD **)&v353);
          do
            v286 = __ldaxr(v283);
          while (__stlxr(v286 - 1, v283));
          if (!v286)
          {
            ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
            std::__shared_weak_count::__release_weak(v282);
          }
          v255 = v349;
          if (v279)
            goto LABEL_448;
LABEL_452:
          if (!v285)
            goto LABEL_478;
          v352 = *(_OWORD *)v261;
          *(_QWORD *)v261 = 0;
          *(_QWORD *)(v261 + 8) = 0;
          while (2)
          {
            v289 = (uint64_t)v277;
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, v277);
            if (v276)
            {
              v276 = (v276 - 1) >> 1;
              v277 = &v350[v276];
              v290 = *v277;
              v291 = (std::__shared_weak_count *)*((_QWORD *)v277 + 1);
              if (v291)
              {
                v292 = (unint64_t *)&v291->__shared_owners_;
                do
                  v293 = __ldxr(v292);
                while (__stxr(v293 + 1, v292));
              }
              v294 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v295 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v296 = __ldxr(v295);
                while (__stxr(v296 + 1, v295));
                v297 = lessThan((_QWORD *)v290, (_QWORD **)&v353);
                do
                  v298 = __ldaxr(v295);
                while (__stlxr(v298 - 1, v295));
                if (!v298)
                {
                  ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                  std::__shared_weak_count::__release_weak(v294);
                }
                v255 = v349;
                if (!v291)
                {
LABEL_472:
                  v261 = v289;
                  if (!v297)
                    break;
                  continue;
                }
              }
              else
              {
                v297 = lessThan((_QWORD *)v290, (_QWORD **)&v353);
                if (!v291)
                  goto LABEL_472;
              }
              v299 = (unint64_t *)&v291->__shared_owners_;
              do
                v300 = __ldaxr(v299);
              while (__stlxr(v300 - 1, v299));
              if (!v300)
              {
                ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                std::__shared_weak_count::__release_weak(v291);
              }
              goto LABEL_472;
            }
            break;
          }
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v289, &v352);
          v301 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          if (*((_QWORD *)&v352 + 1))
          {
            v302 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v303 = __ldaxr(v302);
            while (__stlxr(v303 - 1, v302));
            if (!v303)
            {
              ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
              std::__shared_weak_count::__release_weak(v301);
            }
          }
LABEL_478:
          v304 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
          if (*((_QWORD *)&v351 + 1))
          {
            v305 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
            do
              v306 = __ldaxr(v305);
            while (__stlxr(v306 - 1, v305));
            if (!v306)
            {
              ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
              std::__shared_weak_count::__release_weak(v304);
            }
          }
LABEL_483:
          v256 -= 16;
        }
        while ((unint64_t)v255-- > 2);
        return;
    }
  }
}

  v342 = a2 - 32;
  v343 = a2 - 16;
  v341 = a2 - 48;
  v7 = a1;
  v345 = a2;
  while (2)
  {
    v8 = (uint64_t)v7;
    v9 = a2 - (_QWORD)v7;
    v10 = (uint64_t)(a2 - (_QWORD)v7) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v159 = *(_QWORD **)(a2 - 16);
        v160 = *(std::__shared_weak_count **)(a2 - 8);
        if (v160)
        {
          p_shared_owners = (unint64_t *)&v160->__shared_owners_;
          do
            v162 = __ldxr(p_shared_owners);
          while (__stxr(v162 + 1, p_shared_owners));
        }
        v163 = *(std::__shared_weak_count **)(v8 + 8);
        *(_QWORD *)&v353 = *(_QWORD *)v8;
        *((_QWORD *)&v353 + 1) = v163;
        if (v163)
        {
          v164 = (unint64_t *)&v163->__shared_owners_;
          do
            v165 = __ldxr(v164);
          while (__stxr(v165 + 1, v164));
          v166 = lessThan(v159, (_QWORD **)&v353);
          do
            v167 = __ldaxr(v164);
          while (__stlxr(v167 - 1, v164));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        else
        {
          v166 = lessThan(v159, (_QWORD **)&v353);
        }
        if (v160)
        {
          v336 = (unint64_t *)&v160->__shared_owners_;
          do
            v337 = __ldaxr(v336);
          while (__stlxr(v337 - 1, v336));
          if (!v337)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        if (v166)
        {
          v338 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v338;
          v339 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v339;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v8, v8 + 16, v343);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v8, v8 + 16, v8 + 32, v343);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v8, v8 + 16, v8 + 32, v8 + 48, v343);
        return;
      default:
        if (v9 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (v8 == a2)
              return;
            v168 = v8 + 16;
            if (v8 + 16 == a2)
              return;
            v169 = v8;
            while (1)
            {
              v170 = v168;
              v171 = *(_QWORD **)(v169 + 16);
              v172 = *(std::__shared_weak_count **)(v169 + 24);
              if (v172)
              {
                v173 = (unint64_t *)&v172->__shared_owners_;
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
              }
              v175 = *(std::__shared_weak_count **)(v169 + 8);
              *(_QWORD *)&v353 = *(_QWORD *)v169;
              *((_QWORD *)&v353 + 1) = v175;
              if (v175)
              {
                v176 = (unint64_t *)&v175->__shared_owners_;
                do
                  v177 = __ldxr(v176);
                while (__stxr(v177 + 1, v176));
                v178 = lessThan(v171, (_QWORD **)&v353);
                do
                  v179 = __ldaxr(v176);
                while (__stlxr(v179 - 1, v176));
                if (!v179)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              else
              {
                v178 = lessThan(v171, (_QWORD **)&v353);
              }
              if (!v172)
                goto LABEL_290;
              v180 = (unint64_t *)&v172->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                std::__shared_weak_count::__release_weak(v172);
                if (!v178)
                  goto LABEL_318;
              }
              else
              {
LABEL_290:
                if (!v178)
                  goto LABEL_318;
              }
              v352 = *(_OWORD *)v170;
              *(_QWORD *)v170 = 0;
              *(_QWORD *)(v170 + 8) = 0;
              v182 = v170;
              while (1)
              {
                v183 = v182;
                v182 = v169;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v183, (__int128 *)v169);
                if (v169 == v8)
                  break;
                v184 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v185 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v186 = __ldxr(v185);
                  while (__stxr(v186 + 1, v185));
                }
                *(_QWORD *)&v353 = *(_QWORD *)(v169 - 16);
                v187 = *(std::__shared_weak_count **)(v169 - 8);
                *((_QWORD *)&v353 + 1) = v187;
                if (v187)
                {
                  v188 = (unint64_t *)&v187->__shared_owners_;
                  do
                    v189 = __ldxr(v188);
                  while (__stxr(v189 + 1, v188));
                  v190 = lessThan((_QWORD *)v184, (_QWORD **)&v353);
                  do
                    v191 = __ldaxr(v188);
                  while (__stlxr(v191 - 1, v188));
                  if (!v191)
                  {
                    ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                    std::__shared_weak_count::__release_weak(v187);
                  }
                }
                else
                {
                  v190 = lessThan((_QWORD *)v184, (_QWORD **)&v353);
                }
                if (*((_QWORD *)&v184 + 1))
                {
                  v192 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
                  do
                    v193 = __ldaxr(v192);
                  while (__stlxr(v193 - 1, v192));
                  if (!v193)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v184 + 1) + 16))(*((_QWORD *)&v184 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v184 + 1));
                  }
                }
                v169 = v182 - 16;
                if (!v190)
                  goto LABEL_312;
              }
              v182 = v8;
LABEL_312:
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v182, &v352);
              v194 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              if (*((_QWORD *)&v352 + 1))
              {
                v195 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v196 = __ldaxr(v195);
                while (__stlxr(v196 - 1, v195));
                if (!v196)
                {
                  ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                  std::__shared_weak_count::__release_weak(v194);
                }
              }
LABEL_318:
              v168 = v170 + 16;
              v169 = v170;
              if (v170 + 16 == a2)
                return;
            }
          }
          if (v8 == a2)
            return;
          v308 = v8 + 16;
          while (1)
          {
            if (v308 == a2)
              return;
            v309 = v308;
            v310 = *(_QWORD **)(v8 + 16);
            v311 = *(std::__shared_weak_count **)(v8 + 24);
            if (v311)
            {
              v312 = (unint64_t *)&v311->__shared_owners_;
              do
                v313 = __ldxr(v312);
              while (__stxr(v313 + 1, v312));
            }
            v314 = *(std::__shared_weak_count **)(v8 + 8);
            *(_QWORD *)&v353 = *(_QWORD *)v8;
            *((_QWORD *)&v353 + 1) = v314;
            if (v314)
            {
              v315 = (unint64_t *)&v314->__shared_owners_;
              do
                v316 = __ldxr(v315);
              while (__stxr(v316 + 1, v315));
              v317 = lessThan(v310, (_QWORD **)&v353);
              do
                v318 = __ldaxr(v315);
              while (__stlxr(v318 - 1, v315));
              if (!v318)
              {
                ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                std::__shared_weak_count::__release_weak(v314);
              }
            }
            else
            {
              v317 = lessThan(v310, (_QWORD **)&v353);
            }
            if (!v311)
              goto LABEL_503;
            v319 = (unint64_t *)&v311->__shared_owners_;
            do
              v320 = __ldaxr(v319);
            while (__stlxr(v320 - 1, v319));
            if (!v320)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
              if (!v317)
                goto LABEL_528;
            }
            else
            {
LABEL_503:
              if (!v317)
                goto LABEL_528;
            }
            v352 = *(_OWORD *)v309;
            *(_QWORD *)v309 = 0;
            *(_QWORD *)(v309 + 8) = 0;
            v321 = v309;
            do
            {
              v322 = v321;
              v321 = v8;
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v322, (__int128 *)v8);
              v323 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v324 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v325 = __ldxr(v324);
                while (__stxr(v325 + 1, v324));
              }
              *(_QWORD *)&v353 = *(_QWORD *)(v8 - 16);
              v326 = *(std::__shared_weak_count **)(v8 - 8);
              *((_QWORD *)&v353 + 1) = v326;
              if (v326)
              {
                v327 = (unint64_t *)&v326->__shared_owners_;
                do
                  v328 = __ldxr(v327);
                while (__stxr(v328 + 1, v327));
                v329 = lessThan((_QWORD *)v323, (_QWORD **)&v353);
                do
                  v330 = __ldaxr(v327);
                while (__stlxr(v330 - 1, v327));
                if (!v330)
                {
                  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                  std::__shared_weak_count::__release_weak(v326);
                }
              }
              else
              {
                v329 = lessThan((_QWORD *)v323, (_QWORD **)&v353);
              }
              if (*((_QWORD *)&v323 + 1))
              {
                v331 = (unint64_t *)(*((_QWORD *)&v323 + 1) + 8);
                do
                  v332 = __ldaxr(v331);
                while (__stlxr(v332 - 1, v331));
                if (!v332)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v323 + 1) + 16))(*((_QWORD *)&v323 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v323 + 1));
                }
              }
              v8 -= 16;
            }
            while (v329);
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v321, &v352);
            v333 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
            if (*((_QWORD *)&v352 + 1))
            {
              v334 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
              do
                v335 = __ldaxr(v334);
              while (__stlxr(v335 - 1, v334));
              if (!v335)
              {
                ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                std::__shared_weak_count::__release_weak(v333);
              }
            }
LABEL_528:
            v308 = v309 + 16;
            v8 = v309;
          }
        }
        v350 = (__int128 *)v8;
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = (__int128 *)(v8 + 16 * ((unint64_t)v10 >> 1));
          if ((unint64_t)v9 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)v12, v8, v343);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v8, (uint64_t)v12, v343);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v8 + 16, (uint64_t)(v12 - 1), v342);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v8 + 32, v8 + 16 + 16 * v11, v341);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)(v12 - 1), (uint64_t)v12, v8 + 16 + 16 * v11);
            v13 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v12;
            *v12 = v13;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v14 = *(_QWORD **)(v8 - 16);
            v15 = *(std::__shared_weak_count **)(v8 - 8);
            if (v15)
            {
              v16 = (unint64_t *)&v15->__shared_owners_;
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            v18 = *(std::__shared_weak_count **)(v8 + 8);
            *(_QWORD *)&v353 = *(_QWORD *)v8;
            *((_QWORD *)&v353 + 1) = v18;
            if (v18)
            {
              v19 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
              v21 = lessThan(v14, (_QWORD **)&v353);
              do
                v22 = __ldaxr(v19);
              while (__stlxr(v22 - 1, v19));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            else
            {
              v21 = lessThan(v14, (_QWORD **)&v353);
            }
            if (v15)
            {
              v23 = (unint64_t *)&v15->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            if (!v21)
            {
              v91 = *(_QWORD **)v350;
              v92 = (std::__shared_weak_count *)*((_QWORD *)v350 + 1);
              *(_QWORD *)&v352 = *(_QWORD *)v350;
              *((_QWORD *)&v352 + 1) = v92;
              *(_QWORD *)v350 = 0;
              *((_QWORD *)v350 + 1) = 0;
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldxr(v93);
                while (__stxr(v94 + 1, v93));
              }
              *(_QWORD *)&v353 = *(_QWORD *)(v345 - 16);
              v95 = *(std::__shared_weak_count **)(v345 - 8);
              *((_QWORD *)&v353 + 1) = v95;
              if (v95)
              {
                v96 = (unint64_t *)&v95->__shared_owners_;
                do
                  v97 = __ldxr(v96);
                while (__stxr(v97 + 1, v96));
                v98 = lessThan(v91, (_QWORD **)&v353);
                do
                  v99 = __ldaxr(v96);
                while (__stlxr(v99 - 1, v96));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              else
              {
                v98 = lessThan(v91, (_QWORD **)&v353);
              }
              if (v92)
              {
                v100 = (unint64_t *)&v92->__shared_owners_;
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 - 1, v100));
                if (!v101)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v7 = v350;
              if (v98)
              {
                v7 = v350;
                do
                {
                  v102 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v103 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v104 = __ldxr(v103);
                    while (__stxr(v104 + 1, v103));
                  }
                  v105 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v7 + 2);
                  *((_QWORD *)&v353 + 1) = v105;
                  if (v105)
                  {
                    v106 = (unint64_t *)&v105->__shared_owners_;
                    do
                      v107 = __ldxr(v106);
                    while (__stxr(v107 + 1, v106));
                    v108 = lessThan((_QWORD *)v102, (_QWORD **)&v353);
                    do
                      v109 = __ldaxr(v106);
                    while (__stlxr(v109 - 1, v106));
                    if (!v109)
                    {
                      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                      std::__shared_weak_count::__release_weak(v105);
                    }
                  }
                  else
                  {
                    v108 = lessThan((_QWORD *)v102, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v102 + 1))
                  {
                    v110 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
                    do
                      v111 = __ldaxr(v110);
                    while (__stlxr(v111 - 1, v110));
                    if (!v111)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
                    }
                  }
                  ++v7;
                }
                while (!v108);
              }
              else
              {
                while (1)
                {
                  v148 = v7++;
                  if ((unint64_t)v7 >= v345)
                    break;
                  v149 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v150 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v151 = __ldxr(v150);
                    while (__stxr(v151 + 1, v150));
                  }
                  v152 = (std::__shared_weak_count *)*((_QWORD *)v148 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v148 + 2);
                  *((_QWORD *)&v353 + 1) = v152;
                  if (v152)
                  {
                    v153 = (unint64_t *)&v152->__shared_owners_;
                    do
                      v154 = __ldxr(v153);
                    while (__stxr(v154 + 1, v153));
                    v155 = lessThan((_QWORD *)v149, (_QWORD **)&v353);
                    do
                      v156 = __ldaxr(v153);
                    while (__stlxr(v156 - 1, v153));
                    if (!v156)
                    {
                      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                      std::__shared_weak_count::__release_weak(v152);
                    }
                  }
                  else
                  {
                    v155 = lessThan((_QWORD *)v149, (_QWORD **)&v353);
                  }
                  if (!*((_QWORD *)&v149 + 1))
                    goto LABEL_250;
                  v157 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                  do
                    v158 = __ldaxr(v157);
                  while (__stlxr(v158 - 1, v157));
                  if (!v158)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
                    if (v155)
                      break;
                  }
                  else
                  {
LABEL_250:
                    if (v155)
                      break;
                  }
                }
              }
              v112 = (__int128 *)v345;
              if ((unint64_t)v7 < v345)
              {
                v112 = (__int128 *)v345;
                do
                {
                  v113 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v114 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v115 = __ldxr(v114);
                    while (__stxr(v115 + 1, v114));
                  }
                  *(_QWORD *)&v353 = *((_QWORD *)v112 - 2);
                  v116 = (std::__shared_weak_count *)*((_QWORD *)v112 - 1);
                  *((_QWORD *)&v353 + 1) = v116;
                  if (v116)
                  {
                    v117 = (unint64_t *)&v116->__shared_owners_;
                    do
                      v118 = __ldxr(v117);
                    while (__stxr(v118 + 1, v117));
                    v119 = lessThan((_QWORD *)v113, (_QWORD **)&v353);
                    do
                      v120 = __ldaxr(v117);
                    while (__stlxr(v120 - 1, v117));
                    if (!v120)
                    {
                      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                      std::__shared_weak_count::__release_weak(v116);
                    }
                  }
                  else
                  {
                    v119 = lessThan((_QWORD *)v113, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v113 + 1))
                  {
                    v121 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v113 + 1) + 16))(*((_QWORD *)&v113 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v113 + 1));
                    }
                  }
                  --v112;
                }
                while (v119);
              }
              while (v7 < v112)
              {
                v123 = *(_QWORD *)v7;
                *(_QWORD *)v7 = *(_QWORD *)v112;
                *(_QWORD *)v112 = v123;
                v124 = *((_QWORD *)v7 + 1);
                *((_QWORD *)v7 + 1) = *((_QWORD *)v112 + 1);
                *((_QWORD *)v112 + 1) = v124;
                do
                {
                  v125 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v126 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v127 = __ldxr(v126);
                    while (__stxr(v127 + 1, v126));
                  }
                  v128 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v7 + 2);
                  *((_QWORD *)&v353 + 1) = v128;
                  if (v128)
                  {
                    v129 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v130 = __ldxr(v129);
                    while (__stxr(v130 + 1, v129));
                    v131 = lessThan((_QWORD *)v125, (_QWORD **)&v353);
                    do
                      v132 = __ldaxr(v129);
                    while (__stlxr(v132 - 1, v129));
                    if (!v132)
                    {
                      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                      std::__shared_weak_count::__release_weak(v128);
                    }
                  }
                  else
                  {
                    v131 = lessThan((_QWORD *)v125, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v125 + 1))
                  {
                    v133 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
                    do
                      v134 = __ldaxr(v133);
                    while (__stlxr(v134 - 1, v133));
                    if (!v134)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v125 + 1) + 16))(*((_QWORD *)&v125 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v125 + 1));
                    }
                  }
                  ++v7;
                }
                while (!v131);
                do
                {
                  v135 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v136 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v137 = __ldxr(v136);
                    while (__stxr(v137 + 1, v136));
                  }
                  *(_QWORD *)&v353 = *((_QWORD *)v112 - 2);
                  v138 = (std::__shared_weak_count *)*((_QWORD *)v112 - 1);
                  *((_QWORD *)&v353 + 1) = v138;
                  if (v138)
                  {
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldxr(v139);
                    while (__stxr(v140 + 1, v139));
                    v141 = lessThan((_QWORD *)v135, (_QWORD **)&v353);
                    do
                      v142 = __ldaxr(v139);
                    while (__stlxr(v142 - 1, v139));
                    if (!v142)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                  else
                  {
                    v141 = lessThan((_QWORD *)v135, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v135 + 1))
                  {
                    v143 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
                    do
                      v144 = __ldaxr(v143);
                    while (__stlxr(v144 - 1, v143));
                    if (!v144)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v135 + 1) + 16))(*((_QWORD *)&v135 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v135 + 1));
                    }
                  }
                  --v112;
                }
                while (v141);
              }
              if (v7 - 1 != v350)
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v350, v7 - 1);
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v7 - 1), &v352);
              v145 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              a2 = v345;
              if (*((_QWORD *)&v352 + 1))
              {
                v146 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                if (!v147)
                {
                  ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                  std::__shared_weak_count::__release_weak(v145);
                }
              }
              a4 = 0;
              continue;
            }
          }
          v352 = *v350;
          *(_QWORD *)v350 = 0;
          *((_QWORD *)v350 + 1) = 0;
          v25 = v350;
          do
          {
            while (1)
            {
              v26 = v25;
              v27 = (_QWORD *)*((_QWORD *)v25 + 2);
              v28 = (std::__shared_weak_count *)*((_QWORD *)v25++ + 3);
              if (v28)
              {
                v29 = (unint64_t *)&v28->__shared_owners_;
                do
                  v30 = __ldxr(v29);
                while (__stxr(v30 + 1, v29));
              }
              v31 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v32 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v33 = __ldxr(v32);
                while (__stxr(v33 + 1, v32));
                v34 = lessThan(v27, (_QWORD **)&v353);
                do
                  v35 = __ldaxr(v32);
                while (__stlxr(v35 - 1, v32));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
              else
              {
                v34 = lessThan(v27, (_QWORD **)&v353);
              }
              if (v28)
              {
                v36 = (unint64_t *)&v28->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                  break;
              }
              if (!v34)
                goto LABEL_45;
            }
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          while (v34);
LABEL_45:
          v38 = (__int128 *)v345;
          if (v26 == v350)
          {
            v38 = (__int128 *)v345;
            do
            {
              if (v25 >= v38)
                break;
              v50 = (_QWORD *)*((_QWORD *)v38 - 2);
              v51 = (std::__shared_weak_count *)*((_QWORD *)v38-- - 1);
              if (v51)
              {
                v52 = (unint64_t *)&v51->__shared_owners_;
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }
              v54 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v55 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v56 = __ldxr(v55);
                while (__stxr(v56 + 1, v55));
                v57 = lessThan(v50, (_QWORD **)&v353);
                do
                  v58 = __ldaxr(v55);
                while (__stlxr(v58 - 1, v55));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              else
              {
                v57 = lessThan(v50, (_QWORD **)&v353);
              }
              if (v51)
              {
                v59 = (unint64_t *)&v51->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
            }
            while (!v57);
          }
          else
          {
            do
            {
              while (1)
              {
                v39 = (_QWORD *)*((_QWORD *)v38 - 2);
                v40 = (std::__shared_weak_count *)*((_QWORD *)v38-- - 1);
                if (v40)
                {
                  v41 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                v43 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                v353 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v44 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v45 = __ldxr(v44);
                  while (__stxr(v45 + 1, v44));
                  v46 = lessThan(v39, (_QWORD **)&v353);
                  do
                    v47 = __ldaxr(v44);
                  while (__stlxr(v47 - 1, v44));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                    std::__shared_weak_count::__release_weak(v43);
                  }
                }
                else
                {
                  v46 = lessThan(v39, (_QWORD **)&v353);
                }
                if (v40)
                {
                  v48 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                    break;
                }
                if (v46)
                  goto LABEL_84;
              }
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
            while (!v46);
          }
LABEL_84:
          if (v25 < v38)
          {
            v61 = v25;
            v62 = v38;
            do
            {
              v63 = *(_QWORD *)v61;
              *(_QWORD *)v61 = *(_QWORD *)v62;
              *(_QWORD *)v62 = v63;
              v64 = *((_QWORD *)v61 + 1);
              *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
              *((_QWORD *)v62 + 1) = v64;
              do
              {
                while (1)
                {
                  v26 = v61;
                  v65 = (_QWORD *)*((_QWORD *)v61 + 2);
                  v66 = (std::__shared_weak_count *)*((_QWORD *)v61++ + 3);
                  if (v66)
                  {
                    v67 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v68 = __ldxr(v67);
                    while (__stxr(v68 + 1, v67));
                  }
                  v69 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  v353 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v70 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v71 = __ldxr(v70);
                    while (__stxr(v71 + 1, v70));
                    v72 = lessThan(v65, (_QWORD **)&v353);
                    do
                      v73 = __ldaxr(v70);
                    while (__stlxr(v73 - 1, v70));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                  else
                  {
                    v72 = lessThan(v65, (_QWORD **)&v353);
                  }
                  if (v66)
                  {
                    v74 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                      break;
                  }
                  if (!v72)
                    goto LABEL_107;
                }
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
              while (v72);
              do
              {
                while (1)
                {
LABEL_107:
                  v76 = (_QWORD *)*((_QWORD *)v62 - 2);
                  v77 = (std::__shared_weak_count *)*((_QWORD *)v62-- - 1);
                  if (v77)
                  {
                    v78 = (unint64_t *)&v77->__shared_owners_;
                    do
                      v79 = __ldxr(v78);
                    while (__stxr(v79 + 1, v78));
                  }
                  v80 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  v353 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v81 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v82 = __ldxr(v81);
                    while (__stxr(v82 + 1, v81));
                    v83 = lessThan(v76, (_QWORD **)&v353);
                    do
                      v84 = __ldaxr(v81);
                    while (__stlxr(v84 - 1, v81));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  else
                  {
                    v83 = lessThan(v76, (_QWORD **)&v353);
                  }
                  if (!v77)
                    break;
                  v85 = (unint64_t *)&v77->__shared_owners_;
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (v86)
                    break;
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                  if (v83)
                    goto LABEL_123;
                }
              }
              while (!v83);
LABEL_123:
              ;
            }
            while (v61 < v62);
          }
          a1 = v350;
          if (v26 != v350)
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v350, v26);
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v26, &v352);
          v87 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          a2 = v345;
          if (*((_QWORD *)&v352 + 1))
          {
            v88 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          if (v25 < v38)
          {
LABEL_134:
            std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*,false>(v350, v26, a3, a4 & 1);
            a4 = 0;
            v7 = v26 + 1;
            continue;
          }
          v90 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)v350, (uint64_t)v26);
          v7 = v26 + 1;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)(v26 + 1), v345))
          {
            if (v90)
              continue;
            goto LABEL_134;
          }
          a2 = (unint64_t)v26;
          if (v90)
            return;
          goto LABEL_1;
        }
        if (v8 == a2)
          return;
        v197 = (unint64_t)(v10 - 2) >> 1;
        v198 = v197;
        v344 = v9;
        v340 = v10;
        do
        {
          v199 = v198;
          if (v197 >= v198)
          {
            v200 = (2 * v198) | 1;
            v201 = &v350[v200];
            v202 = 2 * v198 + 2;
            v348 = v198;
            if (v202 < v10)
            {
              v203 = *v201;
              v204 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
              if (v204)
              {
                v205 = (unint64_t *)&v204->__shared_owners_;
                do
                  v206 = __ldxr(v205);
                while (__stxr(v206 + 1, v205));
              }
              *(_QWORD *)&v353 = *((_QWORD *)v201 + 2);
              v207 = (std::__shared_weak_count *)*((_QWORD *)v201 + 3);
              *((_QWORD *)&v353 + 1) = v207;
              if (v207)
              {
                v208 = (unint64_t *)&v207->__shared_owners_;
                do
                  v209 = __ldxr(v208);
                while (__stxr(v209 + 1, v208));
                v210 = lessThan((_QWORD *)v203, (_QWORD **)&v353);
                do
                  v211 = __ldaxr(v208);
                while (__stlxr(v211 - 1, v208));
                if (!v211)
                {
                  ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                  std::__shared_weak_count::__release_weak(v207);
                }
              }
              else
              {
                v210 = lessThan((_QWORD *)v203, (_QWORD **)&v353);
              }
              if (v204)
              {
                v212 = (unint64_t *)&v204->__shared_owners_;
                do
                  v213 = __ldaxr(v212);
                while (__stlxr(v213 - 1, v212));
                if (!v213)
                {
                  ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                  std::__shared_weak_count::__release_weak(v204);
                }
              }
              if (v210)
              {
                ++v201;
                v200 = v202;
              }
              v199 = v348;
            }
            v214 = *(_QWORD **)v201;
            v215 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
            if (v215)
            {
              v216 = (unint64_t *)&v215->__shared_owners_;
              do
                v217 = __ldxr(v216);
              while (__stxr(v217 + 1, v216));
            }
            v218 = (uint64_t)&v350[v199];
            v219 = *(_OWORD *)v218;
            v353 = v219;
            v220 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
            if (*((_QWORD *)&v219 + 1))
            {
              v221 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
              do
                v222 = __ldxr(v221);
              while (__stxr(v222 + 1, v221));
              v223 = lessThan(v214, (_QWORD **)&v353);
              do
                v224 = __ldaxr(v221);
              while (__stlxr(v224 - 1, v221));
              if (!v224)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
            }
            else
            {
              v223 = lessThan(v214, (_QWORD **)&v353);
            }
            if (v215)
            {
              v225 = (unint64_t *)&v215->__shared_owners_;
              do
                v226 = __ldaxr(v225);
              while (__stlxr(v226 - 1, v225));
              if (!v226)
              {
                ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                std::__shared_weak_count::__release_weak(v215);
              }
            }
            v9 = v344;
            v199 = v348;
            if (!v223)
            {
              v352 = *(_OWORD *)v218;
              *(_QWORD *)v218 = 0;
              *(_QWORD *)(v218 + 8) = 0;
              while (1)
              {
                v227 = (uint64_t)v201;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v218, v201);
                if (v197 < v200)
                {
LABEL_401:
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v227, &v352);
                  v252 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v253 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v254 = __ldaxr(v253);
                    while (__stlxr(v254 - 1, v253));
                    if (!v254)
                    {
                      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                      std::__shared_weak_count::__release_weak(v252);
                    }
                  }
                  v9 = v344;
                  v199 = v348;
                  goto LABEL_407;
                }
                v228 = (2 * v200) | 1;
                v201 = &v350[v228];
                v200 = 2 * v200 + 2;
                if (v200 < v10)
                  break;
                v200 = v228;
LABEL_384:
                v241 = *(_QWORD **)v201;
                v242 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
                if (v242)
                {
                  v243 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v244 = __ldxr(v243);
                  while (__stxr(v244 + 1, v243));
                }
                v245 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                v353 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v246 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v247 = __ldxr(v246);
                  while (__stxr(v247 + 1, v246));
                  v248 = lessThan(v241, (_QWORD **)&v353);
                  do
                    v249 = __ldaxr(v246);
                  while (__stlxr(v249 - 1, v246));
                  if (!v249)
                  {
                    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                    std::__shared_weak_count::__release_weak(v245);
                  }
                }
                else
                {
                  v248 = lessThan(v241, (_QWORD **)&v353);
                }
                if (v242)
                {
                  v250 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v251 = __ldaxr(v250);
                  while (__stlxr(v251 - 1, v250));
                  if (!v251)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                  }
                }
                v218 = v227;
                if (v248)
                  goto LABEL_401;
              }
              v229 = *v201;
              v230 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
              if (v230)
              {
                v231 = (unint64_t *)&v230->__shared_owners_;
                do
                  v232 = __ldxr(v231);
                while (__stxr(v232 + 1, v231));
              }
              *(_QWORD *)&v353 = *((_QWORD *)v201 + 2);
              v233 = (std::__shared_weak_count *)*((_QWORD *)v201 + 3);
              *((_QWORD *)&v353 + 1) = v233;
              if (v233)
              {
                v234 = v197;
                v235 = (unint64_t *)&v233->__shared_owners_;
                do
                  v236 = __ldxr(v235);
                while (__stxr(v236 + 1, v235));
                v237 = lessThan((_QWORD *)v229, (_QWORD **)&v353);
                do
                  v238 = __ldaxr(v235);
                while (__stlxr(v238 - 1, v235));
                if (!v238)
                {
                  ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                  std::__shared_weak_count::__release_weak(v233);
                }
                v197 = v234;
                v10 = v340;
                if (!v230)
                  goto LABEL_381;
              }
              else
              {
                v237 = lessThan((_QWORD *)v229, (_QWORD **)&v353);
                if (!v230)
                {
LABEL_381:
                  if (v237)
                    ++v201;
                  else
                    v200 = v228;
                  goto LABEL_384;
                }
              }
              v239 = (unint64_t *)&v230->__shared_owners_;
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                std::__shared_weak_count::__release_weak(v230);
              }
              goto LABEL_381;
            }
          }
LABEL_407:
          v198 = v199 - 1;
        }
        while (v199);
        v255 = (unint64_t)v9 >> 4;
        v256 = v345;
        v257 = v350;
        do
        {
          if (v255 < 2)
            goto LABEL_483;
          v346 = v256;
          v349 = v255;
          v258 = 0;
          v351 = *v257;
          *(_QWORD *)v257 = 0;
          *((_QWORD *)v257 + 1) = 0;
          v259 = (unint64_t)(v255 - 2) >> 1;
          v260 = (uint64_t)v257;
          do
          {
            v261 = v260 + 16 * v258 + 16;
            v262 = (2 * v258) | 1;
            v263 = 2 * v258 + 2;
            if (v263 >= v255)
              goto LABEL_431;
            v264 = *(_OWORD *)v261;
            v265 = *(std::__shared_weak_count **)(v260 + 16 * v258 + 24);
            if (v265)
            {
              v266 = (unint64_t *)&v265->__shared_owners_;
              do
                v267 = __ldxr(v266);
              while (__stxr(v267 + 1, v266));
            }
            *(_QWORD *)&v353 = *(_QWORD *)(v261 + 16);
            v268 = *(std::__shared_weak_count **)(v261 + 24);
            *((_QWORD *)&v353 + 1) = v268;
            if (v268)
            {
              v269 = (unint64_t *)&v268->__shared_owners_;
              do
                v270 = __ldxr(v269);
              while (__stxr(v270 + 1, v269));
              v271 = lessThan((_QWORD *)v264, (_QWORD **)&v353);
              do
                v272 = __ldaxr(v269);
              while (__stlxr(v272 - 1, v269));
              if (!v272)
              {
                ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                std::__shared_weak_count::__release_weak(v268);
              }
              v255 = v349;
              if (!v265)
                goto LABEL_429;
LABEL_425:
              v273 = (unint64_t *)&v265->__shared_owners_;
              do
                v274 = __ldaxr(v273);
              while (__stlxr(v274 - 1, v273));
              if (!v274)
              {
                ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                std::__shared_weak_count::__release_weak(v265);
              }
              goto LABEL_429;
            }
            v271 = lessThan((_QWORD *)v264, (_QWORD **)&v353);
            if (v265)
              goto LABEL_425;
LABEL_429:
            if (v271)
            {
              v261 += 16;
              v262 = v263;
            }
LABEL_431:
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v260, (__int128 *)v261);
            v260 = v261;
            v258 = v262;
          }
          while (v262 <= v259);
          v256 = v346;
          if (v261 == v346 - 16)
          {
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, &v351);
            v257 = v350;
            goto LABEL_478;
          }
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, (__int128 *)(v346 - 16));
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v346 - 16, &v351);
          v257 = v350;
          v275 = v261 - (_QWORD)v350 + 16;
          if (v275 < 17)
            goto LABEL_478;
          v276 = (unint64_t)((v275 >> 4) - 2) >> 1;
          v277 = &v350[v276];
          v278 = *v277;
          v279 = (std::__shared_weak_count *)*((_QWORD *)v277 + 1);
          if (v279)
          {
            v280 = (unint64_t *)&v279->__shared_owners_;
            do
              v281 = __ldxr(v280);
            while (__stxr(v281 + 1, v280));
          }
          *(_QWORD *)&v353 = *(_QWORD *)v261;
          v282 = *(std::__shared_weak_count **)(v261 + 8);
          *((_QWORD *)&v353 + 1) = v282;
          if (!v282)
          {
            v285 = lessThan((_QWORD *)v278, (_QWORD **)&v353);
            if (!v279)
              goto LABEL_452;
LABEL_448:
            v287 = (unint64_t *)&v279->__shared_owners_;
            do
              v288 = __ldaxr(v287);
            while (__stlxr(v288 - 1, v287));
            if (!v288)
            {
              ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
              std::__shared_weak_count::__release_weak(v279);
            }
            goto LABEL_452;
          }
          v283 = (unint64_t *)&v282->__shared_owners_;
          do
            v284 = __ldxr(v283);
          while (__stxr(v284 + 1, v283));
          v285 = lessThan((_QWORD *)v278, (_QWORD **)&v353);
          do
            v286 = __ldaxr(v283);
          while (__stlxr(v286 - 1, v283));
          if (!v286)
          {
            ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
            std::__shared_weak_count::__release_weak(v282);
          }
          v255 = v349;
          if (v279)
            goto LABEL_448;
LABEL_452:
          if (!v285)
            goto LABEL_478;
          v352 = *(_OWORD *)v261;
          *(_QWORD *)v261 = 0;
          *(_QWORD *)(v261 + 8) = 0;
          while (2)
          {
            v289 = (uint64_t)v277;
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, v277);
            if (v276)
            {
              v276 = (v276 - 1) >> 1;
              v277 = &v350[v276];
              v290 = *v277;
              v291 = (std::__shared_weak_count *)*((_QWORD *)v277 + 1);
              if (v291)
              {
                v292 = (unint64_t *)&v291->__shared_owners_;
                do
                  v293 = __ldxr(v292);
                while (__stxr(v293 + 1, v292));
              }
              v294 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v295 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v296 = __ldxr(v295);
                while (__stxr(v296 + 1, v295));
                v297 = lessThan((_QWORD *)v290, (_QWORD **)&v353);
                do
                  v298 = __ldaxr(v295);
                while (__stlxr(v298 - 1, v295));
                if (!v298)
                {
                  ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                  std::__shared_weak_count::__release_weak(v294);
                }
                v255 = v349;
                if (!v291)
                {
LABEL_472:
                  v261 = v289;
                  if (!v297)
                    break;
                  continue;
                }
              }
              else
              {
                v297 = lessThan((_QWORD *)v290, (_QWORD **)&v353);
                if (!v291)
                  goto LABEL_472;
              }
              v299 = (unint64_t *)&v291->__shared_owners_;
              do
                v300 = __ldaxr(v299);
              while (__stlxr(v300 - 1, v299));
              if (!v300)
              {
                ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                std::__shared_weak_count::__release_weak(v291);
              }
              goto LABEL_472;
            }
            break;
          }
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v289, &v352);
          v301 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          if (*((_QWORD *)&v352 + 1))
          {
            v302 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v303 = __ldaxr(v302);
            while (__stlxr(v303 - 1, v302));
            if (!v303)
            {
              ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
              std::__shared_weak_count::__release_weak(v301);
            }
          }
LABEL_478:
          v304 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
          if (*((_QWORD *)&v351 + 1))
          {
            v305 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
            do
              v306 = __ldaxr(v305);
            while (__stlxr(v306 - 1, v305));
            if (!v306)
            {
              ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
              std::__shared_weak_count::__release_weak(v304);
            }
          }
LABEL_483:
          v256 -= 16;
        }
        while ((unint64_t)v255-- > 2);
        return;
    }
  }
}

  v417 = (uint64_t)(a2 - 32);
  v419 = (uint64_t)(a2 - 16);
  v416 = (uint64_t)(a2 - 48);
  v7 = (__int128 *)a1;
  v421 = (uint64_t)a2;
  while (2)
  {
    a1 = (uint64_t)v7;
    v8 = a2 - (char *)v7;
    v9 = (a2 - (char *)v7) >> 4;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v192 = (uint64_t *)*((_QWORD *)a2 - 2);
        v193 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
        if (v193)
        {
          p_shared_owners = (unint64_t *)&v193->__shared_owners_;
          do
            v195 = __ldxr(p_shared_owners);
          while (__stxr(v195 + 1, p_shared_owners));
        }
        v196 = *(uint64_t **)a1;
        v197 = *(std::__shared_weak_count **)(a1 + 8);
        if (v197)
        {
          v198 = (unint64_t *)&v197->__shared_owners_;
          do
            v199 = __ldxr(v198);
          while (__stxr(v199 + 1, v198));
        }
        v200 = 0;
        if (v192 && v196)
        {
          v201 = *v192;
          v200 = v201 && (v202 = *v196) != 0 && *(double *)(v201 + 28) < *(double *)(v202 + 28);
        }
        if (v197)
        {
          v410 = (unint64_t *)&v197->__shared_owners_;
          do
            v411 = __ldaxr(v410);
          while (__stlxr(v411 - 1, v410));
          if (!v411)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
        if (v193)
        {
          v412 = (unint64_t *)&v193->__shared_owners_;
          do
            v413 = __ldaxr(v412);
          while (__stlxr(v413 - 1, v412));
          if (!v413)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
        }
        if (v200)
        {
          v414 = *(uint64_t **)a1;
          *(_QWORD *)a1 = *(_QWORD *)(v421 - 16);
          *(_QWORD *)(v421 - 16) = v414;
          v415 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(v421 - 8);
          *(_QWORD *)(v421 - 8) = v415;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(a1, a1 + 16, v419);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t **)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), v419);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(a1, a1 + 16, a1 + 32, (uint64_t **)(a1 + 48), v419);
        return;
      default:
        if (v8 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if ((char *)a1 == a2)
              return;
            v203 = a1 + 16;
            if ((char *)(a1 + 16) == a2)
              return;
            v204 = a1;
            while (1)
            {
              v205 = v203;
              v206 = *(uint64_t **)(v204 + 16);
              v207 = *(std::__shared_weak_count **)(v204 + 24);
              if (v207)
              {
                v208 = (unint64_t *)&v207->__shared_owners_;
                do
                  v209 = __ldxr(v208);
                while (__stxr(v209 + 1, v208));
              }
              v210 = *(uint64_t **)v204;
              v211 = *(std::__shared_weak_count **)(v204 + 8);
              if (v211)
              {
                v212 = (unint64_t *)&v211->__shared_owners_;
                do
                  v213 = __ldxr(v212);
                while (__stxr(v213 + 1, v212));
              }
              v214 = 0;
              if (v206 && v210)
              {
                v215 = *v206;
                v214 = v215 && (v216 = *v210) != 0 && *(double *)(v215 + 28) < *(double *)(v216 + 28);
              }
              if (v211)
              {
                v217 = (unint64_t *)&v211->__shared_owners_;
                do
                  v218 = __ldaxr(v217);
                while (__stlxr(v218 - 1, v217));
                if (!v218)
                {
                  ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                  std::__shared_weak_count::__release_weak(v211);
                }
              }
              if (!v207)
                goto LABEL_372;
              v219 = (unint64_t *)&v207->__shared_owners_;
              do
                v220 = __ldaxr(v219);
              while (__stlxr(v220 - 1, v219));
              if (!v220)
              {
                ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                std::__shared_weak_count::__release_weak(v207);
                if (!v214)
                  goto LABEL_407;
              }
              else
              {
LABEL_372:
                if (!v214)
                  goto LABEL_407;
              }
              v425 = *(_OWORD *)v205;
              *(_QWORD *)v205 = 0;
              *(_QWORD *)(v205 + 8) = 0;
              v221 = v205;
              while (1)
              {
                v222 = v221;
                v221 = v204;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v222, (__int128 *)v204);
                if (v204 == a1)
                  break;
                v223 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v224 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v225 = __ldxr(v224);
                  while (__stxr(v225 + 1, v224));
                }
                v226 = *(uint64_t **)(v204 - 16);
                v227 = *(std::__shared_weak_count **)(v204 - 8);
                if (v227)
                {
                  v228 = (unint64_t *)&v227->__shared_owners_;
                  do
                    v229 = __ldxr(v228);
                  while (__stxr(v229 + 1, v228));
                }
                v230 = 0;
                if (!(_QWORD)v223 || !v226)
                  goto LABEL_386;
                if (*(_QWORD *)v223)
                {
                  v231 = *v226;
                  if (v231)
                  {
                    v230 = *(double *)(*(_QWORD *)v223 + 28) < *(double *)(v231 + 28);
LABEL_386:
                    if (!v227)
                      goto LABEL_392;
                    goto LABEL_389;
                  }
                }
                v230 = 0;
                if (!v227)
                  goto LABEL_392;
LABEL_389:
                v232 = (unint64_t *)&v227->__shared_owners_;
                do
                  v233 = __ldaxr(v232);
                while (__stlxr(v233 - 1, v232));
                if (v233)
                {
LABEL_392:
                  if (*((_QWORD *)&v223 + 1))
                    goto LABEL_393;
                  goto LABEL_398;
                }
                ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                std::__shared_weak_count::__release_weak(v227);
                if (*((_QWORD *)&v223 + 1))
                {
LABEL_393:
                  v234 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
                  do
                    v235 = __ldaxr(v234);
                  while (__stlxr(v235 - 1, v234));
                  if (!v235)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v223 + 1) + 16))(*((_QWORD *)&v223 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v223 + 1));
                  }
                }
LABEL_398:
                v204 -= 16;
                if (!v230)
                  goto LABEL_401;
              }
              v221 = a1;
LABEL_401:
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v221, &v425);
              v236 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
              if (*((_QWORD *)&v425 + 1))
              {
                v237 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                do
                  v238 = __ldaxr(v237);
                while (__stlxr(v238 - 1, v237));
                if (!v238)
                {
                  ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                  std::__shared_weak_count::__release_weak(v236);
                }
              }
LABEL_407:
              v203 = v205 + 16;
              v204 = v205;
              if (v205 + 16 == v421)
                return;
            }
          }
          if ((char *)a1 == a2)
            return;
          v374 = a1 + 16;
          if ((char *)(a1 + 16) == a2)
            return;
          while (1)
          {
            v375 = v374;
            v376 = (__int128 *)a1;
            v377 = *(uint64_t **)(a1 + 16);
            v378 = *(std::__shared_weak_count **)(a1 + 24);
            if (v378)
            {
              v379 = (unint64_t *)&v378->__shared_owners_;
              do
                v380 = __ldxr(v379);
              while (__stxr(v380 + 1, v379));
            }
            v381 = *(uint64_t **)a1;
            v382 = *(std::__shared_weak_count **)(a1 + 8);
            if (v382)
            {
              v383 = (unint64_t *)&v382->__shared_owners_;
              do
                v384 = __ldxr(v383);
              while (__stxr(v384 + 1, v383));
            }
            v385 = 0;
            if (v377 && v381)
            {
              v386 = *v377;
              v385 = v386 && (v387 = *v381) != 0 && *(double *)(v386 + 28) < *(double *)(v387 + 28);
            }
            if (v382)
            {
              v388 = (unint64_t *)&v382->__shared_owners_;
              do
                v389 = __ldaxr(v388);
              while (__stlxr(v389 - 1, v388));
              if (!v389)
              {
                ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                std::__shared_weak_count::__release_weak(v382);
              }
            }
            if (v378)
            {
              v390 = (unint64_t *)&v378->__shared_owners_;
              do
                v391 = __ldaxr(v390);
              while (__stlxr(v391 - 1, v390));
              if (!v391)
                break;
            }
            if (v385)
              goto LABEL_639;
LABEL_670:
            v374 = v375 + 16;
            a1 = v375;
            if (v375 + 16 == v421)
              return;
          }
          ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
          std::__shared_weak_count::__release_weak(v378);
          if (!v385)
            goto LABEL_670;
LABEL_639:
          v425 = *(_OWORD *)v375;
          *(_QWORD *)v375 = 0;
          *(_QWORD *)(v375 + 8) = 0;
          v392 = v375;
          while (1)
          {
            v393 = v392;
            v392 = (uint64_t)v376;
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v393, v376);
            v394 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v395 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v396 = __ldxr(v395);
              while (__stxr(v396 + 1, v395));
            }
            v397 = (uint64_t *)*((_QWORD *)v376 - 2);
            v398 = (std::__shared_weak_count *)*((_QWORD *)v376 - 1);
            if (v398)
            {
              v399 = (unint64_t *)&v398->__shared_owners_;
              do
                v400 = __ldxr(v399);
              while (__stxr(v400 + 1, v399));
            }
            v401 = 0;
            if (!(_QWORD)v394 || !v397)
              goto LABEL_651;
            if (*(_QWORD *)v394)
            {
              v402 = *v397;
              if (v402)
                break;
            }
            v401 = 0;
            if (!v398)
              goto LABEL_657;
LABEL_654:
            v403 = (unint64_t *)&v398->__shared_owners_;
            do
              v404 = __ldaxr(v403);
            while (__stlxr(v404 - 1, v403));
            if (v404)
            {
LABEL_657:
              if (*((_QWORD *)&v394 + 1))
                goto LABEL_658;
              goto LABEL_663;
            }
            ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
            std::__shared_weak_count::__release_weak(v398);
            if (*((_QWORD *)&v394 + 1))
            {
LABEL_658:
              v405 = (unint64_t *)(*((_QWORD *)&v394 + 1) + 8);
              do
                v406 = __ldaxr(v405);
              while (__stlxr(v406 - 1, v405));
              if (!v406)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v394 + 1) + 16))(*((_QWORD *)&v394 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v394 + 1));
              }
            }
LABEL_663:
            --v376;
            if (!v401)
            {
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v392, &v425);
              v407 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
              if (*((_QWORD *)&v425 + 1))
              {
                v408 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                do
                  v409 = __ldaxr(v408);
                while (__stlxr(v409 - 1, v408));
                if (!v409)
                {
                  ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                  std::__shared_weak_count::__release_weak(v407);
                }
              }
              goto LABEL_670;
            }
          }
          v401 = *(double *)(*(_QWORD *)v394 + 28) < *(double *)(v402 + 28);
LABEL_651:
          if (!v398)
            goto LABEL_657;
          goto LABEL_654;
        }
        if (!a3)
        {
          if ((char *)a1 == a2)
            return;
          v239 = (unint64_t)(v9 - 2) >> 1;
          v240 = v239;
          v420 = v8;
          do
          {
            v241 = v240;
            if (v239 >= v240)
            {
              v242 = (2 * v240) | 1;
              v243 = a1 + 16 * v242;
              v244 = 2 * v240 + 2;
              if (v244 < v9)
              {
                v245 = *(uint64_t **)v243;
                v246 = *(std::__shared_weak_count **)(v243 + 8);
                if (v246)
                {
                  v247 = (unint64_t *)&v246->__shared_owners_;
                  do
                    v248 = __ldxr(v247);
                  while (__stxr(v248 + 1, v247));
                }
                v249 = *(uint64_t **)(v243 + 16);
                v250 = *(std::__shared_weak_count **)(v243 + 24);
                if (v250)
                {
                  v251 = (unint64_t *)&v250->__shared_owners_;
                  do
                    v252 = __ldxr(v251);
                  while (__stxr(v252 + 1, v251));
                }
                v253 = 0;
                if (v245 && v249)
                {
                  v254 = *v245;
                  v253 = v254 && (v255 = *v249) != 0 && *(double *)(v254 + 28) < *(double *)(v255 + 28);
                }
                if (v250)
                {
                  v256 = (unint64_t *)&v250->__shared_owners_;
                  do
                    v257 = __ldaxr(v256);
                  while (__stlxr(v257 - 1, v256));
                  if (!v257)
                  {
                    v258 = v241;
                    ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                    std::__shared_weak_count::__release_weak(v250);
                    v241 = v258;
                    v8 = v420;
                  }
                }
                if (v246)
                {
                  v259 = (unint64_t *)&v246->__shared_owners_;
                  do
                    v260 = __ldaxr(v259);
                  while (__stlxr(v260 - 1, v259));
                  if (!v260)
                  {
                    v261 = v241;
                    ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                    std::__shared_weak_count::__release_weak(v246);
                    v241 = v261;
                    v8 = v420;
                  }
                }
                if (v253)
                {
                  v243 += 16;
                  v242 = v244;
                }
              }
              v262 = *(uint64_t **)v243;
              v263 = *(std::__shared_weak_count **)(v243 + 8);
              if (v263)
              {
                v264 = (unint64_t *)&v263->__shared_owners_;
                do
                  v265 = __ldxr(v264);
                while (__stxr(v265 + 1, v264));
              }
              v266 = (uint64_t **)(a1 + 16 * v241);
              v267 = *v266;
              v268 = (std::__shared_weak_count *)v266[1];
              if (v268)
              {
                v269 = (unint64_t *)&v268->__shared_owners_;
                do
                  v270 = __ldxr(v269);
                while (__stxr(v270 + 1, v269));
              }
              v271 = 0;
              if (v262 && v267)
              {
                v272 = *v262;
                v271 = v272 && (v273 = *v267) != 0 && *(double *)(v272 + 28) < *(double *)(v273 + 28);
              }
              if (v268)
              {
                v274 = (unint64_t *)&v268->__shared_owners_;
                do
                  v275 = __ldaxr(v274);
                while (__stlxr(v275 - 1, v274));
                if (!v275)
                {
                  v276 = v241;
                  ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                  std::__shared_weak_count::__release_weak(v268);
                  v241 = v276;
                  v8 = v420;
                }
              }
              if (v263)
              {
                v277 = (unint64_t *)&v263->__shared_owners_;
                do
                  v278 = __ldaxr(v277);
                while (__stlxr(v278 - 1, v277));
                if (!v278)
                {
                  v279 = v241;
                  ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                  std::__shared_weak_count::__release_weak(v263);
                  v241 = v279;
                  v8 = v420;
                }
              }
              a2 = (char *)v421;
              if (!v271)
              {
                v418 = v241;
                v425 = *(_OWORD *)v266;
                *v266 = 0;
                v266[1] = 0;
                while (1)
                {
                  v280 = v243;
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v266, (__int128 *)v243);
                  if (v239 < v242)
                  {
LABEL_514:
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v280, &v425);
                    v311 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
                    v241 = v418;
                    v8 = v420;
                    if (*((_QWORD *)&v425 + 1))
                    {
                      v312 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                      do
                        v313 = __ldaxr(v312);
                      while (__stlxr(v313 - 1, v312));
                      if (!v313)
                      {
                        ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                        std::__shared_weak_count::__release_weak(v311);
                        v241 = v418;
                        v8 = v420;
                      }
                    }
                    a2 = (char *)v421;
                    break;
                  }
                  v281 = (2 * v242) | 1;
                  v243 = a1 + 16 * v281;
                  v242 = 2 * v242 + 2;
                  if (v242 >= v9)
                  {
                    v242 = v281;
                    goto LABEL_490;
                  }
                  v282 = *(uint64_t **)v243;
                  v283 = *(std::__shared_weak_count **)(v243 + 8);
                  if (v283)
                  {
                    v284 = (unint64_t *)&v283->__shared_owners_;
                    do
                      v285 = __ldxr(v284);
                    while (__stxr(v285 + 1, v284));
                  }
                  v286 = v239;
                  v287 = *(uint64_t **)(v243 + 16);
                  v288 = *(std::__shared_weak_count **)(v243 + 24);
                  if (v288)
                  {
                    v289 = (unint64_t *)&v288->__shared_owners_;
                    do
                      v290 = __ldxr(v289);
                    while (__stxr(v290 + 1, v289));
                  }
                  v291 = 0;
                  if (v282 && v287)
                  {
                    v292 = *v282;
                    v291 = v292 && (v293 = *v287) != 0 && *(double *)(v292 + 28) < *(double *)(v293 + 28);
                  }
                  if (!v288)
                    goto LABEL_480;
                  v294 = (unint64_t *)&v288->__shared_owners_;
                  do
                    v295 = __ldaxr(v294);
                  while (__stlxr(v295 - 1, v294));
                  if (!v295)
                  {
                    ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                    std::__shared_weak_count::__release_weak(v288);
                    if (v283)
                    {
LABEL_481:
                      v296 = (unint64_t *)&v283->__shared_owners_;
                      do
                        v297 = __ldaxr(v296);
                      while (__stlxr(v297 - 1, v296));
                      if (!v297)
                      {
                        ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                        std::__shared_weak_count::__release_weak(v283);
                      }
                    }
                  }
                  else
                  {
LABEL_480:
                    if (v283)
                      goto LABEL_481;
                  }
                  if (v291)
                    v243 += 16;
                  else
                    v242 = v281;
                  v239 = v286;
LABEL_490:
                  v298 = *(uint64_t **)v243;
                  v299 = *(std::__shared_weak_count **)(v243 + 8);
                  if (v299)
                  {
                    v300 = (unint64_t *)&v299->__shared_owners_;
                    do
                      v301 = __ldxr(v300);
                    while (__stxr(v301 + 1, v300));
                  }
                  v302 = v425;
                  if (*((_QWORD *)&v425 + 1))
                  {
                    v303 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                    do
                      v304 = __ldxr(v303);
                    while (__stxr(v304 + 1, v303));
                  }
                  v305 = 0;
                  if (!v298 || !(_QWORD)v302)
                    goto LABEL_501;
                  v306 = *v298;
                  if (v306 && *(_QWORD *)v302)
                  {
                    v305 = *(double *)(v306 + 28) < *(double *)(*(_QWORD *)v302 + 28);
LABEL_501:
                    if (!*((_QWORD *)&v302 + 1))
                      goto LABEL_507;
                    goto LABEL_504;
                  }
                  v305 = 0;
                  if (!*((_QWORD *)&v302 + 1))
                    goto LABEL_507;
LABEL_504:
                  v307 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
                  do
                    v308 = __ldaxr(v307);
                  while (__stlxr(v308 - 1, v307));
                  if (v308)
                  {
LABEL_507:
                    if (v299)
                      goto LABEL_508;
                    goto LABEL_513;
                  }
                  (*(void (**)(_QWORD))(**((_QWORD **)&v302 + 1) + 16))(*((_QWORD *)&v302 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v302 + 1));
                  if (v299)
                  {
LABEL_508:
                    v309 = (unint64_t *)&v299->__shared_owners_;
                    do
                      v310 = __ldaxr(v309);
                    while (__stlxr(v310 - 1, v309));
                    if (!v310)
                    {
                      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                      std::__shared_weak_count::__release_weak(v299);
                    }
                  }
LABEL_513:
                  v266 = (uint64_t **)v280;
                  if (v305)
                    goto LABEL_514;
                }
              }
            }
            v240 = v241 - 1;
          }
          while (v241);
          v314 = (unint64_t)v8 >> 4;
LABEL_522:
          if (v314 < 2)
            goto LABEL_613;
          v422 = a2;
          v315 = 0;
          v316 = a1;
          v424 = *(_OWORD *)a1;
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          while (1)
          {
            v317 = v316 + 16 * (v315 + 1);
            v318 = (2 * v315) | 1;
            v319 = 2 * v315 + 2;
            if (v319 < v314)
              break;
LABEL_550:
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v316, (__int128 *)v317);
            v316 = v317;
            v315 = v318;
            if (v318 > (uint64_t)((unint64_t)(v314 - 2) >> 1))
            {
              if ((char *)v317 == v422 - 16)
              {
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v317, &v424);
                goto LABEL_607;
              }
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v317, (__int128 *)v422 - 1);
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v422 - 16), &v424);
              v335 = v317 - a1 + 16;
              if (v335 >= 17)
              {
                v336 = (unint64_t)((v335 >> 4) - 2) >> 1;
                v337 = a1 + 16 * v336;
                v338 = *(uint64_t **)v337;
                v339 = *(std::__shared_weak_count **)(v337 + 8);
                if (v339)
                {
                  v340 = (unint64_t *)&v339->__shared_owners_;
                  do
                    v341 = __ldxr(v340);
                  while (__stxr(v341 + 1, v340));
                }
                v342 = *(uint64_t **)v317;
                v343 = *(std::__shared_weak_count **)(v317 + 8);
                if (v343)
                {
                  v344 = (unint64_t *)&v343->__shared_owners_;
                  do
                    v345 = __ldxr(v344);
                  while (__stxr(v345 + 1, v344));
                }
                v346 = 0;
                if (v338 && v342)
                {
                  v347 = *v338;
                  v346 = v347 && (v348 = *v342) != 0 && *(double *)(v347 + 28) < *(double *)(v348 + 28);
                }
                if (v343)
                {
                  v349 = (unint64_t *)&v343->__shared_owners_;
                  do
                    v350 = __ldaxr(v349);
                  while (__stlxr(v350 - 1, v349));
                  if (!v350)
                  {
                    ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                    std::__shared_weak_count::__release_weak(v343);
                  }
                }
                if (v339)
                {
                  v351 = (unint64_t *)&v339->__shared_owners_;
                  do
                    v352 = __ldaxr(v351);
                  while (__stlxr(v352 - 1, v351));
                  if (!v352)
                  {
                    ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                    std::__shared_weak_count::__release_weak(v339);
                  }
                }
                if (v346)
                {
                  v425 = *(_OWORD *)v317;
                  *(_QWORD *)v317 = 0;
                  *(_QWORD *)(v317 + 8) = 0;
                  while (1)
                  {
                    v353 = v337;
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v317, (__int128 *)v337);
                    if (!v336)
                    {
LABEL_602:
                      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v353, &v425);
                      v367 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
                      if (*((_QWORD *)&v425 + 1))
                      {
                        v368 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                        do
                          v369 = __ldaxr(v368);
                        while (__stlxr(v369 - 1, v368));
                        if (!v369)
                        {
                          ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                          std::__shared_weak_count::__release_weak(v367);
                        }
                      }
                      break;
                    }
                    v336 = (v336 - 1) >> 1;
                    v337 = a1 + 16 * v336;
                    v354 = *(uint64_t **)v337;
                    v355 = *(std::__shared_weak_count **)(v337 + 8);
                    if (v355)
                    {
                      v356 = (unint64_t *)&v355->__shared_owners_;
                      do
                        v357 = __ldxr(v356);
                      while (__stxr(v357 + 1, v356));
                    }
                    v358 = v425;
                    if (*((_QWORD *)&v425 + 1))
                    {
                      v359 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                      do
                        v360 = __ldxr(v359);
                      while (__stxr(v360 + 1, v359));
                    }
                    v361 = 0;
                    if (v354 && (_QWORD)v358)
                    {
                      v362 = *v354;
                      v361 = v362 && *(_QWORD *)v358 && *(double *)(v362 + 28) < *(double *)(*(_QWORD *)v358 + 28);
                    }
                    if (!*((_QWORD *)&v358 + 1))
                      goto LABEL_595;
                    v363 = (unint64_t *)(*((_QWORD *)&v358 + 1) + 8);
                    do
                      v364 = __ldaxr(v363);
                    while (__stlxr(v364 - 1, v363));
                    if (!v364)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v358 + 1) + 16))(*((_QWORD *)&v358 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v358 + 1));
                      if (v355)
                      {
LABEL_596:
                        v365 = (unint64_t *)&v355->__shared_owners_;
                        do
                          v366 = __ldaxr(v365);
                        while (__stlxr(v366 - 1, v365));
                        if (!v366)
                        {
                          ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
                          std::__shared_weak_count::__release_weak(v355);
                        }
                      }
                    }
                    else
                    {
LABEL_595:
                      if (v355)
                        goto LABEL_596;
                    }
                    v317 = v353;
                    if (!v361)
                      goto LABEL_602;
                  }
                }
              }
LABEL_607:
              v370 = (std::__shared_weak_count *)*((_QWORD *)&v424 + 1);
              if (*((_QWORD *)&v424 + 1))
              {
                v371 = (unint64_t *)(*((_QWORD *)&v424 + 1) + 8);
                do
                  v372 = __ldaxr(v371);
                while (__stlxr(v372 - 1, v371));
                if (!v372)
                {
                  ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
                  std::__shared_weak_count::__release_weak(v370);
                }
              }
              a2 = v422;
LABEL_613:
              a2 -= 16;
              if ((unint64_t)v314-- <= 2)
                return;
              goto LABEL_522;
            }
          }
          v320 = *(uint64_t **)v317;
          v321 = *(std::__shared_weak_count **)(v317 + 8);
          if (v321)
          {
            v322 = (unint64_t *)&v321->__shared_owners_;
            do
              v323 = __ldxr(v322);
            while (__stxr(v323 + 1, v322));
          }
          v324 = *(uint64_t **)(v317 + 16);
          v325 = *(std::__shared_weak_count **)(v317 + 24);
          if (v325)
          {
            v326 = (unint64_t *)&v325->__shared_owners_;
            do
              v327 = __ldxr(v326);
            while (__stxr(v327 + 1, v326));
          }
          v328 = 0;
          if (v320 && v324)
          {
            v329 = *v320;
            if (!v329 || (v330 = *v324) == 0)
            {
              v328 = 0;
              if (!v325)
                goto LABEL_542;
LABEL_539:
              v331 = (unint64_t *)&v325->__shared_owners_;
              do
                v332 = __ldaxr(v331);
              while (__stlxr(v332 - 1, v331));
              if (!v332)
              {
                ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                std::__shared_weak_count::__release_weak(v325);
                if (v321)
                  goto LABEL_543;
                goto LABEL_548;
              }
LABEL_542:
              if (v321)
              {
LABEL_543:
                v333 = (unint64_t *)&v321->__shared_owners_;
                do
                  v334 = __ldaxr(v333);
                while (__stlxr(v334 - 1, v333));
                if (!v334)
                {
                  ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                  std::__shared_weak_count::__release_weak(v321);
                }
              }
LABEL_548:
              if (v328)
              {
                v317 += 16;
                v318 = v319;
              }
              goto LABEL_550;
            }
            v328 = *(double *)(v329 + 28) < *(double *)(v330 + 28);
          }
          if (!v325)
            goto LABEL_542;
          goto LABEL_539;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = a1;
        v12 = (_OWORD *)(a1 + 16 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t)v12, a1, v419);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(a1, (uint64_t)v12, v419);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(a1 + 16, (uint64_t)(v12 - 1), v417);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(a1 + 32, a1 + 16 + 16 * v10, v416);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t)(v12 - 1), (uint64_t)v12, a1 + 16 + 16 * v10);
          v13 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v12;
          *v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *(uint64_t **)(a1 - 16);
          v15 = *(std::__shared_weak_count **)(a1 - 8);
          if (v15)
          {
            v16 = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v18 = *(uint64_t **)a1;
          v19 = *(std::__shared_weak_count **)(a1 + 8);
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v22 = 0;
          if (v14 && v18)
          {
            v23 = *v14;
            v22 = v23 && (v24 = *v18) != 0 && *(double *)(v23 + 28) < *(double *)(v24 + 28);
          }
          if (v19)
          {
            v25 = (unint64_t *)&v19->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          if (v15)
          {
            v27 = (unint64_t *)&v15->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          v11 = a1;
          if (!v22)
          {
            v105 = *(uint64_t **)a1;
            v106 = *(std::__shared_weak_count **)(a1 + 8);
            *(_QWORD *)&v425 = *(_QWORD *)a1;
            *((_QWORD *)&v425 + 1) = v106;
            *(_QWORD *)a1 = 0;
            *(_QWORD *)(a1 + 8) = 0;
            if (v106)
            {
              v107 = (unint64_t *)&v106->__shared_owners_;
              do
                v108 = __ldxr(v107);
              while (__stxr(v108 + 1, v107));
            }
            v109 = (uint64_t *)*((_QWORD *)a2 - 2);
            v110 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
            if (v110)
            {
              v111 = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
            }
            v113 = 0;
            if (v105 && v109)
            {
              v114 = *v105;
              v113 = v114 && (v115 = *v109) != 0 && *(double *)(v114 + 28) < *(double *)(v115 + 28);
            }
            if (v110)
            {
              v116 = (unint64_t *)&v110->__shared_owners_;
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            v7 = (__int128 *)a1;
            if (v106)
            {
              v118 = (unint64_t *)&v106->__shared_owners_;
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
            if (v113)
            {
              v7 = (__int128 *)a1;
              do
              {
                v120 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v121 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v122 = __ldxr(v121);
                  while (__stxr(v122 + 1, v121));
                }
                v123 = (uint64_t *)*((_QWORD *)v7 + 2);
                v124 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                if (v124)
                {
                  v125 = (unint64_t *)&v124->__shared_owners_;
                  do
                    v126 = __ldxr(v125);
                  while (__stxr(v126 + 1, v125));
                }
                v127 = 0;
                if ((_QWORD)v120 && v123)
                  v127 = *(_QWORD *)v120
                      && (v128 = *v123) != 0
                      && *(double *)(*(_QWORD *)v120 + 28) < *(double *)(v128 + 28);
                if (v124)
                {
                  v129 = (unint64_t *)&v124->__shared_owners_;
                  do
                    v130 = __ldaxr(v129);
                  while (__stlxr(v130 - 1, v129));
                  if (!v130)
                  {
                    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                    std::__shared_weak_count::__release_weak(v124);
                  }
                }
                if (*((_QWORD *)&v120 + 1))
                {
                  v131 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
                  do
                    v132 = __ldaxr(v131);
                  while (__stlxr(v132 - 1, v131));
                  if (!v132)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v120 + 1) + 16))(*((_QWORD *)&v120 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v120 + 1));
                  }
                }
                ++v7;
              }
              while (!v127);
            }
            else
            {
              while (1)
              {
                v178 = v7++;
                if (v7 >= (__int128 *)a2)
                  break;
                v179 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v180 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v181 = __ldxr(v180);
                  while (__stxr(v181 + 1, v180));
                }
                v182 = (uint64_t *)*((_QWORD *)v178 + 2);
                v183 = (std::__shared_weak_count *)*((_QWORD *)v178 + 3);
                if (v183)
                {
                  v184 = (unint64_t *)&v183->__shared_owners_;
                  do
                    v185 = __ldxr(v184);
                  while (__stxr(v185 + 1, v184));
                }
                v186 = 0;
                if ((_QWORD)v179 && v182)
                  v186 = *(_QWORD *)v179
                      && (v187 = *v182) != 0
                      && *(double *)(*(_QWORD *)v179 + 28) < *(double *)(v187 + 28);
                if (v183)
                {
                  v188 = (unint64_t *)&v183->__shared_owners_;
                  do
                    v189 = __ldaxr(v188);
                  while (__stlxr(v189 - 1, v188));
                  if (!v189)
                  {
                    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                    std::__shared_weak_count::__release_weak(v183);
                  }
                }
                if (!*((_QWORD *)&v179 + 1))
                  goto LABEL_325;
                v190 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
                do
                  v191 = __ldaxr(v190);
                while (__stlxr(v191 - 1, v190));
                if (!v191)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v179 + 1) + 16))(*((_QWORD *)&v179 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v179 + 1));
                  if (v186)
                    break;
                }
                else
                {
LABEL_325:
                  if (v186)
                    break;
                }
              }
            }
            v133 = (__int128 *)a2;
            if (v7 < (__int128 *)a2)
            {
              v133 = (__int128 *)a2;
              do
              {
                v134 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v135 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v136 = __ldxr(v135);
                  while (__stxr(v136 + 1, v135));
                }
                v137 = (uint64_t *)*((_QWORD *)v133 - 2);
                v138 = (std::__shared_weak_count *)*((_QWORD *)v133 - 1);
                if (v138)
                {
                  v139 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v140 = __ldxr(v139);
                  while (__stxr(v140 + 1, v139));
                }
                v141 = 0;
                if ((_QWORD)v134 && v137)
                  v141 = *(_QWORD *)v134
                      && (v142 = *v137) != 0
                      && *(double *)(*(_QWORD *)v134 + 28) < *(double *)(v142 + 28);
                if (v138)
                {
                  v143 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v144 = __ldaxr(v143);
                  while (__stlxr(v144 - 1, v143));
                  if (!v144)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                }
                if (*((_QWORD *)&v134 + 1))
                {
                  v145 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v134 + 1) + 16))(*((_QWORD *)&v134 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v134 + 1));
                  }
                }
                --v133;
              }
              while (v141);
            }
LABEL_294:
            if (v7 < v133)
            {
              v147 = *(_QWORD *)v7;
              *(_QWORD *)v7 = *(_QWORD *)v133;
              *(_QWORD *)v133 = v147;
              v148 = *((_QWORD *)v7 + 1);
              *((_QWORD *)v7 + 1) = *((_QWORD *)v133 + 1);
              *((_QWORD *)v133 + 1) = v148;
              while (1)
              {
                v149 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v150 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v151 = __ldxr(v150);
                  while (__stxr(v151 + 1, v150));
                }
                v152 = (uint64_t *)*((_QWORD *)v7 + 2);
                v153 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                if (v153)
                {
                  v154 = (unint64_t *)&v153->__shared_owners_;
                  do
                    v155 = __ldxr(v154);
                  while (__stxr(v155 + 1, v154));
                }
                v156 = 0;
                if (!(_QWORD)v149 || !v152)
                  goto LABEL_257;
                if (*(_QWORD *)v149)
                {
                  v157 = *v152;
                  if (v157)
                    break;
                }
                v156 = 0;
                if (!v153)
                  goto LABEL_263;
LABEL_260:
                v158 = (unint64_t *)&v153->__shared_owners_;
                do
                  v159 = __ldaxr(v158);
                while (__stlxr(v159 - 1, v158));
                if (v159)
                {
LABEL_263:
                  if (*((_QWORD *)&v149 + 1))
                    goto LABEL_264;
                  goto LABEL_269;
                }
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
                if (*((_QWORD *)&v149 + 1))
                {
LABEL_264:
                  v160 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                  do
                    v161 = __ldaxr(v160);
                  while (__stlxr(v161 - 1, v160));
                  if (!v161)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
                  }
                }
LABEL_269:
                ++v7;
                if (v156)
                {
                  while (1)
                  {
                    v162 = v425;
                    if (*((_QWORD *)&v425 + 1))
                    {
                      v163 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                      do
                        v164 = __ldxr(v163);
                      while (__stxr(v164 + 1, v163));
                    }
                    v165 = (uint64_t *)*((_QWORD *)v133 - 2);
                    v166 = (std::__shared_weak_count *)*((_QWORD *)v133 - 1);
                    if (v166)
                    {
                      v167 = (unint64_t *)&v166->__shared_owners_;
                      do
                        v168 = __ldxr(v167);
                      while (__stxr(v168 + 1, v167));
                    }
                    v169 = 0;
                    if (!(_QWORD)v162 || !v165)
                      goto LABEL_281;
                    if (*(_QWORD *)v162)
                    {
                      v170 = *v165;
                      if (v170)
                        break;
                    }
                    v169 = 0;
                    if (!v166)
                      goto LABEL_287;
LABEL_284:
                    v171 = (unint64_t *)&v166->__shared_owners_;
                    do
                      v172 = __ldaxr(v171);
                    while (__stlxr(v172 - 1, v171));
                    if (v172)
                    {
LABEL_287:
                      if (*((_QWORD *)&v162 + 1))
                        goto LABEL_288;
                      goto LABEL_293;
                    }
                    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                    std::__shared_weak_count::__release_weak(v166);
                    if (*((_QWORD *)&v162 + 1))
                    {
LABEL_288:
                      v173 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
                      do
                        v174 = __ldaxr(v173);
                      while (__stlxr(v174 - 1, v173));
                      if (!v174)
                      {
                        (*(void (**)(_QWORD))(**((_QWORD **)&v162 + 1) + 16))(*((_QWORD *)&v162 + 1));
                        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v162 + 1));
                      }
                    }
LABEL_293:
                    --v133;
                    if (!v169)
                      goto LABEL_294;
                  }
                  v169 = *(double *)(*(_QWORD *)v162 + 28) < *(double *)(v170 + 28);
LABEL_281:
                  if (!v166)
                    goto LABEL_287;
                  goto LABEL_284;
                }
              }
              v156 = *(double *)(*(_QWORD *)v149 + 28) < *(double *)(v157 + 28);
LABEL_257:
              if (!v153)
                goto LABEL_263;
              goto LABEL_260;
            }
            if (v7 - 1 != (__int128 *)a1)
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](a1, v7 - 1);
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v7 - 1), &v425);
            v175 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
            if (*((_QWORD *)&v425 + 1))
            {
              v176 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v177 = __ldaxr(v176);
              while (__stlxr(v177 - 1, v176));
              if (!v177)
              {
                ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                std::__shared_weak_count::__release_weak(v175);
              }
            }
            a4 = 0;
            continue;
          }
        }
        v425 = *(_OWORD *)v11;
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        v29 = v11;
        do
        {
          v30 = (__int128 *)v29;
          v31 = *(uint64_t **)(v29 + 16);
          v32 = *(std::__shared_weak_count **)(v29 + 24);
          v29 += 16;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          v35 = v425;
          if (*((_QWORD *)&v425 + 1))
          {
            v36 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          v38 = 0;
          if (!v31 || !(_QWORD)v35)
            goto LABEL_44;
          v39 = *v31;
          if (v39 && *(_QWORD *)v35)
          {
            v38 = *(double *)(v39 + 28) < *(double *)(*(_QWORD *)v35 + 28);
LABEL_44:
            if (!*((_QWORD *)&v35 + 1))
              goto LABEL_50;
            goto LABEL_47;
          }
          v38 = 0;
          if (!*((_QWORD *)&v35 + 1))
            goto LABEL_50;
LABEL_47:
          v40 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
            if (!v32)
              continue;
            goto LABEL_51;
          }
LABEL_50:
          if (!v32)
            continue;
LABEL_51:
          v42 = (unint64_t *)&v32->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        while (v38);
        v44 = (__int128 *)a2;
        if (v30 != (__int128 *)a1)
        {
          while (1)
          {
            v45 = (uint64_t *)*((_QWORD *)v44 - 2);
            v46 = (std::__shared_weak_count *)*((_QWORD *)v44-- - 1);
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
            v49 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v50 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v51 = __ldxr(v50);
              while (__stxr(v51 + 1, v50));
            }
            v52 = 0;
            if (!v45 || !(_QWORD)v49)
              goto LABEL_69;
            v53 = *v45;
            if (v53)
            {
              if (*(_QWORD *)v49)
                break;
            }
            v52 = 0;
            if (!*((_QWORD *)&v49 + 1))
              goto LABEL_75;
LABEL_72:
            v54 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (v55)
            {
LABEL_75:
              if (v46)
                goto LABEL_76;
              goto LABEL_81;
            }
            (*(void (**)(_QWORD))(**((_QWORD **)&v49 + 1) + 16))(*((_QWORD *)&v49 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v49 + 1));
            if (v46)
            {
LABEL_76:
              v56 = (unint64_t *)&v46->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
LABEL_81:
            if (v52)
              goto LABEL_109;
          }
          v52 = *(double *)(v53 + 28) < *(double *)(*(_QWORD *)v49 + 28);
LABEL_69:
          if (!*((_QWORD *)&v49 + 1))
            goto LABEL_75;
          goto LABEL_72;
        }
        v44 = (__int128 *)a2;
        while (2)
        {
          if (v29 < (unint64_t)v44)
          {
            v58 = (uint64_t *)*((_QWORD *)v44 - 2);
            v59 = (std::__shared_weak_count *)*((_QWORD *)v44-- - 1);
            if (v59)
            {
              v60 = (unint64_t *)&v59->__shared_owners_;
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            v62 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v63 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v64 = __ldxr(v63);
              while (__stxr(v64 + 1, v63));
            }
            v65 = 0;
            if (v58 && (_QWORD)v62)
            {
              v66 = *v58;
              if (v66 && *(_QWORD *)v62)
              {
                v65 = *(double *)(v66 + 28) < *(double *)(*(_QWORD *)v62 + 28);
                goto LABEL_96;
              }
              v65 = 0;
              if (*((_QWORD *)&v62 + 1))
              {
LABEL_99:
                v67 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (v68)
                  goto LABEL_102;
                (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
                if (!v59)
                {
LABEL_108:
                  if (v65)
                    break;
                  continue;
                }
LABEL_103:
                v69 = (unint64_t *)&v59->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
                goto LABEL_108;
              }
            }
            else
            {
LABEL_96:
              if (*((_QWORD *)&v62 + 1))
                goto LABEL_99;
            }
LABEL_102:
            if (!v59)
              goto LABEL_108;
            goto LABEL_103;
          }
          break;
        }
LABEL_109:
        if (v29 >= (unint64_t)v44)
          goto LABEL_161;
        v71 = (__int128 *)v29;
        v72 = v44;
        while (2)
        {
          v73 = *(_QWORD *)v71;
          *(_QWORD *)v71 = *(_QWORD *)v72;
          *(_QWORD *)v72 = v73;
          v74 = *((_QWORD *)v71 + 1);
          *((_QWORD *)v71 + 1) = *((_QWORD *)v72 + 1);
          *((_QWORD *)v72 + 1) = v74;
          while (2)
          {
            v30 = v71;
            v75 = (uint64_t *)*((_QWORD *)v71 + 2);
            v76 = (std::__shared_weak_count *)*((_QWORD *)v71++ + 3);
            if (v76)
            {
              v77 = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldxr(v77);
              while (__stxr(v78 + 1, v77));
            }
            v79 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v80 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v81 = __ldxr(v80);
              while (__stxr(v81 + 1, v80));
            }
            v82 = 0;
            if (!v75 || !(_QWORD)v79)
            {
LABEL_123:
              if (*((_QWORD *)&v79 + 1))
                goto LABEL_126;
LABEL_129:
              if (!v76)
                goto LABEL_135;
LABEL_130:
              v86 = (unint64_t *)&v76->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
              goto LABEL_135;
            }
            v83 = *v75;
            if (v83 && *(_QWORD *)v79)
            {
              v82 = *(double *)(v83 + 28) < *(double *)(*(_QWORD *)v79 + 28);
              goto LABEL_123;
            }
            v82 = 0;
            if (!*((_QWORD *)&v79 + 1))
              goto LABEL_129;
LABEL_126:
            v84 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (v85)
              goto LABEL_129;
            (*(void (**)(_QWORD))(**((_QWORD **)&v79 + 1) + 16))(*((_QWORD *)&v79 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v79 + 1));
            if (v76)
              goto LABEL_130;
LABEL_135:
            if (v82)
              continue;
            break;
          }
          while (2)
          {
            v88 = (uint64_t *)*((_QWORD *)v72 - 2);
            v89 = (std::__shared_weak_count *)*((_QWORD *)v72-- - 1);
            if (v89)
            {
              v90 = (unint64_t *)&v89->__shared_owners_;
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
            }
            v92 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v93 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v94 = __ldxr(v93);
              while (__stxr(v94 + 1, v93));
            }
            v95 = 0;
            if (!v88 || !(_QWORD)v92)
            {
LABEL_147:
              if (*((_QWORD *)&v92 + 1))
                goto LABEL_150;
LABEL_153:
              if (!v89)
                goto LABEL_159;
LABEL_154:
              v99 = (unint64_t *)&v89->__shared_owners_;
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
              goto LABEL_159;
            }
            v96 = *v88;
            if (v96 && *(_QWORD *)v92)
            {
              v95 = *(double *)(v96 + 28) < *(double *)(*(_QWORD *)v92 + 28);
              goto LABEL_147;
            }
            v95 = 0;
            if (!*((_QWORD *)&v92 + 1))
              goto LABEL_153;
LABEL_150:
            v97 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (v98)
              goto LABEL_153;
            (*(void (**)(_QWORD))(**((_QWORD **)&v92 + 1) + 16))(*((_QWORD *)&v92 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v92 + 1));
            if (v89)
              goto LABEL_154;
LABEL_159:
            if (!v95)
              continue;
            break;
          }
          if (v71 < v72)
            continue;
          break;
        }
LABEL_161:
        if (v30 != (__int128 *)a1)
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](a1, v30);
        std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v30, &v425);
        v101 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
        a2 = (char *)v421;
        if (*((_QWORD *)&v425 + 1))
        {
          v102 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        if (v29 < (unint64_t)v44)
        {
LABEL_171:
          std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*,false>(a1, v30, a3, a4 & 1);
          a4 = 0;
          v7 = v30 + 1;
          continue;
        }
        v104 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(a1, (uint64_t)v30);
        v7 = v30 + 1;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t)(v30 + 1), v421))
        {
          if (v104)
            continue;
          goto LABEL_171;
        }
        a2 = (char *)v30;
        if (!v104)
          goto LABEL_1;
        return;
    }
  }
}

  v342 = a2 - 32;
  v343 = a2 - 16;
  v341 = a2 - 48;
  v7 = a1;
  v345 = a2;
  while (2)
  {
    v8 = (uint64_t)v7;
    v9 = a2 - (_QWORD)v7;
    v10 = (uint64_t)(a2 - (_QWORD)v7) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v159 = *(_QWORD **)(a2 - 16);
        v160 = *(std::__shared_weak_count **)(a2 - 8);
        if (v160)
        {
          p_shared_owners = (unint64_t *)&v160->__shared_owners_;
          do
            v162 = __ldxr(p_shared_owners);
          while (__stxr(v162 + 1, p_shared_owners));
        }
        v163 = *(std::__shared_weak_count **)(v8 + 8);
        *(_QWORD *)&v353 = *(_QWORD *)v8;
        *((_QWORD *)&v353 + 1) = v163;
        if (v163)
        {
          v164 = (unint64_t *)&v163->__shared_owners_;
          do
            v165 = __ldxr(v164);
          while (__stxr(v165 + 1, v164));
          v166 = lessThan(v159, (_QWORD **)&v353);
          do
            v167 = __ldaxr(v164);
          while (__stlxr(v167 - 1, v164));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        else
        {
          v166 = lessThan(v159, (_QWORD **)&v353);
        }
        if (v160)
        {
          v336 = (unint64_t *)&v160->__shared_owners_;
          do
            v337 = __ldaxr(v336);
          while (__stlxr(v337 - 1, v336));
          if (!v337)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        if (v166)
        {
          v338 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v338;
          v339 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v339;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(v8, v8 + 16, v343);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(v8, v8 + 16, v8 + 32, v343);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(v8, v8 + 16, v8 + 32, v8 + 48, v343);
        return;
      default:
        if (v9 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (v8 == a2)
              return;
            v168 = v8 + 16;
            if (v8 + 16 == a2)
              return;
            v169 = v8;
            while (1)
            {
              v170 = v168;
              v171 = *(_QWORD **)(v169 + 16);
              v172 = *(std::__shared_weak_count **)(v169 + 24);
              if (v172)
              {
                v173 = (unint64_t *)&v172->__shared_owners_;
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
              }
              v175 = *(std::__shared_weak_count **)(v169 + 8);
              *(_QWORD *)&v353 = *(_QWORD *)v169;
              *((_QWORD *)&v353 + 1) = v175;
              if (v175)
              {
                v176 = (unint64_t *)&v175->__shared_owners_;
                do
                  v177 = __ldxr(v176);
                while (__stxr(v177 + 1, v176));
                v178 = lessThan(v171, (_QWORD **)&v353);
                do
                  v179 = __ldaxr(v176);
                while (__stlxr(v179 - 1, v176));
                if (!v179)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              else
              {
                v178 = lessThan(v171, (_QWORD **)&v353);
              }
              if (!v172)
                goto LABEL_290;
              v180 = (unint64_t *)&v172->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                std::__shared_weak_count::__release_weak(v172);
                if (!v178)
                  goto LABEL_318;
              }
              else
              {
LABEL_290:
                if (!v178)
                  goto LABEL_318;
              }
              v352 = *(_OWORD *)v170;
              *(_QWORD *)v170 = 0;
              *(_QWORD *)(v170 + 8) = 0;
              v182 = v170;
              while (1)
              {
                v183 = v182;
                v182 = v169;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v183, (__int128 *)v169);
                if (v169 == v8)
                  break;
                v184 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v185 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v186 = __ldxr(v185);
                  while (__stxr(v186 + 1, v185));
                }
                *(_QWORD *)&v353 = *(_QWORD *)(v169 - 16);
                v187 = *(std::__shared_weak_count **)(v169 - 8);
                *((_QWORD *)&v353 + 1) = v187;
                if (v187)
                {
                  v188 = (unint64_t *)&v187->__shared_owners_;
                  do
                    v189 = __ldxr(v188);
                  while (__stxr(v189 + 1, v188));
                  v190 = lessThan((_QWORD *)v184, (_QWORD **)&v353);
                  do
                    v191 = __ldaxr(v188);
                  while (__stlxr(v191 - 1, v188));
                  if (!v191)
                  {
                    ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                    std::__shared_weak_count::__release_weak(v187);
                  }
                }
                else
                {
                  v190 = lessThan((_QWORD *)v184, (_QWORD **)&v353);
                }
                if (*((_QWORD *)&v184 + 1))
                {
                  v192 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
                  do
                    v193 = __ldaxr(v192);
                  while (__stlxr(v193 - 1, v192));
                  if (!v193)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v184 + 1) + 16))(*((_QWORD *)&v184 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v184 + 1));
                  }
                }
                v169 = v182 - 16;
                if (!v190)
                  goto LABEL_312;
              }
              v182 = v8;
LABEL_312:
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v182, &v352);
              v194 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              if (*((_QWORD *)&v352 + 1))
              {
                v195 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v196 = __ldaxr(v195);
                while (__stlxr(v196 - 1, v195));
                if (!v196)
                {
                  ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                  std::__shared_weak_count::__release_weak(v194);
                }
              }
LABEL_318:
              v168 = v170 + 16;
              v169 = v170;
              if (v170 + 16 == a2)
                return;
            }
          }
          if (v8 == a2)
            return;
          v308 = v8 + 16;
          while (1)
          {
            if (v308 == a2)
              return;
            v309 = v308;
            v310 = *(_QWORD **)(v8 + 16);
            v311 = *(std::__shared_weak_count **)(v8 + 24);
            if (v311)
            {
              v312 = (unint64_t *)&v311->__shared_owners_;
              do
                v313 = __ldxr(v312);
              while (__stxr(v313 + 1, v312));
            }
            v314 = *(std::__shared_weak_count **)(v8 + 8);
            *(_QWORD *)&v353 = *(_QWORD *)v8;
            *((_QWORD *)&v353 + 1) = v314;
            if (v314)
            {
              v315 = (unint64_t *)&v314->__shared_owners_;
              do
                v316 = __ldxr(v315);
              while (__stxr(v316 + 1, v315));
              v317 = lessThan(v310, (_QWORD **)&v353);
              do
                v318 = __ldaxr(v315);
              while (__stlxr(v318 - 1, v315));
              if (!v318)
              {
                ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                std::__shared_weak_count::__release_weak(v314);
              }
            }
            else
            {
              v317 = lessThan(v310, (_QWORD **)&v353);
            }
            if (!v311)
              goto LABEL_503;
            v319 = (unint64_t *)&v311->__shared_owners_;
            do
              v320 = __ldaxr(v319);
            while (__stlxr(v320 - 1, v319));
            if (!v320)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
              if (!v317)
                goto LABEL_528;
            }
            else
            {
LABEL_503:
              if (!v317)
                goto LABEL_528;
            }
            v352 = *(_OWORD *)v309;
            *(_QWORD *)v309 = 0;
            *(_QWORD *)(v309 + 8) = 0;
            v321 = v309;
            do
            {
              v322 = v321;
              v321 = v8;
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v322, (__int128 *)v8);
              v323 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v324 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v325 = __ldxr(v324);
                while (__stxr(v325 + 1, v324));
              }
              *(_QWORD *)&v353 = *(_QWORD *)(v8 - 16);
              v326 = *(std::__shared_weak_count **)(v8 - 8);
              *((_QWORD *)&v353 + 1) = v326;
              if (v326)
              {
                v327 = (unint64_t *)&v326->__shared_owners_;
                do
                  v328 = __ldxr(v327);
                while (__stxr(v328 + 1, v327));
                v329 = lessThan((_QWORD *)v323, (_QWORD **)&v353);
                do
                  v330 = __ldaxr(v327);
                while (__stlxr(v330 - 1, v327));
                if (!v330)
                {
                  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                  std::__shared_weak_count::__release_weak(v326);
                }
              }
              else
              {
                v329 = lessThan((_QWORD *)v323, (_QWORD **)&v353);
              }
              if (*((_QWORD *)&v323 + 1))
              {
                v331 = (unint64_t *)(*((_QWORD *)&v323 + 1) + 8);
                do
                  v332 = __ldaxr(v331);
                while (__stlxr(v332 - 1, v331));
                if (!v332)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v323 + 1) + 16))(*((_QWORD *)&v323 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v323 + 1));
                }
              }
              v8 -= 16;
            }
            while (v329);
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v321, &v352);
            v333 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
            if (*((_QWORD *)&v352 + 1))
            {
              v334 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
              do
                v335 = __ldaxr(v334);
              while (__stlxr(v335 - 1, v334));
              if (!v335)
              {
                ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                std::__shared_weak_count::__release_weak(v333);
              }
            }
LABEL_528:
            v308 = v309 + 16;
            v8 = v309;
          }
        }
        v350 = (__int128 *)v8;
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = (__int128 *)(v8 + 16 * ((unint64_t)v10 >> 1));
          if ((unint64_t)v9 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((uint64_t)v12, v8, v343);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(v8, (uint64_t)v12, v343);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(v8 + 16, (uint64_t)(v12 - 1), v342);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(v8 + 32, v8 + 16 + 16 * v11, v341);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((uint64_t)(v12 - 1), (uint64_t)v12, v8 + 16 + 16 * v11);
            v13 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v12;
            *v12 = v13;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v14 = *(_QWORD **)(v8 - 16);
            v15 = *(std::__shared_weak_count **)(v8 - 8);
            if (v15)
            {
              v16 = (unint64_t *)&v15->__shared_owners_;
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            v18 = *(std::__shared_weak_count **)(v8 + 8);
            *(_QWORD *)&v353 = *(_QWORD *)v8;
            *((_QWORD *)&v353 + 1) = v18;
            if (v18)
            {
              v19 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
              v21 = lessThan(v14, (_QWORD **)&v353);
              do
                v22 = __ldaxr(v19);
              while (__stlxr(v22 - 1, v19));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            else
            {
              v21 = lessThan(v14, (_QWORD **)&v353);
            }
            if (v15)
            {
              v23 = (unint64_t *)&v15->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            if (!v21)
            {
              v91 = *(_QWORD **)v350;
              v92 = (std::__shared_weak_count *)*((_QWORD *)v350 + 1);
              *(_QWORD *)&v352 = *(_QWORD *)v350;
              *((_QWORD *)&v352 + 1) = v92;
              *(_QWORD *)v350 = 0;
              *((_QWORD *)v350 + 1) = 0;
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldxr(v93);
                while (__stxr(v94 + 1, v93));
              }
              *(_QWORD *)&v353 = *(_QWORD *)(v345 - 16);
              v95 = *(std::__shared_weak_count **)(v345 - 8);
              *((_QWORD *)&v353 + 1) = v95;
              if (v95)
              {
                v96 = (unint64_t *)&v95->__shared_owners_;
                do
                  v97 = __ldxr(v96);
                while (__stxr(v97 + 1, v96));
                v98 = lessThan(v91, (_QWORD **)&v353);
                do
                  v99 = __ldaxr(v96);
                while (__stlxr(v99 - 1, v96));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              else
              {
                v98 = lessThan(v91, (_QWORD **)&v353);
              }
              if (v92)
              {
                v100 = (unint64_t *)&v92->__shared_owners_;
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 - 1, v100));
                if (!v101)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v7 = v350;
              if (v98)
              {
                v7 = v350;
                do
                {
                  v102 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v103 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v104 = __ldxr(v103);
                    while (__stxr(v104 + 1, v103));
                  }
                  v105 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v7 + 2);
                  *((_QWORD *)&v353 + 1) = v105;
                  if (v105)
                  {
                    v106 = (unint64_t *)&v105->__shared_owners_;
                    do
                      v107 = __ldxr(v106);
                    while (__stxr(v107 + 1, v106));
                    v108 = lessThan((_QWORD *)v102, (_QWORD **)&v353);
                    do
                      v109 = __ldaxr(v106);
                    while (__stlxr(v109 - 1, v106));
                    if (!v109)
                    {
                      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                      std::__shared_weak_count::__release_weak(v105);
                    }
                  }
                  else
                  {
                    v108 = lessThan((_QWORD *)v102, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v102 + 1))
                  {
                    v110 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
                    do
                      v111 = __ldaxr(v110);
                    while (__stlxr(v111 - 1, v110));
                    if (!v111)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
                    }
                  }
                  ++v7;
                }
                while (!v108);
              }
              else
              {
                while (1)
                {
                  v148 = v7++;
                  if ((unint64_t)v7 >= v345)
                    break;
                  v149 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v150 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v151 = __ldxr(v150);
                    while (__stxr(v151 + 1, v150));
                  }
                  v152 = (std::__shared_weak_count *)*((_QWORD *)v148 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v148 + 2);
                  *((_QWORD *)&v353 + 1) = v152;
                  if (v152)
                  {
                    v153 = (unint64_t *)&v152->__shared_owners_;
                    do
                      v154 = __ldxr(v153);
                    while (__stxr(v154 + 1, v153));
                    v155 = lessThan((_QWORD *)v149, (_QWORD **)&v353);
                    do
                      v156 = __ldaxr(v153);
                    while (__stlxr(v156 - 1, v153));
                    if (!v156)
                    {
                      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                      std::__shared_weak_count::__release_weak(v152);
                    }
                  }
                  else
                  {
                    v155 = lessThan((_QWORD *)v149, (_QWORD **)&v353);
                  }
                  if (!*((_QWORD *)&v149 + 1))
                    goto LABEL_250;
                  v157 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                  do
                    v158 = __ldaxr(v157);
                  while (__stlxr(v158 - 1, v157));
                  if (!v158)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
                    if (v155)
                      break;
                  }
                  else
                  {
LABEL_250:
                    if (v155)
                      break;
                  }
                }
              }
              v112 = (__int128 *)v345;
              if ((unint64_t)v7 < v345)
              {
                v112 = (__int128 *)v345;
                do
                {
                  v113 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v114 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v115 = __ldxr(v114);
                    while (__stxr(v115 + 1, v114));
                  }
                  *(_QWORD *)&v353 = *((_QWORD *)v112 - 2);
                  v116 = (std::__shared_weak_count *)*((_QWORD *)v112 - 1);
                  *((_QWORD *)&v353 + 1) = v116;
                  if (v116)
                  {
                    v117 = (unint64_t *)&v116->__shared_owners_;
                    do
                      v118 = __ldxr(v117);
                    while (__stxr(v118 + 1, v117));
                    v119 = lessThan((_QWORD *)v113, (_QWORD **)&v353);
                    do
                      v120 = __ldaxr(v117);
                    while (__stlxr(v120 - 1, v117));
                    if (!v120)
                    {
                      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                      std::__shared_weak_count::__release_weak(v116);
                    }
                  }
                  else
                  {
                    v119 = lessThan((_QWORD *)v113, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v113 + 1))
                  {
                    v121 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v113 + 1) + 16))(*((_QWORD *)&v113 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v113 + 1));
                    }
                  }
                  --v112;
                }
                while (v119);
              }
              while (v7 < v112)
              {
                v123 = *(_QWORD *)v7;
                *(_QWORD *)v7 = *(_QWORD *)v112;
                *(_QWORD *)v112 = v123;
                v124 = *((_QWORD *)v7 + 1);
                *((_QWORD *)v7 + 1) = *((_QWORD *)v112 + 1);
                *((_QWORD *)v112 + 1) = v124;
                do
                {
                  v125 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v126 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v127 = __ldxr(v126);
                    while (__stxr(v127 + 1, v126));
                  }
                  v128 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v7 + 2);
                  *((_QWORD *)&v353 + 1) = v128;
                  if (v128)
                  {
                    v129 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v130 = __ldxr(v129);
                    while (__stxr(v130 + 1, v129));
                    v131 = lessThan((_QWORD *)v125, (_QWORD **)&v353);
                    do
                      v132 = __ldaxr(v129);
                    while (__stlxr(v132 - 1, v129));
                    if (!v132)
                    {
                      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                      std::__shared_weak_count::__release_weak(v128);
                    }
                  }
                  else
                  {
                    v131 = lessThan((_QWORD *)v125, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v125 + 1))
                  {
                    v133 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
                    do
                      v134 = __ldaxr(v133);
                    while (__stlxr(v134 - 1, v133));
                    if (!v134)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v125 + 1) + 16))(*((_QWORD *)&v125 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v125 + 1));
                    }
                  }
                  ++v7;
                }
                while (!v131);
                do
                {
                  v135 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v136 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v137 = __ldxr(v136);
                    while (__stxr(v137 + 1, v136));
                  }
                  *(_QWORD *)&v353 = *((_QWORD *)v112 - 2);
                  v138 = (std::__shared_weak_count *)*((_QWORD *)v112 - 1);
                  *((_QWORD *)&v353 + 1) = v138;
                  if (v138)
                  {
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldxr(v139);
                    while (__stxr(v140 + 1, v139));
                    v141 = lessThan((_QWORD *)v135, (_QWORD **)&v353);
                    do
                      v142 = __ldaxr(v139);
                    while (__stlxr(v142 - 1, v139));
                    if (!v142)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                  else
                  {
                    v141 = lessThan((_QWORD *)v135, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v135 + 1))
                  {
                    v143 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
                    do
                      v144 = __ldaxr(v143);
                    while (__stlxr(v144 - 1, v143));
                    if (!v144)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v135 + 1) + 16))(*((_QWORD *)&v135 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v135 + 1));
                    }
                  }
                  --v112;
                }
                while (v141);
              }
              if (v7 - 1 != v350)
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v350, v7 - 1);
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v7 - 1), &v352);
              v145 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              a2 = v345;
              if (*((_QWORD *)&v352 + 1))
              {
                v146 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                if (!v147)
                {
                  ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                  std::__shared_weak_count::__release_weak(v145);
                }
              }
              a4 = 0;
              continue;
            }
          }
          v352 = *v350;
          *(_QWORD *)v350 = 0;
          *((_QWORD *)v350 + 1) = 0;
          v25 = v350;
          do
          {
            while (1)
            {
              v26 = v25;
              v27 = (_QWORD *)*((_QWORD *)v25 + 2);
              v28 = (std::__shared_weak_count *)*((_QWORD *)v25++ + 3);
              if (v28)
              {
                v29 = (unint64_t *)&v28->__shared_owners_;
                do
                  v30 = __ldxr(v29);
                while (__stxr(v30 + 1, v29));
              }
              v31 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v32 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v33 = __ldxr(v32);
                while (__stxr(v33 + 1, v32));
                v34 = lessThan(v27, (_QWORD **)&v353);
                do
                  v35 = __ldaxr(v32);
                while (__stlxr(v35 - 1, v32));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
              else
              {
                v34 = lessThan(v27, (_QWORD **)&v353);
              }
              if (v28)
              {
                v36 = (unint64_t *)&v28->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                  break;
              }
              if (!v34)
                goto LABEL_45;
            }
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          while (v34);
LABEL_45:
          v38 = (__int128 *)v345;
          if (v26 == v350)
          {
            v38 = (__int128 *)v345;
            do
            {
              if (v25 >= v38)
                break;
              v50 = (_QWORD *)*((_QWORD *)v38 - 2);
              v51 = (std::__shared_weak_count *)*((_QWORD *)v38-- - 1);
              if (v51)
              {
                v52 = (unint64_t *)&v51->__shared_owners_;
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }
              v54 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v55 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v56 = __ldxr(v55);
                while (__stxr(v56 + 1, v55));
                v57 = lessThan(v50, (_QWORD **)&v353);
                do
                  v58 = __ldaxr(v55);
                while (__stlxr(v58 - 1, v55));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              else
              {
                v57 = lessThan(v50, (_QWORD **)&v353);
              }
              if (v51)
              {
                v59 = (unint64_t *)&v51->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
            }
            while (!v57);
          }
          else
          {
            do
            {
              while (1)
              {
                v39 = (_QWORD *)*((_QWORD *)v38 - 2);
                v40 = (std::__shared_weak_count *)*((_QWORD *)v38-- - 1);
                if (v40)
                {
                  v41 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                v43 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                v353 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v44 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v45 = __ldxr(v44);
                  while (__stxr(v45 + 1, v44));
                  v46 = lessThan(v39, (_QWORD **)&v353);
                  do
                    v47 = __ldaxr(v44);
                  while (__stlxr(v47 - 1, v44));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                    std::__shared_weak_count::__release_weak(v43);
                  }
                }
                else
                {
                  v46 = lessThan(v39, (_QWORD **)&v353);
                }
                if (v40)
                {
                  v48 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                    break;
                }
                if (v46)
                  goto LABEL_84;
              }
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
            while (!v46);
          }
LABEL_84:
          if (v25 < v38)
          {
            v61 = v25;
            v62 = v38;
            do
            {
              v63 = *(_QWORD *)v61;
              *(_QWORD *)v61 = *(_QWORD *)v62;
              *(_QWORD *)v62 = v63;
              v64 = *((_QWORD *)v61 + 1);
              *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
              *((_QWORD *)v62 + 1) = v64;
              do
              {
                while (1)
                {
                  v26 = v61;
                  v65 = (_QWORD *)*((_QWORD *)v61 + 2);
                  v66 = (std::__shared_weak_count *)*((_QWORD *)v61++ + 3);
                  if (v66)
                  {
                    v67 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v68 = __ldxr(v67);
                    while (__stxr(v68 + 1, v67));
                  }
                  v69 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  v353 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v70 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v71 = __ldxr(v70);
                    while (__stxr(v71 + 1, v70));
                    v72 = lessThan(v65, (_QWORD **)&v353);
                    do
                      v73 = __ldaxr(v70);
                    while (__stlxr(v73 - 1, v70));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                  else
                  {
                    v72 = lessThan(v65, (_QWORD **)&v353);
                  }
                  if (v66)
                  {
                    v74 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                      break;
                  }
                  if (!v72)
                    goto LABEL_107;
                }
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
              while (v72);
              do
              {
                while (1)
                {
LABEL_107:
                  v76 = (_QWORD *)*((_QWORD *)v62 - 2);
                  v77 = (std::__shared_weak_count *)*((_QWORD *)v62-- - 1);
                  if (v77)
                  {
                    v78 = (unint64_t *)&v77->__shared_owners_;
                    do
                      v79 = __ldxr(v78);
                    while (__stxr(v79 + 1, v78));
                  }
                  v80 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  v353 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v81 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v82 = __ldxr(v81);
                    while (__stxr(v82 + 1, v81));
                    v83 = lessThan(v76, (_QWORD **)&v353);
                    do
                      v84 = __ldaxr(v81);
                    while (__stlxr(v84 - 1, v81));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  else
                  {
                    v83 = lessThan(v76, (_QWORD **)&v353);
                  }
                  if (!v77)
                    break;
                  v85 = (unint64_t *)&v77->__shared_owners_;
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (v86)
                    break;
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                  if (v83)
                    goto LABEL_123;
                }
              }
              while (!v83);
LABEL_123:
              ;
            }
            while (v61 < v62);
          }
          a1 = v350;
          if (v26 != v350)
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v350, v26);
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v26, &v352);
          v87 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          a2 = v345;
          if (*((_QWORD *)&v352 + 1))
          {
            v88 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          if (v25 < v38)
          {
LABEL_134:
            std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*,false>(v350, v26, a3, a4 & 1);
            a4 = 0;
            v7 = v26 + 1;
            continue;
          }
          v90 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((uint64_t)v350, (uint64_t)v26);
          v7 = v26 + 1;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((uint64_t)(v26 + 1), v345))
          {
            if (v90)
              continue;
            goto LABEL_134;
          }
          a2 = (unint64_t)v26;
          if (v90)
            return;
          goto LABEL_1;
        }
        if (v8 == a2)
          return;
        v197 = (unint64_t)(v10 - 2) >> 1;
        v198 = v197;
        v344 = v9;
        v340 = v10;
        do
        {
          v199 = v198;
          if (v197 >= v198)
          {
            v200 = (2 * v198) | 1;
            v201 = &v350[v200];
            v202 = 2 * v198 + 2;
            v348 = v198;
            if (v202 < v10)
            {
              v203 = *v201;
              v204 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
              if (v204)
              {
                v205 = (unint64_t *)&v204->__shared_owners_;
                do
                  v206 = __ldxr(v205);
                while (__stxr(v206 + 1, v205));
              }
              *(_QWORD *)&v353 = *((_QWORD *)v201 + 2);
              v207 = (std::__shared_weak_count *)*((_QWORD *)v201 + 3);
              *((_QWORD *)&v353 + 1) = v207;
              if (v207)
              {
                v208 = (unint64_t *)&v207->__shared_owners_;
                do
                  v209 = __ldxr(v208);
                while (__stxr(v209 + 1, v208));
                v210 = lessThan((_QWORD *)v203, (_QWORD **)&v353);
                do
                  v211 = __ldaxr(v208);
                while (__stlxr(v211 - 1, v208));
                if (!v211)
                {
                  ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                  std::__shared_weak_count::__release_weak(v207);
                }
              }
              else
              {
                v210 = lessThan((_QWORD *)v203, (_QWORD **)&v353);
              }
              if (v204)
              {
                v212 = (unint64_t *)&v204->__shared_owners_;
                do
                  v213 = __ldaxr(v212);
                while (__stlxr(v213 - 1, v212));
                if (!v213)
                {
                  ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                  std::__shared_weak_count::__release_weak(v204);
                }
              }
              if (v210)
              {
                ++v201;
                v200 = v202;
              }
              v199 = v348;
            }
            v214 = *(_QWORD **)v201;
            v215 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
            if (v215)
            {
              v216 = (unint64_t *)&v215->__shared_owners_;
              do
                v217 = __ldxr(v216);
              while (__stxr(v217 + 1, v216));
            }
            v218 = (uint64_t)&v350[v199];
            v219 = *(_OWORD *)v218;
            v353 = v219;
            v220 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
            if (*((_QWORD *)&v219 + 1))
            {
              v221 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
              do
                v222 = __ldxr(v221);
              while (__stxr(v222 + 1, v221));
              v223 = lessThan(v214, (_QWORD **)&v353);
              do
                v224 = __ldaxr(v221);
              while (__stlxr(v224 - 1, v221));
              if (!v224)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
            }
            else
            {
              v223 = lessThan(v214, (_QWORD **)&v353);
            }
            if (v215)
            {
              v225 = (unint64_t *)&v215->__shared_owners_;
              do
                v226 = __ldaxr(v225);
              while (__stlxr(v226 - 1, v225));
              if (!v226)
              {
                ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                std::__shared_weak_count::__release_weak(v215);
              }
            }
            v9 = v344;
            v199 = v348;
            if (!v223)
            {
              v352 = *(_OWORD *)v218;
              *(_QWORD *)v218 = 0;
              *(_QWORD *)(v218 + 8) = 0;
              while (1)
              {
                v227 = (uint64_t)v201;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v218, v201);
                if (v197 < v200)
                {
LABEL_401:
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v227, &v352);
                  v252 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v253 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v254 = __ldaxr(v253);
                    while (__stlxr(v254 - 1, v253));
                    if (!v254)
                    {
                      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                      std::__shared_weak_count::__release_weak(v252);
                    }
                  }
                  v9 = v344;
                  v199 = v348;
                  goto LABEL_407;
                }
                v228 = (2 * v200) | 1;
                v201 = &v350[v228];
                v200 = 2 * v200 + 2;
                if (v200 < v10)
                  break;
                v200 = v228;
LABEL_384:
                v241 = *(_QWORD **)v201;
                v242 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
                if (v242)
                {
                  v243 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v244 = __ldxr(v243);
                  while (__stxr(v244 + 1, v243));
                }
                v245 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                v353 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v246 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v247 = __ldxr(v246);
                  while (__stxr(v247 + 1, v246));
                  v248 = lessThan(v241, (_QWORD **)&v353);
                  do
                    v249 = __ldaxr(v246);
                  while (__stlxr(v249 - 1, v246));
                  if (!v249)
                  {
                    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                    std::__shared_weak_count::__release_weak(v245);
                  }
                }
                else
                {
                  v248 = lessThan(v241, (_QWORD **)&v353);
                }
                if (v242)
                {
                  v250 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v251 = __ldaxr(v250);
                  while (__stlxr(v251 - 1, v250));
                  if (!v251)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                  }
                }
                v218 = v227;
                if (v248)
                  goto LABEL_401;
              }
              v229 = *v201;
              v230 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
              if (v230)
              {
                v231 = (unint64_t *)&v230->__shared_owners_;
                do
                  v232 = __ldxr(v231);
                while (__stxr(v232 + 1, v231));
              }
              *(_QWORD *)&v353 = *((_QWORD *)v201 + 2);
              v233 = (std::__shared_weak_count *)*((_QWORD *)v201 + 3);
              *((_QWORD *)&v353 + 1) = v233;
              if (v233)
              {
                v234 = v197;
                v235 = (unint64_t *)&v233->__shared_owners_;
                do
                  v236 = __ldxr(v235);
                while (__stxr(v236 + 1, v235));
                v237 = lessThan((_QWORD *)v229, (_QWORD **)&v353);
                do
                  v238 = __ldaxr(v235);
                while (__stlxr(v238 - 1, v235));
                if (!v238)
                {
                  ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                  std::__shared_weak_count::__release_weak(v233);
                }
                v197 = v234;
                v10 = v340;
                if (!v230)
                  goto LABEL_381;
              }
              else
              {
                v237 = lessThan((_QWORD *)v229, (_QWORD **)&v353);
                if (!v230)
                {
LABEL_381:
                  if (v237)
                    ++v201;
                  else
                    v200 = v228;
                  goto LABEL_384;
                }
              }
              v239 = (unint64_t *)&v230->__shared_owners_;
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                std::__shared_weak_count::__release_weak(v230);
              }
              goto LABEL_381;
            }
          }
LABEL_407:
          v198 = v199 - 1;
        }
        while (v199);
        v255 = (unint64_t)v9 >> 4;
        v256 = v345;
        v257 = v350;
        do
        {
          if (v255 < 2)
            goto LABEL_483;
          v346 = v256;
          v349 = v255;
          v258 = 0;
          v351 = *v257;
          *(_QWORD *)v257 = 0;
          *((_QWORD *)v257 + 1) = 0;
          v259 = (unint64_t)(v255 - 2) >> 1;
          v260 = (uint64_t)v257;
          do
          {
            v261 = v260 + 16 * v258 + 16;
            v262 = (2 * v258) | 1;
            v263 = 2 * v258 + 2;
            if (v263 >= v255)
              goto LABEL_431;
            v264 = *(_OWORD *)v261;
            v265 = *(std::__shared_weak_count **)(v260 + 16 * v258 + 24);
            if (v265)
            {
              v266 = (unint64_t *)&v265->__shared_owners_;
              do
                v267 = __ldxr(v266);
              while (__stxr(v267 + 1, v266));
            }
            *(_QWORD *)&v353 = *(_QWORD *)(v261 + 16);
            v268 = *(std::__shared_weak_count **)(v261 + 24);
            *((_QWORD *)&v353 + 1) = v268;
            if (v268)
            {
              v269 = (unint64_t *)&v268->__shared_owners_;
              do
                v270 = __ldxr(v269);
              while (__stxr(v270 + 1, v269));
              v271 = lessThan((_QWORD *)v264, (_QWORD **)&v353);
              do
                v272 = __ldaxr(v269);
              while (__stlxr(v272 - 1, v269));
              if (!v272)
              {
                ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                std::__shared_weak_count::__release_weak(v268);
              }
              v255 = v349;
              if (!v265)
                goto LABEL_429;
LABEL_425:
              v273 = (unint64_t *)&v265->__shared_owners_;
              do
                v274 = __ldaxr(v273);
              while (__stlxr(v274 - 1, v273));
              if (!v274)
              {
                ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                std::__shared_weak_count::__release_weak(v265);
              }
              goto LABEL_429;
            }
            v271 = lessThan((_QWORD *)v264, (_QWORD **)&v353);
            if (v265)
              goto LABEL_425;
LABEL_429:
            if (v271)
            {
              v261 += 16;
              v262 = v263;
            }
LABEL_431:
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v260, (__int128 *)v261);
            v260 = v261;
            v258 = v262;
          }
          while (v262 <= v259);
          v256 = v346;
          if (v261 == v346 - 16)
          {
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, &v351);
            v257 = v350;
            goto LABEL_478;
          }
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, (__int128 *)(v346 - 16));
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v346 - 16, &v351);
          v257 = v350;
          v275 = v261 - (_QWORD)v350 + 16;
          if (v275 < 17)
            goto LABEL_478;
          v276 = (unint64_t)((v275 >> 4) - 2) >> 1;
          v277 = &v350[v276];
          v278 = *v277;
          v279 = (std::__shared_weak_count *)*((_QWORD *)v277 + 1);
          if (v279)
          {
            v280 = (unint64_t *)&v279->__shared_owners_;
            do
              v281 = __ldxr(v280);
            while (__stxr(v281 + 1, v280));
          }
          *(_QWORD *)&v353 = *(_QWORD *)v261;
          v282 = *(std::__shared_weak_count **)(v261 + 8);
          *((_QWORD *)&v353 + 1) = v282;
          if (!v282)
          {
            v285 = lessThan((_QWORD *)v278, (_QWORD **)&v353);
            if (!v279)
              goto LABEL_452;
LABEL_448:
            v287 = (unint64_t *)&v279->__shared_owners_;
            do
              v288 = __ldaxr(v287);
            while (__stlxr(v288 - 1, v287));
            if (!v288)
            {
              ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
              std::__shared_weak_count::__release_weak(v279);
            }
            goto LABEL_452;
          }
          v283 = (unint64_t *)&v282->__shared_owners_;
          do
            v284 = __ldxr(v283);
          while (__stxr(v284 + 1, v283));
          v285 = lessThan((_QWORD *)v278, (_QWORD **)&v353);
          do
            v286 = __ldaxr(v283);
          while (__stlxr(v286 - 1, v283));
          if (!v286)
          {
            ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
            std::__shared_weak_count::__release_weak(v282);
          }
          v255 = v349;
          if (v279)
            goto LABEL_448;
LABEL_452:
          if (!v285)
            goto LABEL_478;
          v352 = *(_OWORD *)v261;
          *(_QWORD *)v261 = 0;
          *(_QWORD *)(v261 + 8) = 0;
          while (2)
          {
            v289 = (uint64_t)v277;
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, v277);
            if (v276)
            {
              v276 = (v276 - 1) >> 1;
              v277 = &v350[v276];
              v290 = *v277;
              v291 = (std::__shared_weak_count *)*((_QWORD *)v277 + 1);
              if (v291)
              {
                v292 = (unint64_t *)&v291->__shared_owners_;
                do
                  v293 = __ldxr(v292);
                while (__stxr(v293 + 1, v292));
              }
              v294 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v295 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v296 = __ldxr(v295);
                while (__stxr(v296 + 1, v295));
                v297 = lessThan((_QWORD *)v290, (_QWORD **)&v353);
                do
                  v298 = __ldaxr(v295);
                while (__stlxr(v298 - 1, v295));
                if (!v298)
                {
                  ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                  std::__shared_weak_count::__release_weak(v294);
                }
                v255 = v349;
                if (!v291)
                {
LABEL_472:
                  v261 = v289;
                  if (!v297)
                    break;
                  continue;
                }
              }
              else
              {
                v297 = lessThan((_QWORD *)v290, (_QWORD **)&v353);
                if (!v291)
                  goto LABEL_472;
              }
              v299 = (unint64_t *)&v291->__shared_owners_;
              do
                v300 = __ldaxr(v299);
              while (__stlxr(v300 - 1, v299));
              if (!v300)
              {
                ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                std::__shared_weak_count::__release_weak(v291);
              }
              goto LABEL_472;
            }
            break;
          }
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v289, &v352);
          v301 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          if (*((_QWORD *)&v352 + 1))
          {
            v302 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v303 = __ldaxr(v302);
            while (__stlxr(v303 - 1, v302));
            if (!v303)
            {
              ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
              std::__shared_weak_count::__release_weak(v301);
            }
          }
LABEL_478:
          v304 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
          if (*((_QWORD *)&v351 + 1))
          {
            v305 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
            do
              v306 = __ldaxr(v305);
            while (__stlxr(v306 - 1, v305));
            if (!v306)
            {
              ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
              std::__shared_weak_count::__release_weak(v304);
            }
          }
LABEL_483:
          v256 -= 16;
        }
        while ((unint64_t)v255-- > 2);
        return;
    }
  }
}

  v417 = (uint64_t)(a2 - 32);
  v419 = (uint64_t)(a2 - 16);
  v416 = (uint64_t)(a2 - 48);
  v7 = (__int128 *)a1;
  v421 = (uint64_t)a2;
  while (2)
  {
    a1 = (uint64_t)v7;
    v8 = a2 - (char *)v7;
    v9 = (a2 - (char *)v7) >> 4;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v192 = (uint64_t *)*((_QWORD *)a2 - 2);
        v193 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
        if (v193)
        {
          p_shared_owners = (unint64_t *)&v193->__shared_owners_;
          do
            v195 = __ldxr(p_shared_owners);
          while (__stxr(v195 + 1, p_shared_owners));
        }
        v196 = *(uint64_t **)a1;
        v197 = *(std::__shared_weak_count **)(a1 + 8);
        if (v197)
        {
          v198 = (unint64_t *)&v197->__shared_owners_;
          do
            v199 = __ldxr(v198);
          while (__stxr(v199 + 1, v198));
        }
        v200 = 0;
        if (v192 && v196)
        {
          v201 = *v192;
          v200 = v201 && (v202 = *v196) != 0 && *(double *)(v201 + 20) < *(double *)(v202 + 20);
        }
        if (v197)
        {
          v410 = (unint64_t *)&v197->__shared_owners_;
          do
            v411 = __ldaxr(v410);
          while (__stlxr(v411 - 1, v410));
          if (!v411)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
        if (v193)
        {
          v412 = (unint64_t *)&v193->__shared_owners_;
          do
            v413 = __ldaxr(v412);
          while (__stlxr(v413 - 1, v412));
          if (!v413)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
        }
        if (v200)
        {
          v414 = *(uint64_t **)a1;
          *(_QWORD *)a1 = *(_QWORD *)(v421 - 16);
          *(_QWORD *)(v421 - 16) = v414;
          v415 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(v421 - 8);
          *(_QWORD *)(v421 - 8) = v415;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(a1, a1 + 16, v419);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t **)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), v419);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(a1, a1 + 16, a1 + 32, (uint64_t **)(a1 + 48), v419);
        return;
      default:
        if (v8 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if ((char *)a1 == a2)
              return;
            v203 = a1 + 16;
            if ((char *)(a1 + 16) == a2)
              return;
            v204 = a1;
            while (1)
            {
              v205 = v203;
              v206 = *(uint64_t **)(v204 + 16);
              v207 = *(std::__shared_weak_count **)(v204 + 24);
              if (v207)
              {
                v208 = (unint64_t *)&v207->__shared_owners_;
                do
                  v209 = __ldxr(v208);
                while (__stxr(v209 + 1, v208));
              }
              v210 = *(uint64_t **)v204;
              v211 = *(std::__shared_weak_count **)(v204 + 8);
              if (v211)
              {
                v212 = (unint64_t *)&v211->__shared_owners_;
                do
                  v213 = __ldxr(v212);
                while (__stxr(v213 + 1, v212));
              }
              v214 = 0;
              if (v206 && v210)
              {
                v215 = *v206;
                v214 = v215 && (v216 = *v210) != 0 && *(double *)(v215 + 20) < *(double *)(v216 + 20);
              }
              if (v211)
              {
                v217 = (unint64_t *)&v211->__shared_owners_;
                do
                  v218 = __ldaxr(v217);
                while (__stlxr(v218 - 1, v217));
                if (!v218)
                {
                  ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                  std::__shared_weak_count::__release_weak(v211);
                }
              }
              if (!v207)
                goto LABEL_372;
              v219 = (unint64_t *)&v207->__shared_owners_;
              do
                v220 = __ldaxr(v219);
              while (__stlxr(v220 - 1, v219));
              if (!v220)
              {
                ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                std::__shared_weak_count::__release_weak(v207);
                if (!v214)
                  goto LABEL_407;
              }
              else
              {
LABEL_372:
                if (!v214)
                  goto LABEL_407;
              }
              v425 = *(_OWORD *)v205;
              *(_QWORD *)v205 = 0;
              *(_QWORD *)(v205 + 8) = 0;
              v221 = v205;
              while (1)
              {
                v222 = v221;
                v221 = v204;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v222, (__int128 *)v204);
                if (v204 == a1)
                  break;
                v223 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v224 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v225 = __ldxr(v224);
                  while (__stxr(v225 + 1, v224));
                }
                v226 = *(uint64_t **)(v204 - 16);
                v227 = *(std::__shared_weak_count **)(v204 - 8);
                if (v227)
                {
                  v228 = (unint64_t *)&v227->__shared_owners_;
                  do
                    v229 = __ldxr(v228);
                  while (__stxr(v229 + 1, v228));
                }
                v230 = 0;
                if (!(_QWORD)v223 || !v226)
                  goto LABEL_386;
                if (*(_QWORD *)v223)
                {
                  v231 = *v226;
                  if (v231)
                  {
                    v230 = *(double *)(*(_QWORD *)v223 + 20) < *(double *)(v231 + 20);
LABEL_386:
                    if (!v227)
                      goto LABEL_392;
                    goto LABEL_389;
                  }
                }
                v230 = 0;
                if (!v227)
                  goto LABEL_392;
LABEL_389:
                v232 = (unint64_t *)&v227->__shared_owners_;
                do
                  v233 = __ldaxr(v232);
                while (__stlxr(v233 - 1, v232));
                if (v233)
                {
LABEL_392:
                  if (*((_QWORD *)&v223 + 1))
                    goto LABEL_393;
                  goto LABEL_398;
                }
                ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                std::__shared_weak_count::__release_weak(v227);
                if (*((_QWORD *)&v223 + 1))
                {
LABEL_393:
                  v234 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
                  do
                    v235 = __ldaxr(v234);
                  while (__stlxr(v235 - 1, v234));
                  if (!v235)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v223 + 1) + 16))(*((_QWORD *)&v223 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v223 + 1));
                  }
                }
LABEL_398:
                v204 -= 16;
                if (!v230)
                  goto LABEL_401;
              }
              v221 = a1;
LABEL_401:
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v221, &v425);
              v236 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
              if (*((_QWORD *)&v425 + 1))
              {
                v237 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                do
                  v238 = __ldaxr(v237);
                while (__stlxr(v238 - 1, v237));
                if (!v238)
                {
                  ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                  std::__shared_weak_count::__release_weak(v236);
                }
              }
LABEL_407:
              v203 = v205 + 16;
              v204 = v205;
              if (v205 + 16 == v421)
                return;
            }
          }
          if ((char *)a1 == a2)
            return;
          v374 = a1 + 16;
          if ((char *)(a1 + 16) == a2)
            return;
          while (1)
          {
            v375 = v374;
            v376 = (__int128 *)a1;
            v377 = *(uint64_t **)(a1 + 16);
            v378 = *(std::__shared_weak_count **)(a1 + 24);
            if (v378)
            {
              v379 = (unint64_t *)&v378->__shared_owners_;
              do
                v380 = __ldxr(v379);
              while (__stxr(v380 + 1, v379));
            }
            v381 = *(uint64_t **)a1;
            v382 = *(std::__shared_weak_count **)(a1 + 8);
            if (v382)
            {
              v383 = (unint64_t *)&v382->__shared_owners_;
              do
                v384 = __ldxr(v383);
              while (__stxr(v384 + 1, v383));
            }
            v385 = 0;
            if (v377 && v381)
            {
              v386 = *v377;
              v385 = v386 && (v387 = *v381) != 0 && *(double *)(v386 + 20) < *(double *)(v387 + 20);
            }
            if (v382)
            {
              v388 = (unint64_t *)&v382->__shared_owners_;
              do
                v389 = __ldaxr(v388);
              while (__stlxr(v389 - 1, v388));
              if (!v389)
              {
                ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                std::__shared_weak_count::__release_weak(v382);
              }
            }
            if (v378)
            {
              v390 = (unint64_t *)&v378->__shared_owners_;
              do
                v391 = __ldaxr(v390);
              while (__stlxr(v391 - 1, v390));
              if (!v391)
                break;
            }
            if (v385)
              goto LABEL_639;
LABEL_670:
            v374 = v375 + 16;
            a1 = v375;
            if (v375 + 16 == v421)
              return;
          }
          ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
          std::__shared_weak_count::__release_weak(v378);
          if (!v385)
            goto LABEL_670;
LABEL_639:
          v425 = *(_OWORD *)v375;
          *(_QWORD *)v375 = 0;
          *(_QWORD *)(v375 + 8) = 0;
          v392 = v375;
          while (1)
          {
            v393 = v392;
            v392 = (uint64_t)v376;
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v393, v376);
            v394 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v395 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v396 = __ldxr(v395);
              while (__stxr(v396 + 1, v395));
            }
            v397 = (uint64_t *)*((_QWORD *)v376 - 2);
            v398 = (std::__shared_weak_count *)*((_QWORD *)v376 - 1);
            if (v398)
            {
              v399 = (unint64_t *)&v398->__shared_owners_;
              do
                v400 = __ldxr(v399);
              while (__stxr(v400 + 1, v399));
            }
            v401 = 0;
            if (!(_QWORD)v394 || !v397)
              goto LABEL_651;
            if (*(_QWORD *)v394)
            {
              v402 = *v397;
              if (v402)
                break;
            }
            v401 = 0;
            if (!v398)
              goto LABEL_657;
LABEL_654:
            v403 = (unint64_t *)&v398->__shared_owners_;
            do
              v404 = __ldaxr(v403);
            while (__stlxr(v404 - 1, v403));
            if (v404)
            {
LABEL_657:
              if (*((_QWORD *)&v394 + 1))
                goto LABEL_658;
              goto LABEL_663;
            }
            ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
            std::__shared_weak_count::__release_weak(v398);
            if (*((_QWORD *)&v394 + 1))
            {
LABEL_658:
              v405 = (unint64_t *)(*((_QWORD *)&v394 + 1) + 8);
              do
                v406 = __ldaxr(v405);
              while (__stlxr(v406 - 1, v405));
              if (!v406)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v394 + 1) + 16))(*((_QWORD *)&v394 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v394 + 1));
              }
            }
LABEL_663:
            --v376;
            if (!v401)
            {
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v392, &v425);
              v407 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
              if (*((_QWORD *)&v425 + 1))
              {
                v408 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                do
                  v409 = __ldaxr(v408);
                while (__stlxr(v409 - 1, v408));
                if (!v409)
                {
                  ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                  std::__shared_weak_count::__release_weak(v407);
                }
              }
              goto LABEL_670;
            }
          }
          v401 = *(double *)(*(_QWORD *)v394 + 20) < *(double *)(v402 + 20);
LABEL_651:
          if (!v398)
            goto LABEL_657;
          goto LABEL_654;
        }
        if (!a3)
        {
          if ((char *)a1 == a2)
            return;
          v239 = (unint64_t)(v9 - 2) >> 1;
          v240 = v239;
          v420 = v8;
          do
          {
            v241 = v240;
            if (v239 >= v240)
            {
              v242 = (2 * v240) | 1;
              v243 = a1 + 16 * v242;
              v244 = 2 * v240 + 2;
              if (v244 < v9)
              {
                v245 = *(uint64_t **)v243;
                v246 = *(std::__shared_weak_count **)(v243 + 8);
                if (v246)
                {
                  v247 = (unint64_t *)&v246->__shared_owners_;
                  do
                    v248 = __ldxr(v247);
                  while (__stxr(v248 + 1, v247));
                }
                v249 = *(uint64_t **)(v243 + 16);
                v250 = *(std::__shared_weak_count **)(v243 + 24);
                if (v250)
                {
                  v251 = (unint64_t *)&v250->__shared_owners_;
                  do
                    v252 = __ldxr(v251);
                  while (__stxr(v252 + 1, v251));
                }
                v253 = 0;
                if (v245 && v249)
                {
                  v254 = *v245;
                  v253 = v254 && (v255 = *v249) != 0 && *(double *)(v254 + 20) < *(double *)(v255 + 20);
                }
                if (v250)
                {
                  v256 = (unint64_t *)&v250->__shared_owners_;
                  do
                    v257 = __ldaxr(v256);
                  while (__stlxr(v257 - 1, v256));
                  if (!v257)
                  {
                    v258 = v241;
                    ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                    std::__shared_weak_count::__release_weak(v250);
                    v241 = v258;
                    v8 = v420;
                  }
                }
                if (v246)
                {
                  v259 = (unint64_t *)&v246->__shared_owners_;
                  do
                    v260 = __ldaxr(v259);
                  while (__stlxr(v260 - 1, v259));
                  if (!v260)
                  {
                    v261 = v241;
                    ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                    std::__shared_weak_count::__release_weak(v246);
                    v241 = v261;
                    v8 = v420;
                  }
                }
                if (v253)
                {
                  v243 += 16;
                  v242 = v244;
                }
              }
              v262 = *(uint64_t **)v243;
              v263 = *(std::__shared_weak_count **)(v243 + 8);
              if (v263)
              {
                v264 = (unint64_t *)&v263->__shared_owners_;
                do
                  v265 = __ldxr(v264);
                while (__stxr(v265 + 1, v264));
              }
              v266 = (uint64_t **)(a1 + 16 * v241);
              v267 = *v266;
              v268 = (std::__shared_weak_count *)v266[1];
              if (v268)
              {
                v269 = (unint64_t *)&v268->__shared_owners_;
                do
                  v270 = __ldxr(v269);
                while (__stxr(v270 + 1, v269));
              }
              v271 = 0;
              if (v262 && v267)
              {
                v272 = *v262;
                v271 = v272 && (v273 = *v267) != 0 && *(double *)(v272 + 20) < *(double *)(v273 + 20);
              }
              if (v268)
              {
                v274 = (unint64_t *)&v268->__shared_owners_;
                do
                  v275 = __ldaxr(v274);
                while (__stlxr(v275 - 1, v274));
                if (!v275)
                {
                  v276 = v241;
                  ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                  std::__shared_weak_count::__release_weak(v268);
                  v241 = v276;
                  v8 = v420;
                }
              }
              if (v263)
              {
                v277 = (unint64_t *)&v263->__shared_owners_;
                do
                  v278 = __ldaxr(v277);
                while (__stlxr(v278 - 1, v277));
                if (!v278)
                {
                  v279 = v241;
                  ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                  std::__shared_weak_count::__release_weak(v263);
                  v241 = v279;
                  v8 = v420;
                }
              }
              a2 = (char *)v421;
              if (!v271)
              {
                v418 = v241;
                v425 = *(_OWORD *)v266;
                *v266 = 0;
                v266[1] = 0;
                while (1)
                {
                  v280 = v243;
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v266, (__int128 *)v243);
                  if (v239 < v242)
                  {
LABEL_514:
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v280, &v425);
                    v311 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
                    v241 = v418;
                    v8 = v420;
                    if (*((_QWORD *)&v425 + 1))
                    {
                      v312 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                      do
                        v313 = __ldaxr(v312);
                      while (__stlxr(v313 - 1, v312));
                      if (!v313)
                      {
                        ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                        std::__shared_weak_count::__release_weak(v311);
                        v241 = v418;
                        v8 = v420;
                      }
                    }
                    a2 = (char *)v421;
                    break;
                  }
                  v281 = (2 * v242) | 1;
                  v243 = a1 + 16 * v281;
                  v242 = 2 * v242 + 2;
                  if (v242 >= v9)
                  {
                    v242 = v281;
                    goto LABEL_490;
                  }
                  v282 = *(uint64_t **)v243;
                  v283 = *(std::__shared_weak_count **)(v243 + 8);
                  if (v283)
                  {
                    v284 = (unint64_t *)&v283->__shared_owners_;
                    do
                      v285 = __ldxr(v284);
                    while (__stxr(v285 + 1, v284));
                  }
                  v286 = v239;
                  v287 = *(uint64_t **)(v243 + 16);
                  v288 = *(std::__shared_weak_count **)(v243 + 24);
                  if (v288)
                  {
                    v289 = (unint64_t *)&v288->__shared_owners_;
                    do
                      v290 = __ldxr(v289);
                    while (__stxr(v290 + 1, v289));
                  }
                  v291 = 0;
                  if (v282 && v287)
                  {
                    v292 = *v282;
                    v291 = v292 && (v293 = *v287) != 0 && *(double *)(v292 + 20) < *(double *)(v293 + 20);
                  }
                  if (!v288)
                    goto LABEL_480;
                  v294 = (unint64_t *)&v288->__shared_owners_;
                  do
                    v295 = __ldaxr(v294);
                  while (__stlxr(v295 - 1, v294));
                  if (!v295)
                  {
                    ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                    std::__shared_weak_count::__release_weak(v288);
                    if (v283)
                    {
LABEL_481:
                      v296 = (unint64_t *)&v283->__shared_owners_;
                      do
                        v297 = __ldaxr(v296);
                      while (__stlxr(v297 - 1, v296));
                      if (!v297)
                      {
                        ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                        std::__shared_weak_count::__release_weak(v283);
                      }
                    }
                  }
                  else
                  {
LABEL_480:
                    if (v283)
                      goto LABEL_481;
                  }
                  if (v291)
                    v243 += 16;
                  else
                    v242 = v281;
                  v239 = v286;
LABEL_490:
                  v298 = *(uint64_t **)v243;
                  v299 = *(std::__shared_weak_count **)(v243 + 8);
                  if (v299)
                  {
                    v300 = (unint64_t *)&v299->__shared_owners_;
                    do
                      v301 = __ldxr(v300);
                    while (__stxr(v301 + 1, v300));
                  }
                  v302 = v425;
                  if (*((_QWORD *)&v425 + 1))
                  {
                    v303 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                    do
                      v304 = __ldxr(v303);
                    while (__stxr(v304 + 1, v303));
                  }
                  v305 = 0;
                  if (!v298 || !(_QWORD)v302)
                    goto LABEL_501;
                  v306 = *v298;
                  if (v306 && *(_QWORD *)v302)
                  {
                    v305 = *(double *)(v306 + 20) < *(double *)(*(_QWORD *)v302 + 20);
LABEL_501:
                    if (!*((_QWORD *)&v302 + 1))
                      goto LABEL_507;
                    goto LABEL_504;
                  }
                  v305 = 0;
                  if (!*((_QWORD *)&v302 + 1))
                    goto LABEL_507;
LABEL_504:
                  v307 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
                  do
                    v308 = __ldaxr(v307);
                  while (__stlxr(v308 - 1, v307));
                  if (v308)
                  {
LABEL_507:
                    if (v299)
                      goto LABEL_508;
                    goto LABEL_513;
                  }
                  (*(void (**)(_QWORD))(**((_QWORD **)&v302 + 1) + 16))(*((_QWORD *)&v302 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v302 + 1));
                  if (v299)
                  {
LABEL_508:
                    v309 = (unint64_t *)&v299->__shared_owners_;
                    do
                      v310 = __ldaxr(v309);
                    while (__stlxr(v310 - 1, v309));
                    if (!v310)
                    {
                      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                      std::__shared_weak_count::__release_weak(v299);
                    }
                  }
LABEL_513:
                  v266 = (uint64_t **)v280;
                  if (v305)
                    goto LABEL_514;
                }
              }
            }
            v240 = v241 - 1;
          }
          while (v241);
          v314 = (unint64_t)v8 >> 4;
LABEL_522:
          if (v314 < 2)
            goto LABEL_613;
          v422 = a2;
          v315 = 0;
          v316 = a1;
          v424 = *(_OWORD *)a1;
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          while (1)
          {
            v317 = v316 + 16 * (v315 + 1);
            v318 = (2 * v315) | 1;
            v319 = 2 * v315 + 2;
            if (v319 < v314)
              break;
LABEL_550:
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v316, (__int128 *)v317);
            v316 = v317;
            v315 = v318;
            if (v318 > (uint64_t)((unint64_t)(v314 - 2) >> 1))
            {
              if ((char *)v317 == v422 - 16)
              {
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v317, &v424);
                goto LABEL_607;
              }
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v317, (__int128 *)v422 - 1);
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v422 - 16), &v424);
              v335 = v317 - a1 + 16;
              if (v335 >= 17)
              {
                v336 = (unint64_t)((v335 >> 4) - 2) >> 1;
                v337 = a1 + 16 * v336;
                v338 = *(uint64_t **)v337;
                v339 = *(std::__shared_weak_count **)(v337 + 8);
                if (v339)
                {
                  v340 = (unint64_t *)&v339->__shared_owners_;
                  do
                    v341 = __ldxr(v340);
                  while (__stxr(v341 + 1, v340));
                }
                v342 = *(uint64_t **)v317;
                v343 = *(std::__shared_weak_count **)(v317 + 8);
                if (v343)
                {
                  v344 = (unint64_t *)&v343->__shared_owners_;
                  do
                    v345 = __ldxr(v344);
                  while (__stxr(v345 + 1, v344));
                }
                v346 = 0;
                if (v338 && v342)
                {
                  v347 = *v338;
                  v346 = v347 && (v348 = *v342) != 0 && *(double *)(v347 + 20) < *(double *)(v348 + 20);
                }
                if (v343)
                {
                  v349 = (unint64_t *)&v343->__shared_owners_;
                  do
                    v350 = __ldaxr(v349);
                  while (__stlxr(v350 - 1, v349));
                  if (!v350)
                  {
                    ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                    std::__shared_weak_count::__release_weak(v343);
                  }
                }
                if (v339)
                {
                  v351 = (unint64_t *)&v339->__shared_owners_;
                  do
                    v352 = __ldaxr(v351);
                  while (__stlxr(v352 - 1, v351));
                  if (!v352)
                  {
                    ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                    std::__shared_weak_count::__release_weak(v339);
                  }
                }
                if (v346)
                {
                  v425 = *(_OWORD *)v317;
                  *(_QWORD *)v317 = 0;
                  *(_QWORD *)(v317 + 8) = 0;
                  while (1)
                  {
                    v353 = v337;
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v317, (__int128 *)v337);
                    if (!v336)
                    {
LABEL_602:
                      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v353, &v425);
                      v367 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
                      if (*((_QWORD *)&v425 + 1))
                      {
                        v368 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                        do
                          v369 = __ldaxr(v368);
                        while (__stlxr(v369 - 1, v368));
                        if (!v369)
                        {
                          ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                          std::__shared_weak_count::__release_weak(v367);
                        }
                      }
                      break;
                    }
                    v336 = (v336 - 1) >> 1;
                    v337 = a1 + 16 * v336;
                    v354 = *(uint64_t **)v337;
                    v355 = *(std::__shared_weak_count **)(v337 + 8);
                    if (v355)
                    {
                      v356 = (unint64_t *)&v355->__shared_owners_;
                      do
                        v357 = __ldxr(v356);
                      while (__stxr(v357 + 1, v356));
                    }
                    v358 = v425;
                    if (*((_QWORD *)&v425 + 1))
                    {
                      v359 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                      do
                        v360 = __ldxr(v359);
                      while (__stxr(v360 + 1, v359));
                    }
                    v361 = 0;
                    if (v354 && (_QWORD)v358)
                    {
                      v362 = *v354;
                      v361 = v362 && *(_QWORD *)v358 && *(double *)(v362 + 20) < *(double *)(*(_QWORD *)v358 + 20);
                    }
                    if (!*((_QWORD *)&v358 + 1))
                      goto LABEL_595;
                    v363 = (unint64_t *)(*((_QWORD *)&v358 + 1) + 8);
                    do
                      v364 = __ldaxr(v363);
                    while (__stlxr(v364 - 1, v363));
                    if (!v364)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v358 + 1) + 16))(*((_QWORD *)&v358 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v358 + 1));
                      if (v355)
                      {
LABEL_596:
                        v365 = (unint64_t *)&v355->__shared_owners_;
                        do
                          v366 = __ldaxr(v365);
                        while (__stlxr(v366 - 1, v365));
                        if (!v366)
                        {
                          ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
                          std::__shared_weak_count::__release_weak(v355);
                        }
                      }
                    }
                    else
                    {
LABEL_595:
                      if (v355)
                        goto LABEL_596;
                    }
                    v317 = v353;
                    if (!v361)
                      goto LABEL_602;
                  }
                }
              }
LABEL_607:
              v370 = (std::__shared_weak_count *)*((_QWORD *)&v424 + 1);
              if (*((_QWORD *)&v424 + 1))
              {
                v371 = (unint64_t *)(*((_QWORD *)&v424 + 1) + 8);
                do
                  v372 = __ldaxr(v371);
                while (__stlxr(v372 - 1, v371));
                if (!v372)
                {
                  ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
                  std::__shared_weak_count::__release_weak(v370);
                }
              }
              a2 = v422;
LABEL_613:
              a2 -= 16;
              if ((unint64_t)v314-- <= 2)
                return;
              goto LABEL_522;
            }
          }
          v320 = *(uint64_t **)v317;
          v321 = *(std::__shared_weak_count **)(v317 + 8);
          if (v321)
          {
            v322 = (unint64_t *)&v321->__shared_owners_;
            do
              v323 = __ldxr(v322);
            while (__stxr(v323 + 1, v322));
          }
          v324 = *(uint64_t **)(v317 + 16);
          v325 = *(std::__shared_weak_count **)(v317 + 24);
          if (v325)
          {
            v326 = (unint64_t *)&v325->__shared_owners_;
            do
              v327 = __ldxr(v326);
            while (__stxr(v327 + 1, v326));
          }
          v328 = 0;
          if (v320 && v324)
          {
            v329 = *v320;
            if (!v329 || (v330 = *v324) == 0)
            {
              v328 = 0;
              if (!v325)
                goto LABEL_542;
LABEL_539:
              v331 = (unint64_t *)&v325->__shared_owners_;
              do
                v332 = __ldaxr(v331);
              while (__stlxr(v332 - 1, v331));
              if (!v332)
              {
                ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                std::__shared_weak_count::__release_weak(v325);
                if (v321)
                  goto LABEL_543;
                goto LABEL_548;
              }
LABEL_542:
              if (v321)
              {
LABEL_543:
                v333 = (unint64_t *)&v321->__shared_owners_;
                do
                  v334 = __ldaxr(v333);
                while (__stlxr(v334 - 1, v333));
                if (!v334)
                {
                  ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                  std::__shared_weak_count::__release_weak(v321);
                }
              }
LABEL_548:
              if (v328)
              {
                v317 += 16;
                v318 = v319;
              }
              goto LABEL_550;
            }
            v328 = *(double *)(v329 + 20) < *(double *)(v330 + 20);
          }
          if (!v325)
            goto LABEL_542;
          goto LABEL_539;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = a1;
        v12 = (_OWORD *)(a1 + 16 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t)v12, a1, v419);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(a1, (uint64_t)v12, v419);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(a1 + 16, (uint64_t)(v12 - 1), v417);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(a1 + 32, a1 + 16 + 16 * v10, v416);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t)(v12 - 1), (uint64_t)v12, a1 + 16 + 16 * v10);
          v13 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v12;
          *v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *(uint64_t **)(a1 - 16);
          v15 = *(std::__shared_weak_count **)(a1 - 8);
          if (v15)
          {
            v16 = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v18 = *(uint64_t **)a1;
          v19 = *(std::__shared_weak_count **)(a1 + 8);
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v22 = 0;
          if (v14 && v18)
          {
            v23 = *v14;
            v22 = v23 && (v24 = *v18) != 0 && *(double *)(v23 + 20) < *(double *)(v24 + 20);
          }
          if (v19)
          {
            v25 = (unint64_t *)&v19->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          if (v15)
          {
            v27 = (unint64_t *)&v15->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          v11 = a1;
          if (!v22)
          {
            v105 = *(uint64_t **)a1;
            v106 = *(std::__shared_weak_count **)(a1 + 8);
            *(_QWORD *)&v425 = *(_QWORD *)a1;
            *((_QWORD *)&v425 + 1) = v106;
            *(_QWORD *)a1 = 0;
            *(_QWORD *)(a1 + 8) = 0;
            if (v106)
            {
              v107 = (unint64_t *)&v106->__shared_owners_;
              do
                v108 = __ldxr(v107);
              while (__stxr(v108 + 1, v107));
            }
            v109 = (uint64_t *)*((_QWORD *)a2 - 2);
            v110 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
            if (v110)
            {
              v111 = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
            }
            v113 = 0;
            if (v105 && v109)
            {
              v114 = *v105;
              v113 = v114 && (v115 = *v109) != 0 && *(double *)(v114 + 20) < *(double *)(v115 + 20);
            }
            if (v110)
            {
              v116 = (unint64_t *)&v110->__shared_owners_;
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            v7 = (__int128 *)a1;
            if (v106)
            {
              v118 = (unint64_t *)&v106->__shared_owners_;
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
            if (v113)
            {
              v7 = (__int128 *)a1;
              do
              {
                v120 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v121 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v122 = __ldxr(v121);
                  while (__stxr(v122 + 1, v121));
                }
                v123 = (uint64_t *)*((_QWORD *)v7 + 2);
                v124 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                if (v124)
                {
                  v125 = (unint64_t *)&v124->__shared_owners_;
                  do
                    v126 = __ldxr(v125);
                  while (__stxr(v126 + 1, v125));
                }
                v127 = 0;
                if ((_QWORD)v120 && v123)
                  v127 = *(_QWORD *)v120
                      && (v128 = *v123) != 0
                      && *(double *)(*(_QWORD *)v120 + 20) < *(double *)(v128 + 20);
                if (v124)
                {
                  v129 = (unint64_t *)&v124->__shared_owners_;
                  do
                    v130 = __ldaxr(v129);
                  while (__stlxr(v130 - 1, v129));
                  if (!v130)
                  {
                    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                    std::__shared_weak_count::__release_weak(v124);
                  }
                }
                if (*((_QWORD *)&v120 + 1))
                {
                  v131 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
                  do
                    v132 = __ldaxr(v131);
                  while (__stlxr(v132 - 1, v131));
                  if (!v132)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v120 + 1) + 16))(*((_QWORD *)&v120 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v120 + 1));
                  }
                }
                ++v7;
              }
              while (!v127);
            }
            else
            {
              while (1)
              {
                v178 = v7++;
                if (v7 >= (__int128 *)a2)
                  break;
                v179 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v180 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v181 = __ldxr(v180);
                  while (__stxr(v181 + 1, v180));
                }
                v182 = (uint64_t *)*((_QWORD *)v178 + 2);
                v183 = (std::__shared_weak_count *)*((_QWORD *)v178 + 3);
                if (v183)
                {
                  v184 = (unint64_t *)&v183->__shared_owners_;
                  do
                    v185 = __ldxr(v184);
                  while (__stxr(v185 + 1, v184));
                }
                v186 = 0;
                if ((_QWORD)v179 && v182)
                  v186 = *(_QWORD *)v179
                      && (v187 = *v182) != 0
                      && *(double *)(*(_QWORD *)v179 + 20) < *(double *)(v187 + 20);
                if (v183)
                {
                  v188 = (unint64_t *)&v183->__shared_owners_;
                  do
                    v189 = __ldaxr(v188);
                  while (__stlxr(v189 - 1, v188));
                  if (!v189)
                  {
                    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                    std::__shared_weak_count::__release_weak(v183);
                  }
                }
                if (!*((_QWORD *)&v179 + 1))
                  goto LABEL_325;
                v190 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
                do
                  v191 = __ldaxr(v190);
                while (__stlxr(v191 - 1, v190));
                if (!v191)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v179 + 1) + 16))(*((_QWORD *)&v179 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v179 + 1));
                  if (v186)
                    break;
                }
                else
                {
LABEL_325:
                  if (v186)
                    break;
                }
              }
            }
            v133 = (__int128 *)a2;
            if (v7 < (__int128 *)a2)
            {
              v133 = (__int128 *)a2;
              do
              {
                v134 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v135 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v136 = __ldxr(v135);
                  while (__stxr(v136 + 1, v135));
                }
                v137 = (uint64_t *)*((_QWORD *)v133 - 2);
                v138 = (std::__shared_weak_count *)*((_QWORD *)v133 - 1);
                if (v138)
                {
                  v139 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v140 = __ldxr(v139);
                  while (__stxr(v140 + 1, v139));
                }
                v141 = 0;
                if ((_QWORD)v134 && v137)
                  v141 = *(_QWORD *)v134
                      && (v142 = *v137) != 0
                      && *(double *)(*(_QWORD *)v134 + 20) < *(double *)(v142 + 20);
                if (v138)
                {
                  v143 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v144 = __ldaxr(v143);
                  while (__stlxr(v144 - 1, v143));
                  if (!v144)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                }
                if (*((_QWORD *)&v134 + 1))
                {
                  v145 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v134 + 1) + 16))(*((_QWORD *)&v134 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v134 + 1));
                  }
                }
                --v133;
              }
              while (v141);
            }
LABEL_294:
            if (v7 < v133)
            {
              v147 = *(_QWORD *)v7;
              *(_QWORD *)v7 = *(_QWORD *)v133;
              *(_QWORD *)v133 = v147;
              v148 = *((_QWORD *)v7 + 1);
              *((_QWORD *)v7 + 1) = *((_QWORD *)v133 + 1);
              *((_QWORD *)v133 + 1) = v148;
              while (1)
              {
                v149 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v150 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v151 = __ldxr(v150);
                  while (__stxr(v151 + 1, v150));
                }
                v152 = (uint64_t *)*((_QWORD *)v7 + 2);
                v153 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                if (v153)
                {
                  v154 = (unint64_t *)&v153->__shared_owners_;
                  do
                    v155 = __ldxr(v154);
                  while (__stxr(v155 + 1, v154));
                }
                v156 = 0;
                if (!(_QWORD)v149 || !v152)
                  goto LABEL_257;
                if (*(_QWORD *)v149)
                {
                  v157 = *v152;
                  if (v157)
                    break;
                }
                v156 = 0;
                if (!v153)
                  goto LABEL_263;
LABEL_260:
                v158 = (unint64_t *)&v153->__shared_owners_;
                do
                  v159 = __ldaxr(v158);
                while (__stlxr(v159 - 1, v158));
                if (v159)
                {
LABEL_263:
                  if (*((_QWORD *)&v149 + 1))
                    goto LABEL_264;
                  goto LABEL_269;
                }
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
                if (*((_QWORD *)&v149 + 1))
                {
LABEL_264:
                  v160 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                  do
                    v161 = __ldaxr(v160);
                  while (__stlxr(v161 - 1, v160));
                  if (!v161)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
                  }
                }
LABEL_269:
                ++v7;
                if (v156)
                {
                  while (1)
                  {
                    v162 = v425;
                    if (*((_QWORD *)&v425 + 1))
                    {
                      v163 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                      do
                        v164 = __ldxr(v163);
                      while (__stxr(v164 + 1, v163));
                    }
                    v165 = (uint64_t *)*((_QWORD *)v133 - 2);
                    v166 = (std::__shared_weak_count *)*((_QWORD *)v133 - 1);
                    if (v166)
                    {
                      v167 = (unint64_t *)&v166->__shared_owners_;
                      do
                        v168 = __ldxr(v167);
                      while (__stxr(v168 + 1, v167));
                    }
                    v169 = 0;
                    if (!(_QWORD)v162 || !v165)
                      goto LABEL_281;
                    if (*(_QWORD *)v162)
                    {
                      v170 = *v165;
                      if (v170)
                        break;
                    }
                    v169 = 0;
                    if (!v166)
                      goto LABEL_287;
LABEL_284:
                    v171 = (unint64_t *)&v166->__shared_owners_;
                    do
                      v172 = __ldaxr(v171);
                    while (__stlxr(v172 - 1, v171));
                    if (v172)
                    {
LABEL_287:
                      if (*((_QWORD *)&v162 + 1))
                        goto LABEL_288;
                      goto LABEL_293;
                    }
                    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                    std::__shared_weak_count::__release_weak(v166);
                    if (*((_QWORD *)&v162 + 1))
                    {
LABEL_288:
                      v173 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
                      do
                        v174 = __ldaxr(v173);
                      while (__stlxr(v174 - 1, v173));
                      if (!v174)
                      {
                        (*(void (**)(_QWORD))(**((_QWORD **)&v162 + 1) + 16))(*((_QWORD *)&v162 + 1));
                        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v162 + 1));
                      }
                    }
LABEL_293:
                    --v133;
                    if (!v169)
                      goto LABEL_294;
                  }
                  v169 = *(double *)(*(_QWORD *)v162 + 20) < *(double *)(v170 + 20);
LABEL_281:
                  if (!v166)
                    goto LABEL_287;
                  goto LABEL_284;
                }
              }
              v156 = *(double *)(*(_QWORD *)v149 + 20) < *(double *)(v157 + 20);
LABEL_257:
              if (!v153)
                goto LABEL_263;
              goto LABEL_260;
            }
            if (v7 - 1 != (__int128 *)a1)
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](a1, v7 - 1);
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v7 - 1), &v425);
            v175 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
            if (*((_QWORD *)&v425 + 1))
            {
              v176 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v177 = __ldaxr(v176);
              while (__stlxr(v177 - 1, v176));
              if (!v177)
              {
                ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                std::__shared_weak_count::__release_weak(v175);
              }
            }
            a4 = 0;
            continue;
          }
        }
        v425 = *(_OWORD *)v11;
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        v29 = v11;
        do
        {
          v30 = (__int128 *)v29;
          v31 = *(uint64_t **)(v29 + 16);
          v32 = *(std::__shared_weak_count **)(v29 + 24);
          v29 += 16;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          v35 = v425;
          if (*((_QWORD *)&v425 + 1))
          {
            v36 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          v38 = 0;
          if (!v31 || !(_QWORD)v35)
            goto LABEL_44;
          v39 = *v31;
          if (v39 && *(_QWORD *)v35)
          {
            v38 = *(double *)(v39 + 20) < *(double *)(*(_QWORD *)v35 + 20);
LABEL_44:
            if (!*((_QWORD *)&v35 + 1))
              goto LABEL_50;
            goto LABEL_47;
          }
          v38 = 0;
          if (!*((_QWORD *)&v35 + 1))
            goto LABEL_50;
LABEL_47:
          v40 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
            if (!v32)
              continue;
            goto LABEL_51;
          }
LABEL_50:
          if (!v32)
            continue;
LABEL_51:
          v42 = (unint64_t *)&v32->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        while (v38);
        v44 = (__int128 *)a2;
        if (v30 != (__int128 *)a1)
        {
          while (1)
          {
            v45 = (uint64_t *)*((_QWORD *)v44 - 2);
            v46 = (std::__shared_weak_count *)*((_QWORD *)v44-- - 1);
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
            v49 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v50 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v51 = __ldxr(v50);
              while (__stxr(v51 + 1, v50));
            }
            v52 = 0;
            if (!v45 || !(_QWORD)v49)
              goto LABEL_69;
            v53 = *v45;
            if (v53)
            {
              if (*(_QWORD *)v49)
                break;
            }
            v52 = 0;
            if (!*((_QWORD *)&v49 + 1))
              goto LABEL_75;
LABEL_72:
            v54 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (v55)
            {
LABEL_75:
              if (v46)
                goto LABEL_76;
              goto LABEL_81;
            }
            (*(void (**)(_QWORD))(**((_QWORD **)&v49 + 1) + 16))(*((_QWORD *)&v49 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v49 + 1));
            if (v46)
            {
LABEL_76:
              v56 = (unint64_t *)&v46->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
LABEL_81:
            if (v52)
              goto LABEL_109;
          }
          v52 = *(double *)(v53 + 20) < *(double *)(*(_QWORD *)v49 + 20);
LABEL_69:
          if (!*((_QWORD *)&v49 + 1))
            goto LABEL_75;
          goto LABEL_72;
        }
        v44 = (__int128 *)a2;
        while (2)
        {
          if (v29 < (unint64_t)v44)
          {
            v58 = (uint64_t *)*((_QWORD *)v44 - 2);
            v59 = (std::__shared_weak_count *)*((_QWORD *)v44-- - 1);
            if (v59)
            {
              v60 = (unint64_t *)&v59->__shared_owners_;
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            v62 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v63 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v64 = __ldxr(v63);
              while (__stxr(v64 + 1, v63));
            }
            v65 = 0;
            if (v58 && (_QWORD)v62)
            {
              v66 = *v58;
              if (v66 && *(_QWORD *)v62)
              {
                v65 = *(double *)(v66 + 20) < *(double *)(*(_QWORD *)v62 + 20);
                goto LABEL_96;
              }
              v65 = 0;
              if (*((_QWORD *)&v62 + 1))
              {
LABEL_99:
                v67 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (v68)
                  goto LABEL_102;
                (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
                if (!v59)
                {
LABEL_108:
                  if (v65)
                    break;
                  continue;
                }
LABEL_103:
                v69 = (unint64_t *)&v59->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
                goto LABEL_108;
              }
            }
            else
            {
LABEL_96:
              if (*((_QWORD *)&v62 + 1))
                goto LABEL_99;
            }
LABEL_102:
            if (!v59)
              goto LABEL_108;
            goto LABEL_103;
          }
          break;
        }
LABEL_109:
        if (v29 >= (unint64_t)v44)
          goto LABEL_161;
        v71 = (__int128 *)v29;
        v72 = v44;
        while (2)
        {
          v73 = *(_QWORD *)v71;
          *(_QWORD *)v71 = *(_QWORD *)v72;
          *(_QWORD *)v72 = v73;
          v74 = *((_QWORD *)v71 + 1);
          *((_QWORD *)v71 + 1) = *((_QWORD *)v72 + 1);
          *((_QWORD *)v72 + 1) = v74;
          while (2)
          {
            v30 = v71;
            v75 = (uint64_t *)*((_QWORD *)v71 + 2);
            v76 = (std::__shared_weak_count *)*((_QWORD *)v71++ + 3);
            if (v76)
            {
              v77 = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldxr(v77);
              while (__stxr(v78 + 1, v77));
            }
            v79 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v80 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v81 = __ldxr(v80);
              while (__stxr(v81 + 1, v80));
            }
            v82 = 0;
            if (!v75 || !(_QWORD)v79)
            {
LABEL_123:
              if (*((_QWORD *)&v79 + 1))
                goto LABEL_126;
LABEL_129:
              if (!v76)
                goto LABEL_135;
LABEL_130:
              v86 = (unint64_t *)&v76->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
              goto LABEL_135;
            }
            v83 = *v75;
            if (v83 && *(_QWORD *)v79)
            {
              v82 = *(double *)(v83 + 20) < *(double *)(*(_QWORD *)v79 + 20);
              goto LABEL_123;
            }
            v82 = 0;
            if (!*((_QWORD *)&v79 + 1))
              goto LABEL_129;
LABEL_126:
            v84 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (v85)
              goto LABEL_129;
            (*(void (**)(_QWORD))(**((_QWORD **)&v79 + 1) + 16))(*((_QWORD *)&v79 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v79 + 1));
            if (v76)
              goto LABEL_130;
LABEL_135:
            if (v82)
              continue;
            break;
          }
          while (2)
          {
            v88 = (uint64_t *)*((_QWORD *)v72 - 2);
            v89 = (std::__shared_weak_count *)*((_QWORD *)v72-- - 1);
            if (v89)
            {
              v90 = (unint64_t *)&v89->__shared_owners_;
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
            }
            v92 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v93 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v94 = __ldxr(v93);
              while (__stxr(v94 + 1, v93));
            }
            v95 = 0;
            if (!v88 || !(_QWORD)v92)
            {
LABEL_147:
              if (*((_QWORD *)&v92 + 1))
                goto LABEL_150;
LABEL_153:
              if (!v89)
                goto LABEL_159;
LABEL_154:
              v99 = (unint64_t *)&v89->__shared_owners_;
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
              goto LABEL_159;
            }
            v96 = *v88;
            if (v96 && *(_QWORD *)v92)
            {
              v95 = *(double *)(v96 + 20) < *(double *)(*(_QWORD *)v92 + 20);
              goto LABEL_147;
            }
            v95 = 0;
            if (!*((_QWORD *)&v92 + 1))
              goto LABEL_153;
LABEL_150:
            v97 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (v98)
              goto LABEL_153;
            (*(void (**)(_QWORD))(**((_QWORD **)&v92 + 1) + 16))(*((_QWORD *)&v92 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v92 + 1));
            if (v89)
              goto LABEL_154;
LABEL_159:
            if (!v95)
              continue;
            break;
          }
          if (v71 < v72)
            continue;
          break;
        }
LABEL_161:
        if (v30 != (__int128 *)a1)
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](a1, v30);
        std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v30, &v425);
        v101 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
        a2 = (char *)v421;
        if (*((_QWORD *)&v425 + 1))
        {
          v102 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        if (v29 < (unint64_t)v44)
        {
LABEL_171:
          std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*,false>(a1, v30, a3, a4 & 1);
          a4 = 0;
          v7 = v30 + 1;
          continue;
        }
        v104 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(a1, (uint64_t)v30);
        v7 = v30 + 1;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t)(v30 + 1), v421))
        {
          if (v104)
            continue;
          goto LABEL_171;
        }
        a2 = (char *)v30;
        if (!v104)
          goto LABEL_1;
        return;
    }
  }
}

  v342 = a2 - 32;
  v343 = a2 - 16;
  v341 = a2 - 48;
  v7 = a1;
  v345 = a2;
  while (2)
  {
    v8 = (uint64_t)v7;
    v9 = a2 - (_QWORD)v7;
    v10 = (uint64_t)(a2 - (_QWORD)v7) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v159 = *(_QWORD **)(a2 - 16);
        v160 = *(std::__shared_weak_count **)(a2 - 8);
        if (v160)
        {
          p_shared_owners = (unint64_t *)&v160->__shared_owners_;
          do
            v162 = __ldxr(p_shared_owners);
          while (__stxr(v162 + 1, p_shared_owners));
        }
        v163 = *(std::__shared_weak_count **)(v8 + 8);
        *(_QWORD *)&v353 = *(_QWORD *)v8;
        *((_QWORD *)&v353 + 1) = v163;
        if (v163)
        {
          v164 = (unint64_t *)&v163->__shared_owners_;
          do
            v165 = __ldxr(v164);
          while (__stxr(v165 + 1, v164));
          v166 = lessThan(v159, (_QWORD **)&v353);
          do
            v167 = __ldaxr(v164);
          while (__stlxr(v167 - 1, v164));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        else
        {
          v166 = lessThan(v159, (_QWORD **)&v353);
        }
        if (v160)
        {
          v336 = (unint64_t *)&v160->__shared_owners_;
          do
            v337 = __ldaxr(v336);
          while (__stlxr(v337 - 1, v336));
          if (!v337)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        if (v166)
        {
          v338 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v338;
          v339 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v339;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v8, v8 + 16, v343);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v8, v8 + 16, v8 + 32, v343);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v8, v8 + 16, v8 + 32, v8 + 48, v343);
        return;
      default:
        if (v9 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (v8 == a2)
              return;
            v168 = v8 + 16;
            if (v8 + 16 == a2)
              return;
            v169 = v8;
            while (1)
            {
              v170 = v168;
              v171 = *(_QWORD **)(v169 + 16);
              v172 = *(std::__shared_weak_count **)(v169 + 24);
              if (v172)
              {
                v173 = (unint64_t *)&v172->__shared_owners_;
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
              }
              v175 = *(std::__shared_weak_count **)(v169 + 8);
              *(_QWORD *)&v353 = *(_QWORD *)v169;
              *((_QWORD *)&v353 + 1) = v175;
              if (v175)
              {
                v176 = (unint64_t *)&v175->__shared_owners_;
                do
                  v177 = __ldxr(v176);
                while (__stxr(v177 + 1, v176));
                v178 = lessThan(v171, (_QWORD **)&v353);
                do
                  v179 = __ldaxr(v176);
                while (__stlxr(v179 - 1, v176));
                if (!v179)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              else
              {
                v178 = lessThan(v171, (_QWORD **)&v353);
              }
              if (!v172)
                goto LABEL_290;
              v180 = (unint64_t *)&v172->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                std::__shared_weak_count::__release_weak(v172);
                if (!v178)
                  goto LABEL_318;
              }
              else
              {
LABEL_290:
                if (!v178)
                  goto LABEL_318;
              }
              v352 = *(_OWORD *)v170;
              *(_QWORD *)v170 = 0;
              *(_QWORD *)(v170 + 8) = 0;
              v182 = v170;
              while (1)
              {
                v183 = v182;
                v182 = v169;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v183, (__int128 *)v169);
                if (v169 == v8)
                  break;
                v184 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v185 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v186 = __ldxr(v185);
                  while (__stxr(v186 + 1, v185));
                }
                *(_QWORD *)&v353 = *(_QWORD *)(v169 - 16);
                v187 = *(std::__shared_weak_count **)(v169 - 8);
                *((_QWORD *)&v353 + 1) = v187;
                if (v187)
                {
                  v188 = (unint64_t *)&v187->__shared_owners_;
                  do
                    v189 = __ldxr(v188);
                  while (__stxr(v189 + 1, v188));
                  v190 = lessThan((_QWORD *)v184, (_QWORD **)&v353);
                  do
                    v191 = __ldaxr(v188);
                  while (__stlxr(v191 - 1, v188));
                  if (!v191)
                  {
                    ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                    std::__shared_weak_count::__release_weak(v187);
                  }
                }
                else
                {
                  v190 = lessThan((_QWORD *)v184, (_QWORD **)&v353);
                }
                if (*((_QWORD *)&v184 + 1))
                {
                  v192 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
                  do
                    v193 = __ldaxr(v192);
                  while (__stlxr(v193 - 1, v192));
                  if (!v193)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v184 + 1) + 16))(*((_QWORD *)&v184 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v184 + 1));
                  }
                }
                v169 = v182 - 16;
                if (!v190)
                  goto LABEL_312;
              }
              v182 = v8;
LABEL_312:
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v182, &v352);
              v194 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              if (*((_QWORD *)&v352 + 1))
              {
                v195 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v196 = __ldaxr(v195);
                while (__stlxr(v196 - 1, v195));
                if (!v196)
                {
                  ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                  std::__shared_weak_count::__release_weak(v194);
                }
              }
LABEL_318:
              v168 = v170 + 16;
              v169 = v170;
              if (v170 + 16 == a2)
                return;
            }
          }
          if (v8 == a2)
            return;
          v308 = v8 + 16;
          while (1)
          {
            if (v308 == a2)
              return;
            v309 = v308;
            v310 = *(_QWORD **)(v8 + 16);
            v311 = *(std::__shared_weak_count **)(v8 + 24);
            if (v311)
            {
              v312 = (unint64_t *)&v311->__shared_owners_;
              do
                v313 = __ldxr(v312);
              while (__stxr(v313 + 1, v312));
            }
            v314 = *(std::__shared_weak_count **)(v8 + 8);
            *(_QWORD *)&v353 = *(_QWORD *)v8;
            *((_QWORD *)&v353 + 1) = v314;
            if (v314)
            {
              v315 = (unint64_t *)&v314->__shared_owners_;
              do
                v316 = __ldxr(v315);
              while (__stxr(v316 + 1, v315));
              v317 = lessThan(v310, (_QWORD **)&v353);
              do
                v318 = __ldaxr(v315);
              while (__stlxr(v318 - 1, v315));
              if (!v318)
              {
                ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                std::__shared_weak_count::__release_weak(v314);
              }
            }
            else
            {
              v317 = lessThan(v310, (_QWORD **)&v353);
            }
            if (!v311)
              goto LABEL_503;
            v319 = (unint64_t *)&v311->__shared_owners_;
            do
              v320 = __ldaxr(v319);
            while (__stlxr(v320 - 1, v319));
            if (!v320)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
              if (!v317)
                goto LABEL_528;
            }
            else
            {
LABEL_503:
              if (!v317)
                goto LABEL_528;
            }
            v352 = *(_OWORD *)v309;
            *(_QWORD *)v309 = 0;
            *(_QWORD *)(v309 + 8) = 0;
            v321 = v309;
            do
            {
              v322 = v321;
              v321 = v8;
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v322, (__int128 *)v8);
              v323 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v324 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v325 = __ldxr(v324);
                while (__stxr(v325 + 1, v324));
              }
              *(_QWORD *)&v353 = *(_QWORD *)(v8 - 16);
              v326 = *(std::__shared_weak_count **)(v8 - 8);
              *((_QWORD *)&v353 + 1) = v326;
              if (v326)
              {
                v327 = (unint64_t *)&v326->__shared_owners_;
                do
                  v328 = __ldxr(v327);
                while (__stxr(v328 + 1, v327));
                v329 = lessThan((_QWORD *)v323, (_QWORD **)&v353);
                do
                  v330 = __ldaxr(v327);
                while (__stlxr(v330 - 1, v327));
                if (!v330)
                {
                  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                  std::__shared_weak_count::__release_weak(v326);
                }
              }
              else
              {
                v329 = lessThan((_QWORD *)v323, (_QWORD **)&v353);
              }
              if (*((_QWORD *)&v323 + 1))
              {
                v331 = (unint64_t *)(*((_QWORD *)&v323 + 1) + 8);
                do
                  v332 = __ldaxr(v331);
                while (__stlxr(v332 - 1, v331));
                if (!v332)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v323 + 1) + 16))(*((_QWORD *)&v323 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v323 + 1));
                }
              }
              v8 -= 16;
            }
            while (v329);
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v321, &v352);
            v333 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
            if (*((_QWORD *)&v352 + 1))
            {
              v334 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
              do
                v335 = __ldaxr(v334);
              while (__stlxr(v335 - 1, v334));
              if (!v335)
              {
                ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                std::__shared_weak_count::__release_weak(v333);
              }
            }
LABEL_528:
            v308 = v309 + 16;
            v8 = v309;
          }
        }
        v350 = (__int128 *)v8;
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = (__int128 *)(v8 + 16 * ((unint64_t)v10 >> 1));
          if ((unint64_t)v9 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((uint64_t)v12, v8, v343);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v8, (uint64_t)v12, v343);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v8 + 16, (uint64_t)(v12 - 1), v342);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v8 + 32, v8 + 16 + 16 * v11, v341);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((uint64_t)(v12 - 1), (uint64_t)v12, v8 + 16 + 16 * v11);
            v13 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v12;
            *v12 = v13;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v14 = *(_QWORD **)(v8 - 16);
            v15 = *(std::__shared_weak_count **)(v8 - 8);
            if (v15)
            {
              v16 = (unint64_t *)&v15->__shared_owners_;
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            v18 = *(std::__shared_weak_count **)(v8 + 8);
            *(_QWORD *)&v353 = *(_QWORD *)v8;
            *((_QWORD *)&v353 + 1) = v18;
            if (v18)
            {
              v19 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
              v21 = lessThan(v14, (_QWORD **)&v353);
              do
                v22 = __ldaxr(v19);
              while (__stlxr(v22 - 1, v19));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            else
            {
              v21 = lessThan(v14, (_QWORD **)&v353);
            }
            if (v15)
            {
              v23 = (unint64_t *)&v15->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            if (!v21)
            {
              v91 = *(_QWORD **)v350;
              v92 = (std::__shared_weak_count *)*((_QWORD *)v350 + 1);
              *(_QWORD *)&v352 = *(_QWORD *)v350;
              *((_QWORD *)&v352 + 1) = v92;
              *(_QWORD *)v350 = 0;
              *((_QWORD *)v350 + 1) = 0;
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldxr(v93);
                while (__stxr(v94 + 1, v93));
              }
              *(_QWORD *)&v353 = *(_QWORD *)(v345 - 16);
              v95 = *(std::__shared_weak_count **)(v345 - 8);
              *((_QWORD *)&v353 + 1) = v95;
              if (v95)
              {
                v96 = (unint64_t *)&v95->__shared_owners_;
                do
                  v97 = __ldxr(v96);
                while (__stxr(v97 + 1, v96));
                v98 = lessThan(v91, (_QWORD **)&v353);
                do
                  v99 = __ldaxr(v96);
                while (__stlxr(v99 - 1, v96));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              else
              {
                v98 = lessThan(v91, (_QWORD **)&v353);
              }
              if (v92)
              {
                v100 = (unint64_t *)&v92->__shared_owners_;
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 - 1, v100));
                if (!v101)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v7 = v350;
              if (v98)
              {
                v7 = v350;
                do
                {
                  v102 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v103 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v104 = __ldxr(v103);
                    while (__stxr(v104 + 1, v103));
                  }
                  v105 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v7 + 2);
                  *((_QWORD *)&v353 + 1) = v105;
                  if (v105)
                  {
                    v106 = (unint64_t *)&v105->__shared_owners_;
                    do
                      v107 = __ldxr(v106);
                    while (__stxr(v107 + 1, v106));
                    v108 = lessThan((_QWORD *)v102, (_QWORD **)&v353);
                    do
                      v109 = __ldaxr(v106);
                    while (__stlxr(v109 - 1, v106));
                    if (!v109)
                    {
                      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                      std::__shared_weak_count::__release_weak(v105);
                    }
                  }
                  else
                  {
                    v108 = lessThan((_QWORD *)v102, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v102 + 1))
                  {
                    v110 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
                    do
                      v111 = __ldaxr(v110);
                    while (__stlxr(v111 - 1, v110));
                    if (!v111)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
                    }
                  }
                  ++v7;
                }
                while (!v108);
              }
              else
              {
                while (1)
                {
                  v148 = v7++;
                  if ((unint64_t)v7 >= v345)
                    break;
                  v149 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v150 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v151 = __ldxr(v150);
                    while (__stxr(v151 + 1, v150));
                  }
                  v152 = (std::__shared_weak_count *)*((_QWORD *)v148 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v148 + 2);
                  *((_QWORD *)&v353 + 1) = v152;
                  if (v152)
                  {
                    v153 = (unint64_t *)&v152->__shared_owners_;
                    do
                      v154 = __ldxr(v153);
                    while (__stxr(v154 + 1, v153));
                    v155 = lessThan((_QWORD *)v149, (_QWORD **)&v353);
                    do
                      v156 = __ldaxr(v153);
                    while (__stlxr(v156 - 1, v153));
                    if (!v156)
                    {
                      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                      std::__shared_weak_count::__release_weak(v152);
                    }
                  }
                  else
                  {
                    v155 = lessThan((_QWORD *)v149, (_QWORD **)&v353);
                  }
                  if (!*((_QWORD *)&v149 + 1))
                    goto LABEL_250;
                  v157 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                  do
                    v158 = __ldaxr(v157);
                  while (__stlxr(v158 - 1, v157));
                  if (!v158)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
                    if (v155)
                      break;
                  }
                  else
                  {
LABEL_250:
                    if (v155)
                      break;
                  }
                }
              }
              v112 = (__int128 *)v345;
              if ((unint64_t)v7 < v345)
              {
                v112 = (__int128 *)v345;
                do
                {
                  v113 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v114 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v115 = __ldxr(v114);
                    while (__stxr(v115 + 1, v114));
                  }
                  *(_QWORD *)&v353 = *((_QWORD *)v112 - 2);
                  v116 = (std::__shared_weak_count *)*((_QWORD *)v112 - 1);
                  *((_QWORD *)&v353 + 1) = v116;
                  if (v116)
                  {
                    v117 = (unint64_t *)&v116->__shared_owners_;
                    do
                      v118 = __ldxr(v117);
                    while (__stxr(v118 + 1, v117));
                    v119 = lessThan((_QWORD *)v113, (_QWORD **)&v353);
                    do
                      v120 = __ldaxr(v117);
                    while (__stlxr(v120 - 1, v117));
                    if (!v120)
                    {
                      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                      std::__shared_weak_count::__release_weak(v116);
                    }
                  }
                  else
                  {
                    v119 = lessThan((_QWORD *)v113, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v113 + 1))
                  {
                    v121 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v113 + 1) + 16))(*((_QWORD *)&v113 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v113 + 1));
                    }
                  }
                  --v112;
                }
                while (v119);
              }
              while (v7 < v112)
              {
                v123 = *(_QWORD *)v7;
                *(_QWORD *)v7 = *(_QWORD *)v112;
                *(_QWORD *)v112 = v123;
                v124 = *((_QWORD *)v7 + 1);
                *((_QWORD *)v7 + 1) = *((_QWORD *)v112 + 1);
                *((_QWORD *)v112 + 1) = v124;
                do
                {
                  v125 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v126 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v127 = __ldxr(v126);
                    while (__stxr(v127 + 1, v126));
                  }
                  v128 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v7 + 2);
                  *((_QWORD *)&v353 + 1) = v128;
                  if (v128)
                  {
                    v129 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v130 = __ldxr(v129);
                    while (__stxr(v130 + 1, v129));
                    v131 = lessThan((_QWORD *)v125, (_QWORD **)&v353);
                    do
                      v132 = __ldaxr(v129);
                    while (__stlxr(v132 - 1, v129));
                    if (!v132)
                    {
                      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                      std::__shared_weak_count::__release_weak(v128);
                    }
                  }
                  else
                  {
                    v131 = lessThan((_QWORD *)v125, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v125 + 1))
                  {
                    v133 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
                    do
                      v134 = __ldaxr(v133);
                    while (__stlxr(v134 - 1, v133));
                    if (!v134)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v125 + 1) + 16))(*((_QWORD *)&v125 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v125 + 1));
                    }
                  }
                  ++v7;
                }
                while (!v131);
                do
                {
                  v135 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v136 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v137 = __ldxr(v136);
                    while (__stxr(v137 + 1, v136));
                  }
                  *(_QWORD *)&v353 = *((_QWORD *)v112 - 2);
                  v138 = (std::__shared_weak_count *)*((_QWORD *)v112 - 1);
                  *((_QWORD *)&v353 + 1) = v138;
                  if (v138)
                  {
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldxr(v139);
                    while (__stxr(v140 + 1, v139));
                    v141 = lessThan((_QWORD *)v135, (_QWORD **)&v353);
                    do
                      v142 = __ldaxr(v139);
                    while (__stlxr(v142 - 1, v139));
                    if (!v142)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                  else
                  {
                    v141 = lessThan((_QWORD *)v135, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v135 + 1))
                  {
                    v143 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
                    do
                      v144 = __ldaxr(v143);
                    while (__stlxr(v144 - 1, v143));
                    if (!v144)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v135 + 1) + 16))(*((_QWORD *)&v135 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v135 + 1));
                    }
                  }
                  --v112;
                }
                while (v141);
              }
              if (v7 - 1 != v350)
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v350, v7 - 1);
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v7 - 1), &v352);
              v145 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              a2 = v345;
              if (*((_QWORD *)&v352 + 1))
              {
                v146 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                if (!v147)
                {
                  ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                  std::__shared_weak_count::__release_weak(v145);
                }
              }
              a4 = 0;
              continue;
            }
          }
          v352 = *v350;
          *(_QWORD *)v350 = 0;
          *((_QWORD *)v350 + 1) = 0;
          v25 = v350;
          do
          {
            while (1)
            {
              v26 = v25;
              v27 = (_QWORD *)*((_QWORD *)v25 + 2);
              v28 = (std::__shared_weak_count *)*((_QWORD *)v25++ + 3);
              if (v28)
              {
                v29 = (unint64_t *)&v28->__shared_owners_;
                do
                  v30 = __ldxr(v29);
                while (__stxr(v30 + 1, v29));
              }
              v31 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v32 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v33 = __ldxr(v32);
                while (__stxr(v33 + 1, v32));
                v34 = lessThan(v27, (_QWORD **)&v353);
                do
                  v35 = __ldaxr(v32);
                while (__stlxr(v35 - 1, v32));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
              else
              {
                v34 = lessThan(v27, (_QWORD **)&v353);
              }
              if (v28)
              {
                v36 = (unint64_t *)&v28->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                  break;
              }
              if (!v34)
                goto LABEL_45;
            }
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          while (v34);
LABEL_45:
          v38 = (__int128 *)v345;
          if (v26 == v350)
          {
            v38 = (__int128 *)v345;
            do
            {
              if (v25 >= v38)
                break;
              v50 = (_QWORD *)*((_QWORD *)v38 - 2);
              v51 = (std::__shared_weak_count *)*((_QWORD *)v38-- - 1);
              if (v51)
              {
                v52 = (unint64_t *)&v51->__shared_owners_;
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }
              v54 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v55 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v56 = __ldxr(v55);
                while (__stxr(v56 + 1, v55));
                v57 = lessThan(v50, (_QWORD **)&v353);
                do
                  v58 = __ldaxr(v55);
                while (__stlxr(v58 - 1, v55));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              else
              {
                v57 = lessThan(v50, (_QWORD **)&v353);
              }
              if (v51)
              {
                v59 = (unint64_t *)&v51->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
            }
            while (!v57);
          }
          else
          {
            do
            {
              while (1)
              {
                v39 = (_QWORD *)*((_QWORD *)v38 - 2);
                v40 = (std::__shared_weak_count *)*((_QWORD *)v38-- - 1);
                if (v40)
                {
                  v41 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                v43 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                v353 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v44 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v45 = __ldxr(v44);
                  while (__stxr(v45 + 1, v44));
                  v46 = lessThan(v39, (_QWORD **)&v353);
                  do
                    v47 = __ldaxr(v44);
                  while (__stlxr(v47 - 1, v44));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                    std::__shared_weak_count::__release_weak(v43);
                  }
                }
                else
                {
                  v46 = lessThan(v39, (_QWORD **)&v353);
                }
                if (v40)
                {
                  v48 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                    break;
                }
                if (v46)
                  goto LABEL_84;
              }
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
            while (!v46);
          }
LABEL_84:
          if (v25 < v38)
          {
            v61 = v25;
            v62 = v38;
            do
            {
              v63 = *(_QWORD *)v61;
              *(_QWORD *)v61 = *(_QWORD *)v62;
              *(_QWORD *)v62 = v63;
              v64 = *((_QWORD *)v61 + 1);
              *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
              *((_QWORD *)v62 + 1) = v64;
              do
              {
                while (1)
                {
                  v26 = v61;
                  v65 = (_QWORD *)*((_QWORD *)v61 + 2);
                  v66 = (std::__shared_weak_count *)*((_QWORD *)v61++ + 3);
                  if (v66)
                  {
                    v67 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v68 = __ldxr(v67);
                    while (__stxr(v68 + 1, v67));
                  }
                  v69 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  v353 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v70 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v71 = __ldxr(v70);
                    while (__stxr(v71 + 1, v70));
                    v72 = lessThan(v65, (_QWORD **)&v353);
                    do
                      v73 = __ldaxr(v70);
                    while (__stlxr(v73 - 1, v70));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                  else
                  {
                    v72 = lessThan(v65, (_QWORD **)&v353);
                  }
                  if (v66)
                  {
                    v74 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                      break;
                  }
                  if (!v72)
                    goto LABEL_107;
                }
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
              while (v72);
              do
              {
                while (1)
                {
LABEL_107:
                  v76 = (_QWORD *)*((_QWORD *)v62 - 2);
                  v77 = (std::__shared_weak_count *)*((_QWORD *)v62-- - 1);
                  if (v77)
                  {
                    v78 = (unint64_t *)&v77->__shared_owners_;
                    do
                      v79 = __ldxr(v78);
                    while (__stxr(v79 + 1, v78));
                  }
                  v80 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  v353 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v81 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v82 = __ldxr(v81);
                    while (__stxr(v82 + 1, v81));
                    v83 = lessThan(v76, (_QWORD **)&v353);
                    do
                      v84 = __ldaxr(v81);
                    while (__stlxr(v84 - 1, v81));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  else
                  {
                    v83 = lessThan(v76, (_QWORD **)&v353);
                  }
                  if (!v77)
                    break;
                  v85 = (unint64_t *)&v77->__shared_owners_;
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (v86)
                    break;
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                  if (v83)
                    goto LABEL_123;
                }
              }
              while (!v83);
LABEL_123:
              ;
            }
            while (v61 < v62);
          }
          a1 = v350;
          if (v26 != v350)
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v350, v26);
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v26, &v352);
          v87 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          a2 = v345;
          if (*((_QWORD *)&v352 + 1))
          {
            v88 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          if (v25 < v38)
          {
LABEL_134:
            std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*,false>(v350, v26, a3, a4 & 1);
            a4 = 0;
            v7 = v26 + 1;
            continue;
          }
          v90 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((uint64_t)v350, (uint64_t)v26);
          v7 = v26 + 1;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((uint64_t)(v26 + 1), v345))
          {
            if (v90)
              continue;
            goto LABEL_134;
          }
          a2 = (unint64_t)v26;
          if (v90)
            return;
          goto LABEL_1;
        }
        if (v8 == a2)
          return;
        v197 = (unint64_t)(v10 - 2) >> 1;
        v198 = v197;
        v344 = v9;
        v340 = v10;
        do
        {
          v199 = v198;
          if (v197 >= v198)
          {
            v200 = (2 * v198) | 1;
            v201 = &v350[v200];
            v202 = 2 * v198 + 2;
            v348 = v198;
            if (v202 < v10)
            {
              v203 = *v201;
              v204 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
              if (v204)
              {
                v205 = (unint64_t *)&v204->__shared_owners_;
                do
                  v206 = __ldxr(v205);
                while (__stxr(v206 + 1, v205));
              }
              *(_QWORD *)&v353 = *((_QWORD *)v201 + 2);
              v207 = (std::__shared_weak_count *)*((_QWORD *)v201 + 3);
              *((_QWORD *)&v353 + 1) = v207;
              if (v207)
              {
                v208 = (unint64_t *)&v207->__shared_owners_;
                do
                  v209 = __ldxr(v208);
                while (__stxr(v209 + 1, v208));
                v210 = lessThan((_QWORD *)v203, (_QWORD **)&v353);
                do
                  v211 = __ldaxr(v208);
                while (__stlxr(v211 - 1, v208));
                if (!v211)
                {
                  ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                  std::__shared_weak_count::__release_weak(v207);
                }
              }
              else
              {
                v210 = lessThan((_QWORD *)v203, (_QWORD **)&v353);
              }
              if (v204)
              {
                v212 = (unint64_t *)&v204->__shared_owners_;
                do
                  v213 = __ldaxr(v212);
                while (__stlxr(v213 - 1, v212));
                if (!v213)
                {
                  ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                  std::__shared_weak_count::__release_weak(v204);
                }
              }
              if (v210)
              {
                ++v201;
                v200 = v202;
              }
              v199 = v348;
            }
            v214 = *(_QWORD **)v201;
            v215 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
            if (v215)
            {
              v216 = (unint64_t *)&v215->__shared_owners_;
              do
                v217 = __ldxr(v216);
              while (__stxr(v217 + 1, v216));
            }
            v218 = (uint64_t)&v350[v199];
            v219 = *(_OWORD *)v218;
            v353 = v219;
            v220 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
            if (*((_QWORD *)&v219 + 1))
            {
              v221 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
              do
                v222 = __ldxr(v221);
              while (__stxr(v222 + 1, v221));
              v223 = lessThan(v214, (_QWORD **)&v353);
              do
                v224 = __ldaxr(v221);
              while (__stlxr(v224 - 1, v221));
              if (!v224)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
            }
            else
            {
              v223 = lessThan(v214, (_QWORD **)&v353);
            }
            if (v215)
            {
              v225 = (unint64_t *)&v215->__shared_owners_;
              do
                v226 = __ldaxr(v225);
              while (__stlxr(v226 - 1, v225));
              if (!v226)
              {
                ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                std::__shared_weak_count::__release_weak(v215);
              }
            }
            v9 = v344;
            v199 = v348;
            if (!v223)
            {
              v352 = *(_OWORD *)v218;
              *(_QWORD *)v218 = 0;
              *(_QWORD *)(v218 + 8) = 0;
              while (1)
              {
                v227 = (uint64_t)v201;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v218, v201);
                if (v197 < v200)
                {
LABEL_401:
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v227, &v352);
                  v252 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v253 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v254 = __ldaxr(v253);
                    while (__stlxr(v254 - 1, v253));
                    if (!v254)
                    {
                      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                      std::__shared_weak_count::__release_weak(v252);
                    }
                  }
                  v9 = v344;
                  v199 = v348;
                  goto LABEL_407;
                }
                v228 = (2 * v200) | 1;
                v201 = &v350[v228];
                v200 = 2 * v200 + 2;
                if (v200 < v10)
                  break;
                v200 = v228;
LABEL_384:
                v241 = *(_QWORD **)v201;
                v242 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
                if (v242)
                {
                  v243 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v244 = __ldxr(v243);
                  while (__stxr(v244 + 1, v243));
                }
                v245 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                v353 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v246 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v247 = __ldxr(v246);
                  while (__stxr(v247 + 1, v246));
                  v248 = lessThan(v241, (_QWORD **)&v353);
                  do
                    v249 = __ldaxr(v246);
                  while (__stlxr(v249 - 1, v246));
                  if (!v249)
                  {
                    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                    std::__shared_weak_count::__release_weak(v245);
                  }
                }
                else
                {
                  v248 = lessThan(v241, (_QWORD **)&v353);
                }
                if (v242)
                {
                  v250 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v251 = __ldaxr(v250);
                  while (__stlxr(v251 - 1, v250));
                  if (!v251)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                  }
                }
                v218 = v227;
                if (v248)
                  goto LABEL_401;
              }
              v229 = *v201;
              v230 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
              if (v230)
              {
                v231 = (unint64_t *)&v230->__shared_owners_;
                do
                  v232 = __ldxr(v231);
                while (__stxr(v232 + 1, v231));
              }
              *(_QWORD *)&v353 = *((_QWORD *)v201 + 2);
              v233 = (std::__shared_weak_count *)*((_QWORD *)v201 + 3);
              *((_QWORD *)&v353 + 1) = v233;
              if (v233)
              {
                v234 = v197;
                v235 = (unint64_t *)&v233->__shared_owners_;
                do
                  v236 = __ldxr(v235);
                while (__stxr(v236 + 1, v235));
                v237 = lessThan((_QWORD *)v229, (_QWORD **)&v353);
                do
                  v238 = __ldaxr(v235);
                while (__stlxr(v238 - 1, v235));
                if (!v238)
                {
                  ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                  std::__shared_weak_count::__release_weak(v233);
                }
                v197 = v234;
                v10 = v340;
                if (!v230)
                  goto LABEL_381;
              }
              else
              {
                v237 = lessThan((_QWORD *)v229, (_QWORD **)&v353);
                if (!v230)
                {
LABEL_381:
                  if (v237)
                    ++v201;
                  else
                    v200 = v228;
                  goto LABEL_384;
                }
              }
              v239 = (unint64_t *)&v230->__shared_owners_;
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                std::__shared_weak_count::__release_weak(v230);
              }
              goto LABEL_381;
            }
          }
LABEL_407:
          v198 = v199 - 1;
        }
        while (v199);
        v255 = (unint64_t)v9 >> 4;
        v256 = v345;
        v257 = v350;
        do
        {
          if (v255 < 2)
            goto LABEL_483;
          v346 = v256;
          v349 = v255;
          v258 = 0;
          v351 = *v257;
          *(_QWORD *)v257 = 0;
          *((_QWORD *)v257 + 1) = 0;
          v259 = (unint64_t)(v255 - 2) >> 1;
          v260 = (uint64_t)v257;
          do
          {
            v261 = v260 + 16 * v258 + 16;
            v262 = (2 * v258) | 1;
            v263 = 2 * v258 + 2;
            if (v263 >= v255)
              goto LABEL_431;
            v264 = *(_OWORD *)v261;
            v265 = *(std::__shared_weak_count **)(v260 + 16 * v258 + 24);
            if (v265)
            {
              v266 = (unint64_t *)&v265->__shared_owners_;
              do
                v267 = __ldxr(v266);
              while (__stxr(v267 + 1, v266));
            }
            *(_QWORD *)&v353 = *(_QWORD *)(v261 + 16);
            v268 = *(std::__shared_weak_count **)(v261 + 24);
            *((_QWORD *)&v353 + 1) = v268;
            if (v268)
            {
              v269 = (unint64_t *)&v268->__shared_owners_;
              do
                v270 = __ldxr(v269);
              while (__stxr(v270 + 1, v269));
              v271 = lessThan((_QWORD *)v264, (_QWORD **)&v353);
              do
                v272 = __ldaxr(v269);
              while (__stlxr(v272 - 1, v269));
              if (!v272)
              {
                ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                std::__shared_weak_count::__release_weak(v268);
              }
              v255 = v349;
              if (!v265)
                goto LABEL_429;
LABEL_425:
              v273 = (unint64_t *)&v265->__shared_owners_;
              do
                v274 = __ldaxr(v273);
              while (__stlxr(v274 - 1, v273));
              if (!v274)
              {
                ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                std::__shared_weak_count::__release_weak(v265);
              }
              goto LABEL_429;
            }
            v271 = lessThan((_QWORD *)v264, (_QWORD **)&v353);
            if (v265)
              goto LABEL_425;
LABEL_429:
            if (v271)
            {
              v261 += 16;
              v262 = v263;
            }
LABEL_431:
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v260, (__int128 *)v261);
            v260 = v261;
            v258 = v262;
          }
          while (v262 <= v259);
          v256 = v346;
          if (v261 == v346 - 16)
          {
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, &v351);
            v257 = v350;
            goto LABEL_478;
          }
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, (__int128 *)(v346 - 16));
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v346 - 16, &v351);
          v257 = v350;
          v275 = v261 - (_QWORD)v350 + 16;
          if (v275 < 17)
            goto LABEL_478;
          v276 = (unint64_t)((v275 >> 4) - 2) >> 1;
          v277 = &v350[v276];
          v278 = *v277;
          v279 = (std::__shared_weak_count *)*((_QWORD *)v277 + 1);
          if (v279)
          {
            v280 = (unint64_t *)&v279->__shared_owners_;
            do
              v281 = __ldxr(v280);
            while (__stxr(v281 + 1, v280));
          }
          *(_QWORD *)&v353 = *(_QWORD *)v261;
          v282 = *(std::__shared_weak_count **)(v261 + 8);
          *((_QWORD *)&v353 + 1) = v282;
          if (!v282)
          {
            v285 = lessThan((_QWORD *)v278, (_QWORD **)&v353);
            if (!v279)
              goto LABEL_452;
LABEL_448:
            v287 = (unint64_t *)&v279->__shared_owners_;
            do
              v288 = __ldaxr(v287);
            while (__stlxr(v288 - 1, v287));
            if (!v288)
            {
              ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
              std::__shared_weak_count::__release_weak(v279);
            }
            goto LABEL_452;
          }
          v283 = (unint64_t *)&v282->__shared_owners_;
          do
            v284 = __ldxr(v283);
          while (__stxr(v284 + 1, v283));
          v285 = lessThan((_QWORD *)v278, (_QWORD **)&v353);
          do
            v286 = __ldaxr(v283);
          while (__stlxr(v286 - 1, v283));
          if (!v286)
          {
            ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
            std::__shared_weak_count::__release_weak(v282);
          }
          v255 = v349;
          if (v279)
            goto LABEL_448;
LABEL_452:
          if (!v285)
            goto LABEL_478;
          v352 = *(_OWORD *)v261;
          *(_QWORD *)v261 = 0;
          *(_QWORD *)(v261 + 8) = 0;
          while (2)
          {
            v289 = (uint64_t)v277;
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, v277);
            if (v276)
            {
              v276 = (v276 - 1) >> 1;
              v277 = &v350[v276];
              v290 = *v277;
              v291 = (std::__shared_weak_count *)*((_QWORD *)v277 + 1);
              if (v291)
              {
                v292 = (unint64_t *)&v291->__shared_owners_;
                do
                  v293 = __ldxr(v292);
                while (__stxr(v293 + 1, v292));
              }
              v294 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v295 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v296 = __ldxr(v295);
                while (__stxr(v296 + 1, v295));
                v297 = lessThan((_QWORD *)v290, (_QWORD **)&v353);
                do
                  v298 = __ldaxr(v295);
                while (__stlxr(v298 - 1, v295));
                if (!v298)
                {
                  ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                  std::__shared_weak_count::__release_weak(v294);
                }
                v255 = v349;
                if (!v291)
                {
LABEL_472:
                  v261 = v289;
                  if (!v297)
                    break;
                  continue;
                }
              }
              else
              {
                v297 = lessThan((_QWORD *)v290, (_QWORD **)&v353);
                if (!v291)
                  goto LABEL_472;
              }
              v299 = (unint64_t *)&v291->__shared_owners_;
              do
                v300 = __ldaxr(v299);
              while (__stlxr(v300 - 1, v299));
              if (!v300)
              {
                ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                std::__shared_weak_count::__release_weak(v291);
              }
              goto LABEL_472;
            }
            break;
          }
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v289, &v352);
          v301 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          if (*((_QWORD *)&v352 + 1))
          {
            v302 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v303 = __ldaxr(v302);
            while (__stlxr(v303 - 1, v302));
            if (!v303)
            {
              ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
              std::__shared_weak_count::__release_weak(v301);
            }
          }
LABEL_478:
          v304 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
          if (*((_QWORD *)&v351 + 1))
          {
            v305 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
            do
              v306 = __ldaxr(v305);
            while (__stlxr(v306 - 1, v305));
            if (!v306)
            {
              ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
              std::__shared_weak_count::__release_weak(v304);
            }
          }
LABEL_483:
          v256 -= 16;
        }
        while ((unint64_t)v255-- > 2);
        return;
    }
  }
}

  v417 = (uint64_t)(a2 - 32);
  v419 = (uint64_t)(a2 - 16);
  v416 = (uint64_t)(a2 - 48);
  v7 = (__int128 *)a1;
  v421 = (uint64_t)a2;
  while (2)
  {
    a1 = (uint64_t)v7;
    v8 = a2 - (char *)v7;
    v9 = (a2 - (char *)v7) >> 4;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v192 = (uint64_t *)*((_QWORD *)a2 - 2);
        v193 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
        if (v193)
        {
          p_shared_owners = (unint64_t *)&v193->__shared_owners_;
          do
            v195 = __ldxr(p_shared_owners);
          while (__stxr(v195 + 1, p_shared_owners));
        }
        v196 = *(uint64_t **)a1;
        v197 = *(std::__shared_weak_count **)(a1 + 8);
        if (v197)
        {
          v198 = (unint64_t *)&v197->__shared_owners_;
          do
            v199 = __ldxr(v198);
          while (__stxr(v199 + 1, v198));
        }
        v200 = 0;
        if (v192 && v196)
        {
          v201 = *v192;
          v200 = v201 && (v202 = *v196) != 0 && *(double *)(v201 + 12) < *(double *)(v202 + 12);
        }
        if (v197)
        {
          v410 = (unint64_t *)&v197->__shared_owners_;
          do
            v411 = __ldaxr(v410);
          while (__stlxr(v411 - 1, v410));
          if (!v411)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
        if (v193)
        {
          v412 = (unint64_t *)&v193->__shared_owners_;
          do
            v413 = __ldaxr(v412);
          while (__stlxr(v413 - 1, v412));
          if (!v413)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
        }
        if (v200)
        {
          v414 = *(uint64_t **)a1;
          *(_QWORD *)a1 = *(_QWORD *)(v421 - 16);
          *(_QWORD *)(v421 - 16) = v414;
          v415 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(v421 - 8);
          *(_QWORD *)(v421 - 8) = v415;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, v419);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t **)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), v419);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a1 + 32, (uint64_t **)(a1 + 48), v419);
        return;
      default:
        if (v8 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if ((char *)a1 == a2)
              return;
            v203 = a1 + 16;
            if ((char *)(a1 + 16) == a2)
              return;
            v204 = a1;
            while (1)
            {
              v205 = v203;
              v206 = *(uint64_t **)(v204 + 16);
              v207 = *(std::__shared_weak_count **)(v204 + 24);
              if (v207)
              {
                v208 = (unint64_t *)&v207->__shared_owners_;
                do
                  v209 = __ldxr(v208);
                while (__stxr(v209 + 1, v208));
              }
              v210 = *(uint64_t **)v204;
              v211 = *(std::__shared_weak_count **)(v204 + 8);
              if (v211)
              {
                v212 = (unint64_t *)&v211->__shared_owners_;
                do
                  v213 = __ldxr(v212);
                while (__stxr(v213 + 1, v212));
              }
              v214 = 0;
              if (v206 && v210)
              {
                v215 = *v206;
                v214 = v215 && (v216 = *v210) != 0 && *(double *)(v215 + 12) < *(double *)(v216 + 12);
              }
              if (v211)
              {
                v217 = (unint64_t *)&v211->__shared_owners_;
                do
                  v218 = __ldaxr(v217);
                while (__stlxr(v218 - 1, v217));
                if (!v218)
                {
                  ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                  std::__shared_weak_count::__release_weak(v211);
                }
              }
              if (!v207)
                goto LABEL_372;
              v219 = (unint64_t *)&v207->__shared_owners_;
              do
                v220 = __ldaxr(v219);
              while (__stlxr(v220 - 1, v219));
              if (!v220)
              {
                ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                std::__shared_weak_count::__release_weak(v207);
                if (!v214)
                  goto LABEL_407;
              }
              else
              {
LABEL_372:
                if (!v214)
                  goto LABEL_407;
              }
              v425 = *(_OWORD *)v205;
              *(_QWORD *)v205 = 0;
              *(_QWORD *)(v205 + 8) = 0;
              v221 = v205;
              while (1)
              {
                v222 = v221;
                v221 = v204;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v222, (__int128 *)v204);
                if (v204 == a1)
                  break;
                v223 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v224 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v225 = __ldxr(v224);
                  while (__stxr(v225 + 1, v224));
                }
                v226 = *(uint64_t **)(v204 - 16);
                v227 = *(std::__shared_weak_count **)(v204 - 8);
                if (v227)
                {
                  v228 = (unint64_t *)&v227->__shared_owners_;
                  do
                    v229 = __ldxr(v228);
                  while (__stxr(v229 + 1, v228));
                }
                v230 = 0;
                if (!(_QWORD)v223 || !v226)
                  goto LABEL_386;
                if (*(_QWORD *)v223)
                {
                  v231 = *v226;
                  if (v231)
                  {
                    v230 = *(double *)(*(_QWORD *)v223 + 12) < *(double *)(v231 + 12);
LABEL_386:
                    if (!v227)
                      goto LABEL_392;
                    goto LABEL_389;
                  }
                }
                v230 = 0;
                if (!v227)
                  goto LABEL_392;
LABEL_389:
                v232 = (unint64_t *)&v227->__shared_owners_;
                do
                  v233 = __ldaxr(v232);
                while (__stlxr(v233 - 1, v232));
                if (v233)
                {
LABEL_392:
                  if (*((_QWORD *)&v223 + 1))
                    goto LABEL_393;
                  goto LABEL_398;
                }
                ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                std::__shared_weak_count::__release_weak(v227);
                if (*((_QWORD *)&v223 + 1))
                {
LABEL_393:
                  v234 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
                  do
                    v235 = __ldaxr(v234);
                  while (__stlxr(v235 - 1, v234));
                  if (!v235)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v223 + 1) + 16))(*((_QWORD *)&v223 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v223 + 1));
                  }
                }
LABEL_398:
                v204 -= 16;
                if (!v230)
                  goto LABEL_401;
              }
              v221 = a1;
LABEL_401:
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v221, &v425);
              v236 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
              if (*((_QWORD *)&v425 + 1))
              {
                v237 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                do
                  v238 = __ldaxr(v237);
                while (__stlxr(v238 - 1, v237));
                if (!v238)
                {
                  ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                  std::__shared_weak_count::__release_weak(v236);
                }
              }
LABEL_407:
              v203 = v205 + 16;
              v204 = v205;
              if (v205 + 16 == v421)
                return;
            }
          }
          if ((char *)a1 == a2)
            return;
          v374 = a1 + 16;
          if ((char *)(a1 + 16) == a2)
            return;
          while (1)
          {
            v375 = v374;
            v376 = (__int128 *)a1;
            v377 = *(uint64_t **)(a1 + 16);
            v378 = *(std::__shared_weak_count **)(a1 + 24);
            if (v378)
            {
              v379 = (unint64_t *)&v378->__shared_owners_;
              do
                v380 = __ldxr(v379);
              while (__stxr(v380 + 1, v379));
            }
            v381 = *(uint64_t **)a1;
            v382 = *(std::__shared_weak_count **)(a1 + 8);
            if (v382)
            {
              v383 = (unint64_t *)&v382->__shared_owners_;
              do
                v384 = __ldxr(v383);
              while (__stxr(v384 + 1, v383));
            }
            v385 = 0;
            if (v377 && v381)
            {
              v386 = *v377;
              v385 = v386 && (v387 = *v381) != 0 && *(double *)(v386 + 12) < *(double *)(v387 + 12);
            }
            if (v382)
            {
              v388 = (unint64_t *)&v382->__shared_owners_;
              do
                v389 = __ldaxr(v388);
              while (__stlxr(v389 - 1, v388));
              if (!v389)
              {
                ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                std::__shared_weak_count::__release_weak(v382);
              }
            }
            if (v378)
            {
              v390 = (unint64_t *)&v378->__shared_owners_;
              do
                v391 = __ldaxr(v390);
              while (__stlxr(v391 - 1, v390));
              if (!v391)
                break;
            }
            if (v385)
              goto LABEL_639;
LABEL_670:
            v374 = v375 + 16;
            a1 = v375;
            if (v375 + 16 == v421)
              return;
          }
          ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
          std::__shared_weak_count::__release_weak(v378);
          if (!v385)
            goto LABEL_670;
LABEL_639:
          v425 = *(_OWORD *)v375;
          *(_QWORD *)v375 = 0;
          *(_QWORD *)(v375 + 8) = 0;
          v392 = v375;
          while (1)
          {
            v393 = v392;
            v392 = (uint64_t)v376;
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v393, v376);
            v394 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v395 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v396 = __ldxr(v395);
              while (__stxr(v396 + 1, v395));
            }
            v397 = (uint64_t *)*((_QWORD *)v376 - 2);
            v398 = (std::__shared_weak_count *)*((_QWORD *)v376 - 1);
            if (v398)
            {
              v399 = (unint64_t *)&v398->__shared_owners_;
              do
                v400 = __ldxr(v399);
              while (__stxr(v400 + 1, v399));
            }
            v401 = 0;
            if (!(_QWORD)v394 || !v397)
              goto LABEL_651;
            if (*(_QWORD *)v394)
            {
              v402 = *v397;
              if (v402)
                break;
            }
            v401 = 0;
            if (!v398)
              goto LABEL_657;
LABEL_654:
            v403 = (unint64_t *)&v398->__shared_owners_;
            do
              v404 = __ldaxr(v403);
            while (__stlxr(v404 - 1, v403));
            if (v404)
            {
LABEL_657:
              if (*((_QWORD *)&v394 + 1))
                goto LABEL_658;
              goto LABEL_663;
            }
            ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
            std::__shared_weak_count::__release_weak(v398);
            if (*((_QWORD *)&v394 + 1))
            {
LABEL_658:
              v405 = (unint64_t *)(*((_QWORD *)&v394 + 1) + 8);
              do
                v406 = __ldaxr(v405);
              while (__stlxr(v406 - 1, v405));
              if (!v406)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v394 + 1) + 16))(*((_QWORD *)&v394 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v394 + 1));
              }
            }
LABEL_663:
            --v376;
            if (!v401)
            {
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v392, &v425);
              v407 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
              if (*((_QWORD *)&v425 + 1))
              {
                v408 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                do
                  v409 = __ldaxr(v408);
                while (__stlxr(v409 - 1, v408));
                if (!v409)
                {
                  ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                  std::__shared_weak_count::__release_weak(v407);
                }
              }
              goto LABEL_670;
            }
          }
          v401 = *(double *)(*(_QWORD *)v394 + 12) < *(double *)(v402 + 12);
LABEL_651:
          if (!v398)
            goto LABEL_657;
          goto LABEL_654;
        }
        if (!a3)
        {
          if ((char *)a1 == a2)
            return;
          v239 = (unint64_t)(v9 - 2) >> 1;
          v240 = v239;
          v420 = v8;
          do
          {
            v241 = v240;
            if (v239 >= v240)
            {
              v242 = (2 * v240) | 1;
              v243 = a1 + 16 * v242;
              v244 = 2 * v240 + 2;
              if (v244 < v9)
              {
                v245 = *(uint64_t **)v243;
                v246 = *(std::__shared_weak_count **)(v243 + 8);
                if (v246)
                {
                  v247 = (unint64_t *)&v246->__shared_owners_;
                  do
                    v248 = __ldxr(v247);
                  while (__stxr(v248 + 1, v247));
                }
                v249 = *(uint64_t **)(v243 + 16);
                v250 = *(std::__shared_weak_count **)(v243 + 24);
                if (v250)
                {
                  v251 = (unint64_t *)&v250->__shared_owners_;
                  do
                    v252 = __ldxr(v251);
                  while (__stxr(v252 + 1, v251));
                }
                v253 = 0;
                if (v245 && v249)
                {
                  v254 = *v245;
                  v253 = v254 && (v255 = *v249) != 0 && *(double *)(v254 + 12) < *(double *)(v255 + 12);
                }
                if (v250)
                {
                  v256 = (unint64_t *)&v250->__shared_owners_;
                  do
                    v257 = __ldaxr(v256);
                  while (__stlxr(v257 - 1, v256));
                  if (!v257)
                  {
                    v258 = v241;
                    ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                    std::__shared_weak_count::__release_weak(v250);
                    v241 = v258;
                    v8 = v420;
                  }
                }
                if (v246)
                {
                  v259 = (unint64_t *)&v246->__shared_owners_;
                  do
                    v260 = __ldaxr(v259);
                  while (__stlxr(v260 - 1, v259));
                  if (!v260)
                  {
                    v261 = v241;
                    ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                    std::__shared_weak_count::__release_weak(v246);
                    v241 = v261;
                    v8 = v420;
                  }
                }
                if (v253)
                {
                  v243 += 16;
                  v242 = v244;
                }
              }
              v262 = *(uint64_t **)v243;
              v263 = *(std::__shared_weak_count **)(v243 + 8);
              if (v263)
              {
                v264 = (unint64_t *)&v263->__shared_owners_;
                do
                  v265 = __ldxr(v264);
                while (__stxr(v265 + 1, v264));
              }
              v266 = (uint64_t **)(a1 + 16 * v241);
              v267 = *v266;
              v268 = (std::__shared_weak_count *)v266[1];
              if (v268)
              {
                v269 = (unint64_t *)&v268->__shared_owners_;
                do
                  v270 = __ldxr(v269);
                while (__stxr(v270 + 1, v269));
              }
              v271 = 0;
              if (v262 && v267)
              {
                v272 = *v262;
                v271 = v272 && (v273 = *v267) != 0 && *(double *)(v272 + 12) < *(double *)(v273 + 12);
              }
              if (v268)
              {
                v274 = (unint64_t *)&v268->__shared_owners_;
                do
                  v275 = __ldaxr(v274);
                while (__stlxr(v275 - 1, v274));
                if (!v275)
                {
                  v276 = v241;
                  ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                  std::__shared_weak_count::__release_weak(v268);
                  v241 = v276;
                  v8 = v420;
                }
              }
              if (v263)
              {
                v277 = (unint64_t *)&v263->__shared_owners_;
                do
                  v278 = __ldaxr(v277);
                while (__stlxr(v278 - 1, v277));
                if (!v278)
                {
                  v279 = v241;
                  ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                  std::__shared_weak_count::__release_weak(v263);
                  v241 = v279;
                  v8 = v420;
                }
              }
              a2 = (char *)v421;
              if (!v271)
              {
                v418 = v241;
                v425 = *(_OWORD *)v266;
                *v266 = 0;
                v266[1] = 0;
                while (1)
                {
                  v280 = v243;
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v266, (__int128 *)v243);
                  if (v239 < v242)
                  {
LABEL_514:
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v280, &v425);
                    v311 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
                    v241 = v418;
                    v8 = v420;
                    if (*((_QWORD *)&v425 + 1))
                    {
                      v312 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                      do
                        v313 = __ldaxr(v312);
                      while (__stlxr(v313 - 1, v312));
                      if (!v313)
                      {
                        ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                        std::__shared_weak_count::__release_weak(v311);
                        v241 = v418;
                        v8 = v420;
                      }
                    }
                    a2 = (char *)v421;
                    break;
                  }
                  v281 = (2 * v242) | 1;
                  v243 = a1 + 16 * v281;
                  v242 = 2 * v242 + 2;
                  if (v242 >= v9)
                  {
                    v242 = v281;
                    goto LABEL_490;
                  }
                  v282 = *(uint64_t **)v243;
                  v283 = *(std::__shared_weak_count **)(v243 + 8);
                  if (v283)
                  {
                    v284 = (unint64_t *)&v283->__shared_owners_;
                    do
                      v285 = __ldxr(v284);
                    while (__stxr(v285 + 1, v284));
                  }
                  v286 = v239;
                  v287 = *(uint64_t **)(v243 + 16);
                  v288 = *(std::__shared_weak_count **)(v243 + 24);
                  if (v288)
                  {
                    v289 = (unint64_t *)&v288->__shared_owners_;
                    do
                      v290 = __ldxr(v289);
                    while (__stxr(v290 + 1, v289));
                  }
                  v291 = 0;
                  if (v282 && v287)
                  {
                    v292 = *v282;
                    v291 = v292 && (v293 = *v287) != 0 && *(double *)(v292 + 12) < *(double *)(v293 + 12);
                  }
                  if (!v288)
                    goto LABEL_480;
                  v294 = (unint64_t *)&v288->__shared_owners_;
                  do
                    v295 = __ldaxr(v294);
                  while (__stlxr(v295 - 1, v294));
                  if (!v295)
                  {
                    ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                    std::__shared_weak_count::__release_weak(v288);
                    if (v283)
                    {
LABEL_481:
                      v296 = (unint64_t *)&v283->__shared_owners_;
                      do
                        v297 = __ldaxr(v296);
                      while (__stlxr(v297 - 1, v296));
                      if (!v297)
                      {
                        ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                        std::__shared_weak_count::__release_weak(v283);
                      }
                    }
                  }
                  else
                  {
LABEL_480:
                    if (v283)
                      goto LABEL_481;
                  }
                  if (v291)
                    v243 += 16;
                  else
                    v242 = v281;
                  v239 = v286;
LABEL_490:
                  v298 = *(uint64_t **)v243;
                  v299 = *(std::__shared_weak_count **)(v243 + 8);
                  if (v299)
                  {
                    v300 = (unint64_t *)&v299->__shared_owners_;
                    do
                      v301 = __ldxr(v300);
                    while (__stxr(v301 + 1, v300));
                  }
                  v302 = v425;
                  if (*((_QWORD *)&v425 + 1))
                  {
                    v303 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                    do
                      v304 = __ldxr(v303);
                    while (__stxr(v304 + 1, v303));
                  }
                  v305 = 0;
                  if (!v298 || !(_QWORD)v302)
                    goto LABEL_501;
                  v306 = *v298;
                  if (v306 && *(_QWORD *)v302)
                  {
                    v305 = *(double *)(v306 + 12) < *(double *)(*(_QWORD *)v302 + 12);
LABEL_501:
                    if (!*((_QWORD *)&v302 + 1))
                      goto LABEL_507;
                    goto LABEL_504;
                  }
                  v305 = 0;
                  if (!*((_QWORD *)&v302 + 1))
                    goto LABEL_507;
LABEL_504:
                  v307 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
                  do
                    v308 = __ldaxr(v307);
                  while (__stlxr(v308 - 1, v307));
                  if (v308)
                  {
LABEL_507:
                    if (v299)
                      goto LABEL_508;
                    goto LABEL_513;
                  }
                  (*(void (**)(_QWORD))(**((_QWORD **)&v302 + 1) + 16))(*((_QWORD *)&v302 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v302 + 1));
                  if (v299)
                  {
LABEL_508:
                    v309 = (unint64_t *)&v299->__shared_owners_;
                    do
                      v310 = __ldaxr(v309);
                    while (__stlxr(v310 - 1, v309));
                    if (!v310)
                    {
                      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                      std::__shared_weak_count::__release_weak(v299);
                    }
                  }
LABEL_513:
                  v266 = (uint64_t **)v280;
                  if (v305)
                    goto LABEL_514;
                }
              }
            }
            v240 = v241 - 1;
          }
          while (v241);
          v314 = (unint64_t)v8 >> 4;
LABEL_522:
          if (v314 < 2)
            goto LABEL_613;
          v422 = a2;
          v315 = 0;
          v316 = a1;
          v424 = *(_OWORD *)a1;
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          while (1)
          {
            v317 = v316 + 16 * (v315 + 1);
            v318 = (2 * v315) | 1;
            v319 = 2 * v315 + 2;
            if (v319 < v314)
              break;
LABEL_550:
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v316, (__int128 *)v317);
            v316 = v317;
            v315 = v318;
            if (v318 > (uint64_t)((unint64_t)(v314 - 2) >> 1))
            {
              if ((char *)v317 == v422 - 16)
              {
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v317, &v424);
                goto LABEL_607;
              }
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v317, (__int128 *)v422 - 1);
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v422 - 16), &v424);
              v335 = v317 - a1 + 16;
              if (v335 >= 17)
              {
                v336 = (unint64_t)((v335 >> 4) - 2) >> 1;
                v337 = a1 + 16 * v336;
                v338 = *(uint64_t **)v337;
                v339 = *(std::__shared_weak_count **)(v337 + 8);
                if (v339)
                {
                  v340 = (unint64_t *)&v339->__shared_owners_;
                  do
                    v341 = __ldxr(v340);
                  while (__stxr(v341 + 1, v340));
                }
                v342 = *(uint64_t **)v317;
                v343 = *(std::__shared_weak_count **)(v317 + 8);
                if (v343)
                {
                  v344 = (unint64_t *)&v343->__shared_owners_;
                  do
                    v345 = __ldxr(v344);
                  while (__stxr(v345 + 1, v344));
                }
                v346 = 0;
                if (v338 && v342)
                {
                  v347 = *v338;
                  v346 = v347 && (v348 = *v342) != 0 && *(double *)(v347 + 12) < *(double *)(v348 + 12);
                }
                if (v343)
                {
                  v349 = (unint64_t *)&v343->__shared_owners_;
                  do
                    v350 = __ldaxr(v349);
                  while (__stlxr(v350 - 1, v349));
                  if (!v350)
                  {
                    ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                    std::__shared_weak_count::__release_weak(v343);
                  }
                }
                if (v339)
                {
                  v351 = (unint64_t *)&v339->__shared_owners_;
                  do
                    v352 = __ldaxr(v351);
                  while (__stlxr(v352 - 1, v351));
                  if (!v352)
                  {
                    ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                    std::__shared_weak_count::__release_weak(v339);
                  }
                }
                if (v346)
                {
                  v425 = *(_OWORD *)v317;
                  *(_QWORD *)v317 = 0;
                  *(_QWORD *)(v317 + 8) = 0;
                  while (1)
                  {
                    v353 = v337;
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v317, (__int128 *)v337);
                    if (!v336)
                    {
LABEL_602:
                      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v353, &v425);
                      v367 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
                      if (*((_QWORD *)&v425 + 1))
                      {
                        v368 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                        do
                          v369 = __ldaxr(v368);
                        while (__stlxr(v369 - 1, v368));
                        if (!v369)
                        {
                          ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                          std::__shared_weak_count::__release_weak(v367);
                        }
                      }
                      break;
                    }
                    v336 = (v336 - 1) >> 1;
                    v337 = a1 + 16 * v336;
                    v354 = *(uint64_t **)v337;
                    v355 = *(std::__shared_weak_count **)(v337 + 8);
                    if (v355)
                    {
                      v356 = (unint64_t *)&v355->__shared_owners_;
                      do
                        v357 = __ldxr(v356);
                      while (__stxr(v357 + 1, v356));
                    }
                    v358 = v425;
                    if (*((_QWORD *)&v425 + 1))
                    {
                      v359 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                      do
                        v360 = __ldxr(v359);
                      while (__stxr(v360 + 1, v359));
                    }
                    v361 = 0;
                    if (v354 && (_QWORD)v358)
                    {
                      v362 = *v354;
                      v361 = v362 && *(_QWORD *)v358 && *(double *)(v362 + 12) < *(double *)(*(_QWORD *)v358 + 12);
                    }
                    if (!*((_QWORD *)&v358 + 1))
                      goto LABEL_595;
                    v363 = (unint64_t *)(*((_QWORD *)&v358 + 1) + 8);
                    do
                      v364 = __ldaxr(v363);
                    while (__stlxr(v364 - 1, v363));
                    if (!v364)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v358 + 1) + 16))(*((_QWORD *)&v358 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v358 + 1));
                      if (v355)
                      {
LABEL_596:
                        v365 = (unint64_t *)&v355->__shared_owners_;
                        do
                          v366 = __ldaxr(v365);
                        while (__stlxr(v366 - 1, v365));
                        if (!v366)
                        {
                          ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
                          std::__shared_weak_count::__release_weak(v355);
                        }
                      }
                    }
                    else
                    {
LABEL_595:
                      if (v355)
                        goto LABEL_596;
                    }
                    v317 = v353;
                    if (!v361)
                      goto LABEL_602;
                  }
                }
              }
LABEL_607:
              v370 = (std::__shared_weak_count *)*((_QWORD *)&v424 + 1);
              if (*((_QWORD *)&v424 + 1))
              {
                v371 = (unint64_t *)(*((_QWORD *)&v424 + 1) + 8);
                do
                  v372 = __ldaxr(v371);
                while (__stlxr(v372 - 1, v371));
                if (!v372)
                {
                  ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
                  std::__shared_weak_count::__release_weak(v370);
                }
              }
              a2 = v422;
LABEL_613:
              a2 -= 16;
              if ((unint64_t)v314-- <= 2)
                return;
              goto LABEL_522;
            }
          }
          v320 = *(uint64_t **)v317;
          v321 = *(std::__shared_weak_count **)(v317 + 8);
          if (v321)
          {
            v322 = (unint64_t *)&v321->__shared_owners_;
            do
              v323 = __ldxr(v322);
            while (__stxr(v323 + 1, v322));
          }
          v324 = *(uint64_t **)(v317 + 16);
          v325 = *(std::__shared_weak_count **)(v317 + 24);
          if (v325)
          {
            v326 = (unint64_t *)&v325->__shared_owners_;
            do
              v327 = __ldxr(v326);
            while (__stxr(v327 + 1, v326));
          }
          v328 = 0;
          if (v320 && v324)
          {
            v329 = *v320;
            if (!v329 || (v330 = *v324) == 0)
            {
              v328 = 0;
              if (!v325)
                goto LABEL_542;
LABEL_539:
              v331 = (unint64_t *)&v325->__shared_owners_;
              do
                v332 = __ldaxr(v331);
              while (__stlxr(v332 - 1, v331));
              if (!v332)
              {
                ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                std::__shared_weak_count::__release_weak(v325);
                if (v321)
                  goto LABEL_543;
                goto LABEL_548;
              }
LABEL_542:
              if (v321)
              {
LABEL_543:
                v333 = (unint64_t *)&v321->__shared_owners_;
                do
                  v334 = __ldaxr(v333);
                while (__stlxr(v334 - 1, v333));
                if (!v334)
                {
                  ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                  std::__shared_weak_count::__release_weak(v321);
                }
              }
LABEL_548:
              if (v328)
              {
                v317 += 16;
                v318 = v319;
              }
              goto LABEL_550;
            }
            v328 = *(double *)(v329 + 12) < *(double *)(v330 + 12);
          }
          if (!v325)
            goto LABEL_542;
          goto LABEL_539;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = a1;
        v12 = (_OWORD *)(a1 + 16 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)v12, a1, v419);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, (uint64_t)v12, v419);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1 + 16, (uint64_t)(v12 - 1), v417);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1 + 32, a1 + 16 + 16 * v10, v416);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)(v12 - 1), (uint64_t)v12, a1 + 16 + 16 * v10);
          v13 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v12;
          *v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *(uint64_t **)(a1 - 16);
          v15 = *(std::__shared_weak_count **)(a1 - 8);
          if (v15)
          {
            v16 = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v18 = *(uint64_t **)a1;
          v19 = *(std::__shared_weak_count **)(a1 + 8);
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v22 = 0;
          if (v14 && v18)
          {
            v23 = *v14;
            v22 = v23 && (v24 = *v18) != 0 && *(double *)(v23 + 12) < *(double *)(v24 + 12);
          }
          if (v19)
          {
            v25 = (unint64_t *)&v19->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          if (v15)
          {
            v27 = (unint64_t *)&v15->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          v11 = a1;
          if (!v22)
          {
            v105 = *(uint64_t **)a1;
            v106 = *(std::__shared_weak_count **)(a1 + 8);
            *(_QWORD *)&v425 = *(_QWORD *)a1;
            *((_QWORD *)&v425 + 1) = v106;
            *(_QWORD *)a1 = 0;
            *(_QWORD *)(a1 + 8) = 0;
            if (v106)
            {
              v107 = (unint64_t *)&v106->__shared_owners_;
              do
                v108 = __ldxr(v107);
              while (__stxr(v108 + 1, v107));
            }
            v109 = (uint64_t *)*((_QWORD *)a2 - 2);
            v110 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
            if (v110)
            {
              v111 = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
            }
            v113 = 0;
            if (v105 && v109)
            {
              v114 = *v105;
              v113 = v114 && (v115 = *v109) != 0 && *(double *)(v114 + 12) < *(double *)(v115 + 12);
            }
            if (v110)
            {
              v116 = (unint64_t *)&v110->__shared_owners_;
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            v7 = (__int128 *)a1;
            if (v106)
            {
              v118 = (unint64_t *)&v106->__shared_owners_;
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
            if (v113)
            {
              v7 = (__int128 *)a1;
              do
              {
                v120 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v121 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v122 = __ldxr(v121);
                  while (__stxr(v122 + 1, v121));
                }
                v123 = (uint64_t *)*((_QWORD *)v7 + 2);
                v124 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                if (v124)
                {
                  v125 = (unint64_t *)&v124->__shared_owners_;
                  do
                    v126 = __ldxr(v125);
                  while (__stxr(v126 + 1, v125));
                }
                v127 = 0;
                if ((_QWORD)v120 && v123)
                  v127 = *(_QWORD *)v120
                      && (v128 = *v123) != 0
                      && *(double *)(*(_QWORD *)v120 + 12) < *(double *)(v128 + 12);
                if (v124)
                {
                  v129 = (unint64_t *)&v124->__shared_owners_;
                  do
                    v130 = __ldaxr(v129);
                  while (__stlxr(v130 - 1, v129));
                  if (!v130)
                  {
                    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                    std::__shared_weak_count::__release_weak(v124);
                  }
                }
                if (*((_QWORD *)&v120 + 1))
                {
                  v131 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
                  do
                    v132 = __ldaxr(v131);
                  while (__stlxr(v132 - 1, v131));
                  if (!v132)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v120 + 1) + 16))(*((_QWORD *)&v120 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v120 + 1));
                  }
                }
                ++v7;
              }
              while (!v127);
            }
            else
            {
              while (1)
              {
                v178 = v7++;
                if (v7 >= (__int128 *)a2)
                  break;
                v179 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v180 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v181 = __ldxr(v180);
                  while (__stxr(v181 + 1, v180));
                }
                v182 = (uint64_t *)*((_QWORD *)v178 + 2);
                v183 = (std::__shared_weak_count *)*((_QWORD *)v178 + 3);
                if (v183)
                {
                  v184 = (unint64_t *)&v183->__shared_owners_;
                  do
                    v185 = __ldxr(v184);
                  while (__stxr(v185 + 1, v184));
                }
                v186 = 0;
                if ((_QWORD)v179 && v182)
                  v186 = *(_QWORD *)v179
                      && (v187 = *v182) != 0
                      && *(double *)(*(_QWORD *)v179 + 12) < *(double *)(v187 + 12);
                if (v183)
                {
                  v188 = (unint64_t *)&v183->__shared_owners_;
                  do
                    v189 = __ldaxr(v188);
                  while (__stlxr(v189 - 1, v188));
                  if (!v189)
                  {
                    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                    std::__shared_weak_count::__release_weak(v183);
                  }
                }
                if (!*((_QWORD *)&v179 + 1))
                  goto LABEL_325;
                v190 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
                do
                  v191 = __ldaxr(v190);
                while (__stlxr(v191 - 1, v190));
                if (!v191)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v179 + 1) + 16))(*((_QWORD *)&v179 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v179 + 1));
                  if (v186)
                    break;
                }
                else
                {
LABEL_325:
                  if (v186)
                    break;
                }
              }
            }
            v133 = (__int128 *)a2;
            if (v7 < (__int128 *)a2)
            {
              v133 = (__int128 *)a2;
              do
              {
                v134 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v135 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v136 = __ldxr(v135);
                  while (__stxr(v136 + 1, v135));
                }
                v137 = (uint64_t *)*((_QWORD *)v133 - 2);
                v138 = (std::__shared_weak_count *)*((_QWORD *)v133 - 1);
                if (v138)
                {
                  v139 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v140 = __ldxr(v139);
                  while (__stxr(v140 + 1, v139));
                }
                v141 = 0;
                if ((_QWORD)v134 && v137)
                  v141 = *(_QWORD *)v134
                      && (v142 = *v137) != 0
                      && *(double *)(*(_QWORD *)v134 + 12) < *(double *)(v142 + 12);
                if (v138)
                {
                  v143 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v144 = __ldaxr(v143);
                  while (__stlxr(v144 - 1, v143));
                  if (!v144)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                }
                if (*((_QWORD *)&v134 + 1))
                {
                  v145 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v134 + 1) + 16))(*((_QWORD *)&v134 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v134 + 1));
                  }
                }
                --v133;
              }
              while (v141);
            }
LABEL_294:
            if (v7 < v133)
            {
              v147 = *(_QWORD *)v7;
              *(_QWORD *)v7 = *(_QWORD *)v133;
              *(_QWORD *)v133 = v147;
              v148 = *((_QWORD *)v7 + 1);
              *((_QWORD *)v7 + 1) = *((_QWORD *)v133 + 1);
              *((_QWORD *)v133 + 1) = v148;
              while (1)
              {
                v149 = v425;
                if (*((_QWORD *)&v425 + 1))
                {
                  v150 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                  do
                    v151 = __ldxr(v150);
                  while (__stxr(v151 + 1, v150));
                }
                v152 = (uint64_t *)*((_QWORD *)v7 + 2);
                v153 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                if (v153)
                {
                  v154 = (unint64_t *)&v153->__shared_owners_;
                  do
                    v155 = __ldxr(v154);
                  while (__stxr(v155 + 1, v154));
                }
                v156 = 0;
                if (!(_QWORD)v149 || !v152)
                  goto LABEL_257;
                if (*(_QWORD *)v149)
                {
                  v157 = *v152;
                  if (v157)
                    break;
                }
                v156 = 0;
                if (!v153)
                  goto LABEL_263;
LABEL_260:
                v158 = (unint64_t *)&v153->__shared_owners_;
                do
                  v159 = __ldaxr(v158);
                while (__stlxr(v159 - 1, v158));
                if (v159)
                {
LABEL_263:
                  if (*((_QWORD *)&v149 + 1))
                    goto LABEL_264;
                  goto LABEL_269;
                }
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
                if (*((_QWORD *)&v149 + 1))
                {
LABEL_264:
                  v160 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                  do
                    v161 = __ldaxr(v160);
                  while (__stlxr(v161 - 1, v160));
                  if (!v161)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
                  }
                }
LABEL_269:
                ++v7;
                if (v156)
                {
                  while (1)
                  {
                    v162 = v425;
                    if (*((_QWORD *)&v425 + 1))
                    {
                      v163 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
                      do
                        v164 = __ldxr(v163);
                      while (__stxr(v164 + 1, v163));
                    }
                    v165 = (uint64_t *)*((_QWORD *)v133 - 2);
                    v166 = (std::__shared_weak_count *)*((_QWORD *)v133 - 1);
                    if (v166)
                    {
                      v167 = (unint64_t *)&v166->__shared_owners_;
                      do
                        v168 = __ldxr(v167);
                      while (__stxr(v168 + 1, v167));
                    }
                    v169 = 0;
                    if (!(_QWORD)v162 || !v165)
                      goto LABEL_281;
                    if (*(_QWORD *)v162)
                    {
                      v170 = *v165;
                      if (v170)
                        break;
                    }
                    v169 = 0;
                    if (!v166)
                      goto LABEL_287;
LABEL_284:
                    v171 = (unint64_t *)&v166->__shared_owners_;
                    do
                      v172 = __ldaxr(v171);
                    while (__stlxr(v172 - 1, v171));
                    if (v172)
                    {
LABEL_287:
                      if (*((_QWORD *)&v162 + 1))
                        goto LABEL_288;
                      goto LABEL_293;
                    }
                    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                    std::__shared_weak_count::__release_weak(v166);
                    if (*((_QWORD *)&v162 + 1))
                    {
LABEL_288:
                      v173 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
                      do
                        v174 = __ldaxr(v173);
                      while (__stlxr(v174 - 1, v173));
                      if (!v174)
                      {
                        (*(void (**)(_QWORD))(**((_QWORD **)&v162 + 1) + 16))(*((_QWORD *)&v162 + 1));
                        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v162 + 1));
                      }
                    }
LABEL_293:
                    --v133;
                    if (!v169)
                      goto LABEL_294;
                  }
                  v169 = *(double *)(*(_QWORD *)v162 + 12) < *(double *)(v170 + 12);
LABEL_281:
                  if (!v166)
                    goto LABEL_287;
                  goto LABEL_284;
                }
              }
              v156 = *(double *)(*(_QWORD *)v149 + 12) < *(double *)(v157 + 12);
LABEL_257:
              if (!v153)
                goto LABEL_263;
              goto LABEL_260;
            }
            if (v7 - 1 != (__int128 *)a1)
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](a1, v7 - 1);
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v7 - 1), &v425);
            v175 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
            if (*((_QWORD *)&v425 + 1))
            {
              v176 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v177 = __ldaxr(v176);
              while (__stlxr(v177 - 1, v176));
              if (!v177)
              {
                ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                std::__shared_weak_count::__release_weak(v175);
              }
            }
            a4 = 0;
            continue;
          }
        }
        v425 = *(_OWORD *)v11;
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        v29 = v11;
        do
        {
          v30 = (__int128 *)v29;
          v31 = *(uint64_t **)(v29 + 16);
          v32 = *(std::__shared_weak_count **)(v29 + 24);
          v29 += 16;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          v35 = v425;
          if (*((_QWORD *)&v425 + 1))
          {
            v36 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          v38 = 0;
          if (!v31 || !(_QWORD)v35)
            goto LABEL_44;
          v39 = *v31;
          if (v39 && *(_QWORD *)v35)
          {
            v38 = *(double *)(v39 + 12) < *(double *)(*(_QWORD *)v35 + 12);
LABEL_44:
            if (!*((_QWORD *)&v35 + 1))
              goto LABEL_50;
            goto LABEL_47;
          }
          v38 = 0;
          if (!*((_QWORD *)&v35 + 1))
            goto LABEL_50;
LABEL_47:
          v40 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
            if (!v32)
              continue;
            goto LABEL_51;
          }
LABEL_50:
          if (!v32)
            continue;
LABEL_51:
          v42 = (unint64_t *)&v32->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        while (v38);
        v44 = (__int128 *)a2;
        if (v30 != (__int128 *)a1)
        {
          while (1)
          {
            v45 = (uint64_t *)*((_QWORD *)v44 - 2);
            v46 = (std::__shared_weak_count *)*((_QWORD *)v44-- - 1);
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
            v49 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v50 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v51 = __ldxr(v50);
              while (__stxr(v51 + 1, v50));
            }
            v52 = 0;
            if (!v45 || !(_QWORD)v49)
              goto LABEL_69;
            v53 = *v45;
            if (v53)
            {
              if (*(_QWORD *)v49)
                break;
            }
            v52 = 0;
            if (!*((_QWORD *)&v49 + 1))
              goto LABEL_75;
LABEL_72:
            v54 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (v55)
            {
LABEL_75:
              if (v46)
                goto LABEL_76;
              goto LABEL_81;
            }
            (*(void (**)(_QWORD))(**((_QWORD **)&v49 + 1) + 16))(*((_QWORD *)&v49 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v49 + 1));
            if (v46)
            {
LABEL_76:
              v56 = (unint64_t *)&v46->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
LABEL_81:
            if (v52)
              goto LABEL_109;
          }
          v52 = *(double *)(v53 + 12) < *(double *)(*(_QWORD *)v49 + 12);
LABEL_69:
          if (!*((_QWORD *)&v49 + 1))
            goto LABEL_75;
          goto LABEL_72;
        }
        v44 = (__int128 *)a2;
        while (2)
        {
          if (v29 < (unint64_t)v44)
          {
            v58 = (uint64_t *)*((_QWORD *)v44 - 2);
            v59 = (std::__shared_weak_count *)*((_QWORD *)v44-- - 1);
            if (v59)
            {
              v60 = (unint64_t *)&v59->__shared_owners_;
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            v62 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v63 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v64 = __ldxr(v63);
              while (__stxr(v64 + 1, v63));
            }
            v65 = 0;
            if (v58 && (_QWORD)v62)
            {
              v66 = *v58;
              if (v66 && *(_QWORD *)v62)
              {
                v65 = *(double *)(v66 + 12) < *(double *)(*(_QWORD *)v62 + 12);
                goto LABEL_96;
              }
              v65 = 0;
              if (*((_QWORD *)&v62 + 1))
              {
LABEL_99:
                v67 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (v68)
                  goto LABEL_102;
                (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
                if (!v59)
                {
LABEL_108:
                  if (v65)
                    break;
                  continue;
                }
LABEL_103:
                v69 = (unint64_t *)&v59->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
                goto LABEL_108;
              }
            }
            else
            {
LABEL_96:
              if (*((_QWORD *)&v62 + 1))
                goto LABEL_99;
            }
LABEL_102:
            if (!v59)
              goto LABEL_108;
            goto LABEL_103;
          }
          break;
        }
LABEL_109:
        if (v29 >= (unint64_t)v44)
          goto LABEL_161;
        v71 = (__int128 *)v29;
        v72 = v44;
        while (2)
        {
          v73 = *(_QWORD *)v71;
          *(_QWORD *)v71 = *(_QWORD *)v72;
          *(_QWORD *)v72 = v73;
          v74 = *((_QWORD *)v71 + 1);
          *((_QWORD *)v71 + 1) = *((_QWORD *)v72 + 1);
          *((_QWORD *)v72 + 1) = v74;
          while (2)
          {
            v30 = v71;
            v75 = (uint64_t *)*((_QWORD *)v71 + 2);
            v76 = (std::__shared_weak_count *)*((_QWORD *)v71++ + 3);
            if (v76)
            {
              v77 = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldxr(v77);
              while (__stxr(v78 + 1, v77));
            }
            v79 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v80 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v81 = __ldxr(v80);
              while (__stxr(v81 + 1, v80));
            }
            v82 = 0;
            if (!v75 || !(_QWORD)v79)
            {
LABEL_123:
              if (*((_QWORD *)&v79 + 1))
                goto LABEL_126;
LABEL_129:
              if (!v76)
                goto LABEL_135;
LABEL_130:
              v86 = (unint64_t *)&v76->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
              goto LABEL_135;
            }
            v83 = *v75;
            if (v83 && *(_QWORD *)v79)
            {
              v82 = *(double *)(v83 + 12) < *(double *)(*(_QWORD *)v79 + 12);
              goto LABEL_123;
            }
            v82 = 0;
            if (!*((_QWORD *)&v79 + 1))
              goto LABEL_129;
LABEL_126:
            v84 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (v85)
              goto LABEL_129;
            (*(void (**)(_QWORD))(**((_QWORD **)&v79 + 1) + 16))(*((_QWORD *)&v79 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v79 + 1));
            if (v76)
              goto LABEL_130;
LABEL_135:
            if (v82)
              continue;
            break;
          }
          while (2)
          {
            v88 = (uint64_t *)*((_QWORD *)v72 - 2);
            v89 = (std::__shared_weak_count *)*((_QWORD *)v72-- - 1);
            if (v89)
            {
              v90 = (unint64_t *)&v89->__shared_owners_;
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
            }
            v92 = v425;
            if (*((_QWORD *)&v425 + 1))
            {
              v93 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
              do
                v94 = __ldxr(v93);
              while (__stxr(v94 + 1, v93));
            }
            v95 = 0;
            if (!v88 || !(_QWORD)v92)
            {
LABEL_147:
              if (*((_QWORD *)&v92 + 1))
                goto LABEL_150;
LABEL_153:
              if (!v89)
                goto LABEL_159;
LABEL_154:
              v99 = (unint64_t *)&v89->__shared_owners_;
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
              goto LABEL_159;
            }
            v96 = *v88;
            if (v96 && *(_QWORD *)v92)
            {
              v95 = *(double *)(v96 + 12) < *(double *)(*(_QWORD *)v92 + 12);
              goto LABEL_147;
            }
            v95 = 0;
            if (!*((_QWORD *)&v92 + 1))
              goto LABEL_153;
LABEL_150:
            v97 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (v98)
              goto LABEL_153;
            (*(void (**)(_QWORD))(**((_QWORD **)&v92 + 1) + 16))(*((_QWORD *)&v92 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v92 + 1));
            if (v89)
              goto LABEL_154;
LABEL_159:
            if (!v95)
              continue;
            break;
          }
          if (v71 < v72)
            continue;
          break;
        }
LABEL_161:
        if (v30 != (__int128 *)a1)
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](a1, v30);
        std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v30, &v425);
        v101 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
        a2 = (char *)v421;
        if (*((_QWORD *)&v425 + 1))
        {
          v102 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        if (v29 < (unint64_t)v44)
        {
LABEL_171:
          std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,false>(a1, v30, a3, a4 & 1);
          a4 = 0;
          v7 = v30 + 1;
          continue;
        }
        v104 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, (uint64_t)v30);
        v7 = v30 + 1;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)(v30 + 1), v421))
        {
          if (v104)
            continue;
          goto LABEL_171;
        }
        a2 = (char *)v30;
        if (!v104)
          goto LABEL_1;
        return;
    }
  }
}

  v342 = a2 - 32;
  v343 = a2 - 16;
  v341 = a2 - 48;
  v7 = a1;
  v345 = a2;
  while (2)
  {
    v8 = (uint64_t)v7;
    v9 = a2 - (_QWORD)v7;
    v10 = (uint64_t)(a2 - (_QWORD)v7) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v159 = *(_QWORD **)(a2 - 16);
        v160 = *(std::__shared_weak_count **)(a2 - 8);
        if (v160)
        {
          p_shared_owners = (unint64_t *)&v160->__shared_owners_;
          do
            v162 = __ldxr(p_shared_owners);
          while (__stxr(v162 + 1, p_shared_owners));
        }
        v163 = *(std::__shared_weak_count **)(v8 + 8);
        *(_QWORD *)&v353 = *(_QWORD *)v8;
        *((_QWORD *)&v353 + 1) = v163;
        if (v163)
        {
          v164 = (unint64_t *)&v163->__shared_owners_;
          do
            v165 = __ldxr(v164);
          while (__stxr(v165 + 1, v164));
          v166 = lessThan(v159, (_QWORD **)&v353);
          do
            v167 = __ldaxr(v164);
          while (__stlxr(v167 - 1, v164));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        else
        {
          v166 = lessThan(v159, (_QWORD **)&v353);
        }
        if (v160)
        {
          v336 = (unint64_t *)&v160->__shared_owners_;
          do
            v337 = __ldaxr(v336);
          while (__stlxr(v337 - 1, v336));
          if (!v337)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        if (v166)
        {
          v338 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v338;
          v339 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v339;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v8, v8 + 16, v343);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v8, v8 + 16, v8 + 32, v343);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v8, v8 + 16, v8 + 32, v8 + 48, v343);
        return;
      default:
        if (v9 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (v8 == a2)
              return;
            v168 = v8 + 16;
            if (v8 + 16 == a2)
              return;
            v169 = v8;
            while (1)
            {
              v170 = v168;
              v171 = *(_QWORD **)(v169 + 16);
              v172 = *(std::__shared_weak_count **)(v169 + 24);
              if (v172)
              {
                v173 = (unint64_t *)&v172->__shared_owners_;
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
              }
              v175 = *(std::__shared_weak_count **)(v169 + 8);
              *(_QWORD *)&v353 = *(_QWORD *)v169;
              *((_QWORD *)&v353 + 1) = v175;
              if (v175)
              {
                v176 = (unint64_t *)&v175->__shared_owners_;
                do
                  v177 = __ldxr(v176);
                while (__stxr(v177 + 1, v176));
                v178 = lessThan(v171, (_QWORD **)&v353);
                do
                  v179 = __ldaxr(v176);
                while (__stlxr(v179 - 1, v176));
                if (!v179)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              else
              {
                v178 = lessThan(v171, (_QWORD **)&v353);
              }
              if (!v172)
                goto LABEL_290;
              v180 = (unint64_t *)&v172->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                std::__shared_weak_count::__release_weak(v172);
                if (!v178)
                  goto LABEL_318;
              }
              else
              {
LABEL_290:
                if (!v178)
                  goto LABEL_318;
              }
              v352 = *(_OWORD *)v170;
              *(_QWORD *)v170 = 0;
              *(_QWORD *)(v170 + 8) = 0;
              v182 = v170;
              while (1)
              {
                v183 = v182;
                v182 = v169;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v183, (__int128 *)v169);
                if (v169 == v8)
                  break;
                v184 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v185 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v186 = __ldxr(v185);
                  while (__stxr(v186 + 1, v185));
                }
                *(_QWORD *)&v353 = *(_QWORD *)(v169 - 16);
                v187 = *(std::__shared_weak_count **)(v169 - 8);
                *((_QWORD *)&v353 + 1) = v187;
                if (v187)
                {
                  v188 = (unint64_t *)&v187->__shared_owners_;
                  do
                    v189 = __ldxr(v188);
                  while (__stxr(v189 + 1, v188));
                  v190 = lessThan((_QWORD *)v184, (_QWORD **)&v353);
                  do
                    v191 = __ldaxr(v188);
                  while (__stlxr(v191 - 1, v188));
                  if (!v191)
                  {
                    ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                    std::__shared_weak_count::__release_weak(v187);
                  }
                }
                else
                {
                  v190 = lessThan((_QWORD *)v184, (_QWORD **)&v353);
                }
                if (*((_QWORD *)&v184 + 1))
                {
                  v192 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
                  do
                    v193 = __ldaxr(v192);
                  while (__stlxr(v193 - 1, v192));
                  if (!v193)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v184 + 1) + 16))(*((_QWORD *)&v184 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v184 + 1));
                  }
                }
                v169 = v182 - 16;
                if (!v190)
                  goto LABEL_312;
              }
              v182 = v8;
LABEL_312:
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v182, &v352);
              v194 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              if (*((_QWORD *)&v352 + 1))
              {
                v195 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v196 = __ldaxr(v195);
                while (__stlxr(v196 - 1, v195));
                if (!v196)
                {
                  ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                  std::__shared_weak_count::__release_weak(v194);
                }
              }
LABEL_318:
              v168 = v170 + 16;
              v169 = v170;
              if (v170 + 16 == a2)
                return;
            }
          }
          if (v8 == a2)
            return;
          v308 = v8 + 16;
          while (1)
          {
            if (v308 == a2)
              return;
            v309 = v308;
            v310 = *(_QWORD **)(v8 + 16);
            v311 = *(std::__shared_weak_count **)(v8 + 24);
            if (v311)
            {
              v312 = (unint64_t *)&v311->__shared_owners_;
              do
                v313 = __ldxr(v312);
              while (__stxr(v313 + 1, v312));
            }
            v314 = *(std::__shared_weak_count **)(v8 + 8);
            *(_QWORD *)&v353 = *(_QWORD *)v8;
            *((_QWORD *)&v353 + 1) = v314;
            if (v314)
            {
              v315 = (unint64_t *)&v314->__shared_owners_;
              do
                v316 = __ldxr(v315);
              while (__stxr(v316 + 1, v315));
              v317 = lessThan(v310, (_QWORD **)&v353);
              do
                v318 = __ldaxr(v315);
              while (__stlxr(v318 - 1, v315));
              if (!v318)
              {
                ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                std::__shared_weak_count::__release_weak(v314);
              }
            }
            else
            {
              v317 = lessThan(v310, (_QWORD **)&v353);
            }
            if (!v311)
              goto LABEL_503;
            v319 = (unint64_t *)&v311->__shared_owners_;
            do
              v320 = __ldaxr(v319);
            while (__stlxr(v320 - 1, v319));
            if (!v320)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
              if (!v317)
                goto LABEL_528;
            }
            else
            {
LABEL_503:
              if (!v317)
                goto LABEL_528;
            }
            v352 = *(_OWORD *)v309;
            *(_QWORD *)v309 = 0;
            *(_QWORD *)(v309 + 8) = 0;
            v321 = v309;
            do
            {
              v322 = v321;
              v321 = v8;
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v322, (__int128 *)v8);
              v323 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v324 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v325 = __ldxr(v324);
                while (__stxr(v325 + 1, v324));
              }
              *(_QWORD *)&v353 = *(_QWORD *)(v8 - 16);
              v326 = *(std::__shared_weak_count **)(v8 - 8);
              *((_QWORD *)&v353 + 1) = v326;
              if (v326)
              {
                v327 = (unint64_t *)&v326->__shared_owners_;
                do
                  v328 = __ldxr(v327);
                while (__stxr(v328 + 1, v327));
                v329 = lessThan((_QWORD *)v323, (_QWORD **)&v353);
                do
                  v330 = __ldaxr(v327);
                while (__stlxr(v330 - 1, v327));
                if (!v330)
                {
                  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                  std::__shared_weak_count::__release_weak(v326);
                }
              }
              else
              {
                v329 = lessThan((_QWORD *)v323, (_QWORD **)&v353);
              }
              if (*((_QWORD *)&v323 + 1))
              {
                v331 = (unint64_t *)(*((_QWORD *)&v323 + 1) + 8);
                do
                  v332 = __ldaxr(v331);
                while (__stlxr(v332 - 1, v331));
                if (!v332)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v323 + 1) + 16))(*((_QWORD *)&v323 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v323 + 1));
                }
              }
              v8 -= 16;
            }
            while (v329);
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v321, &v352);
            v333 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
            if (*((_QWORD *)&v352 + 1))
            {
              v334 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
              do
                v335 = __ldaxr(v334);
              while (__stlxr(v335 - 1, v334));
              if (!v335)
              {
                ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                std::__shared_weak_count::__release_weak(v333);
              }
            }
LABEL_528:
            v308 = v309 + 16;
            v8 = v309;
          }
        }
        v350 = (__int128 *)v8;
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = (__int128 *)(v8 + 16 * ((unint64_t)v10 >> 1));
          if ((unint64_t)v9 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((uint64_t)v12, v8, v343);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v8, (uint64_t)v12, v343);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v8 + 16, (uint64_t)(v12 - 1), v342);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v8 + 32, v8 + 16 + 16 * v11, v341);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((uint64_t)(v12 - 1), (uint64_t)v12, v8 + 16 + 16 * v11);
            v13 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v12;
            *v12 = v13;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v14 = *(_QWORD **)(v8 - 16);
            v15 = *(std::__shared_weak_count **)(v8 - 8);
            if (v15)
            {
              v16 = (unint64_t *)&v15->__shared_owners_;
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            v18 = *(std::__shared_weak_count **)(v8 + 8);
            *(_QWORD *)&v353 = *(_QWORD *)v8;
            *((_QWORD *)&v353 + 1) = v18;
            if (v18)
            {
              v19 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
              v21 = lessThan(v14, (_QWORD **)&v353);
              do
                v22 = __ldaxr(v19);
              while (__stlxr(v22 - 1, v19));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            else
            {
              v21 = lessThan(v14, (_QWORD **)&v353);
            }
            if (v15)
            {
              v23 = (unint64_t *)&v15->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            if (!v21)
            {
              v91 = *(_QWORD **)v350;
              v92 = (std::__shared_weak_count *)*((_QWORD *)v350 + 1);
              *(_QWORD *)&v352 = *(_QWORD *)v350;
              *((_QWORD *)&v352 + 1) = v92;
              *(_QWORD *)v350 = 0;
              *((_QWORD *)v350 + 1) = 0;
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldxr(v93);
                while (__stxr(v94 + 1, v93));
              }
              *(_QWORD *)&v353 = *(_QWORD *)(v345 - 16);
              v95 = *(std::__shared_weak_count **)(v345 - 8);
              *((_QWORD *)&v353 + 1) = v95;
              if (v95)
              {
                v96 = (unint64_t *)&v95->__shared_owners_;
                do
                  v97 = __ldxr(v96);
                while (__stxr(v97 + 1, v96));
                v98 = lessThan(v91, (_QWORD **)&v353);
                do
                  v99 = __ldaxr(v96);
                while (__stlxr(v99 - 1, v96));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              else
              {
                v98 = lessThan(v91, (_QWORD **)&v353);
              }
              if (v92)
              {
                v100 = (unint64_t *)&v92->__shared_owners_;
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 - 1, v100));
                if (!v101)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v7 = v350;
              if (v98)
              {
                v7 = v350;
                do
                {
                  v102 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v103 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v104 = __ldxr(v103);
                    while (__stxr(v104 + 1, v103));
                  }
                  v105 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v7 + 2);
                  *((_QWORD *)&v353 + 1) = v105;
                  if (v105)
                  {
                    v106 = (unint64_t *)&v105->__shared_owners_;
                    do
                      v107 = __ldxr(v106);
                    while (__stxr(v107 + 1, v106));
                    v108 = lessThan((_QWORD *)v102, (_QWORD **)&v353);
                    do
                      v109 = __ldaxr(v106);
                    while (__stlxr(v109 - 1, v106));
                    if (!v109)
                    {
                      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                      std::__shared_weak_count::__release_weak(v105);
                    }
                  }
                  else
                  {
                    v108 = lessThan((_QWORD *)v102, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v102 + 1))
                  {
                    v110 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
                    do
                      v111 = __ldaxr(v110);
                    while (__stlxr(v111 - 1, v110));
                    if (!v111)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
                    }
                  }
                  ++v7;
                }
                while (!v108);
              }
              else
              {
                while (1)
                {
                  v148 = v7++;
                  if ((unint64_t)v7 >= v345)
                    break;
                  v149 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v150 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v151 = __ldxr(v150);
                    while (__stxr(v151 + 1, v150));
                  }
                  v152 = (std::__shared_weak_count *)*((_QWORD *)v148 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v148 + 2);
                  *((_QWORD *)&v353 + 1) = v152;
                  if (v152)
                  {
                    v153 = (unint64_t *)&v152->__shared_owners_;
                    do
                      v154 = __ldxr(v153);
                    while (__stxr(v154 + 1, v153));
                    v155 = lessThan((_QWORD *)v149, (_QWORD **)&v353);
                    do
                      v156 = __ldaxr(v153);
                    while (__stlxr(v156 - 1, v153));
                    if (!v156)
                    {
                      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                      std::__shared_weak_count::__release_weak(v152);
                    }
                  }
                  else
                  {
                    v155 = lessThan((_QWORD *)v149, (_QWORD **)&v353);
                  }
                  if (!*((_QWORD *)&v149 + 1))
                    goto LABEL_250;
                  v157 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                  do
                    v158 = __ldaxr(v157);
                  while (__stlxr(v158 - 1, v157));
                  if (!v158)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
                    if (v155)
                      break;
                  }
                  else
                  {
LABEL_250:
                    if (v155)
                      break;
                  }
                }
              }
              v112 = (__int128 *)v345;
              if ((unint64_t)v7 < v345)
              {
                v112 = (__int128 *)v345;
                do
                {
                  v113 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v114 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v115 = __ldxr(v114);
                    while (__stxr(v115 + 1, v114));
                  }
                  *(_QWORD *)&v353 = *((_QWORD *)v112 - 2);
                  v116 = (std::__shared_weak_count *)*((_QWORD *)v112 - 1);
                  *((_QWORD *)&v353 + 1) = v116;
                  if (v116)
                  {
                    v117 = (unint64_t *)&v116->__shared_owners_;
                    do
                      v118 = __ldxr(v117);
                    while (__stxr(v118 + 1, v117));
                    v119 = lessThan((_QWORD *)v113, (_QWORD **)&v353);
                    do
                      v120 = __ldaxr(v117);
                    while (__stlxr(v120 - 1, v117));
                    if (!v120)
                    {
                      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                      std::__shared_weak_count::__release_weak(v116);
                    }
                  }
                  else
                  {
                    v119 = lessThan((_QWORD *)v113, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v113 + 1))
                  {
                    v121 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v113 + 1) + 16))(*((_QWORD *)&v113 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v113 + 1));
                    }
                  }
                  --v112;
                }
                while (v119);
              }
              while (v7 < v112)
              {
                v123 = *(_QWORD *)v7;
                *(_QWORD *)v7 = *(_QWORD *)v112;
                *(_QWORD *)v112 = v123;
                v124 = *((_QWORD *)v7 + 1);
                *((_QWORD *)v7 + 1) = *((_QWORD *)v112 + 1);
                *((_QWORD *)v112 + 1) = v124;
                do
                {
                  v125 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v126 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v127 = __ldxr(v126);
                    while (__stxr(v127 + 1, v126));
                  }
                  v128 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v7 + 2);
                  *((_QWORD *)&v353 + 1) = v128;
                  if (v128)
                  {
                    v129 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v130 = __ldxr(v129);
                    while (__stxr(v130 + 1, v129));
                    v131 = lessThan((_QWORD *)v125, (_QWORD **)&v353);
                    do
                      v132 = __ldaxr(v129);
                    while (__stlxr(v132 - 1, v129));
                    if (!v132)
                    {
                      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                      std::__shared_weak_count::__release_weak(v128);
                    }
                  }
                  else
                  {
                    v131 = lessThan((_QWORD *)v125, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v125 + 1))
                  {
                    v133 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
                    do
                      v134 = __ldaxr(v133);
                    while (__stlxr(v134 - 1, v133));
                    if (!v134)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v125 + 1) + 16))(*((_QWORD *)&v125 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v125 + 1));
                    }
                  }
                  ++v7;
                }
                while (!v131);
                do
                {
                  v135 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v136 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v137 = __ldxr(v136);
                    while (__stxr(v137 + 1, v136));
                  }
                  *(_QWORD *)&v353 = *((_QWORD *)v112 - 2);
                  v138 = (std::__shared_weak_count *)*((_QWORD *)v112 - 1);
                  *((_QWORD *)&v353 + 1) = v138;
                  if (v138)
                  {
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldxr(v139);
                    while (__stxr(v140 + 1, v139));
                    v141 = lessThan((_QWORD *)v135, (_QWORD **)&v353);
                    do
                      v142 = __ldaxr(v139);
                    while (__stlxr(v142 - 1, v139));
                    if (!v142)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                  else
                  {
                    v141 = lessThan((_QWORD *)v135, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v135 + 1))
                  {
                    v143 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
                    do
                      v144 = __ldaxr(v143);
                    while (__stlxr(v144 - 1, v143));
                    if (!v144)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v135 + 1) + 16))(*((_QWORD *)&v135 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v135 + 1));
                    }
                  }
                  --v112;
                }
                while (v141);
              }
              if (v7 - 1 != v350)
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v350, v7 - 1);
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v7 - 1), &v352);
              v145 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              a2 = v345;
              if (*((_QWORD *)&v352 + 1))
              {
                v146 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                if (!v147)
                {
                  ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                  std::__shared_weak_count::__release_weak(v145);
                }
              }
              a4 = 0;
              continue;
            }
          }
          v352 = *v350;
          *(_QWORD *)v350 = 0;
          *((_QWORD *)v350 + 1) = 0;
          v25 = v350;
          do
          {
            while (1)
            {
              v26 = v25;
              v27 = (_QWORD *)*((_QWORD *)v25 + 2);
              v28 = (std::__shared_weak_count *)*((_QWORD *)v25++ + 3);
              if (v28)
              {
                v29 = (unint64_t *)&v28->__shared_owners_;
                do
                  v30 = __ldxr(v29);
                while (__stxr(v30 + 1, v29));
              }
              v31 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v32 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v33 = __ldxr(v32);
                while (__stxr(v33 + 1, v32));
                v34 = lessThan(v27, (_QWORD **)&v353);
                do
                  v35 = __ldaxr(v32);
                while (__stlxr(v35 - 1, v32));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
              else
              {
                v34 = lessThan(v27, (_QWORD **)&v353);
              }
              if (v28)
              {
                v36 = (unint64_t *)&v28->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                  break;
              }
              if (!v34)
                goto LABEL_45;
            }
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          while (v34);
LABEL_45:
          v38 = (__int128 *)v345;
          if (v26 == v350)
          {
            v38 = (__int128 *)v345;
            do
            {
              if (v25 >= v38)
                break;
              v50 = (_QWORD *)*((_QWORD *)v38 - 2);
              v51 = (std::__shared_weak_count *)*((_QWORD *)v38-- - 1);
              if (v51)
              {
                v52 = (unint64_t *)&v51->__shared_owners_;
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }
              v54 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v55 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v56 = __ldxr(v55);
                while (__stxr(v56 + 1, v55));
                v57 = lessThan(v50, (_QWORD **)&v353);
                do
                  v58 = __ldaxr(v55);
                while (__stlxr(v58 - 1, v55));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              else
              {
                v57 = lessThan(v50, (_QWORD **)&v353);
              }
              if (v51)
              {
                v59 = (unint64_t *)&v51->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
            }
            while (!v57);
          }
          else
          {
            do
            {
              while (1)
              {
                v39 = (_QWORD *)*((_QWORD *)v38 - 2);
                v40 = (std::__shared_weak_count *)*((_QWORD *)v38-- - 1);
                if (v40)
                {
                  v41 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                v43 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                v353 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v44 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v45 = __ldxr(v44);
                  while (__stxr(v45 + 1, v44));
                  v46 = lessThan(v39, (_QWORD **)&v353);
                  do
                    v47 = __ldaxr(v44);
                  while (__stlxr(v47 - 1, v44));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                    std::__shared_weak_count::__release_weak(v43);
                  }
                }
                else
                {
                  v46 = lessThan(v39, (_QWORD **)&v353);
                }
                if (v40)
                {
                  v48 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                    break;
                }
                if (v46)
                  goto LABEL_84;
              }
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
            while (!v46);
          }
LABEL_84:
          if (v25 < v38)
          {
            v61 = v25;
            v62 = v38;
            do
            {
              v63 = *(_QWORD *)v61;
              *(_QWORD *)v61 = *(_QWORD *)v62;
              *(_QWORD *)v62 = v63;
              v64 = *((_QWORD *)v61 + 1);
              *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
              *((_QWORD *)v62 + 1) = v64;
              do
              {
                while (1)
                {
                  v26 = v61;
                  v65 = (_QWORD *)*((_QWORD *)v61 + 2);
                  v66 = (std::__shared_weak_count *)*((_QWORD *)v61++ + 3);
                  if (v66)
                  {
                    v67 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v68 = __ldxr(v67);
                    while (__stxr(v68 + 1, v67));
                  }
                  v69 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  v353 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v70 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v71 = __ldxr(v70);
                    while (__stxr(v71 + 1, v70));
                    v72 = lessThan(v65, (_QWORD **)&v353);
                    do
                      v73 = __ldaxr(v70);
                    while (__stlxr(v73 - 1, v70));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                  else
                  {
                    v72 = lessThan(v65, (_QWORD **)&v353);
                  }
                  if (v66)
                  {
                    v74 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                      break;
                  }
                  if (!v72)
                    goto LABEL_107;
                }
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
              while (v72);
              do
              {
                while (1)
                {
LABEL_107:
                  v76 = (_QWORD *)*((_QWORD *)v62 - 2);
                  v77 = (std::__shared_weak_count *)*((_QWORD *)v62-- - 1);
                  if (v77)
                  {
                    v78 = (unint64_t *)&v77->__shared_owners_;
                    do
                      v79 = __ldxr(v78);
                    while (__stxr(v79 + 1, v78));
                  }
                  v80 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  v353 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v81 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v82 = __ldxr(v81);
                    while (__stxr(v82 + 1, v81));
                    v83 = lessThan(v76, (_QWORD **)&v353);
                    do
                      v84 = __ldaxr(v81);
                    while (__stlxr(v84 - 1, v81));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  else
                  {
                    v83 = lessThan(v76, (_QWORD **)&v353);
                  }
                  if (!v77)
                    break;
                  v85 = (unint64_t *)&v77->__shared_owners_;
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (v86)
                    break;
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                  if (v83)
                    goto LABEL_123;
                }
              }
              while (!v83);
LABEL_123:
              ;
            }
            while (v61 < v62);
          }
          a1 = v350;
          if (v26 != v350)
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v350, v26);
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v26, &v352);
          v87 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          a2 = v345;
          if (*((_QWORD *)&v352 + 1))
          {
            v88 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          if (v25 < v38)
          {
LABEL_134:
            std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*,false>(v350, v26, a3, a4 & 1);
            a4 = 0;
            v7 = v26 + 1;
            continue;
          }
          v90 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((uint64_t)v350, (uint64_t)v26);
          v7 = v26 + 1;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((uint64_t)(v26 + 1), v345))
          {
            if (v90)
              continue;
            goto LABEL_134;
          }
          a2 = (unint64_t)v26;
          if (v90)
            return;
          goto LABEL_1;
        }
        if (v8 == a2)
          return;
        v197 = (unint64_t)(v10 - 2) >> 1;
        v198 = v197;
        v344 = v9;
        v340 = v10;
        do
        {
          v199 = v198;
          if (v197 >= v198)
          {
            v200 = (2 * v198) | 1;
            v201 = &v350[v200];
            v202 = 2 * v198 + 2;
            v348 = v198;
            if (v202 < v10)
            {
              v203 = *v201;
              v204 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
              if (v204)
              {
                v205 = (unint64_t *)&v204->__shared_owners_;
                do
                  v206 = __ldxr(v205);
                while (__stxr(v206 + 1, v205));
              }
              *(_QWORD *)&v353 = *((_QWORD *)v201 + 2);
              v207 = (std::__shared_weak_count *)*((_QWORD *)v201 + 3);
              *((_QWORD *)&v353 + 1) = v207;
              if (v207)
              {
                v208 = (unint64_t *)&v207->__shared_owners_;
                do
                  v209 = __ldxr(v208);
                while (__stxr(v209 + 1, v208));
                v210 = lessThan((_QWORD *)v203, (_QWORD **)&v353);
                do
                  v211 = __ldaxr(v208);
                while (__stlxr(v211 - 1, v208));
                if (!v211)
                {
                  ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                  std::__shared_weak_count::__release_weak(v207);
                }
              }
              else
              {
                v210 = lessThan((_QWORD *)v203, (_QWORD **)&v353);
              }
              if (v204)
              {
                v212 = (unint64_t *)&v204->__shared_owners_;
                do
                  v213 = __ldaxr(v212);
                while (__stlxr(v213 - 1, v212));
                if (!v213)
                {
                  ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                  std::__shared_weak_count::__release_weak(v204);
                }
              }
              if (v210)
              {
                ++v201;
                v200 = v202;
              }
              v199 = v348;
            }
            v214 = *(_QWORD **)v201;
            v215 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
            if (v215)
            {
              v216 = (unint64_t *)&v215->__shared_owners_;
              do
                v217 = __ldxr(v216);
              while (__stxr(v217 + 1, v216));
            }
            v218 = (uint64_t)&v350[v199];
            v219 = *(_OWORD *)v218;
            v353 = v219;
            v220 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
            if (*((_QWORD *)&v219 + 1))
            {
              v221 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
              do
                v222 = __ldxr(v221);
              while (__stxr(v222 + 1, v221));
              v223 = lessThan(v214, (_QWORD **)&v353);
              do
                v224 = __ldaxr(v221);
              while (__stlxr(v224 - 1, v221));
              if (!v224)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
            }
            else
            {
              v223 = lessThan(v214, (_QWORD **)&v353);
            }
            if (v215)
            {
              v225 = (unint64_t *)&v215->__shared_owners_;
              do
                v226 = __ldaxr(v225);
              while (__stlxr(v226 - 1, v225));
              if (!v226)
              {
                ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                std::__shared_weak_count::__release_weak(v215);
              }
            }
            v9 = v344;
            v199 = v348;
            if (!v223)
            {
              v352 = *(_OWORD *)v218;
              *(_QWORD *)v218 = 0;
              *(_QWORD *)(v218 + 8) = 0;
              while (1)
              {
                v227 = (uint64_t)v201;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v218, v201);
                if (v197 < v200)
                {
LABEL_401:
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v227, &v352);
                  v252 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v253 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v254 = __ldaxr(v253);
                    while (__stlxr(v254 - 1, v253));
                    if (!v254)
                    {
                      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                      std::__shared_weak_count::__release_weak(v252);
                    }
                  }
                  v9 = v344;
                  v199 = v348;
                  goto LABEL_407;
                }
                v228 = (2 * v200) | 1;
                v201 = &v350[v228];
                v200 = 2 * v200 + 2;
                if (v200 < v10)
                  break;
                v200 = v228;
LABEL_384:
                v241 = *(_QWORD **)v201;
                v242 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
                if (v242)
                {
                  v243 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v244 = __ldxr(v243);
                  while (__stxr(v244 + 1, v243));
                }
                v245 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                v353 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v246 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v247 = __ldxr(v246);
                  while (__stxr(v247 + 1, v246));
                  v248 = lessThan(v241, (_QWORD **)&v353);
                  do
                    v249 = __ldaxr(v246);
                  while (__stlxr(v249 - 1, v246));
                  if (!v249)
                  {
                    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                    std::__shared_weak_count::__release_weak(v245);
                  }
                }
                else
                {
                  v248 = lessThan(v241, (_QWORD **)&v353);
                }
                if (v242)
                {
                  v250 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v251 = __ldaxr(v250);
                  while (__stlxr(v251 - 1, v250));
                  if (!v251)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                  }
                }
                v218 = v227;
                if (v248)
                  goto LABEL_401;
              }
              v229 = *v201;
              v230 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
              if (v230)
              {
                v231 = (unint64_t *)&v230->__shared_owners_;
                do
                  v232 = __ldxr(v231);
                while (__stxr(v232 + 1, v231));
              }
              *(_QWORD *)&v353 = *((_QWORD *)v201 + 2);
              v233 = (std::__shared_weak_count *)*((_QWORD *)v201 + 3);
              *((_QWORD *)&v353 + 1) = v233;
              if (v233)
              {
                v234 = v197;
                v235 = (unint64_t *)&v233->__shared_owners_;
                do
                  v236 = __ldxr(v235);
                while (__stxr(v236 + 1, v235));
                v237 = lessThan((_QWORD *)v229, (_QWORD **)&v353);
                do
                  v238 = __ldaxr(v235);
                while (__stlxr(v238 - 1, v235));
                if (!v238)
                {
                  ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                  std::__shared_weak_count::__release_weak(v233);
                }
                v197 = v234;
                v10 = v340;
                if (!v230)
                  goto LABEL_381;
              }
              else
              {
                v237 = lessThan((_QWORD *)v229, (_QWORD **)&v353);
                if (!v230)
                {
LABEL_381:
                  if (v237)
                    ++v201;
                  else
                    v200 = v228;
                  goto LABEL_384;
                }
              }
              v239 = (unint64_t *)&v230->__shared_owners_;
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                std::__shared_weak_count::__release_weak(v230);
              }
              goto LABEL_381;
            }
          }
LABEL_407:
          v198 = v199 - 1;
        }
        while (v199);
        v255 = (unint64_t)v9 >> 4;
        v256 = v345;
        v257 = v350;
        do
        {
          if (v255 < 2)
            goto LABEL_483;
          v346 = v256;
          v349 = v255;
          v258 = 0;
          v351 = *v257;
          *(_QWORD *)v257 = 0;
          *((_QWORD *)v257 + 1) = 0;
          v259 = (unint64_t)(v255 - 2) >> 1;
          v260 = (uint64_t)v257;
          do
          {
            v261 = v260 + 16 * v258 + 16;
            v262 = (2 * v258) | 1;
            v263 = 2 * v258 + 2;
            if (v263 >= v255)
              goto LABEL_431;
            v264 = *(_OWORD *)v261;
            v265 = *(std::__shared_weak_count **)(v260 + 16 * v258 + 24);
            if (v265)
            {
              v266 = (unint64_t *)&v265->__shared_owners_;
              do
                v267 = __ldxr(v266);
              while (__stxr(v267 + 1, v266));
            }
            *(_QWORD *)&v353 = *(_QWORD *)(v261 + 16);
            v268 = *(std::__shared_weak_count **)(v261 + 24);
            *((_QWORD *)&v353 + 1) = v268;
            if (v268)
            {
              v269 = (unint64_t *)&v268->__shared_owners_;
              do
                v270 = __ldxr(v269);
              while (__stxr(v270 + 1, v269));
              v271 = lessThan((_QWORD *)v264, (_QWORD **)&v353);
              do
                v272 = __ldaxr(v269);
              while (__stlxr(v272 - 1, v269));
              if (!v272)
              {
                ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                std::__shared_weak_count::__release_weak(v268);
              }
              v255 = v349;
              if (!v265)
                goto LABEL_429;
LABEL_425:
              v273 = (unint64_t *)&v265->__shared_owners_;
              do
                v274 = __ldaxr(v273);
              while (__stlxr(v274 - 1, v273));
              if (!v274)
              {
                ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                std::__shared_weak_count::__release_weak(v265);
              }
              goto LABEL_429;
            }
            v271 = lessThan((_QWORD *)v264, (_QWORD **)&v353);
            if (v265)
              goto LABEL_425;
LABEL_429:
            if (v271)
            {
              v261 += 16;
              v262 = v263;
            }
LABEL_431:
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v260, (__int128 *)v261);
            v260 = v261;
            v258 = v262;
          }
          while (v262 <= v259);
          v256 = v346;
          if (v261 == v346 - 16)
          {
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, &v351);
            v257 = v350;
            goto LABEL_478;
          }
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, (__int128 *)(v346 - 16));
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v346 - 16, &v351);
          v257 = v350;
          v275 = v261 - (_QWORD)v350 + 16;
          if (v275 < 17)
            goto LABEL_478;
          v276 = (unint64_t)((v275 >> 4) - 2) >> 1;
          v277 = &v350[v276];
          v278 = *v277;
          v279 = (std::__shared_weak_count *)*((_QWORD *)v277 + 1);
          if (v279)
          {
            v280 = (unint64_t *)&v279->__shared_owners_;
            do
              v281 = __ldxr(v280);
            while (__stxr(v281 + 1, v280));
          }
          *(_QWORD *)&v353 = *(_QWORD *)v261;
          v282 = *(std::__shared_weak_count **)(v261 + 8);
          *((_QWORD *)&v353 + 1) = v282;
          if (!v282)
          {
            v285 = lessThan((_QWORD *)v278, (_QWORD **)&v353);
            if (!v279)
              goto LABEL_452;
LABEL_448:
            v287 = (unint64_t *)&v279->__shared_owners_;
            do
              v288 = __ldaxr(v287);
            while (__stlxr(v288 - 1, v287));
            if (!v288)
            {
              ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
              std::__shared_weak_count::__release_weak(v279);
            }
            goto LABEL_452;
          }
          v283 = (unint64_t *)&v282->__shared_owners_;
          do
            v284 = __ldxr(v283);
          while (__stxr(v284 + 1, v283));
          v285 = lessThan((_QWORD *)v278, (_QWORD **)&v353);
          do
            v286 = __ldaxr(v283);
          while (__stlxr(v286 - 1, v283));
          if (!v286)
          {
            ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
            std::__shared_weak_count::__release_weak(v282);
          }
          v255 = v349;
          if (v279)
            goto LABEL_448;
LABEL_452:
          if (!v285)
            goto LABEL_478;
          v352 = *(_OWORD *)v261;
          *(_QWORD *)v261 = 0;
          *(_QWORD *)(v261 + 8) = 0;
          while (2)
          {
            v289 = (uint64_t)v277;
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, v277);
            if (v276)
            {
              v276 = (v276 - 1) >> 1;
              v277 = &v350[v276];
              v290 = *v277;
              v291 = (std::__shared_weak_count *)*((_QWORD *)v277 + 1);
              if (v291)
              {
                v292 = (unint64_t *)&v291->__shared_owners_;
                do
                  v293 = __ldxr(v292);
                while (__stxr(v293 + 1, v292));
              }
              v294 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v295 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v296 = __ldxr(v295);
                while (__stxr(v296 + 1, v295));
                v297 = lessThan((_QWORD *)v290, (_QWORD **)&v353);
                do
                  v298 = __ldaxr(v295);
                while (__stlxr(v298 - 1, v295));
                if (!v298)
                {
                  ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                  std::__shared_weak_count::__release_weak(v294);
                }
                v255 = v349;
                if (!v291)
                {
LABEL_472:
                  v261 = v289;
                  if (!v297)
                    break;
                  continue;
                }
              }
              else
              {
                v297 = lessThan((_QWORD *)v290, (_QWORD **)&v353);
                if (!v291)
                  goto LABEL_472;
              }
              v299 = (unint64_t *)&v291->__shared_owners_;
              do
                v300 = __ldaxr(v299);
              while (__stlxr(v300 - 1, v299));
              if (!v300)
              {
                ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                std::__shared_weak_count::__release_weak(v291);
              }
              goto LABEL_472;
            }
            break;
          }
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v289, &v352);
          v301 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          if (*((_QWORD *)&v352 + 1))
          {
            v302 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v303 = __ldaxr(v302);
            while (__stlxr(v303 - 1, v302));
            if (!v303)
            {
              ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
              std::__shared_weak_count::__release_weak(v301);
            }
          }
LABEL_478:
          v304 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
          if (*((_QWORD *)&v351 + 1))
          {
            v305 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
            do
              v306 = __ldaxr(v305);
            while (__stlxr(v306 - 1, v305));
            if (!v306)
            {
              ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
              std::__shared_weak_count::__release_weak(v304);
            }
          }
LABEL_483:
          v256 -= 16;
        }
        while ((unint64_t)v255-- > 2);
        return;
    }
  }
}

  v342 = a2 - 32;
  v343 = a2 - 16;
  v341 = a2 - 48;
  v7 = a1;
  v345 = a2;
  while (2)
  {
    v8 = (uint64_t)v7;
    v9 = a2 - (_QWORD)v7;
    v10 = (uint64_t)(a2 - (_QWORD)v7) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v159 = *(_QWORD **)(a2 - 16);
        v160 = *(std::__shared_weak_count **)(a2 - 8);
        if (v160)
        {
          p_shared_owners = (unint64_t *)&v160->__shared_owners_;
          do
            v162 = __ldxr(p_shared_owners);
          while (__stxr(v162 + 1, p_shared_owners));
        }
        v163 = *(std::__shared_weak_count **)(v8 + 8);
        *(_QWORD *)&v353 = *(_QWORD *)v8;
        *((_QWORD *)&v353 + 1) = v163;
        if (v163)
        {
          v164 = (unint64_t *)&v163->__shared_owners_;
          do
            v165 = __ldxr(v164);
          while (__stxr(v165 + 1, v164));
          v166 = lessThan(v159, (_QWORD **)&v353);
          do
            v167 = __ldaxr(v164);
          while (__stlxr(v167 - 1, v164));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        else
        {
          v166 = lessThan(v159, (_QWORD **)&v353);
        }
        if (v160)
        {
          v336 = (unint64_t *)&v160->__shared_owners_;
          do
            v337 = __ldaxr(v336);
          while (__stlxr(v337 - 1, v336));
          if (!v337)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        if (v166)
        {
          v338 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v338;
          v339 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v339;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v8, v8 + 16, v343);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v8, v8 + 16, v8 + 32, v343);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v8, v8 + 16, v8 + 32, v8 + 48, v343);
        return;
      default:
        if (v9 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (v8 == a2)
              return;
            v168 = v8 + 16;
            if (v8 + 16 == a2)
              return;
            v169 = v8;
            while (1)
            {
              v170 = v168;
              v171 = *(_QWORD **)(v169 + 16);
              v172 = *(std::__shared_weak_count **)(v169 + 24);
              if (v172)
              {
                v173 = (unint64_t *)&v172->__shared_owners_;
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
              }
              v175 = *(std::__shared_weak_count **)(v169 + 8);
              *(_QWORD *)&v353 = *(_QWORD *)v169;
              *((_QWORD *)&v353 + 1) = v175;
              if (v175)
              {
                v176 = (unint64_t *)&v175->__shared_owners_;
                do
                  v177 = __ldxr(v176);
                while (__stxr(v177 + 1, v176));
                v178 = lessThan(v171, (_QWORD **)&v353);
                do
                  v179 = __ldaxr(v176);
                while (__stlxr(v179 - 1, v176));
                if (!v179)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              else
              {
                v178 = lessThan(v171, (_QWORD **)&v353);
              }
              if (!v172)
                goto LABEL_290;
              v180 = (unint64_t *)&v172->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                std::__shared_weak_count::__release_weak(v172);
                if (!v178)
                  goto LABEL_318;
              }
              else
              {
LABEL_290:
                if (!v178)
                  goto LABEL_318;
              }
              v352 = *(_OWORD *)v170;
              *(_QWORD *)v170 = 0;
              *(_QWORD *)(v170 + 8) = 0;
              v182 = v170;
              while (1)
              {
                v183 = v182;
                v182 = v169;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v183, (__int128 *)v169);
                if (v169 == v8)
                  break;
                v184 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v185 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v186 = __ldxr(v185);
                  while (__stxr(v186 + 1, v185));
                }
                *(_QWORD *)&v353 = *(_QWORD *)(v169 - 16);
                v187 = *(std::__shared_weak_count **)(v169 - 8);
                *((_QWORD *)&v353 + 1) = v187;
                if (v187)
                {
                  v188 = (unint64_t *)&v187->__shared_owners_;
                  do
                    v189 = __ldxr(v188);
                  while (__stxr(v189 + 1, v188));
                  v190 = lessThan((_QWORD *)v184, (_QWORD **)&v353);
                  do
                    v191 = __ldaxr(v188);
                  while (__stlxr(v191 - 1, v188));
                  if (!v191)
                  {
                    ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                    std::__shared_weak_count::__release_weak(v187);
                  }
                }
                else
                {
                  v190 = lessThan((_QWORD *)v184, (_QWORD **)&v353);
                }
                if (*((_QWORD *)&v184 + 1))
                {
                  v192 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
                  do
                    v193 = __ldaxr(v192);
                  while (__stlxr(v193 - 1, v192));
                  if (!v193)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v184 + 1) + 16))(*((_QWORD *)&v184 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v184 + 1));
                  }
                }
                v169 = v182 - 16;
                if (!v190)
                  goto LABEL_312;
              }
              v182 = v8;
LABEL_312:
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v182, &v352);
              v194 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              if (*((_QWORD *)&v352 + 1))
              {
                v195 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v196 = __ldaxr(v195);
                while (__stlxr(v196 - 1, v195));
                if (!v196)
                {
                  ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                  std::__shared_weak_count::__release_weak(v194);
                }
              }
LABEL_318:
              v168 = v170 + 16;
              v169 = v170;
              if (v170 + 16 == a2)
                return;
            }
          }
          if (v8 == a2)
            return;
          v308 = v8 + 16;
          while (1)
          {
            if (v308 == a2)
              return;
            v309 = v308;
            v310 = *(_QWORD **)(v8 + 16);
            v311 = *(std::__shared_weak_count **)(v8 + 24);
            if (v311)
            {
              v312 = (unint64_t *)&v311->__shared_owners_;
              do
                v313 = __ldxr(v312);
              while (__stxr(v313 + 1, v312));
            }
            v314 = *(std::__shared_weak_count **)(v8 + 8);
            *(_QWORD *)&v353 = *(_QWORD *)v8;
            *((_QWORD *)&v353 + 1) = v314;
            if (v314)
            {
              v315 = (unint64_t *)&v314->__shared_owners_;
              do
                v316 = __ldxr(v315);
              while (__stxr(v316 + 1, v315));
              v317 = lessThan(v310, (_QWORD **)&v353);
              do
                v318 = __ldaxr(v315);
              while (__stlxr(v318 - 1, v315));
              if (!v318)
              {
                ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                std::__shared_weak_count::__release_weak(v314);
              }
            }
            else
            {
              v317 = lessThan(v310, (_QWORD **)&v353);
            }
            if (!v311)
              goto LABEL_503;
            v319 = (unint64_t *)&v311->__shared_owners_;
            do
              v320 = __ldaxr(v319);
            while (__stlxr(v320 - 1, v319));
            if (!v320)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
              if (!v317)
                goto LABEL_528;
            }
            else
            {
LABEL_503:
              if (!v317)
                goto LABEL_528;
            }
            v352 = *(_OWORD *)v309;
            *(_QWORD *)v309 = 0;
            *(_QWORD *)(v309 + 8) = 0;
            v321 = v309;
            do
            {
              v322 = v321;
              v321 = v8;
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v322, (__int128 *)v8);
              v323 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v324 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v325 = __ldxr(v324);
                while (__stxr(v325 + 1, v324));
              }
              *(_QWORD *)&v353 = *(_QWORD *)(v8 - 16);
              v326 = *(std::__shared_weak_count **)(v8 - 8);
              *((_QWORD *)&v353 + 1) = v326;
              if (v326)
              {
                v327 = (unint64_t *)&v326->__shared_owners_;
                do
                  v328 = __ldxr(v327);
                while (__stxr(v328 + 1, v327));
                v329 = lessThan((_QWORD *)v323, (_QWORD **)&v353);
                do
                  v330 = __ldaxr(v327);
                while (__stlxr(v330 - 1, v327));
                if (!v330)
                {
                  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                  std::__shared_weak_count::__release_weak(v326);
                }
              }
              else
              {
                v329 = lessThan((_QWORD *)v323, (_QWORD **)&v353);
              }
              if (*((_QWORD *)&v323 + 1))
              {
                v331 = (unint64_t *)(*((_QWORD *)&v323 + 1) + 8);
                do
                  v332 = __ldaxr(v331);
                while (__stlxr(v332 - 1, v331));
                if (!v332)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v323 + 1) + 16))(*((_QWORD *)&v323 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v323 + 1));
                }
              }
              v8 -= 16;
            }
            while (v329);
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v321, &v352);
            v333 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
            if (*((_QWORD *)&v352 + 1))
            {
              v334 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
              do
                v335 = __ldaxr(v334);
              while (__stlxr(v335 - 1, v334));
              if (!v335)
              {
                ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                std::__shared_weak_count::__release_weak(v333);
              }
            }
LABEL_528:
            v308 = v309 + 16;
            v8 = v309;
          }
        }
        v350 = (__int128 *)v8;
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = (__int128 *)(v8 + 16 * ((unint64_t)v10 >> 1));
          if ((unint64_t)v9 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)v12, v8, v343);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v8, (uint64_t)v12, v343);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v8 + 16, (uint64_t)(v12 - 1), v342);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v8 + 32, v8 + 16 + 16 * v11, v341);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)(v12 - 1), (uint64_t)v12, v8 + 16 + 16 * v11);
            v13 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v12;
            *v12 = v13;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v14 = *(_QWORD **)(v8 - 16);
            v15 = *(std::__shared_weak_count **)(v8 - 8);
            if (v15)
            {
              v16 = (unint64_t *)&v15->__shared_owners_;
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            v18 = *(std::__shared_weak_count **)(v8 + 8);
            *(_QWORD *)&v353 = *(_QWORD *)v8;
            *((_QWORD *)&v353 + 1) = v18;
            if (v18)
            {
              v19 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
              v21 = lessThan(v14, (_QWORD **)&v353);
              do
                v22 = __ldaxr(v19);
              while (__stlxr(v22 - 1, v19));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            else
            {
              v21 = lessThan(v14, (_QWORD **)&v353);
            }
            if (v15)
            {
              v23 = (unint64_t *)&v15->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            if (!v21)
            {
              v91 = *(_QWORD **)v350;
              v92 = (std::__shared_weak_count *)*((_QWORD *)v350 + 1);
              *(_QWORD *)&v352 = *(_QWORD *)v350;
              *((_QWORD *)&v352 + 1) = v92;
              *(_QWORD *)v350 = 0;
              *((_QWORD *)v350 + 1) = 0;
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldxr(v93);
                while (__stxr(v94 + 1, v93));
              }
              *(_QWORD *)&v353 = *(_QWORD *)(v345 - 16);
              v95 = *(std::__shared_weak_count **)(v345 - 8);
              *((_QWORD *)&v353 + 1) = v95;
              if (v95)
              {
                v96 = (unint64_t *)&v95->__shared_owners_;
                do
                  v97 = __ldxr(v96);
                while (__stxr(v97 + 1, v96));
                v98 = lessThan(v91, (_QWORD **)&v353);
                do
                  v99 = __ldaxr(v96);
                while (__stlxr(v99 - 1, v96));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              else
              {
                v98 = lessThan(v91, (_QWORD **)&v353);
              }
              if (v92)
              {
                v100 = (unint64_t *)&v92->__shared_owners_;
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 - 1, v100));
                if (!v101)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v7 = v350;
              if (v98)
              {
                v7 = v350;
                do
                {
                  v102 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v103 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v104 = __ldxr(v103);
                    while (__stxr(v104 + 1, v103));
                  }
                  v105 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v7 + 2);
                  *((_QWORD *)&v353 + 1) = v105;
                  if (v105)
                  {
                    v106 = (unint64_t *)&v105->__shared_owners_;
                    do
                      v107 = __ldxr(v106);
                    while (__stxr(v107 + 1, v106));
                    v108 = lessThan((_QWORD *)v102, (_QWORD **)&v353);
                    do
                      v109 = __ldaxr(v106);
                    while (__stlxr(v109 - 1, v106));
                    if (!v109)
                    {
                      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                      std::__shared_weak_count::__release_weak(v105);
                    }
                  }
                  else
                  {
                    v108 = lessThan((_QWORD *)v102, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v102 + 1))
                  {
                    v110 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
                    do
                      v111 = __ldaxr(v110);
                    while (__stlxr(v111 - 1, v110));
                    if (!v111)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
                    }
                  }
                  ++v7;
                }
                while (!v108);
              }
              else
              {
                while (1)
                {
                  v148 = v7++;
                  if ((unint64_t)v7 >= v345)
                    break;
                  v149 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v150 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v151 = __ldxr(v150);
                    while (__stxr(v151 + 1, v150));
                  }
                  v152 = (std::__shared_weak_count *)*((_QWORD *)v148 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v148 + 2);
                  *((_QWORD *)&v353 + 1) = v152;
                  if (v152)
                  {
                    v153 = (unint64_t *)&v152->__shared_owners_;
                    do
                      v154 = __ldxr(v153);
                    while (__stxr(v154 + 1, v153));
                    v155 = lessThan((_QWORD *)v149, (_QWORD **)&v353);
                    do
                      v156 = __ldaxr(v153);
                    while (__stlxr(v156 - 1, v153));
                    if (!v156)
                    {
                      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                      std::__shared_weak_count::__release_weak(v152);
                    }
                  }
                  else
                  {
                    v155 = lessThan((_QWORD *)v149, (_QWORD **)&v353);
                  }
                  if (!*((_QWORD *)&v149 + 1))
                    goto LABEL_250;
                  v157 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                  do
                    v158 = __ldaxr(v157);
                  while (__stlxr(v158 - 1, v157));
                  if (!v158)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
                    if (v155)
                      break;
                  }
                  else
                  {
LABEL_250:
                    if (v155)
                      break;
                  }
                }
              }
              v112 = (__int128 *)v345;
              if ((unint64_t)v7 < v345)
              {
                v112 = (__int128 *)v345;
                do
                {
                  v113 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v114 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v115 = __ldxr(v114);
                    while (__stxr(v115 + 1, v114));
                  }
                  *(_QWORD *)&v353 = *((_QWORD *)v112 - 2);
                  v116 = (std::__shared_weak_count *)*((_QWORD *)v112 - 1);
                  *((_QWORD *)&v353 + 1) = v116;
                  if (v116)
                  {
                    v117 = (unint64_t *)&v116->__shared_owners_;
                    do
                      v118 = __ldxr(v117);
                    while (__stxr(v118 + 1, v117));
                    v119 = lessThan((_QWORD *)v113, (_QWORD **)&v353);
                    do
                      v120 = __ldaxr(v117);
                    while (__stlxr(v120 - 1, v117));
                    if (!v120)
                    {
                      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                      std::__shared_weak_count::__release_weak(v116);
                    }
                  }
                  else
                  {
                    v119 = lessThan((_QWORD *)v113, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v113 + 1))
                  {
                    v121 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v113 + 1) + 16))(*((_QWORD *)&v113 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v113 + 1));
                    }
                  }
                  --v112;
                }
                while (v119);
              }
              while (v7 < v112)
              {
                v123 = *(_QWORD *)v7;
                *(_QWORD *)v7 = *(_QWORD *)v112;
                *(_QWORD *)v112 = v123;
                v124 = *((_QWORD *)v7 + 1);
                *((_QWORD *)v7 + 1) = *((_QWORD *)v112 + 1);
                *((_QWORD *)v112 + 1) = v124;
                do
                {
                  v125 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v126 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v127 = __ldxr(v126);
                    while (__stxr(v127 + 1, v126));
                  }
                  v128 = (std::__shared_weak_count *)*((_QWORD *)v7 + 3);
                  *(_QWORD *)&v353 = *((_QWORD *)v7 + 2);
                  *((_QWORD *)&v353 + 1) = v128;
                  if (v128)
                  {
                    v129 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v130 = __ldxr(v129);
                    while (__stxr(v130 + 1, v129));
                    v131 = lessThan((_QWORD *)v125, (_QWORD **)&v353);
                    do
                      v132 = __ldaxr(v129);
                    while (__stlxr(v132 - 1, v129));
                    if (!v132)
                    {
                      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                      std::__shared_weak_count::__release_weak(v128);
                    }
                  }
                  else
                  {
                    v131 = lessThan((_QWORD *)v125, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v125 + 1))
                  {
                    v133 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
                    do
                      v134 = __ldaxr(v133);
                    while (__stlxr(v134 - 1, v133));
                    if (!v134)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v125 + 1) + 16))(*((_QWORD *)&v125 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v125 + 1));
                    }
                  }
                  ++v7;
                }
                while (!v131);
                do
                {
                  v135 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v136 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v137 = __ldxr(v136);
                    while (__stxr(v137 + 1, v136));
                  }
                  *(_QWORD *)&v353 = *((_QWORD *)v112 - 2);
                  v138 = (std::__shared_weak_count *)*((_QWORD *)v112 - 1);
                  *((_QWORD *)&v353 + 1) = v138;
                  if (v138)
                  {
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldxr(v139);
                    while (__stxr(v140 + 1, v139));
                    v141 = lessThan((_QWORD *)v135, (_QWORD **)&v353);
                    do
                      v142 = __ldaxr(v139);
                    while (__stlxr(v142 - 1, v139));
                    if (!v142)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                  else
                  {
                    v141 = lessThan((_QWORD *)v135, (_QWORD **)&v353);
                  }
                  if (*((_QWORD *)&v135 + 1))
                  {
                    v143 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
                    do
                      v144 = __ldaxr(v143);
                    while (__stlxr(v144 - 1, v143));
                    if (!v144)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v135 + 1) + 16))(*((_QWORD *)&v135 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v135 + 1));
                    }
                  }
                  --v112;
                }
                while (v141);
              }
              if (v7 - 1 != v350)
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v350, v7 - 1);
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v7 - 1), &v352);
              v145 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              a2 = v345;
              if (*((_QWORD *)&v352 + 1))
              {
                v146 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                if (!v147)
                {
                  ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                  std::__shared_weak_count::__release_weak(v145);
                }
              }
              a4 = 0;
              continue;
            }
          }
          v352 = *v350;
          *(_QWORD *)v350 = 0;
          *((_QWORD *)v350 + 1) = 0;
          v25 = v350;
          do
          {
            while (1)
            {
              v26 = v25;
              v27 = (_QWORD *)*((_QWORD *)v25 + 2);
              v28 = (std::__shared_weak_count *)*((_QWORD *)v25++ + 3);
              if (v28)
              {
                v29 = (unint64_t *)&v28->__shared_owners_;
                do
                  v30 = __ldxr(v29);
                while (__stxr(v30 + 1, v29));
              }
              v31 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v32 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v33 = __ldxr(v32);
                while (__stxr(v33 + 1, v32));
                v34 = lessThan(v27, (_QWORD **)&v353);
                do
                  v35 = __ldaxr(v32);
                while (__stlxr(v35 - 1, v32));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
              else
              {
                v34 = lessThan(v27, (_QWORD **)&v353);
              }
              if (v28)
              {
                v36 = (unint64_t *)&v28->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                  break;
              }
              if (!v34)
                goto LABEL_45;
            }
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          while (v34);
LABEL_45:
          v38 = (__int128 *)v345;
          if (v26 == v350)
          {
            v38 = (__int128 *)v345;
            do
            {
              if (v25 >= v38)
                break;
              v50 = (_QWORD *)*((_QWORD *)v38 - 2);
              v51 = (std::__shared_weak_count *)*((_QWORD *)v38-- - 1);
              if (v51)
              {
                v52 = (unint64_t *)&v51->__shared_owners_;
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }
              v54 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v55 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v56 = __ldxr(v55);
                while (__stxr(v56 + 1, v55));
                v57 = lessThan(v50, (_QWORD **)&v353);
                do
                  v58 = __ldaxr(v55);
                while (__stlxr(v58 - 1, v55));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              else
              {
                v57 = lessThan(v50, (_QWORD **)&v353);
              }
              if (v51)
              {
                v59 = (unint64_t *)&v51->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
            }
            while (!v57);
          }
          else
          {
            do
            {
              while (1)
              {
                v39 = (_QWORD *)*((_QWORD *)v38 - 2);
                v40 = (std::__shared_weak_count *)*((_QWORD *)v38-- - 1);
                if (v40)
                {
                  v41 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                v43 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                v353 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v44 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v45 = __ldxr(v44);
                  while (__stxr(v45 + 1, v44));
                  v46 = lessThan(v39, (_QWORD **)&v353);
                  do
                    v47 = __ldaxr(v44);
                  while (__stlxr(v47 - 1, v44));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                    std::__shared_weak_count::__release_weak(v43);
                  }
                }
                else
                {
                  v46 = lessThan(v39, (_QWORD **)&v353);
                }
                if (v40)
                {
                  v48 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                    break;
                }
                if (v46)
                  goto LABEL_84;
              }
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
            while (!v46);
          }
LABEL_84:
          if (v25 < v38)
          {
            v61 = v25;
            v62 = v38;
            do
            {
              v63 = *(_QWORD *)v61;
              *(_QWORD *)v61 = *(_QWORD *)v62;
              *(_QWORD *)v62 = v63;
              v64 = *((_QWORD *)v61 + 1);
              *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
              *((_QWORD *)v62 + 1) = v64;
              do
              {
                while (1)
                {
                  v26 = v61;
                  v65 = (_QWORD *)*((_QWORD *)v61 + 2);
                  v66 = (std::__shared_weak_count *)*((_QWORD *)v61++ + 3);
                  if (v66)
                  {
                    v67 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v68 = __ldxr(v67);
                    while (__stxr(v68 + 1, v67));
                  }
                  v69 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  v353 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v70 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v71 = __ldxr(v70);
                    while (__stxr(v71 + 1, v70));
                    v72 = lessThan(v65, (_QWORD **)&v353);
                    do
                      v73 = __ldaxr(v70);
                    while (__stlxr(v73 - 1, v70));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                  else
                  {
                    v72 = lessThan(v65, (_QWORD **)&v353);
                  }
                  if (v66)
                  {
                    v74 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                      break;
                  }
                  if (!v72)
                    goto LABEL_107;
                }
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
              while (v72);
              do
              {
                while (1)
                {
LABEL_107:
                  v76 = (_QWORD *)*((_QWORD *)v62 - 2);
                  v77 = (std::__shared_weak_count *)*((_QWORD *)v62-- - 1);
                  if (v77)
                  {
                    v78 = (unint64_t *)&v77->__shared_owners_;
                    do
                      v79 = __ldxr(v78);
                    while (__stxr(v79 + 1, v78));
                  }
                  v80 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  v353 = v352;
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v81 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v82 = __ldxr(v81);
                    while (__stxr(v82 + 1, v81));
                    v83 = lessThan(v76, (_QWORD **)&v353);
                    do
                      v84 = __ldaxr(v81);
                    while (__stlxr(v84 - 1, v81));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  else
                  {
                    v83 = lessThan(v76, (_QWORD **)&v353);
                  }
                  if (!v77)
                    break;
                  v85 = (unint64_t *)&v77->__shared_owners_;
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (v86)
                    break;
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                  if (v83)
                    goto LABEL_123;
                }
              }
              while (!v83);
LABEL_123:
              ;
            }
            while (v61 < v62);
          }
          a1 = v350;
          if (v26 != v350)
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v350, v26);
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v26, &v352);
          v87 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          a2 = v345;
          if (*((_QWORD *)&v352 + 1))
          {
            v88 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          if (v25 < v38)
          {
LABEL_134:
            std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,false>(v350, v26, a3, a4 & 1);
            a4 = 0;
            v7 = v26 + 1;
            continue;
          }
          v90 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)v350, (uint64_t)v26);
          v7 = v26 + 1;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)(v26 + 1), v345))
          {
            if (v90)
              continue;
            goto LABEL_134;
          }
          a2 = (unint64_t)v26;
          if (v90)
            return;
          goto LABEL_1;
        }
        if (v8 == a2)
          return;
        v197 = (unint64_t)(v10 - 2) >> 1;
        v198 = v197;
        v344 = v9;
        v340 = v10;
        do
        {
          v199 = v198;
          if (v197 >= v198)
          {
            v200 = (2 * v198) | 1;
            v201 = &v350[v200];
            v202 = 2 * v198 + 2;
            v348 = v198;
            if (v202 < v10)
            {
              v203 = *v201;
              v204 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
              if (v204)
              {
                v205 = (unint64_t *)&v204->__shared_owners_;
                do
                  v206 = __ldxr(v205);
                while (__stxr(v206 + 1, v205));
              }
              *(_QWORD *)&v353 = *((_QWORD *)v201 + 2);
              v207 = (std::__shared_weak_count *)*((_QWORD *)v201 + 3);
              *((_QWORD *)&v353 + 1) = v207;
              if (v207)
              {
                v208 = (unint64_t *)&v207->__shared_owners_;
                do
                  v209 = __ldxr(v208);
                while (__stxr(v209 + 1, v208));
                v210 = lessThan((_QWORD *)v203, (_QWORD **)&v353);
                do
                  v211 = __ldaxr(v208);
                while (__stlxr(v211 - 1, v208));
                if (!v211)
                {
                  ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                  std::__shared_weak_count::__release_weak(v207);
                }
              }
              else
              {
                v210 = lessThan((_QWORD *)v203, (_QWORD **)&v353);
              }
              if (v204)
              {
                v212 = (unint64_t *)&v204->__shared_owners_;
                do
                  v213 = __ldaxr(v212);
                while (__stlxr(v213 - 1, v212));
                if (!v213)
                {
                  ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                  std::__shared_weak_count::__release_weak(v204);
                }
              }
              if (v210)
              {
                ++v201;
                v200 = v202;
              }
              v199 = v348;
            }
            v214 = *(_QWORD **)v201;
            v215 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
            if (v215)
            {
              v216 = (unint64_t *)&v215->__shared_owners_;
              do
                v217 = __ldxr(v216);
              while (__stxr(v217 + 1, v216));
            }
            v218 = (uint64_t)&v350[v199];
            v219 = *(_OWORD *)v218;
            v353 = v219;
            v220 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
            if (*((_QWORD *)&v219 + 1))
            {
              v221 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
              do
                v222 = __ldxr(v221);
              while (__stxr(v222 + 1, v221));
              v223 = lessThan(v214, (_QWORD **)&v353);
              do
                v224 = __ldaxr(v221);
              while (__stlxr(v224 - 1, v221));
              if (!v224)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
            }
            else
            {
              v223 = lessThan(v214, (_QWORD **)&v353);
            }
            if (v215)
            {
              v225 = (unint64_t *)&v215->__shared_owners_;
              do
                v226 = __ldaxr(v225);
              while (__stlxr(v226 - 1, v225));
              if (!v226)
              {
                ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                std::__shared_weak_count::__release_weak(v215);
              }
            }
            v9 = v344;
            v199 = v348;
            if (!v223)
            {
              v352 = *(_OWORD *)v218;
              *(_QWORD *)v218 = 0;
              *(_QWORD *)(v218 + 8) = 0;
              while (1)
              {
                v227 = (uint64_t)v201;
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v218, v201);
                if (v197 < v200)
                {
LABEL_401:
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v227, &v352);
                  v252 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                  if (*((_QWORD *)&v352 + 1))
                  {
                    v253 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                    do
                      v254 = __ldaxr(v253);
                    while (__stlxr(v254 - 1, v253));
                    if (!v254)
                    {
                      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                      std::__shared_weak_count::__release_weak(v252);
                    }
                  }
                  v9 = v344;
                  v199 = v348;
                  goto LABEL_407;
                }
                v228 = (2 * v200) | 1;
                v201 = &v350[v228];
                v200 = 2 * v200 + 2;
                if (v200 < v10)
                  break;
                v200 = v228;
LABEL_384:
                v241 = *(_QWORD **)v201;
                v242 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
                if (v242)
                {
                  v243 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v244 = __ldxr(v243);
                  while (__stxr(v244 + 1, v243));
                }
                v245 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
                v353 = v352;
                if (*((_QWORD *)&v352 + 1))
                {
                  v246 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                  do
                    v247 = __ldxr(v246);
                  while (__stxr(v247 + 1, v246));
                  v248 = lessThan(v241, (_QWORD **)&v353);
                  do
                    v249 = __ldaxr(v246);
                  while (__stlxr(v249 - 1, v246));
                  if (!v249)
                  {
                    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                    std::__shared_weak_count::__release_weak(v245);
                  }
                }
                else
                {
                  v248 = lessThan(v241, (_QWORD **)&v353);
                }
                if (v242)
                {
                  v250 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v251 = __ldaxr(v250);
                  while (__stlxr(v251 - 1, v250));
                  if (!v251)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                  }
                }
                v218 = v227;
                if (v248)
                  goto LABEL_401;
              }
              v229 = *v201;
              v230 = (std::__shared_weak_count *)*((_QWORD *)v201 + 1);
              if (v230)
              {
                v231 = (unint64_t *)&v230->__shared_owners_;
                do
                  v232 = __ldxr(v231);
                while (__stxr(v232 + 1, v231));
              }
              *(_QWORD *)&v353 = *((_QWORD *)v201 + 2);
              v233 = (std::__shared_weak_count *)*((_QWORD *)v201 + 3);
              *((_QWORD *)&v353 + 1) = v233;
              if (v233)
              {
                v234 = v197;
                v235 = (unint64_t *)&v233->__shared_owners_;
                do
                  v236 = __ldxr(v235);
                while (__stxr(v236 + 1, v235));
                v237 = lessThan((_QWORD *)v229, (_QWORD **)&v353);
                do
                  v238 = __ldaxr(v235);
                while (__stlxr(v238 - 1, v235));
                if (!v238)
                {
                  ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                  std::__shared_weak_count::__release_weak(v233);
                }
                v197 = v234;
                v10 = v340;
                if (!v230)
                  goto LABEL_381;
              }
              else
              {
                v237 = lessThan((_QWORD *)v229, (_QWORD **)&v353);
                if (!v230)
                {
LABEL_381:
                  if (v237)
                    ++v201;
                  else
                    v200 = v228;
                  goto LABEL_384;
                }
              }
              v239 = (unint64_t *)&v230->__shared_owners_;
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                std::__shared_weak_count::__release_weak(v230);
              }
              goto LABEL_381;
            }
          }
LABEL_407:
          v198 = v199 - 1;
        }
        while (v199);
        v255 = (unint64_t)v9 >> 4;
        v256 = v345;
        v257 = v350;
        do
        {
          if (v255 < 2)
            goto LABEL_483;
          v346 = v256;
          v349 = v255;
          v258 = 0;
          v351 = *v257;
          *(_QWORD *)v257 = 0;
          *((_QWORD *)v257 + 1) = 0;
          v259 = (unint64_t)(v255 - 2) >> 1;
          v260 = (uint64_t)v257;
          do
          {
            v261 = v260 + 16 * v258 + 16;
            v262 = (2 * v258) | 1;
            v263 = 2 * v258 + 2;
            if (v263 >= v255)
              goto LABEL_431;
            v264 = *(_OWORD *)v261;
            v265 = *(std::__shared_weak_count **)(v260 + 16 * v258 + 24);
            if (v265)
            {
              v266 = (unint64_t *)&v265->__shared_owners_;
              do
                v267 = __ldxr(v266);
              while (__stxr(v267 + 1, v266));
            }
            *(_QWORD *)&v353 = *(_QWORD *)(v261 + 16);
            v268 = *(std::__shared_weak_count **)(v261 + 24);
            *((_QWORD *)&v353 + 1) = v268;
            if (v268)
            {
              v269 = (unint64_t *)&v268->__shared_owners_;
              do
                v270 = __ldxr(v269);
              while (__stxr(v270 + 1, v269));
              v271 = lessThan((_QWORD *)v264, (_QWORD **)&v353);
              do
                v272 = __ldaxr(v269);
              while (__stlxr(v272 - 1, v269));
              if (!v272)
              {
                ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                std::__shared_weak_count::__release_weak(v268);
              }
              v255 = v349;
              if (!v265)
                goto LABEL_429;
LABEL_425:
              v273 = (unint64_t *)&v265->__shared_owners_;
              do
                v274 = __ldaxr(v273);
              while (__stlxr(v274 - 1, v273));
              if (!v274)
              {
                ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                std::__shared_weak_count::__release_weak(v265);
              }
              goto LABEL_429;
            }
            v271 = lessThan((_QWORD *)v264, (_QWORD **)&v353);
            if (v265)
              goto LABEL_425;
LABEL_429:
            if (v271)
            {
              v261 += 16;
              v262 = v263;
            }
LABEL_431:
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v260, (__int128 *)v261);
            v260 = v261;
            v258 = v262;
          }
          while (v262 <= v259);
          v256 = v346;
          if (v261 == v346 - 16)
          {
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, &v351);
            v257 = v350;
            goto LABEL_478;
          }
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, (__int128 *)(v346 - 16));
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v346 - 16, &v351);
          v257 = v350;
          v275 = v261 - (_QWORD)v350 + 16;
          if (v275 < 17)
            goto LABEL_478;
          v276 = (unint64_t)((v275 >> 4) - 2) >> 1;
          v277 = &v350[v276];
          v278 = *v277;
          v279 = (std::__shared_weak_count *)*((_QWORD *)v277 + 1);
          if (v279)
          {
            v280 = (unint64_t *)&v279->__shared_owners_;
            do
              v281 = __ldxr(v280);
            while (__stxr(v281 + 1, v280));
          }
          *(_QWORD *)&v353 = *(_QWORD *)v261;
          v282 = *(std::__shared_weak_count **)(v261 + 8);
          *((_QWORD *)&v353 + 1) = v282;
          if (!v282)
          {
            v285 = lessThan((_QWORD *)v278, (_QWORD **)&v353);
            if (!v279)
              goto LABEL_452;
LABEL_448:
            v287 = (unint64_t *)&v279->__shared_owners_;
            do
              v288 = __ldaxr(v287);
            while (__stlxr(v288 - 1, v287));
            if (!v288)
            {
              ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
              std::__shared_weak_count::__release_weak(v279);
            }
            goto LABEL_452;
          }
          v283 = (unint64_t *)&v282->__shared_owners_;
          do
            v284 = __ldxr(v283);
          while (__stxr(v284 + 1, v283));
          v285 = lessThan((_QWORD *)v278, (_QWORD **)&v353);
          do
            v286 = __ldaxr(v283);
          while (__stlxr(v286 - 1, v283));
          if (!v286)
          {
            ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
            std::__shared_weak_count::__release_weak(v282);
          }
          v255 = v349;
          if (v279)
            goto LABEL_448;
LABEL_452:
          if (!v285)
            goto LABEL_478;
          v352 = *(_OWORD *)v261;
          *(_QWORD *)v261 = 0;
          *(_QWORD *)(v261 + 8) = 0;
          while (2)
          {
            v289 = (uint64_t)v277;
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v261, v277);
            if (v276)
            {
              v276 = (v276 - 1) >> 1;
              v277 = &v350[v276];
              v290 = *v277;
              v291 = (std::__shared_weak_count *)*((_QWORD *)v277 + 1);
              if (v291)
              {
                v292 = (unint64_t *)&v291->__shared_owners_;
                do
                  v293 = __ldxr(v292);
                while (__stxr(v293 + 1, v292));
              }
              v294 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
              v353 = v352;
              if (*((_QWORD *)&v352 + 1))
              {
                v295 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
                do
                  v296 = __ldxr(v295);
                while (__stxr(v296 + 1, v295));
                v297 = lessThan((_QWORD *)v290, (_QWORD **)&v353);
                do
                  v298 = __ldaxr(v295);
                while (__stlxr(v298 - 1, v295));
                if (!v298)
                {
                  ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                  std::__shared_weak_count::__release_weak(v294);
                }
                v255 = v349;
                if (!v291)
                {
LABEL_472:
                  v261 = v289;
                  if (!v297)
                    break;
                  continue;
                }
              }
              else
              {
                v297 = lessThan((_QWORD *)v290, (_QWORD **)&v353);
                if (!v291)
                  goto LABEL_472;
              }
              v299 = (unint64_t *)&v291->__shared_owners_;
              do
                v300 = __ldaxr(v299);
              while (__stlxr(v300 - 1, v299));
              if (!v300)
              {
                ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                std::__shared_weak_count::__release_weak(v291);
              }
              goto LABEL_472;
            }
            break;
          }
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v289, &v352);
          v301 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          if (*((_QWORD *)&v352 + 1))
          {
            v302 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v303 = __ldaxr(v302);
            while (__stlxr(v303 - 1, v302));
            if (!v303)
            {
              ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
              std::__shared_weak_count::__release_weak(v301);
            }
          }
LABEL_478:
          v304 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
          if (*((_QWORD *)&v351 + 1))
          {
            v305 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
            do
              v306 = __ldaxr(v305);
            while (__stlxr(v306 - 1, v305));
            if (!v306)
            {
              ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
              std::__shared_weak_count::__release_weak(v304);
            }
          }
LABEL_483:
          v256 -= 16;
        }
        while ((unint64_t)v255-- > 2);
        return;
    }
  }
}

  v9 = a1;
  v133 = a1 + 12;
  v134 = a1 + 6;
  location = (id *)(a1 + 3);
  from = (id *)(a1 + 2);
  v132 = a1 - 6;
  while (2)
  {
    v10 = (char *)a2 - (char *)v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v9) >> 4);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((*a3)(a2 - 6, v9))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(v9, a2 - 6);
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v9, v9 + 6, a2 - 6, a3);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v9, v9 + 6, v9 + 12, a2 - 6, a3);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v9, v9 + 6, v9 + 12, v9 + 18, a2 - 6, a3);
        return;
      default:
        if (v10 > 1151)
        {
          if (!a4)
          {
            if (v9 != a2)
            {
              v136 = a2;
              to = (id *)((unint64_t)(v11 - 2) >> 1);
              v67 = to;
              do
              {
                v68 = v67;
                if ((uint64_t)to >= (uint64_t)v67)
                {
                  v69 = (2 * (_QWORD)v67) | 1;
                  v70 = &v9[6 * v69];
                  if (2 * (uint64_t)v67 + 2 < v11 && (*a3)(&v9[6 * v69], v70 + 6))
                  {
                    v70 += 6;
                    v69 = 2 * (_QWORD)v68 + 2;
                  }
                  v71 = &v9[6 * (_QWORD)v68];
                  if (((*a3)(v70, v71) & 1) == 0)
                  {
                    v72 = *v71;
                    v148 = *((_DWORD *)v71 + 2);
                    v147 = v72;
                    froma = v68;
                    v73 = &v9[6 * (_QWORD)v68];
                    objc_moveWeak(&v149, (id *)v73 + 2);
                    v74 = *(_OWORD *)(v73 + 3);
                    v151 = *((_DWORD *)v73 + 10);
                    v150 = v74;
                    do
                    {
                      v75 = v70;
                      v76 = *v70;
                      *((_DWORD *)v71 + 2) = *((_DWORD *)v70 + 2);
                      *v71 = v76;
                      v77 = (id *)(v70 + 2);
                      WeakRetained = objc_loadWeakRetained((id *)v70 + 2);
                      objc_storeWeak((id *)v71 + 2, WeakRetained);

                      v79 = *(_OWORD *)(v75 + 3);
                      *((_DWORD *)v71 + 10) = *((_DWORD *)v75 + 10);
                      *(_OWORD *)(v71 + 3) = v79;
                      if ((uint64_t)to < v69)
                        break;
                      v80 = (2 * v69) | 1;
                      v70 = &v9[6 * v80];
                      v69 = 2 * v69 + 2;
                      if (v69 >= v11)
                      {
                        v69 = v80;
                      }
                      else if ((*a3)(&v9[6 * v80], v70 + 6))
                      {
                        v70 += 6;
                      }
                      else
                      {
                        v69 = v80;
                      }
                      v71 = v75;
                    }
                    while (!(*a3)(v70, &v147));
                    v81 = v147;
                    *((_DWORD *)v75 + 2) = v148;
                    *v75 = v81;
                    v82 = objc_loadWeakRetained(&v149);
                    objc_storeWeak(v77, v82);

                    v83 = v150;
                    *((_DWORD *)v75 + 10) = v151;
                    *(_OWORD *)(v75 + 3) = v83;
                    objc_destroyWeak(&v149);
                    v68 = froma;
                  }
                }
                v67 = (id *)((char *)v68 - 1);
              }
              while (v68);
              v84 = v10 / 0x30uLL;
              v85 = v136;
              do
              {
                v137 = v85;
                if (v84 >= 2)
                {
                  v143 = *((_DWORD *)v9 + 2);
                  v142 = *v9;
                  objc_moveWeak(&v144, (id *)v9 + 2);
                  v86 = 0;
                  v87 = *(_OWORD *)(v9 + 3);
                  v146 = *((_DWORD *)v9 + 10);
                  v145 = v87;
                  v88 = (uint64_t)v9;
                  do
                  {
                    v89 = v88 + 48 * v86 + 48;
                    v90 = (2 * v86) | 1;
                    v91 = 2 * v86 + 2;
                    if (v91 < v84
                      && (*a3)((uint64_t *)(v88 + 48 * v86 + 48), (uint64_t *)(v88 + 48 * v86 + 96)))
                    {
                      v89 += 48;
                      v90 = v91;
                    }
                    v92 = *(_QWORD *)v89;
                    *(_DWORD *)(v88 + 8) = *(_DWORD *)(v89 + 8);
                    *(_QWORD *)v88 = v92;
                    v93 = (id *)(v89 + 16);
                    v94 = objc_loadWeakRetained((id *)(v89 + 16));
                    objc_storeWeak((id *)(v88 + 16), v94);

                    v95 = *(_OWORD *)(v89 + 24);
                    *(_DWORD *)(v88 + 40) = *(_DWORD *)(v89 + 40);
                    *(_OWORD *)(v88 + 24) = v95;
                    v88 = v89;
                    v86 = v90;
                  }
                  while (v90 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
                  v96 = v89 + 24;
                  v97 = v137 - 6;
                  if ((uint64_t *)v89 == v137 - 6)
                  {
                    *(_DWORD *)(v89 + 8) = v143;
                    *(_QWORD *)v89 = v142;
                    v116 = objc_loadWeakRetained(&v144);
                    objc_storeWeak(v93, v116);

                    v117 = v145;
                    *(_DWORD *)(v96 + 16) = v146;
                    *(_OWORD *)v96 = v117;
                  }
                  else
                  {
                    v98 = *v97;
                    *(_DWORD *)(v89 + 8) = *((_DWORD *)v137 - 10);
                    *(_QWORD *)v89 = v98;
                    v99 = objc_loadWeakRetained((id *)v137 - 4);
                    objc_storeWeak((id *)(v89 + 16), v99);

                    v100 = *(_OWORD *)(v137 - 3);
                    *(_DWORD *)(v89 + 40) = *((_DWORD *)v137 - 2);
                    *(_OWORD *)v96 = v100;
                    *v97 = v142;
                    *((_DWORD *)v137 - 10) = v143;
                    v101 = objc_loadWeakRetained(&v144);
                    objc_storeWeak((id *)v137 - 4, v101);

                    v102 = v145;
                    *((_DWORD *)v137 - 2) = v146;
                    *(_OWORD *)(v137 - 3) = v102;
                    v103 = v89 - (_QWORD)v9 + 48;
                    if (v103 >= 49)
                    {
                      v104 = (unint64_t)(-2 - 0x5555555555555555 * (v103 >> 4)) >> 1;
                      v105 = &v9[6 * v104];
                      if ((*a3)(v105, (uint64_t *)v89))
                      {
                        v106 = *(_QWORD *)v89;
                        v148 = *(_DWORD *)(v89 + 8);
                        v147 = v106;
                        objc_moveWeak(&v149, (id *)(v89 + 16));
                        v107 = *(_OWORD *)(v89 + 24);
                        v151 = *(_DWORD *)(v89 + 40);
                        v150 = v107;
                        do
                        {
                          v108 = (uint64_t)v105;
                          v109 = *v105;
                          *(_DWORD *)(v89 + 8) = *((_DWORD *)v105 + 2);
                          *(_QWORD *)v89 = v109;
                          v110 = (id *)(v105 + 2);
                          v111 = objc_loadWeakRetained((id *)v105 + 2);
                          objc_storeWeak((id *)(v89 + 16), v111);

                          v112 = *(_OWORD *)(v108 + 24);
                          *(_DWORD *)(v89 + 40) = *(_DWORD *)(v108 + 40);
                          *(_OWORD *)(v89 + 24) = v112;
                          if (!v104)
                            break;
                          v104 = (v104 - 1) >> 1;
                          v105 = &v9[6 * v104];
                          v89 = v108;
                        }
                        while (((*a3)(v105, &v147) & 1) != 0);
                        v113 = v147;
                        *(_DWORD *)(v108 + 8) = v148;
                        *(_QWORD *)v108 = v113;
                        v114 = objc_loadWeakRetained(&v149);
                        objc_storeWeak(v110, v114);

                        v115 = v150;
                        *(_DWORD *)(v108 + 40) = v151;
                        *(_OWORD *)(v108 + 24) = v115;
                        objc_destroyWeak(&v149);
                      }
                    }
                  }
                  objc_destroyWeak(&v144);
                }
                v85 = v137 - 6;
              }
              while ((unint64_t)v84-- > 2);
            }
            return;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[6 * ((unint64_t)v11 >> 1)];
          v14 = a2 - 6;
          if ((unint64_t)v10 < 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v13, v9, a2 - 6, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v9, v13, a2 - 6, a3);
            v15 = &v9[6 * v12];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v134, v15 - 6, a2 - 12, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v133, v15 + 6, a2 - 18, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v15 - 6, v13, v15 + 6, a3);
            v16 = *v9;
            v148 = *((_DWORD *)v9 + 2);
            v147 = v16;
            objc_moveWeak(&v149, from);
            v17 = *(_OWORD *)location;
            v151 = *((_DWORD *)location + 4);
            v150 = v17;
            v18 = *((_DWORD *)v13 + 2);
            *v9 = *v13;
            *((_DWORD *)v9 + 2) = v18;
            v19 = objc_loadWeakRetained((id *)v15 + 2);
            objc_storeWeak(from, v19);

            v14 = a2 - 6;
            v20 = *(_OWORD *)(v15 + 3);
            *((_DWORD *)location + 4) = *((_DWORD *)v15 + 10);
            *(_OWORD *)location = v20;
            v21 = v148;
            *v13 = v147;
            *((_DWORD *)v13 + 2) = v21;
            v22 = objc_loadWeakRetained(&v149);
            objc_storeWeak((id *)v15 + 2, v22);

            v23 = v150;
            *((_DWORD *)v15 + 10) = v151;
            *(_OWORD *)(v15 + 3) = v23;
            objc_destroyWeak(&v149);
          }
          --a4;
          if ((a5 & 1) != 0 || ((*a3)(v132, v9) & 1) != 0)
          {
            v24 = *v9;
            v148 = *((_DWORD *)v9 + 2);
            v147 = v24;
            objc_moveWeak(&v149, from);
            v25 = *(_OWORD *)location;
            v151 = *((_DWORD *)location + 4);
            v150 = v25;
            v26 = v9;
            do
              v26 += 6;
            while (((*a3)(v26, &v147) & 1) != 0);
            v27 = a2;
            if (v26 - 6 == v9)
            {
              v27 = a2;
              do
              {
                if (v26 >= v27)
                  break;
                v27 -= 6;
              }
              while (((*a3)(v27, &v147) & 1) == 0);
            }
            else
            {
              do
                v27 -= 6;
              while (!(*a3)(v27, &v147));
            }
            a1 = v26;
            if (v26 < v27)
            {
              v28 = v27;
              do
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a1, v28);
                do
                  a1 += 6;
                while (((*a3)(a1, &v147) & 1) != 0);
                do
                  v28 -= 6;
                while (!(*a3)(v28, &v147));
              }
              while (a1 < v28);
            }
            v29 = a1 - 6;
            if (a1 - 6 != v9)
            {
              v30 = *v29;
              *((_DWORD *)v9 + 2) = *((_DWORD *)a1 - 10);
              *v9 = v30;
              v31 = objc_loadWeakRetained((id *)a1 - 4);
              objc_storeWeak(from, v31);

              v32 = *(_OWORD *)(a1 - 3);
              *((_DWORD *)location + 4) = *((_DWORD *)a1 - 2);
              *(_OWORD *)location = v32;
            }
            v33 = v147;
            *((_DWORD *)a1 - 10) = v148;
            *v29 = v33;
            v34 = objc_loadWeakRetained(&v149);
            objc_storeWeak((id *)a1 - 4, v34);

            v35 = v150;
            *((_DWORD *)a1 - 2) = v151;
            *(_OWORD *)(a1 - 3) = v35;
            objc_destroyWeak(&v149);
            if (v26 >= v27)
            {
              v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v9, a1 - 6, a3);
              if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a2, a3))
              {
                a2 = a1 - 6;
                if ((v36 & 1) == 0)
                  continue;
                return;
              }
              if ((v36 & 1) != 0)
                goto LABEL_1;
            }
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*,false>(v9, a1 - 6, a3, a4, a5 & 1);
            a5 = 0;
            goto LABEL_1;
          }
          v37 = *v9;
          v148 = *((_DWORD *)v9 + 2);
          v147 = v37;
          objc_moveWeak(&v149, (id *)v9 + 2);
          v38 = *(_OWORD *)(v9 + 3);
          v151 = *((_DWORD *)v9 + 10);
          v150 = v38;
          if (((*a3)(&v147, v14) & 1) != 0)
          {
            a1 = v9;
            do
              a1 += 6;
            while (((*a3)(&v147, a1) & 1) == 0);
          }
          else
          {
            v39 = v9 + 6;
            do
            {
              a1 = v39;
              if (v39 >= a2)
                break;
              v40 = (*a3)(&v147, v39);
              v39 = a1 + 6;
            }
            while (!v40);
          }
          v41 = a2;
          if (a1 < a2)
          {
            v41 = a2;
            do
              v41 -= 6;
            while (((*a3)(&v147, v41) & 1) != 0);
          }
          while (a1 < v41)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a1, v41);
            do
              a1 += 6;
            while (!(*a3)(&v147, a1));
            do
              v41 -= 6;
            while (((*a3)(&v147, v41) & 1) != 0);
          }
          v42 = a1 - 6;
          if (a1 - 6 != v9)
          {
            v43 = *v42;
            *((_DWORD *)v9 + 2) = *((_DWORD *)a1 - 10);
            *v9 = v43;
            v44 = objc_loadWeakRetained((id *)a1 - 4);
            objc_storeWeak((id *)v9 + 2, v44);

            v45 = *(_OWORD *)(a1 - 3);
            *((_DWORD *)v9 + 10) = *((_DWORD *)a1 - 2);
            *(_OWORD *)(v9 + 3) = v45;
          }
          v46 = v147;
          *((_DWORD *)a1 - 10) = v148;
          *v42 = v46;
          v47 = objc_loadWeakRetained(&v149);
          objc_storeWeak((id *)a1 - 4, v47);

          v48 = v150;
          *((_DWORD *)a1 - 2) = v151;
          *(_OWORD *)(a1 - 3) = v48;
          objc_destroyWeak(&v149);
          a5 = 0;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          if (v9 != a2)
          {
            v49 = a2;
            v50 = v9 + 6;
            if (v9 + 6 != a2)
            {
              v51 = 0;
              v52 = v9;
              do
              {
                v53 = v50;
                if ((*a3)(v50, v52))
                {
                  v54 = *v53;
                  v148 = *((_DWORD *)v53 + 2);
                  v147 = v54;
                  objc_moveWeak(&v149, (id *)v52 + 8);
                  v150 = *(_OWORD *)(v52 + 9);
                  v151 = *((_DWORD *)v52 + 22);
                  v55 = v51;
                  while (1)
                  {
                    v56 = v55;
                    v57 = (char *)v9 + v55;
                    *((_QWORD *)v57 + 6) = *(uint64_t *)((char *)v9 + v55);
                    *((_DWORD *)v57 + 14) = *(_DWORD *)((char *)v9 + v55 + 8);
                    v58 = (id *)((char *)v9 + v55 + 16);
                    v59 = objc_loadWeakRetained(v58);
                    objc_storeWeak((id *)v57 + 8, v59);

                    *(_OWORD *)(v57 + 72) = *(_OWORD *)(v57 + 24);
                    *((_DWORD *)v57 + 22) = *((_DWORD *)v57 + 10);
                    if (!v56)
                      break;
                    v60 = (*a3)(&v147, (uint64_t *)v57 - 6);
                    v55 = v56 - 48;
                    if ((v60 & 1) == 0)
                    {
                      v61 = (uint64_t *)((char *)v9 + v56);
                      v62 = (char *)v9 + v56;
                      v63 = (uint64_t)v9 + v56 + 24;
                      v58 = (id *)(v62 + 16);
                      goto LABEL_66;
                    }
                  }
                  v63 = (uint64_t)(v57 + 24);
                  v61 = v9;
LABEL_66:
                  v64 = v147;
                  *((_DWORD *)v61 + 2) = v148;
                  *v61 = v64;
                  v65 = objc_loadWeakRetained(&v149);
                  objc_storeWeak(v58, v65);

                  v66 = v150;
                  *(_DWORD *)(v63 + 16) = v151;
                  *(_OWORD *)v63 = v66;
                  objc_destroyWeak(&v149);
                }
                v50 = v53 + 6;
                v51 += 48;
                v52 = v53;
              }
              while (v53 + 6 != v49);
            }
          }
        }
        else if (v9 != a2)
        {
          v119 = v9 + 6;
          if (v9 + 6 != a2)
          {
            v120 = v9 + 9;
            do
            {
              v121 = v119;
              if ((*a3)(v119, v9))
              {
                v122 = *v121;
                v148 = *((_DWORD *)v121 + 2);
                v147 = v122;
                objc_moveWeak(&v149, (id *)v9 + 8);
                v150 = *(_OWORD *)(v9 + 9);
                v151 = *((_DWORD *)v9 + 22);
                v123 = v120;
                do
                {
                  v124 = v123;
                  *(v123 - 3) = *(v123 - 9);
                  *((_DWORD *)v123 - 4) = *((_DWORD *)v123 - 16);
                  v125 = (id *)(v123 - 7);
                  v126 = objc_loadWeakRetained((id *)v123 - 7);
                  objc_storeWeak((id *)v123 - 1, v126);

                  *(_OWORD *)v123 = *((_OWORD *)v123 - 3);
                  *((_DWORD *)v123 + 4) = *((_DWORD *)v123 - 8);
                  v127 = (*a3)(&v147, v123 - 15);
                  v123 -= 6;
                }
                while ((v127 & 1) != 0);
                v128 = v124 - 9;
                v129 = v147;
                *((_DWORD *)v128 + 2) = v148;
                *v128 = v129;
                v130 = objc_loadWeakRetained(&v149);
                objc_storeWeak(v125, v130);

                v131 = v150;
                *((_DWORD *)v124 - 8) = v151;
                *(_OWORD *)v123 = v131;
                objc_destroyWeak(&v149);
              }
              v119 = v121 + 6;
              v120 += 6;
              v9 = v121;
            }
            while (v121 + 6 != a2);
          }
        }
        return;
    }
  }
}

  v6 = a2;
  v7 = a2 - 2;
  v8 = a1;
  while (2)
  {
    v9 = v8;
    v10 = (char *)v6 - (char *)v8;
    v11 = ((char *)v6 - (char *)v8) >> 4;
    a1 = v9;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((APComponent::Key::sortCompare((_DWORD *)(*v7 + 36), (_DWORD *)(*v9 + 36), 0) & 0x80000000) != 0)
        {
          v49 = *v9;
          *v9 = *(a2 - 2);
          *(a2 - 2) = v49;
          v50 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v50;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(v9, v9 + 2, v7);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(v9, v9 + 2, v9 + 4, v7);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *,0>(v9, v9 + 2, v9 + 4, v9 + 6, v7);
        return;
      default:
        if (v10 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (v9 != v6)
            {
              v51 = v9 + 2;
              if (v9 + 2 != a2)
              {
                v52 = 0;
                v53 = v9;
                do
                {
                  v54 = v53[2];
                  v55 = *v53;
                  v53 = v51;
                  if ((APComponent::Key::sortCompare((_DWORD *)(v54 + 36), (_DWORD *)(v55 + 36), 0) & 0x80000000) != 0)
                  {
                    v108 = *(_OWORD *)v53;
                    v56 = v108;
                    *v53 = 0;
                    v53[1] = 0;
                    v57 = (_DWORD *)(v56 + 36);
                    v58 = v52;
                    while (1)
                    {
                      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v9 + v58 + 16, (__int128 *)((char *)v9 + v58));
                      if (!v58)
                        break;
                      v59 = APComponent::Key::sortCompare(v57, (_DWORD *)(*(uint64_t *)((char *)v9 + v58 - 16) + 36), 0);
                      v58 -= 16;
                      if ((v59 & 0x80000000) == 0)
                      {
                        v60 = (uint64_t)v9 + v58 + 16;
                        goto LABEL_80;
                      }
                    }
                    v60 = (uint64_t)v9;
LABEL_80:
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v60, &v108);
                    v61 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
                    if (*((_QWORD *)&v108 + 1))
                    {
                      v62 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
                      do
                        v63 = __ldaxr(v62);
                      while (__stlxr(v63 - 1, v62));
                      if (!v63)
                      {
                        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                        std::__shared_weak_count::__release_weak(v61);
                      }
                    }
                  }
                  v51 = v53 + 2;
                  v52 += 16;
                }
                while (v53 + 2 != a2);
              }
            }
          }
          else if (v9 != v6)
          {
            v96 = v9 + 2;
            if (v9 + 2 != a2)
            {
              do
              {
                v97 = v96;
                v98 = (__int128 *)a1;
                if ((APComponent::Key::sortCompare((_DWORD *)(a1[2] + 36), (_DWORD *)(*a1 + 36), 0) & 0x80000000) != 0)
                {
                  v108 = *(_OWORD *)v97;
                  v99 = v108;
                  *v97 = 0;
                  v97[1] = 0;
                  v100 = (_DWORD *)(v99 + 36);
                  do
                  {
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v98 + 1), v98);
                    v101 = *((_QWORD *)v98-- - 2);
                  }
                  while ((APComponent::Key::sortCompare(v100, (_DWORD *)(v101 + 36), 0) & 0x80000000) != 0);
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v98 + 1), &v108);
                  v102 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
                  if (*((_QWORD *)&v108 + 1))
                  {
                    v103 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
                    do
                      v104 = __ldaxr(v103);
                    while (__stlxr(v104 - 1, v103));
                    if (!v104)
                    {
                      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                      std::__shared_weak_count::__release_weak(v102);
                    }
                  }
                }
                v96 = v97 + 2;
                a1 = v97;
              }
              while (v97 + 2 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (v9 != v6)
          {
            v64 = (unint64_t)(v11 - 2) >> 1;
            v65 = v64;
            do
            {
              v66 = v65;
              if (v64 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = &a1[2 * v67];
                if (2 * v65 + 2 < v11
                  && (int)APComponent::Key::sortCompare((_DWORD *)(*v68 + 36), (_DWORD *)(v68[2] + 36), 0) < 0)
                {
                  v68 += 2;
                  v67 = 2 * v66 + 2;
                }
                v69 = &a1[2 * v66];
                if ((APComponent::Key::sortCompare((_DWORD *)(*v68 + 36), (_DWORD *)(*v69 + 36), 0) & 0x80000000) == 0)
                {
                  v108 = *(_OWORD *)v69;
                  v70 = v108;
                  *v69 = 0;
                  v69[1] = 0;
                  v71 = (_DWORD *)(v70 + 36);
                  do
                  {
                    v72 = (uint64_t)v68;
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v69, (__int128 *)v68);
                    if (v64 < v67)
                      break;
                    v68 = &a1[2 * ((2 * v67) | 1)];
                    if (2 * v67 + 2 >= v11)
                    {
                      v67 = (2 * v67) | 1;
                    }
                    else if ((int)APComponent::Key::sortCompare((_DWORD *)(*v68 + 36), (_DWORD *)(v68[2] + 36), 0) >= 0)
                    {
                      v67 = (2 * v67) | 1;
                    }
                    else
                    {
                      v68 += 2;
                      v67 = 2 * v67 + 2;
                    }
                    v69 = (uint64_t *)v72;
                  }
                  while ((APComponent::Key::sortCompare((_DWORD *)(*v68 + 36), v71, 0) & 0x80000000) == 0);
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v72, &v108);
                  v73 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
                  if (*((_QWORD *)&v108 + 1))
                  {
                    v74 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                    {
                      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                      std::__shared_weak_count::__release_weak(v73);
                    }
                  }
                }
              }
              v65 = v66 - 1;
            }
            while (v66);
            v76 = (unint64_t)v10 >> 4;
            do
            {
              v77 = 0;
              v107 = *(_OWORD *)a1;
              *a1 = 0;
              a1[1] = 0;
              v78 = (uint64_t)a1;
              do
              {
                v79 = v78 + 16 * v77 + 16;
                v80 = (2 * v77) | 1;
                v81 = 2 * v77 + 2;
                if (v81 < v76
                  && (int)APComponent::Key::sortCompare((_DWORD *)(*(_QWORD *)v79 + 36), (_DWORD *)(*(_QWORD *)(v78 + 16 * v77 + 32) + 36), 0) < 0)
                {
                  v79 += 16;
                  v80 = v81;
                }
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v78, (__int128 *)v79);
                v78 = v79;
                v77 = v80;
              }
              while (v80 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
              v82 = (uint64_t)(a2 - 2);
              if ((uint64_t *)v79 == a2 - 2)
              {
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v79, &v107);
              }
              else
              {
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v79, (__int128 *)a2 - 1);
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v82, &v107);
                v83 = v79 - (_QWORD)a1 + 16;
                if (v83 >= 17)
                {
                  v84 = (((unint64_t)v83 >> 4) - 2) >> 1;
                  v85 = (__int128 *)&a1[2 * v84];
                  if ((APComponent::Key::sortCompare((_DWORD *)(*(_QWORD *)v85 + 36), (_DWORD *)(*(_QWORD *)v79 + 36), 0) & 0x80000000) != 0)
                  {
                    v108 = *(_OWORD *)v79;
                    v86 = v108;
                    *(_QWORD *)v79 = 0;
                    *(_QWORD *)(v79 + 8) = 0;
                    v87 = (_DWORD *)(v86 + 36);
                    do
                    {
                      v88 = (uint64_t)v85;
                      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v79, v85);
                      if (!v84)
                        break;
                      v84 = (v84 - 1) >> 1;
                      v85 = (__int128 *)&a1[2 * v84];
                      v79 = v88;
                    }
                    while ((APComponent::Key::sortCompare((_DWORD *)(*(_QWORD *)v85 + 36), v87, 0) & 0x80000000) != 0);
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v88, &v108);
                    v89 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
                    v82 = (uint64_t)(a2 - 2);
                    if (*((_QWORD *)&v108 + 1))
                    {
                      v90 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
                      do
                        v91 = __ldaxr(v90);
                      while (__stlxr(v91 - 1, v90));
                      if (!v91)
                      {
                        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                        std::__shared_weak_count::__release_weak(v89);
                      }
                    }
                  }
                }
              }
              v92 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (*((_QWORD *)&v107 + 1))
              {
                v93 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              a2 = (uint64_t *)v82;
            }
            while (v76-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9[2 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(v13, v9, v7);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(v9, v13, v7);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(v9 + 2, v13 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(v9 + 4, &v9[2 * v12 + 2], a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(v13 - 2, v13, &v9[2 * v12 + 2]);
          v14 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *(_OWORD *)v13;
          *(_OWORD *)v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0
          && (APComponent::Key::sortCompare((_DWORD *)(*(v9 - 2) + 36), (_DWORD *)(*v9 + 36), 0) & 0x80000000) == 0)
        {
          v108 = *(_OWORD *)v9;
          v34 = v108;
          *v9 = 0;
          v9[1] = 0;
          v35 = (_DWORD *)(v34 + 36);
          if ((APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(*v7 + 36), 0) & 0x80000000) != 0)
          {
            v8 = v9;
            do
            {
              v38 = v8[2];
              v8 += 2;
            }
            while ((APComponent::Key::sortCompare(v35, (_DWORD *)(v38 + 36), 0) & 0x80000000) == 0);
          }
          else
          {
            v36 = v9 + 2;
            do
            {
              v8 = v36;
              if (v36 >= v6)
                break;
              v37 = APComponent::Key::sortCompare(v35, (_DWORD *)(*v36 + 36), 0);
              v36 = v8 + 2;
            }
            while ((v37 & 0x80000000) == 0);
          }
          v39 = v6;
          if (v8 < v6)
          {
            v39 = v6;
            do
            {
              v40 = *(v39 - 2);
              v39 -= 2;
            }
            while ((APComponent::Key::sortCompare(v35, (_DWORD *)(v40 + 36), 0) & 0x80000000) != 0);
          }
          while (v8 < v39)
          {
            v41 = *v8;
            *v8 = *v39;
            *v39 = v41;
            v42 = v8[1];
            v8[1] = v39[1];
            v39[1] = v42;
            v43 = (_DWORD *)(v108 + 36);
            do
            {
              v44 = v8[2];
              v8 += 2;
            }
            while ((APComponent::Key::sortCompare(v43, (_DWORD *)(v44 + 36), 0) & 0x80000000) == 0);
            do
            {
              v45 = *(v39 - 2);
              v39 -= 2;
            }
            while ((APComponent::Key::sortCompare(v43, (_DWORD *)(v45 + 36), 0) & 0x80000000) != 0);
          }
          if (v8 - 2 != v9)
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v9, (__int128 *)v8 - 1);
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v8 - 2), &v108);
          v46 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
          if (*((_QWORD *)&v108 + 1))
          {
            v47 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          a4 = 0;
          continue;
        }
        v108 = *(_OWORD *)v9;
        v15 = v108;
        *v9 = 0;
        v9[1] = 0;
        v16 = (_DWORD *)(v15 + 36);
        v17 = v9;
        do
        {
          v18 = v17[2];
          v17 += 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v18 + 36), v16, 0) & 0x80000000) != 0);
        v19 = (uint64_t)(v17 - 2);
        if (v17 - 2 == v9)
        {
          v6 = a2;
          do
          {
            if (v17 >= v6)
              break;
            v21 = *(v6 - 2);
            v6 -= 2;
          }
          while ((APComponent::Key::sortCompare((_DWORD *)(v21 + 36), v16, 0) & 0x80000000) == 0);
        }
        else
        {
          do
          {
            v20 = *(v6 - 2);
            v6 -= 2;
          }
          while ((APComponent::Key::sortCompare((_DWORD *)(v20 + 36), v16, 0) & 0x80000000) == 0);
        }
        if (v17 < v6)
        {
          v22 = v17;
          v23 = v6;
          do
          {
            v24 = *v22;
            *v22 = *v23;
            *v23 = v24;
            v25 = v22[1];
            v22[1] = v23[1];
            v23[1] = v25;
            v26 = (_DWORD *)(v108 + 36);
            do
            {
              v27 = v22[2];
              v22 += 2;
            }
            while ((APComponent::Key::sortCompare((_DWORD *)(v27 + 36), v26, 0) & 0x80000000) != 0);
            v19 = (uint64_t)(v22 - 2);
            do
            {
              v28 = *(v23 - 2);
              v23 -= 2;
            }
            while ((APComponent::Key::sortCompare((_DWORD *)(v28 + 36), v26, 0) & 0x80000000) == 0);
          }
          while (v22 < v23);
        }
        if ((uint64_t *)v19 != a1)
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)v19);
        std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v19, &v108);
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
        if (*((_QWORD *)&v108 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = v17 >= v6;
        v6 = a2;
        if (!v32)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *,false>(a1, v19, a3, a4 & 1);
          a4 = 0;
          v8 = (uint64_t *)(v19 + 16);
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, (uint64_t *)v19);
        v8 = (uint64_t *)(v19 + 16);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>((uint64_t *)(v19 + 16), a2))
        {
          if (v33)
            continue;
          goto LABEL_36;
        }
        a2 = (uint64_t *)v19;
        if (!v33)
          goto LABEL_1;
        return;
    }
  }
}

  v6 = (uint64_t *)a2;
  v7 = (uint64_t *)(a2 - 16);
  v8 = a1;
  while (2)
  {
    v9 = v8;
    v10 = (char *)v6 - (char *)v8;
    v11 = ((char *)v6 - (char *)v8) >> 4;
    a1 = v9;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((APComponent::Key::sortCompare((_DWORD *)(*v7 + 36), (_DWORD *)(*v9 + 36), 1) & 0x80000000) != 0)
        {
          v49 = *v9;
          *v9 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v49;
          v50 = v9[1];
          v9[1] = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v50;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(v9, v9 + 2, v7);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(v9, v9 + 2, v9 + 4, v7);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *,0>(v9, v9 + 2, v9 + 4, v9 + 6, v7);
        return;
      default:
        if (v10 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (v9 != v6)
            {
              v51 = v9 + 2;
              if (v9 + 2 != (uint64_t *)a2)
              {
                v52 = 0;
                v53 = v9;
                do
                {
                  v54 = v53[2];
                  v55 = *v53;
                  v53 = v51;
                  if ((APComponent::Key::sortCompare((_DWORD *)(v54 + 36), (_DWORD *)(v55 + 36), 1) & 0x80000000) != 0)
                  {
                    v108 = *(_OWORD *)v53;
                    v56 = v108;
                    *v53 = 0;
                    v53[1] = 0;
                    v57 = (_DWORD *)(v56 + 36);
                    v58 = v52;
                    while (1)
                    {
                      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v9 + v58 + 16, (__int128 *)((char *)v9 + v58));
                      if (!v58)
                        break;
                      v59 = APComponent::Key::sortCompare(v57, (_DWORD *)(*(uint64_t *)((char *)v9 + v58 - 16) + 36), 1);
                      v58 -= 16;
                      if ((v59 & 0x80000000) == 0)
                      {
                        v60 = (uint64_t)v9 + v58 + 16;
                        goto LABEL_80;
                      }
                    }
                    v60 = (uint64_t)v9;
LABEL_80:
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v60, &v108);
                    v61 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
                    if (*((_QWORD *)&v108 + 1))
                    {
                      v62 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
                      do
                        v63 = __ldaxr(v62);
                      while (__stlxr(v63 - 1, v62));
                      if (!v63)
                      {
                        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                        std::__shared_weak_count::__release_weak(v61);
                      }
                    }
                  }
                  v51 = v53 + 2;
                  v52 += 16;
                }
                while (v53 + 2 != (uint64_t *)a2);
              }
            }
          }
          else if (v9 != v6)
          {
            v96 = v9 + 2;
            if (v9 + 2 != (uint64_t *)a2)
            {
              do
              {
                v97 = v96;
                v98 = (__int128 *)a1;
                if ((APComponent::Key::sortCompare((_DWORD *)(a1[2] + 36), (_DWORD *)(*a1 + 36), 1) & 0x80000000) != 0)
                {
                  v108 = *(_OWORD *)v97;
                  v99 = v108;
                  *v97 = 0;
                  v97[1] = 0;
                  v100 = (_DWORD *)(v99 + 36);
                  do
                  {
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v98 + 1), v98);
                    v101 = *((_QWORD *)v98-- - 2);
                  }
                  while ((APComponent::Key::sortCompare(v100, (_DWORD *)(v101 + 36), 1) & 0x80000000) != 0);
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v98 + 1), &v108);
                  v102 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
                  if (*((_QWORD *)&v108 + 1))
                  {
                    v103 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
                    do
                      v104 = __ldaxr(v103);
                    while (__stlxr(v104 - 1, v103));
                    if (!v104)
                    {
                      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                      std::__shared_weak_count::__release_weak(v102);
                    }
                  }
                }
                v96 = v97 + 2;
                a1 = v97;
              }
              while (v97 + 2 != (uint64_t *)a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (v9 != v6)
          {
            v64 = (unint64_t)(v11 - 2) >> 1;
            v65 = v64;
            do
            {
              v66 = v65;
              if (v64 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = &a1[2 * v67];
                if (2 * v65 + 2 < v11
                  && (int)APComponent::Key::sortCompare((_DWORD *)(*v68 + 36), (_DWORD *)(v68[2] + 36), 1) < 0)
                {
                  v68 += 2;
                  v67 = 2 * v66 + 2;
                }
                v69 = &a1[2 * v66];
                if ((APComponent::Key::sortCompare((_DWORD *)(*v68 + 36), (_DWORD *)(*v69 + 36), 1) & 0x80000000) == 0)
                {
                  v108 = *(_OWORD *)v69;
                  v70 = v108;
                  *v69 = 0;
                  v69[1] = 0;
                  v71 = (_DWORD *)(v70 + 36);
                  do
                  {
                    v72 = (uint64_t)v68;
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v69, (__int128 *)v68);
                    if (v64 < v67)
                      break;
                    v68 = &a1[2 * ((2 * v67) | 1)];
                    if (2 * v67 + 2 >= v11)
                    {
                      v67 = (2 * v67) | 1;
                    }
                    else if ((int)APComponent::Key::sortCompare((_DWORD *)(*v68 + 36), (_DWORD *)(v68[2] + 36), 1) >= 0)
                    {
                      v67 = (2 * v67) | 1;
                    }
                    else
                    {
                      v68 += 2;
                      v67 = 2 * v67 + 2;
                    }
                    v69 = (uint64_t *)v72;
                  }
                  while ((APComponent::Key::sortCompare((_DWORD *)(*v68 + 36), v71, 1) & 0x80000000) == 0);
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v72, &v108);
                  v73 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
                  if (*((_QWORD *)&v108 + 1))
                  {
                    v74 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                    {
                      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                      std::__shared_weak_count::__release_weak(v73);
                    }
                  }
                }
              }
              v65 = v66 - 1;
            }
            while (v66);
            v76 = (unint64_t)v10 >> 4;
            do
            {
              v77 = 0;
              v107 = *(_OWORD *)a1;
              *a1 = 0;
              a1[1] = 0;
              v78 = (uint64_t)a1;
              do
              {
                v79 = v78 + 16 * v77 + 16;
                v80 = (2 * v77) | 1;
                v81 = 2 * v77 + 2;
                if (v81 < v76
                  && (int)APComponent::Key::sortCompare((_DWORD *)(*(_QWORD *)v79 + 36), (_DWORD *)(*(_QWORD *)(v78 + 16 * v77 + 32) + 36), 1) < 0)
                {
                  v79 += 16;
                  v80 = v81;
                }
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v78, (__int128 *)v79);
                v78 = v79;
                v77 = v80;
              }
              while (v80 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
              v82 = (uint64_t)(a2 - 16);
              if ((char *)v79 == a2 - 16)
              {
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v79, &v107);
              }
              else
              {
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v79, (__int128 *)a2 - 1);
                std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v82, &v107);
                v83 = v79 - (_QWORD)a1 + 16;
                if (v83 >= 17)
                {
                  v84 = (((unint64_t)v83 >> 4) - 2) >> 1;
                  v85 = (__int128 *)&a1[2 * v84];
                  if ((APComponent::Key::sortCompare((_DWORD *)(*(_QWORD *)v85 + 36), (_DWORD *)(*(_QWORD *)v79 + 36), 1) & 0x80000000) != 0)
                  {
                    v108 = *(_OWORD *)v79;
                    v86 = v108;
                    *(_QWORD *)v79 = 0;
                    *(_QWORD *)(v79 + 8) = 0;
                    v87 = (_DWORD *)(v86 + 36);
                    do
                    {
                      v88 = (uint64_t)v85;
                      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v79, v85);
                      if (!v84)
                        break;
                      v84 = (v84 - 1) >> 1;
                      v85 = (__int128 *)&a1[2 * v84];
                      v79 = v88;
                    }
                    while ((APComponent::Key::sortCompare((_DWORD *)(*(_QWORD *)v85 + 36), v87, 1) & 0x80000000) != 0);
                    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v88, &v108);
                    v89 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
                    v82 = (uint64_t)(a2 - 16);
                    if (*((_QWORD *)&v108 + 1))
                    {
                      v90 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
                      do
                        v91 = __ldaxr(v90);
                      while (__stlxr(v91 - 1, v90));
                      if (!v91)
                      {
                        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                        std::__shared_weak_count::__release_weak(v89);
                      }
                    }
                  }
                }
              }
              v92 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (*((_QWORD *)&v107 + 1))
              {
                v93 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              a2 = (char *)v82;
            }
            while (v76-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9[2 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(v13, v9, v7);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(v9, v13, v7);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(v9 + 2, v13 - 2, (uint64_t *)a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(v9 + 4, &v9[2 * v12 + 2], (uint64_t *)a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(v13 - 2, v13, &v9[2 * v12 + 2]);
          v14 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *(_OWORD *)v13;
          *(_OWORD *)v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0
          && (APComponent::Key::sortCompare((_DWORD *)(*(v9 - 2) + 36), (_DWORD *)(*v9 + 36), 1) & 0x80000000) == 0)
        {
          v108 = *(_OWORD *)v9;
          v34 = v108;
          *v9 = 0;
          v9[1] = 0;
          v35 = (_DWORD *)(v34 + 36);
          if ((APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(*v7 + 36), 1) & 0x80000000) != 0)
          {
            v8 = v9;
            do
            {
              v38 = v8[2];
              v8 += 2;
            }
            while ((APComponent::Key::sortCompare(v35, (_DWORD *)(v38 + 36), 1) & 0x80000000) == 0);
          }
          else
          {
            v36 = v9 + 2;
            do
            {
              v8 = v36;
              if (v36 >= v6)
                break;
              v37 = APComponent::Key::sortCompare(v35, (_DWORD *)(*v36 + 36), 1);
              v36 = v8 + 2;
            }
            while ((v37 & 0x80000000) == 0);
          }
          v39 = v6;
          if (v8 < v6)
          {
            v39 = v6;
            do
            {
              v40 = *(v39 - 2);
              v39 -= 2;
            }
            while ((APComponent::Key::sortCompare(v35, (_DWORD *)(v40 + 36), 1) & 0x80000000) != 0);
          }
          while (v8 < v39)
          {
            v41 = *v8;
            *v8 = *v39;
            *v39 = v41;
            v42 = v8[1];
            v8[1] = v39[1];
            v39[1] = v42;
            v43 = (_DWORD *)(v108 + 36);
            do
            {
              v44 = v8[2];
              v8 += 2;
            }
            while ((APComponent::Key::sortCompare(v43, (_DWORD *)(v44 + 36), 1) & 0x80000000) == 0);
            do
            {
              v45 = *(v39 - 2);
              v39 -= 2;
            }
            while ((APComponent::Key::sortCompare(v43, (_DWORD *)(v45 + 36), 1) & 0x80000000) != 0);
          }
          if (v8 - 2 != v9)
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v9, (__int128 *)v8 - 1);
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v8 - 2), &v108);
          v46 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
          if (*((_QWORD *)&v108 + 1))
          {
            v47 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          a4 = 0;
          continue;
        }
        v108 = *(_OWORD *)v9;
        v15 = v108;
        *v9 = 0;
        v9[1] = 0;
        v16 = (_DWORD *)(v15 + 36);
        v17 = v9;
        do
        {
          v18 = v17[2];
          v17 += 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v18 + 36), v16, 1) & 0x80000000) != 0);
        v19 = (uint64_t)(v17 - 2);
        if (v17 - 2 == v9)
        {
          v6 = (uint64_t *)a2;
          do
          {
            if (v17 >= v6)
              break;
            v21 = *(v6 - 2);
            v6 -= 2;
          }
          while ((APComponent::Key::sortCompare((_DWORD *)(v21 + 36), v16, 1) & 0x80000000) == 0);
        }
        else
        {
          do
          {
            v20 = *(v6 - 2);
            v6 -= 2;
          }
          while ((APComponent::Key::sortCompare((_DWORD *)(v20 + 36), v16, 1) & 0x80000000) == 0);
        }
        if (v17 < v6)
        {
          v22 = v17;
          v23 = v6;
          do
          {
            v24 = *v22;
            *v22 = *v23;
            *v23 = v24;
            v25 = v22[1];
            v22[1] = v23[1];
            v23[1] = v25;
            v26 = (_DWORD *)(v108 + 36);
            do
            {
              v27 = v22[2];
              v22 += 2;
            }
            while ((APComponent::Key::sortCompare((_DWORD *)(v27 + 36), v26, 1) & 0x80000000) != 0);
            v19 = (uint64_t)(v22 - 2);
            do
            {
              v28 = *(v23 - 2);
              v23 -= 2;
            }
            while ((APComponent::Key::sortCompare((_DWORD *)(v28 + 36), v26, 1) & 0x80000000) == 0);
          }
          while (v22 < v23);
        }
        if ((uint64_t *)v19 != a1)
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)v19);
        std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v19, &v108);
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
        if (*((_QWORD *)&v108 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = v17 >= v6;
        v6 = (uint64_t *)a2;
        if (!v32)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *,false>(a1, v19, a3, a4 & 1);
          a4 = 0;
          v8 = (uint64_t *)(v19 + 16);
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, (char *)v19);
        v8 = (uint64_t *)(v19 + 16);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>((uint64_t *)(v19 + 16), a2))
        {
          if (v33)
            continue;
          goto LABEL_36;
        }
        a2 = (char *)v19;
        if (!v33)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a1;
  v97 = a1 + 4;
  to = a1 + 2;
  v8 = a1 + 1;
  while (2)
  {
    v9 = (char *)a2 - (char *)v7;
    v10 = ((char *)a2 - (char *)v7) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v39 = (unint64_t)*(a2 - 2);
        v38 = a2 - 2;
        if (v39 < (unint64_t)*v7)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(v7, v38);
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v7, v7 + 2, a2 - 2);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v7, v7 + 2, v7 + 4, a2 - 2);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v7, v7 + 2, v7 + 4, v7 + 6, a2 - 2);
        return;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (v7 != a2)
            {
              v98 = a2;
              v53 = (unint64_t)(v10 - 2) >> 1;
              v54 = v53;
              do
              {
                v55 = v54;
                if (v53 >= v54)
                {
                  v56 = (2 * v54) | 1;
                  v57 = &v7[2 * v56];
                  if (2 * v54 + 2 >= v10)
                  {
                    v58 = *v57;
                  }
                  else
                  {
                    v58 = *v57;
                    v59 = v57[2];
                    if (*v57 <= v59)
                      v58 = v57[2];
                    if (*v57 < v59)
                    {
                      v57 += 2;
                      v56 = 2 * v55 + 2;
                    }
                  }
                  v60 = &v7[2 * v55];
                  if (v58 >= *v60)
                  {
                    v103 = *v60;
                    objc_moveWeak(&v104, &v7[2 * v55 + 1]);
                    v61 = (unint64_t)*v57;
                    while (1)
                    {
                      v62 = v57;
                      *v60 = (id)v61;
                      v63 = v57 + 1;
                      WeakRetained = objc_loadWeakRetained(v57 + 1);
                      objc_storeWeak(v60 + 1, WeakRetained);

                      if (v53 < v56)
                        break;
                      v57 = &v7[2 * ((2 * v56) | 1)];
                      if (2 * v56 + 2 >= v10)
                      {
                        v61 = (unint64_t)*v57;
                        v56 = (2 * v56) | 1;
                      }
                      else
                      {
                        v61 = (unint64_t)*v57;
                        v65 = v57[2];
                        if (*v57 <= v65)
                          v61 = (unint64_t)v57[2];
                        if (*v57 >= v65)
                        {
                          v56 = (2 * v56) | 1;
                        }
                        else
                        {
                          v57 += 2;
                          v56 = 2 * v56 + 2;
                        }
                      }
                      v66 = v103;
                      v60 = v62;
                      if (v61 < (unint64_t)v103)
                        goto LABEL_93;
                    }
                    v66 = v103;
LABEL_93:
                    *v62 = v66;
                    v67 = objc_loadWeakRetained(&v104);
                    objc_storeWeak(v63, v67);

                    objc_destroyWeak(&v104);
                  }
                }
                v54 = v55 - 1;
              }
              while (v55);
              v68 = (unint64_t)v9 >> 4;
              v69 = v98;
              do
              {
                if (v68 >= 2)
                {
                  v101 = *v7;
                  objc_moveWeak(&v102, v7 + 1);
                  v70 = 0;
                  v71 = (uint64_t)v7;
                  do
                  {
                    v72 = v71 + 16 * v70 + 16;
                    if (2 * v70 + 2 >= v68)
                    {
                      v73 = *(id *)v72;
                      v70 = (2 * v70) | 1;
                    }
                    else
                    {
                      v73 = *(id *)v72;
                      v74 = *(_QWORD *)(v71 + 16 * v70 + 32);
                      if (*(_QWORD *)v72 <= v74)
                        v73 = *(id *)(v71 + 16 * v70 + 32);
                      if (*(_QWORD *)v72 >= v74)
                      {
                        v70 = (2 * v70) | 1;
                      }
                      else
                      {
                        v72 = v71 + 16 * v70 + 32;
                        v70 = 2 * v70 + 2;
                      }
                    }
                    *(_QWORD *)v71 = v73;
                    v75 = (id *)(v72 + 8);
                    v76 = objc_loadWeakRetained((id *)(v72 + 8));
                    objc_storeWeak((id *)(v71 + 8), v76);

                    v71 = v72;
                  }
                  while (v70 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
                  if ((id *)v72 == v69 - 2)
                  {
                    *(_QWORD *)v72 = v101;
                    v87 = objc_loadWeakRetained(&v102);
                    objc_storeWeak(v75, v87);

                  }
                  else
                  {
                    *(_QWORD *)v72 = *(v69 - 2);
                    v77 = objc_loadWeakRetained(v69 - 1);
                    objc_storeWeak((id *)(v72 + 8), v77);

                    *(v69 - 2) = v101;
                    v78 = objc_loadWeakRetained(&v102);
                    objc_storeWeak(v69 - 1, v78);

                    v79 = v72 - (_QWORD)v7 + 16;
                    if (v79 >= 17)
                    {
                      v80 = (unint64_t)((v79 >> 4) - 2) >> 1;
                      v81 = &v7[2 * v80];
                      if ((unint64_t)*v81 < *(_QWORD *)v72)
                      {
                        v103 = *(id *)v72;
                        objc_moveWeak(&v104, (id *)(v72 + 8));
                        v82 = *v81;
                        do
                        {
                          v83 = v81;
                          *(_QWORD *)v72 = v82;
                          v84 = v81 + 1;
                          v85 = objc_loadWeakRetained(v81 + 1);
                          objc_storeWeak((id *)(v72 + 8), v85);

                          if (!v80)
                            break;
                          v80 = (v80 - 1) >> 1;
                          v81 = &v7[2 * v80];
                          v82 = *v81;
                          v72 = (uint64_t)v83;
                        }
                        while (*v81 < v103);
                        *v83 = v103;
                        v86 = objc_loadWeakRetained(&v104);
                        objc_storeWeak(v84, v86);

                        objc_destroyWeak(&v104);
                      }
                    }
                  }
                  objc_destroyWeak(&v102);
                }
                v69 -= 2;
              }
              while ((unint64_t)v68-- > 2);
            }
            return;
          }
          v11 = &v7[2 * ((unint64_t)v10 >> 1)];
          if ((unint64_t)v9 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v11, v7, a2 - 2);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v7, v11, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(to, v11 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v97, v11 + 2, a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v11 - 2, v11, v11 + 2);
            v103 = *v7;
            objc_moveWeak(&v104, v8);
            *v7 = *v11;
            v12 = objc_loadWeakRetained(v11 + 1);
            objc_storeWeak(v8, v12);

            *v11 = v103;
            v13 = objc_loadWeakRetained(&v104);
            objc_storeWeak(v11 + 1, v13);

            objc_destroyWeak(&v104);
          }
          --a3;
          if ((a4 & 1) != 0)
          {
            v14 = *v7;
LABEL_11:
            v103 = v14;
            objc_moveWeak(&v104, v8);
            v15 = v103;
            v16 = v7;
            do
            {
              v17 = v16;
              v18 = (unint64_t)v16[2];
              v16 += 2;
            }
            while (v18 < (unint64_t)v103);
            v19 = a2;
            if (v17 == v7)
            {
              v19 = a2;
              do
              {
                if (v16 >= v19)
                  break;
                v21 = (unint64_t)*(v19 - 2);
                v19 -= 2;
              }
              while (v21 >= (unint64_t)v103);
            }
            else
            {
              do
              {
                v20 = (unint64_t)*(v19 - 2);
                v19 -= 2;
              }
              while (v20 >= (unint64_t)v103);
            }
            a1 = v16;
            if (v16 < v19)
            {
              v22 = v19;
              do
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, v22);
                v15 = v103;
                do
                {
                  v23 = (unint64_t)a1[2];
                  a1 += 2;
                }
                while (v23 < (unint64_t)v103);
                do
                {
                  v24 = (unint64_t)*(v22 - 2);
                  v22 -= 2;
                }
                while (v24 >= (unint64_t)v103);
              }
              while (a1 < v22);
            }
            if (a1 - 2 != v7)
            {
              *v7 = *(a1 - 2);
              v25 = objc_loadWeakRetained(a1 - 1);
              objc_storeWeak(v8, v25);

              v15 = v103;
            }
            *(a1 - 2) = v15;
            v26 = objc_loadWeakRetained(&v104);
            objc_storeWeak(a1 - 1, v26);

            objc_destroyWeak(&v104);
            if (v16 >= v19)
            {
              v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v7, a1 - 2);
              if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a2))
              {
                a2 = a1 - 2;
                if ((v27 & 1) == 0)
                  continue;
                return;
              }
              if ((v27 & 1) != 0)
                goto LABEL_1;
            }
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *,false>(v7, a1 - 2, a3, a4 & 1);
            a4 = 0;
            goto LABEL_1;
          }
          v14 = *v7;
          if (*(v7 - 2) < *v7)
            goto LABEL_11;
          v103 = *v7;
          v28 = v7 + 1;
          objc_moveWeak(&v104, v7 + 1);
          v29 = v103;
          if (v103 >= *(a2 - 2))
          {
            v31 = v7 + 2;
            do
            {
              a1 = v31;
              if (v31 >= a2)
                break;
              v31 += 2;
            }
            while (v103 >= *a1);
          }
          else
          {
            a1 = v7;
            do
            {
              v30 = (unint64_t)a1[2];
              a1 += 2;
            }
            while ((unint64_t)v103 >= v30);
          }
          v32 = a2;
          if (a1 < a2)
          {
            v32 = a2;
            do
            {
              v33 = (unint64_t)*(v32 - 2);
              v32 -= 2;
            }
            while ((unint64_t)v103 < v33);
          }
          while (a1 < v32)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, v32);
            v29 = v103;
            do
            {
              v34 = (unint64_t)a1[2];
              a1 += 2;
            }
            while ((unint64_t)v103 >= v34);
            do
            {
              v35 = (unint64_t)*(v32 - 2);
              v32 -= 2;
            }
            while ((unint64_t)v103 < v35);
          }
          if (a1 - 2 != v7)
          {
            *v7 = *(a1 - 2);
            v36 = objc_loadWeakRetained(a1 - 1);
            objc_storeWeak(v28, v36);

            v29 = v103;
          }
          *(a1 - 2) = v29;
          v37 = objc_loadWeakRetained(&v104);
          objc_storeWeak(a1 - 1, v37);

          objc_destroyWeak(&v104);
          a4 = 0;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if (v7 != a2)
          {
            v40 = a2;
            v41 = v7 + 2;
            if (v7 + 2 != a2)
            {
              v42 = 0;
              v43 = v7;
              do
              {
                v44 = v41;
                if (v43[2] < *v43)
                {
                  v103 = v43[2];
                  objc_moveWeak(&v104, v43 + 3);
                  v45 = *v43;
                  v46 = v42;
                  while (1)
                  {
                    v47 = v46;
                    v48 = (id *)((char *)v7 + v46);
                    *(id *)((char *)v7 + v46 + 16) = v45;
                    v49 = (id *)((char *)v7 + v46 + 8);
                    v50 = objc_loadWeakRetained(v49);
                    objc_storeWeak(v48 + 3, v50);

                    if (!v47)
                      break;
                    v45 = *(v48 - 2);
                    v46 = v47 - 16;
                    if (v103 >= v45)
                    {
                      v51 = (id *)((char *)v7 + v47);
                      v49 = (id *)((char *)v7 + v47 + 8);
                      goto LABEL_67;
                    }
                  }
                  v51 = v7;
LABEL_67:
                  *v51 = v103;
                  v52 = objc_loadWeakRetained(&v104);
                  objc_storeWeak(v49, v52);

                  objc_destroyWeak(&v104);
                }
                v41 = v44 + 2;
                v42 += 16;
                v43 = v44;
              }
              while (v44 + 2 != v40);
            }
          }
        }
        else if (v7 != a2)
        {
          v89 = v7 + 2;
          if (v7 + 2 != a2)
          {
            v90 = v7 + 1;
            do
            {
              v91 = v89;
              if (v7[2] < *v7)
              {
                v103 = v7[2];
                objc_moveWeak(&v104, v7 + 3);
                v92 = *v7;
                v93 = v90;
                do
                {
                  v94 = v93;
                  v93[1] = v92;
                  v95 = objc_loadWeakRetained(v93);
                  objc_storeWeak(v94 + 2, v95);

                  v92 = *(v94 - 3);
                  v93 = v94 - 2;
                }
                while (v103 < v92);
                *(v94 - 1) = v103;
                v96 = objc_loadWeakRetained(&v104);
                objc_storeWeak(v94, v96);

                objc_destroyWeak(&v104);
              }
              v89 = v91 + 2;
              v90 += 2;
              v7 = v91;
            }
            while (v91 + 2 != a2);
          }
        }
        return;
    }
  }
}

  v8 = (_QWORD *)(a2 - 40);
  i = (char *)a1;
  while (2)
  {
    a1 = (uint64_t)i;
    v10 = a2 - (_QWORD)i;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - (_QWORD)i) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_OWORD *)(a2 - 40) < *(_OWORD *)i)
        {
          v148 = *((_QWORD *)i + 4);
          v132 = *(_OWORD *)i;
          v140 = *((_OWORD *)i + 1);
          v57 = *(_OWORD *)v8;
          v58 = *(_OWORD *)(a2 - 24);
          *((_QWORD *)i + 4) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)i = v57;
          *((_OWORD *)i + 1) = v58;
          *(_QWORD *)(a2 - 8) = v148;
          *(_OWORD *)v8 = v132;
          *(_OWORD *)(a2 - 24) = v140;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((__int128 *)i, (__int128 *)(i + 40), (__int128 *)(a2 - 40));
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((uint64_t)i, (uint64_t)(i + 40), (uint64_t)(i + 80), a2 - 40);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((uint64_t)i, (uint64_t)(i + 40), (uint64_t)(i + 80), (uint64_t)(i + 120), a2 - 40);
        return;
      default:
        if (v10 <= 959)
        {
          v59 = i + 40;
          v61 = i == (char *)a2 || v59 == (char *)a2;
          if ((a4 & 1) != 0)
          {
            if (v61)
              return;
            v62 = 0;
            v63 = i;
            while (1)
            {
              v64 = v63;
              v63 = v59;
              v65 = *((_QWORD *)v64 + 6);
              v66 = *((_QWORD *)v64 + 1);
              if (v65 < v66)
                break;
              if (v65 <= v66)
              {
                v67 = *(_QWORD *)v63;
                if (*(_QWORD *)v63 < *(_QWORD *)v64)
                  goto LABEL_103;
              }
LABEL_113:
              v59 = v63 + 40;
              v62 += 40;
              if (v63 + 40 == (char *)a2)
                return;
            }
            v67 = *(_QWORD *)v63;
LABEL_103:
            v133 = *(_OWORD *)(v64 + 56);
            v141 = *((_QWORD *)v64 + 9);
            v68 = *((_OWORD *)v64 + 1);
            *(_OWORD *)v63 = *(_OWORD *)v64;
            *((_OWORD *)v63 + 1) = v68;
            *((_QWORD *)v63 + 4) = *((_QWORD *)v64 + 4);
            v69 = i;
            if (v64 != i)
            {
              v70 = v62;
              while (1)
              {
                v71 = &i[v70];
                v72 = (unint64_t *)&i[v70 - 40];
                v73 = *(_QWORD *)&i[v70 - 32];
                if (v65 >= v73)
                {
                  if (v65 > v73)
                  {
                    v69 = v64;
                    goto LABEL_112;
                  }
                  if (v67 >= *v72)
                    break;
                }
                v64 -= 40;
                v74 = *(_OWORD *)&i[v70 - 24];
                *(_OWORD *)v71 = *(_OWORD *)v72;
                *((_OWORD *)v71 + 1) = v74;
                *((_QWORD *)v71 + 4) = *(_QWORD *)&i[v70 - 8];
                v70 -= 40;
                if (!v70)
                {
                  v69 = i;
                  goto LABEL_112;
                }
              }
              v69 = &i[v70];
            }
LABEL_112:
            *(_QWORD *)v69 = v67;
            *((_QWORD *)v69 + 1) = v65;
            *((_OWORD *)v69 + 1) = v133;
            *((_QWORD *)v69 + 4) = v141;
            goto LABEL_113;
          }
          if (v61)
            return;
          while (1)
          {
            v92 = a1;
            a1 = (uint64_t)v59;
            v93 = *(_QWORD *)(v92 + 48);
            v94 = *(_QWORD *)(v92 + 8);
            if (v93 >= v94)
            {
              if (v93 > v94)
                goto LABEL_145;
              v95 = *(_QWORD *)a1;
              if (*(_QWORD *)a1 >= *(_QWORD *)v92)
                goto LABEL_145;
            }
            else
            {
              v95 = *(_QWORD *)a1;
            }
            v135 = *(_OWORD *)(v92 + 56);
            v143 = *(_QWORD *)(v92 + 72);
            do
            {
              v96 = v92;
              v97 = *(_OWORD *)(v92 + 16);
              *(_OWORD *)(v92 + 40) = *(_OWORD *)v92;
              *(_OWORD *)(v92 + 56) = v97;
              *(_QWORD *)(v92 + 72) = *(_QWORD *)(v92 + 32);
              v92 -= 40;
            }
            while (__PAIR128__(v93, v95) < *(_OWORD *)(v96 - 40));
            *(_QWORD *)v96 = v95;
            *(_QWORD *)(v96 + 8) = v93;
            *(_OWORD *)(v96 + 16) = v135;
            *(_QWORD *)(v96 + 32) = v143;
LABEL_145:
            v59 = (char *)(a1 + 40);
            if (a1 + 40 == a2)
              return;
          }
        }
        if (!a3)
        {
          if (i == (char *)a2)
            return;
          v75 = (unint64_t)(v11 - 2) >> 1;
          v76 = v75;
          do
          {
            v77 = v76;
            if (v75 >= v76)
            {
              v78 = (2 * v76) | 1;
              v79 = (unint64_t *)&i[40 * v78];
              if (2 * v77 + 2 < v11 && *(_OWORD *)v79 < *(_OWORD *)(v79 + 5))
              {
                v79 += 5;
                v78 = 2 * v77 + 2;
              }
              v80 = (unint64_t *)&i[40 * v77];
              v81 = v79[1];
              v82 = v80[1];
              v83 = v81 > v82;
              if (v81 >= v82)
              {
                v84 = *v80;
                if (v83 || *v79 >= v84)
                {
                  v142 = v80[4];
                  v134 = *((_OWORD *)v80 + 1);
                  v85 = *(_OWORD *)v79;
                  v86 = *((_OWORD *)v79 + 1);
                  v80[4] = v79[4];
                  *(_OWORD *)v80 = v85;
                  *((_OWORD *)v80 + 1) = v86;
                  if (v75 >= v78)
                  {
                    while (1)
                    {
                      v88 = 2 * v78;
                      v78 = (2 * v78) | 1;
                      v87 = (unint64_t *)&i[40 * v78];
                      v89 = v88 + 2;
                      if (v89 < v11 && *(_OWORD *)v87 < *(_OWORD *)(v87 + 5))
                      {
                        v87 += 5;
                        v78 = v89;
                      }
                      if (*(_OWORD *)v87 < __PAIR128__(v82, v84))
                        break;
                      v90 = *(_OWORD *)v87;
                      v91 = *((_OWORD *)v87 + 1);
                      v79[4] = v87[4];
                      *(_OWORD *)v79 = v90;
                      *((_OWORD *)v79 + 1) = v91;
                      v79 = v87;
                      if (v75 < v78)
                        goto LABEL_126;
                    }
                  }
                  v87 = v79;
LABEL_126:
                  *v87 = v84;
                  v87[1] = v82;
                  *((_OWORD *)v87 + 1) = v134;
                  v87[4] = v142;
                }
              }
            }
            v76 = v77 - 1;
          }
          while (v77);
          v98 = v10 / 0x28uLL;
          while (1)
          {
            v99 = 0;
            v149 = *((_QWORD *)i + 4);
            v136 = *(_OWORD *)i;
            v144 = *((_OWORD *)i + 1);
            v100 = v98 - 2;
            if (v98 < 2)
              v100 = v98 - 1;
            v101 = v100 >> 1;
            v102 = i;
            do
            {
              v103 = v102;
              v102 += 40 * v99 + 40;
              v104 = 2 * v99;
              v99 = (2 * v99) | 1;
              v105 = v104 + 2;
              if (v105 < v98 && *(_OWORD *)v102 < *(_OWORD *)(v102 + 40))
              {
                v102 += 40;
                v99 = v105;
              }
              v106 = *(_OWORD *)v102;
              v107 = *((_OWORD *)v102 + 1);
              *((_QWORD *)v103 + 4) = *((_QWORD *)v102 + 4);
              *(_OWORD *)v103 = v106;
              *((_OWORD *)v103 + 1) = v107;
            }
            while (v99 <= v101);
            a2 -= 40;
            if (v102 == (char *)a2)
            {
              *((_QWORD *)v102 + 4) = v149;
              *(_OWORD *)v102 = v136;
              *((_OWORD *)v102 + 1) = v144;
            }
            else
            {
              v108 = *(_OWORD *)a2;
              v109 = *(_OWORD *)(a2 + 16);
              *((_QWORD *)v102 + 4) = *(_QWORD *)(a2 + 32);
              *(_OWORD *)v102 = v108;
              *((_OWORD *)v102 + 1) = v109;
              *(_QWORD *)(a2 + 32) = v149;
              *(_OWORD *)a2 = v136;
              *(_OWORD *)(a2 + 16) = v144;
              v110 = v102 - i + 40;
              if (v110 >= 41)
              {
                v111 = -2 - 0x3333333333333333 * (v110 >> 3);
                v112 = v111 >> 1;
                v113 = &i[40 * (v111 >> 1)];
                v114 = *((_QWORD *)v113 + 1);
                v115 = *((_QWORD *)v102 + 1);
                if (v114 < v115)
                {
                  v116 = *(_QWORD *)v102;
LABEL_158:
                  v128 = *((_QWORD *)v102 + 4);
                  v125 = *((_OWORD *)v102 + 1);
                  v117 = *(_OWORD *)v113;
                  v118 = *((_OWORD *)v113 + 1);
                  *((_QWORD *)v102 + 4) = *((_QWORD *)v113 + 4);
                  *(_OWORD *)v102 = v117;
                  *((_OWORD *)v102 + 1) = v118;
                  if (v111 >= 2)
                  {
                    while (1)
                    {
                      v120 = v112 - 1;
                      v112 = (v112 - 1) >> 1;
                      v119 = (unint64_t *)&i[40 * v112];
                      if (*(_OWORD *)v119 >= __PAIR128__(v115, v116))
                        break;
                      v121 = *(_OWORD *)v119;
                      v122 = *((_OWORD *)v119 + 1);
                      *((_QWORD *)v113 + 4) = v119[4];
                      *(_OWORD *)v113 = v121;
                      *((_OWORD *)v113 + 1) = v122;
                      v113 = &i[40 * v112];
                      if (v120 <= 1)
                        goto LABEL_162;
                    }
                  }
                  v119 = (unint64_t *)v113;
LABEL_162:
                  *v119 = v116;
                  v119[1] = v115;
                  *((_OWORD *)v119 + 1) = v125;
                  v119[4] = v128;
                  goto LABEL_164;
                }
                if (v114 <= v115)
                {
                  v116 = *(_QWORD *)v102;
                  if (*(_QWORD *)v113 < *(_QWORD *)v102)
                    goto LABEL_158;
                }
              }
            }
LABEL_164:
            v83 = v98-- <= 2;
            if (v83)
              return;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (__int128 *)&i[40 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x1401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(v13, (__int128 *)a1, (__int128 *)(a2 - 40));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((__int128 *)a1, v13, (__int128 *)(a2 - 40));
          v14 = 5 * v12;
          v15 = (__int128 *)(a1 + 40 * v12 - 40);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((__int128 *)(a1 + 40), v15, (__int128 *)(a2 - 80));
          v16 = (__int128 *)(a1 + 40 + 8 * v14);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((__int128 *)(a1 + 80), v16, (__int128 *)(a2 - 120));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(v15, v13, v16);
          v145 = *(_QWORD *)(a1 + 32);
          v129 = *(_OWORD *)a1;
          v137 = *(_OWORD *)(a1 + 16);
          v17 = *v13;
          v18 = v13[1];
          *(_QWORD *)(a1 + 32) = *((_QWORD *)v13 + 4);
          *(_OWORD *)a1 = v17;
          *(_OWORD *)(a1 + 16) = v18;
          *((_QWORD *)v13 + 4) = v145;
          *v13 = v129;
          v13[1] = v137;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v20 = *(_QWORD *)a1;
          v19 = *(_QWORD *)(a1 + 8);
          if (*(_OWORD *)(a1 - 40) < *(_OWORD *)a1)
            goto LABEL_11;
          v124 = *(_OWORD *)(a1 + 16);
          v127 = *(_QWORD *)(a1 + 32);
          v41 = *(_QWORD *)(a2 - 32);
          if (__PAIR128__(v19, v20) < __PAIR128__(v41, *v8))
          {
            v42 = *(_QWORD *)(a1 + 48);
            if (v19 >= v42)
            {
              v43 = (unint64_t *)(a1 + 88);
              do
              {
                if (v19 <= v42 && v20 < *(v43 - 6))
                  break;
                v44 = *v43;
                v43 += 5;
                v42 = v44;
              }
              while (v19 >= v44);
              i = (char *)(v43 - 6);
            }
            else
            {
              i = (char *)(a1 + 40);
            }
          }
          else
          {
            for (i = (char *)(a1 + 40); (unint64_t)i < a2 && __PAIR128__(v19, v20) >= *(_OWORD *)i; i += 40)
              ;
          }
          v45 = (char *)a2;
          if ((unint64_t)i < a2)
          {
            for (j = (unint64_t *)(a2 - 72); v19 < v41 || v19 <= v41 && v20 < j[4]; j -= 5)
            {
              v47 = *j;
              v41 = v47;
            }
            v45 = (char *)(j + 4);
          }
          while (i < v45)
          {
            v147 = *((_QWORD *)i + 4);
            v131 = *(_OWORD *)i;
            v139 = *((_OWORD *)i + 1);
            v48 = *(_OWORD *)v45;
            v49 = *((_OWORD *)v45 + 1);
            *((_QWORD *)i + 4) = *((_QWORD *)v45 + 4);
            *(_OWORD *)i = v48;
            *((_OWORD *)i + 1) = v49;
            *((_QWORD *)v45 + 4) = v147;
            *(_OWORD *)v45 = v131;
            *((_OWORD *)v45 + 1) = v139;
            v50 = *((_QWORD *)i + 6);
            if (v19 >= v50)
            {
              v51 = (unint64_t *)(i + 88);
              do
              {
                if (v19 <= v50 && v20 < *(v51 - 6))
                  break;
                v52 = *v51;
                v51 += 5;
                v50 = v52;
              }
              while (v19 >= v52);
              i = (char *)(v51 - 6);
            }
            else
            {
              i += 40;
            }
            v53 = v45 - 40;
            do
            {
              v45 = v53;
              v54 = *((_QWORD *)v53 + 1);
              v53 -= 40;
            }
            while (__PAIR128__(v19, v20) < __PAIR128__(v54, *(_QWORD *)v45));
          }
          if (i - 40 != (char *)a1)
          {
            v55 = *(_OWORD *)(i - 40);
            v56 = *(_OWORD *)(i - 24);
            *(_QWORD *)(a1 + 32) = *((_QWORD *)i - 1);
            *(_OWORD *)a1 = v55;
            *(_OWORD *)(a1 + 16) = v56;
          }
          a4 = 0;
          *((_QWORD *)i - 5) = v20;
          *((_QWORD *)i - 4) = v19;
          *((_QWORD *)i - 1) = v127;
          *(_OWORD *)(i - 24) = v124;
          continue;
        }
        v20 = *(_QWORD *)a1;
        v19 = *(_QWORD *)(a1 + 8);
LABEL_11:
        v123 = *(_OWORD *)(a1 + 16);
        v126 = *(_QWORD *)(a1 + 32);
        for (k = (unint64_t *)(a1 + 40); *(_OWORD *)k < __PAIR128__(v19, v20); k += 5)
          ;
        if (k - 5 == (unint64_t *)a1)
        {
          v24 = (unint64_t *)a2;
          if ((unint64_t)k < a2)
          {
            v26 = *(_QWORD *)(a2 - 32);
            v24 = (unint64_t *)(a2 - 40);
            if (v26 >= v19)
            {
              v23 = (unint64_t *)(a2 - 72);
              v24 = (unint64_t *)(a2 - 40);
              while (1)
              {
                v38 = v23 + 4;
                if (v26 <= v19)
                {
                  if (*v38 < v20 || k >= v38)
                    goto LABEL_19;
                }
                else if (k >= v38)
                {
                  break;
                }
                v24 -= 5;
                v40 = *v23;
                v23 -= 5;
                v26 = v40;
                if (v40 < v19)
                  goto LABEL_19;
              }
            }
          }
        }
        else
        {
          v22 = *(_QWORD *)(a2 - 32);
          v23 = (unint64_t *)(a2 - 72);
          v24 = (unint64_t *)(a2 - 40);
          if (v22 >= v19)
          {
            do
            {
              if (v22 <= v19 && v23[4] < v20)
                break;
              v25 = *v23;
              v23 -= 5;
              v22 = v25;
            }
            while (v25 >= v19);
LABEL_19:
            v24 = v23 + 4;
          }
        }
        i = (char *)k;
        if (k < v24)
        {
          i = (char *)k;
          v27 = (char *)v24;
          do
          {
            v146 = *((_QWORD *)i + 4);
            v130 = *(_OWORD *)i;
            v138 = *((_OWORD *)i + 1);
            v28 = *(_OWORD *)v27;
            v29 = *((_OWORD *)v27 + 1);
            *((_QWORD *)i + 4) = *((_QWORD *)v27 + 4);
            *(_OWORD *)i = v28;
            *((_OWORD *)i + 1) = v29;
            *((_QWORD *)v27 + 4) = v146;
            *(_OWORD *)v27 = v130;
            *((_OWORD *)v27 + 1) = v138;
            v30 = i + 40;
            do
            {
              i = v30;
              v31 = *((_QWORD *)v30 + 1);
              v30 += 40;
            }
            while (__PAIR128__(v31, *(_QWORD *)i) < __PAIR128__(v19, v20));
            v32 = *((_QWORD *)v27 - 4);
            if (v32 >= v19)
            {
              v33 = (unint64_t *)(v27 - 72);
              do
              {
                if (v32 <= v19 && v33[4] < v20)
                  break;
                v34 = *v33;
                v33 -= 5;
                v32 = v34;
              }
              while (v34 >= v19);
              v27 = (char *)(v33 + 4);
            }
            else
            {
              v27 -= 40;
            }
          }
          while (i < v27);
        }
        if (i - 40 != (char *)a1)
        {
          v35 = *(_OWORD *)(i - 40);
          v36 = *(_OWORD *)(i - 24);
          *(_QWORD *)(a1 + 32) = *((_QWORD *)i - 1);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *((_QWORD *)i - 5) = v20;
        *((_QWORD *)i - 4) = v19;
        *((_QWORD *)i - 1) = v126;
        *(_OWORD *)(i - 24) = v123;
        if (k < v24)
        {
LABEL_39:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *,false>(a1, i - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(a1, (uint64_t)(i - 40));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((uint64_t)i, a2))
        {
          if (v37)
            continue;
          goto LABEL_39;
        }
        a2 = (unint64_t)(i - 40);
        if (!v37)
          goto LABEL_1;
        return;
    }
  }
}

  while (2)
  {
    v7 = i;
    v154 = (uint64_t *)(i + 24);
    v146 = i - 24;
    v147 = (uint64_t *)(i + 48);
    v149 = i + 5;
LABEL_2:
    v8 = (uint64_t)a2 - v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v7) >> 3);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)(a2 - 3), v7))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>((uint64_t *)v7, a2 - 3);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)v7, (uint64_t *)(v7 + 24), a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)v7, (uint64_t *)(v7 + 24), (uint64_t *)(v7 + 48), a2 - 3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)v7, (uint64_t *)(v7 + 24), (uint64_t *)(v7 + 48), (uint64_t *)(v7 + 72), a2 - 3);
        return;
      default:
        if (v8 <= 575)
        {
          v55 = v7 + 24;
          v57 = (uint64_t *)v7 == a2 || v55 == (_QWORD)a2;
          if ((a4 & 1) != 0)
          {
            if (v57)
              return;
            v58 = 0;
            v59 = v7;
LABEL_191:
            v60 = v55;
            if (!ParameterTreeBuilder::ClumpableParam::operator<(v55, v59))
              goto LABEL_210;
            v61 = *(_DWORD *)(v59 + 24);
            v62 = *(unsigned __int8 *)(v59 + 28);
            v166 = *(_WORD *)(v59 + 29);
            v172 = *(_BYTE *)(v59 + 31);
            v63 = *(_DWORD *)(v59 + 32);
            v64 = *(_QWORD *)(v59 + 40);
            *(_QWORD *)(v59 + 40) = 0;
            *(_DWORD *)(v60 + 8) = *(_DWORD *)(v59 + 8);
            *(_QWORD *)v60 = *(_QWORD *)v59;
            v65 = *(_QWORD *)(v59 + 16);
            *(_QWORD *)(v59 + 16) = 0;
            v66 = *(void **)(v60 + 16);
            *(_QWORD *)(v60 + 16) = v65;

            v67 = v7;
            if (v59 == v7)
              goto LABEL_209;
            v157 = v64;
            v68 = v58;
            while (1)
            {
              v69 = v7 + v68;
              v70 = (unsigned int *)(v7 + v68 - 24);
              if (v62 && *(_BYTE *)(v7 + v68 - 20))
              {
                if (v61 >= *v70)
                {
                  if (v61 != *v70)
                    goto LABEL_207;
LABEL_204:
                  v67 = v7 + v68;
                  if (v63 >= *(_DWORD *)(v7 + v68 - 16))
                    goto LABEL_208;
                }
              }
              else
              {
                if (*(_BYTE *)(v7 + v68 - 20))
                  v71 = v62 == 0;
                else
                  v71 = 0;
                if (!v71)
                {
                  if ((v62 != 0) != (*(_BYTE *)(v7 + v68 - 20) != 0))
                  {
LABEL_207:
                    v67 = v59;
LABEL_208:
                    v64 = v157;
LABEL_209:
                    *(_DWORD *)v67 = v61;
                    *(_BYTE *)(v67 + 4) = v62;
                    *(_WORD *)(v67 + 5) = v166;
                    *(_BYTE *)(v67 + 7) = v172;
                    *(_DWORD *)(v67 + 8) = v63;
                    v75 = *(void **)(v67 + 16);
                    *(_QWORD *)(v67 + 16) = v64;

LABEL_210:
                    v55 = v60 + 24;
                    v58 += 24;
                    v59 = v60;
                    if ((uint64_t *)(v60 + 24) == a2)
                      return;
                    goto LABEL_191;
                  }
                  goto LABEL_204;
                }
              }
              v59 -= 24;
              *(_QWORD *)v69 = *(_QWORD *)v70;
              *(_DWORD *)(v69 + 8) = *(_DWORD *)(v7 + v68 - 16);
              v72 = v7 + v68;
              v73 = *(_QWORD *)(v7 + v68 - 8);
              *(_QWORD *)(v72 - 8) = 0;
              v74 = *(void **)(v7 + v68 + 16);
              *(_QWORD *)(v72 + 16) = v73;

              v68 -= 24;
              if (!v68)
              {
                v67 = v7;
                goto LABEL_208;
              }
            }
          }
          if (v57)
            return;
          while (1)
          {
            v133 = (unsigned int *)v55;
            if (ParameterTreeBuilder::ClumpableParam::operator<(v55, v7))
              break;
LABEL_294:
            v55 = (uint64_t)(v133 + 6);
            v7 = (uint64_t)v133;
            if (v133 + 6 == (unsigned int *)a2)
              return;
          }
          v134 = *v133;
          v135 = *(unsigned __int8 *)(v7 + 28);
          v136 = *(_BYTE *)(v7 + 28) == 0;
          v169 = *(_WORD *)(v7 + 29);
          v174 = *(_BYTE *)(v7 + 31);
          v137 = *(_DWORD *)(v7 + 32);
          v138 = *(_QWORD *)(v7 + 40);
          *(_QWORD *)(v7 + 40) = 0;
          while (1)
          {
            while (1)
            {
              v139 = v7;
              v140 = *(_QWORD *)v7;
              *(_DWORD *)(v7 + 32) = *(_DWORD *)(v7 + 8);
              v141 = *(_QWORD *)(v7 + 16);
              *(_QWORD *)(v7 + 16) = 0;
              *(_QWORD *)(v7 + 24) = v140;
              v142 = *(void **)(v7 + 40);
              *(_QWORD *)(v7 + 40) = v141;

              v7 -= 24;
              if (!v135 || !*(_BYTE *)(v139 - 20))
                break;
              v143 = *(_DWORD *)(v139 - 24);
              if (v134 >= v143)
              {
                if (v134 != v143)
                  goto LABEL_293;
LABEL_292:
                if (v137 >= *(_DWORD *)(v139 - 16))
                {
LABEL_293:
                  *(_DWORD *)v139 = v134;
                  *(_BYTE *)(v139 + 4) = v135;
                  *(_WORD *)(v139 + 5) = v169;
                  *(_BYTE *)(v139 + 7) = v174;
                  *(_DWORD *)(v139 + 8) = v137;
                  v145 = *(void **)(v139 + 16);
                  *(_QWORD *)(v139 + 16) = v138;

                  goto LABEL_294;
                }
              }
            }
            if (*(_BYTE *)(v139 - 20))
              v144 = v136;
            else
              v144 = 0;
            if (!v144)
            {
              if ((v135 != 0) != (*(_BYTE *)(v139 - 20) != 0))
                goto LABEL_293;
              goto LABEL_292;
            }
          }
        }
        if (!a3)
        {
          if ((uint64_t *)v7 == a2)
            return;
          v76 = (v9 - 2) >> 1;
          v158 = v76;
          while (1)
          {
            v77 = v76;
            if (v158 < v76)
              goto LABEL_243;
            v78 = (2 * v76) | 1;
            v79 = v7 + 24 * v78;
            if (2 * v76 + 2 < (uint64_t)v9 && ParameterTreeBuilder::ClumpableParam::operator<(v7 + 24 * v78, v79 + 24))
            {
              v79 += 24;
              v78 = 2 * v77 + 2;
            }
            v80 = v7 + 24 * v77;
            if (ParameterTreeBuilder::ClumpableParam::operator<(v79, v80))
              goto LABEL_243;
            v152 = *(_DWORD *)v80;
            v155 = *(unsigned __int8 *)(v80 + 4);
            v173 = *(_BYTE *)(v80 + 7);
            v167 = *(_WORD *)(v80 + 5);
            v150 = *(_DWORD *)(v80 + 8);
            v81 = v7 + 24 * v77;
            v148 = *(_QWORD *)(v81 + 16);
            *(_QWORD *)(v81 + 16) = 0;
            v82 = *(_QWORD *)v79;
            *(_DWORD *)(v80 + 8) = *(_DWORD *)(v79 + 8);
            *(_QWORD *)v80 = v82;
            v83 = *(_QWORD *)(v79 + 16);
            *(_QWORD *)(v79 + 16) = 0;
            v84 = *(void **)(v81 + 16);
            *(_QWORD *)(v81 + 16) = v83;

            if (v158 < v78)
            {
              LOBYTE(v85) = v155;
              goto LABEL_242;
            }
            v85 = v155;
            while (1)
            {
              v86 = a2;
              v87 = v79;
              v88 = 2 * v78;
              v78 = (2 * v78) | 1;
              v79 = v7 + 24 * v78;
              v89 = v88 + 2;
              if (v88 + 2 < (uint64_t)v9)
              {
                v90 = ParameterTreeBuilder::ClumpableParam::operator<(v7 + 24 * v78, v79 + 24);
                if (v90)
                  v79 += 24;
                v85 = v155;
                if (v90)
                  v78 = v89;
              }
              v91 = !*(_BYTE *)(v79 + 4) || v85 == 0;
              a2 = v86;
              if (v91)
                break;
              if (*(_DWORD *)v79 < v152)
                goto LABEL_241;
              if (*(_DWORD *)v79 == v152)
              {
LABEL_238:
                if (*(_DWORD *)(v79 + 8) < v150)
                  goto LABEL_241;
              }
LABEL_239:
              v92 = *(_QWORD *)v79;
              *(_DWORD *)(v87 + 8) = *(_DWORD *)(v79 + 8);
              *(_QWORD *)v87 = v92;
              v93 = *(_QWORD *)(v79 + 16);
              *(_QWORD *)(v79 + 16) = 0;
              v94 = *(void **)(v87 + 16);
              *(_QWORD *)(v87 + 16) = v93;

              if (v158 < v78)
                goto LABEL_242;
            }
            if (!v85 || *(_BYTE *)(v79 + 4))
              break;
LABEL_241:
            v79 = v87;
LABEL_242:
            *(_DWORD *)v79 = v152;
            *(_BYTE *)(v79 + 4) = v85;
            *(_WORD *)(v79 + 5) = v167;
            *(_BYTE *)(v79 + 7) = v173;
            *(_DWORD *)(v79 + 8) = v150;
            v95 = *(void **)(v79 + 16);
            *(_QWORD *)(v79 + 16) = v148;

LABEL_243:
            v76 = v77 - 1;
            if (!v77)
            {
              v96 = v8 / 0x18uLL;
              while (1)
              {
                v97 = 0;
                v98 = a2;
                v176 = *(_DWORD *)(v7 + 8);
                v168 = *(_QWORD *)v7;
                v99 = *(_QWORD *)(v7 + 16);
                *(_QWORD *)(v7 + 16) = 0;
                v100 = v96 - 2;
                v159 = v99;
                if (v96 < 2)
                  v100 = v96 - 1;
                v101 = v100 >> 1;
                v102 = v7;
                do
                {
                  v103 = v102 + 24 * v97 + 24;
                  v104 = (2 * v97) | 1;
                  v105 = 2 * v97 + 2;
                  if (v105 < v96
                    && ParameterTreeBuilder::ClumpableParam::operator<(v102 + 24 * v97 + 24, v102 + 24 * v97 + 48))
                  {
                    v103 += 24;
                    v104 = v105;
                  }
                  v106 = *(_QWORD *)v103;
                  *(_DWORD *)(v102 + 8) = *(_DWORD *)(v103 + 8);
                  *(_QWORD *)v102 = v106;
                  v107 = *(_QWORD *)(v103 + 16);
                  *(_QWORD *)(v103 + 16) = 0;
                  v108 = *(void **)(v102 + 16);
                  *(_QWORD *)(v102 + 16) = v107;

                  v102 = v103;
                  v97 = v104;
                }
                while (v104 <= v101);
                a2 = v98 - 3;
                if ((uint64_t *)v103 == v98 - 3)
                {
                  *(_DWORD *)(v103 + 8) = v176;
                  *(_QWORD *)v103 = v168;
                  v124 = *(void **)(v103 + 16);
                  *(_QWORD *)(v103 + 16) = v159;
                  goto LABEL_275;
                }
                v109 = *a2;
                *(_DWORD *)(v103 + 8) = *((_DWORD *)v98 - 4);
                *(_QWORD *)v103 = v109;
                v110 = *(v98 - 1);
                *(v98 - 1) = 0;
                v111 = *(void **)(v103 + 16);
                *(_QWORD *)(v103 + 16) = v110;

                *((_DWORD *)v98 - 4) = v176;
                *a2 = v168;
                v112 = (void *)*(v98 - 1);
                *(v98 - 1) = v159;

                v113 = v103 - v7 + 24;
                if (v113 >= 25)
                {
                  v114 = -2 - 0x5555555555555555 * (v113 >> 3);
                  v115 = v114 >> 1;
                  v116 = v7 + 24 * (v114 >> 1);
                  if (ParameterTreeBuilder::ClumpableParam::operator<(v116, v103))
                    break;
                }
LABEL_276:
                if (v96-- <= 2)
                  return;
              }
              v117 = *(_DWORD *)v103;
              v118 = *(unsigned __int8 *)(v103 + 4);
              v162 = *(_BYTE *)(v103 + 7);
              v161 = *(_WORD *)(v103 + 5);
              v153 = *(_DWORD *)(v103 + 8);
              v160 = *(_QWORD *)(v103 + 16);
              *(_QWORD *)(v103 + 16) = 0;
              v119 = *(_QWORD *)v116;
              *(_DWORD *)(v103 + 8) = *(_DWORD *)(v116 + 8);
              *(_QWORD *)v103 = v119;
              v120 = v7 + 24 * v115;
              v121 = *(_QWORD *)(v120 + 16);
              *(_QWORD *)(v120 + 16) = 0;
              v122 = *(void **)(v103 + 16);
              *(_QWORD *)(v103 + 16) = v121;

              if (v114 < 2)
              {
                v123 = v153;
                goto LABEL_274;
              }
              v123 = v153;
              while (2)
              {
                v125 = v116;
                v126 = v115 - 1;
                v115 = (v115 - 1) >> 1;
                v116 = v7 + 24 * v115;
                if (*(_BYTE *)(v116 + 4))
                  v127 = v118 == 0;
                else
                  v127 = 1;
                if (v127)
                {
                  if (!v118 || *(_BYTE *)(v116 + 4))
                  {
                    if ((v118 != 0) != (*(_BYTE *)(v116 + 4) != 0))
                      goto LABEL_273;
LABEL_270:
                    if (*(_DWORD *)(v7 + 24 * v115 + 8) >= v153)
                    {
LABEL_273:
                      v116 = v125;
LABEL_274:
                      *(_DWORD *)v116 = v117;
                      *(_BYTE *)(v116 + 4) = v118;
                      *(_WORD *)(v116 + 5) = v161;
                      *(_BYTE *)(v116 + 7) = v162;
                      *(_DWORD *)(v116 + 8) = v123;
                      v124 = *(void **)(v116 + 16);
                      *(_QWORD *)(v116 + 16) = v160;
LABEL_275:

                      goto LABEL_276;
                    }
                  }
                }
                else if (*(_DWORD *)v116 >= v117)
                {
                  if (*(_DWORD *)v116 != v117)
                    goto LABEL_273;
                  goto LABEL_270;
                }
                v128 = *(_QWORD *)v116;
                *(_DWORD *)(v125 + 8) = *(_DWORD *)(v116 + 8);
                *(_QWORD *)v125 = v128;
                v129 = v7 + 24 * v115;
                v130 = *(_QWORD *)(v129 + 16);
                *(_QWORD *)(v129 + 16) = 0;
                v131 = *(void **)(v125 + 16);
                *(_QWORD *)(v125 + 16) = v130;

                if (v126 <= 1)
                  goto LABEL_274;
                continue;
              }
            }
          }
          if ((v85 != 0) == (*(_BYTE *)(v79 + 4) != 0))
            goto LABEL_238;
          goto LABEL_239;
        }
        v10 = v7 + 24 * (v9 >> 1);
        if ((unint64_t)v8 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)(v7 + 24 * (v9 >> 1)), (uint64_t *)v7, a2 - 3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)v7, (uint64_t *)(v7 + 24 * (v9 >> 1)), a2 - 3);
          v11 = (uint64_t *)(v7 + 24 * (v9 >> 1));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(v154, v11 - 3, a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(v147, v11 + 3, a2 - 9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(v11 - 3, v11, v11 + 3);
          v175 = *(_DWORD *)(v7 + 8);
          v163 = *(_QWORD *)v7;
          v12 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 16) = 0;
          v13 = *(_DWORD *)(v10 + 8);
          *(_QWORD *)v7 = *(_QWORD *)v10;
          *(_DWORD *)(v7 + 8) = v13;
          v14 = v11[2];
          v11[2] = 0;
          v15 = *(void **)(v7 + 16);
          *(_QWORD *)(v7 + 16) = v14;

          *(_DWORD *)(v10 + 8) = v175;
          *(_QWORD *)v10 = v163;
          v16 = (void *)v11[2];
          v11[2] = v12;

        }
        v156 = a3 - 1;
        if ((a4 & 1) == 0 && !ParameterTreeBuilder::ClumpableParam::operator<(v146, v7))
        {
          v35 = *(_DWORD *)v7;
          v36 = *(unsigned __int8 *)(v7 + 4);
          v171 = *(_BYTE *)(v7 + 7);
          v165 = *(_WORD *)(v7 + 5);
          v37 = *(_DWORD *)(v7 + 8);
          v38 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 16) = 0;
          v39 = *((unsigned __int8 *)a2 - 20);
          if (v36 && *((_BYTE *)a2 - 20))
          {
            v40 = *((_DWORD *)a2 - 6);
            if (v35 >= v40)
            {
              if (v35 != v40)
              {
LABEL_117:
                for (i = v7 + 24; i < (unint64_t)a2; i += 24)
                {
                  if (v36 && *(_BYTE *)(i + 4))
                  {
                    if (v35 < *(_DWORD *)i)
                      break;
                    if (v35 == *(_DWORD *)i)
                      goto LABEL_128;
                  }
                  else
                  {
                    if (*(_BYTE *)(i + 4))
                      v42 = v36 == 0;
                    else
                      v42 = 0;
                    if (v42)
                      break;
                    if ((v36 != 0) == (*(_BYTE *)(i + 4) != 0))
                    {
LABEL_128:
                      if (v37 < *(_DWORD *)(i + 8))
                        break;
                    }
                  }
                }
LABEL_130:
                v43 = a2;
                if (i >= (unint64_t)a2)
                {
LABEL_148:
                  if (i >= (unint64_t)v43)
                    goto LABEL_173;
LABEL_149:
                  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>((uint64_t *)i, v43);
                  while (1)
                  {
                    while (1)
                    {
                      i += 24;
                      if (!v36 || !*(_BYTE *)(i + 4))
                        break;
                      if (v35 < *(_DWORD *)i)
                        goto LABEL_161;
                      if (v35 == *(_DWORD *)i)
                      {
LABEL_160:
                        if (v37 < *(_DWORD *)(i + 8))
                          goto LABEL_161;
                      }
                    }
                    if (*(_BYTE *)(i + 4) && v36 == 0)
                      break;
                    if ((v36 != 0) == (*(_BYTE *)(i + 4) != 0))
                      goto LABEL_160;
                  }
                  while (1)
                  {
LABEL_161:
                    while (1)
                    {
                      v43 -= 3;
                      if (!v36 || !*((_BYTE *)v43 + 4))
                        break;
                      if (v35 >= *(_DWORD *)v43)
                      {
                        if (v35 != *(_DWORD *)v43)
                          goto LABEL_172;
LABEL_171:
                        if (v37 >= *((_DWORD *)v43 + 2))
                        {
LABEL_172:
                          if (i >= (unint64_t)v43)
                          {
LABEL_173:
                            if (i - 24 != v7)
                            {
                              v51 = *(_QWORD *)(i - 24);
                              *(_DWORD *)(v7 + 8) = *(_DWORD *)(i - 16);
                              *(_QWORD *)v7 = v51;
                              v52 = *(_QWORD *)(i - 8);
                              *(_QWORD *)(i - 8) = 0;
                              v53 = *(void **)(v7 + 16);
                              *(_QWORD *)(v7 + 16) = v52;

                            }
                            *(_DWORD *)(i - 24) = v35;
                            *(_BYTE *)(i - 20) = v36;
                            *(_WORD *)(i - 19) = v165;
                            *(_BYTE *)(i - 17) = v171;
                            *(_DWORD *)(i - 16) = v37;
                            v54 = *(void **)(i - 8);
                            *(_QWORD *)(i - 8) = v38;

                            a4 = 0;
                            a3 = v156;
                            goto LABEL_1;
                          }
                          goto LABEL_149;
                        }
                      }
                    }
                    if (*((_BYTE *)v43 + 4))
                      v50 = v36 == 0;
                    else
                      v50 = 0;
                    if (!v50)
                    {
                      if ((v36 != 0) != (*((_BYTE *)v43 + 4) != 0))
                        goto LABEL_172;
                      goto LABEL_171;
                    }
                  }
                }
                v44 = a2 - 2;
                if (!v36)
                  goto LABEL_136;
LABEL_132:
                if (v39)
                {
                  v45 = *((_DWORD *)v44 - 2);
                  if (v35 < v45)
                    goto LABEL_145;
                  if (v35 != v45)
                  {
LABEL_147:
                    v43 = v44 - 1;
                    goto LABEL_148;
                  }
                }
                else
                {
LABEL_136:
                  while (1)
                  {
                    v46 = v39 == 0;
                    if (!v39 || v36 != 0)
                      break;
LABEL_145:
                    v39 = *((unsigned __int8 *)v44 - 28);
                    v44 -= 3;
                    if (v36)
                      goto LABEL_132;
                  }
                  v48 = !v46;
                  if ((((v36 != 0) ^ v48) & 1) != 0)
                    goto LABEL_147;
                }
                if (v37 < *(_DWORD *)v44)
                  goto LABEL_145;
                goto LABEL_147;
              }
              goto LABEL_103;
            }
          }
          else if (!*((_BYTE *)a2 - 20) || v36)
          {
            if ((v36 != 0) != (v39 != 0))
              goto LABEL_117;
LABEL_103:
            if (v37 >= *((_DWORD *)a2 - 4))
              goto LABEL_117;
          }
          for (i = v7 + 24; !v36 || !*(_BYTE *)(i + 4); i += 24)
          {
            if (*(_BYTE *)(i + 4))
              v41 = v36 == 0;
            else
              v41 = 0;
            if (v41)
              goto LABEL_130;
            if ((v36 != 0) == (*(_BYTE *)(i + 4) != 0))
              goto LABEL_115;
LABEL_116:
            ;
          }
          if (v35 < *(_DWORD *)i)
            goto LABEL_130;
          if (v35 != *(_DWORD *)i)
            goto LABEL_116;
LABEL_115:
          if (v37 < *(_DWORD *)(i + 8))
            goto LABEL_130;
          goto LABEL_116;
        }
        v17 = *(_DWORD *)v7;
        v18 = *(unsigned __int8 *)(v7 + 4);
        v164 = *(_WORD *)v149;
        v170 = *(_BYTE *)(v149 + 2);
        v19 = *(_DWORD *)(v7 + 8);
        v20 = *(_QWORD *)(v7 + 16);
        *(_QWORD *)(v7 + 16) = 0;
        for (j = v154; !*((_BYTE *)j + 4) || v18 == 0; j += 3)
        {
          if (!v18 || *((_BYTE *)j + 4))
          {
            if ((v18 != 0) != (*((_BYTE *)j + 4) != 0))
              goto LABEL_24;
            goto LABEL_22;
          }
LABEL_23:
          ;
        }
        if (*(_DWORD *)j < v17)
          goto LABEL_23;
        if (*(_DWORD *)j != v17)
          goto LABEL_24;
LABEL_22:
        if (*((_DWORD *)j + 2) < v19)
          goto LABEL_23;
LABEL_24:
        if (j - 3 != (uint64_t *)v7)
        {
          for (k = a2 - 3; !*((_BYTE *)k + 4) || v18 == 0; k -= 3)
          {
            if (v18 && !*((_BYTE *)k + 4))
              goto LABEL_58;
            if ((v18 != 0) == (*((_BYTE *)k + 4) != 0))
              goto LABEL_37;
LABEL_38:
            ;
          }
          if (*(_DWORD *)k < v17)
            goto LABEL_58;
          if (*(_DWORD *)k != v17)
            goto LABEL_38;
LABEL_37:
          if (*((_DWORD *)k + 2) < v19)
            goto LABEL_58;
          goto LABEL_38;
        }
        k = a2;
        if (j < a2)
        {
          for (k = a2 - 3; ; k -= 3)
          {
            if (*((_BYTE *)k + 4))
              v25 = v18 == 0;
            else
              v25 = 1;
            if (v25)
            {
              if (v18 && !*((_BYTE *)k + 4))
                break;
              if ((v18 != 0) != (*((_BYTE *)k + 4) != 0))
              {
LABEL_49:
                if (j >= k)
                  break;
                continue;
              }
            }
            else
            {
              if (*(_DWORD *)k < v17)
                break;
              if (*(_DWORD *)k != v17)
                goto LABEL_49;
            }
            v26 = *((_DWORD *)k + 2) < v19 || j >= k;
            if (v26)
              break;
          }
        }
LABEL_58:
        i = (unint64_t)j;
        if (j >= k)
          goto LABEL_86;
        i = (unint64_t)j;
        v27 = k;
        do
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>((uint64_t *)i, v27);
          while (1)
          {
            do
            {
              while (1)
              {
                i += 24;
                if (!*(_BYTE *)(i + 4) || v18 == 0)
                  break;
                if (*(_DWORD *)i >= v17)
                {
                  if (*(_DWORD *)i != v17)
                    goto LABEL_73;
                  goto LABEL_72;
                }
              }
            }
            while (v18 && !*(_BYTE *)(i + 4));
            if ((v18 != 0) != (*(_BYTE *)(i + 4) != 0))
              break;
LABEL_72:
            if (*(_DWORD *)(i + 8) >= v19)
              goto LABEL_73;
          }
          while (1)
          {
LABEL_73:
            while (1)
            {
              v27 -= 3;
              if (!*((_BYTE *)v27 + 4) || v18 == 0)
                break;
              if (*(_DWORD *)v27 < v17)
                goto LABEL_85;
              if (*(_DWORD *)v27 == v17)
                goto LABEL_84;
            }
            if (v18 && !*((_BYTE *)v27 + 4))
              break;
            if ((v18 != 0) == (*((_BYTE *)v27 + 4) != 0))
            {
LABEL_84:
              if (*((_DWORD *)v27 + 2) < v19)
                break;
            }
          }
LABEL_85:
          ;
        }
        while (i < (unint64_t)v27);
LABEL_86:
        if (i - 24 != v7)
        {
          v30 = *(_QWORD *)(i - 24);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(i - 16);
          *(_QWORD *)v7 = v30;
          v31 = *(_QWORD *)(i - 8);
          *(_QWORD *)(i - 8) = 0;
          v32 = *(void **)(v7 + 16);
          *(_QWORD *)(v7 + 16) = v31;

        }
        *(_DWORD *)(i - 24) = v17;
        *(_BYTE *)(i - 20) = v18;
        *(_WORD *)(i - 19) = v164;
        *(_BYTE *)(i - 17) = v170;
        *(_DWORD *)(i - 16) = v19;
        v33 = *(void **)(i - 8);
        *(_QWORD *)(i - 8) = v20;

        v26 = j >= k;
        a3 = v156;
        if (!v26)
        {
LABEL_94:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *,false>(v7, i - 24, v156, a4 & 1);
          a4 = 0;
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)v7, (uint64_t *)(i - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)i, a2))
        {
          if (v34)
            continue;
          goto LABEL_94;
        }
        a2 = (uint64_t *)(i - 24);
        if (!v34)
          goto LABEL_2;
        return;
    }
  }
}

  v8 = (__int128 *)(a2 - 52);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a2 - v9) >> 2);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_QWORD *)(a2 - 44) < *(_QWORD *)(v9 + 8))
        {
          v178 = *(_DWORD *)(v9 + 48);
          v160 = *(_OWORD *)(v9 + 16);
          v169 = *(_OWORD *)(v9 + 32);
          v151 = *(_OWORD *)v9;
          v57 = *v8;
          v58 = *(_OWORD *)(a2 - 36);
          v59 = *(_OWORD *)(a2 - 20);
          *(_DWORD *)(v9 + 48) = *(_DWORD *)(a2 - 4);
          *(_OWORD *)(v9 + 16) = v58;
          *(_OWORD *)(v9 + 32) = v59;
          *(_OWORD *)v9 = v57;
          *(_DWORD *)(a2 - 4) = v178;
          *(_OWORD *)(a2 - 36) = v160;
          *(_OWORD *)(a2 - 20) = v169;
          *v8 = v151;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>((__int128 *)v9, (__int128 *)(v9 + 52), (__int128 *)(a2 - 52));
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>(v9, v9 + 52, v9 + 104, (__int128 *)(a2 - 52));
        return;
      case 5:
        v60 = (__int128 *)(v9 + 52);
        v61 = (__int128 *)(v9 + 104);
        v62 = (__int128 *)(v9 + 156);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>(v9, v9 + 52, v9 + 104, (__int128 *)(v9 + 156));
        if (*(_QWORD *)(a2 - 44) < *(_QWORD *)(v9 + 164))
        {
          v63 = *v62;
          v161 = *(_OWORD *)(v9 + 172);
          v64 = *(_OWORD *)(v9 + 188);
          v65 = *(_DWORD *)(v9 + 204);
          v66 = *(_DWORD *)(a2 - 4);
          v68 = *(_OWORD *)(a2 - 36);
          v67 = *(_OWORD *)(a2 - 20);
          *v62 = *v8;
          *(_OWORD *)(v9 + 172) = v68;
          *(_OWORD *)(v9 + 188) = v67;
          *(_DWORD *)(v9 + 204) = v66;
          *(_OWORD *)(a2 - 36) = v161;
          *(_OWORD *)(a2 - 20) = v64;
          *(_DWORD *)(a2 - 4) = v65;
          *v8 = v63;
          if (*(_QWORD *)(v9 + 164) < *(_QWORD *)(v9 + 112))
          {
            v69 = *(_DWORD *)(v9 + 152);
            v71 = *(_OWORD *)(v9 + 120);
            v70 = *(_OWORD *)(v9 + 136);
            v72 = *v61;
            v73 = *(_OWORD *)(v9 + 172);
            *v61 = *v62;
            *(_OWORD *)(v9 + 120) = v73;
            *(_OWORD *)(v9 + 136) = *(_OWORD *)(v9 + 188);
            *(_DWORD *)(v9 + 152) = *(_DWORD *)(v9 + 204);
            *v62 = v72;
            *(_OWORD *)(v9 + 172) = v71;
            *(_OWORD *)(v9 + 188) = v70;
            *(_DWORD *)(v9 + 204) = v69;
            if (*(_QWORD *)(v9 + 112) < *(_QWORD *)(v9 + 60))
            {
              v74 = *(_DWORD *)(v9 + 100);
              v76 = *(_OWORD *)(v9 + 68);
              v75 = *(_OWORD *)(v9 + 84);
              v77 = *v60;
              v78 = *(_OWORD *)(v9 + 120);
              *v60 = *v61;
              *(_OWORD *)(v9 + 68) = v78;
              *(_OWORD *)(v9 + 84) = *(_OWORD *)(v9 + 136);
              *(_DWORD *)(v9 + 100) = *(_DWORD *)(v9 + 152);
              *v61 = v77;
              *(_OWORD *)(v9 + 120) = v76;
              *(_OWORD *)(v9 + 136) = v75;
              *(_DWORD *)(v9 + 152) = v74;
              if (*(_QWORD *)(v9 + 60) < *(_QWORD *)(v9 + 8))
              {
                v179 = *(_DWORD *)(v9 + 48);
                v162 = *(_OWORD *)(v9 + 16);
                v170 = *(_OWORD *)(v9 + 32);
                v152 = *(_OWORD *)v9;
                v79 = *(_OWORD *)(v9 + 68);
                *(_OWORD *)v9 = *v60;
                *(_OWORD *)(v9 + 16) = v79;
                *(_OWORD *)(v9 + 32) = *(_OWORD *)(v9 + 84);
                *(_DWORD *)(v9 + 48) = *(_DWORD *)(v9 + 100);
                *(_DWORD *)(v9 + 100) = v179;
                *(_OWORD *)(v9 + 68) = v162;
                *(_OWORD *)(v9 + 84) = v170;
                *v60 = v152;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 1247)
        {
          v80 = (_QWORD *)(v9 + 52);
          v82 = v9 == a2 || v80 == (_QWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v82)
            {
              v83 = 0;
              v84 = (_QWORD *)v9;
              do
              {
                v85 = v80;
                v86 = *(_QWORD *)((char *)v84 + 60);
                if (v86 < v84[1])
                {
                  v87 = *v85;
                  v153 = *(_OWORD *)((char *)v84 + 68);
                  v163 = *(_OWORD *)((char *)v84 + 84);
                  v171 = *((_DWORD *)v84 + 25);
                  v88 = v83;
                  while (1)
                  {
                    v89 = v9 + v88;
                    v90 = *(_OWORD *)(v9 + v88 + 16);
                    *(_OWORD *)(v89 + 52) = *(_OWORD *)(v9 + v88);
                    *(_OWORD *)(v89 + 68) = v90;
                    *(_OWORD *)(v89 + 84) = *(_OWORD *)(v9 + v88 + 32);
                    *(_DWORD *)(v89 + 100) = *(_DWORD *)(v9 + v88 + 48);
                    if (!v88)
                      break;
                    v88 -= 52;
                    if (v86 >= *(_QWORD *)(v89 - 44))
                    {
                      v91 = v9 + v88 + 52;
                      goto LABEL_78;
                    }
                  }
                  v91 = v9;
LABEL_78:
                  *(_QWORD *)v91 = v87;
                  *(_QWORD *)(v91 + 8) = v86;
                  *(_OWORD *)(v91 + 16) = v153;
                  *(_OWORD *)(v91 + 32) = v163;
                  *(_DWORD *)(v91 + 48) = v171;
                }
                v80 = (_QWORD *)((char *)v85 + 52);
                v83 += 52;
                v84 = v85;
              }
              while ((_QWORD *)((char *)v85 + 52) != (_QWORD *)a2);
            }
          }
          else if (!v82)
          {
            do
            {
              v134 = v80;
              v135 = *(_QWORD *)(a1 + 60);
              if (v135 < *(_QWORD *)(a1 + 8))
              {
                v136 = *v80;
                v156 = *(_OWORD *)(a1 + 68);
                v166 = *(_OWORD *)(a1 + 84);
                v174 = *(_DWORD *)(a1 + 100);
                v137 = v134;
                do
                {
                  v138 = *(_OWORD *)((char *)v137 - 36);
                  *(_OWORD *)v137 = *(_OWORD *)((char *)v137 - 52);
                  *((_OWORD *)v137 + 1) = v138;
                  *((_OWORD *)v137 + 2) = *(_OWORD *)((char *)v137 - 20);
                  *((_DWORD *)v137 + 12) = *((_DWORD *)v137 - 1);
                  v139 = *(v137 - 12);
                  v137 = (_QWORD *)((char *)v137 - 52);
                }
                while (v135 < v139);
                *v137 = v136;
                v137[1] = v135;
                *((_DWORD *)v137 + 12) = v174;
                *((_OWORD *)v137 + 1) = v156;
                *((_OWORD *)v137 + 2) = v166;
              }
              v80 = (_QWORD *)((char *)v134 + 52);
              a1 = (uint64_t)v134;
            }
            while ((_QWORD *)((char *)v134 + 52) != (_QWORD *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v92 = (unint64_t)(v11 - 2) >> 1;
            v93 = v92;
            do
            {
              v94 = v93;
              if (v92 >= v93)
              {
                v95 = (2 * v93) | 1;
                v96 = v9 + 52 * v95;
                if (2 * v94 + 2 < v11)
                {
                  v97 = *(_QWORD *)(v9 + 52 * v95 + 8);
                  v98 = *(_QWORD *)(v96 + 60);
                  v96 += 52 * (v97 < v98);
                  if (v97 < v98)
                    v95 = 2 * v94 + 2;
                }
                v99 = *(_QWORD *)(v9 + 52 * v94 + 8);
                if (*(_QWORD *)(v96 + 8) >= v99)
                {
                  v100 = v9 + 52 * v94;
                  v101 = *(_QWORD *)v100;
                  v172 = *(_DWORD *)(v100 + 48);
                  v154 = *(_OWORD *)(v100 + 16);
                  v164 = *(_OWORD *)(v100 + 32);
                  do
                  {
                    v102 = v100;
                    v100 = v96;
                    v103 = *(_OWORD *)v96;
                    v104 = *(_OWORD *)(v96 + 16);
                    v105 = *(_OWORD *)(v96 + 32);
                    *(_DWORD *)(v102 + 48) = *(_DWORD *)(v96 + 48);
                    *(_OWORD *)(v102 + 16) = v104;
                    *(_OWORD *)(v102 + 32) = v105;
                    *(_OWORD *)v102 = v103;
                    if (v92 < v95)
                      break;
                    v106 = (2 * v95) | 1;
                    v96 = v9 + 52 * v106;
                    v107 = 2 * v95 + 2;
                    if (v107 < v11)
                    {
                      v108 = *(_QWORD *)(v9 + 52 * v106 + 8);
                      v109 = *(_QWORD *)(v96 + 60);
                      v96 += 52 * (v108 < v109);
                      if (v108 < v109)
                        v106 = v107;
                    }
                    v95 = v106;
                  }
                  while (*(_QWORD *)(v96 + 8) >= v99);
                  *(_QWORD *)v100 = v101;
                  *(_QWORD *)(v100 + 8) = v99;
                  *(_OWORD *)(v100 + 16) = v154;
                  *(_OWORD *)(v100 + 32) = v164;
                  *(_DWORD *)(v100 + 48) = v172;
                }
              }
              v93 = v94 - 1;
            }
            while (v94);
            v110 = v10 / 0x34uLL;
            do
            {
              v111 = 0;
              v180 = *(_DWORD *)(v9 + 48);
              v165 = *(_OWORD *)(v9 + 16);
              v173 = *(_OWORD *)(v9 + 32);
              v155 = *(_OWORD *)v9;
              v112 = v9;
              do
              {
                v113 = v111 + 1;
                v114 = v112 + 52 * (v111 + 1);
                v115 = (2 * v111) | 1;
                v116 = 2 * v111 + 2;
                if (v116 < v110)
                {
                  v117 = *(_QWORD *)(v112 + 52 * v113 + 8);
                  v118 = *(_QWORD *)(v114 + 60);
                  v114 += 52 * (v117 < v118);
                  if (v117 < v118)
                    v115 = v116;
                }
                v119 = *(_OWORD *)v114;
                v120 = *(_OWORD *)(v114 + 16);
                v121 = *(_OWORD *)(v114 + 32);
                *(_DWORD *)(v112 + 48) = *(_DWORD *)(v114 + 48);
                *(_OWORD *)(v112 + 16) = v120;
                *(_OWORD *)(v112 + 32) = v121;
                *(_OWORD *)v112 = v119;
                v112 = v114;
                v111 = v115;
              }
              while (v115 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
              a2 -= 52;
              if (v114 == a2)
              {
                *(_DWORD *)(v114 + 48) = v180;
                *(_OWORD *)(v114 + 16) = v165;
                *(_OWORD *)(v114 + 32) = v173;
                *(_OWORD *)v114 = v155;
              }
              else
              {
                v122 = *(_OWORD *)a2;
                v123 = *(_OWORD *)(a2 + 16);
                v124 = *(_OWORD *)(a2 + 32);
                *(_DWORD *)(v114 + 48) = *(_DWORD *)(a2 + 48);
                *(_OWORD *)(v114 + 16) = v123;
                *(_OWORD *)(v114 + 32) = v124;
                *(_OWORD *)v114 = v122;
                *(_DWORD *)(a2 + 48) = v180;
                *(_OWORD *)(a2 + 16) = v165;
                *(_OWORD *)(a2 + 32) = v173;
                *(_OWORD *)a2 = v155;
                v125 = v114 - v9 + 52;
                if (v125 >= 53)
                {
                  v126 = (v125 / 0x34uLL - 2) >> 1;
                  v127 = *(_QWORD *)(v114 + 8);
                  if (*(_QWORD *)(v9 + 52 * v126 + 8) < v127)
                  {
                    v128 = *(_QWORD *)v114;
                    v148 = *(_DWORD *)(v114 + 48);
                    v142 = *(_OWORD *)(v114 + 16);
                    v145 = *(_OWORD *)(v114 + 32);
                    do
                    {
                      v129 = v114;
                      v114 = v9 + 52 * v126;
                      v130 = *(_OWORD *)v114;
                      v131 = *(_OWORD *)(v114 + 16);
                      v132 = *(_OWORD *)(v114 + 32);
                      *(_DWORD *)(v129 + 48) = *(_DWORD *)(v114 + 48);
                      *(_OWORD *)(v129 + 16) = v131;
                      *(_OWORD *)(v129 + 32) = v132;
                      *(_OWORD *)v129 = v130;
                      if (!v126)
                        break;
                      v126 = (v126 - 1) >> 1;
                    }
                    while (*(_QWORD *)(v9 + 52 * v126 + 8) < v127);
                    *(_QWORD *)v114 = v128;
                    *(_QWORD *)(v114 + 8) = v127;
                    *(_DWORD *)(v114 + 48) = v148;
                    *(_OWORD *)(v114 + 16) = v142;
                    *(_OWORD *)(v114 + 32) = v145;
                  }
                }
              }
            }
            while (v110-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 52 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x1A01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>((__int128 *)v13, (__int128 *)a1, (__int128 *)(a2 - 52));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>((__int128 *)a1, (__int128 *)v13, (__int128 *)(a2 - 52));
          v14 = 52 * v12;
          v15 = (__int128 *)(52 * v12 + a1 - 52);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>((__int128 *)(a1 + 52), v15, (__int128 *)(a2 - 104));
          v16 = (__int128 *)(a1 + 52 + v14);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>((__int128 *)(a1 + 104), v16, (__int128 *)(a2 - 156));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>(v15, (__int128 *)v13, v16);
          v175 = *(_DWORD *)(a1 + 48);
          v157 = *(_OWORD *)(a1 + 16);
          v167 = *(_OWORD *)(a1 + 32);
          v149 = *(_OWORD *)a1;
          v17 = *(_OWORD *)v13;
          v18 = *(_OWORD *)(v13 + 16);
          v19 = *(_OWORD *)(v13 + 32);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(v13 + 48);
          *(_OWORD *)(a1 + 16) = v18;
          *(_OWORD *)(a1 + 32) = v19;
          *(_OWORD *)a1 = v17;
          *(_DWORD *)(v13 + 48) = v175;
          *(_OWORD *)(v13 + 16) = v157;
          *(_OWORD *)(v13 + 32) = v167;
          *(_OWORD *)v13 = v149;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v20 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(a1 - 44) < v20)
            goto LABEL_11;
          v41 = *(_QWORD *)a1;
          v147 = *(_DWORD *)(a1 + 48);
          v141 = *(_OWORD *)(a1 + 16);
          v144 = *(_OWORD *)(a1 + 32);
          if (v20 >= *(_QWORD *)(a2 - 44))
          {
            v44 = a1 + 52;
            do
            {
              v9 = v44;
              if (v44 >= a2)
                break;
              v45 = *(_QWORD *)(v44 + 8);
              v44 += 52;
            }
            while (v20 >= v45);
          }
          else
          {
            v42 = a1;
            do
            {
              v9 = v42 + 52;
              v43 = *(_QWORD *)(v42 + 60);
              v42 += 52;
            }
            while (v20 >= v43);
          }
          v46 = a2;
          if (v9 < a2)
          {
            v47 = a2;
            do
            {
              v46 = v47 - 52;
              v48 = *(_QWORD *)(v47 - 44);
              v47 -= 52;
            }
            while (v20 < v48);
          }
          while (v9 < v46)
          {
            v177 = *(_DWORD *)(v9 + 48);
            v159 = *(_OWORD *)(v9 + 16);
            v168 = *(_OWORD *)(v9 + 32);
            v150 = *(_OWORD *)v9;
            v49 = *(_OWORD *)v46;
            v50 = *(_OWORD *)(v46 + 16);
            v51 = *(_OWORD *)(v46 + 32);
            *(_DWORD *)(v9 + 48) = *(_DWORD *)(v46 + 48);
            *(_OWORD *)(v9 + 16) = v50;
            *(_OWORD *)(v9 + 32) = v51;
            *(_OWORD *)v9 = v49;
            *(_DWORD *)(v46 + 48) = v177;
            *(_OWORD *)(v46 + 16) = v159;
            *(_OWORD *)(v46 + 32) = v168;
            *(_OWORD *)v46 = v150;
            do
            {
              v52 = *(_QWORD *)(v9 + 60);
              v9 += 52;
            }
            while (v20 >= v52);
            do
            {
              v53 = *(_QWORD *)(v46 - 44);
              v46 -= 52;
            }
            while (v20 < v53);
          }
          if (v9 - 52 != a1)
          {
            v54 = *(_OWORD *)(v9 - 52);
            v55 = *(_OWORD *)(v9 - 36);
            v56 = *(_OWORD *)(v9 - 20);
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(v9 - 4);
            *(_OWORD *)(a1 + 16) = v55;
            *(_OWORD *)(a1 + 32) = v56;
            *(_OWORD *)a1 = v54;
          }
          a4 = 0;
          *(_QWORD *)(v9 - 52) = v41;
          *(_QWORD *)(v9 - 44) = v20;
          *(_DWORD *)(v9 - 4) = v147;
          *(_OWORD *)(v9 - 20) = v144;
          *(_OWORD *)(v9 - 36) = v141;
          continue;
        }
        v20 = *(_QWORD *)(a1 + 8);
LABEL_11:
        v21 = *(_QWORD *)a1;
        v146 = *(_DWORD *)(a1 + 48);
        v140 = *(_OWORD *)(a1 + 16);
        v143 = *(_OWORD *)(a1 + 32);
        v22 = a1;
        do
        {
          v23 = v22;
          v22 += 52;
        }
        while (*(_QWORD *)(v23 + 60) < v20);
        v24 = a2;
        if (v23 == a1)
        {
          v27 = a2;
          while (v22 < v27)
          {
            v25 = v27 - 52;
            v28 = *(_QWORD *)(v27 - 44);
            v27 -= 52;
            if (v28 < v20)
              goto LABEL_21;
          }
          v25 = v27;
        }
        else
        {
          do
          {
            v25 = v24 - 52;
            v26 = *(_QWORD *)(v24 - 44);
            v24 -= 52;
          }
          while (v26 >= v20);
        }
LABEL_21:
        v9 = v22;
        if (v22 < v25)
        {
          v29 = v25;
          do
          {
            v30 = *(_OWORD *)v9;
            v158 = *(_OWORD *)(v9 + 16);
            v31 = *(_OWORD *)(v9 + 32);
            v176 = *(_DWORD *)(v9 + 48);
            v32 = *(_DWORD *)(v29 + 48);
            v34 = *(_OWORD *)(v29 + 16);
            v33 = *(_OWORD *)(v29 + 32);
            *(_OWORD *)v9 = *(_OWORD *)v29;
            *(_OWORD *)(v9 + 16) = v34;
            *(_OWORD *)(v9 + 32) = v33;
            *(_DWORD *)(v9 + 48) = v32;
            *(_OWORD *)(v29 + 16) = v158;
            *(_OWORD *)(v29 + 32) = v31;
            *(_DWORD *)(v29 + 48) = v176;
            *(_OWORD *)v29 = v30;
            do
            {
              v35 = *(_QWORD *)(v9 + 60);
              v9 += 52;
            }
            while (v35 < v20);
            do
            {
              v36 = *(_QWORD *)(v29 - 44);
              v29 -= 52;
            }
            while (v36 >= v20);
          }
          while (v9 < v29);
        }
        if (v9 - 52 != a1)
        {
          v37 = *(_OWORD *)(v9 - 52);
          v38 = *(_OWORD *)(v9 - 36);
          v39 = *(_OWORD *)(v9 - 20);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(v9 - 4);
          *(_OWORD *)(a1 + 16) = v38;
          *(_OWORD *)(a1 + 32) = v39;
          *(_OWORD *)a1 = v37;
        }
        *(_QWORD *)(v9 - 52) = v21;
        *(_QWORD *)(v9 - 44) = v20;
        *(_DWORD *)(v9 - 4) = v146;
        *(_OWORD *)(v9 - 20) = v143;
        *(_OWORD *)(v9 - 36) = v140;
        if (v22 < v25)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *,false>(a1, v9 - 52, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v40 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>(a1, v9 - 52);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>(v9, a2))
        {
          if (v40)
            continue;
          goto LABEL_32;
        }
        a2 = v9 - 52;
        if (!v40)
          goto LABEL_1;
        return;
    }
  }
}

