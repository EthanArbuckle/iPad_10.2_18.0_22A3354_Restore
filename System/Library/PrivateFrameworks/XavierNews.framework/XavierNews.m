ValueMetadata *type metadata accessor for ClassicHeadlineCohortData()
{
  return &type metadata for ClassicHeadlineCohortData;
}

uint64_t _s7FeatureOwxx(uint64_t a1)
{
  return sub_1D5D8014C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t getEnumTagSinglePayload for ClassicHeadlineCohortData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ClassicHeadlineCohortData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

XavierNews::ClassicHeadlineCohortData __swiftcall ClassicHeadlineCohortData.init(rawClicks:clicks:impressions:)(Swift::Double rawClicks, Swift::Double clicks, Swift::Double impressions)
{
  Swift::Double *v3;
  XavierNews::ClassicHeadlineCohortData result;

  *v3 = rawClicks;
  v3[1] = clicks;
  v3[2] = impressions;
  result.impressions = impressions;
  result.clicks = clicks;
  result.rawClicks = rawClicks;
  return result;
}

ValueMetadata *type metadata accessor for ClassicTagMetadata()
{
  return &type metadata for ClassicTagMetadata;
}

double sub_1D5D7ADC8@<D0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double result;

  sub_1D5D89CD8(a2);
  sub_1D5D89CBC(a3);
  sub_1D5D89C84(a4);
  sub_1D5D89CA0(a5);
  result = a5;
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

double sub_1D5D7AE5C@<D0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  double result;

  sub_1D5D7B178(a2);
  sub_1D5D7B124(a3);
  sub_1D5D7B108(a4);
  sub_1D5D7B0EC(a5);
  sub_1D5D7B140(a6);
  sub_1D5D7B15C(a7);
  result = a7;
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  a1[5] = a7;
  return result;
}

uint64_t sub_1D5D7AF2C(uint64_t result, uint64_t a2, double a3)
{
  double *v3;
  double v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;

  v4 = a3;
  if (a3 < 0.0)
  {
    v6 = result;
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v7 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1D5E38580;
    v9 = v7;
    sub_1D5E376B0();
    v10 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1D5D889BC();
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0xE000000000000000;
    *(_QWORD *)(v8 + 96) = v10;
    *(_QWORD *)(v8 + 104) = v11;
    *(_QWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 72) = 0xD00000000000001FLL;
    *(_QWORD *)(v8 + 80) = 0x80000001D5E48070;
    *(_QWORD *)(v8 + 136) = v10;
    *(_QWORD *)(v8 + 144) = v11;
    *(_QWORD *)(v8 + 112) = v6;
    *(_QWORD *)(v8 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v8 + 176) = v10;
    *(_QWORD *)(v8 + 184) = v11;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v4 = 1.1;
  }
  *v3 = v4;
  return result;
}

uint64_t sub_1D5D7B0EC(double a1)
{
  return sub_1D5D86F60(0xD00000000000001CLL, 0x80000001D5E48D30, a1);
}

uint64_t sub_1D5D7B108(double a1)
{
  return sub_1D5D7AF2C(0xD00000000000001BLL, 0x80000001D5E48D50, a1);
}

uint64_t sub_1D5D7B124(double a1)
{
  return sub_1D5D7AF2C(0xD00000000000001BLL, 0x80000001D5E48D70, a1);
}

uint64_t sub_1D5D7B140(double a1)
{
  return sub_1D5D86A68(0xD00000000000001ALL, 0x80000001D5E48D10, a1);
}

uint64_t sub_1D5D7B15C(double a1)
{
  return sub_1D5D7AF2C(0xD000000000000019, 0x80000001D5E48CF0, a1);
}

uint64_t sub_1D5D7B178(double a1)
{
  return sub_1D5D7AF2C(0xD000000000000016, 0x80000001D5E48D90, a1);
}

double sub_1D5D7B194@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  double result;

  sub_1D5D89EF8(a3);
  sub_1D5D89F14(a4);
  sub_1D5D89D48(a1);
  sub_1D5D89D10(a5);
  sub_1D5D89D2C(a6);
  sub_1D5D89CF4(a7);
  result = a7;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(_QWORD *)(a2 + 16) = a1;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  return result;
}

unint64_t sub_1D5D7B270()
{
  unint64_t result;

  result = qword_1ED9AF5F8;
  if (!qword_1ED9AF5F8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED9AF5F8);
  }
  return result;
}

double sub_1D5D7B2AC@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;

  if (qword_1ED9ADA20 != -1)
    swift_once();
  result = *(double *)&qword_1ED9AE660;
  v3 = xmmword_1ED9AE650;
  *(_OWORD *)a1 = xmmword_1ED9AE640;
  *(_OWORD *)(a1 + 16) = v3;
  *(double *)(a1 + 32) = result;
  return result;
}

void sub_1D5D7B308()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED9AF6A0)
  {
    sub_1D5E37368();
    v0 = sub_1D5E37614();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED9AF6A0);
  }
}

uint64_t sub_1D5D7B35C(uint64_t result)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;

  v1 = 0;
  v2 = result + 64;
  v3 = 1 << *(_BYTE *)(result + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(result + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  while (v5)
  {
    v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v8 = v7 | (v1 << 6);
LABEL_5:
    if (*(double *)(*(_QWORD *)(result + 56) + 8 * v8) < 0.0)
      return 0;
  }
  v9 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v9 >= v6)
    return 1;
  v10 = *(_QWORD *)(v2 + 8 * v9);
  ++v1;
  if (v10)
    goto LABEL_22;
  v1 = v9 + 1;
  if (v9 + 1 >= v6)
    return 1;
  v10 = *(_QWORD *)(v2 + 8 * v1);
  if (v10)
    goto LABEL_22;
  v1 = v9 + 2;
  if (v9 + 2 >= v6)
    return 1;
  v10 = *(_QWORD *)(v2 + 8 * v1);
  if (v10)
    goto LABEL_22;
  v1 = v9 + 3;
  if (v9 + 3 >= v6)
    return 1;
  v10 = *(_QWORD *)(v2 + 8 * v1);
  if (v10)
  {
LABEL_22:
    v5 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v1 << 6);
    goto LABEL_5;
  }
  v11 = v9 + 4;
  if (v11 >= v6)
    return 1;
  v10 = *(_QWORD *)(v2 + 8 * v11);
  if (v10)
  {
    v1 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    v1 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v1 >= v6)
      return 1;
    v10 = *(_QWORD *)(v2 + 8 * v1);
    ++v11;
    if (v10)
      goto LABEL_22;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1D5D7B47C(uint64_t result)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;

  v1 = 0;
  v2 = result + 64;
  v3 = 1 << *(_BYTE *)(result + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(result + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  while (v5)
  {
    v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v8 = v7 | (v1 << 6);
LABEL_5:
    if ((*(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v8) & 0x8000000000000000) != 0)
      return 0;
  }
  v9 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v9 >= v6)
    return 1;
  v10 = *(_QWORD *)(v2 + 8 * v9);
  ++v1;
  if (v10)
    goto LABEL_22;
  v1 = v9 + 1;
  if (v9 + 1 >= v6)
    return 1;
  v10 = *(_QWORD *)(v2 + 8 * v1);
  if (v10)
    goto LABEL_22;
  v1 = v9 + 2;
  if (v9 + 2 >= v6)
    return 1;
  v10 = *(_QWORD *)(v2 + 8 * v1);
  if (v10)
    goto LABEL_22;
  v1 = v9 + 3;
  if (v9 + 3 >= v6)
    return 1;
  v10 = *(_QWORD *)(v2 + 8 * v1);
  if (v10)
  {
LABEL_22:
    v5 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v1 << 6);
    goto LABEL_5;
  }
  v11 = v9 + 4;
  if (v11 >= v6)
    return 1;
  v10 = *(_QWORD *)(v2 + 8 * v11);
  if (v10)
  {
    v1 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    v1 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v1 >= v6)
      return 1;
    v10 = *(_QWORD *)(v2 + 8 * v1);
    ++v11;
    if (v10)
      goto LABEL_22;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1D5D7B598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a4 + 8) + 40))(a3, *(_QWORD *)(a4 + 8));
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF7A0);
  v4 = sub_1D5E376EC();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1D5D7B640()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1D5D7B66C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 1684627824;
  else
    v2 = 1701147238;
  if ((a2 & 1) != 0)
    v3 = 1684627824;
  else
    v3 = 1701147238;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_1D5E378FC();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_1D5D7B6D8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1D5D7B7B4(&qword_1ED9AF6B8, (uint64_t (*)(uint64_t))type metadata accessor for ClassicArticleData, (uint64_t)&protocol conformance descriptor for ClassicArticleData);
  result = sub_1D5D7B7B4(&qword_1ED9AF6A8, (uint64_t (*)(uint64_t))type metadata accessor for ClassicArticleData, (uint64_t)&protocol conformance descriptor for ClassicArticleData);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1D5D7B734(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1D827D8E0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D5D7B774(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1D827D8E0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D5D7B7B4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1D827D8E0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ClassicAggregateContextType.lookupBaseline(with:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  char v19;
  __int128 v20;

  v8 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1D5E37614();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v18 - v13;
  v18 = *a1;
  v19 = 0;
  sub_1D5D8ACD0((uint64_t)&v18, a2, a3, (uint64_t (**)())&v20);
  v15 = v20;
  v18 = v20;
  AggregateContextType.lookup(identifier:option:)(12390, 0xE200000000000000, (uint64_t *)&v18, a2, v8);
  sub_1D5D8B00C(v15);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, AssociatedTypeWitness) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a4, v14, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  result = sub_1D5E376E0();
  __break(1u);
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1D827D88C](a1, v6, a5);
}

uint64_t sub_1D5D7B9B8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1D5D7BA38(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;

  v3 = swift_bridgeObjectRetain();
  v4 = sub_1D5D7B47C(v3);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0
    && (v5 = swift_bridgeObjectRetain(), v6 = sub_1D5D7B35C(v5), swift_bridgeObjectRelease(), (v6 & 1) != 0))
  {
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v15 = v1;
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v8 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1D5E38580;
    v10 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5798);
    sub_1D5E376B0();
    v11 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
    v12 = sub_1D5D889BC();
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0xE000000000000000;
    *(_QWORD *)(v9 + 96) = v11;
    *(_QWORD *)(v9 + 104) = v12;
    *(_QWORD *)(v9 + 64) = v12;
    *(_QWORD *)(v9 + 72) = 0xD000000000000021;
    *(_QWORD *)(v9 + 80) = 0x80000001D5E49C10;
    *(_QWORD *)(v9 + 136) = v11;
    *(_QWORD *)(v9 + 144) = v12;
    *(_QWORD *)(v9 + 112) = 0xD000000000000017;
    *(_QWORD *)(v9 + 120) = 0x80000001D5E49C40;
    v13 = MEMORY[0x1E0DEE9D8];
    sub_1D5DC8324(MEMORY[0x1E0DEE9D8]);
    sub_1D5E376B0();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v9 + 176) = v11;
    *(_QWORD *)(v9 + 184) = v12;
    *(_QWORD *)(v9 + 152) = 0;
    *(_QWORD *)(v9 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v14 = sub_1D5DC8324(v13);
    v1 = v15;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    a1 = v14;
  }
  *v1 = a1;
  return result;
}

uint64_t ClassicArticleData.articleID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

double sub_1D5D7BCA0()
{
  uint64_t v0;

  swift_beginAccess();
  return *(double *)(v0 + 128);
}

double sub_1D5D7BCD0()
{
  uint64_t v0;

  swift_beginAccess();
  return *(double *)(v0 + 304);
}

uint64_t sub_1D5D7BD00()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    sub_1D5E37434();

  }
  sub_1D5D7B270();
  result = sub_1D5E37608();
  qword_1ED9AF898 = result;
  return result;
}

uint64_t AggregateContextType.lookup(identifier:option:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;

  v10 = *a3;
  v9 = a3[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF868);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D5E38280;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  swift_bridgeObjectRetain();
  v12 = sub_1D5D81DA4(inited);
  swift_setDeallocating();
  v13 = MEMORY[0x1E0DEA968];
  swift_arrayDestroy();
  v17 = v10;
  v18 = v9;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a5 + 48))(v12, &v17, a4, a5);
  swift_bridgeObjectRelease();
  v17 = a1;
  v18 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x1D827CFA4](&v17, v14, v13, AssociatedTypeWitness, MEMORY[0x1E0DEA978]);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5D7BF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v31;
  _OWORD v32[4];
  uint64_t v33;
  _OWORD v34[5];
  _OWORD v35[2];

  v13 = *(_OWORD *)(a5 + 80);
  v34[4] = *(_OWORD *)(a5 + 64);
  v35[0] = v13;
  *(_DWORD *)((char *)v35 + 15) = *(_DWORD *)(a5 + 95);
  v14 = *(_OWORD *)(a5 + 16);
  v34[0] = *(_OWORD *)a5;
  v34[1] = v14;
  v15 = *(_OWORD *)(a5 + 48);
  v34[2] = *(_OWORD *)(a5 + 32);
  v34[3] = v15;
  v16 = *a6;
  v17 = a6[1];
  v18 = a6[2];
  v19 = a6[3];
  v33 = *((_QWORD *)a6 + 8);
  v32[2] = v18;
  v32[3] = v19;
  v32[0] = v16;
  v32[1] = v17;
  v20 = *a8;
  v21 = swift_allocObject();
  v22 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v21 + 16) = MEMORY[0x1E0DEE9E0];
  v31 = v22;
  v23 = *(_QWORD *)(a1 + 16);
  if (v23)
  {
    v24 = *(_QWORD *)(type metadata accessor for ClassicArticleData() - 8);
    v25 = a1 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
    v26 = *(_QWORD *)(v24 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1D5D7D1A8(&v31, v25, v21, (uint64_t)v32, a7, v20, a2, a3, a4, (uint64_t)v34, a9, a10, a11);
      v25 += v26;
      --v23;
    }
    while (v23);
    swift_release();
    swift_bridgeObjectRelease();
    return v31;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E0DEE9E0];
  }
}

uint64_t ClassicArticleData.init(adCategories:articleID:articleLength:halfLife:halfLifeOverride:hasVideo:isANF:isPaid:isBundlePaid:publishDate:publisherID:sourceFeedID:topicIDs:cohorts:conversionData:isAudio:featured:isFeatureCandidate:isEvergreen:tagMetadata:reduceVisibility:webConverted:conditionalScore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,char a24,char a25,char a26,uint64_t a27,char a28,char a29)
{
  int *v31;
  uint64_t result;
  _QWORD *v33;
  _QWORD *v34;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_BYTE *)(a9 + 32) = a5 & 1;
  *(double *)(a9 + 40) = a10;
  *(_QWORD *)(a9 + 48) = a6;
  *(_BYTE *)(a9 + 56) = a7 & 1;
  *(_BYTE *)(a9 + 57) = a8;
  *(_BYTE *)(a9 + 58) = a12;
  *(_BYTE *)(a9 + 59) = a13;
  *(_BYTE *)(a9 + 60) = a14;
  v31 = (int *)type metadata accessor for ClassicArticleData();
  result = sub_1D5D7C21C(a15, a9 + v31[13]);
  v33 = (_QWORD *)(a9 + v31[14]);
  *v33 = a16;
  v33[1] = a17;
  v34 = (_QWORD *)(a9 + v31[15]);
  *v34 = a18;
  v34[1] = a19;
  *(_QWORD *)(a9 + v31[16]) = a20;
  *(_QWORD *)(a9 + v31[17]) = a21;
  *(_QWORD *)(a9 + v31[18]) = a22;
  *(_BYTE *)(a9 + v31[19]) = a23;
  *(_BYTE *)(a9 + v31[20]) = a24;
  *(_BYTE *)(a9 + v31[21]) = a25;
  *(_BYTE *)(a9 + v31[22]) = a26;
  *(_QWORD *)(a9 + v31[23]) = a27;
  *(_BYTE *)(a9 + v31[24]) = a28;
  *(_BYTE *)(a9 + v31[25]) = a29;
  *(double *)(a9 + v31[26]) = a11;
  return result;
}

uint64_t sub_1D5D7C21C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D5D7C264()
{
  sub_1D5D7C284();
  return swift_deallocClassInstance();
}

uint64_t sub_1D5D7C284()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1D5D7C2D0()
{
  sub_1D5E379A4();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D7C330()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1D5D7C36C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D5D7C380(a1, a2);
}

uint64_t sub_1D5D7C380@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char v18;
  double v19;
  char v20;
  double v21;
  char v22;
  char v23;
  double v24;
  char v25;
  char v27;
  uint64_t v28;
  double v30;
  double v31;
  __int128 v32[2];
  uint64_t v33;
  _QWORD v34[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF520);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5E379D4();
  if (v2)
  {

    v33 = 0;
    memset(v32, 0, sizeof(v32));
    sub_1D5DEDCD0((uint64_t)v32);
LABEL_4:
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1D5DEDC8C();
    sub_1D5E379E0();
    if (qword_1ED9ADA20 != -1)
      swift_once();
    v11 = *((double *)&xmmword_1ED9AE640 + 1);
    v12 = *((double *)&xmmword_1ED9AE650 + 1);
    v14 = *(double *)&xmmword_1ED9AE650;
    v13 = *(double *)&qword_1ED9AE660;
    LOBYTE(v34[0]) = 0;
    sub_1D5E377B8();
    v16 = v15;
    LOBYTE(v34[0]) = 1;
    v17 = COERCE_DOUBLE(sub_1D5E37758());
    if ((v18 & 1) == 0)
      v11 = v17;
    LOBYTE(v34[0]) = 2;
    v19 = COERCE_DOUBLE(sub_1D5E37758());
    if ((v20 & 1) == 0)
      v14 = v19;
    LOBYTE(v34[0]) = 3;
    v21 = COERCE_DOUBLE(sub_1D5E37758());
    v23 = v22;
    LOBYTE(v34[0]) = 4;
    v24 = COERCE_DOUBLE(sub_1D5E37758());
    if ((v23 & 1) != 0)
      v30 = v12;
    else
      v30 = v21;
    if ((v25 & 1) != 0)
      v31 = v13;
    else
      v31 = v24;
    *(double *)v34 = v16;
    sub_1D5D7C738(v16);
    v28 = v34[0];
    if (v30 <= v31)
    {
      v13 = v31;
      v12 = v30;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    goto LABEL_21;
  }
  sub_1D5DEDD10(v32, (uint64_t)v34);
  __swift_project_boxed_opaque_existential_1(v34, v34[3]);
  v9 = sub_1D5E37908();
  if (v9 == 0x797469746E656469 && v10 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      goto LABEL_4;
    }
  }
  if (qword_1ED9ADA20 != -1)
    swift_once();
  v11 = *((double *)&xmmword_1ED9AE640 + 1);
  v28 = xmmword_1ED9AE640;
  v12 = *((double *)&xmmword_1ED9AE650 + 1);
  v14 = *(double *)&xmmword_1ED9AE650;
  v13 = *(double *)&qword_1ED9AE660;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
LABEL_21:
  *(_QWORD *)a2 = v28;
  *(double *)(a2 + 8) = v11;
  *(double *)(a2 + 16) = v14;
  *(double *)(a2 + 24) = v12;
  *(double *)(a2 + 32) = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5D7C738(double a1)
{
  return sub_1D5D868AC(0x41746C7561666544, 0xEC0000006168706CLL, a1);
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D827D8C8]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t _s7FeatureOwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_1D5D801B0(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t sub_1D5D7C8C8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  int v49;
  char v50;
  int v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF690);
  v42 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v40 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v38 = v2;
  v39 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_33;
      v24 = v40[v13];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v39)
              goto LABEL_33;
            v24 = v40[v13];
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 80 * v21;
    v34 = *(_QWORD *)v33;
    v35 = *(_BYTE *)(v33 + 8);
    v36 = *(_QWORD *)(v33 + 16);
    v56 = *(_BYTE *)(v33 + 24);
    v55 = *(_QWORD *)(v33 + 32);
    v54 = *(_BYTE *)(v33 + 40);
    v53 = *(_QWORD *)(v33 + 48);
    v51 = *(_DWORD *)(v33 + 60);
    v52 = *(_BYTE *)(v33 + 56);
    v49 = *(_DWORD *)(v33 + 68);
    v50 = *(_BYTE *)(v33 + 64);
    v47 = *(_BYTE *)(v33 + 73);
    v48 = *(_BYTE *)(v33 + 72);
    v45 = *(_BYTE *)(v33 + 75);
    v46 = *(_BYTE *)(v33 + 74);
    v43 = *(_BYTE *)(v33 + 77);
    v44 = *(_BYTE *)(v33 + 76);
    if ((v42 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1D5E379A4();
    sub_1D5E3744C();
    result = sub_1D5E379C8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 80 * v17;
    *(_QWORD *)v19 = v34;
    *(_BYTE *)(v19 + 8) = v35;
    *(_QWORD *)(v19 + 16) = v36;
    *(_BYTE *)(v19 + 24) = v56;
    *(_QWORD *)(v19 + 32) = v55;
    *(_BYTE *)(v19 + 40) = v54;
    *(_QWORD *)(v19 + 48) = v53;
    *(_BYTE *)(v19 + 56) = v52;
    *(_DWORD *)(v19 + 60) = v51;
    *(_BYTE *)(v19 + 64) = v50;
    *(_DWORD *)(v19 + 68) = v49;
    *(_BYTE *)(v19 + 72) = v48;
    *(_BYTE *)(v19 + 73) = v47;
    *(_BYTE *)(v19 + 74) = v46;
    *(_BYTE *)(v19 + 75) = v45;
    *(_BYTE *)(v19 + 76) = v44;
    *(_BYTE *)(v19 + 77) = v43;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D7CCC8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for ClassicArticleData();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1D5D7CE24(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_release();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1D5D996C0();
    goto LABEL_7;
  }
  sub_1D5D84EE8(v17, a3 & 1);
  v23 = sub_1D5D7CE24(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = sub_1D5E3795C();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_1D5D8197C(a2, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClassicArticleData);
  return sub_1D5D7D110(v14, (uint64_t)v11, a1, v20);
}

unint64_t sub_1D5D7CE24(uint64_t a1)
{
  uint64_t v2;

  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  v2 = sub_1D5E379C8();
  return sub_1D5D7CE94(a1, v2);
}

unint64_t sub_1D5D7CE94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v17;

  v5 = type metadata accessor for ClassicArticleData();
  MEMORY[0x1E0C80A78](v5, v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v2 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v2 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_1D5D8197C(*(_QWORD *)(v2 + 48) + v13 * v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ClassicArticleData);
      if (*((_QWORD *)v9 + 1) == *(_QWORD *)(a1 + 8) && *((_QWORD *)v9 + 2) == *(_QWORD *)(a1 + 16))
        break;
      v15 = sub_1D5E378FC();
      sub_1D5D7CFCC((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ClassicArticleData);
      if ((v15 & 1) == 0)
      {
        v11 = (v11 + 1) & v12;
        if (((*(_QWORD *)(v2 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          continue;
      }
      return v11;
    }
    sub_1D5D7CFCC((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ClassicArticleData);
  }
  return v11;
}

uint64_t sub_1D5D7CFCC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1D5D7D008(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ClassicArticleData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for ClassicArticleData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 52);
  v5 = sub_1D5E37368();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5D7D110(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for ClassicArticleData();
  result = sub_1D5D8528C(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for ClassicArticleData);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1D5D7D1A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v42[2];
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;

  v37 = type metadata accessor for ClassicArticleData();
  v16 = (uint64_t *)(a2 + *(int *)(v37 + 56));
  v17 = *v16;
  v18 = v16[1];
  v43 = 2831206;
  v44 = 0xE300000000000000;
  sub_1D5E37458();
  v35 = a5;
  v36 = a4;
  swift_bridgeObjectRetain();
  sub_1D5D7DBBC(2831206, 0xE300000000000000, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1D5D84560, a3, (uint64_t)&v43);
  swift_bridgeObjectRelease();
  v19 = *(double *)&v43;
  v20 = v44;
  v21 = v45;
  v22 = MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v42[0] = v22;
  sub_1D5D7D904(v20, v21, v17, v18, isUniquelyReferenced_nonNull_native, v19);
  v24 = v18;
  v25 = v42[0];
  v46 = v42[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(*(_QWORD *)(a2 + *(int *)(v37 + 64)) + 16);
  if (v26)
  {
    v27 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      v28 = *v27;
      v42[0] = *(v27 - 1);
      v42[1] = v28;
      swift_bridgeObjectRetain();
      sub_1D5D7D450(v42, a11, a10, v17, v24, a7, &v46, a3, v36, v35, a6, a2, a8, a9, a12, a13);
      swift_bridgeObjectRelease();
      v27 += 2;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    v25 = v46;
    v29 = a1;
  }
  else
  {
    v29 = a1;
  }
  v30 = *(_QWORD *)(a2 + 8);
  v31 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32 = swift_isUniquelyReferenced_nonNull_native();
  v43 = *v29;
  *v29 = 0x8000000000000000;
  sub_1D5D7EAA0(v25, v30, v31, v32);
  *v29 = v43;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5D7D450(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  char v39;
  char isUniquelyReferenced_nonNull_native;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 v49;

  v20 = *a1;
  v19 = a1[1];
  *(_QWORD *)&v44 = 2831206;
  *((_QWORD *)&v44 + 1) = 0xE300000000000000;
  sub_1D5E37458();
  v49 = v44;
  v21 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (!v21)
    goto LABEL_7;
  swift_bridgeObjectRetain();
  sub_1D5D7FFCC(v20, v19);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    v24 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v44 = 2831206;
  *((_QWORD *)&v44 + 1) = 0xE300000000000000;
  sub_1D5E37458();
  swift_bridgeObjectRelease();
  v23 = v44;
  v24 = sub_1D5D7DABC(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v26 = *((_QWORD *)v24 + 2);
  v25 = *((_QWORD *)v24 + 3);
  if (v26 >= v25 >> 1)
    v24 = sub_1D5D7DABC((char *)(v25 > 1), v26 + 1, 1, v24);
  *((_QWORD *)v24 + 2) = v26 + 1;
  *(_OWORD *)&v24[16 * v26 + 32] = v23;
LABEL_8:
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v24 = sub_1D5D7DABC(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
  v28 = *((_QWORD *)v24 + 2);
  v27 = *((_QWORD *)v24 + 3);
  if (v28 >= v27 >> 1)
    v24 = sub_1D5D7DABC((char *)(v27 > 1), v28 + 1, 1, v24);
  v29 = a16;
  v30 = a10;
  *((_QWORD *)v24 + 2) = v28 + 1;
  v31 = &v24[16 * v28];
  *((_QWORD *)v31 + 4) = 2831206;
  *((_QWORD *)v31 + 5) = 0xE300000000000000;
  v48 = v24;
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
  {
    *(_QWORD *)&v44 = 2831462;
    *((_QWORD *)&v44 + 1) = 0xE300000000000000;
    sub_1D5E37458();
    sub_1D5E37458();
    sub_1D5E37458();
    v32 = v44;
    v34 = *((_QWORD *)v24 + 2);
    v33 = *((_QWORD *)v24 + 3);
    swift_bridgeObjectRetain();
    if (v34 >= v33 >> 1)
      v24 = sub_1D5D7DABC((char *)(v33 > 1), v34 + 1, 1, v24);
    *((_QWORD *)v24 + 2) = v34 + 1;
    *(_OWORD *)&v24[16 * v34 + 32] = v32;
    v48 = v24;
    if (*(_QWORD *)(a6 + 16))
    {
      swift_bridgeObjectRetain();
      v35 = sub_1D5D7FFCC(v32, *((uint64_t *)&v32 + 1));
      if ((v36 & 1) != 0)
      {
        sub_1D5D85BBC(*(_QWORD *)(a6 + 56) + 40 * v35, (uint64_t)&v44);
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v45 + 1))
        {
          sub_1D5E274A0((uint64_t)&v44, qword_1ED9AF7A8);
          swift_bridgeObjectRelease();
          v49 = v32;
LABEL_23:
          v30 = a10;
          v29 = a16;
          goto LABEL_24;
        }
      }
      else
      {
        v46 = 0;
        v44 = 0u;
        v45 = 0u;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v46 = 0;
      v44 = 0u;
      v45 = 0u;
      swift_bridgeObjectRelease();
    }
    sub_1D5E274A0((uint64_t)&v44, qword_1ED9AF7A8);
    goto LABEL_23;
  }
LABEL_24:
  v37 = v49;
  MEMORY[0x1E0C80A78](v30, v29);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D5D7DBBC(v37, *((uint64_t *)&v37 + 1), (void (*)(_QWORD *__return_ptr, uint64_t))sub_1D5D7DD28, a8, (uint64_t)&v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38 = v44;
  v39 = v45;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v47 = *a7;
  *a7 = 0x8000000000000000;
  sub_1D5D7D904(*((uint64_t *)&v38 + 1), v39, v20, v19, isUniquelyReferenced_nonNull_native, *(double *)&v38);
  *a7 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5D7D904(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, double a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  char v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = sub_1D5D7FFCC(a3, a4);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_13;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= result && (a5 & 1) != 0)
    goto LABEL_9;
  if (v21 >= result && (a5 & 1) == 0)
  {
    result = (uint64_t)sub_1D5D99AC0();
    goto LABEL_9;
  }
  sub_1D5D7E608(result, a5 & 1);
  result = sub_1D5D7FFCC(a3, a4);
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_13:
    result = sub_1D5E3795C();
    __break(1u);
    return result;
  }
  v16 = result;
LABEL_9:
  v23 = a2 & 1;
  v24 = *v7;
  if ((v20 & 1) != 0)
  {
    v25 = v24[7] + 24 * v16;
    *(double *)v25 = a6;
    *(_QWORD *)(v25 + 8) = a1;
    *(_BYTE *)(v25 + 16) = v23 != 0;
  }
  else
  {
    sub_1D5D7DA60(v16, a3, a4, a1, v23, v24, a6);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1D5D7DA60(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6, double a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a6[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a6[6] + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = a6[7] + 24 * result;
  *(double *)v8 = a7;
  *(_QWORD *)(v8 + 8) = a4;
  *(_BYTE *)(v8 + 16) = a5 & 1;
  v9 = a6[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a6[2] = v11;
  return result;
}

char *sub_1D5D7DABC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF868);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1D5D7DBBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  _QWORD v22[2];
  char v23;

  v10 = (uint64_t *)(a4 + 16);
  swift_beginAccess();
  v11 = *(_QWORD *)(a4 + 16);
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v12 = sub_1D5D7FFCC(a1, a2);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    v19 = swift_endAccess();
    a3(v22, v19);
    v15 = *(double *)v22;
    v16 = v22[1];
    v17 = v23;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v10;
    *v10 = 0x8000000000000000;
    sub_1D5D7D904(v16, v17, a1, a2, isUniquelyReferenced_nonNull_native, v15);
    *v10 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_endAccess();
    goto LABEL_6;
  }
  v14 = *(_QWORD *)(v11 + 56) + 24 * v12;
  v15 = *(double *)v14;
  v16 = *(_QWORD *)(v14 + 8);
  v17 = *(_BYTE *)(v14 + 16);
  swift_endAccess();
  result = swift_bridgeObjectRelease();
LABEL_6:
  *(double *)a5 = v15;
  *(_QWORD *)(a5 + 8) = v16;
  *(_BYTE *)(a5 + 16) = v17;
  return result;
}

uint64_t sub_1D5D7DD28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1D5D7DD70(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), a1, *(Swift::Double *)(v1 + 144), *(_QWORD *)(v1 + 96), *(uint64_t **)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD **)(v1 + 120), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136));
}

uint64_t sub_1D5D7DD70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, Swift::Double a10@<D0>, uint64_t a11, uint64_t *a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  char v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t result;
  uint64_t v34;
  _OWORD v35[4];
  uint64_t v36;

  if (*a3 == a4 && a3[1] == a5)
    v23 = 0;
  else
    v23 = sub_1D5E378FC() ^ 1;
  v24 = *(_OWORD *)(a6 + 48);
  v35[2] = *(_OWORD *)(a6 + 32);
  v35[3] = v24;
  v36 = *(_QWORD *)(a6 + 64);
  v25 = *(_OWORD *)(a6 + 16);
  v35[0] = *(_OWORD *)a6;
  v35[1] = v25;
  v34 = a8;
  v26 = type metadata accessor for ClassicArticleData();
  v27 = sub_1D5D7E4F4(a1, a2, 0, v23 & 1, (uint64_t)v35, a7, &v34, *(_QWORD *)(a11 + *(int *)(v26 + 92)));
  v28 = *a12;
  swift_bridgeObjectRetain();
  v29 = sub_1D5D7DF0C(a1, a2, v28, a13, a14, a15, a16, a10);
  v31 = v30;
  result = swift_bridgeObjectRelease();
  *(double *)a9 = v27;
  *(_QWORD *)(a9 + 8) = v29;
  *(_BYTE *)(a9 + 16) = v31 & 1;
  return result;
}

uint64_t type metadata accessor for ClassicArticleData()
{
  uint64_t result;

  result = qword_1ED9AF600;
  if (!qword_1ED9AF600)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D5D7DF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, Swift::Double a8)
{
  double v15;
  long double v16;
  long double v17;
  long double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  int v35;
  int v36;

  v15 = *(double *)a7;
  v16 = *(double *)(a7 + 32);
  v17 = *(double *)(a7 + 72);
  v18 = *(double *)(a7 + 80);
  v19 = *(double *)(a7 + 88);
  v35 = *(unsigned __int8 *)(a7 + 97);
  v36 = *(unsigned __int8 *)(a7 + 98);
  v20 = a5[3];
  v21 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, v20);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 24))(v20, v21);
  LOBYTE(v20) = sub_1D5D7E22C(a1, a2, v22);
  swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    return 0;
  swift_bridgeObjectRetain();
  v24 = sub_1D5D7E360(a3, a4);
  swift_bridgeObjectRelease();
  if (!v24[2])
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  ReadonlyAggregateType.personalizationValue.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
  v28 = v27;
  if (!v36)
  {
    v30 = sub_1D5D8E6D4(a6, (uint64_t)v24, AssociatedTypeWitness, AssociatedConformanceWitness, a8);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v29 = sub_1D5D8E664(a6, (uint64_t)v24, AssociatedTypeWitness, AssociatedConformanceWitness, a8);
  swift_bridgeObjectRelease();
  v30 = v28 + v29;
  if (v30 > 0.0)
  {
    if (v30 > 1.0)
    {
      if (v28 < 1.0)
      {
        v30 = 1.0;
        if (v28 != 1.0)
          goto LABEL_20;
        goto LABEL_26;
      }
      if (v28 == 0.0)
        goto LABEL_26;
      v30 = 1.0;
LABEL_25:
      v15 = v15 * pow(v30 / v28, v18);
      goto LABEL_26;
    }
LABEL_12:
    if (v30 > v28)
    {
      if (v28 != 1.0)
        goto LABEL_20;
      goto LABEL_26;
    }
    if (v28 == 0.0)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (v28 >= 0.0)
  {
    if (v28 == 0.0)
      goto LABEL_26;
    v30 = 0.0;
    goto LABEL_25;
  }
  if (v28 != 1.0)
  {
    v30 = 0.0;
LABEL_20:
    v15 = 1.0 - (1.0 - v15) * pow((1.0 - v30) / (1.0 - v28), v17);
  }
LABEL_26:
  v31 = a5[3];
  v32 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, v31);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
  v34 = sub_1D5D7E22C(a1, a2, v33);
  swift_bridgeObjectRelease();
  if ((v34 & 1) != 0)
  {
    if (v35)
      v15 = 1.0 - pow(1.0 - v15, v16);
    else
      v15 = v19 + (1.0 - v19) * v15;
  }
  return *(_QWORD *)&v15;
}

uint64_t sub_1D5D7E22C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_1D5E379A4();
    sub_1D5E3744C();
    v6 = sub_1D5E379C8();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1D5E378FC() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1D5E378FC() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

_QWORD *sub_1D5D7E360(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v4 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    if (!*(_QWORD *)(a2 + 16))
    {
      v15 = 0;
      v13 = 0u;
      v14 = 0u;
LABEL_4:
      sub_1D5E274A0((uint64_t)&v13, qword_1ED9AF7A8);
      goto LABEL_5;
    }
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = sub_1D5D7FFCC(v6, v7);
    if ((v9 & 1) != 0)
    {
      sub_1D5D85BBC(*(_QWORD *)(a2 + 56) + 40 * v8, (uint64_t)&v13);
    }
    else
    {
      v15 = 0;
      v13 = 0u;
      v14 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v14 + 1))
      goto LABEL_4;
    sub_1D5E274DC(&v13, (uint64_t)v16);
    sub_1D5E274DC(v16, (uint64_t)&v13);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_1D5DAB3A0(0, v5[2] + 1, 1, v5);
    v11 = v5[2];
    v10 = v5[3];
    if (v11 >= v10 >> 1)
      v5 = sub_1D5DAB3A0((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
    v5[2] = v11 + 1;
    sub_1D5E274DC(&v13, (uint64_t)&v5[5 * v11 + 4]);
LABEL_5:
    v4 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

double sub_1D5D7E4F4(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  double v8;
  uint64_t v13;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;

  if ((a3 & 1) != 0)
    return *(double *)(a5 + 56);
  v13 = *a7;
  if (*(_QWORD *)(a6 + 16))
  {
    swift_bridgeObjectRetain();
    v15 = sub_1D5D7FFCC(a1, a2);
    if ((v16 & 1) != 0)
    {
      v17 = 48;
      if ((a4 & 1) != 0)
        v17 = 24;
      v8 = *(double *)(*(_QWORD *)(a6 + 56) + (v15 << 6) + v17);
      goto LABEL_15;
    }
    swift_bridgeObjectRelease();
  }
  v8 = 1.0;
  if (!*(_QWORD *)(a8 + 16))
    return v8;
  swift_bridgeObjectRetain();
  v18 = sub_1D5D7FFCC(a1, a2);
  if ((v19 & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v8;
  }
  v20 = *(_QWORD *)(a8 + 56) + 80 * v18;
  v21 = *(_QWORD *)(v20 + 48);
  v22 = *(_BYTE *)(v20 + 56);
  swift_bridgeObjectRelease();
  if ((v22 & 1) == 0)
  {
    if (*(_QWORD *)(v13 + 16))
    {
      v23 = sub_1D5D979D0(v21);
      if ((v24 & 1) != 0)
        return *(double *)(*(_QWORD *)(v13 + 56) + 8 * v23);
    }
  }
  return v8;
}

uint64_t sub_1D5D7E608(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF848);
  v39 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v39 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v33 = *(_QWORD *)v32;
      v34 = *(_QWORD *)(v32 + 8);
      v35 = *(_BYTE *)(v32 + 16);
      if ((v39 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_1D5E379A4();
      sub_1D5E3744C();
      result = sub_1D5E379C8();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
      *(_QWORD *)v19 = v33;
      *(_QWORD *)(v19 + 8) = v34;
      *(_BYTE *)(v19 + 16) = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D7E92C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v7 = v5;
  v12 = *v5;
  v14 = sub_1D5D7FFCC(a2, a3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1D5D99C88(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a2;
    v25[1] = a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1D5D84BD8(v17, a4 & 1, a5);
  v23 = sub_1D5D7FFCC(a2, a3);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1D5E3795C();
  __break(1u);
  return result;
}

uint64_t sub_1D5D7EAA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1D5D7E92C(a1, a2, a3, a4, &qword_1ED9AF850);
}

uint64_t sub_1D5D7EAAC(void (*a1)(_QWORD *, _QWORD *), double a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t i;
  BOOL v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v29;
  int64_t v30;
  _QWORD v31[6];
  char v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;

  *(double *)v34 = a2;
  *(double *)&v34[1] = a3;
  v25 = a5 + 64;
  v5 = 1 << *(_BYTE *)(a5 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a5 + 64);
  v26 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v29 = (v7 - 1) & v7;
  v30 = v9;
  for (i = __clz(__rbit64(v7)) | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v12 << 6))
  {
    v15 = *(_QWORD *)(a5 + 48) + 56 * i;
    v16 = *(_QWORD *)v15;
    v17 = *(_QWORD *)(v15 + 8);
    v18 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    v21 = *(_QWORD *)(v15 + 32);
    v20 = *(_QWORD *)(v15 + 40);
    v22 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * i);
    v23 = *(_BYTE *)(v15 + 48);
    v31[0] = v16;
    v31[1] = v17;
    v31[2] = v18;
    v31[3] = v19;
    v31[4] = v21;
    v31[5] = v20;
    v32 = v23;
    v33 = v22;
    sub_1D5D801B0(v16, v17, v18, v19, v21, v20, v23);
    v24 = v35;
    a1(v34, v31);
    result = sub_1D5D8014C(v16, v17, v18, v19, v21, v20, v23);
    v35 = v24;
    if (v24)
      return swift_release();
    v7 = v29;
    v9 = v30;
    if (v29)
      goto LABEL_4;
LABEL_5:
    v11 = __OFADD__(v9, 1);
    v12 = v9 + 1;
    if (v11)
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v26)
      return swift_release();
    v13 = *(_QWORD *)(v25 + 8 * v12);
    if (!v13)
      break;
LABEL_17:
    v29 = (v13 - 1) & v13;
    v30 = v12;
  }
  v14 = v12 + 1;
  if (v12 + 1 >= v26)
    return swift_release();
  v13 = *(_QWORD *)(v25 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v12 + 2;
  if (v12 + 2 >= v26)
    return swift_release();
  v13 = *(_QWORD *)(v25 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v12 + 3;
  if (v12 + 3 >= v26)
    return swift_release();
  v13 = *(_QWORD *)(v25 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v12 + 4;
  if (v12 + 4 >= v26)
    return swift_release();
  v13 = *(_QWORD *)(v25 + 8 * v14);
  if (v13)
  {
LABEL_16:
    v12 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    v12 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v12 >= v26)
      return swift_release();
    v13 = *(_QWORD *)(v25 + 8 * v12);
    ++v14;
    if (v13)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1D5D7ED04(double *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1D5D7ED28(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(Swift::Double *)(v2 + 56));
}

uint64_t sub_1D5D7ED28(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Swift::Double a6)
{
  double v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  double v20;
  uint64_t result;
  double v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[40];
  _BYTE v27[56];
  _QWORD v28[7];

  sub_1D5D7FF90(a2, (uint64_t)v27);
  v12 = *(double *)(a2 + 56);
  sub_1D5D7FF90((uint64_t)v27, (uint64_t)v28);
  if (*(_QWORD *)(a3 + 16))
  {
    v13 = v28[0];
    v14 = v28[1];
    swift_bridgeObjectRetain();
    v15 = sub_1D5D7FFCC(v13, v14);
    if ((v16 & 1) != 0)
    {
      sub_1D5D85BBC(*(_QWORD *)(a3 + 56) + 40 * v15, (uint64_t)&v23);
    }
    else
    {
      v25 = 0;
      v23 = 0u;
      v24 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v24 + 1))
    {
      sub_1D5E274DC(&v23, (uint64_t)v26);
      v17 = sub_1D5E24754((uint64_t)v27, a4, a3, (uint64_t)v26);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v20 = sub_1D5D8E664(a5, v17, AssociatedTypeWitness, AssociatedConformanceWitness, a6);
      swift_bridgeObjectRelease();
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      v22 = v12 + a1[1];
      *a1 = v12 * v20 + *a1;
      a1[1] = v22;
      return result;
    }
  }
  else
  {
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
  }
  result = sub_1D5E274A0((uint64_t)&v23, qword_1ED9AF7A8);
  a1[1] = v12 + a1[1];
  return result;
}

char *sub_1D5D7EEE8(uint64_t a1, char a2, uint64_t a3)
{
  ValueMetadata *v3;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  double v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  _QWORD v92[4];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98[3];
  uint64_t v99;
  unint64_t v100;

  v93 = a3;
  LOBYTE(v3) = a2;
  v5 = 2831206;
  v99 = type metadata accessor for ClassicArticleData();
  v100 = sub_1D5D81BD0();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v98);
  sub_1D5D819C0(a1, (uint64_t)boxed_opaque_existential_1);
  v7 = (char *)MEMORY[0x1E0DEE9D8];
  v97 = (char *)MEMORY[0x1E0DEE9D8];
  v8 = v99;
  v9 = v100;
  __swift_project_boxed_opaque_existential_1(v98, v99);
  v10 = (*(uint64_t (**)(uint64_t, unint64_t))(v9 + 112))(v8, v9);
  v12 = v11;
  v95 = 2831206;
  v96 = 0xE300000000000000;
  sub_1D5E37458();
  v13 = 2831206;
  v14 = 0xE300000000000000;
  v15 = sub_1D5D7F978(0, 1, 1, v7);
  v17 = *((_QWORD *)v15 + 2);
  v16 = *((_QWORD *)v15 + 3);
  v18 = v17 + 1;
  if (v17 >= v16 >> 1)
    goto LABEL_97;
  while (1)
  {
    *((_QWORD *)v15 + 2) = v18;
    v19 = &v15[56 * v17];
    *((_QWORD *)v19 + 4) = v13;
    *((_QWORD *)v19 + 5) = v14;
    *((_QWORD *)v19 + 6) = v10;
    *((_QWORD *)v19 + 7) = v12;
    *((_QWORD *)v19 + 8) = 0;
    *((_QWORD *)v19 + 9) = 0;
    v19[80] = 4;
    v97 = v15;
    if (v3 == 25 || v3 == 5)
    {
      v95 = v5 + 768;
      v96 = 0xE300000000000000;
      sub_1D5E37458();
      swift_bridgeObjectRelease();
      v20 = v95;
      v21 = v96;
      v23 = *((_QWORD *)v15 + 2);
      v22 = *((_QWORD *)v15 + 3);
      if (v23 >= v22 >> 1)
        v15 = sub_1D5D7F978((char *)(v22 > 1), v23 + 1, 1, v15);
      *((_QWORD *)v15 + 2) = v23 + 1;
      v24 = &v15[56 * v23];
      *((_QWORD *)v24 + 4) = v20;
      *((_QWORD *)v24 + 5) = v21;
      *((_OWORD *)v24 + 3) = 0u;
      *((_OWORD *)v24 + 4) = 0u;
      v24[80] = 5;
      v97 = v15;
    }
    v25 = v99;
    v26 = v100;
    v5 = (uint64_t)v98;
    __swift_project_boxed_opaque_existential_1(v98, v99);
    v27 = (*(uint64_t (**)(uint64_t, unint64_t))(v26 + 120))(v25, v26);
    MEMORY[0x1E0C80A78](v27, v28);
    v92[2] = v98;
    v18 = sub_1D5E2C25C((void (*)(uint64_t *__return_ptr, _QWORD *))sub_1D5D7FCB0, (uint64_t)v92, v27);
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v18 + 16);
    v29 = MEMORY[0x1E0DEE9D8];
    if (!v14)
      break;
    swift_bridgeObjectRetain();
    v17 = 0;
    v15 = (char *)MEMORY[0x1E0DEE9D8];
    v13 = 56;
    v3 = &_s7FeatureON;
    while (1)
    {
      v16 = v18 + 8 * v17;
      v10 = *(_QWORD *)(v16 + 32);
      v12 = *(_QWORD *)(v10 + 16);
      v30 = *((_QWORD *)v15 + 2);
      v5 = v30 + v12;
      if (__OFADD__(v30, v12))
        break;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v15 + 3) >> 1)
      {
        v16 = *(_QWORD *)(v10 + 16);
        if (v16)
          goto LABEL_20;
      }
      else
      {
        if (v30 <= v5)
          v32 = v30 + v12;
        else
          v32 = v30;
        v15 = sub_1D5D7F978(isUniquelyReferenced_nonNull_native, v32, 1, v15);
        v16 = *(_QWORD *)(v10 + 16);
        if (v16)
        {
LABEL_20:
          v16 = *((_QWORD *)v15 + 2);
          if ((uint64_t)((*((_QWORD *)v15 + 3) >> 1) - v16) < v12)
            goto LABEL_95;
          swift_arrayInitWithCopy();
          if (v12)
          {
            v33 = *((_QWORD *)v15 + 2);
            v34 = __OFADD__(v33, v12);
            v16 = v33 + v12;
            if (v34)
              goto LABEL_96;
            *((_QWORD *)v15 + 2) = v16;
          }
          goto LABEL_10;
        }
      }
      if (v12)
        goto LABEL_94;
LABEL_10:
      swift_bridgeObjectRelease();
      if (v14 == ++v17)
      {
        swift_bridgeObjectRelease();
        v29 = MEMORY[0x1E0DEE9D8];
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    v15 = sub_1D5D7F978((char *)(v16 > 1), v18, 1, v15);
  }
  v15 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_26:
  swift_bridgeObjectRelease();
  sub_1D5D7FA90((uint64_t)v15);
  v35 = v99;
  v36 = v100;
  __swift_project_boxed_opaque_existential_1(v98, v99);
  v37 = (*(uint64_t (**)(uint64_t, unint64_t))(v36 + 40))(v35, v36);
  if ((v38 & 1) != 0)
    goto LABEL_59;
  v39 = *(double *)(v93 + 16);
  v40 = *(_QWORD *)&v39 & 0x7FF0000000000000;
  if (v37 < 1)
  {
    if (v40 != 0x7FF0000000000000)
      goto LABEL_37;
    __break(1u);
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  if (v40 == 0x7FF0000000000000)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  if (v39 <= -9.22337204e18)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  if (v39 >= 9.22337204e18)
  {
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  if (v37 <= (uint64_t)v39)
  {
    v5 = (uint64_t)v97;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_33;
    goto LABEL_111;
  }
LABEL_37:
  if (v39 <= -9.22337204e18)
    goto LABEL_99;
  if (v39 >= 9.22337204e18)
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v45 = *(double *)(v93 + 8);
  v46 = *(_QWORD *)&v45 & 0x7FF0000000000000;
  if (v37 <= (uint64_t)v39)
  {
    if (v46 != 0x7FF0000000000000)
      goto LABEL_50;
    goto LABEL_104;
  }
  if (v46 == 0x7FF0000000000000)
  {
    __break(1u);
    goto LABEL_109;
  }
  if (v45 <= -9.22337204e18)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  if (v45 < 9.22337204e18)
  {
    if (v37 <= (uint64_t)v45)
    {
      v5 = (uint64_t)v97;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = (uint64_t)sub_1D5D7F978(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
      v48 = *(_QWORD *)(v5 + 16);
      v47 = *(_QWORD *)(v5 + 24);
      if (v48 >= v47 >> 1)
        v5 = (uint64_t)sub_1D5D7F978((char *)(v47 > 1), v48 + 1, 1, (char *)v5);
      *(_QWORD *)(v5 + 16) = v48 + 1;
      v43 = v5 + 56 * v48;
      v44 = xmmword_1D5E44FD0;
      goto LABEL_58;
    }
LABEL_50:
    if (v45 > -9.22337204e18)
    {
      if (v45 < 9.22337204e18)
      {
        if (v37 > (uint64_t)v45)
        {
          v5 = (uint64_t)v97;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v5 = (uint64_t)sub_1D5D7F978(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
          v50 = *(_QWORD *)(v5 + 16);
          v49 = *(_QWORD *)(v5 + 24);
          if (v50 >= v49 >> 1)
            v5 = (uint64_t)sub_1D5D7F978((char *)(v49 > 1), v50 + 1, 1, (char *)v5);
          *(_QWORD *)(v5 + 16) = v50 + 1;
          v43 = v5 + 56 * v50;
          v44 = xmmword_1D5E44FE0;
          goto LABEL_58;
        }
        goto LABEL_59;
      }
LABEL_106:
      __break(1u);
LABEL_107:
      v5 = (uint64_t)sub_1D5D7F978(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
LABEL_62:
      v57 = *(_QWORD *)(v5 + 16);
      v56 = *(_QWORD *)(v5 + 24);
      if (v57 >= v56 >> 1)
        v5 = (uint64_t)sub_1D5D7F978((char *)(v56 > 1), v57 + 1, 1, (char *)v5);
      *(_QWORD *)(v5 + 16) = v57 + 1;
      v58 = v5 + 56 * v57;
      v59 = xmmword_1D5E45000;
      goto LABEL_70;
    }
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
LABEL_110:
  __break(1u);
LABEL_111:
  v5 = (uint64_t)sub_1D5D7F978(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
LABEL_33:
  v42 = *(_QWORD *)(v5 + 16);
  v41 = *(_QWORD *)(v5 + 24);
  if (v42 >= v41 >> 1)
    v5 = (uint64_t)sub_1D5D7F978((char *)(v41 > 1), v42 + 1, 1, (char *)v5);
  *(_QWORD *)(v5 + 16) = v42 + 1;
  v43 = v5 + 56 * v42;
  v44 = xmmword_1D5E44FC0;
LABEL_58:
  *(_OWORD *)(v43 + 32) = v44;
  *(_OWORD *)(v43 + 48) = 0u;
  *(_OWORD *)(v43 + 64) = 0u;
  *(_BYTE *)(v43 + 80) = 0;
  v97 = (char *)v5;
LABEL_59:
  v51 = v99;
  v52 = v100;
  __swift_project_boxed_opaque_existential_1(v98, v99);
  v53 = (*(uint64_t (**)(uint64_t, unint64_t))(v52 + 56))(v51, v52);
  if (v53 != 2)
  {
    v54 = v53;
    v5 = (uint64_t)v97;
    v55 = swift_isUniquelyReferenced_nonNull_native();
    if ((v54 & 1) == 0)
    {
      if ((v55 & 1) == 0)
        goto LABEL_107;
      goto LABEL_62;
    }
    if ((v55 & 1) == 0)
      v5 = (uint64_t)sub_1D5D7F978(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
    v61 = *(_QWORD *)(v5 + 16);
    v60 = *(_QWORD *)(v5 + 24);
    if (v61 >= v60 >> 1)
      v5 = (uint64_t)sub_1D5D7F978((char *)(v60 > 1), v61 + 1, 1, (char *)v5);
    *(_QWORD *)(v5 + 16) = v61 + 1;
    v58 = v5 + 56 * v61;
    v59 = xmmword_1D5E44FF0;
LABEL_70:
    *(_OWORD *)(v58 + 32) = v59;
    *(_OWORD *)(v58 + 48) = 0u;
    *(_OWORD *)(v58 + 64) = 0u;
    *(_BYTE *)(v58 + 80) = 0;
    v97 = (char *)v5;
  }
  v62 = v99;
  v63 = v100;
  __swift_project_boxed_opaque_existential_1(v98, v99);
  if (((*(uint64_t (**)(uint64_t, unint64_t))(v63 + 64))(v62, v63) & 1) != 0)
  {
    v64 = v99;
    v65 = v100;
    __swift_project_boxed_opaque_existential_1(v98, v99);
    (*(void (**)(uint64_t, unint64_t))(v65 + 112))(v64, v65);
    v95 = 2831718;
    v96 = 0xE300000000000000;
    sub_1D5E37458();
    swift_bridgeObjectRelease();
    v66 = v95;
    v67 = v96;
    v68 = v97;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v68 = sub_1D5D7F978(0, *((_QWORD *)v68 + 2) + 1, 1, v68);
    v70 = *((_QWORD *)v68 + 2);
    v69 = *((_QWORD *)v68 + 3);
    if (v70 >= v69 >> 1)
      v68 = sub_1D5D7F978((char *)(v69 > 1), v70 + 1, 1, v68);
    *((_QWORD *)v68 + 2) = v70 + 1;
    v71 = &v68[56 * v70];
    *((_QWORD *)v71 + 4) = v66;
    *((_QWORD *)v71 + 5) = v67;
    *((_OWORD *)v71 + 3) = 0u;
    *((_OWORD *)v71 + 4) = 0u;
    v71[80] = 0;
    v97 = v68;
  }
  v72 = v99;
  v73 = v100;
  __swift_project_boxed_opaque_existential_1(v98, v99);
  if (((*(uint64_t (**)(uint64_t, unint64_t))(v73 + 48))(v72, v73) & 1) != 0)
  {
    v74 = v97;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v74 = sub_1D5D7F978(0, *((_QWORD *)v74 + 2) + 1, 1, v74);
    v76 = *((_QWORD *)v74 + 2);
    v75 = *((_QWORD *)v74 + 3);
    if (v76 >= v75 >> 1)
      v74 = sub_1D5D7F978((char *)(v75 > 1), v76 + 1, 1, v74);
    *((_QWORD *)v74 + 2) = v76 + 1;
    v77 = &v74[56 * v76];
    *((_OWORD *)v77 + 2) = xmmword_1D5E45010;
    *((_OWORD *)v77 + 3) = 0u;
    *((_OWORD *)v77 + 4) = 0u;
    v77[80] = 0;
    v97 = v74;
  }
  v78 = v99;
  v79 = v100;
  __swift_project_boxed_opaque_existential_1(v98, v99);
  v80 = (*(uint64_t (**)(uint64_t, unint64_t))(v79 + 24))(v78, v79);
  if (v80)
  {
    v81 = v80;
    v82 = *(_QWORD *)(v80 + 16);
    if (v82)
    {
      v94 = v29;
      sub_1D5D7FB7C(0, v82, 0);
      v83 = v94;
      v93 = v81;
      v84 = v81 + 40;
      do
      {
        v95 = 724656486;
        v96 = 0xE400000000000000;
        swift_bridgeObjectRetain();
        sub_1D5E37458();
        swift_bridgeObjectRelease();
        v85 = v95;
        v86 = v96;
        v94 = v83;
        v88 = *(_QWORD *)(v83 + 16);
        v87 = *(_QWORD *)(v83 + 24);
        if (v88 >= v87 >> 1)
        {
          sub_1D5D7FB7C((char *)(v87 > 1), v88 + 1, 1);
          v83 = v94;
        }
        v84 += 16;
        *(_QWORD *)(v83 + 16) = v88 + 1;
        v89 = v83 + 56 * v88;
        *(_QWORD *)(v89 + 32) = v85;
        *(_QWORD *)(v89 + 40) = v86;
        *(_OWORD *)(v89 + 48) = 0u;
        *(_OWORD *)(v89 + 64) = 0u;
        *(_BYTE *)(v89 + 80) = 1;
        --v82;
      }
      while (v82);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v83 = MEMORY[0x1E0DEE9D8];
    }
    sub_1D5D7FA90(v83);
  }
  v90 = v97;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
  return v90;
}

char *sub_1D5D7F978(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF860);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1D5D7FA90(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)sub_1D5D7F978((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

char *sub_1D5D7FB7C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D5D7FB98(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D5D7FB98(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF860);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1D5D7FCB0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1D5D7FCE8(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t sub_1D5D7FCCC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1D5D7FCE8(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t sub_1D5D7FCE8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v4 = a1[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF860);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1D5E38FE0;
  sub_1D5E37458();
  *(_QWORD *)(v6 + 32) = 2831206;
  *(_QWORD *)(v6 + 40) = 0xE300000000000000;
  *(_QWORD *)(v6 + 48) = v5;
  *(_QWORD *)(v6 + 56) = v4;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_BYTE *)(v6 + 80) = 4;
  v7 = a2[3];
  v8 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 112);
  swift_bridgeObjectRetain();
  v10 = v9(v7, v8);
  v12 = v11;
  sub_1D5E37458();
  sub_1D5E37458();
  sub_1D5E37458();
  *(_QWORD *)(v6 + 88) = 2831462;
  *(_QWORD *)(v6 + 96) = 0xE300000000000000;
  *(_QWORD *)(v6 + 104) = v10;
  *(_QWORD *)(v6 + 112) = v12;
  *(_QWORD *)(v6 + 120) = v5;
  *(_QWORD *)(v6 + 128) = v4;
  *(_BYTE *)(v6 + 136) = 3;
  *a3 = v6;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5D7FE20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 56));
  swift_bridgeObjectRetain();
  return v2;
}

_QWORD *sub_1D5D7FE54(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1D5D7FE70(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1D5D7FE70(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF870);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF838);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1D5D7FF90(uint64_t a1, uint64_t a2)
{
  __swift_memcpy49_8(a2, a1);
  return a2;
}

unint64_t sub_1D5D7FFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D5E379A4();
  sub_1D5E3744C();
  v4 = sub_1D5E379C8();
  return sub_1D5D80030(a1, a2, v4);
}

unint64_t sub_1D5D80030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1D5E378FC() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1D5E378FC() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1D5D80110(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  return a1;
}

uint64_t sub_1D5D8014C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t result;

  result = a2;
  switch(a7)
  {
    case 0:
    case 1:
    case 2:
    case 5:
      goto LABEL_4;
    case 3:
      swift_bridgeObjectRelease();
      goto LABEL_3;
    case 4:
LABEL_3:
      swift_bridgeObjectRelease();
LABEL_4:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D5D801B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t result;

  result = a2;
  switch(a7)
  {
    case 0:
    case 1:
    case 2:
    case 5:
      goto LABEL_4;
    case 3:
      swift_bridgeObjectRetain();
      goto LABEL_3;
    case 4:
LABEL_3:
      swift_bridgeObjectRetain();
LABEL_4:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1D5D80214(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  sub_1D5E379A4();
  sub_1D5D7FF90(a1, (uint64_t)&v4);
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  v2 = sub_1D5E379C8();
  return sub_1D5D8029C(a1, v2);
}

unint64_t sub_1D5D8029C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[7];

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = ~v4;
    v8 = *(_QWORD *)(v2 + 48);
    do
    {
      v9 = (uint64_t *)(v8 + 56 * v5);
      v10 = *v9;
      v11 = v9[1];
      sub_1D5D7FF90(a1, (uint64_t)v14);
      if (v10 == v14[0] && v11 == v14[1])
        break;
      if ((sub_1D5E378FC() & 1) != 0)
        break;
      v5 = (v5 + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

uint64_t sub_1D5D80370(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF858);
  v37 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1D5E379A4();
    sub_1D5E3744C();
    result = sub_1D5E379C8();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D80674(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  int64_t v46;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED9AFC00);
  v45 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v43 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v41 = v3;
  v42 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  v44 = v5;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v46 = v13;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v42)
      break;
    v22 = v43;
    v23 = v43[v21];
    v24 = v13 + 1;
    if (!v23)
    {
      v24 = v13 + 2;
      if (v13 + 2 >= v42)
        goto LABEL_33;
      v23 = v43[v24];
      if (!v23)
      {
        v25 = v13 + 3;
        if (v13 + 3 >= v42)
        {
LABEL_33:
          swift_release();
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = v43[v25];
        if (!v23)
        {
          while (1)
          {
            v24 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v24 >= v42)
              goto LABEL_33;
            v23 = v43[v24];
            ++v25;
            if (v23)
              goto LABEL_30;
          }
        }
        v24 = v13 + 3;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v46 = v24;
    v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_31:
    v30 = *(_QWORD *)(v5 + 56);
    v31 = *(_QWORD *)(v5 + 48) + 56 * v20;
    v32 = *(_QWORD *)v31;
    v33 = *(_QWORD *)(v31 + 8);
    v34 = *(_QWORD *)(v31 + 16);
    v35 = *(_QWORD *)(v31 + 24);
    v37 = *(_QWORD *)(v31 + 32);
    v36 = *(_QWORD *)(v31 + 40);
    v38 = *(_BYTE *)(v31 + 48);
    v39 = *(_QWORD *)(v30 + 8 * v20);
    if ((v45 & 1) == 0)
      sub_1D5D801B0(*(_QWORD *)v31, *(_QWORD *)(v31 + 8), *(_QWORD *)(v31 + 16), *(_QWORD *)(v31 + 24), *(_QWORD *)(v31 + 32), *(_QWORD *)(v31 + 40), *(_BYTE *)(v31 + 48));
    sub_1D5E379A4();
    swift_bridgeObjectRetain();
    sub_1D5E3744C();
    swift_bridgeObjectRelease();
    result = sub_1D5E379C8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = *(_QWORD *)(v7 + 48) + 56 * v17;
    *(_QWORD *)v18 = v32;
    *(_QWORD *)(v18 + 8) = v33;
    *(_QWORD *)(v18 + 16) = v34;
    *(_QWORD *)(v18 + 24) = v35;
    *(_QWORD *)(v18 + 32) = v37;
    *(_QWORD *)(v18 + 40) = v36;
    *(_BYTE *)(v18 + 48) = v38;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v39;
    ++*(_QWORD *)(v7 + 16);
    v5 = v44;
    v13 = v46;
  }
  swift_release();
  v3 = v41;
  v22 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v40 = 1 << *(_BYTE *)(v5 + 32);
  if (v40 >= 64)
    bzero(v22, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v40;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D809F8(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = sub_1D5D80B78((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, v3);
    swift_release();
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v7 = sub_1D5D80B78((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x1D827D988](v8, -1, -1);
  }
  return v7;
}

uint64_t sub_1D5D80B78(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  _QWORD *v31;
  BOOL v32;
  BOOL v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v55;
  unint64_t *v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;

  v4 = a4;
  v5 = a3;
  v57 = (unint64_t *)result;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v6 = 0;
    v58 = a4 + 56;
    v7 = 1 << *(_BYTE *)(a4 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(a4 + 56);
    v59 = (unint64_t)(v7 + 63) >> 6;
    v61 = 0;
    v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v62 = v6;
          v12 = v11 | (v6 << 6);
        }
        else
        {
          v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59)
            goto LABEL_79;
          v14 = *(_QWORD *)(v58 + 8 * v13);
          v15 = v6 + 1;
          if (!v14)
          {
            v15 = v6 + 2;
            if (v6 + 2 >= v59)
              goto LABEL_79;
            v14 = *(_QWORD *)(v58 + 8 * v15);
            if (!v14)
            {
              v15 = v6 + 3;
              if (v6 + 3 >= v59)
                goto LABEL_79;
              v14 = *(_QWORD *)(v58 + 8 * v15);
              if (!v14)
              {
                v16 = v6 + 4;
                if (v6 + 4 >= v59)
                  goto LABEL_79;
                v14 = *(_QWORD *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    v15 = v16 + 1;
                    if (__OFADD__(v16, 1))
                      goto LABEL_83;
                    if (v15 >= v59)
                      goto LABEL_79;
                    v14 = *(_QWORD *)(v58 + 8 * v15);
                    ++v16;
                    if (v14)
                      goto LABEL_22;
                  }
                }
                v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          v9 = (v14 - 1) & v14;
          v62 = v15;
          v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
        v19 = *v17;
        v18 = v17[1];
        sub_1D5E379A4();
        swift_bridgeObjectRetain();
        sub_1D5E3744C();
        v20 = sub_1D5E379C8();
        v21 = -1 << *(_BYTE *)(v5 + 32);
        v22 = v20 & ~v21;
        v23 = v22 >> 6;
        v24 = 1 << v22;
        if (((1 << v22) & *(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
          break;
LABEL_6:
        result = swift_bridgeObjectRelease();
        v6 = v62;
        v5 = a3;
        v4 = a4;
      }
      v25 = *(_QWORD *)(a3 + 48);
      v26 = (_QWORD *)(v25 + 16 * v22);
      v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (sub_1D5E378FC() & 1) == 0)
      {
        v28 = ~v21;
        for (i = v22 + 1; ; i = v30 + 1)
        {
          v30 = i & v28;
          if (((*(_QWORD *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0)
            break;
          v31 = (_QWORD *)(v25 + 16 * v30);
          v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (sub_1D5E378FC() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v23 = v30 >> 6;
            v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      result = swift_bridgeObjectRelease();
LABEL_38:
      v6 = v62;
      v5 = a3;
      v57[v23] |= v24;
      v33 = __OFADD__(v61++, 1);
      v4 = a4;
      if (v33)
        goto LABEL_82;
    }
  }
  v34 = 0;
  v60 = a3 + 56;
  v61 = 0;
  v35 = 1 << *(_BYTE *)(a3 + 32);
  if (v35 < 64)
    v36 = ~(-1 << v35);
  else
    v36 = -1;
  v37 = v36 & *(_QWORD *)(a3 + 56);
  v63 = (unint64_t)(v35 + 63) >> 6;
  v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63)
      goto LABEL_79;
    v42 = *(_QWORD *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      v34 = v41 + 1;
      if (v41 + 1 >= v63)
        goto LABEL_79;
      v42 = *(_QWORD *)(v60 + 8 * v34);
      if (!v42)
      {
        v34 = v41 + 2;
        if (v41 + 2 >= v63)
          goto LABEL_79;
        v42 = *(_QWORD *)(v60 + 8 * v34);
        if (!v42)
          break;
      }
    }
LABEL_62:
    v37 = (v42 - 1) & v42;
    v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    v44 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v40);
    v46 = *v44;
    v45 = v44[1];
    sub_1D5E379A4();
    swift_bridgeObjectRetain();
    sub_1D5E3744C();
    v47 = sub_1D5E379C8();
    v48 = -1 << *(_BYTE *)(v4 + 32);
    v49 = v47 & ~v48;
    if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
      goto LABEL_46;
    v50 = *(_QWORD *)(a4 + 48);
    v51 = (_QWORD *)(v50 + 16 * v49);
    v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (sub_1D5E378FC() & 1) != 0)
    {
LABEL_76:
      result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      v33 = __OFADD__(v61++, 1);
      v5 = a3;
      v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return sub_1D5D810B4(v57, a2, v61, v5);
      }
    }
    else
    {
      v53 = ~v48;
      while (1)
      {
        v49 = (v49 + 1) & v53;
        if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
          break;
        v54 = (_QWORD *)(v50 + 16 * v49);
        v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (sub_1D5E378FC() & 1) != 0)
          goto LABEL_76;
      }
LABEL_46:
      result = swift_bridgeObjectRelease();
      v5 = a3;
      v4 = a4;
    }
  }
  v43 = v41 + 3;
  if (v43 >= v63)
    goto LABEL_79;
  v42 = *(_QWORD *)(v60 + 8 * v43);
  if (v42)
  {
    v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    v34 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v34 >= v63)
      goto LABEL_79;
    v42 = *(_QWORD *)(v60 + 8 * v34);
    ++v43;
    if (v42)
      goto LABEL_62;
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_1D5D810B4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x1E0DEE9E8];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF840);
  result = sub_1D5E37644();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    sub_1D5E379A4();
    swift_bridgeObjectRetain();
    sub_1D5E3744C();
    result = sub_1D5E379C8();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

double sub_1D5D81348(uint64_t a1, double a2, long double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double *a8)
{
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v26;

  v10 = a8[2];
  v11 = a8[5];
  v26 = a8[6];
  v12 = a8[7];
  v13 = a8[8];
  v14 = swift_bridgeObjectRetain();
  sub_1D5D814B8(v14, (void (*)(_QWORD *, uint64_t, uint64_t, __int128 *))sub_1D5D816B8, 0.0, 0.0, 0.0);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_bridgeObjectRelease();
  v21 = pow(v13 + v10 * v20 + (1.0 - v10) * v16, a3);
  if (v21 > 0.0)
  {
    v22 = v18 / v21;
    if (v12 <= 0.0)
      return (1.0 - v11) * v22 + v11 * sub_1D5D81910(a1);
    v23 = v26;
    if (v26 <= 0.0)
      return (1.0 - v11) * v22 + v11 * sub_1D5D81910(a1);
LABEL_7:
    v11 = v11 * ((v12 + -1.0) * exp2(-a2 / v23) + 1.0);
    return (1.0 - v11) * v22 + v11 * sub_1D5D81910(a1);
  }
  if (v12 <= 0.0)
  {
    v22 = 0.0;
    return (1.0 - v11) * v22 + v11 * sub_1D5D81910(a1);
  }
  v23 = v26;
  v22 = 0.0;
  if (v26 > 0.0)
    goto LABEL_7;
  return (1.0 - v11) * v22 + v11 * sub_1D5D81910(a1);
}

uint64_t sub_1D5D814B8(uint64_t a1, void (*a2)(_QWORD *, uint64_t, uint64_t, __int128 *), double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  int64_t v28;

  v6 = v5;
  *(double *)v27 = a3;
  *(double *)&v27[1] = a4;
  *(double *)&v27[2] = a5;
  v9 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(v10 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v14 = 0;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v21 = *v20;
    v22 = v20[1];
    v23 = *(_QWORD *)(a1 + 56) + 24 * i;
    v24 = *(_QWORD *)(v23 + 16);
    v25 = *(_OWORD *)v23;
    v26 = v24;
    swift_bridgeObjectRetain();
    a2(v27, v21, v22, &v25);
    if (v6)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v28)
      return swift_release();
    v18 = *(_QWORD *)(v9 + 8 * v14);
    if (!v18)
      break;
LABEL_17:
    v12 = (v18 - 1) & v18;
  }
  v19 = v14 + 1;
  if (v14 + 1 >= v28)
    return swift_release();
  v18 = *(_QWORD *)(v9 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 2;
  if (v14 + 2 >= v28)
    return swift_release();
  v18 = *(_QWORD *)(v9 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 3;
  if (v14 + 3 >= v28)
    return swift_release();
  v18 = *(_QWORD *)(v9 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 4;
  if (v14 + 4 >= v28)
    return swift_release();
  v18 = *(_QWORD *)(v9 + 8 * v19);
  if (v18)
  {
LABEL_16:
    v14 = v19;
    goto LABEL_17;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v28)
      return swift_release();
    v18 = *(_QWORD *)(v9 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1D5D816B8(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;

  return sub_1D5D816F0(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 32), *(_BYTE *)(v4 + 33), *(_BYTE *)(v4 + 34), *(double *)(v4 + 24), *(_QWORD *)(v4 + 40));
}

uint64_t sub_1D5D816F0(uint64_t result, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, char a6, char a7, char a8, double a9, uint64_t a10)
{
  double *v17;
  double v18;
  double v19;
  double v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  BOOL v29;
  double v30;
  _BOOL4 v31;
  double v32;
  double v33;
  double v34;
  unint64_t v35;
  char v36;

  v17 = (double *)result;
  v19 = *a4;
  v18 = a4[1];
  v20 = a4[2];
  if (a2 != 42 || a3 != 0xE100000000000000)
  {
    result = sub_1D5E378FC();
    if ((result & 1) == 0)
    {
      if (*(_QWORD *)(a5 + 16))
      {
        swift_bridgeObjectRetain();
        v21 = sub_1D5D7FFCC(a2, a3);
        if ((v22 & 1) != 0)
        {
          v23 = *(_QWORD *)(a5 + 56) + 24 * v21;
          v24 = *(double *)v23;
          v25 = *(double *)(v23 + 8);
          v26 = *(unsigned __int8 *)(v23 + 16);
          result = swift_bridgeObjectRelease();
          if (v26)
            v27 = a9;
          else
            v27 = v25;
          if ((a6 & 1) != 0)
            v28 = 1.0;
          else
            v28 = 0.0;
          if ((a6 & 1) != 0 || (a7 & 1) == 0)
          {
            a9 = v27;
            if (v20 <= 0.0)
              goto LABEL_31;
            goto LABEL_27;
          }
          if ((a8 & 1) != 0)
          {
            v28 = 0.0;
            v29 = v27 > a9;
            a9 = v27;
            if (!v29)
              goto LABEL_26;
          }
          else
          {
            a9 = v27;
          }
LABEL_37:
          if (*(_QWORD *)(a10 + 16))
          {
            swift_bridgeObjectRetain();
            v35 = sub_1D5D7FFCC(a2, a3);
            v28 = 0.0;
            if ((v36 & 1) != 0)
              v28 = *(double *)(*(_QWORD *)(a10 + 56) + 8 * v35);
            result = swift_bridgeObjectRelease();
            if (v20 > 0.0)
              goto LABEL_27;
            goto LABEL_31;
          }
          v28 = 0.0;
          if (v20 <= 0.0)
            goto LABEL_31;
LABEL_27:
          v30 = (v19 * v28 + v18 * (1.0 - v28)) / v20;
          v31 = a9 == 0.0;
          if (a9 == 0.0)
            v30 = 0.0;
          goto LABEL_32;
        }
        result = swift_bridgeObjectRelease();
      }
      v24 = 1.0;
      if ((a6 & 1) != 0)
        v28 = 1.0;
      else
        v28 = 0.0;
      if ((a6 & 1) != 0 || (a7 & 1) == 0)
      {
LABEL_26:
        if (v20 > 0.0)
          goto LABEL_27;
LABEL_31:
        v31 = a9 == 0.0;
        v30 = 0.0;
LABEL_32:
        v32 = 1.0;
        if (!v31)
          v32 = a9;
        v33 = v24 * v32;
        v34 = v17[1];
        *v17 = *v17 + v33;
        v17[1] = v30 * v33 + v34;
        v17[2] = v24 + v17[2];
        return result;
      }
      if ((a8 & 1) != 0)
      {
        v28 = 0.0;
        goto LABEL_26;
      }
      goto LABEL_37;
    }
  }
  return result;
}

double sub_1D5D81910(uint64_t a1)
{
  uint64_t v1;
  double v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = 0.0;
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = sub_1D5D7FFCC(42, 0xE100000000000000);
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(v1 + 56);
      v6 = *(double *)(v5 + 24 * v3 + 16);
      if (v6 > 0.0)
        return *(double *)(v5 + 24 * v3 + 8) / v6;
    }
  }
  return v2;
}

uint64_t sub_1D5D8197C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D5D819C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClassicArticleData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for ClassicArticleData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 57) = *(_DWORD *)(a2 + 57);
  v9 = a3[13];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = sub_1D5E37368();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF698);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = a3[14];
  v17 = a3[15];
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = (_QWORD *)(a1 + v17);
  v22 = (_QWORD *)(a2 + v17);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  *(_QWORD *)(a1 + v24) = *(_QWORD *)(a2 + v24);
  v25 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  v26 = a3[21];
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  v27 = a3[23];
  *(_BYTE *)(a1 + a3[22]) = *(_BYTE *)(a2 + a3[22]);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  v28 = a3[25];
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  *(_QWORD *)(a1 + a3[26]) = *(_QWORD *)(a2 + a3[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_1D5D81BD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED9AF6C0;
  if (!qword_1ED9AF6C0)
  {
    v1 = type metadata accessor for ClassicArticleData();
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClassicArticleData, v1);
    atomic_store(result, (unint64_t *)&qword_1ED9AF6C0);
  }
  return result;
}

uint64_t _s20HeadlineScoreProfileCMa()
{
  return objc_opt_self();
}

unint64_t sub_1D5D81C38(char a1)
{
  uint64_t v2;

  sub_1D5E379A4();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  v2 = sub_1D5E379C8();
  return sub_1D5D81CB0(a1 & 1, v2);
}

unint64_t sub_1D5D81CB0(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 1684627824;
    else
      v6 = 1701147238;
    while (1)
    {
      v7 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 1684627824 : 1701147238;
      if (v7 == v6)
        break;
      v8 = sub_1D5E378FC();
      swift_bridgeObjectRelease_n();
      if ((v8 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

uint64_t sub_1D5D81DA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1D5E3759C();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1D5D81E38(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1D5D81E38(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  v8 = sub_1D5E379C8();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1D5E378FC() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1D5E378FC() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1D5D81FE4(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1D5D81FE4(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1D5D852D0();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1D5D84A28();
      goto LABEL_22;
    }
    sub_1D5D855AC();
  }
  v11 = *v4;
  sub_1D5E379A4();
  sub_1D5E3744C();
  result = sub_1D5E379C8();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1D5E378FC(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1D5E37950();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1D5E378FC();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_1D5D8217C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (uint64_t *)(a1 + 40);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      swift_bridgeObjectRetain();
      sub_1D5D81E38(&v7, v4, v5);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return a2;
}

uint64_t sub_1D5D821F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,uint64_t a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,char a42)
{
  uint64_t v42;

  *(_QWORD *)(v42 + 16) = a1;
  *(double *)(v42 + 24) = a9;
  *(double *)(v42 + 32) = a10;
  *(double *)(v42 + 40) = a11;
  *(double *)(v42 + 48) = a12;
  *(double *)(v42 + 56) = a13;
  *(double *)(v42 + 64) = a14;
  *(_QWORD *)(v42 + 72) = a2;
  *(double *)(v42 + 80) = a15;
  *(double *)(v42 + 88) = a16;
  *(_OWORD *)(v42 + 96) = a17;
  *(_OWORD *)(v42 + 112) = a18;
  *(_OWORD *)(v42 + 128) = a19;
  *(_OWORD *)(v42 + 144) = a20;
  *(_QWORD *)(v42 + 160) = a21;
  *(_QWORD *)(v42 + 168) = a3;
  *(_QWORD *)(v42 + 176) = a4;
  *(_OWORD *)(v42 + 184) = a22;
  *(_OWORD *)(v42 + 200) = a23;
  *(_OWORD *)(v42 + 216) = a24;
  *(_OWORD *)(v42 + 232) = a25;
  *(_OWORD *)(v42 + 248) = a26;
  *(_OWORD *)(v42 + 264) = a27;
  *(_OWORD *)(v42 + 280) = a28;
  *(_QWORD *)(v42 + 296) = a29;
  *(_QWORD *)(v42 + 304) = a30;
  *(_QWORD *)(v42 + 312) = a5;
  *(_QWORD *)(v42 + 320) = a6;
  *(_QWORD *)(v42 + 328) = a7;
  *(_DWORD *)(v42 + 336) = a8;
  *(_BYTE *)(v42 + 340) = BYTE4(a8) & 1;
  *(_QWORD *)(v42 + 344) = a31;
  *(_QWORD *)(v42 + 352) = a32;
  *(_BYTE *)(v42 + 360) = a33 & 1;
  *(_OWORD *)(v42 + 368) = a34;
  *(_OWORD *)(v42 + 384) = a35;
  *(_OWORD *)(v42 + 400) = a36;
  *(_OWORD *)(v42 + 416) = a37;
  *(_QWORD *)(v42 + 432) = a38;
  *(_QWORD *)(v42 + 440) = a39;
  *(_BYTE *)(v42 + 448) = a40 & 1;
  *(_QWORD *)(v42 + 456) = a41;
  *(_BYTE *)(v42 + 464) = a42 & 1;
  return v42;
}

void sub_1D5D82304(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5D8235C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v2 = sub_1D5E26978(v1, 1, v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = *(double *)(v2 + 32);
    v5 = v3 - 1;
    if (v5)
    {
      v6 = (double *)(v2 + 40);
      do
      {
        v7 = *v6++;
        v8 = v7;
        if (v7 < v4)
          v4 = v8;
        --v5;
      }
      while (v5);
    }
  }
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1D5D827BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5D8);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = sub_1D5DA0B18(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1D5DA2144();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

void ReadonlyAggregateType.personalizationValue.getter(uint64_t a1, uint64_t a2)
{
  double (*v4)(void);

  v4 = *(double (**)(void))(a2 + 24);
  if (v4() > 0.0)
  {
    (*(void (**)(uint64_t, uint64_t, double))(a2 + 16))(a1, a2, 0.0);
    ((double (*)(uint64_t, uint64_t))v4)(a1, a2);
  }
}

_QWORD *sub_1D5D82928@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2[41];
  v5 = a2[42];
  v6 = a2[43];
  v7 = a2[44];
  v8 = a2[45];
  v9 = a2[46];
  v19 = a2[76];
  v20 = a2[75];
  v17 = a2[78];
  v18 = a2[77];
  v15 = a2[80];
  v16 = a2[79];
  v10 = a2[107];
  v11 = a2[108];
  v23 = a2[110];
  v24 = a2[109];
  v21 = a2[112];
  v22 = a2[111];
  v12 = a1[3];
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v13 + 48))(&v25, v12, v13);
  if (v25 >= 2u)
  {
    v4 = v10;
    v5 = v11;
    v7 = v23;
    v6 = v24;
    v9 = v21;
    v8 = v22;
    if (v25 == 2)
    {
      v5 = v19;
      v4 = v20;
      v7 = v17;
      v6 = v18;
      v9 = v15;
      v8 = v16;
    }
  }
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  a3[4] = v8;
  a3[5] = v9;
  return result;
}

double sub_1D5D82A20(uint64_t a1, uint64_t a2)
{
  long double v2;
  uint64_t v3;
  double result;
  BOOL v5;
  double v6;
  double *v7;
  long double v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  long double v13;
  double v14;
  double v15;
  double v16;
  long double v17;
  long double v18;

  v2 = *(double *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  result = 1.0;
  if (v3)
    v5 = v2 == 1.0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *(double *)a2;
    if (*(double *)a2 != 0.0)
    {
      v7 = (double *)(a1 + 32);
      v8 = *(double *)(a1 + 32);
      v9 = v3 - 1;
      if (v3 != 1)
      {
        v10 = (double *)(a1 + 40);
        do
        {
          v11 = *v10++;
          v12 = v11;
          if (v11 < v8)
            v8 = v12;
          --v9;
        }
        while (v9);
      }
      v14 = *(double *)(a2 + 24);
      v13 = *(double *)(a2 + 32);
      v15 = 1.0;
      do
      {
        v16 = *v7++;
        v15 = v15 * v16;
        --v3;
      }
      while (v3);
      v17 = v14 * pow(v8, *(long double *)(a2 + 32));
      v18 = v6 * (1.0 - (v17 + (1.0 - v14) * pow(v15, v13)));
      return pow(v2, v18);
    }
  }
  return result;
}

double sub_1D5D82B00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;

  swift_bridgeObjectRetain();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1D5D82C84(v2, a1, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1D5D83120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = sub_1D5E1FB74(v3);
  swift_release();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (double *)(v4 + 32);
    v7 = 1.0;
    do
    {
      v8 = *v6++;
      v7 = v7 * v8;
      --v5;
    }
    while (v5);
  }
  else
  {
    v7 = 1.0;
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1D5D82BB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  double v11;

  swift_bridgeObjectRetain();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1D5D82C84(v2, a1, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1D5D82E3C);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = sub_1D5E1FD68(v3);
  swift_release();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = *(double *)(v4 + 32);
    v7 = v5 - 1;
    if (v5 != 1)
    {
      v8 = (double *)(v4 + 40);
      do
      {
        v9 = *v8++;
        v10 = v9;
        if (v9 < v6)
          v6 = v10;
        --v7;
      }
      while (v7);
    }
    v11 = v6;
  }
  else
  {
    v11 = 0.0;
  }
  swift_bridgeObjectRelease();
  return *(_QWORD *)&v11;
}

uint64_t sub_1D5D82C84(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, v12);
    bzero((char *)v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    v13 = a3((char *)v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a1, a2);
    swift_bridgeObjectRelease();
    if (v3)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v14 = (void *)swift_slowAlloc();
    bzero(v14, v10);
    swift_bridgeObjectRetain();
    v13 = a3((char *)v14, v9, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x1D827D988](v14, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v13;
}

uint64_t sub_1D5D82E3C(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t i;
  _QWORD *v30;
  BOOL v31;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v37;
  int64_t v38;
  int v39;
  uint64_t v40;

  v4 = a4;
  v34 = (unint64_t *)result;
  v35 = 0;
  v5 = 0;
  v8 = a3[8];
  v6 = a3 + 8;
  v7 = v8;
  v9 = 1 << *((_BYTE *)v6 - 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & v7;
  v37 = v6;
  v38 = (unint64_t)(v9 + 63) >> 6;
  v40 = a4 + 56;
  while (1)
  {
    while (v11)
    {
      v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v13 = v12 | (v5 << 6);
      if (*(_QWORD *)(v4 + 16))
        goto LABEL_23;
    }
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v14 >= v38)
      return sub_1D5D833DC(v34, a2, v35, (uint64_t)a3);
    v15 = v37[v14];
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v38)
        return sub_1D5D833DC(v34, a2, v35, (uint64_t)a3);
      v15 = v37[v5];
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v38)
          return sub_1D5D833DC(v34, a2, v35, (uint64_t)a3);
        v15 = v37[v5];
        if (!v15)
          break;
      }
    }
LABEL_22:
    v11 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v5 << 6);
    if (*(_QWORD *)(v4 + 16))
    {
LABEL_23:
      v17 = (uint64_t *)(a3[6] + 16 * v13);
      v19 = *v17;
      v18 = v17[1];
      v39 = *(unsigned __int8 *)(a3[7] + (v13 << 6) + 56);
      sub_1D5E379A4();
      swift_bridgeObjectRetain();
      sub_1D5E3744C();
      v20 = sub_1D5E379C8();
      v21 = v4;
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = v20 & ~v22;
      if (((*(_QWORD *)(v40 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
        goto LABEL_37;
      v24 = *(_QWORD *)(v21 + 48);
      v25 = (_QWORD *)(v24 + 16 * v23);
      v26 = *v25 == v19 && v25[1] == v18;
      if (v26 || (sub_1D5E378FC() & 1) != 0)
      {
LABEL_5:
        result = swift_bridgeObjectRelease();
        v4 = v21;
        if (v39)
        {
          *(unint64_t *)((char *)v34 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          if (__OFADD__(v35++, 1))
          {
            __break(1u);
            return sub_1D5D833DC(v34, a2, v35, (uint64_t)a3);
          }
        }
      }
      else
      {
        v27 = v23 + 1;
        v28 = ~v22;
        for (i = v27 & ~v22; ((*(_QWORD *)(v40 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v28)
        {
          v30 = (_QWORD *)(v24 + 16 * i);
          v31 = *v30 == v19 && v30[1] == v18;
          if (v31 || (sub_1D5E378FC() & 1) != 0)
            goto LABEL_5;
        }
LABEL_37:
        result = swift_bridgeObjectRelease();
        v4 = v21;
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v38)
    return sub_1D5D833DC(v34, a2, v35, (uint64_t)a3);
  v15 = v37[v16];
  if (v15)
  {
    v5 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v38)
      return sub_1D5D833DC(v34, a2, v35, (uint64_t)a3);
    v15 = v37[v5];
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1D5D83120(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  BOOL v30;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;

  v4 = a4;
  v32 = (unint64_t *)result;
  v33 = 0;
  v5 = 0;
  v8 = *(_QWORD *)(a3 + 64);
  v6 = a3 + 64;
  v7 = v8;
  v9 = 1 << *(_BYTE *)(v6 - 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & v7;
  v35 = v6;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = a4 + 56;
  while (1)
  {
    while (v11)
    {
      v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v13 = v12 | (v5 << 6);
      if (*(_QWORD *)(v4 + 16))
        goto LABEL_23;
    }
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v14 >= v36)
      return sub_1D5D833DC(v32, a2, v33, a3);
    v15 = *(_QWORD *)(v35 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v36)
        return sub_1D5D833DC(v32, a2, v33, a3);
      v15 = *(_QWORD *)(v35 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v36)
          return sub_1D5D833DC(v32, a2, v33, a3);
        v15 = *(_QWORD *)(v35 + 8 * v5);
        if (!v15)
          break;
      }
    }
LABEL_22:
    v11 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v5 << 6);
    if (*(_QWORD *)(v4 + 16))
    {
LABEL_23:
      v17 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v13);
      v19 = *v17;
      v18 = v17[1];
      sub_1D5E379A4();
      swift_bridgeObjectRetain();
      sub_1D5E3744C();
      v20 = sub_1D5E379C8();
      v21 = v4;
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = v20 & ~v22;
      if (((*(_QWORD *)(v37 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
        goto LABEL_5;
      v24 = *(_QWORD *)(v21 + 48);
      v25 = (_QWORD *)(v24 + 16 * v23);
      v26 = *v25 == v19 && v25[1] == v18;
      if (v26 || (sub_1D5E378FC() & 1) != 0)
      {
LABEL_36:
        result = swift_bridgeObjectRelease();
        *(unint64_t *)((char *)v32 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
        v30 = __OFADD__(v33++, 1);
        v4 = v21;
        if (v30)
        {
          __break(1u);
          return sub_1D5D833DC(v32, a2, v33, a3);
        }
      }
      else
      {
        v27 = ~v22;
        while (1)
        {
          v23 = (v23 + 1) & v27;
          if (((*(_QWORD *)(v37 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            break;
          v28 = (_QWORD *)(v24 + 16 * v23);
          v29 = *v28 == v19 && v28[1] == v18;
          if (v29 || (sub_1D5E378FC() & 1) != 0)
            goto LABEL_36;
        }
LABEL_5:
        result = swift_bridgeObjectRelease();
        v4 = v21;
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v36)
    return sub_1D5D833DC(v32, a2, v33, a3);
  v15 = *(_QWORD *)(v35 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v36)
      return sub_1D5D833DC(v32, a2, v33, a3);
    v15 = *(_QWORD *)(v35 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1D5D833DC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char v44;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5D0);
  result = sub_1D5E37710();
  v8 = result;
  v40 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  v42 = v4;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v43 = v10;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v40)
        return v8;
      v15 = a1[v14];
      v16 = v10 + 1;
      if (!v15)
      {
        v16 = v10 + 2;
        if (v10 + 2 >= v40)
          return v8;
        v15 = a1[v16];
        if (!v15)
        {
          v16 = v10 + 3;
          if (v10 + 3 >= v40)
            return v8;
          v15 = a1[v16];
          if (!v15)
          {
            v17 = v10 + 4;
            if (v10 + 4 >= v40)
              return v8;
            v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                v16 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v16 >= v40)
                  return v8;
                v15 = a1[v16];
                ++v17;
                if (v15)
                  goto LABEL_24;
              }
            }
            v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v43 = v16;
      v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(v4 + 56) + (v13 << 6);
    v22 = *(_BYTE *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 24);
    v26 = *(_QWORD *)(v21 + 32);
    v44 = *(_BYTE *)(v21 + 40);
    v27 = *(_QWORD *)(v21 + 48);
    v28 = *(_BYTE *)(v21 + 56);
    sub_1D5E379A4();
    swift_bridgeObjectRetain();
    sub_1D5E3744C();
    result = sub_1D5E379C8();
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v11 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v11 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v11 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v11 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    v37 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v32);
    *v37 = v20;
    v37[1] = v19;
    v38 = *(_QWORD *)(v8 + 56) + (v32 << 6);
    *(_BYTE *)v38 = v22;
    *(_QWORD *)(v38 + 8) = v23;
    *(_QWORD *)(v38 + 16) = v24;
    *(_QWORD *)(v38 + 24) = v25;
    *(_QWORD *)(v38 + 32) = v26;
    *(_BYTE *)(v38 + 40) = v44;
    *(_QWORD *)(v38 + 48) = v27;
    *(_BYTE *)(v38 + 56) = v28;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    v4 = v42;
    v10 = v43;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_1D5D836E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  long double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long double v16;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[10];

  if (*(_QWORD *)(a2 + 16))
  {
    v11 = *(double *)(a6 + 72);
    v12 = MEMORY[0x1E0C80A78](a1, a2);
    v21[2] = a9;
    v21[3] = a10;
    v21[4] = v13;
    v21[5] = v14;
    v21[6] = a5;
    *(double *)&v21[7] = v12;
    sub_1D5D7EAAC((void (*)(_QWORD *, _QWORD *))sub_1D5D7ED04, 0.0, 0.0, (uint64_t)v21, v15);
    pow(v16, v11);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    ReadonlyAggregateType.personalizationValue.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  else
  {
    v19 = swift_getAssociatedTypeWitness();
    v20 = swift_getAssociatedConformanceWitness();
    ReadonlyAggregateType.personalizationValue.getter(v19, v20);
  }
}

unint64_t sub_1D5D83870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t i;
  uint64_t v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  double v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[10];
  uint64_t v70;
  _OWORD v71[3];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v6 = *(_OWORD *)(a4 + 128);
  v7 = *(_OWORD *)(a4 + 160);
  v78 = *(_OWORD *)(a4 + 144);
  v79 = v7;
  v8 = *(_OWORD *)(a4 + 64);
  v9 = *(_OWORD *)(a4 + 96);
  v10 = *(_OWORD *)(a4 + 112);
  v74 = *(_OWORD *)(a4 + 80);
  v75 = v9;
  v76 = v10;
  v77 = v6;
  v11 = *(_OWORD *)(a4 + 16);
  v71[0] = *(_OWORD *)a4;
  v71[1] = v11;
  v12 = *(_OWORD *)(a4 + 48);
  v71[2] = *(_OWORD *)(a4 + 32);
  v80 = *(_QWORD *)(a4 + 176);
  v72 = v12;
  v73 = v8;
  v13 = (int *)type metadata accessor for ClassicArticleData();
  v14 = *(_QWORD *)(a1 + v13[23]);
  v67 = a1;
  v15 = *(_QWORD *)(a1 + v13[16]);
  if ((v72 & 1) != 0)
  {
    a1 = *(_QWORD *)(v15 + 16);
    if (a1)
    {
      v63 = v13;
      v65 = v15 + 32;
      v68 = a3 + 56;
      swift_bridgeObjectRetain_n();
      v17 = 0;
      v16 = MEMORY[0x1E0DEE9D8];
      v64 = a1;
      do
      {
        if (*(_QWORD *)(a3 + 16))
        {
          v18 = (uint64_t *)(v65 + 16 * v17);
          v20 = *v18;
          v19 = v18[1];
          sub_1D5E379A4();
          swift_bridgeObjectRetain();
          sub_1D5E3744C();
          v21 = sub_1D5E379C8();
          v22 = -1 << *(_BYTE *)(a3 + 32);
          v23 = v21 & ~v22;
          if (((*(_QWORD *)(v68 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
          {
            v24 = v16;
            v25 = *(_QWORD *)(a3 + 48);
            v26 = (_QWORD *)(v25 + 16 * v23);
            v27 = *v26 == v20 && v26[1] == v19;
            if (v27 || (sub_1D5E378FC() & 1) != 0)
            {
LABEL_16:
              swift_bridgeObjectRetain();
              v16 = v24;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v16 = (uint64_t)sub_1D5D7DABC(0, *(_QWORD *)(v24 + 16) + 1, 1, (char *)v24);
              a1 = v64;
              v29 = *(_QWORD *)(v16 + 16);
              v28 = *(_QWORD *)(v16 + 24);
              if (v29 >= v28 >> 1)
                v16 = (uint64_t)sub_1D5D7DABC((char *)(v28 > 1), v29 + 1, 1, (char *)v16);
              *(_QWORD *)(v16 + 16) = v29 + 1;
              v30 = v16 + 16 * v29;
              *(_QWORD *)(v30 + 32) = v20;
              *(_QWORD *)(v30 + 40) = v19;
            }
            else
            {
              v31 = ~v22;
              for (i = v23 + 1; ; i = v33 + 1)
              {
                v33 = i & v31;
                if (((*(_QWORD *)(v68 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0)
                  break;
                v34 = (_QWORD *)(v25 + 16 * v33);
                v35 = *v34 == v20 && v34[1] == v19;
                if (v35 || (sub_1D5E378FC() & 1) != 0)
                  goto LABEL_16;
              }
              v16 = v24;
              a1 = v64;
            }
          }
          swift_bridgeObjectRelease();
        }
        ++v17;
      }
      while (v17 != a1);
      swift_bridgeObjectRelease_n();
      v13 = v63;
      if ((v79 & 1) != 0)
      {
LABEL_32:
        v37 = (uint64_t *)(v67 + v13[14]);
        a1 = *v37;
        v13 = (int *)v37[1];
        swift_bridgeObjectRetain_n();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          goto LABEL_33;
        goto LABEL_74;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0DEE9D8];
      if ((v79 & 1) != 0)
        goto LABEL_32;
    }
  }
  else
  {
    v16 = swift_bridgeObjectRetain();
    if ((v79 & 1) != 0)
      goto LABEL_32;
  }
  v36 = v16;
  while (2)
  {
    v41 = 0;
    v16 = 0;
    v42 = v14 + 64;
    v43 = 1 << *(_BYTE *)(v14 + 32);
    v44 = -1;
    if (v43 < 64)
      v44 = ~(-1 << v43);
    v45 = v44 & *(_QWORD *)(v14 + 64);
    v46 = (unint64_t)(v43 + 63) >> 6;
    v47 = 1.0;
    if (v45)
    {
LABEL_39:
      v48 = __clz(__rbit64(v45));
      v45 &= v45 - 1;
      v49 = v48 | (v41 << 6);
      goto LABEL_40;
    }
    while (1)
    {
      v51 = v41 + 1;
      if (__OFADD__(v41, 1))
      {
        __break(1u);
        goto LABEL_73;
      }
      if (v51 >= v46)
        goto LABEL_64;
      v52 = *(_QWORD *)(v42 + 8 * v51);
      ++v41;
      if (!v52)
      {
        v41 = v51 + 1;
        if (v51 + 1 >= v46)
          goto LABEL_64;
        v52 = *(_QWORD *)(v42 + 8 * v41);
        if (!v52)
        {
          v41 = v51 + 2;
          if (v51 + 2 >= v46)
            goto LABEL_64;
          v52 = *(_QWORD *)(v42 + 8 * v41);
          if (!v52)
          {
            v41 = v51 + 3;
            if (v51 + 3 >= v46)
              goto LABEL_64;
            v52 = *(_QWORD *)(v42 + 8 * v41);
            if (!v52)
            {
              v41 = v51 + 4;
              if (v51 + 4 >= v46)
                goto LABEL_64;
              v52 = *(_QWORD *)(v42 + 8 * v41);
              if (!v52)
                break;
            }
          }
        }
      }
LABEL_63:
      v45 = (v52 - 1) & v52;
      v49 = __clz(__rbit64(v52)) + (v41 << 6);
LABEL_40:
      v50 = *(_QWORD *)(v14 + 56) + 80 * v49;
      v16 = v16 | *(unsigned __int8 *)(v50 + 73);
      if ((*(_BYTE *)(v50 + 40) & 1) != 0)
      {
        if (v45)
          goto LABEL_39;
      }
      else
      {
        if (*(double *)(v50 + 32) < v47)
          v47 = *(double *)(v50 + 32);
        if (v45)
          goto LABEL_39;
      }
    }
    v53 = v51 + 5;
    if (v53 < v46)
    {
      v52 = *(_QWORD *)(v42 + 8 * v53);
      if (!v52)
      {
        while (1)
        {
          v41 = v53 + 1;
          if (__OFADD__(v53, 1))
            break;
          if (v41 >= v46)
            goto LABEL_64;
          v52 = *(_QWORD *)(v42 + 8 * v41);
          ++v53;
          if (v52)
            goto LABEL_63;
        }
LABEL_73:
        __break(1u);
LABEL_74:
        v16 = (uint64_t)sub_1D5D7DABC(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
LABEL_33:
        v39 = *(_QWORD *)(v16 + 16);
        v38 = *(_QWORD *)(v16 + 24);
        if (v39 >= v38 >> 1)
          v16 = (uint64_t)sub_1D5D7DABC((char *)(v38 > 1), v39 + 1, 1, (char *)v16);
        *(_QWORD *)(v16 + 16) = v39 + 1;
        v36 = v16;
        v40 = v16 + 16 * v39;
        *(_QWORD *)(v40 + 32) = a1;
        *(_QWORD *)(v40 + 40) = v13;
        swift_bridgeObjectRelease();
        continue;
      }
      v41 = v53;
      goto LABEL_63;
    }
    break;
  }
LABEL_64:
  if (*(double *)&v78 >= v47)
  {
    swift_bridgeObjectRelease();
    return sub_1D5D85858(MEMORY[0x1E0DEE9D8]);
  }
  else
  {
    v54 = *((double *)&v78 + 1);
    v55 = *((double *)&v74 + 1);
    v70 = MEMORY[0x1E0DEE9E0];
    v56 = *(_QWORD *)(v36 + 16);
    if (v56)
    {
      v57 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
      v58 = v71[0] & 1;
      do
      {
        v59 = *v57;
        v69[0] = *(v57 - 1);
        v69[1] = v59;
        swift_bridgeObjectRetain();
        sub_1D5D83E24((uint64_t)&v70, v69, a2, v14, v67, (uint64_t)v71, v58, v16 & 1, v54, v55);
        v57 += 2;
        swift_bridgeObjectRelease();
        --v56;
      }
      while (v56);
      swift_bridgeObjectRelease_n();
      v60 = v70;
    }
    else
    {
      swift_bridgeObjectRelease();
      v60 = MEMORY[0x1E0DEE9E0];
    }
    v62 = sub_1D5D841E8(v60);
    swift_bridgeObjectRelease();
    return v62;
  }
}

uint64_t sub_1D5D83E24(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10)
{
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  double v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  double v26;
  char v27;
  double v28;
  int v29;
  _QWORD *v30;
  char v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  long double v37;
  long double v38;
  double v39;
  char isUniquelyReferenced_nonNull_native;
  double v41;
  int v42;
  uint64_t v44;

  v16 = (uint64_t *)result;
  v18 = *a2;
  v17 = a2[1];
  if (!*(_QWORD *)(a3 + 16))
  {
    v21 = 0.0;
    if (!*(_QWORD *)(a4 + 16))
      return result;
LABEL_7:
    swift_bridgeObjectRetain();
    v23 = sub_1D5D7FFCC(v18, v17);
    if ((v24 & 1) == 0)
      return swift_bridgeObjectRelease();
    v25 = *(_QWORD *)(a4 + 56) + 80 * v23;
    v26 = *(double *)v25;
    v27 = *(_BYTE *)(v25 + 8);
    v28 = *(double *)(v25 + 16);
    v29 = *(unsigned __int8 *)(v25 + 24);
    v42 = *(unsigned __int8 *)(v25 + 73);
    swift_bridgeObjectRelease();
    v30 = (_QWORD *)(a5 + *(int *)(type metadata accessor for ClassicArticleData() + 56));
    if (v18 == *v30 && v17 == v30[1])
    {
      v32 = 1;
      v33 = 1.0 - a9;
      if ((v27 & 1) == 0)
      {
LABEL_17:
        v34 = v33 * v21;
        if (v29)
          v28 = *(double *)(a6 + 16);
        v35 = 176;
        if ((v32 & 1) != 0)
          v35 = 136;
        v36 = 168;
        if ((v32 & 1) != 0)
          v36 = 128;
        v37 = *(double *)(a6 + v35);
        v38 = v34 + pow(1.0 - v26, *(long double *)(a6 + v36)) * a9;
        v39 = pow(1.0 - v28, v37) * v38;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v44 = *v16;
        *v16 = 0x8000000000000000;
        if (((v42 | a7 & a8) & 1) != 0)
          v41 = (1.0 - a10) * v39 + a10;
        else
          v41 = v39;
        sub_1D5D84094(v18, v17, isUniquelyReferenced_nonNull_native, v41);
        *v16 = v44;
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      v32 = sub_1D5E378FC();
      v33 = 1.0 - a9;
      if ((v27 & 1) == 0)
        goto LABEL_17;
    }
    v26 = *(double *)(a6 + 8);
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  v20 = sub_1D5D7FFCC(v18, v17);
  v21 = 0.0;
  if ((v22 & 1) != 0)
    v21 = *(double *)(*(_QWORD *)(a3 + 56) + 8 * v20);
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a4 + 16))
    goto LABEL_7;
  return result;
}

uint64_t sub_1D5D84094(uint64_t a1, uint64_t a2, char a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1D5D7FFCC(a1, a2);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1D5D989E4();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(double *)(v18[7] + 8 * v12) = a4;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a1;
    v20[1] = a2;
    *(double *)(v18[7] + 8 * v12) = a4;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1D5D80370(result, a3 & 1);
  result = sub_1D5D7FFCC(a1, a2);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1D5E3795C();
  __break(1u);
  return result;
}

uint64_t sub_1D5D841E8(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF858);
  result = sub_1D5E376F8();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = result + 64;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v17 = *v16;
    result = v16[1];
    v18 = 8 * i;
    v19 = *(double *)(*(_QWORD *)(a1 + 56) + 8 * i);
    if ((*(_QWORD *)&v19 & 0xFFFFFFFFFFFFFLL) != 0)
      v20 = 0.0;
    else
      v20 = *(double *)(*(_QWORD *)(a1 + 56) + 8 * i);
    if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
      v19 = v20;
    *(_QWORD *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v21 = (_QWORD *)(v3[6] + 16 * i);
    *v21 = v17;
    v21[1] = result;
    *(double *)(v3[7] + v18) = v19;
    v22 = v3[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v3[2] = v24;
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_29;
    if (v13 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v5 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v9)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_30:
  __break(1u);
  return result;
}

double sub_1D5D843C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double v11;
  char *v15;
  long double v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double v20;
  double v21;
  double *v23;
  long double v24;
  long double v25;
  long double v26;
  long double v27;
  _OWORD v28[6];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v6 = *(_OWORD *)(a4 + 144);
  v31 = *(_OWORD *)(a4 + 128);
  v32 = v6;
  v33 = *(_OWORD *)(a4 + 160);
  v34 = *(_QWORD *)(a4 + 176);
  v7 = *(_OWORD *)(a4 + 80);
  v28[4] = *(_OWORD *)(a4 + 64);
  v28[5] = v7;
  v8 = *(_OWORD *)(a4 + 112);
  v29 = *(_OWORD *)(a4 + 96);
  v30 = v8;
  v9 = *(_OWORD *)(a4 + 16);
  v28[0] = *(_OWORD *)a4;
  v28[1] = v9;
  v10 = *(_OWORD *)(a4 + 48);
  v28[2] = *(_OWORD *)(a4 + 32);
  v28[3] = v10;
  v11 = 1.0;
  if (!*(_QWORD *)(a2 + 16) || *((double *)&v29 + 1) <= 0.0)
    return v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = sub_1D5E263A0(MEMORY[0x1E0DEE9D8], a1, a2, a3, (uint64_t)v28, a5, *((double *)&v29 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = *((double *)&v30 + 1);
  v17 = *((_QWORD *)v15 + 2);
  if (*((double *)&v30 + 1) == 0.0)
  {
    if (v17)
    {
      v11 = *((double *)v15 + 4);
      v18 = v17 - 1;
      if (v17 != 1)
      {
        v19 = (double *)(v15 + 40);
        do
        {
          v20 = *v19++;
          v21 = v20;
          if (v11 < v20)
            v11 = v21;
          --v18;
        }
        while (v18);
      }
    }
    swift_bridgeObjectRelease();
    return v11;
  }
  if (v17)
  {
    v23 = (double *)(v15 + 32);
    v24 = 0.0;
    do
    {
      v25 = *v23++;
      v26 = log(v25);
      v24 = v24 + pow(v26, 1.0 / v16);
      --v17;
    }
    while (v17);
  }
  else
  {
    v24 = 0.0;
  }
  swift_bridgeObjectRelease();
  v27 = pow(v24, v16);
  return exp(v27);
}

uint64_t sub_1D5D84560@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1D5D845A0(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), a1, *(Swift::Double *)(v1 + 128), *(_QWORD *)(v1 + 96), *(_QWORD **)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_1D5D845A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, Swift::Double a7@<D0>, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  char v19;
  uint64_t result;

  v16 = *(_QWORD *)(a3 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF868);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D5E38280;
  *(_QWORD *)(inited + 32) = a4;
  *(_QWORD *)(inited + 40) = a5;
  swift_bridgeObjectRetain();
  v18 = sub_1D5D7DF0C(a1, a2, inited, a8, a9, a10, a11, a7);
  LOBYTE(a4) = v19;
  swift_setDeallocating();
  result = swift_arrayDestroy();
  *(_QWORD *)a6 = v16;
  *(_QWORD *)(a6 + 8) = v18;
  *(_BYTE *)(a6 + 16) = a4 & 1;
  return result;
}

uint64_t _s14CohortProviderCMa()
{
  return objc_opt_self();
}

uint64_t sub_1D5D846D0(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[1016];

  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = a1;
  *(_BYTE *)(v1 + 32) = 2;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  sub_1D5D955E0((uint64_t)v3);
  sub_1D5D95608((uint64_t)v3, v1 + 56);
  *(_DWORD *)(v1 + 1059) = 33686018;
  *(_QWORD *)(v1 + 1064) = 0;
  *(_BYTE *)(v1 + 1072) = 0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1D5D84738(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__src, int a8, char a9, char a10, char a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t v13;
  uint64_t v14;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[3];
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35[3];
  _BYTE v36[1003];
  _BYTE v37[1016];

  v14 = v13;
  v33 = a8;
  v34 = a4;
  v29[2] = a3;
  v32 = a12;
  v31 = a13;
  v19 = *a2;
  memcpy(v36, __src, sizeof(v36));
  memcpy(v37, __src, 0x3EBuLL);
  v30 = a1;
  *(_QWORD *)(v14 + 16) = a1;
  *(_BYTE *)(v14 + 32) = v19;
  *(_QWORD *)(v14 + 40) = a5;
  *(_QWORD *)(v14 + 48) = a6;
  nullsub_20(v37);
  v20 = sub_1D5D95608((uint64_t)v37, v14 + 56);
  v22 = v31;
  v23 = v32;
  *(_BYTE *)(v14 + 1059) = v33;
  *(_BYTE *)(v14 + 1060) = a9;
  *(_BYTE *)(v14 + 1061) = a10;
  *(_BYTE *)(v14 + 1062) = a11;
  *(_QWORD *)(v14 + 1064) = v23;
  *(_BYTE *)(v14 + 1072) = v22;
  if ((v36[96] & 1) != 0 && *(_QWORD *)(v23 + 16))
  {
    v29[1] = v29;
    MEMORY[0x1E0C80A78](v20, v21);
    v24 = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25 = sub_1D5D95A70(v24, (uint64_t (*)(__int128 *, uint64_t, uint64_t, __int128 *))sub_1D5D95654);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v25 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5F0);
      v26 = sub_1D5E37710();
    }
    else
    {
      v26 = MEMORY[0x1E0DEE9E0];
    }
    v35[0] = v26;
    v27 = swift_bridgeObjectRetain();
    sub_1D5D956B0(v27, 1, v35);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v14 + 24) = v35[0];
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v14 + 24) = *(_QWORD *)(v14 + 16);
    swift_bridgeObjectRetain();
  }
  return v14;
}

uint64_t sub_1D5D849A8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5D849B4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t sub_1D5D849BC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 59);
}

uint64_t sub_1D5D849C4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 58);
}

uint64_t sub_1D5D849CC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_1D5D849D8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5D849E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_1D5D84A28()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF840);
  v2 = *v0;
  v3 = sub_1D5E3762C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1D5D84BD8(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = sub_1D5E37704();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1D5E379A4();
    sub_1D5E3744C();
    result = sub_1D5E379C8();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_1D5D84EE8(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;

  v3 = v2;
  v5 = type metadata accessor for ClassicArticleData();
  v40 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AFBF8);
  v41 = a2;
  v10 = sub_1D5E37704();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v39 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v37 = v2;
  v38 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v38)
      break;
    v23 = v39;
    v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_34;
      v24 = v39[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_34:
          swift_release();
          v3 = v37;
          if ((v41 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v38)
              goto LABEL_34;
            v24 = v39[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v40 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v41 & 1) != 0)
    {
      sub_1D5D8528C(v27, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ClassicArticleData);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      sub_1D5D8197C(v27, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ClassicArticleData);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_retain();
    }
    sub_1D5E379A4();
    swift_bridgeObjectRetain();
    sub_1D5E3744C();
    swift_bridgeObjectRelease();
    result = sub_1D5E379C8();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = sub_1D5D8528C((uint64_t)v8, *(_QWORD *)(v11 + 48) + v26 * v19, (uint64_t (*)(_QWORD))type metadata accessor for ClassicArticleData);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v37;
  v23 = v39;
  if ((v41 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1D5D8528C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D5D852D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF840);
  v3 = sub_1D5E37638();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1D5E379A4();
      sub_1D5E3744C();
      result = sub_1D5E379C8();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1D5D855AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF840);
  v3 = sub_1D5E37638();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1D5E379A4();
    swift_bridgeObjectRetain();
    sub_1D5E3744C();
    result = sub_1D5E379C8();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1D5D85858(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF858);
  v2 = (_QWORD *)sub_1D5E37710();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1D5D7FFCC(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1D5D85968(uint64_t a1, void (*a2)(uint64_t *, _QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  int v32;
  char v33;
  int v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  _QWORD v40[3];
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  int v48;
  char v49;
  int v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;

  v5 = v4;
  v57 = a1;
  v8 = a4 + 64;
  v9 = 1 << *(_BYTE *)(a4 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a4 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v14 = 0;
  if (!v11)
    goto LABEL_5;
LABEL_4:
  v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * i);
    v21 = *v20;
    v22 = v20[1];
    v23 = *(_QWORD *)(a4 + 56) + 80 * i;
    v24 = *(_QWORD *)v23;
    v25 = *(_BYTE *)(v23 + 8);
    v26 = *(_QWORD *)(v23 + 16);
    v27 = *(_BYTE *)(v23 + 24);
    v28 = *(_QWORD *)(v23 + 32);
    v29 = *(_BYTE *)(v23 + 40);
    v30 = *(_QWORD *)(v23 + 48);
    v31 = *(_BYTE *)(v23 + 56);
    v32 = *(_DWORD *)(v23 + 60);
    v33 = *(_BYTE *)(v23 + 64);
    v34 = *(_DWORD *)(v23 + 68);
    v35 = *(_BYTE *)(v23 + 72);
    v36 = *(_BYTE *)(v23 + 73);
    v37 = *(_BYTE *)(v23 + 74);
    v38 = *(_BYTE *)(v23 + 75);
    v39 = *(_BYTE *)(v23 + 76);
    LOBYTE(v23) = *(_BYTE *)(v23 + 77);
    v40[0] = v21;
    v40[1] = v22;
    v40[2] = v24;
    v41 = v25;
    v42 = v26;
    v43 = v27;
    v44 = v28;
    v45 = v29;
    v46 = v30;
    v47 = v31;
    v48 = v32;
    v49 = v33;
    v50 = v34;
    v51 = v35;
    v52 = v36;
    v53 = v37;
    v54 = v38;
    v55 = v39;
    v56 = v23;
    swift_bridgeObjectRetain();
    a2(&v57, v40);
    if (v5)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v12)
      goto LABEL_26;
    v18 = *(_QWORD *)(v8 + 8 * v14);
    if (!v18)
      break;
LABEL_17:
    v11 = (v18 - 1) & v18;
  }
  v19 = v14 + 1;
  if (v14 + 1 >= v12)
    goto LABEL_26;
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 2;
  if (v14 + 2 >= v12)
    goto LABEL_26;
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 3;
  if (v14 + 3 >= v12)
    goto LABEL_26;
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 4;
  if (v14 + 4 >= v12)
  {
LABEL_26:
    swift_release();
    return v57;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
LABEL_16:
    v14 = v19;
    goto LABEL_17;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v12)
      goto LABEL_26;
    v18 = *(_QWORD *)(v8 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1D5D85BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

double sub_1D5D85C00@<D0>(char a1@<W0>, __int128 *a2@<X1>, char a3@<W2>, __int128 *a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>, double a12@<D4>, double a13@<D5>, double a14@<D6>, double a15@<D7>, double a16, double a17, double a18, double a19, double a20)
{
  double result;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;

  v34 = *a2;
  v33 = *((_QWORD *)a2 + 2);
  v36 = *a4;
  v35 = *((_QWORD *)a4 + 2);
  sub_1D5D8A204(a8);
  sub_1D5D8A220(a9);
  sub_1D5D8A1E8(a10);
  sub_1D5D89FBC(a11);
  sub_1D5D8A23C(a12);
  sub_1D5D8A1CC(a13);
  sub_1D5D89F4C(a14);
  sub_1D5D89F84(a15);
  sub_1D5D89F30(a16);
  sub_1D5D89FF4(a17);
  sub_1D5D89FD8(a18);
  sub_1D5D89FA0(a19);
  sub_1D5D89F68(a20);
  result = a20;
  *(_BYTE *)a7 = a1;
  *(double *)(a7 + 8) = a8;
  *(double *)(a7 + 16) = a9;
  *(_OWORD *)(a7 + 24) = v34;
  *(_QWORD *)(a7 + 40) = v33;
  *(_BYTE *)(a7 + 48) = a3;
  *(_OWORD *)(a7 + 56) = v36;
  *(_QWORD *)(a7 + 72) = v35;
  *(double *)(a7 + 80) = a10;
  *(double *)(a7 + 88) = a11;
  *(double *)(a7 + 96) = a12;
  *(double *)(a7 + 104) = a13;
  *(_BYTE *)(a7 + 112) = a5;
  *(double *)(a7 + 120) = a14;
  *(double *)(a7 + 128) = a15;
  *(double *)(a7 + 136) = a16;
  *(double *)(a7 + 144) = a17;
  *(double *)(a7 + 152) = a18;
  *(_BYTE *)(a7 + 160) = a6;
  *(double *)(a7 + 168) = a19;
  *(double *)(a7 + 176) = a20;
  return result;
}

double sub_1D5D85E38@<D0>(double *a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, char a5@<W4>, __int128 *a6@<X5>, char a7@<W6>, __int128 *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, double a14@<D4>, double a15@<D5>, double a16@<D6>, double a17@<D7>, double a18, double a19, double a20,double a21,double a22,double a23,double a24,double a25,double a26,double a27,double a28,double a29,__int128 *a30,__int128 *a31,double a32,double a33,double a34,double a35,char a36,double a37,double a38,double a39,double a40,double a41,double a42,double a43,double a44,double a45,double *a46,double a47,__int128 *a48,uint64_t *a49,double a50,double a51,double a52)
{
  double v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  double result;
  __int128 v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  double v107;
  __int128 v108;
  uint64_t v109;
  char v110;
  char v111;
  char v112;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  _BYTE v130[7];
  _BYTE v131[7];
  _BYTE v132[7];
  _BYTE v133[7];
  int v134;
  char v135;
  _BYTE v136[7];
  _BYTE v137[7];
  _BYTE v138[7];

  v70 = *a1;
  v69 = a1[1];
  v53 = a1[3];
  v68 = a1[2];
  v92 = *a3;
  v91 = a3[1];
  v109 = a3[2];
  v90 = *(_OWORD *)(a3 + 3);
  v89 = a3[5];
  v88 = *a4;
  v54 = *((_BYTE *)a4 + 8);
  v87 = a4[2];
  v55 = *((_BYTE *)a4 + 24);
  v86 = *((_OWORD *)a4 + 2);
  v85 = *((_OWORD *)a4 + 3);
  v84 = *((_OWORD *)a4 + 4);
  v83 = a4[10];
  v82 = a4[11];
  v56 = *((_BYTE *)a4 + 96);
  v57 = *((_BYTE *)a4 + 97);
  v58 = *((_BYTE *)a4 + 98);
  v106 = *a6;
  v108 = a6[1];
  v81 = *((_QWORD *)a6 + 4);
  v80 = *((_QWORD *)a6 + 5);
  v126 = a8[8];
  v127 = a8[9];
  v128 = a8[10];
  v129 = *((_QWORD *)a8 + 22);
  v122 = a8[4];
  v123 = a8[5];
  v124 = a8[6];
  v125 = a8[7];
  v118 = *a8;
  v119 = a8[1];
  v120 = a8[2];
  v121 = a8[3];
  v101 = *a30;
  v100 = a30[1];
  v79 = *((_QWORD *)a30 + 4);
  v78 = *((_QWORD *)a30 + 5);
  v99 = *a31;
  v59 = *((_BYTE *)a49 + 8);
  v60 = *((_BYTE *)a49 + 24);
  v112 = *((_BYTE *)a49 + 96);
  v111 = *((_BYTE *)a49 + 97);
  v110 = *((_BYTE *)a49 + 98);
  v77 = *((_QWORD *)a31 + 2);
  v76 = *((_QWORD *)a31 + 3);
  v66 = *(_OWORD *)a46;
  v67 = a46[2];
  v71 = a46[3];
  v93 = *a48;
  v94 = a48[1];
  v95 = *((_QWORD *)a48 + 4);
  v96 = *((_QWORD *)a48 + 5);
  v97 = *a49;
  v98 = a49[2];
  v102 = *((_OWORD *)a49 + 2);
  v103 = *((_OWORD *)a49 + 3);
  v104 = *((_OWORD *)a49 + 4);
  v105 = a49[10];
  v107 = *((double *)a49 + 11);
  sub_1D5D8A5F4(a10);
  v75 = a10;
  sub_1D5D8A3E0(a11);
  sub_1D5D8A354(a12);
  sub_1D5D8A46C(a13);
  *(double *)&v117 = v70;
  *((double *)&v117 + 1) = v69;
  sub_1D5D8A884(v70, v69, v68, v53);
  sub_1D5D8A54C(a14);
  sub_1D5D8A3C4(a15);
  sub_1D5D8A338(a16);
  sub_1D5D8A31C(a17);
  sub_1D5D8A290(a18);
  sub_1D5D8A258(a19);
  sub_1D5D8A2E4(a20);
  sub_1D5D8A2C8(a21);
  sub_1D5D8A274(a22);
  sub_1D5D8A2AC(a23);
  sub_1D5D8A514(a24);
  sub_1D5D8A488(a25);
  sub_1D5D8A584(a26);
  sub_1D5D8A3FC(a27);
  sub_1D5D8A5D8(a28);
  sub_1D5D8A5BC(a29);
  sub_1D5D8A530(a32);
  sub_1D5D8A62C(a33);
  sub_1D5D8A370(a34);
  sub_1D5D8A4F8(a35);
  sub_1D5D8A610(a37);
  sub_1D5D8A4DC(a38);
  sub_1D5D8A434(a39);
  sub_1D5D8A300(a40);
  sub_1D5D8A4C0(a41);
  sub_1D5D8A3A8(a42);
  sub_1D5D8A5A0(a43);
  sub_1D5D8A38C(a44);
  sub_1D5D8A418(a45);
  sub_1D5D8A648(*(double *)&v66, *((double *)&v66 + 1), v67, v71);
  sub_1D5D8A568(a47);
  sub_1D5D8AABC(a51);
  sub_1D5D8A4A4(a50);
  sub_1D5D8A450(a52);
  *(double *)a9 = v75;
  *(double *)(a9 + 8) = a11;
  *(double *)(a9 + 16) = a12;
  *(double *)(a9 + 24) = a13;
  *(_OWORD *)(a9 + 32) = v117;
  *(double *)(a9 + 48) = v68;
  *(double *)(a9 + 56) = v53;
  *(double *)(a9 + 64) = a14;
  *(double *)(a9 + 72) = a15;
  *(double *)(a9 + 80) = a16;
  *(double *)(a9 + 88) = a17;
  *(double *)(a9 + 104) = a18;
  *(double *)(a9 + 112) = a19;
  *(double *)(a9 + 120) = a20;
  *(double *)(a9 + 128) = a21;
  *(double *)(a9 + 136) = a22;
  *(double *)(a9 + 144) = a23;
  *(_QWORD *)(a9 + 160) = v92;
  *(_QWORD *)(a9 + 168) = v91;
  *(_OWORD *)(a9 + 184) = v90;
  *(_QWORD *)(a9 + 200) = v89;
  *(_QWORD *)(a9 + 208) = v88;
  *(_QWORD *)(a9 + 224) = v87;
  *(_OWORD *)(a9 + 240) = v86;
  *(_OWORD *)(a9 + 256) = v85;
  *(_OWORD *)(a9 + 272) = v84;
  *(_QWORD *)(a9 + 288) = v83;
  *(_QWORD *)(a9 + 296) = v82;
  *(double *)(a9 + 312) = a24;
  *(double *)(a9 + 320) = a25;
  *(_QWORD *)(a9 + 360) = v81;
  *(_QWORD *)(a9 + 368) = v80;
  *(double *)(a9 + 376) = a26;
  *(double *)(a9 + 384) = a27;
  *(double *)(a9 + 392) = a28;
  *(double *)(a9 + 408) = a29;
  *(_QWORD *)(a9 + 632) = v79;
  *(_QWORD *)(a9 + 640) = v78;
  *(_QWORD *)(a9 + 664) = v77;
  *(_QWORD *)(a9 + 672) = v76;
  *(double *)(a9 + 680) = a32;
  *(double *)(a9 + 688) = a33;
  *(double *)(a9 + 696) = a34;
  *(_OWORD *)(a9 + 544) = v126;
  *(_OWORD *)(a9 + 560) = v127;
  *(_OWORD *)(a9 + 576) = v128;
  *(_OWORD *)(a9 + 480) = v122;
  *(_OWORD *)(a9 + 496) = v123;
  *(_OWORD *)(a9 + 512) = v124;
  *(_OWORD *)(a9 + 528) = v125;
  *(_OWORD *)(a9 + 416) = v118;
  *(_OWORD *)(a9 + 432) = v119;
  *(_OWORD *)(a9 + 448) = v120;
  *(_OWORD *)(a9 + 464) = v121;
  *(_OWORD *)(a9 + 328) = v106;
  *(_QWORD *)(a9 + 592) = v129;
  *(_BYTE *)(a9 + 96) = a2;
  *(_DWORD *)(a9 + 97) = LODWORD(a52);
  *(_DWORD *)(a9 + 100) = *(_QWORD *)&a52 >> 24;
  *(_BYTE *)(a9 + 152) = a5;
  *(_DWORD *)(a9 + 156) = *(_DWORD *)&v138[3];
  *(_DWORD *)(a9 + 153) = *(_DWORD *)v138;
  *(_QWORD *)(a9 + 176) = v109;
  *(_BYTE *)(a9 + 216) = v54;
  *(_DWORD *)(a9 + 220) = *(_DWORD *)&v137[3];
  *(_DWORD *)(a9 + 217) = *(_DWORD *)v137;
  *(_BYTE *)(a9 + 232) = v55;
  *(_DWORD *)(a9 + 236) = *(_DWORD *)&v136[3];
  *(_DWORD *)(a9 + 233) = *(_DWORD *)v136;
  *(_BYTE *)(a9 + 304) = v56;
  *(_BYTE *)(a9 + 305) = v57;
  *(_BYTE *)(a9 + 306) = v58;
  *(_DWORD *)(a9 + 307) = v134;
  *(_BYTE *)(a9 + 311) = v135;
  *(_OWORD *)(a9 + 344) = v108;
  *(_BYTE *)(a9 + 400) = a7;
  *(_DWORD *)(a9 + 404) = *(_DWORD *)&v133[3];
  *(_DWORD *)(a9 + 401) = *(_DWORD *)v133;
  *(_OWORD *)(a9 + 600) = v101;
  *(_OWORD *)(a9 + 616) = v100;
  *(_OWORD *)(a9 + 648) = v99;
  *(double *)(a9 + 704) = a35;
  *(_BYTE *)(a9 + 712) = a36;
  *(_DWORD *)(a9 + 716) = *(_DWORD *)&v132[3];
  *(_DWORD *)(a9 + 713) = *(_DWORD *)v132;
  *(double *)(a9 + 720) = a37;
  *(double *)(a9 + 728) = a38;
  *(double *)(a9 + 736) = a39;
  *(double *)(a9 + 744) = a40;
  *(double *)(a9 + 752) = a41;
  *(double *)(a9 + 760) = a42;
  *(double *)(a9 + 768) = a43;
  *(double *)(a9 + 776) = a44;
  *(double *)(a9 + 784) = a45;
  *(double *)(a9 + 792) = a52;
  *(double *)(a9 + 800) = a51;
  *(double *)(a9 + 808) = a50;
  *(_OWORD *)(a9 + 816) = v66;
  *(double *)(a9 + 832) = v67;
  *(double *)(a9 + 840) = v71;
  *(double *)(a9 + 848) = a47;
  *(_OWORD *)(a9 + 856) = v93;
  *(_OWORD *)(a9 + 872) = v94;
  *(_QWORD *)(a9 + 888) = v95;
  *(_QWORD *)(a9 + 896) = v96;
  *(_QWORD *)(a9 + 904) = v97;
  *(_BYTE *)(a9 + 912) = v59;
  *(_DWORD *)(a9 + 916) = *(_DWORD *)&v131[3];
  *(_DWORD *)(a9 + 913) = *(_DWORD *)v131;
  *(_QWORD *)(a9 + 920) = v98;
  *(_BYTE *)(a9 + 928) = v60;
  *(_DWORD *)(a9 + 932) = *(_DWORD *)&v130[3];
  *(_DWORD *)(a9 + 929) = *(_DWORD *)v130;
  *(_OWORD *)(a9 + 936) = v102;
  *(_OWORD *)(a9 + 952) = v103;
  *(_OWORD *)(a9 + 968) = v104;
  *(_QWORD *)(a9 + 984) = v105;
  result = v107;
  *(double *)(a9 + 992) = v107;
  *(_BYTE *)(a9 + 1000) = v112;
  *(_BYTE *)(a9 + 1001) = v111;
  *(_BYTE *)(a9 + 1002) = v110;
  return result;
}

uint64_t sub_1D5D868AC(uint64_t result, uint64_t a2, double a3)
{
  double *v3;
  double v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;

  v4 = a3;
  if (a3 < 0.0 || a3 > 1.0)
  {
    v7 = result;
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v8 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1D5E38580;
    v10 = v8;
    sub_1D5E376B0();
    v11 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
    v12 = sub_1D5D889BC();
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0xE000000000000000;
    *(_QWORD *)(v9 + 96) = v11;
    *(_QWORD *)(v9 + 104) = v12;
    *(_QWORD *)(v9 + 64) = v12;
    *(_QWORD *)(v9 + 72) = 0xD000000000000021;
    *(_QWORD *)(v9 + 80) = 0x80000001D5E48160;
    *(_QWORD *)(v9 + 136) = v11;
    *(_QWORD *)(v9 + 144) = v12;
    *(_QWORD *)(v9 + 112) = v7;
    *(_QWORD *)(v9 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v9 + 176) = v11;
    *(_QWORD *)(v9 + 184) = v12;
    *(_QWORD *)(v9 + 152) = 0;
    *(_QWORD *)(v9 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v4 = 1.0;
  }
  *v3 = v4;
  return result;
}

uint64_t sub_1D5D86A68(uint64_t result, uint64_t a2, double a3)
{
  double *v3;
  double v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;

  v4 = a3;
  if (a3 < 0.0)
  {
    v6 = result;
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v7 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1D5E38580;
    v9 = v7;
    sub_1D5E376B0();
    v10 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1D5D889BC();
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0xE000000000000000;
    *(_QWORD *)(v8 + 96) = v10;
    *(_QWORD *)(v8 + 104) = v11;
    *(_QWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 72) = 0xD00000000000001FLL;
    *(_QWORD *)(v8 + 80) = 0x80000001D5E48070;
    *(_QWORD *)(v8 + 136) = v10;
    *(_QWORD *)(v8 + 144) = v11;
    *(_QWORD *)(v8 + 112) = v6;
    *(_QWORD *)(v8 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v8 + 176) = v10;
    *(_QWORD *)(v8 + 184) = v11;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v4 = 1.0;
  }
  *v3 = v4;
  return result;
}

uint64_t sub_1D5D86C1C(uint64_t result, uint64_t a2, double a3)
{
  double *v3;
  double v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;

  v4 = a3;
  if (a3 < 0.0 || a3 > 1.0)
  {
    v7 = result;
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v8 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1D5E38580;
    v10 = v8;
    sub_1D5E376B0();
    v11 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
    v12 = sub_1D5D889BC();
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0xE000000000000000;
    *(_QWORD *)(v9 + 96) = v11;
    *(_QWORD *)(v9 + 104) = v12;
    *(_QWORD *)(v9 + 64) = v12;
    *(_QWORD *)(v9 + 72) = 0xD000000000000021;
    *(_QWORD *)(v9 + 80) = 0x80000001D5E48160;
    *(_QWORD *)(v9 + 136) = v11;
    *(_QWORD *)(v9 + 144) = v12;
    *(_QWORD *)(v9 + 112) = v7;
    *(_QWORD *)(v9 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v9 + 176) = v11;
    *(_QWORD *)(v9 + 184) = v12;
    *(_QWORD *)(v9 + 152) = 0;
    *(_QWORD *)(v9 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v4 = 0.0;
  }
  *v3 = v4;
  return result;
}

double sub_1D5D86DD4@<D0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>, double a11@<D4>, double a12@<D5>, double a13@<D6>, double a14@<D7>, double a15, double a16)
{
  double result;

  sub_1D5D874F4(a7);
  sub_1D5D876E4(a8);
  sub_1D5D872E0(a9);
  sub_1D5D878E4(a10);
  sub_1D5D87334(a11);
  sub_1D5D872C4(a12);
  sub_1D5D87700(a13);
  sub_1D5D872FC(a14);
  sub_1D5D87318(a15);
  sub_1D5D876C8(a16);
  result = a16;
  *(double *)a6 = a7;
  *(_BYTE *)(a6 + 8) = a1;
  *(double *)(a6 + 16) = a8;
  *(_BYTE *)(a6 + 24) = a2;
  *(double *)(a6 + 32) = a9;
  *(double *)(a6 + 40) = a10;
  *(double *)(a6 + 48) = a11;
  *(double *)(a6 + 56) = a12;
  *(double *)(a6 + 64) = a13;
  *(double *)(a6 + 72) = a14;
  *(double *)(a6 + 80) = a15;
  *(double *)(a6 + 88) = a16;
  *(_BYTE *)(a6 + 96) = a3;
  *(_BYTE *)(a6 + 97) = a4;
  *(_BYTE *)(a6 + 98) = a5;
  return result;
}

uint64_t sub_1D5D86F60(uint64_t result, uint64_t a2, double a3)
{
  double *v3;
  double v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;

  v4 = a3;
  if (a3 < 0.0)
  {
    v6 = result;
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v7 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1D5E38580;
    v9 = v7;
    sub_1D5E376B0();
    v10 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1D5D889BC();
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0xE000000000000000;
    *(_QWORD *)(v8 + 96) = v10;
    *(_QWORD *)(v8 + 104) = v11;
    *(_QWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 72) = 0xD00000000000001FLL;
    *(_QWORD *)(v8 + 80) = 0x80000001D5E48070;
    *(_QWORD *)(v8 + 136) = v10;
    *(_QWORD *)(v8 + 144) = v11;
    *(_QWORD *)(v8 + 112) = v6;
    *(_QWORD *)(v8 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v8 + 176) = v10;
    *(_QWORD *)(v8 + 184) = v11;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v4 = 0.0;
  }
  *v3 = v4;
  return result;
}

uint64_t sub_1D5D87110(uint64_t result, uint64_t a2, double a3)
{
  double *v3;
  double v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;

  v4 = a3;
  if (a3 < 0.0)
  {
    v6 = result;
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v7 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1D5E38580;
    v9 = v7;
    sub_1D5E376B0();
    v10 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1D5D889BC();
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0xE000000000000000;
    *(_QWORD *)(v8 + 96) = v10;
    *(_QWORD *)(v8 + 104) = v11;
    *(_QWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 72) = 0xD00000000000001FLL;
    *(_QWORD *)(v8 + 80) = 0x80000001D5E48070;
    *(_QWORD *)(v8 + 136) = v10;
    *(_QWORD *)(v8 + 144) = v11;
    *(_QWORD *)(v8 + 112) = v6;
    *(_QWORD *)(v8 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v8 + 176) = v10;
    *(_QWORD *)(v8 + 184) = v11;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v4 = 2.0;
  }
  *v3 = v4;
  return result;
}

uint64_t sub_1D5D872C4(double a1)
{
  return sub_1D5D86F60(0xD000000000000024, 0x80000001D5E48210, a1);
}

uint64_t sub_1D5D872E0(double a1)
{
  return sub_1D5D86A68(0xD000000000000021, 0x80000001D5E48280, a1);
}

uint64_t sub_1D5D872FC(double a1)
{
  return sub_1D5D87110(0xD00000000000001CLL, 0x80000001D5E481D0, a1);
}

uint64_t sub_1D5D87318(double a1)
{
  return sub_1D5D87110(0xD00000000000001BLL, 0x80000001D5E481B0, a1);
}

void sub_1D5D87334(double a1)
{
  double *v1;
  double v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1;
  if (a1 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v3 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1D5E38580;
    v5 = v3;
    sub_1D5E376B0();
    v6 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
    v7 = sub_1D5D889BC();
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0xE000000000000000;
    *(_QWORD *)(v4 + 96) = v6;
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(v4 + 64) = v7;
    *(_QWORD *)(v4 + 72) = 0xD00000000000001FLL;
    *(_QWORD *)(v4 + 80) = 0x80000001D5E48070;
    *(_QWORD *)(v4 + 136) = v6;
    *(_QWORD *)(v4 + 144) = v7;
    *(_QWORD *)(v4 + 112) = 0xD00000000000001BLL;
    *(_QWORD *)(v4 + 120) = 0x80000001D5E48240;
    sub_1D5E376B0();
    *(_QWORD *)(v4 + 176) = v6;
    *(_QWORD *)(v4 + 184) = v7;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v2 = 5.0;
  }
  *v1 = v2;
}

void sub_1D5D874F4(double a1)
{
  double *v1;
  double v2;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;

  v2 = a1;
  if (a1 < 0.0 || a1 > 1.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v4 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1D5E38580;
    v6 = v4;
    sub_1D5E376B0();
    v7 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v5 + 56) = MEMORY[0x1E0DEA968];
    v8 = sub_1D5D889BC();
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0xE000000000000000;
    *(_QWORD *)(v5 + 96) = v7;
    *(_QWORD *)(v5 + 104) = v8;
    *(_QWORD *)(v5 + 64) = v8;
    *(_QWORD *)(v5 + 72) = 0xD000000000000021;
    *(_QWORD *)(v5 + 80) = 0x80000001D5E48160;
    *(_QWORD *)(v5 + 136) = v7;
    *(_QWORD *)(v5 + 144) = v8;
    *(_QWORD *)(v5 + 112) = 0xD000000000000019;
    *(_QWORD *)(v5 + 120) = 0x80000001D5E482D0;
    sub_1D5E376B0();
    *(_QWORD *)(v5 + 176) = v7;
    *(_QWORD *)(v5 + 184) = v8;
    *(_QWORD *)(v5 + 152) = 0;
    *(_QWORD *)(v5 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v2 = 0.05;
  }
  *v1 = v2;
}

uint64_t sub_1D5D876C8(double a1)
{
  return sub_1D5D87900(0xD000000000000016, 0x80000001D5E48190, a1);
}

uint64_t sub_1D5D876E4(double a1)
{
  return sub_1D5D868AC(0xD000000000000015, 0x80000001D5E482B0, a1);
}

uint64_t sub_1D5D87700(double a1)
{
  return sub_1D5D86F60(0xD000000000000014, 0x80000001D5E481F0, a1);
}

uint64_t sub_1D5D8771C(uint64_t result, uint64_t a2, double a3)
{
  double *v3;
  double v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;

  v4 = a3;
  if (a3 < 0.0 || a3 > 1.0)
  {
    v7 = result;
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v8 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1D5E38580;
    v10 = v8;
    sub_1D5E376B0();
    v11 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
    v12 = sub_1D5D889BC();
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0xE000000000000000;
    *(_QWORD *)(v9 + 96) = v11;
    *(_QWORD *)(v9 + 104) = v12;
    *(_QWORD *)(v9 + 64) = v12;
    *(_QWORD *)(v9 + 72) = 0xD000000000000021;
    *(_QWORD *)(v9 + 80) = 0x80000001D5E48160;
    *(_QWORD *)(v9 + 136) = v11;
    *(_QWORD *)(v9 + 144) = v12;
    *(_QWORD *)(v9 + 112) = v7;
    *(_QWORD *)(v9 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v9 + 176) = v11;
    *(_QWORD *)(v9 + 184) = v12;
    *(_QWORD *)(v9 + 152) = 0;
    *(_QWORD *)(v9 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v4 = 0.2;
  }
  *v3 = v4;
  return result;
}

uint64_t sub_1D5D878E4(double a1)
{
  return sub_1D5D8771C(0xD000000000000013, 0x80000001D5E48260, a1);
}

uint64_t sub_1D5D87900(uint64_t result, uint64_t a2, double a3)
{
  double *v3;
  double v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;

  v4 = a3;
  if (a3 < 0.0 || a3 > 1.0)
  {
    v7 = result;
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v8 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1D5E38580;
    v10 = v8;
    sub_1D5E376B0();
    v11 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
    v12 = sub_1D5D889BC();
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0xE000000000000000;
    *(_QWORD *)(v9 + 96) = v11;
    *(_QWORD *)(v9 + 104) = v12;
    *(_QWORD *)(v9 + 64) = v12;
    *(_QWORD *)(v9 + 72) = 0xD000000000000021;
    *(_QWORD *)(v9 + 80) = 0x80000001D5E48160;
    *(_QWORD *)(v9 + 136) = v11;
    *(_QWORD *)(v9 + 144) = v12;
    *(_QWORD *)(v9 + 112) = v7;
    *(_QWORD *)(v9 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v9 + 176) = v11;
    *(_QWORD *)(v9 + 184) = v12;
    *(_QWORD *)(v9 + 152) = 0;
    *(_QWORD *)(v9 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v4 = 0.3;
  }
  *v3 = v4;
  return result;
}

uint64_t ClassicTagMetadata.init(flowRate:subscriptionRate:quality:ontologyLevel:contentRating:relevanceRating:managed:managedWinner:groupable:groupableIfFavorited:groupableIfAutofavorited:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, int a10, char a11, int a12, char a13, __int16 a14, char a15, char a16, char a17, char a18, char a19)
{
  *(_QWORD *)a9 = result;
  *(_BYTE *)(a9 + 8) = a2 & 1;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4 & 1;
  *(_QWORD *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 40) = a6 & 1;
  *(_QWORD *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 56) = a8 & 1;
  *(_DWORD *)(a9 + 60) = a10;
  *(_BYTE *)(a9 + 64) = a11 & 1;
  *(_DWORD *)(a9 + 68) = a12;
  *(_BYTE *)(a9 + 72) = a13 & 1;
  *(_BYTE *)(a9 + 73) = a15;
  *(_BYTE *)(a9 + 74) = a16;
  *(_BYTE *)(a9 + 75) = a17;
  *(_BYTE *)(a9 + 76) = a18;
  *(_BYTE *)(a9 + 77) = a19;
  return result;
}

uint64_t storeEnumTagSinglePayload for ClassicTagMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 76) = 0;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 78) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 78) = 0;
    if (a2)
      *(_BYTE *)(result + 73) = a2 + 1;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ClassicTagMetadata(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 78))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 73);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for ClassicHeadlineCohortType()
{
  return &type metadata for ClassicHeadlineCohortType;
}

double sub_1D5D87C10@<D0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(uint64_t, double)@<X1>, void (*a3)(uint64_t, double)@<X2>, double *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  uint64_t v12;
  uint64_t v13;
  double result;

  v12 = a1();
  v13 = a2(v12, a6);
  a3(v13, a7);
  result = a7;
  *a4 = a5;
  a4[1] = a6;
  a4[2] = a7;
  return result;
}

uint64_t sub_1D5D87C9C(uint64_t result, uint64_t a2, double a3)
{
  double *v3;
  double v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;

  v4 = a3;
  if (a3 < 0.0)
  {
    v6 = result;
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v7 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1D5E38580;
    v9 = v7;
    sub_1D5E376B0();
    v10 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1D5D889BC();
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0xE000000000000000;
    *(_QWORD *)(v8 + 96) = v10;
    *(_QWORD *)(v8 + 104) = v11;
    *(_QWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 72) = 0xD00000000000001FLL;
    *(_QWORD *)(v8 + 80) = 0x80000001D5E48070;
    *(_QWORD *)(v8 + 136) = v10;
    *(_QWORD *)(v8 + 144) = v11;
    *(_QWORD *)(v8 + 112) = v6;
    *(_QWORD *)(v8 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v8 + 176) = v10;
    *(_QWORD *)(v8 + 184) = v11;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v4 = 10.0;
  }
  *v3 = v4;
  return result;
}

uint64_t sub_1D5D87E50(double a1)
{
  return sub_1D5D88080(0x45746C7561666544, 0xEF746E656E6F7078, a1);
}

uint64_t sub_1D5D87E74(double a1)
{
  return sub_1D5D87C9C(0x50746C7561666544, 0xEE00676E69646461, a1);
}

uint64_t sub_1D5D87E98(uint64_t result, uint64_t a2, double a3)
{
  double *v3;
  double v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;

  v4 = a3;
  if (a3 < 0.0 || a3 > 1.0)
  {
    v7 = result;
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v8 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1D5E38580;
    v10 = v8;
    sub_1D5E376B0();
    v11 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
    v12 = sub_1D5D889BC();
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0xE000000000000000;
    *(_QWORD *)(v9 + 96) = v11;
    *(_QWORD *)(v9 + 104) = v12;
    *(_QWORD *)(v9 + 64) = v12;
    *(_QWORD *)(v9 + 72) = 0xD000000000000021;
    *(_QWORD *)(v9 + 80) = 0x80000001D5E48160;
    *(_QWORD *)(v9 + 136) = v11;
    *(_QWORD *)(v9 + 144) = v12;
    *(_QWORD *)(v9 + 112) = v7;
    *(_QWORD *)(v9 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v9 + 176) = v11;
    *(_QWORD *)(v9 + 184) = v12;
    *(_QWORD *)(v9 + 152) = 0;
    *(_QWORD *)(v9 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v4 = 0.1;
  }
  *v3 = v4;
  return result;
}

uint64_t sub_1D5D88060(double a1)
{
  return sub_1D5D87E98(0x50746C7561666544, 0xEC000000726F6972, a1);
}

uint64_t sub_1D5D88080(uint64_t result, uint64_t a2, double a3)
{
  double *v3;
  double v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;

  v4 = a3;
  if (a3 < 0.0 || a3 > 1.0)
  {
    v7 = result;
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v8 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1D5E38580;
    v10 = v8;
    sub_1D5E376B0();
    v11 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
    v12 = sub_1D5D889BC();
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0xE000000000000000;
    *(_QWORD *)(v9 + 96) = v11;
    *(_QWORD *)(v9 + 104) = v12;
    *(_QWORD *)(v9 + 64) = v12;
    *(_QWORD *)(v9 + 72) = 0xD000000000000021;
    *(_QWORD *)(v9 + 80) = 0x80000001D5E48160;
    *(_QWORD *)(v9 + 136) = v11;
    *(_QWORD *)(v9 + 144) = v12;
    *(_QWORD *)(v9 + 112) = v7;
    *(_QWORD *)(v9 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v9 + 176) = v11;
    *(_QWORD *)(v9 + 184) = v12;
    *(_QWORD *)(v9 + 152) = 0;
    *(_QWORD *)(v9 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v4 = 0.5;
  }
  *v3 = v4;
  return result;
}

double sub_1D5D8823C()
{
  uint64_t v0;

  return *(double *)(v0 + 248);
}

double sub_1D5D88244()
{
  uint64_t v0;

  return *(double *)(v0 + 376);
}

_BYTE *sub_1D5D8824C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PremiumSubscriptionState()
{
  return &type metadata for PremiumSubscriptionState;
}

uint64_t sub_1D5D88268()
{
  return swift_bridgeObjectRetain();
}

double sub_1D5D88270()
{
  uint64_t v0;

  return *(double *)(v0 + 96);
}

double sub_1D5D88278()
{
  uint64_t v0;

  return *(double *)(v0 + 136);
}

double sub_1D5D88280()
{
  uint64_t v0;

  return *(double *)(v0 + 160);
}

uint64_t sub_1D5D88288()
{
  return swift_bridgeObjectRetain();
}

double sub_1D5D88290()
{
  uint64_t v0;

  return *(double *)(v0 + 192);
}

double sub_1D5D88298()
{
  uint64_t v0;

  return *(double *)(v0 + 368);
}

double sub_1D5D882A0()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

double sub_1D5D882A8()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

double sub_1D5D882B0()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

double sub_1D5D882B8()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

double sub_1D5D882C0()
{
  uint64_t v0;

  return *(double *)(v0 + 112);
}

uint64_t sub_1D5D882C8()
{
  return swift_bridgeObjectRetain();
}

double sub_1D5D882D0()
{
  uint64_t v0;

  return *(double *)(v0 + 144);
}

double sub_1D5D882D8()
{
  uint64_t v0;

  return *(double *)(v0 + 120);
}

uint64_t sub_1D5D882E0()
{
  return swift_bridgeObjectRetain();
}

double sub_1D5D882E8()
{
  uint64_t v0;

  return *(double *)(v0 + 256);
}

double sub_1D5D882F0()
{
  uint64_t v0;

  return *(double *)(v0 + 344);
}

double sub_1D5D882F8()
{
  uint64_t v0;

  return *(double *)(v0 + 152);
}

double sub_1D5D88300()
{
  uint64_t v0;

  return *(double *)(v0 + 288);
}

double sub_1D5D88308()
{
  uint64_t v0;

  return *(double *)(v0 + 264);
}

double sub_1D5D88310()
{
  uint64_t v0;

  return *(double *)(v0 + 216);
}

double sub_1D5D88318()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t sub_1D5D88320()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5D88328()
{
  return swift_bridgeObjectRetain();
}

double sub_1D5D88330()
{
  uint64_t v0;

  return *(double *)(v0 + 224);
}

double sub_1D5D88338()
{
  uint64_t v0;

  return *(double *)(v0 + 208);
}

double sub_1D5D88340()
{
  uint64_t v0;

  return *(double *)(v0 + 424);
}

double sub_1D5D88348()
{
  uint64_t v0;

  return *(double *)(v0 + 240);
}

unint64_t sub_1D5D88350()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 336) | ((unint64_t)*(unsigned __int8 *)(v0 + 340) << 32);
}

double sub_1D5D88374()
{
  uint64_t v0;

  return *(double *)(v0 + 104);
}

double sub_1D5D8837C()
{
  uint64_t v0;

  return *(double *)(v0 + 232);
}

double sub_1D5D88384()
{
  uint64_t v0;

  return *(double *)(v0 + 392);
}

double sub_1D5D8838C()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

double sub_1D5D88394()
{
  uint64_t v0;

  return *(double *)(v0 + 416);
}

uint64_t sub_1D5D8839C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 352);
}

double sub_1D5D883AC()
{
  uint64_t v0;

  return *(double *)(v0 + 408);
}

double sub_1D5D883B4()
{
  uint64_t v0;

  return *(double *)(v0 + 272);
}

uint64_t sub_1D5D883BC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 456);
}

double sub_1D5D883CC()
{
  uint64_t v0;

  return *(double *)(v0 + 384);
}

double sub_1D5D883D4()
{
  uint64_t v0;

  return *(double *)(v0 + 400);
}

double sub_1D5D883DC()
{
  uint64_t v0;

  return *(double *)(v0 + 280);
}

double sub_1D5D883E4()
{
  uint64_t v0;

  return *(double *)(v0 + 200);
}

double sub_1D5D883EC()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double sub_1D5D883F4()
{
  uint64_t v0;

  return *(double *)(v0 + 184);
}

double sub_1D5D883FC()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

uint64_t _s13ConfigurationV23ClusteringConfigurationV14DepthTransformVwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

double ClassicHeadlineCohortData.rawClicks.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double ClassicHeadlineCohortData.clicks.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double ClassicHeadlineCohortData.impressions.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

ValueMetadata *_s7FeatureOMa()
{
  return &_s7FeatureON;
}

__n128 sub_1D5D88460@<Q0>(double *a1@<X0>, double *a2@<X1>, __n128 *a3@<X8>)
{
  double v4;
  double v5;
  __n128 v6;
  __n128 result;
  __n128 v8;

  v4 = *a2;
  v5 = a2[1];
  v8 = *(__n128 *)a1;
  sub_1D5D89870(*a1, a1[1]);
  v6 = v8;
  v8.n128_f64[0] = v4;
  v8.n128_f64[1] = v5;
  sub_1D5D8988C(v4, v5);
  result = v8;
  *a3 = v6;
  a3[1] = v8;
  return result;
}

__n128 sub_1D5D884CC@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result;

  sub_1D5D88570(0xD00000000000001BLL, 0x80000001D5E49D80, 1.0, 60.0);
  sub_1D5D88570(0xD00000000000001ALL, 0x80000001D5E49D60, 0.0, 0.0);
  result = 0uLL;
  *a1 = xmmword_1D5E3D890;
  a1[1] = 0uLL;
  return result;
}

uint64_t sub_1D5D88570(uint64_t result, uint64_t a2, double a3, double a4)
{
  double *v4;
  uint64_t v6;
  double v7;
  double v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;

  v6 = result;
  v7 = a4;
  v8 = a3;
  if (a3 < 0.0 || a4 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v9 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1D5E38580;
    v11 = v9;
    sub_1D5E376B0();
    v12 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
    v13 = sub_1D5D889BC();
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0xE000000000000000;
    *(_QWORD *)(v10 + 96) = v12;
    *(_QWORD *)(v10 + 104) = v13;
    *(_QWORD *)(v10 + 64) = v13;
    *(_QWORD *)(v10 + 72) = 0xD00000000000001DLL;
    *(_QWORD *)(v10 + 80) = 0x80000001D5E49D40;
    *(_QWORD *)(v10 + 136) = v12;
    *(_QWORD *)(v10 + 144) = v13;
    *(_QWORD *)(v10 + 112) = v6;
    *(_QWORD *)(v10 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v10 + 176) = v12;
    *(_QWORD *)(v10 + 184) = v13;
    *(_QWORD *)(v10 + 152) = 0;
    *(_QWORD *)(v10 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v8 = 0.0;
    v7 = 60.0;
  }
  *v4 = v8;
  v4[1] = v7;
  return result;
}

ValueMetadata *_s13ConfigurationV23ClusteringConfigurationV14DepthTransformVMa()
{
  return &_s13ConfigurationV23ClusteringConfigurationV14DepthTransformVN;
}

ValueMetadata *_s20UserCohortMembershipVMa()
{
  return &_s20UserCohortMembershipVN;
}

void sub_1D5D8875C(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

void sub_1D5D88764(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

double sub_1D5D88770@<D0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  return sub_1D5D87C10((uint64_t (*)(void))sub_1D5D87E50, (uint64_t (*)(uint64_t, double))sub_1D5D87E74, (void (*)(uint64_t, double))sub_1D5D88060, a1, a2, a3, a4);
}

double sub_1D5D8878C()
{
  double result;

  sub_1D5D7C738(1.0);
  xmmword_1ED9AE640 = 0x3FF0000000000000uLL;
  *(_QWORD *)&xmmword_1ED9AE650 = 0;
  result = -1.79769313e308;
  *(__int128 *)((char *)&xmmword_1ED9AE650 + 8) = xmmword_1D5E441F0;
  return result;
}

uint64_t ClassicAggregateContext.context.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 96));
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 __swift_memcpy78_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 + 62);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1D5D88838(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF890);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AFBF8);
  v7 = sub_1D5E37710();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1D5DC8430(v13, (uint64_t)v6);
    result = sub_1D5D7CE24((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for ClassicArticleData();
    result = sub_1D5DC8478((uint64_t)v6, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v6[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D5D889BC()
{
  unint64_t result;

  result = qword_1ED9AFBF0;
  if (!qword_1ED9AFBF0)
  {
    result = MEMORY[0x1D827D8E0](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED9AFBF0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Location(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Location()
{
  return &type metadata for Location;
}

uint64_t sub_1D5D88A3C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t _s7TrainerVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s7TrainerVMn);
}

unint64_t sub_1D5D88A54()
{
  unint64_t result;

  result = qword_1ED9AFBE8;
  if (!qword_1ED9AFBE8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E458E0, &_s7FeatureON);
    atomic_store(result, (unint64_t *)&qword_1ED9AFBE8);
  }
  return result;
}

double sub_1D5D88A98@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 12390;
  *(_OWORD *)a1 = xmmword_1D5E45800;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

unint64_t sub_1D5D88AB4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[10];

  if (*(double *)(a3 + 8) == 1.0 || *(double *)a3 == 0.0)
    return sub_1D5D85858(MEMORY[0x1E0DEE9D8]);
  v11 = (double)*(uint64_t *)(a3 + 16);
  v12 = a2[3];
  v13 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v12);
  ReadonlyAggregateType.personalizationValue.getter(v12, v13);
  v17[2] = a4;
  v17[3] = a5;
  v17[4] = a2;
  *(double *)&v17[5] = a6;
  v17[6] = MEMORY[0x1E0C80A78](v14, v15);
  *(double *)&v17[7] = v11;
  return sub_1D5DC8A04(MEMORY[0x1E0DEE9E0], (void (*)(uint64_t *, _OWORD *))sub_1D5E27518, (uint64_t)v17, a1);
}

unint64_t sub_1D5D88BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  unint64_t v52;
  char v53;
  char isUniquelyReferenced_nonNull_native;
  char v55;
  unint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  char v62;
  double v63;
  uint64_t *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  int64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  double v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  unint64_t v110;
  uint64_t v111;
  _BOOL8 v112;
  uint64_t v113;
  char v114;
  unint64_t v115;
  char v116;
  double v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;

  v10 = type metadata accessor for ClassicArticleData();
  MEMORY[0x1E0C80A78](v10, v11);
  MEMORY[0x1E0C80A78](v12, v13);
  v17 = (char *)&v121 - v16;
  if (*(double *)(a3 + 104) <= 0.0 || *(double *)(a3 + 152) >= 1.0)
    return sub_1D5D85858(MEMORY[0x1E0DEE9D8]);
  v20 = *(_QWORD *)(a3 + 24);
  v21 = *(_QWORD *)(a3 + 32);
  v22 = *(_QWORD *)(a3 + 40);
  v23 = *(_OWORD *)(a3 + 56);
  v25 = *(_QWORD *)(a3 + 72);
  v24 = *(double *)(a3 + 80);
  v134 = MEMORY[0x1E0DEE9E8];
  v131 = *(_QWORD *)(a1 + 16);
  v125 = a4;
  v126 = a5;
  v124 = a2;
  if (v131)
  {
    v121 = v23;
    v130 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v26 = *(_QWORD *)(v14 + 72);
    v128 = v15;
    v129 = v26;
    swift_bridgeObjectRetain();
    v27 = 0;
    do
    {
      sub_1D5D819C0(v130 + v129 * v27, (uint64_t)v17);
      v28 = (uint64_t *)&v17[*(int *)(v10 + 56)];
      v29 = *v28;
      v30 = v28[1];
      swift_bridgeObjectRetain();
      sub_1D5D81E38((uint64_t *)&v132, v29, v30);
      swift_bridgeObjectRelease();
      v31 = *(_QWORD *)&v17[*(int *)(v10 + 64)];
      v32 = *(_QWORD *)(v31 + 16);
      if (v32)
      {
        swift_bridgeObjectRetain();
        v33 = (uint64_t *)(v31 + 40);
        do
        {
          v34 = *(v33 - 1);
          v35 = *v33;
          swift_bridgeObjectRetain();
          sub_1D5D81E38((uint64_t *)&v132, v34, v35);
          swift_bridgeObjectRelease();
          v33 += 2;
          --v32;
        }
        while (v32);
        swift_bridgeObjectRelease();
      }
      ++v27;
      sub_1D5D7D008((uint64_t)v17);
    }
    while (v27 != v131);
    swift_bridgeObjectRelease();
    v123 = v134;
    v122 = a1;
    swift_bridgeObjectRetain();
    v36 = 0;
    v37 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v38 = v128;
    v127 = v10;
    do
    {
      sub_1D5D819C0(v130 + v129 * v36, v38);
      v39 = *(char **)(v38 + *(int *)(v10 + 64));
      v40 = (uint64_t *)(v38 + *(int *)(v10 + 56));
      v41 = *v40;
      v42 = v40[1];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v39 = sub_1D5D7DABC(0, *((_QWORD *)v39 + 2) + 1, 1, v39);
      v44 = *((_QWORD *)v39 + 2);
      v43 = *((_QWORD *)v39 + 3);
      if (v44 >= v43 >> 1)
        v39 = sub_1D5D7DABC((char *)(v43 > 1), v44 + 1, 1, v39);
      *((_QWORD *)v39 + 2) = v44 + 1;
      v45 = &v39[16 * v44];
      *((_QWORD *)v45 + 4) = v41;
      *((_QWORD *)v45 + 5) = v42;
      swift_bridgeObjectRelease();
      v46 = *((_QWORD *)v39 + 2);
      if (v46)
      {
        swift_bridgeObjectRetain();
        v47 = (uint64_t *)(v39 + 40);
        do
        {
          v48 = *(v47 - 1);
          v49 = *v47;
          v50 = v37[2];
          swift_bridgeObjectRetain_n();
          v51 = 0.0;
          if (v50)
          {
            v52 = sub_1D5D7FFCC(v48, v49);
            if ((v53 & 1) != 0)
              v51 = *(double *)(v37[7] + 8 * v52);
          }
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v132 = v37;
          v56 = sub_1D5D7FFCC(v48, v49);
          v57 = v37[2];
          v58 = (v55 & 1) == 0;
          v59 = v57 + v58;
          if (__OFADD__(v57, v58))
          {
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
            goto LABEL_111;
          }
          v60 = v55;
          if (v37[3] >= v59)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_1D5D989E4();
          }
          else
          {
            sub_1D5D80370(v59, isUniquelyReferenced_nonNull_native);
            v61 = sub_1D5D7FFCC(v48, v49);
            if ((v60 & 1) != (v62 & 1))
              goto LABEL_112;
            v56 = v61;
          }
          v63 = v51 + 1.0;
          v37 = (_QWORD *)v132;
          if ((v60 & 1) != 0)
          {
            *(double *)(*(_QWORD *)(v132 + 56) + 8 * v56) = v63;
          }
          else
          {
            *(_QWORD *)(v132 + 8 * (v56 >> 6) + 64) |= 1 << v56;
            v64 = (uint64_t *)(v37[6] + 16 * v56);
            *v64 = v48;
            v64[1] = v49;
            *(double *)(v37[7] + 8 * v56) = v63;
            v65 = v37[2];
            v66 = __OFADD__(v65, 1);
            v67 = v65 + 1;
            if (v66)
              goto LABEL_105;
            v37[2] = v67;
            swift_bridgeObjectRetain();
          }
          v47 += 2;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          --v46;
        }
        while (v46);
        swift_bridgeObjectRelease();
        v10 = v127;
      }
      ++v36;
      swift_bridgeObjectRelease();
      v38 = v128;
      sub_1D5D7D008(v128);
    }
    while (v36 != v131);
    swift_bridgeObjectRelease();
    v68 = v123;
    v23 = v121;
  }
  else
  {
    v37 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v68 = MEMORY[0x1E0DEE9E8];
  }
  v132 = v23;
  v133 = v25;
  v69 = sub_1D5E233B0((uint64_t)v37, (double *)&v132);
  swift_bridgeObjectRelease();
  v134 = MEMORY[0x1E0DEE9E8];
  v70 = *(_QWORD *)(v68 + 56);
  v129 = v68 + 56;
  v71 = 1 << *(_BYTE *)(v68 + 32);
  v72 = -1;
  if (v71 < 64)
    v72 = ~(-1 << v71);
  v73 = v72 & v70;
  v74 = (unint64_t)(v71 + 63) >> 6;
  swift_bridgeObjectRetain();
  v75 = 0;
  while (1)
  {
    if (v73)
    {
      v73 &= v73 - 1;
      goto LABEL_42;
    }
    v76 = v75 + 1;
    if (__OFADD__(v75, 1))
      goto LABEL_108;
    if (v76 >= v74)
      break;
    v77 = *(_QWORD *)(v129 + 8 * v76);
    ++v75;
    if (!v77)
    {
      v75 = v76 + 1;
      if (v76 + 1 >= v74)
        break;
      v77 = *(_QWORD *)(v129 + 8 * v75);
      if (!v77)
      {
        v75 = v76 + 2;
        if (v76 + 2 >= v74)
          break;
        v77 = *(_QWORD *)(v129 + 8 * v75);
        if (!v77)
        {
          v75 = v76 + 3;
          if (v76 + 3 >= v74)
            break;
          v77 = *(_QWORD *)(v129 + 8 * v75);
          if (!v77)
          {
            v75 = v76 + 4;
            if (v76 + 4 >= v74)
              break;
            v77 = *(_QWORD *)(v129 + 8 * v75);
            if (!v77)
            {
              v78 = v76 + 5;
              if (v78 >= v74)
                break;
              v77 = *(_QWORD *)(v129 + 8 * v78);
              if (!v77)
              {
                while (1)
                {
                  v75 = v78 + 1;
                  if (__OFADD__(v78, 1))
                    goto LABEL_110;
                  if (v75 >= v74)
                    goto LABEL_62;
                  v77 = *(_QWORD *)(v129 + 8 * v75);
                  ++v78;
                  if (v77)
                    goto LABEL_61;
                }
              }
              v75 = v78;
            }
          }
        }
      }
    }
LABEL_61:
    v73 = (v77 - 1) & v77;
LABEL_42:
    *(_QWORD *)&v132 = 2831206;
    *((_QWORD *)&v132 + 1) = 0xE300000000000000;
    swift_bridgeObjectRetain();
    sub_1D5E37458();
    sub_1D5D81E38((uint64_t *)&v132, v132, *((uint64_t *)&v132 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_62:
  swift_release();
  v132 = 0uLL;
  v80 = v125;
  v79 = v126;
  v81 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(v126 + 8) + 48))(v134, &v132, v125);
  v82 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v82, v83);
  *((_QWORD *)&v121 - 4) = v80;
  *((_QWORD *)&v121 - 3) = v79;
  *((_QWORD *)&v121 - 2) = v81;
  v84 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v85 = sub_1D5DC8844(MEMORY[0x1E0DEE9E0], (void (*)(uint64_t *, _QWORD *))sub_1D5E2753C, (uint64_t)(&v121 - 3), v68);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v132 = v20;
  *((_QWORD *)&v132 + 1) = v21;
  v133 = v22;
  v130 = sub_1D5E233B0(v85, (double *)&v132);
  swift_bridgeObjectRelease();
  v86 = 1 << *(_BYTE *)(v68 + 32);
  v87 = -1;
  if (v86 < 64)
    v87 = ~(-1 << v86);
  v88 = v87 & *(_QWORD *)(v68 + 56);
  v128 = (unint64_t)(v86 + 63) >> 6;
  swift_bridgeObjectRetain();
  v89 = 0;
  while (v88)
  {
    v90 = __clz(__rbit64(v88));
    v88 &= v88 - 1;
    v131 = v89;
    v91 = v90 | (v89 << 6);
LABEL_87:
    v96 = (uint64_t *)(*(_QWORD *)(v68 + 48) + 16 * v91);
    v98 = *v96;
    v97 = v96[1];
    v99 = *(_QWORD *)(v69 + 16);
    swift_bridgeObjectRetain_n();
    v100 = 0.0;
    v101 = 0.0;
    if (v99)
    {
      v102 = sub_1D5D7FFCC(v98, v97);
      if ((v103 & 1) != 0)
        v101 = *(double *)(*(_QWORD *)(v69 + 56) + 8 * v102);
    }
    if (*(_QWORD *)(v130 + 16))
    {
      swift_bridgeObjectRetain();
      v104 = sub_1D5D7FFCC(v98, v97);
      if ((v105 & 1) != 0)
        v100 = *(double *)(*(_QWORD *)(v130 + 56) + 8 * v104);
      swift_bridgeObjectRelease();
    }
    v106 = v69;
    v107 = v68;
    v108 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v132 = v84;
    v110 = sub_1D5D7FFCC(v98, v97);
    v111 = v84[2];
    v112 = (v109 & 1) == 0;
    v113 = v111 + v112;
    if (__OFADD__(v111, v112))
      goto LABEL_106;
    v114 = v109;
    if (v84[3] >= v113)
    {
      if ((v108 & 1) == 0)
        sub_1D5D989E4();
    }
    else
    {
      sub_1D5D80370(v113, v108);
      v115 = sub_1D5D7FFCC(v98, v97);
      if ((v114 & 1) != (v116 & 1))
        goto LABEL_112;
      v110 = v115;
    }
    v69 = v106;
    v117 = v24 * v101 + (1.0 - v24) * v100;
    v84 = (_QWORD *)v132;
    if ((v114 & 1) != 0)
    {
      *(double *)(*(_QWORD *)(v132 + 56) + 8 * v110) = v117;
    }
    else
    {
      *(_QWORD *)(v132 + 8 * (v110 >> 6) + 64) |= 1 << v110;
      v118 = (uint64_t *)(v84[6] + 16 * v110);
      *v118 = v98;
      v118[1] = v97;
      *(double *)(v84[7] + 8 * v110) = v117;
      v119 = v84[2];
      v66 = __OFADD__(v119, 1);
      v120 = v119 + 1;
      if (v66)
        goto LABEL_107;
      v84[2] = v120;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v68 = v107;
    v89 = v131;
  }
  v92 = v89 + 1;
  if (__OFADD__(v89, 1))
    goto LABEL_109;
  if (v92 >= v128)
  {
LABEL_103:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (unint64_t)v84;
  }
  v93 = *(_QWORD *)(v129 + 8 * v92);
  v94 = v89 + 1;
  if (v93)
    goto LABEL_86;
  v94 = v89 + 2;
  if (v89 + 2 >= v128)
    goto LABEL_103;
  v93 = *(_QWORD *)(v129 + 8 * v94);
  if (v93)
    goto LABEL_86;
  v94 = v89 + 3;
  if (v89 + 3 >= v128)
    goto LABEL_103;
  v93 = *(_QWORD *)(v129 + 8 * v94);
  if (v93)
    goto LABEL_86;
  v94 = v89 + 4;
  if (v89 + 4 >= v128)
    goto LABEL_103;
  v93 = *(_QWORD *)(v129 + 8 * v94);
  if (v93)
    goto LABEL_86;
  v94 = v89 + 5;
  if (v89 + 5 >= v128)
    goto LABEL_103;
  v93 = *(_QWORD *)(v129 + 8 * v94);
  if (v93)
  {
LABEL_86:
    v88 = (v93 - 1) & v93;
    v131 = v94;
    v91 = __clz(__rbit64(v93)) + (v94 << 6);
    goto LABEL_87;
  }
  v95 = v89 + 6;
  if (v89 + 6 >= v128)
    goto LABEL_103;
  v93 = *(_QWORD *)(v129 + 8 * v95);
  if (v93)
  {
    v94 = v89 + 6;
    goto LABEL_86;
  }
  while (1)
  {
    v94 = v95 + 1;
    if (__OFADD__(v95, 1))
      break;
    if (v94 >= v128)
      goto LABEL_103;
    v93 = *(_QWORD *)(v129 + 8 * v94);
    ++v95;
    if (v93)
      goto LABEL_86;
  }
LABEL_111:
  __break(1u);
LABEL_112:
  result = sub_1D5E3795C();
  __break(1u);
  return result;
}

ValueMetadata *_s13ConfigurationVMa()
{
  return &_s13ConfigurationVN;
}

ValueMetadata *_s13ConfigurationV13FeaturePriorsVMa()
{
  return &_s13ConfigurationV13FeaturePriorsVN;
}

ValueMetadata *_s13ConfigurationV12FeaturePriorVMa()
{
  return &_s13ConfigurationV12FeaturePriorVN;
}

ValueMetadata *_s13ConfigurationV11TopicConfigVMa()
{
  return &_s13ConfigurationV11TopicConfigVN;
}

ValueMetadata *_s13ConfigurationV20FeatureConfigurationVMa()
{
  return &_s13ConfigurationV20FeatureConfigurationVN;
}

__n128 sub_1D5D89694@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  unint64_t v12;
  unint64_t v13;
  __n128 result;
  __n128 v15;

  v15 = *a1;
  v12 = a1[1].n128_u64[0];
  v13 = a1[1].n128_u64[1];
  sub_1D5D89A88(a4);
  sub_1D5D89AA4(a5);
  sub_1D5D898C4(a6);
  sub_1D5D89C68(a7);
  sub_1D5D898A8(a2);
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(double *)(a3 + 16) = a6;
  result = v15;
  *(__n128 *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 40) = v12;
  *(_QWORD *)(a3 + 48) = v13;
  *(double *)(a3 + 56) = a7;
  *(_QWORD *)(a3 + 64) = a2;
  return result;
}

ValueMetadata *_s13ConfigurationV35PersonalizedMultiplierConfigurationVMa()
{
  return &_s13ConfigurationV35PersonalizedMultiplierConfigurationVN;
}

ValueMetadata *_s13ConfigurationV35ContentTriggerDampenerConfigurationVMa()
{
  return &_s13ConfigurationV35ContentTriggerDampenerConfigurationVN;
}

ValueMetadata *_s13ConfigurationV33SubscribedCountScoreConfigurationVMa()
{
  return &_s13ConfigurationV33SubscribedCountScoreConfigurationVN;
}

ValueMetadata *_s13ConfigurationV32PremiumSubscriptionConfigurationVMa()
{
  return &_s13ConfigurationV32PremiumSubscriptionConfigurationVN;
}

ValueMetadata *_s13ConfigurationV31PublisherDampeningConfigurationVMa()
{
  return &_s13ConfigurationV31PublisherDampeningConfigurationVN;
}

uint64_t sub_1D5D897C4@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  char v4;

  if (a2 >= 5)
    v4 = 0;
  else
    v4 = a2;
  *(_BYTE *)a3 = v4;
  *(double *)(a3 + 8) = a4;
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

ValueMetadata *_s13ConfigurationV30UserFeedbackScoreConfigurationVMa()
{
  return &_s13ConfigurationV30UserFeedbackScoreConfigurationVN;
}

ValueMetadata *_s13ConfigurationV30NicheContentScoreConfigurationVMa()
{
  return &_s13ConfigurationV30NicheContentScoreConfigurationVN;
}

ValueMetadata *_s13ConfigurationV27FlowEstimationConfigurationVMa()
{
  return &_s13ConfigurationV27FlowEstimationConfigurationVN;
}

ValueMetadata *_s13ConfigurationV26OntologyLevelConfigurationVMa()
{
  return &_s13ConfigurationV26OntologyLevelConfigurationVN;
}

uint64_t sub_1D5D8981C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t result;

  v3 = swift_bridgeObjectRetain();
  result = sub_1D5D7BA38(v3);
  *a2 = a1;
  return result;
}

ValueMetadata *_s13ConfigurationV23EvaluationConfigurationVMa()
{
  return &_s13ConfigurationV23EvaluationConfigurationVN;
}

uint64_t _s13ConfigurationV23ClusteringConfigurationV14TopicDiversityVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5D89870(double a1, double a2)
{
  return sub_1D5D88570(0xD00000000000001BLL, 0x80000001D5E49D80, a1, a2);
}

uint64_t sub_1D5D8988C(double a1, double a2)
{
  return sub_1D5D88570(0xD00000000000001ALL, 0x80000001D5E49D60, a1, a2);
}

uint64_t sub_1D5D898A8(uint64_t a1)
{
  return sub_1D5D8AAD8(a1, 0xD000000000000026, 0x80000001D5E49C60);
}

void sub_1D5D898C4(double a1)
{
  double *v1;
  double v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1;
  if (a1 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v3 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1D5E38580;
    v5 = v3;
    sub_1D5E376B0();
    v6 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
    v7 = sub_1D5D889BC();
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0xE000000000000000;
    *(_QWORD *)(v4 + 96) = v6;
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(v4 + 64) = v7;
    *(_QWORD *)(v4 + 72) = 0xD00000000000001FLL;
    *(_QWORD *)(v4 + 80) = 0x80000001D5E48070;
    *(_QWORD *)(v4 + 136) = v6;
    *(_QWORD *)(v4 + 144) = v7;
    *(_QWORD *)(v4 + 112) = 0xD000000000000023;
    *(_QWORD *)(v4 + 120) = 0x80000001D5E49CB0;
    sub_1D5E376B0();
    *(_QWORD *)(v4 + 176) = v6;
    *(_QWORD *)(v4 + 184) = v7;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v2 = 2000.0;
  }
  *v1 = v2;
}

uint64_t sub_1D5D89A88(double a1)
{
  return sub_1D5D868AC(0xD000000000000023, 0x80000001D5E49D10, a1);
}

void sub_1D5D89AA4(double a1)
{
  double *v1;
  double v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1;
  if (a1 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v3 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1D5E38580;
    v5 = v3;
    sub_1D5E376B0();
    v6 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
    v7 = sub_1D5D889BC();
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0xE000000000000000;
    *(_QWORD *)(v4 + 96) = v6;
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(v4 + 64) = v7;
    *(_QWORD *)(v4 + 72) = 0xD00000000000001FLL;
    *(_QWORD *)(v4 + 80) = 0x80000001D5E48070;
    *(_QWORD *)(v4 + 136) = v6;
    *(_QWORD *)(v4 + 144) = v7;
    *(_QWORD *)(v4 + 112) = 0xD000000000000021;
    *(_QWORD *)(v4 + 120) = 0x80000001D5E49CE0;
    sub_1D5E376B0();
    *(_QWORD *)(v4 + 176) = v6;
    *(_QWORD *)(v4 + 184) = v7;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v2 = 5000.0;
  }
  *v1 = v2;
}

uint64_t sub_1D5D89C68(double a1)
{
  return sub_1D5D86A68(0xD00000000000001FLL, 0x80000001D5E49C90, a1);
}

uint64_t sub_1D5D89C84(double a1)
{
  return sub_1D5D87110(0xD00000000000001CLL, 0x80000001D5E481D0, a1);
}

uint64_t sub_1D5D89CA0(double a1)
{
  return sub_1D5D87110(0xD00000000000001BLL, 0x80000001D5E481B0, a1);
}

uint64_t sub_1D5D89CBC(double a1)
{
  return sub_1D5D86F60(0xD000000000000019, 0x80000001D5E49420, a1);
}

uint64_t sub_1D5D89CD8(double a1)
{
  return sub_1D5D8771C(0xD000000000000019, 0x80000001D5E482D0, a1);
}

uint64_t sub_1D5D89CF4(double a1)
{
  return sub_1D5D86F60(0xD000000000000018, 0x80000001D5E482F0, a1);
}

uint64_t sub_1D5D89D10(double a1)
{
  return sub_1D5D86A68(0xD000000000000015, 0x80000001D5E48330, a1);
}

uint64_t sub_1D5D89D2C(double a1)
{
  return sub_1D5D86A68(0xD000000000000014, 0x80000001D5E48310, a1);
}

uint64_t sub_1D5D89D48(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;

  v2 = result;
  if (result < 0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v3 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1D5E38580;
    v5 = v3;
    sub_1D5E376B0();
    v6 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
    v7 = sub_1D5D889BC();
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0xE000000000000000;
    *(_QWORD *)(v4 + 96) = v6;
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(v4 + 64) = v7;
    *(_QWORD *)(v4 + 72) = 0xD00000000000001CLL;
    *(_QWORD *)(v4 + 80) = 0x80000001D5E480F0;
    *(_QWORD *)(v4 + 136) = v6;
    *(_QWORD *)(v4 + 144) = v7;
    *(_QWORD *)(v4 + 112) = 0xD000000000000014;
    *(_QWORD *)(v4 + 120) = 0x80000001D5E48350;
    v2 = 50;
    sub_1D5E376B0();
    *(_QWORD *)(v4 + 176) = v6;
    *(_QWORD *)(v4 + 184) = v7;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
  }
  *v1 = v2;
  return result;
}

uint64_t sub_1D5D89EF8(double a1)
{
  return sub_1D5D86F60(0xD00000000000001ALL, 0x80000001D5E48390, a1);
}

uint64_t sub_1D5D89F14(double a1)
{
  return sub_1D5D868AC(0xD000000000000012, 0x80000001D5E48370, a1);
}

uint64_t sub_1D5D89F30(double a1)
{
  return sub_1D5D86A68(0xD000000000000024, 0x80000001D5E48440, a1);
}

uint64_t sub_1D5D89F4C(double a1)
{
  return sub_1D5D87E98(0xD000000000000021, 0x80000001D5E48490, a1);
}

uint64_t sub_1D5D89F68(double a1)
{
  return sub_1D5D86A68(0xD000000000000020, 0x80000001D5E483B0, a1);
}

uint64_t sub_1D5D89F84(double a1)
{
  return sub_1D5D87110(0xD00000000000001CLL, 0x80000001D5E48470, a1);
}

uint64_t sub_1D5D89FA0(double a1)
{
  return sub_1D5D87110(0xD000000000000018, 0x80000001D5E483E0, a1);
}

uint64_t sub_1D5D89FBC(double a1)
{
  return sub_1D5D86C1C(0xD000000000000018, 0x80000001D5E48510, a1);
}

uint64_t sub_1D5D89FD8(double a1)
{
  return sub_1D5D86C1C(0xD000000000000017, 0x80000001D5E48400, a1);
}

void sub_1D5D89FF4(double a1)
{
  double *v1;
  double v2;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;

  v2 = a1;
  if (a1 < 0.0 || a1 > 1.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v4 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1D5E38580;
    v6 = v4;
    sub_1D5E376B0();
    v7 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v5 + 56) = MEMORY[0x1E0DEA968];
    v8 = sub_1D5D889BC();
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0xE000000000000000;
    *(_QWORD *)(v5 + 96) = v7;
    *(_QWORD *)(v5 + 104) = v8;
    *(_QWORD *)(v5 + 64) = v8;
    *(_QWORD *)(v5 + 72) = 0xD000000000000021;
    *(_QWORD *)(v5 + 80) = 0x80000001D5E48160;
    *(_QWORD *)(v5 + 136) = v7;
    *(_QWORD *)(v5 + 144) = v8;
    *(_QWORD *)(v5 + 112) = 0xD000000000000017;
    *(_QWORD *)(v5 + 120) = 0x80000001D5E48420;
    sub_1D5E376B0();
    *(_QWORD *)(v5 + 176) = v7;
    *(_QWORD *)(v5 + 184) = v8;
    *(_QWORD *)(v5 + 152) = 0;
    *(_QWORD *)(v5 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v2 = 0.06;
  }
  *v1 = v2;
}

uint64_t sub_1D5D8A1CC(double a1)
{
  return sub_1D5D86F60(0xD000000000000016, 0x80000001D5E484C0, a1);
}

uint64_t sub_1D5D8A1E8(double a1)
{
  return sub_1D5D88080(0xD000000000000016, 0x80000001D5E48530, a1);
}

uint64_t sub_1D5D8A204(double a1)
{
  return sub_1D5D86C1C(0xD000000000000016, 0x80000001D5E48570, a1);
}

uint64_t sub_1D5D8A220(double a1)
{
  return sub_1D5D86C1C(0xD00000000000001ELL, 0x80000001D5E48550, a1);
}

uint64_t sub_1D5D8A23C(double a1)
{
  return sub_1D5D86A68(0xD00000000000002DLL, 0x80000001D5E484E0, a1);
}

uint64_t sub_1D5D8A258(double a1)
{
  return sub_1D5D86A68(0xD000000000000041, 0x80000001D5E48AD0, a1);
}

uint64_t sub_1D5D8A274(double a1)
{
  return sub_1D5D86A68(0xD00000000000003ALL, 0x80000001D5E48A10, a1);
}

uint64_t sub_1D5D8A290(double a1)
{
  return sub_1D5D86A68(0xD000000000000039, 0x80000001D5E48B20, a1);
}

uint64_t sub_1D5D8A2AC(double a1)
{
  return sub_1D5D86A68(0xD000000000000034, 0x80000001D5E489D0, a1);
}

uint64_t sub_1D5D8A2C8(double a1)
{
  return sub_1D5D86A68(0xD000000000000030, 0x80000001D5E48A50, a1);
}

uint64_t sub_1D5D8A2E4(double a1)
{
  return sub_1D5D86A68(0xD000000000000030, 0x80000001D5E48A90, a1);
}

uint64_t sub_1D5D8A300(double a1)
{
  return sub_1D5D86A68(0xD00000000000002ELL, 0x80000001D5E487A0, a1);
}

uint64_t sub_1D5D8A31C(double a1)
{
  return sub_1D5D86A68(0xD00000000000002CLL, 0x80000001D5E48B60, a1);
}

uint64_t sub_1D5D8A338(double a1)
{
  return sub_1D5D868AC(0xD00000000000002BLL, 0x80000001D5E48B90, a1);
}

uint64_t sub_1D5D8A354(double a1)
{
  return sub_1D5D86F60(0xD00000000000002ALL, 0x80000001D5E48C70, a1);
}

uint64_t sub_1D5D8A370(double a1)
{
  return sub_1D5D86A68(0xD000000000000028, 0x80000001D5E48880, a1);
}

uint64_t sub_1D5D8A38C(double a1)
{
  return sub_1D5D868AC(0xD000000000000027, 0x80000001D5E486F0, a1);
}

uint64_t sub_1D5D8A3A8(double a1)
{
  return sub_1D5D868AC(0xD000000000000027, 0x80000001D5E48740, a1);
}

uint64_t sub_1D5D8A3C4(double a1)
{
  return sub_1D5D868AC(0xD000000000000027, 0x80000001D5E48BC0, a1);
}

uint64_t sub_1D5D8A3E0(double a1)
{
  return sub_1D5D86C1C(0xD000000000000027, 0x80000001D5E48CA0, a1);
}

uint64_t sub_1D5D8A3FC(double a1)
{
  return sub_1D5D86A68(0xD000000000000026, 0x80000001D5E48930, a1);
}

uint64_t sub_1D5D8A418(double a1)
{
  return sub_1D5D868AC(0xD000000000000026, 0x80000001D5E486C0, a1);
}

uint64_t sub_1D5D8A434(double a1)
{
  return sub_1D5D86A68(0xD000000000000025, 0x80000001D5E487D0, a1);
}

uint64_t sub_1D5D8A450(double a1)
{
  return sub_1D5D86C1C(0xD000000000000025, 0x80000001D5E48590, a1);
}

uint64_t sub_1D5D8A46C(double a1)
{
  return sub_1D5D868AC(0xD000000000000024, 0x80000001D5E48C40, a1);
}

uint64_t sub_1D5D8A488(double a1)
{
  return sub_1D5D86A68(0xD000000000000023, 0x80000001D5E48980, a1);
}

uint64_t sub_1D5D8A4A4(double a1)
{
  return sub_1D5D86C1C(0xD000000000000022, 0x80000001D5E485C0, a1);
}

uint64_t sub_1D5D8A4C0(double a1)
{
  return sub_1D5D868AC(0xD000000000000021, 0x80000001D5E48770, a1);
}

uint64_t sub_1D5D8A4DC(double a1)
{
  return sub_1D5D868AC(0xD000000000000021, 0x80000001D5E48800, a1);
}

uint64_t sub_1D5D8A4F8(double a1)
{
  return sub_1D5D86A68(0xD000000000000021, 0x80000001D5E48850, a1);
}

uint64_t sub_1D5D8A514(double a1)
{
  return sub_1D5D868AC(0xD00000000000001FLL, 0x80000001D5E489B0, a1);
}

uint64_t sub_1D5D8A530(double a1)
{
  return sub_1D5D86F60(0xD00000000000001ELL, 0x80000001D5E488D0, a1);
}

uint64_t sub_1D5D8A54C(double a1)
{
  return sub_1D5D868AC(0xD00000000000001DLL, 0x80000001D5E48BF0, a1);
}

uint64_t sub_1D5D8A568(double a1)
{
  return sub_1D5D86C1C(0xD00000000000001BLL, 0x80000001D5E48630, a1);
}

uint64_t sub_1D5D8A584(double a1)
{
  return sub_1D5D86A68(0xD00000000000001ALL, 0x80000001D5E48960, a1);
}

uint64_t sub_1D5D8A5A0(double a1)
{
  return sub_1D5D868AC(0xD000000000000018, 0x80000001D5E48720, a1);
}

uint64_t sub_1D5D8A5BC(double a1)
{
  return sub_1D5D868AC(0xD000000000000018, 0x80000001D5E488F0, a1);
}

uint64_t sub_1D5D8A5D8(double a1)
{
  return sub_1D5D868AC(0xD000000000000016, 0x80000001D5E48910, a1);
}

uint64_t sub_1D5D8A5F4(double a1)
{
  return sub_1D5D86A68(0xD000000000000013, 0x80000001D5E48CD0, a1);
}

uint64_t sub_1D5D8A610(double a1)
{
  return sub_1D5D868AC(0xD000000000000012, 0x80000001D5E48830, a1);
}

uint64_t sub_1D5D8A62C(double a1)
{
  return sub_1D5D868AC(0xD000000000000012, 0x80000001D5E488B0, a1);
}

void sub_1D5D8A648(double a1, double a2, double a3, double a4)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  BOOL v9;
  BOOL v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;

  v5 = a4;
  v6 = a3;
  v7 = a2;
  v8 = a1;
  v9 = a4 < 0.0 || a4 > 1.0;
  if (v9 || (a1 >= 0.0 ? (v10 = a1 > 1.0) : (v10 = 1), v10 || a3 < 0.0 || a3 > 1.0 || a2 < 0.0 || a2 > 1.0))
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v11 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1D5E38580;
    v13 = v11;
    sub_1D5E376B0();
    v14 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v12 + 56) = MEMORY[0x1E0DEA968];
    v15 = sub_1D5D889BC();
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = 0xE000000000000000;
    *(_QWORD *)(v12 + 96) = v14;
    *(_QWORD *)(v12 + 104) = v15;
    *(_QWORD *)(v12 + 64) = v15;
    *(_QWORD *)(v12 + 72) = 0xD000000000000032;
    *(_QWORD *)(v12 + 80) = 0x80000001D5E48650;
    *(_QWORD *)(v12 + 136) = v14;
    *(_QWORD *)(v12 + 144) = v15;
    *(_QWORD *)(v12 + 112) = 0xD000000000000028;
    *(_QWORD *)(v12 + 120) = 0x80000001D5E48690;
    sub_1D5E376B0();
    *(_QWORD *)(v12 + 176) = v14;
    *(_QWORD *)(v12 + 184) = v15;
    *(_QWORD *)(v12 + 152) = 0;
    *(_QWORD *)(v12 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v5 = 0.01;
    v6 = 0.12;
    v7 = 0.15;
    v8 = 0.1;
  }
  *v4 = v8;
  v4[1] = v7;
  v4[2] = v6;
  v4[3] = v5;
}

void sub_1D5D8A884(double a1, double a2, double a3, double a4)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  BOOL v9;
  BOOL v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;

  v5 = a4;
  v6 = a3;
  v7 = a2;
  v8 = a1;
  v9 = a4 < 0.0 || a4 > 1.0;
  if (v9 || (a1 >= 0.0 ? (v10 = a1 > 1.0) : (v10 = 1), v10 || a3 < 0.0 || a3 > 1.0 || a2 < 0.0 || a2 > 1.0))
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v11 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1D5E38580;
    v13 = v11;
    sub_1D5E376B0();
    v14 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v12 + 56) = MEMORY[0x1E0DEA968];
    v15 = sub_1D5D889BC();
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = 0xE000000000000000;
    *(_QWORD *)(v12 + 96) = v14;
    *(_QWORD *)(v12 + 104) = v15;
    *(_QWORD *)(v12 + 64) = v15;
    *(_QWORD *)(v12 + 72) = 0xD000000000000032;
    *(_QWORD *)(v12 + 80) = 0x80000001D5E48650;
    *(_QWORD *)(v12 + 136) = v14;
    *(_QWORD *)(v12 + 144) = v15;
    *(_QWORD *)(v12 + 112) = 0xD000000000000026;
    *(_QWORD *)(v12 + 120) = 0x80000001D5E48C10;
    sub_1D5E376B0();
    *(_QWORD *)(v12 + 176) = v14;
    *(_QWORD *)(v12 + 184) = v15;
    *(_QWORD *)(v12 + 152) = 0;
    *(_QWORD *)(v12 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v5 = 0.005;
    v6 = 0.07;
    v7 = 0.1;
    v8 = 0.04;
  }
  *v4 = v8;
  v4[1] = v7;
  v4[2] = v6;
  v4[3] = v5;
}

uint64_t sub_1D5D8AABC(double a1)
{
  return sub_1D5D86C1C(0xD000000000000030, 0x80000001D5E485F0, a1);
}

uint64_t sub_1D5D8AAD8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;

  v4 = result;
  if (result < 0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v7 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1D5E38580;
    v9 = v7;
    sub_1D5E376B0();
    v10 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1D5D889BC();
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0xE000000000000000;
    *(_QWORD *)(v8 + 96) = v10;
    *(_QWORD *)(v8 + 104) = v11;
    *(_QWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 72) = 0xD00000000000001CLL;
    *(_QWORD *)(v8 + 80) = 0x80000001D5E480F0;
    *(_QWORD *)(v8 + 136) = v10;
    *(_QWORD *)(v8 + 144) = v11;
    *(_QWORD *)(v8 + 112) = a2;
    *(_QWORD *)(v8 + 120) = a3;
    v4 = 5;
    sub_1D5E376B0();
    *(_QWORD *)(v8 + 176) = v10;
    *(_QWORD *)(v8 + 184) = v11;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
  }
  *v3 = v4;
  return result;
}

uint64_t sub_1D5D8AC7C()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  return (*(uint64_t (**)(double, double))(*(_QWORD *)(v0 + 24) + 16))(*(double *)(v0 + v1), *(double *)(v0 + v1 + 8));
}

uint64_t sub_1D5D8ACD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  result = MEMORY[0x1E0C80A78](a1, a2);
  if ((*(_BYTE *)(result + 16) & 1) != 0)
  {
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v14 = *(_QWORD *)result;
    v13 = *(_QWORD *)(result + 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2);
    v15 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = a2;
    *(_QWORD *)(v12 + 24) = a3;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v15, (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
    v16 = (_QWORD *)(v12 + ((v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8));
    *v16 = v14;
    v16[1] = v13;
    v11 = sub_1D5D8AC7C;
  }
  *a4 = v11;
  a4[1] = (uint64_t (*)())v12;
  return result;
}

uint64_t sub_1D5D8ADCC(char *a1, char *a2)
{
  return sub_1D5D7B66C(*a1, *a2);
}

unint64_t sub_1D5D8ADDC()
{
  unint64_t result;

  result = qword_1ED9AF830;
  if (!qword_1ED9AF830)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClassicHeadlineCohortType, &type metadata for ClassicHeadlineCohortType);
    atomic_store(result, (unint64_t *)&qword_1ED9AF830);
  }
  return result;
}

_BYTE *sub_1D5D8AE20(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t sub_1D5D8AE28()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1D5D8AE48()
{
  return ClassicAggregateContext.lookupAll()();
}

uint64_t sub_1D5D8AE68(uint64_t a1, __int128 *a2)
{
  return ClassicAggregateContext.lookup(with:option:)(a1, a2);
}

uint64_t sub_1D5D8AE88(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClassicAggregateContext<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1D5D8AEB4(uint64_t a1, uint64_t a2)
{
  return ClassicAggregateContext.createAggregate(for:clicks:impressions:)(a1, a2);
}

uint64_t type metadata accessor for ClassicAggregateContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ClassicAggregateContext);
}

uint64_t ClassicAggregateContext.lookupAll()()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 88) + 8) + 40))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t ClassicAggregateContext.init(context:baselinePriorProvider:featurePriorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;
  _QWORD *v11;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 80) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 96), a1);
  v10 = (_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 104));
  *v10 = a2;
  v10[1] = a3;
  v11 = (_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 112));
  *v11 = a4;
  v11[1] = a5;
  return v5;
}

uint64_t ClassicAggregateContext.lookup(with:option:)(uint64_t a1, __int128 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v5;

  v3 = *v2;
  v5 = *a2;
  return (*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 8) + 48))(a1, &v5, *(_QWORD *)(v3 + 80));
}

uint64_t ClassicAggregateContext.createAggregate(for:clicks:impressions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v2 + 88) + 16))(a1, a2, *(_QWORD *)(*(_QWORD *)v2 + 80));
}

uint64_t sub_1D5D8B00C(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_1D5D8B020(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1D5D8B03C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

uint64_t sub_1D5D8B084()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for AggregateContextOption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AggregateContextOption);
}

uint64_t sub_1D5D8B098()
{
  return sub_1D5D7B7B4(&qword_1ED9AF6B0, (uint64_t (*)(uint64_t))type metadata accessor for ClassicArticleData, (uint64_t)&protocol conformance descriptor for ClassicArticleData);
}

void sub_1D5D8B0C4()
{
  unint64_t v0;

  sub_1D5D7B308();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

BOOL static GroupableTag.Kind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t GroupableTag.Kind.hash(into:)()
{
  return sub_1D5E379B0();
}

uint64_t GroupableTag.Kind.hashValue.getter()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

BOOL sub_1D5D8B22C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1D5D8B244()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D8B288()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5D8B2B0()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t GroupableTag.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double GroupableTag.score.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t GroupableTag.optionalAutofavorite.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t GroupableTag.subscribed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t GroupableTag.autofavorited.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 26);
}

uint64_t GroupableTag.groupable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 27);
}

void GroupableTag.kind.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 28);
}

XavierNews::GroupableTag __swiftcall GroupableTag.init(identifier:score:optionalAutofavorite:subscribed:autofavorited:groupable:kind:)(Swift::String identifier, Swift::Double score, Swift::Bool optionalAutofavorite, Swift::Bool subscribed, Swift::Bool autofavorited, Swift::Bool groupable, XavierNews::GroupableTag::Kind kind)
{
  uint64_t v7;
  char v8;
  XavierNews::GroupableTag result;

  v8 = *(_BYTE *)kind;
  *(Swift::String *)v7 = identifier;
  *(Swift::Double *)(v7 + 16) = score;
  *(_BYTE *)(v7 + 24) = optionalAutofavorite;
  *(_BYTE *)(v7 + 25) = subscribed;
  *(_BYTE *)(v7 + 26) = autofavorited;
  *(_BYTE *)(v7 + 27) = groupable;
  *(_BYTE *)(v7 + 28) = v8;
  result.identifier = identifier;
  result.score = score;
  result.optionalAutofavorite = optionalAutofavorite;
  return result;
}

uint64_t GroupableTag.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

uint64_t GroupableTag.hashValue.getter()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D8B414()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D8B46C()
{
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5D8B4B0()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t GroupableTag.debugDescription.getter()
{
  sub_1D5E37458();
  swift_bridgeObjectRetain();
  sub_1D5E37458();
  swift_bridgeObjectRelease();
  sub_1D5E37458();
  sub_1D5E37584();
  return 0;
}

uint64_t sub_1D5D8B5B8()
{
  sub_1D5E37458();
  swift_bridgeObjectRetain();
  sub_1D5E37458();
  swift_bridgeObjectRelease();
  sub_1D5E37458();
  sub_1D5E37584();
  return 0;
}

uint64_t _s10XavierNews12GroupableTagV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  double v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  double v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  char v15;

  v2 = *(double *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 25);
  v5 = *(unsigned __int8 *)(a1 + 26);
  v6 = *(unsigned __int8 *)(a1 + 27);
  v7 = *(unsigned __int8 *)(a1 + 28);
  v8 = *(double *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 24);
  v10 = *(unsigned __int8 *)(a2 + 25);
  v11 = *(unsigned __int8 *)(a2 + 26);
  v12 = *(unsigned __int8 *)(a2 + 27);
  v13 = *(unsigned __int8 *)(a2 + 28);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    result = 0;
  }
  else
  {
    v15 = sub_1D5E378FC();
    result = 0;
    if ((v15 & 1) == 0)
      return result;
  }
  if (v2 == v8 && ((v3 ^ v9) & 1) == 0 && ((v4 ^ v10) & 1) == 0 && ((v5 ^ v11) & 1) == 0 && ((v6 ^ v12) & 1) == 0)
    return v7 ^ v13 ^ 1u;
  return result;
}

unint64_t sub_1D5D8B74C()
{
  unint64_t result;

  result = qword_1EFFB5100;
  if (!qword_1EFFB5100)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for GroupableTag.Kind, &type metadata for GroupableTag.Kind);
    atomic_store(result, (unint64_t *)&qword_1EFFB5100);
  }
  return result;
}

unint64_t sub_1D5D8B794()
{
  unint64_t result;

  result = qword_1ED9AE6B8;
  if (!qword_1ED9AE6B8)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for GroupableTag, &type metadata for GroupableTag);
    atomic_store(result, (unint64_t *)&qword_1ED9AE6B8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GroupableTag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for GroupableTag()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GroupableTag(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GroupableTag(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return a1;
}

__n128 __swift_memcpy29_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GroupableTag(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupableTag(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 29))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupableTag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 29) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 29) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupableTag()
{
  return &type metadata for GroupableTag;
}

uint64_t getEnumTagSinglePayload for GroupableTag.Kind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupableTag.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D5D8BAC4 + 4 * byte_1D5E37E9D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D5D8BAF8 + 4 * byte_1D5E37E98[v4]))();
}

uint64_t sub_1D5D8BAF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D8BB00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5D8BB08);
  return result;
}

uint64_t sub_1D5D8BB14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5D8BB1CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D5D8BB20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D8BB28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D8BB34(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D5D8BB40(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GroupableTag.Kind()
{
  return &type metadata for GroupableTag.Kind;
}

uint64_t sub_1D5D8BB5C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5D8BB64()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5D8BB6C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *v0;
  swift_bridgeObjectRetain();
  v1 = swift_bridgeObjectRetain();
  sub_1D5D8BBAC(v1);
  return v3;
}

uint64_t sub_1D5D8BBAC(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)sub_1D5DAAC54((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t _s17TagGroupingResultVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s17TagGroupingResultVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s17TagGroupingResultVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *_s17TagGroupingResultVwta(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s17TagGroupingResultVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s17TagGroupingResultVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s17TagGroupingResultVMa()
{
  return &_s17TagGroupingResultVN;
}

uint64_t sub_1D5D8BE34(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)sub_1D5DAAFFC((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1D5D8BF20(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)sub_1D5D7DABC((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1D5D8C008(uint64_t result)
{
  char **v1;
  int64_t v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  int64_t v40;
  unint64_t v41;

  v3 = *(_QWORD *)(result + 16);
  v4 = *v1;
  v5 = *((_QWORD *)*v1 + 2);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = *((_QWORD *)v4 + 3) >> 1, v9 < v6))
  {
    if (v5 <= v6)
      v10 = v5 + v3;
    else
      v10 = v5;
    v4 = sub_1D5D7DABC(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    v9 = *((_QWORD *)v4 + 3) >> 1;
  }
  v11 = *((_QWORD *)v4 + 2);
  v12 = v9 - v11;
  result = sub_1D5D9FA84((uint64_t)v38, &v4[16 * v11 + 32], v9 - v11, v7);
  if (result < v3)
    goto LABEL_15;
  if (result)
  {
    v14 = *((_QWORD *)v4 + 2);
    v15 = __OFADD__(v14, result);
    v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_48;
    }
    *((_QWORD *)v4 + 2) = v16;
  }
  if (result != v12)
  {
LABEL_13:
    result = sub_1D5D8C8D0();
    *v1 = v4;
    return result;
  }
LABEL_16:
  v2 = *((_QWORD *)v4 + 2);
  v3 = v38[0];
  v37 = v38[1];
  v13 = v39;
  v6 = v40;
  if (v41)
  {
    v17 = (v41 - 1) & v41;
    v18 = __clz(__rbit64(v41)) | (v40 << 6);
    v36 = (unint64_t)(v39 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_48:
  v32 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_66;
  v36 = (unint64_t)(v13 + 64) >> 6;
  if (v32 >= v36)
    goto LABEL_13;
  v33 = *(_QWORD *)(v37 + 8 * v32);
  v34 = v6 + 1;
  if (!v33)
  {
    v34 = v6 + 2;
    if (v6 + 2 >= v36)
      goto LABEL_13;
    v33 = *(_QWORD *)(v37 + 8 * v34);
    if (!v33)
    {
      v34 = v6 + 3;
      if (v6 + 3 >= v36)
        goto LABEL_13;
      v33 = *(_QWORD *)(v37 + 8 * v34);
      if (!v33)
      {
        v34 = v6 + 4;
        if (v6 + 4 >= v36)
          goto LABEL_13;
        v33 = *(_QWORD *)(v37 + 8 * v34);
        if (!v33)
        {
          v34 = v6 + 5;
          if (v6 + 5 >= v36)
            goto LABEL_13;
          v33 = *(_QWORD *)(v37 + 8 * v34);
          if (!v33)
          {
            v35 = v6 + 6;
            do
            {
              if (v36 == v35)
                goto LABEL_13;
              v33 = *(_QWORD *)(v37 + 8 * v35++);
            }
            while (!v33);
            v34 = v35 - 1;
          }
        }
      }
    }
  }
  v17 = (v33 - 1) & v33;
  v18 = __clz(__rbit64(v33)) + (v34 << 6);
  v6 = v34;
LABEL_18:
  v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v18);
  v21 = *v19;
  v20 = v19[1];
  result = swift_bridgeObjectRetain();
  while (1)
  {
    v22 = *((_QWORD *)v4 + 3);
    v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v2 + 1)
      break;
    if (v2 < v23)
      goto LABEL_23;
LABEL_20:
    *((_QWORD *)v4 + 2) = v2;
  }
  result = (uint64_t)sub_1D5D7DABC((char *)(v22 > 1), v2 + 1, 1, v4);
  v4 = (char *)result;
  v23 = *(_QWORD *)(result + 24) >> 1;
  if (v2 >= v23)
    goto LABEL_20;
  while (1)
  {
LABEL_23:
    v24 = &v4[16 * v2 + 32];
    *(_QWORD *)v24 = v21;
    *((_QWORD *)v24 + 1) = v20;
    ++v2;
    if (v17)
    {
      v25 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v26 = v25 | (v6 << 6);
      goto LABEL_41;
    }
    v27 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v27 >= v36)
      goto LABEL_45;
    v28 = *(_QWORD *)(v37 + 8 * v27);
    v29 = v6 + 1;
    if (!v28)
    {
      v29 = v6 + 2;
      if (v6 + 2 >= v36)
        goto LABEL_45;
      v28 = *(_QWORD *)(v37 + 8 * v29);
      if (!v28)
      {
        v29 = v6 + 3;
        if (v6 + 3 >= v36)
          goto LABEL_45;
        v28 = *(_QWORD *)(v37 + 8 * v29);
        if (!v28)
        {
          v29 = v6 + 4;
          if (v6 + 4 >= v36)
            goto LABEL_45;
          v28 = *(_QWORD *)(v37 + 8 * v29);
          if (!v28)
          {
            v29 = v6 + 5;
            if (v6 + 5 >= v36)
              goto LABEL_45;
            v28 = *(_QWORD *)(v37 + 8 * v29);
            if (!v28)
            {
              v30 = v6 + 6;
              while (v36 != v30)
              {
                v28 = *(_QWORD *)(v37 + 8 * v30++);
                if (v28)
                {
                  v29 = v30 - 1;
                  goto LABEL_40;
                }
              }
LABEL_45:
              *((_QWORD *)v4 + 2) = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_40:
    v17 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v29 << 6);
    v6 = v29;
LABEL_41:
    v31 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v26);
    v21 = *v31;
    v20 = v31[1];
    if (v2 >= v23)
    {
      result = swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    result = swift_bridgeObjectRetain();
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t sub_1D5D8C3D0(uint64_t result)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  int64_t v39;
  int64_t v40;
  char *v41;
  int64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;
  unint64_t v58;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = *((_QWORD *)v3 + 3) >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = sub_1D5D7F978(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    v8 = *((_QWORD *)v3 + 3) >> 1;
  }
  v10 = *((_QWORD *)v3 + 2);
  v11 = v8 - v10;
  result = sub_1D5DA0024((uint64_t)v56, (uint64_t)&v3[56 * v10 + 32], v8 - v10, v6);
  if (result < v2)
    goto LABEL_15;
  if (result)
  {
    v14 = *((_QWORD *)v3 + 2);
    v15 = __OFADD__(v14, result);
    v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_51;
    }
    *((_QWORD *)v3 + 2) = v16;
  }
  if (result != v11)
    goto LABEL_13;
LABEL_16:
  v13 = *((_QWORD *)v3 + 2);
  v50 = v56[0];
  v49 = v56[1];
  v12 = v57;
  v47 = v56[2];
  if (!v58)
  {
LABEL_51:
    v35 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      return result;
    }
    v29 = (unint64_t)(v47 + 64) >> 6;
    if (v35 >= v29)
      goto LABEL_13;
    v54 = v13;
    v44 = *(_QWORD *)(v49 + 8 * v35);
    if (!v44)
    {
      v45 = v12 + 2;
      if (v12 + 2 >= v29)
        goto LABEL_13;
      v44 = *(_QWORD *)(v49 + 8 * v45);
      if (v44)
      {
LABEL_60:
        v35 = v45;
      }
      else
      {
        if (v12 + 3 >= v29)
          goto LABEL_13;
        v44 = *(_QWORD *)(v49 + 8 * (v12 + 3));
        if (!v44)
          goto LABEL_66;
        v35 = v12 + 3;
      }
    }
LABEL_54:
    v17 = (v44 - 1) & v44;
    v18 = __clz(__rbit64(v44)) + (v35 << 6);
    v52 = v35;
    goto LABEL_18;
  }
  v52 = v57;
  v54 = *((_QWORD *)v3 + 2);
  v17 = (v58 - 1) & v58;
  v18 = __clz(__rbit64(v58)) | (v57 << 6);
LABEL_18:
  v19 = *(_QWORD *)(v50 + 56) + 56 * v18;
  v20 = *(_QWORD *)(v19 + 8);
  v22 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)(v19 + 24);
  v24 = *(_QWORD *)(v19 + 32);
  v23 = *(_QWORD *)(v19 + 40);
  v25 = *(unsigned __int8 *)(v19 + 48);
  v26 = *(_QWORD *)v19;
  sub_1D5D801B0(*(_QWORD *)v19, v20, v22, v21, v24, v23, *(_BYTE *)(v19 + 48));
  if (v25 == 255)
    goto LABEL_13;
  v48 = (unint64_t)(v47 + 64) >> 6;
  v12 = v52;
  v27 = v54;
  while (1)
  {
    v28 = *((_QWORD *)v3 + 3);
    v29 = v28 >> 1;
    v51 = v28 >> 1;
    if ((uint64_t)(v28 >> 1) < v27 + 1)
    {
      v55 = v26;
      v40 = v12;
      v41 = v3;
      v42 = v27;
      v43 = sub_1D5D7F978((char *)(v28 > 1), v27 + 1, 1, v41);
      v12 = v40;
      v27 = v42;
      v3 = v43;
      v26 = v55;
      v51 = *((_QWORD *)v43 + 3) >> 1;
    }
    if (v27 < v51)
      break;
LABEL_20:
    *((_QWORD *)v3 + 2) = v27;
    if ((_BYTE)v25 == 0xFF)
      goto LABEL_13;
  }
  while (1)
  {
    v35 = (uint64_t)&v3[56 * v27 + 32];
    *(_QWORD *)v35 = v26;
    *(_QWORD *)(v35 + 8) = v20;
    *(_QWORD *)(v35 + 16) = v22;
    *(_QWORD *)(v35 + 24) = v21;
    *(_QWORD *)(v35 + 32) = v24;
    *(_QWORD *)(v35 + 40) = v23;
    *(_BYTE *)(v35 + 48) = v25;
    v36 = v27 + 1;
    v54 = v36;
    if (!v17)
      break;
    v30 = __clz(__rbit64(v17));
    v53 = (v17 - 1) & v17;
    v31 = v12;
    v32 = v30 | (v12 << 6);
LABEL_26:
    v33 = *(_QWORD *)(v50 + 56) + 56 * v32;
    v26 = *(_QWORD *)v33;
    v20 = *(_QWORD *)(v33 + 8);
    v22 = *(_QWORD *)(v33 + 16);
    v21 = *(_QWORD *)(v33 + 24);
    v24 = *(_QWORD *)(v33 + 32);
    v23 = *(_QWORD *)(v33 + 40);
    v25 = *(unsigned __int8 *)(v33 + 48);
    sub_1D5D801B0(*(_QWORD *)v33, v20, v22, v21, v24, v23, *(_BYTE *)(v33 + 48));
    v27 = v54;
    v34 = v25 != 255 && v54 < v51;
    v12 = v31;
    v17 = v53;
    if (!v34)
      goto LABEL_20;
  }
  v31 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v31 >= v48)
      goto LABEL_56;
    v37 = *(_QWORD *)(v49 + 8 * v31);
    if (v37)
      goto LABEL_41;
    v38 = v12 + 2;
    if (v12 + 2 >= v48)
      goto LABEL_56;
    v37 = *(_QWORD *)(v49 + 8 * v38);
    if (!v37)
    {
      if (v12 + 3 >= v48)
        goto LABEL_56;
      v37 = *(_QWORD *)(v49 + 8 * (v12 + 3));
      if (v37)
      {
        v31 = v12 + 3;
        goto LABEL_41;
      }
      v38 = v12 + 4;
      if (v12 + 4 >= v48)
        goto LABEL_56;
      v37 = *(_QWORD *)(v49 + 8 * v38);
      if (!v37)
      {
        v31 = v12 + 5;
        if (v12 + 5 >= v48)
          goto LABEL_56;
        v37 = *(_QWORD *)(v49 + 8 * v31);
        if (!v37)
        {
          v39 = v12 + 6;
          while (v48 != v39)
          {
            v37 = *(_QWORD *)(v49 + 8 * v39++);
            if (v37)
            {
              v31 = v39 - 1;
              goto LABEL_41;
            }
          }
LABEL_56:
          *((_QWORD *)v3 + 2) = v36;
          goto LABEL_13;
        }
        goto LABEL_41;
      }
    }
    v31 = v38;
LABEL_41:
    v53 = (v37 - 1) & v37;
    v32 = __clz(__rbit64(v37)) + (v31 << 6);
    goto LABEL_26;
  }
  __break(1u);
LABEL_66:
  v45 = v35 + 3;
  if (v35 + 3 < v29)
  {
    v44 = *(_QWORD *)(v49 + 8 * v45);
    if (v44)
      goto LABEL_60;
    v35 += 4;
    if (v35 >= v29)
      goto LABEL_13;
    v44 = *(_QWORD *)(v49 + 8 * v35);
    if (!v44)
    {
      v46 = v12 + 6;
      while (v29 != v46)
      {
        v44 = *(_QWORD *)(v49 + 8 * v46++);
        if (v44)
        {
          v35 = v46 - 1;
          goto LABEL_54;
        }
      }
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_13:
  result = sub_1D5D8C8D0();
  *v1 = v3;
  return result;
}

uint64_t sub_1D5D8C8D0()
{
  return swift_release();
}

double sub_1D5D8C8D8()
{
  uint64_t v0;

  return *(double *)v0;
}

double sub_1D5D8C8E0()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double sub_1D5D8C8E8()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void sub_1D5D8C8F0(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

BOOL sub_1D5D8C8FC(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t sub_1D5D8C92C()
{
  sub_1D5E379BC();
  sub_1D5E379BC();
  return sub_1D5E379BC();
}

BOOL sub_1D5D8C980(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D5D8C994()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D8C9D8()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5D8CA00()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D8CA40()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x64757469676E6F6CLL;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x656475746974616CLL;
}

uint64_t sub_1D5D8CAA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5D8D430(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5D8CAC8()
{
  return 0;
}

void sub_1D5D8CAD4(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5D8CAE0()
{
  sub_1D5D8CC7C();
  return sub_1D5E37A04();
}

uint64_t sub_1D5D8CB08()
{
  sub_1D5D8CC7C();
  return sub_1D5E37A10();
}

uint64_t sub_1D5D8CB30(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;
  char v10;
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5108);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5D8CC7C();
  sub_1D5E379F8();
  v11 = 0;
  sub_1D5E37884();
  if (!v1)
  {
    v10 = 1;
    sub_1D5E37884();
    v9 = 2;
    sub_1D5E37884();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1D5D8CC7C()
{
  unint64_t result;

  result = qword_1EFFB5110;
  if (!qword_1EFFB5110)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E38228, &type metadata for Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5110);
  }
  return result;
}

uint64_t sub_1D5D8CCC0()
{
  sub_1D5E379A4();
  sub_1D5D8C92C();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D8CD10@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5118);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5D8CC7C();
  sub_1D5E379E0();
  if (!v2)
  {
    v16[15] = 0;
    sub_1D5E377B8();
    v10 = v9;
    v16[14] = 1;
    sub_1D5E377B8();
    v13 = v12;
    v16[13] = 2;
    sub_1D5E377B8();
    v15 = v14;
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
    a2[1] = v13;
    a2[2] = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5D8CE98@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5D8CD10(a1, a2);
}

uint64_t sub_1D5D8CEAC(_QWORD *a1)
{
  return sub_1D5D8CB30(a1);
}

BOOL sub_1D5D8CEC0(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t sub_1D5D8CEF0()
{
  sub_1D5E379A4();
  sub_1D5D8C92C();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D8CF44()
{
  sub_1D5E379A4();
  sub_1D5D8C92C();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D8CF90()
{
  sub_1D5E37584();
  sub_1D5E37458();
  sub_1D5E37584();
  return 0;
}

uint64_t sub_1D5D8D014@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_1D5E37584();
  sub_1D5E37458();
  result = sub_1D5E37584();
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return result;
}

uint64_t sub_1D5D8D0A0()
{
  sub_1D5E37650();
  sub_1D5E37458();
  sub_1D5E37584();
  sub_1D5E37458();
  sub_1D5E37584();
  sub_1D5E37458();
  return 0;
}

unint64_t sub_1D5D8D174()
{
  unint64_t result;

  result = qword_1ED9AF320;
  if (!qword_1ED9AF320)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E38080, &type metadata for Location);
    atomic_store(result, (unint64_t *)&qword_1ED9AF320);
  }
  return result;
}

uint64_t sub_1D5D8D1B8()
{
  return MEMORY[0x1E0DEA978];
}

uint64_t getEnumTagSinglePayload for Location(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t getEnumTagSinglePayload for Location.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Location.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D5D8D2C4 + 4 * byte_1D5E38029[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D5D8D2F8 + 4 * asc_1D5E38024[v4]))();
}

uint64_t sub_1D5D8D2F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D8D300(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5D8D308);
  return result;
}

uint64_t sub_1D5D8D314(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5D8D31CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D5D8D320(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D8D328(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D8D334(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D5D8D340(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Location.CodingKeys()
{
  return &type metadata for Location.CodingKeys;
}

unint64_t sub_1D5D8D35C()
{
  unint64_t result;

  result = qword_1EFFB5120;
  if (!qword_1EFFB5120)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E38200, &type metadata for Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5120);
  }
  return result;
}

unint64_t sub_1D5D8D3A4()
{
  unint64_t result;

  result = qword_1EFFB5128;
  if (!qword_1EFFB5128)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E38170, &type metadata for Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5128);
  }
  return result;
}

unint64_t sub_1D5D8D3EC()
{
  unint64_t result;

  result = qword_1EFFB5130;
  if (!qword_1EFFB5130)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E38198, &type metadata for Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5130);
  }
  return result;
}

uint64_t sub_1D5D8D430(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656475746974616CLL && a2 == 0xE800000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001D5E46D40)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

Swift::tuple_Double_Double __swiftcall ReadonlyAggregateType.prioredClicksAndImpressions(baselineClicks:baselineImpressions:decayRate:)(Swift::Double baselineClicks, Swift::Double baselineImpressions, Swift::Double decayRate)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double (*v10)(uint64_t, uint64_t);
  double v11;
  double v12;
  double v13;
  long double v14;
  long double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  Swift::tuple_Double_Double result;
  double v28;

  v5 = v4;
  v6 = v3;
  v28 = (*(double (**)(void))(v4 + 16))();
  v10 = *(double (**)(uint64_t, uint64_t))(v5 + 24);
  v11 = v10(v6, v5);
  v12 = 1.0 - pow(decayRate, 555.0);
  v13 = 1.0 - decayRate;
  v14 = 0.0;
  v15 = 0.0;
  v16 = v12 / (1.0 - decayRate);
  if (decayRate != 0.0)
  {
    if (v16 >= v11)
      v17 = v11;
    else
      v17 = v12 / (1.0 - decayRate);
    v18 = 1.0 - v13 * v17;
    if (v18 == 0.0)
    {
      v15 = 555.0;
    }
    else
    {
      v19 = log(v18);
      v15 = v19 / log(decayRate);
    }
  }
  v20 = v10(v6, v5);
  v10(v6, v5);
  if (decayRate != 0.0)
  {
    if (v16 < v21)
      v21 = v16;
    v22 = 1.0 - v13 * v21;
    if (v22 == 0.0)
    {
      v14 = 555.0;
    }
    else
    {
      v23 = log(v22);
      v14 = v23 / log(decayRate);
    }
  }
  v24 = v28 + pow(decayRate, v15) * baselineClicks;
  if (baselineImpressions < baselineClicks)
    baselineImpressions = baselineClicks;
  v25 = v20 + baselineImpressions * pow(decayRate, v14);
  v26 = v24;
  result._1 = v25;
  result._0 = v26;
  return result;
}

double ReadonlyAggregateType.personalizationValue(baseline:decayRate:)(_QWORD *a1, uint64_t a2, uint64_t a3, Swift::Double a4)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  double v14;
  double v15;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5C0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D5E38280;
  *(_QWORD *)(inited + 56) = a2;
  *(_QWORD *)(inited + 64) = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, v4, a2);
  v11 = a1[3];
  v12 = a1[4];
  v13 = __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_1D5D8E6EC((uint64_t)v13, inited, v11, v12, a4);
  v15 = v14;
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF7A0);
  swift_arrayDestroy();
  return v15;
}

uint64_t sub_1D5D8D7F8(_QWORD *a1, uint64_t a2, double a3)
{
  return sub_1D5D8D810(a1, a2, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, double))sub_1D5D8E6D4, a3);
}

uint64_t sub_1D5D8D804(_QWORD *a1, uint64_t a2, double a3)
{
  return sub_1D5D8D810(a1, a2, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, double))sub_1D5D8E664, a3);
}

uint64_t sub_1D5D8D810(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t, uint64_t, uint64_t, double), double a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = a1[3];
  v7 = a1[4];
  v8 = __swift_project_boxed_opaque_existential_1(a1, v6);
  return a3(v8, a2, v6, v7, a4);
}

uint64_t ReadonlyAggregate.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double ReadonlyAggregate.clicks.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double ReadonlyAggregate.impressions.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t ReadonlyAggregate.eventCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t ReadonlyAggregate.updatedAt.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D5D8E2E4(type metadata accessor for ReadonlyAggregate, a1);
}

uint64_t ReadonlyAggregate.init(identifier:clicks:impressions:eventCount:updatedAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  return sub_1D5D8E3B0(a1, a2, a3, a4, type metadata accessor for ReadonlyAggregate, a5, a6, a7);
}

uint64_t ReadonlyAggregate.init(aggregate:)@<X0>(char *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v4 = sub_1D5E37368();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)a1;
  v9 = *((_QWORD *)a1 + 1);
  v11 = *((_QWORD *)a1 + 2);
  v12 = *((_QWORD *)a1 + 3);
  v13 = *((_QWORD *)a1 + 4);
  v14 = type metadata accessor for Aggregate(0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, &a1[*(int *)(v14 + 32)], v4);
  swift_bridgeObjectRetain();
  sub_1D5D8E9B8((uint64_t)a1, type metadata accessor for Aggregate);
  *(_QWORD *)a2 = v10;
  *((_QWORD *)a2 + 1) = v9;
  *((_QWORD *)a2 + 2) = v11;
  *((_QWORD *)a2 + 3) = v12;
  *((_QWORD *)a2 + 4) = v13;
  v15 = type metadata accessor for ReadonlyAggregate(0);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(&a2[*(int *)(v15 + 32)], v8, v4);
}

BOOL sub_1D5D8D9C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D5D8D9D4()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D8DA18()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5D8DA40()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D8DA80()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5D8DAB4 + 4 * byte_1D5E38290[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1D5D8DAB4()
{
  return 0x736B63696C63;
}

uint64_t sub_1D5D8DAC8()
{
  return 0x6973736572706D69;
}

uint64_t sub_1D5D8DAE8()
{
  return 0x756F43746E657665;
}

uint64_t sub_1D5D8DB00()
{
  return 0x4164657461647075;
}

uint64_t sub_1D5D8DB1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5D8F24C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5D8DB40()
{
  return 0;
}

void sub_1D5D8DB4C(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1D5D8DB58()
{
  sub_1D5D8E930();
  return sub_1D5E37A04();
}

uint64_t sub_1D5D8DB80()
{
  sub_1D5D8E930();
  return sub_1D5E37A10();
}

uint64_t ReadonlyAggregate.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5138);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5D8E930();
  sub_1D5E379F8();
  v9[15] = 0;
  sub_1D5E3786C();
  if (!v1)
  {
    v9[14] = 1;
    sub_1D5E37884();
    v9[13] = 2;
    sub_1D5E37884();
    v9[12] = 3;
    sub_1D5E378A8();
    type metadata accessor for ReadonlyAggregate(0);
    v9[11] = 4;
    sub_1D5E37368();
    sub_1D5D7B734(&qword_1ED9AE6B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t ReadonlyAggregate.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v25 = a2;
  v26 = sub_1D5E37368();
  v24 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5148);
  v6 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ReadonlyAggregate(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (uint64_t *)((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = a1[3];
  v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_1D5D8E930();
  v15 = v29;
  sub_1D5E379E0();
  if (v15)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  v29 = v10;
  v16 = v5;
  v18 = v26;
  v17 = v27;
  v34 = 0;
  *v13 = sub_1D5E377A0();
  v13[1] = v19;
  v33 = 1;
  sub_1D5E377B8();
  v13[2] = v20;
  v32 = 2;
  sub_1D5E377B8();
  v13[3] = v21;
  v31 = 3;
  v13[4] = sub_1D5E377DC();
  v30 = 4;
  sub_1D5D7B734(&qword_1EFFB5150, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
  sub_1D5E377D0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v17);
  v22 = (uint64_t)v28;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))((char *)v13 + *(int *)(v29 + 32), v16, v18);
  sub_1D5D8E974((uint64_t)v13, v25);
  __swift_destroy_boxed_opaque_existential_1(v22);
  return sub_1D5D8E9B8((uint64_t)v13, type metadata accessor for ReadonlyAggregate);
}

uint64_t sub_1D5D8E048()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double sub_1D5D8E074()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double sub_1D5D8E07C()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t sub_1D5D8E084()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_1D5D8E090@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReadonlyAggregate.init(from:)(a1, a2);
}

uint64_t sub_1D5D8E0A4(_QWORD *a1)
{
  return ReadonlyAggregate.encode(to:)(a1);
}

uint64_t ReadonlyAggregate.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

uint64_t ReadonlyAggregate.hashValue.getter()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D8E154()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D8E1AC()
{
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5D8E1F0()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t static ReadonlyAggregate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1D5D8E9F4(a1, a2, (void (*)(_QWORD))type metadata accessor for ReadonlyAggregate) & 1;
}

uint64_t sub_1D5D8E264(uint64_t a1, uint64_t a2)
{
  return sub_1D5D8E9F4(a1, a2, (void (*)(_QWORD))type metadata accessor for ReadonlyAggregate) & 1;
}

void sub_1D5D8E284(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*sub_1D5D8E28C())()
{
  return nullsub_4;
}

void sub_1D5D8E2A0(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*sub_1D5D8E2A8())()
{
  return nullsub_5;
}

uint64_t sub_1D5D8E2BC(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*sub_1D5D8E2C4())()
{
  return nullsub_6;
}

uint64_t sub_1D5D8E2D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1D5D8E2E4(type metadata accessor for Aggregate, a1);
}

uint64_t sub_1D5D8E2E4@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 32);
  v5 = sub_1D5E37368();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1D5D8E330(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Aggregate(0) + 32);
  v4 = sub_1D5E37368();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_1D5D8E378())()
{
  type metadata accessor for Aggregate(0);
  return nullsub_7;
}

uint64_t sub_1D5D8E3A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  return sub_1D5D8E3B0(a1, a2, a3, a4, type metadata accessor for Aggregate, a5, a6, a7);
}

uint64_t sub_1D5D8E3B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD)@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(double *)(a6 + 16) = a7;
  *(double *)(a6 + 24) = a8;
  *(_QWORD *)(a6 + 32) = a3;
  v9 = a6 + *(int *)(a5(0) + 32);
  v10 = sub_1D5E37368();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a4, v10);
}

uint64_t sub_1D5D8E408@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  v8 = v7;
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = (*(double (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
  v12 = a1[3];
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  v14 = (*(double (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  v15 = a1[3];
  v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
  v18 = a1[3];
  v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v18);
  v20 = *(void (**)(uint64_t, uint64_t))(v19 + 40);
  type metadata accessor for Aggregate(0);
  v20(v18, v19);
  *a2 = v6;
  a2[1] = v8;
  *((double *)a2 + 2) = v11;
  *((double *)a2 + 3) = v14;
  a2[4] = v17;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_1D5D8E534(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*sub_1D5D8E53C())()
{
  return nullsub_8;
}

void sub_1D5D8E550(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*sub_1D5D8E558())()
{
  return nullsub_9;
}

uint64_t sub_1D5D8E56C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*sub_1D5D8E574())()
{
  return nullsub_10;
}

uint64_t sub_1D5D8E588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = sub_1D5E37368();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_1D5D8E5C8())()
{
  return nullsub_11;
}

uint64_t sub_1D5D8E5E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = sub_1D5E37368();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1D5D8E624(uint64_t a1, uint64_t a2)
{
  return sub_1D5D8E9F4(a1, a2, (void (*)(_QWORD))type metadata accessor for Aggregate) & 1;
}

uint64_t sub_1D5D8E644(uint64_t a1, uint64_t a2)
{
  return sub_1D5D8E9F4(a1, a2, (void (*)(_QWORD))type metadata accessor for Aggregate) & 1;
}

double sub_1D5D8E664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Double a5)
{
  double v8;
  double v9;
  double v10;
  double v11;

  v8 = sub_1D5D8E6EC(a1, a2, a3, a4, a5);
  v10 = v9;
  ReadonlyAggregateType.personalizationValue.getter(a3, a4);
  return (v10 - v11) * ((1.0 - a5) * v8);
}

double sub_1D5D8E6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Double a5)
{
  double v5;

  sub_1D5D8E6EC(a1, a2, a3, a4, a5);
  return v5;
}

double sub_1D5D8E6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Double a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Double v14;
  Swift::Double v15;
  Swift::tuple_Double_Double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  _QWORD v21[4];
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
  {
    v13 = a2 + 32;
    sub_1D5D8F494(a2 + 32 + 40 * v12 - 40, (uint64_t)v22);
    v14 = (*(double (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
    v15 = (*(double (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
    swift_bridgeObjectRetain();
    do
    {
      sub_1D5D8F494(v13, (uint64_t)v21);
      __swift_project_boxed_opaque_existential_1(v21, v21[3]);
      v16 = ReadonlyAggregateType.prioredClicksAndImpressions(baselineClicks:baselineImpressions:decayRate:)(v14, v15, a5);
      v14 = v16._0;
      v15 = v16._1;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      v13 += 40;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    v17 = v23;
    v18 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    v19 = (*(double (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    v19 = (*(double (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
    ReadonlyAggregateType.personalizationValue.getter(a3, a4);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a3);
  return v19;
}

uint64_t type metadata accessor for ReadonlyAggregate(uint64_t a1)
{
  return sub_1D5D8E8FC(a1, qword_1EFFB51B8);
}

uint64_t type metadata accessor for Aggregate(uint64_t a1)
{
  return sub_1D5D8E8FC(a1, qword_1EFFB5258);
}

uint64_t sub_1D5D8E8FC(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1D5D8E930()
{
  unint64_t result;

  result = qword_1EFFB5140;
  if (!qword_1EFFB5140)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E38520, &type metadata for ReadonlyAggregate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5140);
  }
  return result;
}

uint64_t sub_1D5D8E974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadonlyAggregate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D5D8E9B8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1D5D8E9F4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  BOOL v6;

  v6 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (!v6 && (sub_1D5E378FC() & 1) == 0
    || *(double *)(a1 + 16) != *(double *)(a2 + 16)
    || *(double *)(a1 + 24) != *(double *)(a2 + 24)
    || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
  {
    return 0;
  }
  a3(0);
  return sub_1D5E37344();
}

uint64_t sub_1D5D8EA9C()
{
  return sub_1D5D7B734(&qword_1EFFB5158, type metadata accessor for ReadonlyAggregate, (uint64_t)&protocol conformance descriptor for ReadonlyAggregate);
}

uint64_t dispatch thunk of AggregateType.clicks.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AggregateType.clicks.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AggregateType.impressions.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AggregateType.impressions.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of AggregateType.eventCount.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of AggregateType.eventCount.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of AggregateType.updatedAt.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of AggregateType.updatedAt.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ReadonlyAggregateType.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReadonlyAggregateType.clicks.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ReadonlyAggregateType.impressions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ReadonlyAggregateType.eventCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ReadonlyAggregateType.updatedAt.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t getEnumTagSinglePayload for ReadonlyAggregate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for ReadonlyAggregate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *_s10XavierNews17ReadonlyAggregateVwCP_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    v6 = *(int *)(a3 + 32);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = sub_1D5E37368();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t _s10XavierNews17ReadonlyAggregateVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_1D5E37368();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t _s10XavierNews17ReadonlyAggregateVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_1D5E37368();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *_s10XavierNews17ReadonlyAggregateVwca_0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1D5E37368();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t _s10XavierNews17ReadonlyAggregateVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_1D5E37368();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t _s10XavierNews17ReadonlyAggregateVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1D5E37368();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1D5D8EE6C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1D5E37368();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_1D5D8EEF8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1D5E37368();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1D5D8EF80()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D5E37368();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReadonlyAggregate.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ReadonlyAggregate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1D5D8F0E0 + 4 * byte_1D5E3829A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1D5D8F114 + 4 * byte_1D5E38295[v4]))();
}

uint64_t sub_1D5D8F114(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D8F11C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5D8F124);
  return result;
}

uint64_t sub_1D5D8F130(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5D8F138);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1D5D8F13C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D8F144(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D8F150(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D5D8F15C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ReadonlyAggregate.CodingKeys()
{
  return &type metadata for ReadonlyAggregate.CodingKeys;
}

unint64_t sub_1D5D8F178()
{
  unint64_t result;

  result = qword_1EFFB52A0;
  if (!qword_1EFFB52A0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E384F8, &type metadata for ReadonlyAggregate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB52A0);
  }
  return result;
}

unint64_t sub_1D5D8F1C0()
{
  unint64_t result;

  result = qword_1EFFB52A8;
  if (!qword_1EFFB52A8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E38468, &type metadata for ReadonlyAggregate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB52A8);
  }
  return result;
}

unint64_t sub_1D5D8F208()
{
  unint64_t result;

  result = qword_1EFFB52B0;
  if (!qword_1EFFB52B0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E38490, &type metadata for ReadonlyAggregate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB52B0);
  }
  return result;
}

uint64_t sub_1D5D8F24C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736B63696C63 && a2 == 0xE600000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6973736572706D69 && a2 == 0xEB00000000736E6FLL || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x756F43746E657665 && a2 == 0xEA0000000000746ELL || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4164657461647075 && a2 == 0xE900000000000074)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1D5D8F494(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t ConfigurableValue.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v12 = (char *)&v17 - v11;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v13(a4, a1, AssociatedTypeWitness);
  v13((uint64_t)v12, a1, AssociatedTypeWitness);
  type metadata accessor for ConfigurableValue(0, a2, a3, v14);
  v15 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(a4, v12, v15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, AssociatedTypeWitness);
}

uint64_t ConfigurableValue.wrappedValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v1, a1, AssociatedTypeWitness);
}

uint64_t type metadata accessor for ConfigurableValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConfigurableValue);
}

uint64_t ConfigurableValue.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1, AssociatedTypeWitness);
}

uint64_t sub_1D5D8F6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v14 - v9, a1);
  type metadata accessor for ConfigurableValue(0, v5, v6, v12);
  return ConfigurableValue.wrappedValue.setter((uint64_t)v10);
}

void (*ConfigurableValue.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  size_t v10;

  v5 = malloc(0x38uLL);
  *a1 = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *v5 = v2;
  v5[1] = v6;
  v5[2] = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v5[5] = malloc(v10);
  v5[6] = malloc(v10);
  (*(void (**)(void))(v9 + 16))();
  return sub_1D5D8F814;
}

void sub_1D5D8F814(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (void *)(*a1)[6];
  if ((a2 & 1) != 0)
  {
    v5 = v2[3];
    v6 = v2[4];
    v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v7, v3, AssociatedTypeWitness);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    v9 = *v2;
    v10 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v9, v4, v10);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t ConfigurableValue.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[4];
  _QWORD *v45;

  v38 = a4;
  v39 = sub_1D5E37674();
  v36 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v7);
  v40 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v14);
  v41 = (char *)v32 - v15;
  v42 = a2;
  v43 = a3;
  v17 = type metadata accessor for ConfigurableValue(0, a2, a3, v16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)v32 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v22 = v45;
  sub_1D5E379D4();
  if (v22)
  {
    v23 = (uint64_t)a1;
  }
  else
  {
    v32[1] = v13;
    v33 = v21;
    v34 = v18;
    v35 = v17;
    v45 = a1;
    __swift_project_boxed_opaque_existential_1(v44, v44[3]);
    swift_getAssociatedConformanceWitness();
    v24 = v41;
    sub_1D5E37914();
    v25 = AssociatedTypeWitness;
    v26 = v33;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v33, v24, v25);
    v27 = v38;
    v28 = (uint64_t)v45;
    v30 = v34;
    v29 = v35;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v27, v26, v29);
    v23 = v28;
  }
  return __swift_destroy_boxed_opaque_existential_1(v23);
}

uint64_t ConfigurableValue.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5E379EC();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_1D5E3792C();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t static ConfigurableValue.== infix(_:_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_1D5E37428() & 1;
}

uint64_t sub_1D5D8FF64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v14 - v11, a1, AssociatedTypeWitness);
  ConfigurableValue.init(wrappedValue:)((uint64_t)v12, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, AssociatedTypeWitness);
}

uint64_t _s10XavierNews28ConditionalConfigurableValueV07wrappedE00E0Qzvg_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  type metadata accessor for ConfigurableValue(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a3, v3, AssociatedTypeWitness);
}

uint64_t sub_1D5D90088@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ConfigurableValue.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_1D5D900A4(_QWORD *a1)
{
  return ConfigurableValue.encode(to:)(a1);
}

uint64_t sub_1D5D900B8()
{
  return static ConfigurableValue.== infix(_:_:)();
}

void ConditionalConfigurableValue.init(wrappedValue:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  _QWORD v18[4];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v16 = (char *)v18 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v17((char *)v18 - v15, a1, AssociatedTypeWitness);
  sub_1D5D8FF64((uint64_t)v16, a2, a4, a6);
  v17(v16, a1, AssociatedTypeWitness);
  v18[0] = a2;
  v18[1] = a3;
  v18[2] = a4;
  v18[3] = a5;
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5D90194(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  ConditionalConfigurableValue.wrappedValue.setter(v3, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
}

uint64_t ConditionalConfigurableValue.wrappedValue.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  char v12;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v5 = a2[2];
  v35 = a2[4];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v30 - v9;
  v11 = (uint64_t (*)(uint64_t))(*(uint64_t (**)(_QWORD))(a2[5] + 40))(a2[3]);
  v12 = v11(a1);
  swift_release();
  if ((v12 & 1) != 0)
  {
    sub_1D5D90CA0(a1, (uint64_t)a2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, AssociatedTypeWitness);
  }
  else
  {
    v31 = v7;
    v34 = v2;
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v14 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1D5E38580;
    v36 = 0;
    v37 = 0xE000000000000000;
    v32 = v14;
    sub_1D5E378E4();
    v33 = a1;
    v17 = v36;
    v16 = v37;
    v18 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v15 + 56) = MEMORY[0x1E0DEA968];
    v19 = sub_1D5D889BC();
    *(_QWORD *)(v15 + 64) = v19;
    *(_QWORD *)(v15 + 32) = v17;
    *(_QWORD *)(v15 + 40) = v16;
    v20 = sub_1D5E37A1C();
    *(_QWORD *)(v15 + 96) = v18;
    *(_QWORD *)(v15 + 104) = v19;
    *(_QWORD *)(v15 + 72) = v20;
    *(_QWORD *)(v15 + 80) = v21;
    v22 = sub_1D5E37A1C();
    *(_QWORD *)(v15 + 136) = v18;
    *(_QWORD *)(v15 + 144) = v19;
    *(_QWORD *)(v15 + 112) = v22;
    *(_QWORD *)(v15 + 120) = v23;
    v36 = 0;
    v37 = 0xE000000000000000;
    v24 = v35;
    v25 = *(void (**)(uint64_t, uint64_t))(v35 + 40);
    v25(v5, v35);
    sub_1D5E378E4();
    v26 = *(void (**)(char *, uint64_t))(v31 + 8);
    v26(v10, AssociatedTypeWitness);
    v27 = v36;
    v28 = v37;
    *(_QWORD *)(v15 + 176) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v15 + 184) = v19;
    *(_QWORD *)(v15 + 152) = v27;
    *(_QWORD *)(v15 + 160) = v28;
    sub_1D5E375FC();
    v29 = v32;
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v25(v5, v24);
    sub_1D5D90CA0((uint64_t)v10, (uint64_t)a2);
    v26(v10, AssociatedTypeWitness);
    return ((uint64_t (*)(uint64_t, uint64_t))v26)(v33, AssociatedTypeWitness);
  }
}

void sub_1D5D9048C()
{
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5D904BC()
{
  return ConditionalConfigurableValue.wrappedValue.getter();
}

void sub_1D5D904D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v5 = *(_OWORD *)(a4 + a3 - 16);
  v10 = *(_OWORD *)(a4 + a3 - 32);
  v11 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)&v10 - v9, a1);
  v12 = v10;
  v13 = v11;
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5D90570(_QWORD *a1)
{
  uint64_t v1;

  return ConditionalConfigurableValue.wrappedValue.setter(v1, a1);
}

void (*ConditionalConfigurableValue.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  _s10XavierNews28ConditionalConfigurableValueV07wrappedE00E0Qzvg_0(a2, v10, (uint64_t)v9);
  return sub_1D5D90630;
}

void sub_1D5D90630(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  v4 = *(void **)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    v5 = v2[2];
    v6 = v2[3];
    v7 = (_QWORD *)*v2;
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32), v4, v5);
    ConditionalConfigurableValue.wrappedValue.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    ConditionalConfigurableValue.wrappedValue.setter(*(_QWORD *)(*(_QWORD *)a1 + 40), (_QWORD *)*v2);
  }
  free(v4);
  free(v3);
  free(v2);
}

void ConditionalConfigurableValue.init(from:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[20];

  v14[9] = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  MEMORY[0x1E0C80A78](v11, v12);
  v14[11] = a3;
  v14[12] = (char *)v14 - v13;
  v14[10] = a1;
  v14[15] = a1;
  v14[16] = a2;
  v14[6] = a4;
  v14[7] = a2;
  v14[17] = a3;
  v14[18] = a4;
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5D90794(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;

  v7 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v38 - v8;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  v10 = *(_QWORD *)(v5 - 72);
  sub_1D5E379D4();
  if (v10)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  *(_QWORD *)(v5 - 208) = a1;
  *(_QWORD *)(v5 - 200) = v4;
  *(_QWORD *)(v5 - 72) = v9;
  *(_QWORD *)(v5 - 216) = v7;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v5 - 120), *(_QWORD *)(v5 - 96));
  v12 = *(_QWORD *)(v5 - 160);
  v11 = *(_QWORD *)(v5 - 152);
  swift_getAssociatedConformanceWitness();
  sub_1D5E37914();
  *(_QWORD *)(v5 - 224) = 0;
  v14 = (uint64_t (*)(uint64_t))(*(uint64_t (**)(_QWORD))(*(_QWORD *)(v5 - 192) + 40))(*(_QWORD *)(v5 - 184));
  v15 = *(_QWORD *)(v5 - 144);
  v16 = v14(v15);
  swift_release();
  if ((v16 & 1) != 0)
  {
    v17 = *(_QWORD *)(v5 - 176);
    v18 = *(_QWORD *)(v5 - 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v18, v15, v3);
    v19 = *(_QWORD *)(v5 - 72);
    sub_1D5D8FF64(v18, v12, v11, v19);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v3);
  }
  else
  {
    v20 = qword_1EFFB50D0 == -1;
    *(_QWORD *)(v5 - 232) = v2;
    if (!v20)
      swift_once();
    v21 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1D5E38580;
    *(_QWORD *)(v5 - 136) = 0;
    *(_QWORD *)(v5 - 128) = 0xE000000000000000;
    *(_QWORD *)(v5 - 192) = v21;
    sub_1D5E378E4();
    v23 = *(_QWORD *)(v5 - 136);
    v24 = *(_QWORD *)(v5 - 128);
    v25 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v22 + 56) = MEMORY[0x1E0DEA968];
    v26 = v25;
    v27 = sub_1D5D889BC();
    *(_QWORD *)(v22 + 64) = v27;
    *(_QWORD *)(v22 + 32) = v23;
    *(_QWORD *)(v22 + 40) = v24;
    v28 = sub_1D5E37A1C();
    *(_QWORD *)(v22 + 96) = v26;
    *(_QWORD *)(v22 + 104) = v27;
    *(_QWORD *)(v22 + 72) = v28;
    *(_QWORD *)(v22 + 80) = v29;
    v30 = sub_1D5E37A1C();
    *(_QWORD *)(v22 + 136) = v26;
    *(_QWORD *)(v22 + 144) = v27;
    *(_QWORD *)(v22 + 112) = v30;
    *(_QWORD *)(v22 + 120) = v31;
    *(_QWORD *)(v5 - 136) = 0;
    *(_QWORD *)(v5 - 128) = 0xE000000000000000;
    v32 = *(void (**)(uint64_t, uint64_t))(v11 + 40);
    v33 = *(_QWORD *)(v5 - 200);
    v32(v12, v11);
    sub_1D5E378E4();
    v34 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 176) + 8);
    v34(v33, v3);
    v35 = *(_QWORD *)(v5 - 136);
    v36 = *(_QWORD *)(v5 - 128);
    *(_QWORD *)(v22 + 176) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v22 + 184) = v27;
    *(_QWORD *)(v22 + 152) = v35;
    *(_QWORD *)(v22 + 160) = v36;
    sub_1D5E375FC();
    v37 = *(void **)(v5 - 192);
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v32(v12, v11);
    v19 = *(_QWORD *)(v5 - 72);
    sub_1D5D8FF64(v33, v12, v11, v19);
    v2 = *(_QWORD **)(v5 - 232);
    v34(*(_QWORD *)(v5 - 144), v3);
  }
  __swift_destroy_boxed_opaque_existential_1(v5 - 120);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v5 - 216) + 32))(*(_QWORD *)(v5 - 168), v19, *(_QWORD *)(v5 - 208));
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t ConditionalConfigurableValue.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v12[24];
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = &v12[-v7 - 8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5E379EC();
  _s10XavierNews28ConditionalConfigurableValueV07wrappedE00E0Qzvg_0(a2, v9, (uint64_t)v8);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  swift_getAssociatedConformanceWitness();
  sub_1D5E3792C();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t static ConditionalConfigurableValue.== infix(_:_:)()
{
  return static ConfigurableValue.== infix(_:_:)();
}

void sub_1D5D90C28(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  ConditionalConfigurableValue.init(from:)(a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t sub_1D5D90C48(_QWORD *a1, uint64_t a2)
{
  return ConditionalConfigurableValue.encode(to:)(a1, a2);
}

uint64_t sub_1D5D90C5C()
{
  return static ConditionalConfigurableValue.== infix(_:_:)();
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void type metadata accessor for ConditionalConfigurableValue()
{
  JUMPOUT(0x1D827D88CLL);
}

uint64_t sub_1D5D90CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v9 = (char *)&v14 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v14 - v8, a1);
  type metadata accessor for ConfigurableValue(0, v5, v4, v11);
  v12 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v2, v9, v12);
}

uint64_t sub_1D5D90D80@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  type metadata accessor for ConfigurableValue(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  return ConfigurableValue.wrappedValue.getter(a4);
}

uint64_t sub_1D5D90DBC()
{
  return 16;
}

__n128 sub_1D5D90DC8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1D5D90DDC()
{
  return 32;
}

__n128 sub_1D5D90DE8(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1D5D90DF4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1D5D90DFC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1D5D90E78(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1D5D90F0C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_1D5D90F58(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1D5D90FB0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1D5D91008(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1D5D91060(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1D5D910B8(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void sub_1D5D911F8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1D5D913CC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1D5D913D4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1D5D91454(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1D5D914EC(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_1D5D9153C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1D5D91598(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1D5D915F4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1D5D91650(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1D5D916AC(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void sub_1D5D917F0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1D5D919C8()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    sub_1D5E37434();

  }
  sub_1D5D7B270();
  result = sub_1D5E37608();
  qword_1ED9AD7D0 = result;
  return result;
}

uint64_t sub_1D5D91AA0()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    sub_1D5E37434();

  }
  sub_1D5D7B270();
  result = sub_1D5E37608();
  qword_1ED9AF210 = result;
  return result;
}

uint64_t sub_1D5D91B74()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    sub_1D5E37434();

  }
  sub_1D5D7B270();
  result = sub_1D5E37608();
  qword_1ED9AEC38 = result;
  return result;
}

uint64_t sub_1D5D91C48()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    sub_1D5E37434();

  }
  sub_1D5D7B270();
  result = sub_1D5E37608();
  qword_1ED9AF200 = result;
  return result;
}

uint64_t sub_1D5D91D1C()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    sub_1D5E37434();

  }
  sub_1D5D7B270();
  result = sub_1D5E37608();
  qword_1EFFB52C8 = result;
  return result;
}

void sub_1D5D91DF0()
{
  NSObject *v0;
  os_log_type_t v1;
  _BOOL4 v2;
  uint64_t (*v3)(uint64_t (*)(void), uint64_t);

  if (qword_1ED9ADAB8[0] != -1)
    swift_once();
  v0 = (id)qword_1ED9AEC38;
  v1 = sub_1D5E375D8();
  v2 = os_log_type_enabled(v0, v1);

  v3 = (uint64_t (*)(uint64_t (*)(void), uint64_t))nullsub_13;
  if (v2)
    v3 = sub_1D5D91E7C;
  qword_1ED9B7910 = (uint64_t)v3;
  *(_QWORD *)algn_1ED9B7918 = 0;
}

uint64_t sub_1D5D91E7C(uint64_t (*a1)(void), uint64_t a2)
{
  return sub_1D5D91F44(a1, a2, qword_1ED9ADAB8, (id *)&qword_1ED9AEC38);
}

void sub_1D5D91E9C()
{
  NSObject *v0;
  os_log_type_t v1;
  _BOOL4 v2;
  uint64_t (*v3)(uint64_t (*)(void), uint64_t);

  if (qword_1ED9AF888 != -1)
    swift_once();
  v0 = (id)qword_1ED9AF898;
  v1 = sub_1D5E375D8();
  v2 = os_log_type_enabled(v0, v1);

  v3 = (uint64_t (*)(uint64_t (*)(void), uint64_t))j_nullsub_13;
  if (v2)
    v3 = sub_1D5D91F28;
  qword_1EFFC8348 = (uint64_t)v3;
  unk_1EFFC8350 = 0;
}

uint64_t sub_1D5D91F28(uint64_t (*a1)(void), uint64_t a2)
{
  return sub_1D5D91F44(a1, a2, &qword_1ED9AF888, (id *)&qword_1ED9AF898);
}

uint64_t sub_1D5D91F44(uint64_t (*a1)(void), uint64_t a2, _QWORD *a3, id *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*a3 != -1)
    swift_once();
  v6 = *a4;
  sub_1D5E375D8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1D5E38280;
  v8 = a1();
  v10 = v9;
  *(_QWORD *)(v7 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v7 + 64) = sub_1D5D889BC();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = v10;
  sub_1D5E373A4();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5D92028@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  char v5;

  v2 = sub_1D5E37944();
  result = swift_bridgeObjectRelease();
  v4 = 0;
  v5 = 57;
  switch(v2)
  {
    case 0:
      goto LABEL_59;
    case 1:
      v4 = 1;
      goto LABEL_59;
    case 2:
      v4 = 2;
      goto LABEL_59;
    case 3:
      v4 = 3;
      goto LABEL_59;
    case 4:
      v4 = 4;
      goto LABEL_59;
    case 5:
      v4 = 5;
      goto LABEL_59;
    case 6:
      v4 = 6;
      goto LABEL_59;
    case 7:
      v4 = 7;
      goto LABEL_59;
    case 8:
      v4 = 8;
      goto LABEL_59;
    case 9:
      v4 = 9;
      goto LABEL_59;
    case 10:
      v4 = 10;
      goto LABEL_59;
    case 11:
      v4 = 11;
      goto LABEL_59;
    case 12:
      v4 = 12;
      goto LABEL_59;
    case 13:
      v4 = 13;
      goto LABEL_59;
    case 14:
      v4 = 14;
      goto LABEL_59;
    case 15:
      v4 = 15;
      goto LABEL_59;
    case 16:
      v4 = 16;
      goto LABEL_59;
    case 17:
      v4 = 17;
      goto LABEL_59;
    case 18:
      v4 = 18;
      goto LABEL_59;
    case 19:
      v4 = 19;
      goto LABEL_59;
    case 20:
      v4 = 20;
      goto LABEL_59;
    case 21:
      v4 = 21;
      goto LABEL_59;
    case 22:
      v4 = 22;
      goto LABEL_59;
    case 23:
      v4 = 23;
      goto LABEL_59;
    case 24:
      v4 = 24;
      goto LABEL_59;
    case 25:
      v4 = 25;
      goto LABEL_59;
    case 26:
      v4 = 26;
      goto LABEL_59;
    case 27:
      v4 = 27;
      goto LABEL_59;
    case 28:
      v4 = 28;
      goto LABEL_59;
    case 29:
      v4 = 29;
      goto LABEL_59;
    case 30:
      v4 = 30;
      goto LABEL_59;
    case 31:
      v4 = 31;
      goto LABEL_59;
    case 32:
      v4 = 32;
      goto LABEL_59;
    case 33:
      v4 = 33;
      goto LABEL_59;
    case 34:
      v4 = 34;
      goto LABEL_59;
    case 35:
      v4 = 35;
      goto LABEL_59;
    case 36:
      v4 = 36;
      goto LABEL_59;
    case 37:
      v4 = 37;
      goto LABEL_59;
    case 38:
      v4 = 38;
      goto LABEL_59;
    case 39:
      v4 = 39;
      goto LABEL_59;
    case 40:
      v4 = 40;
      goto LABEL_59;
    case 41:
      v4 = 41;
      goto LABEL_59;
    case 42:
      v4 = 42;
      goto LABEL_59;
    case 43:
      v4 = 43;
      goto LABEL_59;
    case 44:
      v4 = 44;
      goto LABEL_59;
    case 45:
      v4 = 45;
      goto LABEL_59;
    case 46:
      v4 = 46;
      goto LABEL_59;
    case 47:
      v4 = 47;
      goto LABEL_59;
    case 48:
      v4 = 48;
      goto LABEL_59;
    case 49:
      v4 = 49;
      goto LABEL_59;
    case 50:
      v4 = 50;
      goto LABEL_59;
    case 51:
      v4 = 51;
      goto LABEL_59;
    case 52:
      v4 = 52;
      goto LABEL_59;
    case 53:
      v4 = 53;
      goto LABEL_59;
    case 54:
      v4 = 54;
      goto LABEL_59;
    case 55:
      v4 = 55;
      goto LABEL_59;
    case 56:
      v4 = 56;
LABEL_59:
      v5 = v4;
      break;
    case 57:
      break;
    case 58:
      v5 = 58;
      break;
    case 59:
      v5 = 59;
      break;
    case 60:
      v5 = 60;
      break;
    case 61:
      v5 = 61;
      break;
    case 62:
      v5 = 62;
      break;
    case 63:
      v5 = 63;
      break;
    case 64:
      v5 = 64;
      break;
    case 65:
      v5 = 65;
      break;
    case 66:
      v5 = 66;
      break;
    case 67:
      v5 = 67;
      break;
    case 68:
      v5 = 68;
      break;
    case 69:
      v5 = 69;
      break;
    case 70:
      v5 = 70;
      break;
    case 71:
      v5 = 71;
      break;
    case 72:
      v5 = 72;
      break;
    case 73:
      v5 = 73;
      break;
    case 74:
      v5 = 74;
      break;
    default:
      v5 = 75;
      break;
  }
  *a1 = v5;
  return result;
}

uint64_t sub_1D5D922F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5D92324 + 4 * word_1D5E3874C[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1D5D92324()
{
  return 0x64657461727563;
}

uint64_t sub_1D5D92584()
{
  return 0x756F59726F66;
}

unint64_t sub_1D5D92598()
{
  return 0xD000000000000010;
}

uint64_t sub_1D5D925A4()
{
  return 0x6F7661466F747561;
}

uint64_t sub_1D5D925C4()
{
  return 0x697242796C696164;
}

unint64_t sub_1D5D925E8()
{
  return 0xD000000000000012;
}

uint64_t sub_1D5D92600()
{
  return 0x4E70556F69647561;
}

uint64_t sub_1D5D92624()
{
  return 0x726F466F69647561;
}

unint64_t sub_1D5D92644()
{
  return 0xD000000000000013;
}

uint64_t sub_1D5D9265C()
{
  return 0x59726F4665726F6DLL;
}

uint64_t sub_1D5D9267C()
{
  return 0x6F6C6C6F4677656ELL;
}

uint64_t sub_1D5D9269C()
{
  return 0x745374736574616CLL;
}

unint64_t sub_1D5D92700()
{
  return 0xD000000000000010;
}

unint64_t sub_1D5D9270C()
{
  return 0xD000000000000013;
}

uint64_t sub_1D5D92724()
{
  return 0x6C6C6177796170;
}

void sub_1D5D92738()
{
  JUMPOUT(0x1D5D9274CLL);
}

uint64_t sub_1D5D92758()
{
  return 0x7374726F7053796DLL;
}

uint64_t sub_1D5D927D4()
{
  return 0x536C656E6E616863;
}

unint64_t sub_1D5D927F8()
{
  return 0xD000000000000017;
}

uint64_t sub_1D5D92810()
{
  return 0x536F546F72746E69;
}

uint64_t sub_1D5D92834()
{
  return 0x63537374726F7073;
}

uint64_t sub_1D5D92868()
{
  return 0x74537374726F7073;
}

uint64_t sub_1D5D9288C()
{
  return 0x72427374726F7073;
}

unint64_t sub_1D5D928B0()
{
  return 0xD000000000000010;
}

uint64_t sub_1D5D928BC()
{
  return 0x76457374726F7073;
}

uint64_t sub_1D5D928E0()
{
  return 0x6F427374726F7073;
}

unint64_t sub_1D5D92904()
{
  return 0xD000000000000010;
}

unint64_t sub_1D5D92910()
{
  return 0xD000000000000016;
}

unint64_t sub_1D5D92928()
{
  return 0xD000000000000013;
}

unint64_t sub_1D5D9295C()
{
  return 0xD000000000000010;
}

uint64_t sub_1D5D92968()
{
  return 0x694C656C7A7A7570;
}

uint64_t sub_1D5D92988()
{
  return 0x7241656C7A7A7570;
}

void sub_1D5D929AC()
{
  JUMPOUT(0x1D5D929C4);
}

uint64_t sub_1D5D929D0()
{
  return 0x6546656C7A7A7570;
}

uint64_t sub_1D5D929F4()
{
  return 0x4664656546676174;
}

unint64_t sub_1D5D92A1C()
{
  return 0xD000000000000010;
}

uint64_t sub_1D5D92A28()
{
  return 0x5265746144676174;
}

uint64_t sub_1D5D92A68()
{
  return 0x694C7374726F7073;
}

uint64_t sub_1D5D92A8C()
{
  return 0x614D7374726F7073;
}

uint64_t sub_1D5D92ACC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D5DCD094(*a1, *a2);
}

uint64_t sub_1D5D92AD8(uint64_t a1, uint64_t a2)
{
  return sub_1D5D9330C(a1, a2, (void (*)(uint64_t))sub_1D5D922F4);
}

uint64_t sub_1D5D92AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D5D93380(a1, a2, a3, (void (*)(void))sub_1D5D922F4);
}

uint64_t sub_1D5D92AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D5D933DC(a1, a2, a3, (void (*)(uint64_t))sub_1D5D922F4);
}

uint64_t sub_1D5D92AFC@<X0>(char *a1@<X8>)
{
  return sub_1D5D92028(a1);
}

uint64_t sub_1D5D92B08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1D5D922F4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D5D92B2C()
{
  sub_1D5D939F0();
  return sub_1D5E374DC();
}

uint64_t sub_1D5D92B88()
{
  sub_1D5D939F0();
  return sub_1D5E374A0();
}

uint64_t sub_1D5D92BD4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  char v5;

  v2 = sub_1D5E37944();
  result = swift_bridgeObjectRelease();
  v4 = 0;
  v5 = 4;
  switch(v2)
  {
    case 0:
      goto LABEL_6;
    case 1:
      v4 = 1;
      goto LABEL_6;
    case 2:
      v4 = 2;
      goto LABEL_6;
    case 3:
      v4 = 3;
LABEL_6:
      v5 = v4;
      break;
    case 4:
      break;
    case 5:
      v5 = 5;
      break;
    case 6:
      v5 = 6;
      break;
    case 7:
      v5 = 7;
      break;
    case 8:
      v5 = 8;
      break;
    case 9:
      v5 = 9;
      break;
    case 10:
      v5 = 10;
      break;
    case 11:
      v5 = 11;
      break;
    case 12:
      v5 = 12;
      break;
    case 13:
      v5 = 13;
      break;
    case 14:
      v5 = 14;
      break;
    case 15:
      v5 = 15;
      break;
    case 16:
      v5 = 16;
      break;
    case 17:
      v5 = 17;
      break;
    case 18:
      v5 = 18;
      break;
    case 19:
      v5 = 19;
      break;
    case 20:
      v5 = 20;
      break;
    case 21:
      v5 = 21;
      break;
    default:
      v5 = 22;
      break;
  }
  *a1 = v5;
  return result;
}

uint64_t sub_1D5D92CF8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5D92D28 + 4 * byte_1D5E387F8[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1D5D92D28()
{
  return 0x756F59726F66;
}

uint64_t sub_1D5D92D3C()
{
  return 0x656E697A6167616DLL;
}

unint64_t sub_1D5D92D68()
{
  return 0xD000000000000010;
}

unint64_t sub_1D5D92D84()
{
  return 0xD000000000000011;
}

uint64_t sub_1D5D92DA4()
{
  return 0x6C656E6E616863;
}

uint64_t sub_1D5D92DB8()
{
  return 0x6369706F74;
}

uint64_t sub_1D5D92DCC()
{
  return 0x697A6167614D796DLL;
}

uint64_t sub_1D5D92DEC()
{
  return 6385509;
}

uint64_t sub_1D5D92DFC()
{
  return 0x6F69647561;
}

uint64_t sub_1D5D92E10()
{
  return 0x7369486F69647561;
}

uint64_t sub_1D5D92E30()
{
  return 0x616C506F69647561;
}

uint64_t sub_1D5D92E54()
{
  return 0x6465766173;
}

uint64_t sub_1D5D92E68()
{
  return 0x79726F74736968;
}

uint64_t sub_1D5D92E7C()
{
  return 0x686372616573;
}

uint64_t sub_1D5D92E90()
{
  return 0x6F48686372616573;
}

uint64_t sub_1D5D92EAC()
{
  return 0x6957646572616873;
}

uint64_t sub_1D5D92ED0()
{
  return 0x7374726F7073;
}

uint64_t sub_1D5D92EE4()
{
  return 0x76457374726F7073;
}

uint64_t sub_1D5D92F04()
{
  return 0x7548656C7A7A7570;
}

uint64_t sub_1D5D92F20()
{
  return 0x7954656C7A7A7570;
}

uint64_t sub_1D5D92F40(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D5DCD0A0(*a1, *a2);
}

uint64_t sub_1D5D92F4C(uint64_t a1, uint64_t a2)
{
  return sub_1D5D9330C(a1, a2, (void (*)(uint64_t))sub_1D5D92CF8);
}

uint64_t sub_1D5D92F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D5D93380(a1, a2, a3, (void (*)(void))sub_1D5D92CF8);
}

uint64_t sub_1D5D92F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D5D933DC(a1, a2, a3, (void (*)(uint64_t))sub_1D5D92CF8);
}

uint64_t sub_1D5D92F70@<X0>(char *a1@<X8>)
{
  return sub_1D5D92BD4(a1);
}

uint64_t sub_1D5D92F7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1D5D92CF8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D5D92FA0()
{
  sub_1D5D939AC();
  return sub_1D5E374DC();
}

uint64_t sub_1D5D92FFC()
{
  sub_1D5D939AC();
  return sub_1D5E374A0();
}

uint64_t sub_1D5D93048@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1D5E3771C();
  result = swift_bridgeObjectRelease();
  v4 = 12;
  if (v2 < 0xC)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t sub_1D5D930A0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5D930D0 + 4 * byte_1D5E3880E[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1D5D930D0()
{
  return 0x636E75614C707061;
}

uint64_t sub_1D5D930EC()
{
  return 0x6570697773;
}

uint64_t sub_1D5D93100()
{
  return 0x656E696C64616568;
}

uint64_t sub_1D5D93120()
{
  return 0x7061546575737369;
}

uint64_t sub_1D5D93138()
{
  return 0x6B6E696C70656564;
}

uint64_t sub_1D5D93150()
{
  return 0x6E6164726F666661;
}

unint64_t sub_1D5D93174()
{
  return 0xD000000000000011;
}

uint64_t sub_1D5D93190()
{
  return 0x6976614E72657375;
}

uint64_t sub_1D5D931B4()
{
  return 0x61646F4D6E65706FLL;
}

uint64_t sub_1D5D931D4()
{
  return 0x6369747241636F74;
}

uint64_t sub_1D5D931FC()
{
  return 0x6163696669746F6ELL;
}

unint64_t sub_1D5D93220()
{
  unint64_t result;

  result = qword_1EFFB52D0;
  if (!qword_1EFFB52D0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E38838, &_s9GroupTypeON);
    atomic_store(result, (unint64_t *)&qword_1EFFB52D0);
  }
  return result;
}

unint64_t sub_1D5D93268()
{
  unint64_t result;

  result = qword_1EFFB52D8;
  if (!qword_1EFFB52D8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E38928, &_s8FeedTypeON);
    atomic_store(result, (unint64_t *)&qword_1EFFB52D8);
  }
  return result;
}

uint64_t sub_1D5D932AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D5DCD0AC(*a1, *a2);
}

unint64_t sub_1D5D932BC()
{
  unint64_t result;

  result = qword_1EFFB52E0;
  if (!qword_1EFFB52E0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E38A18, &_s14ViewActionTypeON);
    atomic_store(result, (unint64_t *)&qword_1EFFB52E0);
  }
  return result;
}

uint64_t sub_1D5D93300(uint64_t a1, uint64_t a2)
{
  return sub_1D5D9330C(a1, a2, (void (*)(uint64_t))sub_1D5D930A0);
}

uint64_t sub_1D5D9330C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = sub_1D5E379A4();
  a3(v4);
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D93374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D5D93380(a1, a2, a3, (void (*)(void))sub_1D5D930A0);
}

uint64_t sub_1D5D93380(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5D933D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D5D933DC(a1, a2, a3, (void (*)(uint64_t))sub_1D5D930A0);
}

uint64_t sub_1D5D933DC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;

  v5 = sub_1D5E379A4();
  a4(v5);
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D93440@<X0>(char *a1@<X8>)
{
  return sub_1D5D93048(a1);
}

uint64_t sub_1D5D9344C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1D5D930A0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D5D93470()
{
  sub_1D5D93968();
  return sub_1D5E374DC();
}

uint64_t sub_1D5D934CC()
{
  sub_1D5D93968();
  return sub_1D5E374A0();
}

uint64_t _s9GroupTypeOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xB6)
    goto LABEL_17;
  if (a2 + 74 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 74) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 74;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 74;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 74;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x4B;
  v8 = v6 - 75;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s9GroupTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 74 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 74) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xB6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xB5)
    return ((uint64_t (*)(void))((char *)&loc_1D5D935F4 + 4 * byte_1D5E3881F[v4]))();
  *a1 = a2 + 74;
  return ((uint64_t (*)(void))((char *)sub_1D5D93628 + 4 * byte_1D5E3881A[v4]))();
}

uint64_t sub_1D5D93628(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D93630(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5D93638);
  return result;
}

uint64_t sub_1D5D93644(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5D9364CLL);
  *(_BYTE *)result = a2 + 74;
  return result;
}

uint64_t sub_1D5D93650(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D93658(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s9GroupTypeOMa()
{
  return &_s9GroupTypeON;
}

uint64_t _s8FeedTypeOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEB)
    goto LABEL_17;
  if (a2 + 21 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 21) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 21;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 21;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 21;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x16;
  v8 = v6 - 22;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8FeedTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 21 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 21) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEA)
    return ((uint64_t (*)(void))((char *)&loc_1D5D93754 + 4 * byte_1D5E38829[v4]))();
  *a1 = a2 + 21;
  return ((uint64_t (*)(void))((char *)sub_1D5D93788 + 4 * byte_1D5E38824[v4]))();
}

uint64_t sub_1D5D93788(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D93790(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5D93798);
  return result;
}

uint64_t sub_1D5D937A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5D937ACLL);
  *(_BYTE *)result = a2 + 21;
  return result;
}

uint64_t sub_1D5D937B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D937B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8FeedTypeOMa()
{
  return &_s8FeedTypeON;
}

uint64_t _s14ViewActionTypeOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s14ViewActionTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1D5D938B4 + 4 * byte_1D5E38833[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1D5D938E8 + 4 * byte_1D5E3882E[v4]))();
}

uint64_t sub_1D5D938E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D938F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5D938F8);
  return result;
}

uint64_t sub_1D5D93904(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5D9390CLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1D5D93910(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D93918(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D93924(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D5D93930(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *_s14ViewActionTypeOMa()
{
  return &_s14ViewActionTypeON;
}

uint64_t dispatch thunk of ClassicGroupTypeProviding.group.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ClassicGroupTypeProviding.feed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ClassicGroupTypeProviding.viewAction.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ClassicGroupTypeProviding.groupBackingTagID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

unint64_t sub_1D5D93968()
{
  unint64_t result;

  result = qword_1EFFB52E8;
  if (!qword_1EFFB52E8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E38A80, &_s14ViewActionTypeON);
    atomic_store(result, (unint64_t *)&qword_1EFFB52E8);
  }
  return result;
}

unint64_t sub_1D5D939AC()
{
  unint64_t result;

  result = qword_1EFFB52F0;
  if (!qword_1EFFB52F0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E38990, &_s8FeedTypeON);
    atomic_store(result, (unint64_t *)&qword_1EFFB52F0);
  }
  return result;
}

unint64_t sub_1D5D939F0()
{
  unint64_t result;

  result = qword_1EFFB52F8;
  if (!qword_1EFFB52F8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E388A0, &_s9GroupTypeON);
    atomic_store(result, (unint64_t *)&qword_1EFFB52F8);
  }
  return result;
}

uint64_t sub_1D5D93A44()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5D93A4C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5D93A54()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *v0;
  swift_bridgeObjectRetain();
  v1 = swift_bridgeObjectRetain();
  sub_1D5D8BE34(v1);
  return v3;
}

uint64_t _s22HeadlineGroupingResultVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s22HeadlineGroupingResultVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s22HeadlineGroupingResultVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s22HeadlineGroupingResultVwta(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s22HeadlineGroupingResultVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s22HeadlineGroupingResultVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s22HeadlineGroupingResultVMa()
{
  return &_s22HeadlineGroupingResultVN;
}

uint64_t GroupableSportsTag.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double GroupableSportsTag.score.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t GroupableSportsTag.topLevelSportTagIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

void GroupableSportsTag.sportsLeague.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

void GroupableSportsTag.groupingReason.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 41);
}

_BYTE *GroupableSportsTag.groupingReason.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = *result;
  return result;
}

uint64_t (*GroupableSportsTag.groupingReason.modify())()
{
  return nullsub_17;
}

void __swiftcall GroupableSportsTag.init(identifier:score:topLevelSportTagIdentifier:sportsLeague:groupingReason:)(XavierNews::GroupableSportsTag *__return_ptr retstr, Swift::String identifier, Swift::Double score, Swift::String_optional topLevelSportTagIdentifier, XavierNews::GroupableSportsTag::SportsLeagueType sportsLeague, XavierNews::TagGroupingReason groupingReason)
{
  XavierNews::GroupableSportsTag::SportsLeagueType v6;
  XavierNews::TagGroupingReason v7;

  v6 = *(_BYTE *)sportsLeague;
  v7 = *(_BYTE *)groupingReason;
  retstr->identifier = identifier;
  retstr->score = score;
  retstr->topLevelSportTagIdentifier = topLevelSportTagIdentifier;
  retstr->sportsLeague = v6;
  retstr->groupingReason = v7;
}

uint64_t GroupableSportsTag.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

BOOL static GroupableSportsTag.SportsLeagueType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t GroupableSportsTag.hashValue.getter()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D93D90()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D93DE8()
{
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5D93E2C()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t GroupableSportsTag.debugDescription.getter()
{
  sub_1D5E37458();
  swift_bridgeObjectRetain();
  sub_1D5E37458();
  swift_bridgeObjectRelease();
  sub_1D5E37458();
  sub_1D5E37584();
  return 0;
}

uint64_t sub_1D5D93F34()
{
  sub_1D5E37458();
  swift_bridgeObjectRetain();
  sub_1D5E37458();
  swift_bridgeObjectRelease();
  sub_1D5E37458();
  sub_1D5E37584();
  return 0;
}

uint64_t GroupableSportsTag.SportsLeagueType.hash(into:)()
{
  return sub_1D5E379B0();
}

uint64_t GroupableSportsTag.SportsLeagueType.hashValue.getter()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

BOOL sub_1D5D94050(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D5D94064()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D940A8()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5D940D0()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

BOOL _s10XavierNews18GroupableSportsTagV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  _BOOL8 result;
  char v14;

  v2 = *(double *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 41);
  v7 = *(double *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = *(unsigned __int8 *)(a2 + 40);
  v11 = *(unsigned __int8 *)(a2 + 41);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    if (v2 != v7)
      return 0;
  }
  else
  {
    v12 = sub_1D5E378FC();
    result = 0;
    if ((v12 & 1) == 0 || v2 != v7)
      return result;
  }
  if (v4)
  {
    if (!v8)
      return 0;
    if (v3 == v9 && v4 == v8)
    {
      if (v5 != v10)
        return 0;
      return v6 == v11;
    }
    v14 = sub_1D5E378FC();
    result = 0;
    if ((v14 & 1) == 0)
      return result;
LABEL_16:
    if (v5 != v10)
      return result;
    return v6 == v11;
  }
  result = 0;
  if (!v8)
    goto LABEL_16;
  return result;
}

unint64_t sub_1D5D94220()
{
  unint64_t result;

  result = qword_1EFFB5300;
  if (!qword_1EFFB5300)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for GroupableSportsTag, &type metadata for GroupableSportsTag);
    atomic_store(result, (unint64_t *)&qword_1EFFB5300);
  }
  return result;
}

unint64_t sub_1D5D94268()
{
  unint64_t result;

  result = qword_1EFFB5308;
  if (!qword_1EFFB5308)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for GroupableSportsTag.SportsLeagueType, &type metadata for GroupableSportsTag.SportsLeagueType);
    atomic_store(result, (unint64_t *)&qword_1EFFB5308);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GroupableSportsTag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for GroupableSportsTag()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GroupableSportsTag(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GroupableSportsTag(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

__n128 __swift_memcpy42_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for GroupableSportsTag(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupableSportsTag(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 42))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupableSportsTag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 42) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupableSportsTag()
{
  return &type metadata for GroupableSportsTag;
}

uint64_t getEnumTagSinglePayload for GroupableSportsTag.SportsLeagueType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupableSportsTag.SportsLeagueType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1D5D945BC + 4 * byte_1D5E38D45[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1D5D945F0 + 4 * asc_1D5E38D40[v4]))();
}

uint64_t sub_1D5D945F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D945F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5D94600);
  return result;
}

uint64_t sub_1D5D9460C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5D94614);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1D5D94618(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D94620(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D9462C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D5D94638(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GroupableSportsTag.SportsLeagueType()
{
  return &type metadata for GroupableSportsTag.SportsLeagueType;
}

BOOL static HeadlineGroupingReason.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HeadlineGroupingReason.hash(into:)()
{
  return sub_1D5E379B0();
}

uint64_t HeadlineGroupingReason.hashValue.getter()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

BOOL sub_1D5D946D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D5D946E4()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D94728()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5D94750()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

unint64_t sub_1D5D94794()
{
  unint64_t result;

  result = qword_1EFFB5310;
  if (!qword_1EFFB5310)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for HeadlineGroupingReason, &type metadata for HeadlineGroupingReason);
    atomic_store(result, (unint64_t *)&qword_1EFFB5310);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HeadlineGroupingReason(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HeadlineGroupingReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1D5D948B4 + 4 * byte_1D5E38EB5[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1D5D948E8 + 4 * byte_1D5E38EB0[v4]))();
}

uint64_t sub_1D5D948E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D948F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5D948F8);
  return result;
}

uint64_t sub_1D5D94904(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5D9490CLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1D5D94910(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D94918(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5D94924(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D5D94930(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HeadlineGroupingReason()
{
  return &type metadata for HeadlineGroupingReason;
}

uint64_t sub_1D5D94948()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5D94950()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5D94958()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s24HeadlineClusteringResultVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s24HeadlineClusteringResultVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s24HeadlineClusteringResultVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s24HeadlineClusteringResultVwta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s24HeadlineClusteringResultVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s24HeadlineClusteringResultVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s24HeadlineClusteringResultVMa()
{
  return &_s24HeadlineClusteringResultVN;
}

uint64_t dispatch thunk of static DefaultValueProvider.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_1D5D94B44(double *a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, double *a6, char a7, char a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  double v18;
  double v19;
  double v20;

  v18 = *a4;
  v19 = a4[2];
  v20 = sub_1D5D94BF8(a5, a6, a7, a8, a9, a10, a2, a3, *a4, a4[1], v19, a11, a12, a13 & 1, a14, a15, a16);
  *a1 = v18;
  a1[1] = v20;
  a1[2] = v19;
  swift_bridgeObjectRetain();
  return a2;
}

double sub_1D5D94BF8(uint64_t a1, double *a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  double v23;
  double v24;
  unint64_t v25;
  char v26;
  double v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  void (*v33)(uint64_t (*)(), double);
  double v34;
  uint64_t (*v35)(uint64_t (*)(), double);
  double v36;
  double v37;
  void (*v38)(uint64_t (*)(), __n128);
  __n128 v39;
  uint64_t (*v40)();
  double v41;
  double v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;

  if ((a1 & 1) != 0)
  {
    a9 = a2[11] * a9;
    if ((a3 & 1) == 0)
      goto LABEL_3;
LABEL_11:
    a9 = a9 * a2[13];
    if ((a4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  if ((a3 & 1) != 0)
    goto LABEL_11;
LABEL_3:
  if ((a4 & 1) != 0)
LABEL_4:
    a9 = a9 * a2[14];
LABEL_5:
  v23 = 1.0;
  if ((a5 & 1) != 0)
    v23 = a2[17];
  v24 = v23 * a9;
  if (!*(_QWORD *)(a6 + 16))
    goto LABEL_21;
  swift_bridgeObjectRetain();
  v25 = sub_1D5D7FFCC(a7, a8);
  if ((v26 & 1) != 0)
  {
    v27 = *(double *)(*(_QWORD *)(a6 + 56) + 8 * v25);
    goto LABEL_16;
  }
  a1 = swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a6 + 16))
  {
LABEL_21:
    if (qword_1EFFB50D8 != -1)
      a1 = swift_once();
    v34 = MEMORY[0x1E0C80A78](a1, a2);
    v30 = v35(sub_1D5D95CFC, v34);
    if (a11 <= 0.0)
      goto LABEL_17;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  v28 = sub_1D5D7FFCC(a12, a13);
  if ((v29 & 1) == 0)
  {
    a1 = swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v27 = *(double *)(*(_QWORD *)(a6 + 56) + 8 * v28);
LABEL_16:
  v30 = swift_bridgeObjectRelease();
  v24 = v24 * (v27 * a2[18]);
  if (a11 <= 0.0)
  {
LABEL_17:
    if (qword_1EFFB50D8 != -1)
      v30 = swift_once();
    v32 = MEMORY[0x1E0C80A78](v30, v31);
    v33(sub_1D5D95D0C, v32);
    return 0.0;
  }
LABEL_24:
  v36 = v24 / a11;
  if ((a14 & 1) != 0)
  {
    v41 = a2[16];
    if (v41 < v36)
    {
      v24 = v41 * a11;
      if (qword_1EFFB50D8 != -1)
        v30 = swift_once();
      v39.n128_f64[0] = MEMORY[0x1E0C80A78](v30, v31);
      v40 = sub_1D5D95D18;
      goto LABEL_33;
    }
  }
  else
  {
    v37 = a2[15];
    if (v37 < v36)
    {
      v24 = v37 * a11;
      if (qword_1EFFB50D8 != -1)
        v30 = swift_once();
      v39.n128_f64[0] = MEMORY[0x1E0C80A78](v30, v31);
      v40 = sub_1D5D95D48;
LABEL_33:
      v38(v40, v39);
    }
  }
  if ((a15 & 1) != 0)
  {
    if (v24 <= a10)
      v42 = v24;
    else
      v42 = a10;
    if (v42 <= 0.0 || vabdd_f64(v24, a10) / v42 <= 0.01)
    {
      if (qword_1ED9AF888 != -1)
        swift_once();
      v47 = (void *)qword_1ED9AF898;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
      v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = xmmword_1D5E38FE0;
      v49 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v48 + 56) = MEMORY[0x1E0DEA968];
      v50 = sub_1D5D889BC();
      *(_QWORD *)(v48 + 32) = a16;
      *(_QWORD *)(v48 + 40) = a17;
      *(_QWORD *)(v48 + 96) = v49;
      *(_QWORD *)(v48 + 104) = v50;
      *(_QWORD *)(v48 + 64) = v50;
      *(_QWORD *)(v48 + 72) = a7;
      *(_QWORD *)(v48 + 80) = a8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43 = v47;
      sub_1D5E375FC();
    }
    else
    {
      if (qword_1ED9AF888 != -1)
        swift_once();
      v43 = (id)qword_1ED9AF898;
      sub_1D5E375E4();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
      v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_1D5E38580;
      v45 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v44 + 56) = MEMORY[0x1E0DEA968];
      v46 = sub_1D5D889BC();
      *(_QWORD *)(v44 + 32) = a16;
      *(_QWORD *)(v44 + 40) = a17;
      *(_QWORD *)(v44 + 96) = v45;
      *(_QWORD *)(v44 + 104) = v46;
      *(_QWORD *)(v44 + 64) = v46;
      *(_QWORD *)(v44 + 72) = a7;
      *(_QWORD *)(v44 + 80) = a8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D5E37584();
      *(_QWORD *)(v44 + 136) = v45;
      *(_QWORD *)(v44 + 144) = v46;
      *(_QWORD *)(v44 + 112) = 0;
      *(_QWORD *)(v44 + 120) = 0xE000000000000000;
      sub_1D5E37584();
      *(_QWORD *)(v44 + 176) = v45;
      *(_QWORD *)(v44 + 184) = v46;
      *(_QWORD *)(v44 + 152) = 0;
      *(_QWORD *)(v44 + 160) = 0xE000000000000000;
    }
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
  }
  if (v24 <= 0.0 || a10 / v24 > 0.25)
    return v24;
  if (qword_1ED9AF888 != -1)
    swift_once();
  v51 = (id)qword_1ED9AF898;
  sub_1D5E375F0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
  v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_1D5E38580;
  v53 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v52 + 56) = MEMORY[0x1E0DEA968];
  v54 = sub_1D5D889BC();
  *(_QWORD *)(v52 + 32) = a16;
  *(_QWORD *)(v52 + 40) = a17;
  *(_QWORD *)(v52 + 96) = v53;
  *(_QWORD *)(v52 + 104) = v54;
  *(_QWORD *)(v52 + 64) = v54;
  *(_QWORD *)(v52 + 72) = a7;
  *(_QWORD *)(v52 + 80) = a8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D5E37584();
  *(_QWORD *)(v52 + 136) = v53;
  *(_QWORD *)(v52 + 144) = v54;
  *(_QWORD *)(v52 + 112) = 0;
  *(_QWORD *)(v52 + 120) = 0xE000000000000000;
  sub_1D5E37584();
  *(_QWORD *)(v52 + 176) = v53;
  *(_QWORD *)(v52 + 184) = v54;
  *(_QWORD *)(v52 + 152) = 0;
  *(_QWORD *)(v52 + 160) = 0xE000000000000000;
  sub_1D5E373A4();

  swift_bridgeObjectRelease();
  return a10;
}

uint64_t sub_1D5D9529C()
{
  sub_1D5E37650();
  sub_1D5E37458();
  sub_1D5E37458();
  sub_1D5E37458();
  sub_1D5E37458();
  sub_1D5E37458();
  sub_1D5E373C8();
  sub_1D5E37458();
  swift_bridgeObjectRelease();
  sub_1D5E37458();
  return 0;
}

uint64_t sub_1D5D953C4()
{
  sub_1D5E37650();
  sub_1D5E37458();
  sub_1D5E376B0();
  sub_1D5E37458();
  return 0;
}

uint64_t sub_1D5D9547C()
{
  sub_1D5E37650();
  sub_1D5E37458();
  sub_1D5E37584();
  sub_1D5E37458();
  sub_1D5E37584();
  sub_1D5E37458();
  sub_1D5E37584();
  sub_1D5E37458();
  return 0;
}

uint64_t sub_1D5D955A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1D5D955D4()
{
  return swift_lookUpClassMethod();
}

void sub_1D5D955E0(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 2;
  bzero((void *)(a1 + 104), 0x383uLL);
}

uint64_t sub_1D5D95608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D5D95654(double *a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;

  return sub_1D5D94B44(a1, a2, a3, a4, *(unsigned __int8 *)(v4 + 16), *(double **)(v4 + 24), *(_BYTE *)(v4 + 32), *(_BYTE *)(v4 + 33), *(_BYTE *)(v4 + 34), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_BYTE *)(v4 + 64), *(_BYTE *)(v4 + 65), *(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 80));
}

void sub_1D5D956B0(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  void *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v6)
  {
    if (!*(_QWORD *)(a1 + 16))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v7 = *(_QWORD *)(a1 + 64);
    v39 = *(_OWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    swift_bridgeObjectRetain();
    if (v8)
    {
      v10 = (_QWORD *)*a3;
      v11 = sub_1D5D7FFCC(v9, v8);
      v13 = v10[2];
      v14 = (v12 & 1) == 0;
      v15 = __OFADD__(v13, v14);
      v16 = v13 + v14;
      if (v15)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      LOBYTE(v17) = v12;
      if (v10[3] < v16)
      {
        sub_1D5D9A1E0(v16, a2 & 1);
        v11 = sub_1D5D7FFCC(v9, v8);
        if ((v17 & 1) == (v18 & 1))
          goto LABEL_9;
LABEL_7:
        v11 = sub_1D5E3795C();
        __break(1u);
      }
      if ((a2 & 1) == 0)
      {
        v20 = v11;
        sub_1D5D97B44();
        v11 = v20;
        if ((v17 & 1) != 0)
        {
LABEL_10:
          v19 = (void *)swift_allocError();
          swift_willThrow();
          MEMORY[0x1D827D850](v19);
          __swift_instantiateConcreteTypeFromMangledName(qword_1ED9AD958);
          if ((swift_dynamicCast() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();

            return;
          }
          goto LABEL_29;
        }
LABEL_13:
        v21 = (_QWORD *)*a3;
        *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
        v22 = (uint64_t *)(v21[6] + 16 * v11);
        *v22 = v9;
        v22[1] = v8;
        v23 = v21[7] + 24 * v11;
        *(_OWORD *)v23 = v39;
        *(_QWORD *)(v23 + 16) = v7;
        v24 = v21[2];
        v15 = __OFADD__(v24, 1);
        v25 = v24 + 1;
        if (v15)
        {
LABEL_28:
          __break(1u);
LABEL_29:
          sub_1D5E37650();
          sub_1D5E37458();
          sub_1D5E376B0();
          sub_1D5E37458();
          sub_1D5E376E0();
          __break(1u);
          return;
        }
        v21[2] = v25;
        if (v6 != 1)
        {
          v17 = (_QWORD *)(a1 + 104);
          v7 = 1;
          while (v7 < *(_QWORD *)(a1 + 16))
          {
            v26 = *v17;
            v39 = *((_OWORD *)v17 - 1);
            v9 = *(v17 - 4);
            v8 = *(v17 - 3);
            swift_bridgeObjectRetain();
            if (!v8)
              goto LABEL_24;
            v27 = (_QWORD *)*a3;
            v28 = sub_1D5D7FFCC(v9, v8);
            v30 = v27[2];
            v31 = (v29 & 1) == 0;
            v15 = __OFADD__(v30, v31);
            v32 = v30 + v31;
            if (v15)
              goto LABEL_27;
            a2 = v29;
            if (v27[3] < v32)
            {
              sub_1D5D9A1E0(v32, 1);
              v28 = sub_1D5D7FFCC(v9, v8);
              if ((a2 & 1) != (v33 & 1))
                goto LABEL_7;
            }
            if ((a2 & 1) != 0)
              goto LABEL_10;
            v34 = (_QWORD *)*a3;
            *(_QWORD *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
            v35 = (uint64_t *)(v34[6] + 16 * v28);
            *v35 = v9;
            v35[1] = v8;
            v36 = v34[7] + 24 * v28;
            *(_OWORD *)v36 = v39;
            *(_QWORD *)(v36 + 16) = v26;
            v37 = v34[2];
            v15 = __OFADD__(v37, 1);
            v38 = v37 + 1;
            if (v15)
              goto LABEL_28;
            ++v7;
            v34[2] = v38;
            v17 += 5;
            if (v6 == v7)
              goto LABEL_24;
          }
          goto LABEL_26;
        }
        goto LABEL_24;
      }
LABEL_9:
      if ((v17 & 1) != 0)
        goto LABEL_10;
      goto LABEL_13;
    }
  }
LABEL_24:
  swift_bridgeObjectRelease_n();
}

uint64_t sub_1D5D95A70(uint64_t a1, uint64_t (*a2)(__int128 *, uint64_t, uint64_t, __int128 *))
{
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  int64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v41 = MEMORY[0x1E0DEE9D8];
  sub_1D5DB9AD0(0, v2, 0);
  v3 = v41;
  result = sub_1D5E25F70(a1);
  v7 = result;
  v8 = 0;
  v9 = a1 + 64;
  v32 = v2;
  v33 = v6;
  v34 = a1 + 64;
  while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(_BYTE *)(a1 + 32))
  {
    v12 = (unint64_t)v7 >> 6;
    if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v7 >> 6)) & (1 << v7)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v6)
      goto LABEL_24;
    v36 = v8;
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v7);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(_QWORD *)(a1 + 56) + 24 * v7;
    v17 = *(_QWORD *)(v16 + 16);
    v37 = *(_OWORD *)v16;
    v38 = v17;
    swift_bridgeObjectRetain();
    v18 = a2(&v39, v14, v15, &v37);
    v20 = v19;
    result = swift_bridgeObjectRelease();
    v21 = v39;
    v22 = v40;
    v41 = v3;
    v24 = *(_QWORD *)(v3 + 16);
    v23 = *(_QWORD *)(v3 + 24);
    if (v24 >= v23 >> 1)
    {
      v31 = v39;
      result = (uint64_t)sub_1D5DB9AD0((_QWORD *)(v23 > 1), v24 + 1, 1);
      v21 = v31;
      v3 = v41;
    }
    *(_QWORD *)(v3 + 16) = v24 + 1;
    v25 = v3 + 40 * v24;
    *(_QWORD *)(v25 + 32) = v18;
    *(_QWORD *)(v25 + 40) = v20;
    *(_OWORD *)(v25 + 48) = v21;
    *(_QWORD *)(v25 + 64) = v22;
    v10 = 1 << *(_BYTE *)(a1 + 32);
    if (v7 >= v10)
      goto LABEL_25;
    v9 = a1 + 64;
    v26 = *(_QWORD *)(v34 + 8 * v12);
    if ((v26 & (1 << v7)) == 0)
      goto LABEL_26;
    v6 = v33;
    if (*(_DWORD *)(a1 + 36) != v33)
      goto LABEL_27;
    v27 = v26 & (-2 << (v7 & 0x3F));
    if (v27)
    {
      v10 = __clz(__rbit64(v27)) | v7 & 0xFFFFFFFFFFFFFFC0;
      v11 = v32;
    }
    else
    {
      v28 = v12 + 1;
      v29 = (unint64_t)(v10 + 63) >> 6;
      v11 = v32;
      if (v12 + 1 < v29)
      {
        v30 = *(_QWORD *)(v34 + 8 * v28);
        if (v30)
        {
LABEL_20:
          v10 = __clz(__rbit64(v30)) + (v28 << 6);
        }
        else
        {
          while (v29 - 2 != v12)
          {
            v30 = *(_QWORD *)(a1 + 80 + 8 * v12++);
            if (v30)
            {
              v28 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v8 = v36 + 1;
    v7 = v10;
    if (v36 + 1 == v11)
      return v3;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1D5D95CFC()
{
  return sub_1D5D9529C();
}

uint64_t sub_1D5D95D0C()
{
  return sub_1D5D953C4();
}

uint64_t sub_1D5D95D18()
{
  return sub_1D5D95D78();
}

uint64_t sub_1D5D95D48()
{
  return sub_1D5D95D78();
}

uint64_t sub_1D5D95D78()
{
  return sub_1D5D9547C();
}

uint64_t AggregateContextType.update(identifier:option:updateBlock:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  _QWORD v18[2];

  v13 = *a3;
  v12 = a3[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF868);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D5E38280;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  swift_bridgeObjectRetain();
  v15 = sub_1D5D81DA4(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  v18[0] = v13;
  v18[1] = v12;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 56))(v15, v18, a4, a5, a6, a7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5D95E98(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_1D5E3759C();
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_1D5D81E38(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t AggregateContext.updatedAt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC10XavierNews16AggregateContext_updatedAt;
  swift_beginAccess();
  v4 = sub_1D5E37368();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AggregateContext.updatedAt.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC10XavierNews16AggregateContext_updatedAt;
  swift_beginAccess();
  v4 = sub_1D5E37368();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*AggregateContext.updatedAt.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t AggregateContext.aggregates.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC10XavierNews16AggregateContext_aggregates);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*AggregateContext.aggregates.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t AggregateContext.__allocating_init(aggregates:updatedAt:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_allocObject();
  v4 = sub_1D5DA14F8(a1, a2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t AggregateContext.init(aggregates:updatedAt:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_1D5DA14F8(a1, a2);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1D5D96264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5478);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ReadonlyAggregate(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v16 + 48))(a1, 1) == 1)
  {
    sub_1D5DA22F4(a1, &qword_1EFFB5478);
    sub_1D5E0D3D4(a2, a3, (uint64_t)v11);
    swift_bridgeObjectRelease();
    return sub_1D5DA22F4((uint64_t)v11, &qword_1EFFB5478);
  }
  else
  {
    sub_1D5D8528C(a1, (uint64_t)v15, type metadata accessor for ReadonlyAggregate);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *v4;
    *v4 = 0x8000000000000000;
    sub_1D5D9D574((uint64_t)v15, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v20;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall AggregateContext.prune(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  int isUniquelyReferenced_nonNull_native;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;

  v3 = type metadata accessor for ReadonlyAggregate(0);
  v47 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (_QWORD *)((char *)v42 - v9);
  v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC10XavierNews16AggregateContext_aggregates);
  swift_beginAccess();
  v12 = *v11;
  if (*(_QWORD *)(*v11 + 16) > a1)
  {
    v46 = v7;
    v43 = v11;
    swift_bridgeObjectRetain_n();
    v13 = (_QWORD *)sub_1D5D9DE24(v12);
    swift_bridgeObjectRelease();
    v48 = v13;
    sub_1D5D9DDA4(&v48);
    swift_bridgeObjectRelease();
    v14 = sub_1D5D966F8(a1, (uint64_t)v48);
    v45 = v16;
    v18 = v17 >> 1;
    if (v15 == v17 >> 1)
    {
      v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_18:
      swift_unknownObjectRelease();
      *v43 = (uint64_t)v19;
      swift_bridgeObjectRelease();
    }
    else
    {
      v20 = v15;
      v42[1] = v14;
      swift_unknownObjectRetain();
      v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      v21 = type metadata accessor for ReadonlyAggregate;
      v22 = (uint64_t)v46;
      v44 = v18;
      while (v20 < v18)
      {
        v23 = *(_QWORD *)(v47 + 72);
        sub_1D5D8197C(v45 + v23 * v20, (uint64_t)v10, v21);
        v25 = *v10;
        v24 = v10[1];
        v26 = (uint64_t)v10;
        v27 = (uint64_t)v10;
        v28 = v21;
        sub_1D5D8197C(v27, v22, v21);
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v48 = v19;
        v31 = sub_1D5D7FFCC(v25, v24);
        v32 = v19[2];
        v33 = (v30 & 1) == 0;
        v34 = v32 + v33;
        if (__OFADD__(v32, v33))
          goto LABEL_21;
        v35 = v30;
        if (v19[3] >= v34)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1D5D97D04();
        }
        else
        {
          sub_1D5D9A4F8(v34, isUniquelyReferenced_nonNull_native);
          v36 = sub_1D5D7FFCC(v25, v24);
          if ((v35 & 1) != (v37 & 1))
            goto LABEL_23;
          v31 = v36;
        }
        v21 = v28;
        v19 = v48;
        v10 = (uint64_t *)v26;
        if ((v35 & 1) != 0)
        {
          v22 = (uint64_t)v46;
          sub_1D5DA190C((uint64_t)v46, v48[7] + v31 * v23);
        }
        else
        {
          v48[(v31 >> 6) + 8] |= 1 << v31;
          v38 = (uint64_t *)(v19[6] + 16 * v31);
          *v38 = v25;
          v38[1] = v24;
          v22 = (uint64_t)v46;
          sub_1D5D8528C((uint64_t)v46, v19[7] + v31 * v23, v21);
          v39 = v19[2];
          v40 = __OFADD__(v39, 1);
          v41 = v39 + 1;
          if (v40)
            goto LABEL_22;
          v19[2] = v41;
          swift_bridgeObjectRetain();
        }
        ++v20;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1D5D7CFCC(v26, v21);
        v18 = v44;
        if (v44 == v20)
        {
          swift_unknownObjectRelease();
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      sub_1D5E3795C();
      __break(1u);
      swift_release();
      __break(1u);
    }
  }
}

uint64_t sub_1D5D966F8(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v3 >= result)
      v4 = result;
    else
      v4 = *(_QWORD *)(a2 + 16);
    if (result)
      v5 = v4;
    else
      v5 = 0;
    if (v3 >= v5)
    {
      type metadata accessor for ReadonlyAggregate(0);
      return a2;
    }
  }
  __break(1u);
  return result;
}

int64_t sub_1D5D96768(int64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (!result)
      v3 = 0;
    if (v2 >= v3)
      return a2;
  }
  __break(1u);
  return result;
}

BOOL sub_1D5D967AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1D5D967C4()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D96808()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5D96830()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5D96870()
{
  _BYTE *v0;

  if (*v0)
    return 0x7461676572676761;
  else
    return 0x4164657461647075;
}

uint64_t sub_1D5D968B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DA203C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5D968D8()
{
  return 0;
}

void sub_1D5D968E4(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5D968F0()
{
  sub_1D5DA1950();
  return sub_1D5E37A04();
}

uint64_t sub_1D5D96918()
{
  sub_1D5DA1950();
  return sub_1D5E37A10();
}

uint64_t AggregateContext.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10XavierNews16AggregateContext_updatedAt;
  v2 = sub_1D5E37368();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AggregateContext.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10XavierNews16AggregateContext_updatedAt;
  v2 = sub_1D5E37368();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t AggregateContext.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD v17[2];
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;

  v2 = v1;
  v4 = sub_1D5E37368();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5318);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DA1950();
  sub_1D5E379F8();
  v13 = v2 + OBJC_IVAR____TtC10XavierNews16AggregateContext_updatedAt;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v13, v4);
  v20 = 0;
  sub_1D5D7B774(&qword_1ED9AE6B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
  v14 = v17[1];
  sub_1D5E3789C();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (!v14)
  {
    v15 = (uint64_t *)(v2 + OBJC_IVAR____TtC10XavierNews16AggregateContext_aggregates);
    swift_beginAccess();
    v21 = *v15;
    v19 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5328);
    sub_1D5DA1994();
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v12, v9);
}

uint64_t AggregateContext.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  AggregateContext.init(from:)(a1);
  return v2;
}

uint64_t *AggregateContext.init(from:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(void);
  uint64_t v13;
  _QWORD v14[2];
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  v19 = *v1;
  v17 = sub_1D5E37368();
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v5);
  v16 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5340);
  v7 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v8);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DA1950();
  sub_1D5E379E0();
  if (v2)
  {
    swift_deallocPartialClassInstance();
    v13 = (uint64_t)a1;
  }
  else
  {
    v15 = a1;
    v22 = 0;
    sub_1D5D7B774(&qword_1EFFB5150, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
    sub_1D5E377D0();
    v11 = *(void (**)(void))(v4 + 32);
    v14[1] = (char *)v1 + OBJC_IVAR____TtC10XavierNews16AggregateContext_updatedAt;
    v11();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5328);
    v21 = 1;
    sub_1D5DA1A5C();
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v18);
    *(uint64_t *)((char *)v1 + OBJC_IVAR____TtC10XavierNews16AggregateContext_aggregates) = v20;
    v13 = (uint64_t)v15;
  }
  __swift_destroy_boxed_opaque_existential_1(v13);
  return v1;
}

uint64_t *sub_1D5D96EBC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *result;

  v5 = swift_allocObject();
  result = AggregateContext.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1D5D96F10(_QWORD *a1)
{
  return AggregateContext.encode(to:)(a1);
}

uint64_t AggregateContext.update(with:option:updateBlock:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void (*v23)(_QWORD, _QWORD);
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t result;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t *);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;

  v74 = a3;
  v75 = a4;
  v7 = sub_1D5E37368();
  v72 = *(_QWORD *)(v7 - 8);
  v73 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v71 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for ReadonlyAggregate(0);
  v66 = *(_QWORD *)(v70 - 8);
  v11 = MEMORY[0x1E0C80A78](v70, v10);
  v13 = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v14);
  v69 = (char *)v62 - v15;
  v68 = type metadata accessor for Aggregate(0);
  v16 = *(_QWORD *)(v68 - 8);
  v18 = MEMORY[0x1E0C80A78](v68, v17);
  v67 = (char *)v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (_QWORD *)((char *)v62 - v21);
  v23 = *(void (**)(_QWORD, _QWORD))a2;
  v24 = *(_QWORD *)(a2 + 8);
  swift_retain();
  sub_1D5DA1AE0((uint64_t)v23);
  v25 = sub_1D5DA0E98(a1, v4, v23, v24);
  sub_1D5DA1AF0((uint64_t)v23);
  swift_release();
  v26 = v25[2];
  if (!v26)
    return swift_bridgeObjectRelease();
  v65 = v13;
  v27 = (_QWORD *)(v4 + OBJC_IVAR____TtC10XavierNews16AggregateContext_aggregates);
  v28 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v62[1] = v25;
  v29 = (uint64_t)v25 + v28;
  v63 = *(_QWORD *)(v16 + 72);
  v64 = v22;
  v30 = v72;
  while (1)
  {
    v76 = v29;
    v77 = v26;
    sub_1D5D8197C(v29, (uint64_t)v22, type metadata accessor for Aggregate);
    v74(v22);
    v31 = v22[1];
    v78 = *v22;
    v32 = (uint64_t)v22;
    v33 = v67;
    sub_1D5D8197C(v32, (uint64_t)v67, type metadata accessor for Aggregate);
    v35 = *(_QWORD *)v33;
    v34 = *((_QWORD *)v33 + 1);
    v36 = *((_QWORD *)v33 + 2);
    v37 = *((_QWORD *)v33 + 3);
    v38 = *((_QWORD *)v33 + 4);
    v39 = v71;
    v40 = v73;
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v71, &v33[*(int *)(v68 + 32)], v73);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D5D7CFCC((uint64_t)v33, type metadata accessor for Aggregate);
    v42 = v69;
    v41 = v70;
    *(_QWORD *)v69 = v35;
    *((_QWORD *)v42 + 1) = v34;
    *((_QWORD *)v42 + 2) = v36;
    *((_QWORD *)v42 + 3) = v37;
    *((_QWORD *)v42 + 4) = v38;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v42[*(int *)(v41 + 32)], v39, v40);
    swift_beginAccess();
    v43 = (uint64_t)v42;
    v44 = v78;
    v45 = (uint64_t)v65;
    sub_1D5D8528C(v43, (uint64_t)v65, type metadata accessor for ReadonlyAggregate);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v79 = (_QWORD *)*v27;
    v47 = v79;
    *v27 = 0x8000000000000000;
    v49 = sub_1D5D7FFCC(v44, v31);
    v50 = v47[2];
    v51 = (v48 & 1) == 0;
    v52 = v50 + v51;
    if (__OFADD__(v50, v51))
      break;
    v53 = v48;
    if (v47[3] >= v52)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v56 = v79;
        if ((v48 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_1D5D97D04();
        v56 = v79;
        if ((v53 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_1D5D9A4F8(v52, isUniquelyReferenced_nonNull_native);
      v54 = sub_1D5D7FFCC(v44, v31);
      if ((v53 & 1) != (v55 & 1))
        goto LABEL_20;
      v49 = v54;
      v56 = v79;
      if ((v53 & 1) != 0)
      {
LABEL_3:
        sub_1D5DA190C(v45, v56[7] + *(_QWORD *)(v66 + 72) * v49);
        goto LABEL_4;
      }
    }
    v56[(v49 >> 6) + 8] |= 1 << v49;
    v57 = (uint64_t *)(v56[6] + 16 * v49);
    *v57 = v44;
    v57[1] = v31;
    sub_1D5D8528C(v45, v56[7] + *(_QWORD *)(v66 + 72) * v49, type metadata accessor for ReadonlyAggregate);
    v58 = v56[2];
    v59 = __OFADD__(v58, 1);
    v60 = v58 + 1;
    if (v59)
      goto LABEL_19;
    v56[2] = v60;
    swift_bridgeObjectRetain();
LABEL_4:
    *v27 = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    v22 = v64;
    sub_1D5D7CFCC((uint64_t)v64, type metadata accessor for Aggregate);
    v29 = v76 + v63;
    v26 = v77 - 1;
    if (v77 == 1)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = sub_1D5E3795C();
  __break(1u);
  return result;
}

uint64_t _s10XavierNews16AggregateContextC10aggregatesSDySSAA08ReadonlyC0VGvg_0()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t AggregateContext.lookup(with:option:)(uint64_t a1, uint64_t *a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = a2[1];
  swift_retain();
  sub_1D5DA1AE0(v4);
  v6 = sub_1D5DA0CAC(MEMORY[0x1E0DEE9E0], a1, v2, v4, v5);
  sub_1D5DA1AF0(v4);
  swift_release();
  return v6;
}

uint64_t sub_1D5D97488(uint64_t a1, uint64_t *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t result;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);

  v63 = a3;
  v61 = a1;
  v62 = a5;
  v65 = (void (*)(uint64_t, uint64_t))a4;
  v6 = sub_1D5E37368();
  v58 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v57 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Aggregate(0);
  MEMORY[0x1E0C80A78](v56, v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5478);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v60 = (uint64_t)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v53 - v17;
  v19 = type metadata accessor for ReadonlyAggregate(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v25);
  v27 = (char *)&v53 - v26;
  v28 = *a2;
  v29 = a2[1];
  v30 = &v63[OBJC_IVAR____TtC10XavierNews16AggregateContext_aggregates];
  swift_beginAccess();
  v55 = v30;
  v31 = *(_QWORD *)v30;
  v32 = *(_QWORD *)(v31 + 16);
  v64 = v28;
  if (v32)
  {
    swift_bridgeObjectRetain();
    v33 = sub_1D5D7FFCC(v28, v29);
    if ((v34 & 1) != 0)
    {
      sub_1D5D8197C(*(_QWORD *)(v31 + 56) + *(_QWORD *)(v20 + 72) * v33, (uint64_t)v18, type metadata accessor for ReadonlyAggregate);
      v35 = *(char **)(v20 + 56);
      v36 = v18;
      v37 = 0;
    }
    else
    {
      v35 = *(char **)(v20 + 56);
      v36 = v18;
      v37 = 1;
    }
    v63 = v35;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v35)(v36, v37, 1, v19);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
    {
      sub_1D5D8528C((uint64_t)v18, (uint64_t)v27, type metadata accessor for ReadonlyAggregate);
      swift_endAccess();
      v52 = v60;
      sub_1D5D8197C((uint64_t)v27, v60, type metadata accessor for ReadonlyAggregate);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v63)(v52, 0, 1, v19);
      swift_bridgeObjectRetain();
      sub_1D5D96264(v52, v64, v29);
      v24 = v27;
      return sub_1D5D7CFCC((uint64_t)v24, type metadata accessor for ReadonlyAggregate);
    }
    v28 = v64;
  }
  else
  {
    v63 = *(char **)(v20 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v63)(v18, 1, 1, v19);
  }
  sub_1D5DA22F4((uint64_t)v18, &qword_1EFFB5478);
  result = swift_endAccess();
  v39 = v65;
  if (!v65)
    return result;
  swift_retain();
  v54 = v19;
  v39(v28, v29);
  v41 = *(_QWORD *)v11;
  v40 = *((_QWORD *)v11 + 1);
  v42 = *((_QWORD *)v11 + 2);
  v43 = *((_QWORD *)v11 + 3);
  v44 = *((_QWORD *)v11 + 4);
  v45 = v57;
  v47 = v58;
  v46 = v59;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v57, &v11[*(int *)(v56 + 32)], v59);
  swift_bridgeObjectRetain();
  sub_1D5D7CFCC((uint64_t)v11, type metadata accessor for Aggregate);
  *(_QWORD *)v24 = v41;
  *((_QWORD *)v24 + 1) = v40;
  *((_QWORD *)v24 + 2) = v42;
  *((_QWORD *)v24 + 3) = v43;
  *((_QWORD *)v24 + 4) = v44;
  v48 = v54;
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(&v24[*(int *)(v54 + 32)], v45, v46);
  v49 = v60;
  sub_1D5D8197C((uint64_t)v24, v60, type metadata accessor for ReadonlyAggregate);
  v50 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v63;
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v63)(v49, 0, 1, v48);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v51 = v64;
  sub_1D5D96264(v49, v64, v29);
  swift_endAccess();
  sub_1D5D8197C((uint64_t)v24, v49, type metadata accessor for ReadonlyAggregate);
  v50(v49, 0, 1, v48);
  swift_bridgeObjectRetain();
  sub_1D5D96264(v49, v51, v29);
  sub_1D5DA1AF0((uint64_t)v65);
  return sub_1D5D7CFCC((uint64_t)v24, type metadata accessor for ReadonlyAggregate);
}

uint64_t sub_1D5D978D8()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5D97924(uint64_t a1, uint64_t *a2)
{
  char **v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v2;
  v5 = *a2;
  v6 = a2[1];
  swift_retain();
  sub_1D5DA1AE0(v5);
  v7 = sub_1D5DA0CAC(MEMORY[0x1E0DEE9E0], a1, v4, v5, v6);
  sub_1D5DA1AF0(v5);
  swift_release();
  return v7;
}

uint64_t sub_1D5D979B0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  return AggregateContext.update(with:option:updateBlock:)(a1, a2, a3, a4);
}

unint64_t sub_1D5D979D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1D5E37998();
  return sub_1D5D9D214(a1, v2);
}

unint64_t sub_1D5D97A00(double a1, double a2, double a3)
{
  uint64_t v6;

  sub_1D5E379A4();
  sub_1D5D8C92C();
  v6 = sub_1D5E379C8();
  return sub_1D5D9D2B0(v6, a1, a2, a3);
}

unint64_t sub_1D5D97A74(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;

  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  v8 = sub_1D5E379C8();
  return sub_1D5D9D334(a1, a2, a3 & 0x101010101, v8, a4);
}

unint64_t sub_1D5D97B10(double a1)
{
  uint64_t v2;

  v2 = sub_1D5E37998();
  return sub_1D5D9D4DC(v2, a1);
}

void *sub_1D5D97B44()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5F0);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)(v21 + 16);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v24 = *(_OWORD *)v21;
    *v23 = v19;
    v23[1] = v18;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v25 = v24;
    *(_QWORD *)(v25 + 16) = v22;
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D97D04()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for ReadonlyAggregate(0);
  v30 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5488);
  v6 = *v0;
  v7 = sub_1D5E376F8();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v27 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v28 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v29 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v24 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v29)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v12;
    if (!v25)
    {
      v12 = v24 + 1;
      if (v24 + 1 >= v29)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v12);
      if (!v25)
        break;
    }
LABEL_25:
    v15 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v17);
    v20 = *v19;
    v21 = v19[1];
    v22 = *(_QWORD *)(v30 + 72) * v17;
    sub_1D5D8197C(*(_QWORD *)(v6 + 56) + v22, (uint64_t)v5, type metadata accessor for ReadonlyAggregate);
    v23 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v18);
    *v23 = v20;
    v23[1] = v21;
    sub_1D5D8528C((uint64_t)v5, *(_QWORD *)(v8 + 56) + v22, type metadata accessor for ReadonlyAggregate);
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v29)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v12 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v12 >= v29)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v12);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1D5D97F48()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF038);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D980F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF028);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D982A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF328);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v25 = __clz(__rbit64(v23));
    v12 = (v23 - 1) & v23;
    v15 = v25 + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(_QWORD *)(v17 + 16);
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    *(_OWORD *)v21 = *(_OWORD *)v17;
    *(_QWORD *)(v21 + 16) = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D98448()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF338);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v2 + 56) + v16;
    v21 = *(_QWORD *)v20;
    LOBYTE(v20) = *(_BYTE *)(v20 + 8);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    v23 = *(_QWORD *)(v4 + 56) + v16;
    *(_QWORD *)v23 = v21;
    *(_BYTE *)(v23 + 8) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D98600()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF330);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    v21 = (__int128 *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    *v22 = v19;
    v22[1] = v18;
    v26 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v26 = v23;
    v26[1] = v24;
    v26[2] = v25;
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D987C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  BOOL v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD928);
  v32 = v0;
  v1 = *v0;
  v2 = sub_1D5E376F8();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    v31 = v3;
    result = (void *)swift_release();
    *v32 = v31;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  v6 = v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5;
  v35 = v3;
  if (v6)
  {
    result = memmove(result, (const void *)(v1 + 64), 8 * v5);
    v3 = v35;
  }
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v33 = (unint64_t)(v8 + 63) >> 6;
  v34 = v1 + 64;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v7 << 6);
      v3 = v35;
      goto LABEL_12;
    }
    v28 = v7 + 1;
    v3 = v35;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v33)
      goto LABEL_26;
    v29 = *(_QWORD *)(v34 + 8 * v28);
    ++v7;
    if (!v29)
    {
      v7 = v28 + 1;
      if (v28 + 1 >= v33)
        goto LABEL_26;
      v29 = *(_QWORD *)(v34 + 8 * v7);
      if (!v29)
        break;
    }
LABEL_25:
    v10 = (v29 - 1) & v29;
    v12 = __clz(__rbit64(v29)) + (v7 << 6);
LABEL_12:
    v13 = 16 * v12;
    v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v12);
    v16 = *v14;
    v15 = v14[1];
    v17 = 56 * v12;
    v18 = *(_QWORD *)(v1 + 56) + v17;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    v23 = *(_QWORD *)(v18 + 32);
    v24 = *(_QWORD *)(v18 + 40);
    v25 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v13);
    v26 = *(_BYTE *)(v18 + 48);
    *v25 = v16;
    v25[1] = v15;
    v27 = *(_QWORD *)(v3 + 56) + v17;
    *(_QWORD *)v27 = v19;
    *(_QWORD *)(v27 + 8) = v20;
    *(_QWORD *)(v27 + 16) = v21;
    *(_QWORD *)(v27 + 24) = v22;
    *(_QWORD *)(v27 + 32) = v23;
    *(_QWORD *)(v27 + 40) = v24;
    *(_BYTE *)(v27 + 48) = v26;
    swift_bridgeObjectRetain();
    result = (void *)sub_1D5D801B0(v19, v20, v21, v22, v23, v24, v26);
  }
  v30 = v28 + 2;
  if (v30 >= v33)
    goto LABEL_26;
  v29 = *(_QWORD *)(v34 + 8 * v30);
  if (v29)
  {
    v7 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v7 >= v33)
      goto LABEL_26;
    v29 = *(_QWORD *)(v34 + 8 * v7);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D989E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF858);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D98B90()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF018);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 32 * v15;
    v19 = *(_QWORD *)v17;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_BYTE *)(v17 + 24);
    v22 = *(_BYTE *)(v17 + 25);
    v23 = *(_BYTE *)(v17 + 26);
    v24 = *(_BYTE *)(v17 + 27);
    LOBYTE(v17) = *(_BYTE *)(v17 + 28);
    v25 = 8 * v15;
    v26 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v25);
    v27 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v27 = v19;
    *(_QWORD *)(v27 + 8) = v18;
    *(_QWORD *)(v27 + 16) = v20;
    *(_BYTE *)(v27 + 24) = v21;
    *(_BYTE *)(v27 + 25) = v22;
    *(_BYTE *)(v27 + 26) = v23;
    *(_BYTE *)(v27 + 27) = v24;
    *(_BYTE *)(v27 + 28) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v25) = v26;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D98D74()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF030);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      v9 = v29 + 1;
      if (v29 + 1 >= v13)
        goto LABEL_26;
      v30 = *(_QWORD *)(v6 + 8 * v9);
      if (!v30)
        break;
    }
LABEL_25:
    v12 = (v30 - 1) & v30;
    v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_BYTE *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 24);
    v26 = *(_QWORD *)(v21 + 32);
    v27 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v27 = v19;
    v27[1] = v18;
    v28 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v28 = v22;
    *(_QWORD *)(v28 + 8) = v23;
    *(_BYTE *)(v28 + 16) = v24;
    *(_QWORD *)(v28 + 24) = v25;
    *(_QWORD *)(v28 + 32) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v31 = v29 + 2;
  if (v31 >= v13)
    goto LABEL_26;
  v30 = *(_QWORD *)(v6 + 8 * v31);
  if (v30)
  {
    v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v9);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D98F5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF020);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v31 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v31 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v31);
    ++v9;
    if (!v32)
    {
      v9 = v31 + 1;
      if (v31 + 1 >= v13)
        goto LABEL_26;
      v32 = *(_QWORD *)(v6 + 8 * v9);
      if (!v32)
        break;
    }
LABEL_25:
    v12 = (v32 - 1) & v32;
    v15 = __clz(__rbit64(v32)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    v25 = *(_BYTE *)(v21 + 24);
    v26 = *(_BYTE *)(v21 + 25);
    v27 = *(_BYTE *)(v21 + 26);
    v28 = *(_BYTE *)(v21 + 27);
    LOBYTE(v21) = *(_BYTE *)(v21 + 28);
    v29 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v29 = v19;
    v29[1] = v18;
    v30 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v30 = v22;
    *(_QWORD *)(v30 + 8) = v23;
    *(_QWORD *)(v30 + 16) = v24;
    *(_BYTE *)(v30 + 24) = v25;
    *(_BYTE *)(v30 + 25) = v26;
    *(_BYTE *)(v30 + 26) = v27;
    *(_BYTE *)(v30 + 27) = v28;
    *(_BYTE *)(v30 + 28) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v33 = v31 + 2;
  if (v33 >= v13)
    goto LABEL_26;
  v32 = *(_QWORD *)(v6 + 8 * v33);
  if (v32)
  {
    v9 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v9);
    ++v33;
    if (v32)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D99148()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD938);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D992F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5470);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D99480()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  int v30;
  char v31;
  int v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF690);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v40 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v40 >= v13)
      goto LABEL_26;
    v41 = *(_QWORD *)(v6 + 8 * v40);
    ++v9;
    if (!v41)
    {
      v9 = v40 + 1;
      if (v40 + 1 >= v13)
        goto LABEL_26;
      v41 = *(_QWORD *)(v6 + 8 * v9);
      if (!v41)
        break;
    }
LABEL_25:
    v12 = (v41 - 1) & v41;
    v15 = __clz(__rbit64(v41)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 80 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_BYTE *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    v25 = *(_BYTE *)(v21 + 24);
    v26 = *(_QWORD *)(v21 + 32);
    v27 = *(_BYTE *)(v21 + 40);
    v28 = *(_QWORD *)(v21 + 48);
    v29 = *(_BYTE *)(v21 + 56);
    v30 = *(_DWORD *)(v21 + 60);
    v31 = *(_BYTE *)(v21 + 64);
    v32 = *(_DWORD *)(v21 + 68);
    v33 = *(_BYTE *)(v21 + 72);
    v34 = *(_BYTE *)(v21 + 73);
    v35 = *(_BYTE *)(v21 + 74);
    v36 = *(_BYTE *)(v21 + 75);
    v37 = *(_BYTE *)(v21 + 76);
    LOBYTE(v21) = *(_BYTE *)(v21 + 77);
    v38 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v38 = v19;
    v38[1] = v18;
    v39 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v39 = v22;
    *(_BYTE *)(v39 + 8) = v23;
    *(_QWORD *)(v39 + 16) = v24;
    *(_BYTE *)(v39 + 24) = v25;
    *(_QWORD *)(v39 + 32) = v26;
    *(_BYTE *)(v39 + 40) = v27;
    *(_QWORD *)(v39 + 48) = v28;
    *(_BYTE *)(v39 + 56) = v29;
    *(_DWORD *)(v39 + 60) = v30;
    *(_BYTE *)(v39 + 64) = v31;
    *(_DWORD *)(v39 + 68) = v32;
    *(_BYTE *)(v39 + 72) = v33;
    *(_BYTE *)(v39 + 73) = v34;
    *(_BYTE *)(v39 + 74) = v35;
    *(_BYTE *)(v39 + 75) = v36;
    *(_BYTE *)(v39 + 76) = v37;
    *(_BYTE *)(v39 + 77) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v42 = v40 + 2;
  if (v42 >= v13)
    goto LABEL_26;
  v41 = *(_QWORD *)(v6 + 8 * v42);
  if (v41)
  {
    v9 = v42;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v41 = *(_QWORD *)(v6 + 8 * v9);
    ++v42;
    if (v41)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D996C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for ClassicArticleData();
  v28 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AFBF8);
  v6 = *v0;
  v7 = sub_1D5E376F8();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v26 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v27 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v28 + 72) * v18;
    sub_1D5D8197C(*(_QWORD *)(v6 + 48) + v19, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ClassicArticleData);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v18);
    sub_1D5D8528C((uint64_t)v5, *(_QWORD *)(v8 + 48) + v19, (uint64_t (*)(_QWORD))type metadata accessor for ClassicArticleData);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v21;
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1D5D998F8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED9AFC00);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      v9 = v29 + 1;
      if (v29 + 1 >= v13)
        goto LABEL_26;
      v30 = *(_QWORD *)(v6 + 8 * v9);
      if (!v30)
        break;
    }
LABEL_25:
    v12 = (v30 - 1) & v30;
    v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    v16 = v15 << 6;
    v17 = 8 * v15;
    v18 = v16 - v17;
    v19 = *(_QWORD *)(v2 + 48) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    v24 = *(_QWORD *)(v19 + 32);
    v25 = *(_QWORD *)(v19 + 40);
    v26 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v17);
    v27 = *(_QWORD *)(v4 + 48) + v18;
    v28 = *(_BYTE *)(v19 + 48);
    *(_QWORD *)v27 = *(_QWORD *)v19;
    *(_QWORD *)(v27 + 8) = v21;
    *(_QWORD *)(v27 + 16) = v22;
    *(_QWORD *)(v27 + 24) = v23;
    *(_QWORD *)(v27 + 32) = v24;
    *(_QWORD *)(v27 + 40) = v25;
    *(_BYTE *)(v27 + 48) = v28;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17) = v26;
    result = (void *)sub_1D5D801B0(v20, v21, v22, v23, v24, v25, v28);
  }
  v31 = v29 + 2;
  if (v31 >= v13)
    goto LABEL_26;
  v30 = *(_QWORD *)(v6 + 8 * v31);
  if (v30)
  {
    v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v9);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D99AC0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF848);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    LOBYTE(v21) = *(_BYTE *)(v21 + 16);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v24 = v19;
    v24[1] = v18;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v25 = v22;
    *(_QWORD *)(v25 + 8) = v23;
    *(_BYTE *)(v25 + 16) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D99C88(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_1D5E376F8();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D99E34()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD7E0);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *v21;
    v23 = v21[1];
    v24 = v21[2];
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v25 = v19;
    v25[1] = v18;
    v26 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v26 = v22;
    v26[1] = v23;
    v26[2] = v24;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D5D99FFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  __int128 v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5D0);
  v2 = *v0;
  v3 = sub_1D5E376F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v31 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v31 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v31);
    ++v9;
    if (!v32)
    {
      v9 = v31 + 1;
      if (v31 + 1 >= v13)
        goto LABEL_26;
      v32 = *(_QWORD *)(v6 + 8 * v9);
      if (!v32)
        break;
    }
LABEL_25:
    v12 = (v32 - 1) & v32;
    v15 = __clz(__rbit64(v32)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = v15 << 6;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_BYTE *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    v25 = *(_BYTE *)(v21 + 40);
    v26 = *(_QWORD *)(v21 + 48);
    v27 = *(_BYTE *)(v21 + 56);
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v29 = *(_OWORD *)(v21 + 24);
    *v28 = v19;
    v28[1] = v18;
    v30 = *(_QWORD *)(v4 + 56) + v20;
    *(_BYTE *)v30 = v22;
    *(_QWORD *)(v30 + 8) = v23;
    *(_QWORD *)(v30 + 16) = v24;
    *(_OWORD *)(v30 + 24) = v29;
    *(_BYTE *)(v30 + 40) = v25;
    *(_QWORD *)(v30 + 48) = v26;
    *(_BYTE *)(v30 + 56) = v27;
    result = (void *)swift_bridgeObjectRetain();
  }
  v33 = v31 + 2;
  if (v33 >= v13)
    goto LABEL_26;
  v32 = *(_QWORD *)(v6 + 8 * v33);
  if (v32)
  {
    v9 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v9);
    ++v33;
    if (v32)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1D5D9A1E0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  __int128 v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5F0);
  v37 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35)
          goto LABEL_33;
        v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_33;
          v23 = v36[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v37 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v35)
                  goto LABEL_33;
                v23 = v36[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v38 = *(_OWORD *)v32;
      v33 = *(_QWORD *)(v32 + 16);
      if ((v37 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_1D5E379A4();
      sub_1D5E3744C();
      result = sub_1D5E379C8();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
      *(_OWORD *)v19 = v38;
      *(_QWORD *)(v19 + 16) = v33;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D9A4F8(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;

  v3 = v2;
  v5 = type metadata accessor for ReadonlyAggregate(0);
  v43 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5488);
  v44 = a2;
  v10 = sub_1D5E37704();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v2;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_34;
      v25 = v42[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_34:
          swift_release();
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v18 >= v41)
              goto LABEL_34;
            v25 = v42[v18];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v18 = v26;
      }
    }
LABEL_21:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    v27 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v43 + 72);
    v31 = *(_QWORD *)(v9 + 56) + v30 * v22;
    if ((v44 & 1) != 0)
    {
      sub_1D5D8528C(v31, (uint64_t)v8, type metadata accessor for ReadonlyAggregate);
    }
    else
    {
      sub_1D5D8197C(v31, (uint64_t)v8, type metadata accessor for ReadonlyAggregate);
      swift_bridgeObjectRetain();
    }
    sub_1D5E379A4();
    sub_1D5E3744C();
    result = sub_1D5E379C8();
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    result = sub_1D5D8528C((uint64_t)v8, *(_QWORD *)(v11 + 56) + v30 * v19, type metadata accessor for ReadonlyAggregate);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v40;
  v24 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v39 = 1 << *(_BYTE *)(v9 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1D5D9A878(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF038);
  v38 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v11)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v11)
        goto LABEL_33;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v14 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1D5E379A4();
    sub_1D5E3744C();
    result = sub_1D5E379C8();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v19);
    *v20 = v34;
    v20[1] = v33;
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + v19) = v39;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D9AB84(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF028);
  v36 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_1D5E379A4();
    sub_1D5E3744C();
    result = sub_1D5E379C8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D9AE98(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int64_t v33;
  _QWORD *v34;

  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF328);
  result = sub_1D5E37704();
  v6 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v32 = a2;
    v7 = 0;
    v34 = (_QWORD *)(v4 + 64);
    v8 = 1 << *(_BYTE *)(v4 + 32);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = result + 64;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v7 << 6);
      }
      else
      {
        v16 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        result = v4 + 64;
        if (v16 >= v33)
          goto LABEL_31;
        v17 = v34[v16];
        ++v7;
        if (!v17)
        {
          v7 = v16 + 1;
          if (v16 + 1 >= v33)
            goto LABEL_31;
          v17 = v34[v7];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v33)
            {
LABEL_31:
              if ((v32 & 1) != 0)
              {
                v31 = 1 << *(_BYTE *)(v4 + 32);
                if (v31 >= 64)
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v31;
                *(_QWORD *)(v4 + 16) = 0;
              }
              break;
            }
            v17 = v34[v18];
            if (!v17)
            {
              while (1)
              {
                v7 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_39;
                if (v7 >= v33)
                  goto LABEL_31;
                v17 = v34[v7];
                ++v18;
                if (v17)
                  goto LABEL_21;
              }
            }
            v7 = v18;
          }
        }
LABEL_21:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v7 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 24 * v15);
      v21 = v19[1];
      v20 = v19[2];
      v22 = *v19;
      v23 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15);
      sub_1D5E379A4();
      sub_1D5E379BC();
      sub_1D5E379BC();
      sub_1D5E379BC();
      result = sub_1D5E379C8();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v12 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 24 * v12);
      *v13 = v22;
      v13[1] = v21;
      v13[2] = v20;
      *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12) = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_1D5D9B1A4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF338);
  v42 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = *(_QWORD *)(v5 + 56) + v31;
    v36 = *(_QWORD *)v35;
    v37 = *(_BYTE *)(v35 + 8);
    if ((v42 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1D5E379A4();
    sub_1D5E3744C();
    result = sub_1D5E379C8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = *(_QWORD *)(v7 + 56) + v18;
    *(_QWORD *)v20 = v36;
    *(_BYTE *)(v20 + 8) = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D9B4C8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF330);
  v36 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v35 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v34)
          goto LABEL_33;
        v23 = v35[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_33;
          v23 = v35[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v36 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v35[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v34)
                  goto LABEL_33;
                v23 = v35[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = (__int128 *)(*(_QWORD *)(v5 + 56) + 48 * v21);
      v39 = v32[1];
      v37 = *v32;
      v38 = v32[2];
      if ((v36 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_1D5E379A4();
      sub_1D5E3744C();
      result = sub_1D5E379C8();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 48 * v17);
      *v19 = v37;
      v19[1] = v39;
      v19[2] = v38;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D9B7E8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;

  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD928);
  v48 = a2;
  v51 = sub_1D5E37704();
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
    v42 = v44;
LABEL_42:
    *v42 = v51;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v4 + 32);
  v46 = (_QWORD *)(v4 + 64);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v4 + 64);
  v45 = (unint64_t)(v5 + 63) >> 6;
  v8 = v51 + 64;
  result = swift_retain();
  v10 = 0;
  v47 = v4;
  while (1)
  {
    if (v7)
    {
      v49 = (v7 - 1) & v7;
      v50 = v10;
      v20 = __clz(__rbit64(v7)) | (v10 << 6);
      goto LABEL_31;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v21 >= v45)
    {
      swift_release();
      v42 = v44;
      v22 = v46;
      if ((v48 & 1) != 0)
      {
LABEL_37:
        v43 = 1 << *(_BYTE *)(v4 + 32);
        if (v43 >= 64)
          bzero(v22, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v22 = -1 << v43;
        *(_QWORD *)(v4 + 16) = 0;
      }
LABEL_41:
      result = swift_release();
      goto LABEL_42;
    }
    v22 = v46;
    v23 = v46[v21];
    v24 = v10 + 1;
    if (!v23)
    {
      v24 = v10 + 2;
      if (v10 + 2 >= v45)
        goto LABEL_34;
      v23 = v46[v24];
      if (!v23)
        break;
    }
LABEL_30:
    v49 = (v23 - 1) & v23;
    v50 = v24;
    v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_31:
    v30 = *(_QWORD *)(v4 + 56);
    v31 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v20);
    v32 = *v31;
    v33 = v31[1];
    v34 = v30 + 56 * v20;
    v35 = *(_QWORD *)v34;
    v36 = *(_QWORD *)(v34 + 8);
    v37 = *(_QWORD *)(v34 + 16);
    v38 = *(_QWORD *)(v34 + 24);
    v40 = *(_QWORD *)(v34 + 32);
    v39 = *(_QWORD *)(v34 + 40);
    v41 = *(_BYTE *)(v34 + 48);
    if ((v48 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_1D5D801B0(v35, v36, v37, v38, v40, v39, v41);
    }
    sub_1D5E379A4();
    sub_1D5E3744C();
    v11 = sub_1D5E379C8();
    v12 = -1 << *(_BYTE *)(v51 + 32);
    v13 = v11 & ~v12;
    v14 = v13 >> 6;
    if (((-1 << v13) & ~*(_QWORD *)(v8 + 8 * (v13 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v8 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      v16 = v40;
      v17 = v41;
      result = v35;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v12) >> 6;
      v16 = v40;
      v17 = v41;
      result = v35;
      do
      {
        if (++v14 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v28 = v14 == v27;
        if (v14 == v27)
          v14 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v8 + 8 * v14);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v14 << 6);
    }
    *(_QWORD *)(v8 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v18 = (_QWORD *)(*(_QWORD *)(v51 + 48) + 16 * v15);
    *v18 = v32;
    v18[1] = v33;
    v19 = *(_QWORD *)(v51 + 56) + 56 * v15;
    *(_QWORD *)v19 = result;
    *(_QWORD *)(v19 + 8) = v36;
    *(_QWORD *)(v19 + 16) = v37;
    *(_QWORD *)(v19 + 24) = v38;
    *(_QWORD *)(v19 + 32) = v16;
    *(_QWORD *)(v19 + 40) = v39;
    *(_BYTE *)(v19 + 48) = v17;
    ++*(_QWORD *)(v51 + 16);
    v4 = v47;
    v7 = v49;
    v10 = v50;
  }
  v25 = v10 + 3;
  if (v10 + 3 >= v45)
  {
LABEL_34:
    swift_release();
    v42 = v44;
    if ((v48 & 1) != 0)
      goto LABEL_37;
    goto LABEL_41;
  }
  v23 = v46[v25];
  if (v23)
  {
    v24 = v10 + 3;
    goto LABEL_30;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v45)
      goto LABEL_34;
    v23 = v46[v24];
    ++v25;
    if (v23)
      goto LABEL_30;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_1D5D9BBA4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  char v42;
  char v43;
  char v44;
  char v45;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF018);
  v42 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v40 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v38 = v2;
  v39 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v39)
      break;
    v22 = v40;
    v23 = v40[v21];
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v39)
        goto LABEL_33;
      v23 = v40[v13];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_33:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = v40[v24];
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v39)
              goto LABEL_33;
            v23 = v40[v13];
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = *(_QWORD *)(v5 + 56);
    v30 = *(_QWORD *)(v5 + 48) + 32 * v20;
    v32 = *(_QWORD *)v30;
    v31 = *(_QWORD *)(v30 + 8);
    v33 = *(_QWORD *)(v30 + 16);
    v34 = *(_BYTE *)(v30 + 24);
    v35 = *(_BYTE *)(v30 + 25);
    v43 = *(_BYTE *)(v30 + 26);
    v44 = *(_BYTE *)(v30 + 27);
    v45 = *(_BYTE *)(v30 + 28);
    v36 = *(_QWORD *)(v29 + 8 * v20);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1D5E379A4();
    swift_bridgeObjectRetain();
    sub_1D5E3744C();
    swift_bridgeObjectRelease();
    result = sub_1D5E379C8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = *(_QWORD *)(v7 + 48) + 32 * v17;
    *(_QWORD *)v18 = v32;
    *(_QWORD *)(v18 + 8) = v31;
    *(_QWORD *)(v18 + 16) = v33;
    *(_BYTE *)(v18 + 24) = v34;
    *(_BYTE *)(v18 + 25) = v35;
    *(_BYTE *)(v18 + 26) = v43;
    *(_BYTE *)(v18 + 27) = v44;
    *(_BYTE *)(v18 + 28) = v45;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v36;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v38;
  v22 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D9BF1C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  char v43;
  char v44;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF030);
  v43 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_33;
      v24 = v41[v13];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v24 = v41[v13];
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 40 * v21;
    v34 = *(_QWORD *)v33;
    v35 = *(_QWORD *)(v33 + 8);
    v44 = *(_BYTE *)(v33 + 16);
    v36 = *(_QWORD *)(v33 + 24);
    v37 = *(_QWORD *)(v33 + 32);
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1D5E379A4();
    sub_1D5E3744C();
    result = sub_1D5E379C8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 40 * v17;
    *(_QWORD *)v19 = v34;
    *(_QWORD *)(v19 + 8) = v35;
    *(_BYTE *)(v19 + 16) = v44;
    *(_QWORD *)(v19 + 24) = v36;
    *(_QWORD *)(v19 + 32) = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v23 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D9C278(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF020);
  v43 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_33;
      v24 = v41[v13];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v24 = v41[v13];
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 32 * v21;
    v34 = *(_QWORD *)v33;
    v35 = *(_QWORD *)(v33 + 8);
    v36 = *(_QWORD *)(v33 + 16);
    v37 = *(_BYTE *)(v33 + 25);
    v46 = *(_BYTE *)(v33 + 26);
    v47 = *(_BYTE *)(v33 + 24);
    v44 = *(_BYTE *)(v33 + 28);
    v45 = *(_BYTE *)(v33 + 27);
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1D5E379A4();
    sub_1D5E3744C();
    result = sub_1D5E379C8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 32 * v17;
    *(_QWORD *)v19 = v34;
    *(_QWORD *)(v19 + 8) = v35;
    *(_QWORD *)(v19 + 16) = v36;
    *(_BYTE *)(v19 + 24) = v47;
    *(_BYTE *)(v19 + 25) = v37;
    *(_BYTE *)(v19 + 26) = v46;
    *(_BYTE *)(v19 + 27) = v45;
    *(_BYTE *)(v19 + 28) = v44;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v23 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D9C5EC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD938);
  v37 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1D5E379A4();
    sub_1D5E3744C();
    result = sub_1D5E379C8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D9C8F4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5470);
  result = sub_1D5E37704();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = sub_1D5E37998();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D9CBA0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD7E0);
  v39 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v39 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 24 * v21);
      v34 = *v32;
      v33 = v32[1];
      v35 = v32[2];
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_1D5E379A4();
      sub_1D5E3744C();
      result = sub_1D5E379C8();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 24 * v17);
      *v19 = v34;
      v19[1] = v33;
      v19[2] = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1D5D9CEC4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  char v42;
  char v43;
  __int128 v44;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5D0);
  v42 = a2;
  v6 = sub_1D5E37704();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v40 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v39)
          goto LABEL_33;
        v23 = v40[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v39)
            goto LABEL_33;
          v23 = v40[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v42 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v5 + 32);
                if (v38 >= 64)
                  bzero(v40, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v38;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v39)
                  goto LABEL_33;
                v23 = v40[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + (v21 << 6);
      v33 = *(_BYTE *)v32;
      v34 = *(_QWORD *)(v32 + 8);
      v35 = *(_QWORD *)(v32 + 16);
      v44 = *(_OWORD *)(v32 + 24);
      v36 = *(_BYTE *)(v32 + 40);
      v37 = *(_QWORD *)(v32 + 48);
      v43 = *(_BYTE *)(v32 + 56);
      if ((v42 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_1D5E379A4();
      sub_1D5E3744C();
      result = sub_1D5E379C8();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + (v17 << 6);
      *(_BYTE *)v19 = v33;
      *(_QWORD *)(v19 + 8) = v34;
      *(_QWORD *)(v19 + 16) = v35;
      *(_OWORD *)(v19 + 24) = v44;
      *(_BYTE *)(v19 + 40) = v36;
      *(_QWORD *)(v19 + 48) = v37;
      *(_BYTE *)(v19 + 56) = v43;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t sub_1D5D9D214(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1D5D9D2B0(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;

  v5 = -1 << *(_BYTE *)(v4 + 32);
  result = a1 & ~v5;
  if (((*(_QWORD *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = (double *)(*(_QWORD *)(v4 + 48) + 24 * result);
      v9 = v8[1];
      v10 = v8[2];
      v11 = *v8 == a2;
      if (v9 != a3)
        v11 = 0;
      if (v10 == a4 && v11)
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_1D5D9D334(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v21;
  char v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a4 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v12 = ~v7;
    v13 = *(_QWORD *)(v5 + 48);
    v25 = HIDWORD(a3) & 1;
    v26 = (a3 >> 24) & 1;
    v27 = (a3 >> 16) & 1;
    v28 = (a3 >> 8) & 1;
    v24 = a3;
    do
    {
      v14 = v13 + 32 * v8;
      v15 = *(double *)(v14 + 16);
      v16 = *(unsigned __int8 *)(v14 + 25);
      v17 = *(unsigned __int8 *)(v14 + 26);
      v18 = *(unsigned __int8 *)(v14 + 27);
      v19 = *(unsigned __int8 *)(v14 + 28);
      if (*(_QWORD *)v14 == a1 && *(_QWORD *)(v14 + 8) == a2)
      {
        if (v15 == a5
          && ((a3 ^ *(unsigned __int8 *)(v14 + 24)) & 1) == 0
          && ((v28 ^ v16) & 1) == 0
          && ((v27 ^ v17) & 1) == 0
          && ((v26 ^ v18) & 1) == 0
          && v25 == v19)
        {
          return v8;
        }
      }
      else
      {
        v29 = *(unsigned __int8 *)(v14 + 24);
        v21 = v6;
        v22 = sub_1D5E378FC();
        LODWORD(a3) = v24;
        v6 = v21;
        if ((v22 & 1) != 0
          && v15 == a5
          && ((v24 ^ v29) & 1) == 0
          && ((v28 ^ v16) & 1) == 0
          && ((v27 ^ v17) & 1) == 0
          && ((v26 ^ v18) & 1) == 0
          && ((v25 ^ v19) & 1) == 0)
        {
          return v8;
        }
      }
      v8 = (v8 + 1) & v12;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t sub_1D5D9D4DC(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1D5D9D574(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1D5D7FFCC(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = v19 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for ReadonlyAggregate(0) - 8) + 72) * v12;
        return sub_1D5DA190C(a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1D5D97D04();
      goto LABEL_7;
    }
    sub_1D5D9A4F8(v15, a4 & 1);
    v22 = sub_1D5D7FFCC(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1D5D9DC34(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_1D5E3795C();
  __break(1u);
  return result;
}

uint64_t sub_1D5D9D6A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1D5D7FFCC(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1D5D980F0();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1D5D9AB84(v15, a4 & 1);
  v21 = sub_1D5D7FFCC(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1D5E3795C();
  __break(1u);
  return result;
}

uint64_t sub_1D5D9D804(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  char v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_1D5D7FFCC(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_13;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a5 & 1) != 0)
    goto LABEL_9;
  if (v19 >= result && (a5 & 1) == 0)
  {
    result = (uint64_t)sub_1D5D98448();
    goto LABEL_9;
  }
  sub_1D5D9B1A4(result, a5 & 1);
  result = sub_1D5D7FFCC(a3, a4);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_13:
    result = sub_1D5E3795C();
    __break(1u);
    return result;
  }
  v14 = result;
LABEL_9:
  v21 = a2 & 1;
  v22 = *v6;
  if ((v18 & 1) != 0)
  {
    v23 = v22[7] + 16 * v14;
    *(_QWORD *)v23 = a1;
    *(_BYTE *)(v23 + 8) = v21 != 0;
  }
  else
  {
    sub_1D5D9DCC4(v14, a3, a4, a1, v21, v22);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1D5D9D944(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  __int128 v20;
  char v21;
  uint64_t *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1D5D7FFCC(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_1D5D98600();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_OWORD *)(v18[7] + 48 * v12);
      v20 = a1[1];
      *v19 = *a1;
      v19[1] = v20;
      v19[2] = a1[2];
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    v23 = (_OWORD *)(v18[7] + 48 * v12);
    v24 = a1[1];
    *v23 = *a1;
    v23[1] = v24;
    v23[2] = a1[2];
    v25 = v18[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v18[2] = v27;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1D5D9B4C8(result, a4 & 1);
  result = sub_1D5D7FFCC(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1D5E3795C();
  __break(1u);
  return result;
}

uint64_t sub_1D5D9DABC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1D5D7FFCC(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1D5D98D74();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_1D5DA22B8(a1, v18[7] + 40 * v12);
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    v23 = v18[7] + 40 * v12;
    v24 = *(_OWORD *)a1;
    v25 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v23 + 32) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    v26 = v18[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v18[2] = v28;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1D5D9BF1C(v15, a4 & 1);
  v20 = sub_1D5D7FFCC(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_1D5DA22B8(a1, v18[7] + 40 * v12);
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1D5E3795C();
  __break(1u);
  return result;
}

uint64_t sub_1D5D9DC28(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1D5D7E92C(a1, a2, a3, a4, &qword_1ED9AD930);
}

uint64_t sub_1D5D9DC34(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for ReadonlyAggregate(0);
  result = sub_1D5D8528C(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, type metadata accessor for ReadonlyAggregate);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

unint64_t sub_1D5D9DCC4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = a6[7] + 16 * result;
  *(_QWORD *)v7 = a4;
  *(_BYTE *)(v7 + 8) = a5 & 1;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

unint64_t sub_1D5D9DD1C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, _QWORD *a6, double a7)
{
  uint64_t v7;
  uint64x2_t v8;
  int16x8_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a6[(result >> 6) + 8] |= 1 << result;
  v7 = a6[6] + 32 * result;
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(double *)(v7 + 16) = a7;
  v8 = (uint64x2_t)vdupq_n_s64(a4);
  *(_BYTE *)(v7 + 24) = a4 & 1;
  v9 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1D5E39080), (int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1D5E39070));
  *(int8x8_t *)v9.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v9), (int8x8_t)0x1000100010001);
  *(_DWORD *)(v7 + 25) = vmovn_s16(v9).u32[0];
  *(_QWORD *)(a6[7] + 8 * result) = a5;
  v10 = a6[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a6[2] = v12;
  return result;
}

uint64_t sub_1D5D9DDA4(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for ReadonlyAggregate(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_1D5E26000(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1D5D9E6B0(v6);
  *a1 = v3;
  return result;
}

size_t sub_1D5D9DE24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5490);
  v3 = *(_QWORD *)(type metadata accessor for ReadonlyAggregate(0) - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      v9 = sub_1D5D9F7C8(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_1D5DA2144();
      if (v9 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D5D9DF3C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF348);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  v5 = sub_1D5D9FC80(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_1D5DA2144();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1D5D9E030(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF868);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_1D5D9FA84((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1D5DA2144();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1D5D9E114(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF868);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_1D5D9FE28((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1D5DA2144();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1D5D9E1F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF860);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
  v5 = sub_1D5DA0024((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_1D5DA2144();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1D5D9E2F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF1F0);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
  v5 = sub_1D5DA0240(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_1D5DA2144();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1D5D9E3E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD7E8);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 112);
  v5 = sub_1D5DA046C(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_1D5DA2144();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1D5D9E4D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD948);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  v5 = sub_1D5DA0780((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1D5DA2144();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1D5D9E5CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5D8);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = sub_1D5DA0984(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1D5DA2144();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1D5D9E6B0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  char v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v2 = v1;
  v138 = type metadata accessor for ReadonlyAggregate(0);
  v4 = *(_QWORD *)(v138 - 8);
  v6 = MEMORY[0x1E0C80A78](v138, v5);
  v129 = (uint64_t)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v139 = (uint64_t)&v123 - v10;
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v135 = (uint64_t)&v123 - v13;
  MEMORY[0x1E0C80A78](v12, v14);
  v134 = (uint64_t)&v123 - v15;
  v16 = a1[1];
  result = sub_1D5E378C0();
  if (result >= v16)
  {
    if (v16 < 0)
      goto LABEL_140;
    if (v16)
      return sub_1D5D9F080(0, v16, 1, a1);
    return result;
  }
  if (v16 >= 0)
    v18 = v16;
  else
    v18 = v16 + 1;
  if (v16 < -1)
    goto LABEL_139;
  v132 = v4;
  v125 = result;
  if (v16 > 1)
  {
    v19 = v18 >> 1;
    result = sub_1D5E3753C();
    *(_QWORD *)(result + 16) = v19;
    v20 = *(unsigned __int8 *)(v4 + 80);
    v124 = result;
    v131 = result + ((v20 + 32) & ~v20);
LABEL_12:
    v22 = 0;
    v21 = MEMORY[0x1E0DEE9D8];
    v136 = a1;
    while (1)
    {
      v24 = v22;
      v25 = v22 + 1;
      v130 = v22;
      if (v22 + 1 >= v16)
      {
        v32 = v22 + 1;
        v40 = v22;
      }
      else
      {
        v127 = v2;
        v133 = *a1;
        v26 = v133;
        v27 = *(_QWORD *)(v132 + 72);
        v28 = v134;
        sub_1D5D8197C(v133 + v27 * v25, v134, type metadata accessor for ReadonlyAggregate);
        v140 = v16;
        v29 = v135;
        sub_1D5D8197C(v26 + v27 * v24, v135, type metadata accessor for ReadonlyAggregate);
        v30 = sub_1D5E37350();
        v31 = v29;
        v16 = v140;
        sub_1D5D7CFCC(v31, type metadata accessor for ReadonlyAggregate);
        result = sub_1D5D7CFCC(v28, type metadata accessor for ReadonlyAggregate);
        v32 = v24 + 2;
        v141 = v27;
        if (v24 + 2 >= v16)
        {
LABEL_21:
          v2 = v127;
        }
        else
        {
          v126 = v21;
          v33 = v27 * v25;
          v34 = v133;
          v35 = v27 * v32;
          while (1)
          {
            v36 = v32;
            v37 = v134;
            sub_1D5D8197C(v34 + v35, v134, type metadata accessor for ReadonlyAggregate);
            v38 = v135;
            sub_1D5D8197C(v34 + v33, v135, type metadata accessor for ReadonlyAggregate);
            v39 = sub_1D5E37350() != 1;
            sub_1D5D7CFCC(v38, type metadata accessor for ReadonlyAggregate);
            result = sub_1D5D7CFCC(v37, type metadata accessor for ReadonlyAggregate);
            if ((v30 == 1) == v39)
              break;
            v32 = v36 + 1;
            v34 += v141;
            if (v140 == v36 + 1)
            {
              v16 = v140;
              v32 = v140;
              a1 = v136;
              v21 = v126;
              goto LABEL_21;
            }
          }
          a1 = v136;
          v32 = v36;
          v21 = v126;
          v2 = v127;
          v16 = v140;
        }
        v40 = v130;
        if (v30 == 1)
        {
          if (v32 < v130)
            goto LABEL_141;
          if (v130 < v32)
          {
            v126 = v21;
            v127 = v2;
            v41 = 0;
            v42 = v141;
            v43 = v141 * (v32 - 1);
            v44 = v32 * v141;
            v45 = v130;
            v46 = v130 * v141;
            v137 = v32;
            do
            {
              if (v45 != v32 + v41 - 1)
              {
                v47 = v133;
                if (!v133)
                  goto LABEL_146;
                v48 = v133 + v46;
                v49 = v133 + v43;
                sub_1D5D8528C(v133 + v46, v129, type metadata accessor for ReadonlyAggregate);
                if (v46 < v43 || v48 >= v47 + v44)
                {
                  swift_arrayInitWithTakeFrontToBack();
                  v42 = v141;
                }
                else
                {
                  v42 = v141;
                  if (v46 != v43)
                    swift_arrayInitWithTakeBackToFront();
                }
                result = sub_1D5D8528C(v129, v49, type metadata accessor for ReadonlyAggregate);
                v32 = v137;
              }
              ++v45;
              --v41;
              v43 -= v42;
              v44 -= v42;
              v46 += v42;
            }
            while (v45 < v32 + v41);
            v21 = v126;
            v2 = v127;
            v40 = v130;
            v16 = v140;
          }
        }
      }
      if (v32 < v16)
      {
        if (__OFSUB__(v32, v40))
          goto LABEL_138;
        if (v32 - v40 < v125)
        {
          if (__OFADD__(v40, v125))
            goto LABEL_142;
          if (v40 + v125 >= v16)
            v50 = v16;
          else
            v50 = v40 + v125;
          if (v50 < v40)
          {
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
            return result;
          }
          if (v32 != v50)
          {
            v126 = v21;
            v127 = v2;
            v51 = *(_QWORD *)(v132 + 72);
            v141 = v51 * (v32 - 1);
            v133 = v51;
            v52 = v32 * v51;
            v128 = v50;
            do
            {
              v54 = 0;
              v137 = v32;
              while (1)
              {
                v140 = v40;
                v55 = *a1;
                v56 = v52;
                v57 = v52 + v54 + *a1;
                v58 = v134;
                sub_1D5D8197C(v57, v134, type metadata accessor for ReadonlyAggregate);
                v59 = v135;
                sub_1D5D8197C(v141 + v54 + v55, v135, type metadata accessor for ReadonlyAggregate);
                v60 = sub_1D5E37350();
                sub_1D5D7CFCC(v59, type metadata accessor for ReadonlyAggregate);
                result = sub_1D5D7CFCC(v58, type metadata accessor for ReadonlyAggregate);
                if (v60 != 1)
                  break;
                v61 = *a1;
                if (!*a1)
                  goto LABEL_144;
                v52 = v56;
                v62 = v61 + v141 + v54;
                sub_1D5D8528C(v61 + v56 + v54, v139, type metadata accessor for ReadonlyAggregate);
                swift_arrayInitWithTakeFrontToBack();
                result = sub_1D5D8528C(v139, v62, type metadata accessor for ReadonlyAggregate);
                v54 -= v133;
                v40 = v140 + 1;
                a1 = v136;
                v53 = v137;
                if (v137 == v140 + 1)
                  goto LABEL_49;
              }
              v53 = v137;
              v52 = v56;
LABEL_49:
              v32 = v53 + 1;
              v141 += v133;
              v52 += v133;
              v40 = v130;
            }
            while (v32 != v128);
            v32 = v128;
            v21 = v126;
            v2 = v127;
          }
        }
      }
      if (v32 < v40)
        goto LABEL_133;
      result = swift_isUniquelyReferenced_nonNull_native();
      v137 = v32;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1D5E258D0(0, *(_QWORD *)(v21 + 16) + 1, 1, (char *)v21);
        v21 = result;
      }
      v64 = *(_QWORD *)(v21 + 16);
      v63 = *(_QWORD *)(v21 + 24);
      v23 = v64 + 1;
      if (v64 >= v63 >> 1)
      {
        result = (uint64_t)sub_1D5E258D0((char *)(v63 > 1), v64 + 1, 1, (char *)v21);
        v21 = result;
      }
      v65 = v2;
      *(_QWORD *)(v21 + 16) = v23;
      v66 = v21 + 32;
      v67 = (uint64_t *)(v21 + 32 + 16 * v64);
      v68 = v137;
      *v67 = v40;
      v67[1] = v68;
      if (v64)
      {
        while (1)
        {
          v69 = v23 - 1;
          if (v23 >= 4)
          {
            v74 = v66 + 16 * v23;
            v75 = *(_QWORD *)(v74 - 64);
            v76 = *(_QWORD *)(v74 - 56);
            v80 = __OFSUB__(v76, v75);
            v77 = v76 - v75;
            if (v80)
              goto LABEL_122;
            v79 = *(_QWORD *)(v74 - 48);
            v78 = *(_QWORD *)(v74 - 40);
            v80 = __OFSUB__(v78, v79);
            v72 = v78 - v79;
            v73 = v80;
            if (v80)
              goto LABEL_123;
            v81 = v23 - 2;
            v82 = (uint64_t *)(v66 + 16 * (v23 - 2));
            v84 = *v82;
            v83 = v82[1];
            v80 = __OFSUB__(v83, v84);
            v85 = v83 - v84;
            if (v80)
              goto LABEL_124;
            v80 = __OFADD__(v72, v85);
            v86 = v72 + v85;
            if (v80)
              goto LABEL_126;
            if (v86 >= v77)
            {
              v104 = (uint64_t *)(v66 + 16 * v69);
              v106 = *v104;
              v105 = v104[1];
              v80 = __OFSUB__(v105, v106);
              v107 = v105 - v106;
              if (v80)
                goto LABEL_132;
              v97 = v72 < v107;
              goto LABEL_93;
            }
          }
          else
          {
            if (v23 != 3)
            {
              v98 = *(_QWORD *)(v21 + 32);
              v99 = *(_QWORD *)(v21 + 40);
              v80 = __OFSUB__(v99, v98);
              v91 = v99 - v98;
              v92 = v80;
              goto LABEL_87;
            }
            v71 = *(_QWORD *)(v21 + 32);
            v70 = *(_QWORD *)(v21 + 40);
            v80 = __OFSUB__(v70, v71);
            v72 = v70 - v71;
            v73 = v80;
          }
          if ((v73 & 1) != 0)
            goto LABEL_125;
          v81 = v23 - 2;
          v87 = (uint64_t *)(v66 + 16 * (v23 - 2));
          v89 = *v87;
          v88 = v87[1];
          v90 = __OFSUB__(v88, v89);
          v91 = v88 - v89;
          v92 = v90;
          if (v90)
            goto LABEL_127;
          v93 = (uint64_t *)(v66 + 16 * v69);
          v95 = *v93;
          v94 = v93[1];
          v80 = __OFSUB__(v94, v95);
          v96 = v94 - v95;
          if (v80)
            goto LABEL_129;
          if (__OFADD__(v91, v96))
            goto LABEL_131;
          if (v91 + v96 >= v72)
          {
            v97 = v72 < v96;
LABEL_93:
            if (v97)
              v69 = v81;
            goto LABEL_95;
          }
LABEL_87:
          if ((v92 & 1) != 0)
            goto LABEL_128;
          v100 = (uint64_t *)(v66 + 16 * v69);
          v102 = *v100;
          v101 = v100[1];
          v80 = __OFSUB__(v101, v102);
          v103 = v101 - v102;
          if (v80)
            goto LABEL_130;
          if (v103 < v91)
            goto LABEL_14;
LABEL_95:
          v108 = v69 - 1;
          if (v69 - 1 >= v23)
          {
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
            goto LABEL_143;
          }
          v109 = *a1;
          if (!*a1)
            goto LABEL_145;
          v110 = v21;
          v111 = (uint64_t *)(v66 + 16 * v108);
          v112 = *v111;
          v113 = (_QWORD *)(v66 + 16 * v69);
          v114 = v113[1];
          result = sub_1D5D9F2C0(v109 + *(_QWORD *)(v132 + 72) * *v111, v109 + *(_QWORD *)(v132 + 72) * *v113, v109 + *(_QWORD *)(v132 + 72) * v114, v131);
          if (v65)
            goto LABEL_116;
          if (v114 < v112)
            goto LABEL_119;
          if (v69 > *(_QWORD *)(v110 + 16))
            goto LABEL_120;
          *v111 = v112;
          *(_QWORD *)(v66 + 16 * v108 + 8) = v114;
          v115 = *(_QWORD *)(v110 + 16);
          if (v69 >= v115)
            goto LABEL_121;
          v21 = v110;
          v23 = v115 - 1;
          result = (uint64_t)memmove((void *)(v66 + 16 * v69), v113 + 2, 16 * (v115 - 1 - v69));
          *(_QWORD *)(v110 + 16) = v115 - 1;
          a1 = v136;
          if (v115 <= 2)
            goto LABEL_14;
        }
      }
      v23 = 1;
LABEL_14:
      v22 = v137;
      v2 = v65;
      v16 = a1[1];
      if (v137 >= v16)
        goto LABEL_105;
    }
  }
  v21 = MEMORY[0x1E0DEE9D8];
  v131 = MEMORY[0x1E0DEE9D8]
       + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v124 = MEMORY[0x1E0DEE9D8];
  if (v16 == 1)
    goto LABEL_12;
  v23 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_105:
  v116 = v21;
  if (v23 >= 2)
  {
    v117 = *a1;
    do
    {
      v118 = v23 - 2;
      if (v23 < 2)
        goto LABEL_134;
      if (!v117)
        goto LABEL_147;
      v119 = *(_QWORD *)(v116 + 32 + 16 * v118);
      v120 = *(_QWORD *)(v116 + 32 + 16 * (v23 - 1) + 8);
      result = sub_1D5D9F2C0(v117 + *(_QWORD *)(v132 + 72) * v119, v117 + *(_QWORD *)(v132 + 72) * *(_QWORD *)(v116 + 32 + 16 * (v23 - 1)), v117 + *(_QWORD *)(v132 + 72) * v120, v131);
      if (v2)
        break;
      if (v120 < v119)
        goto LABEL_135;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1D5E259C8(v116);
        v116 = result;
      }
      if (v118 >= *(_QWORD *)(v116 + 16))
        goto LABEL_136;
      v121 = (_QWORD *)(v116 + 32 + 16 * v118);
      *v121 = v119;
      v121[1] = v120;
      v122 = *(_QWORD *)(v116 + 16);
      if (v23 > v122)
        goto LABEL_137;
      result = (uint64_t)memmove((void *)(v116 + 32 + 16 * (v23 - 1)), (const void *)(v116 + 32 + 16 * v23), 16 * (v122 - v23));
      *(_QWORD *)(v116 + 16) = v122 - 1;
      v23 = v122 - 1;
    }
    while (v122 > 2);
  }
LABEL_116:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v124 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5D9F080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v28 = a1;
  v32 = type metadata accessor for ReadonlyAggregate(0);
  v8 = MEMORY[0x1E0C80A78](v32, v7);
  v33 = (uint64_t)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v29 = (uint64_t)&v26 - v12;
  result = MEMORY[0x1E0C80A78](v11, v13);
  v17 = (char *)&v26 - v16;
  v31 = a3;
  v27 = a2;
  if (a3 != a2)
  {
    v18 = *(_QWORD *)(v15 + 72);
    v35 = v18 * (v31 - 1);
    v30 = v18;
    v34 = v18 * v31;
LABEL_5:
    v19 = 0;
    v20 = v28;
    while (1)
    {
      v21 = *a4;
      sub_1D5D8197C(v34 + v19 + *a4, (uint64_t)v17, type metadata accessor for ReadonlyAggregate);
      v22 = v29;
      sub_1D5D8197C(v35 + v19 + v21, v29, type metadata accessor for ReadonlyAggregate);
      v23 = sub_1D5E37350();
      sub_1D5D7CFCC(v22, type metadata accessor for ReadonlyAggregate);
      result = sub_1D5D7CFCC((uint64_t)v17, type metadata accessor for ReadonlyAggregate);
      if (v23 != 1)
      {
LABEL_4:
        v35 += v30;
        v34 += v30;
        if (++v31 == v27)
          return result;
        goto LABEL_5;
      }
      v24 = *a4;
      if (!*a4)
        break;
      v25 = v24 + v35 + v19;
      sub_1D5D8528C(v24 + v34 + v19, v33, type metadata accessor for ReadonlyAggregate);
      swift_arrayInitWithTakeFrontToBack();
      result = sub_1D5D8528C(v33, v25, type metadata accessor for ReadonlyAggregate);
      v19 -= v30;
      if (v31 == ++v20)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1D5D9F2C0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v45 = type metadata accessor for ReadonlyAggregate(0);
  v9 = MEMORY[0x1E0C80A78](v45, v8);
  v44 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v9, v11);
  v14 = (char *)&v41 - v13;
  v16 = *(_QWORD *)(v15 + 72);
  if (!v16)
  {
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    return result;
  }
  if (a2 - a1 == 0x8000000000000000 && v16 == -1)
    goto LABEL_59;
  v17 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v16 == -1)
    goto LABEL_60;
  v18 = (uint64_t)(a2 - a1) / v16;
  v48 = a1;
  v47 = a4;
  if (v18 >= v17 / v16)
  {
    v20 = v17 / v16 * v16;
    if (a4 < a2 || a2 + v20 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v28 = a4 + v20;
    v46 = a4 + v20;
    v48 = a2;
    if (v20 >= 1 && a1 < a2)
    {
      v30 = -v16;
      v42 = a4;
      v43 = a1;
      do
      {
        v31 = a3 + v30;
        sub_1D5D8197C(v28 + v30, (uint64_t)v14, type metadata accessor for ReadonlyAggregate);
        v32 = a2 + v30;
        v33 = a3;
        v34 = (uint64_t)v14;
        v35 = v44;
        sub_1D5D8197C(a2 + v30, v44, type metadata accessor for ReadonlyAggregate);
        v36 = sub_1D5E37350();
        v37 = v35;
        v14 = (char *)v34;
        sub_1D5D7CFCC(v37, type metadata accessor for ReadonlyAggregate);
        sub_1D5D7CFCC(v34, type metadata accessor for ReadonlyAggregate);
        if (v36 == 1)
        {
          if (v33 < a2 || v31 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack();
            v39 = v42;
            v38 = v43;
          }
          else
          {
            v39 = v42;
            v38 = v43;
            if (v33 != a2)
              swift_arrayInitWithTakeBackToFront();
          }
          v48 += v30;
        }
        else
        {
          v40 = v46;
          v46 += v30;
          if (v33 < v40 || v31 >= v40)
          {
            swift_arrayInitWithTakeFrontToBack();
            v32 = a2;
            v39 = v42;
            v38 = v43;
          }
          else
          {
            v39 = v42;
            v38 = v43;
            if (v33 != v40)
              swift_arrayInitWithTakeBackToFront();
            v32 = a2;
          }
        }
        v28 = v46;
        if (v46 <= v39)
          break;
        a2 = v32;
        a3 = v31;
      }
      while (v32 > v38);
    }
  }
  else
  {
    v19 = v18 * v16;
    if (a4 < a1 || a1 + v19 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v21 = a4 + v19;
    v46 = a4 + v19;
    if (v19 >= 1 && a2 < a3)
    {
      do
      {
        sub_1D5D8197C(a2, (uint64_t)v14, type metadata accessor for ReadonlyAggregate);
        v23 = v44;
        sub_1D5D8197C(a4, v44, type metadata accessor for ReadonlyAggregate);
        v24 = sub_1D5E37350();
        sub_1D5D7CFCC(v23, type metadata accessor for ReadonlyAggregate);
        sub_1D5D7CFCC((uint64_t)v14, type metadata accessor for ReadonlyAggregate);
        v25 = v48;
        if (v24 == 1)
        {
          v26 = a2 + v16;
          if (v48 < a2 || v48 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v48 == a2)
          {
            v25 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v27 = v47 + v16;
          if (v48 < v47 || v48 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v47 = v27;
          v26 = a2;
        }
        v48 = v25 + v16;
        a4 = v47;
        if (v47 >= v21)
          break;
        a2 = v26;
      }
      while (v26 < a3);
    }
  }
  sub_1D5D9F718(&v48, &v47, (uint64_t *)&v46);
  return 1;
}

uint64_t sub_1D5D9F718(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for ReadonlyAggregate(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_13;
  if (v3 < v4 || v3 >= v4 + (uint64_t)(v5 - v4) / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

uint64_t sub_1D5D9F7C8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = type metadata accessor for ReadonlyAggregate(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v11, v14);
  v17 = (char *)&v33 - v16;
  v38 = a4;
  v20 = *(_QWORD *)(a4 + 64);
  v19 = a4 + 64;
  v18 = v20;
  v37 = v19;
  v21 = -1 << *(_BYTE *)(v19 - 32);
  if (-v21 < 64)
    v22 = ~(-1 << -(char)v21);
  else
    v22 = -1;
  v23 = v22 & v18;
  if (!a2)
  {
    v24 = 0;
    a3 = 0;
LABEL_38:
    v32 = v37;
    *a1 = v38;
    a1[1] = v32;
    a1[2] = ~v21;
    a1[3] = v24;
    a1[4] = v23;
    return a3;
  }
  if (!a3)
  {
    v24 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(v19 - 32);
  v35 = a1;
  v24 = 0;
  v25 = 0;
  v36 = (unint64_t)(63 - v21) >> 6;
  v33 = v36 - 1;
  if (!v23)
    goto LABEL_9;
LABEL_8:
  v26 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  v27 = v26 | (v24 << 6);
  while (1)
  {
    ++v25;
    v31 = *(_QWORD *)(v9 + 72);
    sub_1D5D8197C(*(_QWORD *)(v38 + 56) + v31 * v27, (uint64_t)v13, type metadata accessor for ReadonlyAggregate);
    sub_1D5D8528C((uint64_t)v13, (uint64_t)v17, type metadata accessor for ReadonlyAggregate);
    result = sub_1D5D8528C((uint64_t)v17, a2, type metadata accessor for ReadonlyAggregate);
    if (v25 == a3)
      goto LABEL_37;
    a2 += v31;
    if (v23)
      goto LABEL_8;
LABEL_9:
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v28 >= v36)
      goto LABEL_32;
    v29 = *(_QWORD *)(v37 + 8 * v28);
    if (!v29)
      break;
LABEL_18:
    v23 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v28 << 6);
    v24 = v28;
  }
  v24 += 2;
  if (v28 + 1 >= v36)
  {
    v23 = 0;
    v24 = v28;
    goto LABEL_36;
  }
  v29 = *(_QWORD *)(v37 + 8 * v24);
  if (v29)
    goto LABEL_14;
  v30 = v28 + 2;
  if (v28 + 2 >= v36)
    goto LABEL_32;
  v29 = *(_QWORD *)(v37 + 8 * v30);
  if (v29)
    goto LABEL_17;
  v24 = v28 + 3;
  if (v28 + 3 >= v36)
  {
    v23 = 0;
    v24 = v28 + 2;
    goto LABEL_36;
  }
  v29 = *(_QWORD *)(v37 + 8 * v24);
  if (v29)
  {
LABEL_14:
    v28 = v24;
    goto LABEL_18;
  }
  v30 = v28 + 4;
  if (v28 + 4 >= v36)
  {
LABEL_32:
    v23 = 0;
LABEL_36:
    a3 = v25;
LABEL_37:
    v21 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v29 = *(_QWORD *)(v37 + 8 * v30);
  if (v29)
  {
LABEL_17:
    v28 = v30;
    goto LABEL_18;
  }
  while (1)
  {
    v28 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v28 >= v36)
    {
      v23 = 0;
      v24 = v33;
      goto LABEL_36;
    }
    v29 = *(_QWORD *)(v37 + 8 * v28);
    ++v30;
    if (v29)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1D5D9FA84(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_1D5D9FC80(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    v13 = *(_QWORD *)(a4 + 48) + 24 * v12;
    v14 = *(_QWORD *)(v13 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v13;
    *(_QWORD *)(a2 + 16) = v14;
    a2 += 24;
    if (v9 == a3)
      goto LABEL_35;
  }
  v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v15 >= v10)
    goto LABEL_30;
  v16 = *(_QWORD *)(v4 + 8 * v15);
  if (v16)
    goto LABEL_19;
  v8 += 2;
  if (v15 + 1 >= v10)
  {
    v7 = 0;
    v8 = v15;
    goto LABEL_34;
  }
  v16 = *(_QWORD *)(v4 + 8 * v8);
  if (v16)
  {
LABEL_15:
    v15 = v8;
LABEL_19:
    v18 = __clz(__rbit64(v16));
    v7 = (v16 - 1) & v16;
    v12 = v18 + (v15 << 6);
    v8 = v15;
    goto LABEL_8;
  }
  v17 = v15 + 2;
  if (v15 + 2 >= v10)
    goto LABEL_30;
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v15 = v17;
    goto LABEL_19;
  }
  v8 = v15 + 3;
  if (v15 + 3 >= v10)
  {
    v7 = 0;
    v8 = v15 + 2;
    goto LABEL_34;
  }
  v16 = *(_QWORD *)(v4 + 8 * v8);
  if (v16)
    goto LABEL_15;
  v17 = v15 + 4;
  if (v15 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
    goto LABEL_18;
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v16 = *(_QWORD *)(v4 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1D5D9FE28(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1D5DA0024(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v28 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(a4 + 56) + 56 * v16;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    v25 = *(_QWORD *)(v20 + 32);
    v26 = *(_QWORD *)(v20 + 40);
    v27 = *(_BYTE *)(v20 + 48);
    *(_QWORD *)v11 = *(_QWORD *)v20;
    *(_QWORD *)(v11 + 8) = v22;
    *(_QWORD *)(v11 + 16) = v23;
    *(_QWORD *)(v11 + 24) = v24;
    *(_QWORD *)(v11 + 32) = v25;
    *(_QWORD *)(v11 + 40) = v26;
    *(_BYTE *)(v11 + 48) = v27;
    if (v13 == v10)
    {
      sub_1D5D801B0(v21, v22, v23, v24, v25, v26, v27);
      goto LABEL_38;
    }
    v11 += 56;
    result = sub_1D5D801B0(v21, v22, v23, v24, v25, v26, v27);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v28;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_1D5DA0240(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  v25 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = *(_QWORD *)(a4 + 56) + 40 * v15;
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(_BYTE *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 24);
    v23 = *(_QWORD *)(v19 + 32);
    *(_QWORD *)v10 = *(_QWORD *)v19;
    *(_QWORD *)(v10 + 8) = v20;
    *(_BYTE *)(v10 + 16) = v21;
    *(_QWORD *)(v10 + 24) = v22;
    *(_QWORD *)(v10 + 32) = v23;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 40;
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v24;
      result = v25;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_1D5DA046C(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  int64_t v41;

  v6 = *(_QWORD *)(a4 + 56);
  v4 = a4 + 56;
  v5 = v6;
  v39 = v4;
  v7 = -1 << *(_BYTE *)(v4 - 24);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  if (!a2)
  {
    v11 = 0;
    a3 = 0;
LABEL_38:
    *result = a4;
    result[1] = v39;
    result[2] = ~v7;
    result[3] = v11;
    result[4] = v9;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v11 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v10 = a2;
  v36 = -1 << *(_BYTE *)(v4 - 24);
  v37 = result;
  v11 = 0;
  v12 = 0;
  v38 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v41 = v11;
  v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    v18 = *(_QWORD *)(a4 + 48) + 112 * v14;
    v20 = *(_QWORD *)v18;
    v19 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    v24 = *(_QWORD *)(v18 + 32);
    v23 = *(_QWORD *)(v18 + 40);
    v25 = *(_QWORD *)(v18 + 48);
    v26 = *(_QWORD *)(v18 + 56);
    v27 = *(_BYTE *)(v18 + 64);
    v28 = *(_BYTE *)(v18 + 65);
    v29 = *(_BYTE *)(v18 + 66);
    v30 = *(_BYTE *)(v18 + 67);
    v31 = *(_QWORD *)(v18 + 72);
    v32 = *(_QWORD *)(v18 + 80);
    v33 = *(_BYTE *)(v18 + 88);
    v34 = *(_QWORD *)(v18 + 96);
    LOBYTE(v18) = *(_BYTE *)(v18 + 104);
    *(_QWORD *)v10 = v20;
    *(_QWORD *)(v10 + 8) = v19;
    *(_QWORD *)(v10 + 16) = v21;
    *(_QWORD *)(v10 + 24) = v22;
    *(_QWORD *)(v10 + 32) = v24;
    *(_QWORD *)(v10 + 40) = v23;
    *(_QWORD *)(v10 + 48) = v25;
    *(_QWORD *)(v10 + 56) = v26;
    *(_BYTE *)(v10 + 64) = v27;
    *(_BYTE *)(v10 + 65) = v28;
    *(_BYTE *)(v10 + 66) = v29;
    *(_BYTE *)(v10 + 67) = v30;
    *(_QWORD *)(v10 + 72) = v31;
    *(_QWORD *)(v10 + 80) = v32;
    *(_BYTE *)(v10 + 88) = v33;
    *(_QWORD *)(v10 + 96) = v34;
    *(_BYTE *)(v10 + 104) = v18;
    v35 = a3;
    if (v12 == a3)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D5DA2208(v31, v32);
      v7 = v36;
      result = v37;
      a3 = v35;
      v11 = v41;
      goto LABEL_38;
    }
    v10 += 112;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)sub_1D5DA2208(v31, v32);
    a3 = v35;
    v11 = v41;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v38)
      goto LABEL_33;
    v16 = *(_QWORD *)(v39 + 8 * v15);
    if (!v16)
      break;
LABEL_18:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v41 = v15;
  }
  v11 += 2;
  if (v15 + 1 >= v38)
  {
    v9 = 0;
    v11 = v15;
    goto LABEL_37;
  }
  v16 = *(_QWORD *)(v39 + 8 * v11);
  if (v16)
    goto LABEL_14;
  v17 = v15 + 2;
  if (v15 + 2 >= v38)
    goto LABEL_33;
  v16 = *(_QWORD *)(v39 + 8 * v17);
  if (v16)
    goto LABEL_17;
  v11 = v15 + 3;
  if (v15 + 3 >= v38)
  {
    v9 = 0;
    v11 = v15 + 2;
    goto LABEL_37;
  }
  v16 = *(_QWORD *)(v39 + 8 * v11);
  if (v16)
  {
LABEL_14:
    v15 = v11;
    goto LABEL_18;
  }
  v17 = v15 + 4;
  if (v15 + 4 >= v38)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    a3 = v12;
    v7 = v36;
    result = v37;
    goto LABEL_38;
  }
  v16 = *(_QWORD *)(v39 + 8 * v17);
  if (v16)
  {
LABEL_17:
    v15 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v38)
    {
      v9 = 0;
      v11 = v38 - 1;
      goto LABEL_37;
    }
    v16 = *(_QWORD *)(v39 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1D5DA0780(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 3;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_1D5DA0984(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *sub_1D5DA0B18(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1D5DA0CAC(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24[2];
  uint64_t v25;

  v25 = a1;
  v10 = a2 + 56;
  v11 = 1 << *(_BYTE *)(a2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(a2 + 56);
  v23 = (unint64_t)(v11 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v15 = 0;
  if (!v13)
    goto LABEL_5;
LABEL_4:
  v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v22 = v21[1];
    v24[0] = *v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    sub_1D5D97488((uint64_t)&v25, v24, a3, a4, a5);
    if (v5)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    if (v13)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v15 >= v23)
      goto LABEL_26;
    v19 = *(_QWORD *)(v10 + 8 * v15);
    if (!v19)
      break;
LABEL_17:
    v13 = (v19 - 1) & v19;
  }
  v20 = v15 + 1;
  if (v15 + 1 >= v23)
    goto LABEL_26;
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
    goto LABEL_16;
  v20 = v15 + 2;
  if (v15 + 2 >= v23)
    goto LABEL_26;
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
    goto LABEL_16;
  v20 = v15 + 3;
  if (v15 + 3 >= v23)
    goto LABEL_26;
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
    goto LABEL_16;
  v20 = v15 + 4;
  if (v15 + 4 >= v23)
  {
LABEL_26:
    swift_release();
    return v25;
  }
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
  {
LABEL_16:
    v15 = v20;
    goto LABEL_17;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v23)
      goto LABEL_26;
    v19 = *(_QWORD *)(v10 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *sub_1D5DA0E98(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *result;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD, _QWORD);
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  int64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;

  v79 = a4;
  v7 = type metadata accessor for ReadonlyAggregate(0);
  v76 = *(_QWORD *)(v7 - 8);
  v77 = v7;
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v75 = (uint64_t *)((char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v74 = (uint64_t)&v66 - v13;
  MEMORY[0x1E0C80A78](v12, v14);
  v72 = (uint64_t)&v66 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5480);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (uint64_t *)((char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for Aggregate(0);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v68 = (uint64_t)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v25);
  v67 = (uint64_t)&v66 - v26;
  v27 = a1 + 56;
  v28 = 1 << *(_BYTE *)(a1 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & *(_QWORD *)(a1 + 56);
  v81 = (uint64_t *)(a2 + OBJC_IVAR____TtC10XavierNews16AggregateContext_aggregates);
  v82 = a1;
  v80 = (unint64_t)(v28 + 63) >> 6;
  result = (_QWORD *)swift_bridgeObjectRetain();
  v32 = 0;
  v69 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v70 = a1 + 56;
  v78 = v19;
  v73 = a3;
  v71 = v21;
  while (v30)
  {
    v83 = (v30 - 1) & v30;
    v84 = v32;
    v48 = __clz(__rbit64(v30)) | (v32 << 6);
LABEL_27:
    v53 = v81;
    v54 = (uint64_t *)(*(_QWORD *)(v82 + 48) + 16 * v48);
    v55 = *v54;
    v56 = v54[1];
    swift_beginAccess();
    v57 = *v53;
    v58 = *(_QWORD *)(v57 + 16);
    swift_bridgeObjectRetain();
    if (v58)
    {
      v59 = sub_1D5D7FFCC(v55, v56);
      if ((v60 & 1) != 0)
      {
        v33 = *(_QWORD *)(v57 + 56) + *(_QWORD *)(v76 + 72) * v59;
        v34 = v74;
        sub_1D5D8197C(v33, v74, type metadata accessor for ReadonlyAggregate);
        v35 = v72;
        sub_1D5D8528C(v34, v72, type metadata accessor for ReadonlyAggregate);
        swift_endAccess();
        v36 = v75;
        sub_1D5D8197C(v35, (uint64_t)v75, type metadata accessor for ReadonlyAggregate);
        v38 = *v36;
        v37 = v36[1];
        v39 = v36[2];
        v40 = v36[3];
        v41 = v36[4];
        v42 = (char *)v19 + *(int *)(v20 + 32);
        v43 = (char *)v36 + *(int *)(v77 + 32);
        v44 = sub_1D5E37368();
        v45 = v43;
        v19 = v78;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v45, v44);
        *v19 = v38;
        v19[1] = v37;
        v21 = v71;
        v19[2] = v39;
        v19[3] = v40;
        v19[4] = v41;
        a3 = v73;
        swift_bridgeObjectRetain();
        v46 = (uint64_t)v36;
        v27 = v70;
        sub_1D5D7CFCC(v46, type metadata accessor for ReadonlyAggregate);
        sub_1D5D7CFCC(v35, type metadata accessor for ReadonlyAggregate);
LABEL_5:
        v47 = 0;
        goto LABEL_6;
      }
    }
    swift_endAccess();
    if (a3)
    {
      swift_retain();
      a3(v55, v56);
      sub_1D5DA1AF0((uint64_t)a3);
      goto LABEL_5;
    }
    v47 = 1;
LABEL_6:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v47, 1, v20);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    {
      result = (_QWORD *)sub_1D5DA22F4((uint64_t)v19, &qword_1EFFB5480);
    }
    else
    {
      v61 = v67;
      sub_1D5D8528C((uint64_t)v19, v67, type metadata accessor for Aggregate);
      sub_1D5D8528C(v61, v68, type metadata accessor for Aggregate);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v69 = (_QWORD *)sub_1D5DAB114(0, v69[2] + 1, 1, v69);
      v63 = v69[2];
      v62 = v69[3];
      if (v63 >= v62 >> 1)
        v69 = (_QWORD *)sub_1D5DAB114(v62 > 1, v63 + 1, 1, v69);
      v64 = v68;
      v65 = v69;
      v69[2] = v63 + 1;
      result = (_QWORD *)sub_1D5D8528C(v64, (uint64_t)v65+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72) * v63, type metadata accessor for Aggregate);
      v19 = v78;
    }
    v32 = v84;
    v30 = v83;
  }
  v49 = v32 + 1;
  if (__OFADD__(v32, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v49 >= v80)
    goto LABEL_37;
  v50 = *(_QWORD *)(v27 + 8 * v49);
  v51 = v32 + 1;
  if (v50)
    goto LABEL_26;
  v51 = v32 + 2;
  if (v32 + 2 >= v80)
    goto LABEL_37;
  v50 = *(_QWORD *)(v27 + 8 * v51);
  if (v50)
    goto LABEL_26;
  v51 = v32 + 3;
  if (v32 + 3 >= v80)
    goto LABEL_37;
  v50 = *(_QWORD *)(v27 + 8 * v51);
  if (v50)
    goto LABEL_26;
  v51 = v32 + 4;
  if (v32 + 4 >= v80)
    goto LABEL_37;
  v50 = *(_QWORD *)(v27 + 8 * v51);
  if (v50)
  {
LABEL_26:
    v83 = (v50 - 1) & v50;
    v84 = v51;
    v48 = __clz(__rbit64(v50)) + (v51 << 6);
    goto LABEL_27;
  }
  v52 = v32 + 5;
  if (v32 + 5 >= v80)
  {
LABEL_37:
    swift_release();
    return v69;
  }
  v50 = *(_QWORD *)(v27 + 8 * v52);
  if (v50)
  {
    v51 = v32 + 5;
    goto LABEL_26;
  }
  while (1)
  {
    v51 = v52 + 1;
    if (__OFADD__(v52, 1))
      break;
    if (v51 >= v80)
      goto LABEL_37;
    v50 = *(_QWORD *)(v27 + 8 * v51);
    ++v52;
    if (v50)
      goto LABEL_26;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1D5DA1400(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE v12[8];
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD v16[5];
  _OWORD v17[2];

  v2 = *(_QWORD *)(a1 + 16);
  sub_1D5DA214C();
  result = sub_1D5E3759C();
  v15 = result;
  if (v2)
  {
    v4 = (__int128 *)(a1 + 32);
    do
    {
      v5 = v4[4];
      v6 = v4[5];
      v7 = v4[2];
      v16[3] = v4[3];
      v16[4] = v5;
      v17[0] = v6;
      *(_OWORD *)((char *)v17 + 9) = *(__int128 *)((char *)v4 + 89);
      v8 = *v4;
      v9 = v4[1];
      v4 += 7;
      v16[0] = v8;
      v16[1] = v9;
      v16[2] = v7;
      sub_1D5DA2190((uint64_t)v16);
      sub_1D5E0CF48((uint64_t)v12, (uint64_t)v16);
      v10 = v13;
      v11 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D5DA2260(v10, v11);
      --v2;
    }
    while (v2);
    return v15;
  }
  return result;
}

uint64_t sub_1D5DA14F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t);
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  int isUniquelyReferenced_nonNull_native;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  _QWORD *v61;

  v52 = a2;
  v3 = type metadata accessor for ReadonlyAggregate(0);
  v57 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v5, v8);
  v11 = (uint64_t *)((char *)&v52 - v10);
  MEMORY[0x1E0C80A78](v9, v12);
  v56 = (uint64_t)&v52 - v13;
  v14 = *(_QWORD *)(a1 + 56);
  v54 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v55 = (unint64_t)(v15 + 63) >> 6;
  v58 = a1;
  swift_bridgeObjectRetain();
  v18 = 0;
  v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v20 = type metadata accessor for ReadonlyAggregate;
  while (1)
  {
    if (v17)
    {
      v59 = (v17 - 1) & v17;
      v60 = v18;
      v21 = __clz(__rbit64(v17)) | (v18 << 6);
    }
    else
    {
      v22 = v18 + 1;
      if (__OFADD__(v18, 1))
        goto LABEL_38;
      if (v22 >= v55)
      {
LABEL_35:
        swift_release();
        v48 = v53;
        *(_QWORD *)(v53 + OBJC_IVAR____TtC10XavierNews16AggregateContext_aggregates) = v19;
        v49 = v48 + OBJC_IVAR____TtC10XavierNews16AggregateContext_updatedAt;
        v50 = sub_1D5E37368();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v49, v52, v50);
        return v48;
      }
      v23 = *(_QWORD *)(v54 + 8 * v22);
      v24 = v18 + 1;
      if (!v23)
      {
        v24 = v18 + 2;
        if (v18 + 2 >= v55)
          goto LABEL_35;
        v23 = *(_QWORD *)(v54 + 8 * v24);
        if (!v23)
        {
          v24 = v18 + 3;
          if (v18 + 3 >= v55)
            goto LABEL_35;
          v23 = *(_QWORD *)(v54 + 8 * v24);
          if (!v23)
          {
            v24 = v18 + 4;
            if (v18 + 4 >= v55)
              goto LABEL_35;
            v23 = *(_QWORD *)(v54 + 8 * v24);
            if (!v23)
            {
              v24 = v18 + 5;
              if (v18 + 5 >= v55)
                goto LABEL_35;
              v23 = *(_QWORD *)(v54 + 8 * v24);
              if (!v23)
              {
                v25 = v18 + 6;
                if (v18 + 6 >= v55)
                  goto LABEL_35;
                v23 = *(_QWORD *)(v54 + 8 * v25);
                if (!v23)
                {
                  while (1)
                  {
                    v24 = v25 + 1;
                    if (__OFADD__(v25, 1))
                      goto LABEL_39;
                    if (v24 >= v55)
                      goto LABEL_35;
                    v23 = *(_QWORD *)(v54 + 8 * v24);
                    ++v25;
                    if (v23)
                      goto LABEL_25;
                  }
                }
                v24 = v18 + 6;
              }
            }
          }
        }
      }
LABEL_25:
      v59 = (v23 - 1) & v23;
      v60 = v24;
      v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    v26 = *(_QWORD *)(v57 + 72);
    v27 = v56;
    sub_1D5D8197C(*(_QWORD *)(v58 + 48) + v26 * v21, v56, v20);
    sub_1D5D8528C(v27, (uint64_t)v11, v20);
    v29 = *v11;
    v28 = v11[1];
    v30 = (uint64_t)v11;
    v31 = (uint64_t)v11;
    v32 = (uint64_t)v7;
    v33 = v20;
    sub_1D5D8197C(v31, (uint64_t)v7, v20);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v61 = v19;
    v36 = sub_1D5D7FFCC(v29, v28);
    v37 = v19[2];
    v38 = (v35 & 1) == 0;
    v39 = v37 + v38;
    if (__OFADD__(v37, v38))
      break;
    v40 = v35;
    if (v19[3] >= v39)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1D5D97D04();
    }
    else
    {
      sub_1D5D9A4F8(v39, isUniquelyReferenced_nonNull_native);
      v41 = sub_1D5D7FFCC(v29, v28);
      if ((v40 & 1) != (v42 & 1))
        goto LABEL_40;
      v36 = v41;
    }
    v7 = (char *)v32;
    v19 = v61;
    if ((v40 & 1) != 0)
    {
      sub_1D5DA190C(v32, v61[7] + v36 * v26);
      v20 = v33;
    }
    else
    {
      v61[(v36 >> 6) + 8] |= 1 << v36;
      v43 = (uint64_t *)(v19[6] + 16 * v36);
      *v43 = v29;
      v43[1] = v28;
      v44 = v19[7] + v36 * v26;
      v20 = v33;
      sub_1D5D8528C(v32, v44, v33);
      v45 = v19[2];
      v46 = __OFADD__(v45, 1);
      v47 = v45 + 1;
      if (v46)
        goto LABEL_37;
      v19[2] = v47;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = (uint64_t *)v30;
    sub_1D5D7CFCC(v30, v20);
    v17 = v59;
    v18 = v60;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = sub_1D5E3795C();
  __break(1u);
  return result;
}

uint64_t sub_1D5DA190C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadonlyAggregate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1D5DA1950()
{
  unint64_t result;

  result = qword_1EFFB5320;
  if (!qword_1EFFB5320)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3925C, &type metadata for AggregateContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5320);
  }
  return result;
}

unint64_t sub_1D5DA1994()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EFFB5330;
  if (!qword_1EFFB5330)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFFB5328);
    v2 = sub_1D5D7B774(&qword_1EFFB5338, type metadata accessor for ReadonlyAggregate, (uint64_t)&protocol conformance descriptor for ReadonlyAggregate);
    v3[0] = MEMORY[0x1E0DEA970];
    v3[1] = v2;
    result = MEMORY[0x1D827D8E0](MEMORY[0x1E0DEA0B8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EFFB5330);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D827D8D4](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_1D5DA1A5C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EFFB5348;
  if (!qword_1EFFB5348)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFFB5328);
    v2 = sub_1D5D7B774(&qword_1EFFB5350, type metadata accessor for ReadonlyAggregate, (uint64_t)&protocol conformance descriptor for ReadonlyAggregate);
    v3[0] = MEMORY[0x1E0DEA9A0];
    v3[1] = v2;
    result = MEMORY[0x1D827D8E0](MEMORY[0x1E0DEA0D8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EFFB5348);
  }
  return result;
}

uint64_t sub_1D5DA1AE0(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_1D5DA1AF0(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

_UNKNOWN **sub_1D5DA1B00()
{
  return &off_1E9A85870;
}

_UNKNOWN **sub_1D5DA1B0C()
{
  return &protocol witness table for ReadonlyAggregate;
}

_QWORD *sub_1D5DA1B1C(_QWORD *result)
{
  if (*result >= 0xFFFFFFFFuLL)
    return (_QWORD *)swift_release();
  return result;
}

unint64_t *sub_1D5DA1B38(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_1D5DA1BC4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  if (*a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_release();
  return a1;
}

uint64_t sub_1D5DA1C2C(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t sub_1D5DA1C7C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *sub_1D5DA1CD0(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

uint64_t dispatch thunk of AggregateContextType.lookupAll()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AggregateContextType.lookup(with:option:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of AggregateContextType.update(with:option:updateBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t sub_1D5DA1D08()
{
  return type metadata accessor for AggregateContext();
}

uint64_t type metadata accessor for AggregateContext()
{
  uint64_t result;

  result = qword_1EFFB53C0;
  if (!qword_1EFFB53C0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D5DA1D4C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D5E37368();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AggregateContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AggregateContext.__allocating_init(aggregates:updatedAt:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of AggregateContext.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t getEnumTagSinglePayload for AggregateContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AggregateContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D5DA1ECC + 4 * byte_1D5E39095[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D5DA1F00 + 4 * byte_1D5E39090[v4]))();
}

uint64_t sub_1D5DA1F00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA1F08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DA1F10);
  return result;
}

uint64_t sub_1D5DA1F1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DA1F24);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D5DA1F28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA1F30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA1F3C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D5DA1F48(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AggregateContext.CodingKeys()
{
  return &type metadata for AggregateContext.CodingKeys;
}

unint64_t sub_1D5DA1F68()
{
  unint64_t result;

  result = qword_1EFFB5458;
  if (!qword_1EFFB5458)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39234, &type metadata for AggregateContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5458);
  }
  return result;
}

unint64_t sub_1D5DA1FB0()
{
  unint64_t result;

  result = qword_1EFFB5460;
  if (!qword_1EFFB5460)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E391A4, &type metadata for AggregateContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5460);
  }
  return result;
}

unint64_t sub_1D5DA1FF8()
{
  unint64_t result;

  result = qword_1EFFB5468;
  if (!qword_1EFFB5468)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E391CC, &type metadata for AggregateContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5468);
  }
  return result;
}

uint64_t sub_1D5DA203C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4164657461647075 && a2 == 0xE900000000000074;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461676572676761 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D5DA2144()
{
  return swift_release();
}

unint64_t sub_1D5DA214C()
{
  unint64_t result;

  result = qword_1ED9AEC30;
  if (!qword_1ED9AEC30)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for GroupableHeadline, &type metadata for GroupableHeadline);
    atomic_store(result, (unint64_t *)&qword_1ED9AEC30);
  }
  return result;
}

uint64_t sub_1D5DA2190(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D5DA2208(v2, v3);
  return a1;
}

uint64_t sub_1D5DA2208(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1D5DA221C(a1, a2);
  return a1;
}

uint64_t sub_1D5DA221C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1D5DA2260(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1D5DA2274(a1, a2);
  return a1;
}

uint64_t sub_1D5DA2274(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1D5DA22B8(uint64_t a1, uint64_t a2)
{
  _s14CandidateGroupVwta(a2, a1);
  return a2;
}

uint64_t sub_1D5DA22F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

double sub_1D5DA2334()
{
  uint64_t v0;

  return *(double *)v0;
}

double sub_1D5DA233C()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double sub_1D5DA2344()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double sub_1D5DA234C()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double sub_1D5DA2354()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double sub_1D5DA235C()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

uint64_t sub_1D5DA2364()
{
  sub_1D5E37650();
  sub_1D5E37458();
  sub_1D5E37584();
  sub_1D5E37458();
  sub_1D5E37584();
  sub_1D5E37458();
  sub_1D5E37584();
  sub_1D5E37458();
  sub_1D5E37584();
  sub_1D5E37458();
  sub_1D5E37584();
  sub_1D5E37458();
  sub_1D5E37584();
  return 0;
}

uint64_t sub_1D5DA2508(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D5DA2540 + 4 * byte_1D5E392AC[a1]))(0xD000000000000011, 0x80000001D5E475B0);
}

uint64_t sub_1D5DA2540()
{
  return 0x626D654D72657375;
}

uint64_t sub_1D5DA2564()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1D5DA25AC()
{
  return 0x706F546369706F74;
}

BOOL sub_1D5DA25D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D5DA25E4()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DA2628()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5DA2650()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DA2690()
{
  unsigned __int8 *v0;

  return sub_1D5DA2508(*v0);
}

uint64_t sub_1D5DA2698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DA2E64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DA26BC()
{
  return 0;
}

void sub_1D5DA26C8(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1D5DA26D4()
{
  sub_1D5DA28F8();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DA26FC()
{
  sub_1D5DA28F8();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DA2724(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5498);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DA28F8();
  sub_1D5E379F8();
  v9[15] = 0;
  sub_1D5E37884();
  if (!v1)
  {
    v9[14] = 1;
    sub_1D5E37884();
    v9[13] = 2;
    sub_1D5E37884();
    v9[12] = 3;
    sub_1D5E37884();
    v9[11] = 4;
    sub_1D5E37884();
    v9[10] = 5;
    sub_1D5E37884();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
}

unint64_t sub_1D5DA28F8()
{
  unint64_t result;

  result = qword_1EFFB54A0;
  if (!qword_1EFFB54A0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39424, &_s15TagScoreProfileV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB54A0);
  }
  return result;
}

uint64_t sub_1D5DA293C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB54A8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DA28F8();
  sub_1D5E379E0();
  if (!v2)
  {
    v29 = 0;
    sub_1D5E377B8();
    v11 = v10;
    v28 = 1;
    sub_1D5E377B8();
    v13 = v12;
    v27 = 2;
    sub_1D5E377B8();
    v15 = v14;
    v26 = 3;
    sub_1D5E377B8();
    v17 = v16;
    v25 = 4;
    sub_1D5E377B8();
    v20 = v19;
    v24 = 5;
    sub_1D5E377B8();
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *a2 = v11;
    a2[1] = v13;
    a2[2] = v15;
    a2[3] = v17;
    a2[4] = v20;
    a2[5] = v22;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DA2B44@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DA293C(a1, a2);
}

uint64_t sub_1D5DA2B58(_QWORD *a1)
{
  return sub_1D5DA2724(a1);
}

uint64_t _s15TagScoreProfileVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s15TagScoreProfileVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s15TagScoreProfileVwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *_s15TagScoreProfileVMa()
{
  return &_s15TagScoreProfileVN;
}

uint64_t _s15TagScoreProfileV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s15TagScoreProfileV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1D5DA2CF8 + 4 * byte_1D5E392B7[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1D5DA2D2C + 4 * byte_1D5E392B2[v4]))();
}

uint64_t sub_1D5DA2D2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA2D34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DA2D3CLL);
  return result;
}

uint64_t sub_1D5DA2D48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DA2D50);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1D5DA2D54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA2D5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA2D68(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D5DA2D74(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *_s15TagScoreProfileV10CodingKeysOMa()
{
  return &_s15TagScoreProfileV10CodingKeysON;
}

unint64_t sub_1D5DA2D90()
{
  unint64_t result;

  result = qword_1EFFB54B0;
  if (!qword_1EFFB54B0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E393FC, &_s15TagScoreProfileV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB54B0);
  }
  return result;
}

unint64_t sub_1D5DA2DD8()
{
  unint64_t result;

  result = qword_1EFFB54B8;
  if (!qword_1EFFB54B8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3936C, &_s15TagScoreProfileV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB54B8);
  }
  return result;
}

unint64_t sub_1D5DA2E20()
{
  unint64_t result;

  result = qword_1EFFB54C0;
  if (!qword_1EFFB54C0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39394, &_s15TagScoreProfileV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB54C0);
  }
  return result;
}

uint64_t sub_1D5DA2E64(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001D5E475B0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x626D654D72657375 && a2 == 0xEE00706968737265 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xED000065726F6353 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001D5E475D0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001D5E475F0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x706F546369706F74 && a2 == 0xEF65726F63536369)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

BOOL static PremiumSubscriptionState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PremiumSubscriptionState.hash(into:)()
{
  return sub_1D5E379B0();
}

uint64_t PremiumSubscriptionState.hashValue.getter()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

BOOL sub_1D5DA31B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D5DA31CC()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DA3210()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5DA3238()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t UserContext.subscribed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UserContext.autofavorited.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UserContext.muted.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UserContext.ignored.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UserContext.groupable.getter()
{
  return swift_bridgeObjectRetain();
}

void UserContext.subscriptionState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

uint64_t UserContext.bundled.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UserContext.purchased.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UserContext.read.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UserContext.listened.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UserContext.seen.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 UserContext.location.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 120);
  v3 = *(_BYTE *)(v1 + 128);
  result = *(__n128 *)(v1 + 104);
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  return result;
}

uint64_t UserContext.newlySubscribed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UserContext.__allocating_init(subscribed:autofavorited:muted:ignored:groupable:subscriptionState:bundled:purchased:read:listened:seen:location:newlySubscribed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, __int128 *a11, uint64_t a12)
{
  uint64_t v20;

  swift_allocObject();
  v20 = sub_1D5DA354C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t UserContext.init(subscribed:autofavorited:muted:ignored:groupable:subscriptionState:bundled:purchased:read:listened:seen:location:newlySubscribed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, __int128 *a11, uint64_t a12)
{
  uint64_t v12;

  v12 = sub_1D5DA354C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t UserContext.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t UserContext.__deallocating_deinit()
{
  UserContext.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1D5DA3498()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DA34A4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DA34B0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DA34BC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DA34C8()
{
  return swift_bridgeObjectRetain();
}

void sub_1D5DA34D4(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(*(_QWORD *)v1 + 56);
}

uint64_t sub_1D5DA34E4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DA34F0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DA34FC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DA3508()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DA3514()
{
  return swift_bridgeObjectRetain();
}

__n128 sub_1D5DA3520@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v3 = *(_BYTE *)(*(_QWORD *)v1 + 128);
  result = *(__n128 *)(*(_QWORD *)v1 + 104);
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  return result;
}

uint64_t sub_1D5DA3540()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DA354C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, __int128 *a11, uint64_t a12)
{
  uint64_t v12;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;

  v17 = *a6;
  v25 = *a11;
  v18 = *((_QWORD *)a11 + 2);
  v19 = *((_BYTE *)a11 + 24);
  v20 = sub_1D5D81DA4(a1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 16) = v20;
  v21 = sub_1D5D81DA4(a2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 24) = v21;
  v22 = sub_1D5D81DA4(a3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 32) = v22;
  v23 = sub_1D5D81DA4(a4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 40) = v23;
  *(_QWORD *)(v12 + 48) = sub_1D5D81DA4(a5);
  *(_BYTE *)(v12 + 56) = v17;
  *(_QWORD *)(v12 + 64) = a7;
  *(_QWORD *)(v12 + 72) = a8;
  *(_OWORD *)(v12 + 80) = a9;
  *(_QWORD *)(v12 + 96) = a10;
  *(_OWORD *)(v12 + 104) = v25;
  *(_QWORD *)(v12 + 120) = v18;
  *(_BYTE *)(v12 + 128) = v19;
  *(_QWORD *)(v12 + 136) = a12;
  return v12;
}

unint64_t sub_1D5DA367C()
{
  unint64_t result;

  result = qword_1EFFB54C8;
  if (!qword_1EFFB54C8)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for PremiumSubscriptionState, &type metadata for PremiumSubscriptionState);
    atomic_store(result, (unint64_t *)&qword_1EFFB54C8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PremiumSubscriptionState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PremiumSubscriptionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1D5DA379C + 4 * byte_1D5E39485[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1D5DA37D0 + 4 * byte_1D5E39480[v4]))();
}

uint64_t sub_1D5DA37D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA37D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DA37E0);
  return result;
}

uint64_t sub_1D5DA37EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DA37F4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1D5DA37F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA3800(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA380C(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t dispatch thunk of UserContextType.subscribed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of UserContextType.autofavorited.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of UserContextType.muted.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of UserContextType.ignored.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of UserContextType.groupable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of UserContextType.subscriptionState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of UserContextType.bundled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of UserContextType.purchased.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of UserContextType.read.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of UserContextType.listened.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of UserContextType.seen.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of UserContextType.location.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of UserContextType.newlySubscribed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t type metadata accessor for UserContext()
{
  return objc_opt_self();
}

uint64_t method lookup function for UserContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UserContext.__allocating_init(subscribed:autofavorited:muted:ignored:groupable:subscriptionState:bundled:purchased:read:listened:seen:location:newlySubscribed:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t ClassicTagMetadata.flowRate.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ClassicTagMetadata.subscriptionRate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t ClassicTagMetadata.quality.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t ClassicTagMetadata.ontologyLevel.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

unint64_t ClassicTagMetadata.contentRating.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 60) | ((unint64_t)*(unsigned __int8 *)(v0 + 64) << 32);
}

unint64_t ClassicTagMetadata.relevanceRating.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 68) | ((unint64_t)*(unsigned __int8 *)(v0 + 72) << 32);
}

uint64_t ClassicTagMetadata.managed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t ClassicTagMetadata.managedWinner.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 74);
}

uint64_t ClassicTagMetadata.groupable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 75);
}

uint64_t ClassicTagMetadata.groupableIfFavorited.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 76);
}

uint64_t ClassicTagMetadata.groupableIfAutofavorited.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 77);
}

uint64_t sub_1D5DA3964(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DA3998 + 4 * byte_1D5E39610[a1]))(0x65746152776F6C66, 0xE800000000000000);
}

unint64_t sub_1D5DA3998()
{
  return 0xD000000000000010;
}

uint64_t sub_1D5DA39B4()
{
  return 0x7974696C617571;
}

uint64_t sub_1D5DA39CC()
{
  return 0x79676F6C6F746E6FLL;
}

uint64_t sub_1D5DA39F0()
{
  return 0x52746E65746E6F63;
}

uint64_t sub_1D5DA3A14()
{
  return 0x636E6176656C6572;
}

uint64_t sub_1D5DA3A38()
{
  return 0x646567616E616DLL;
}

uint64_t sub_1D5DA3A50()
{
  return 0x57646567616E616DLL;
}

unint64_t sub_1D5DA3A74()
{
  return 0xD000000000000014;
}

uint64_t sub_1D5DA3AAC()
{
  return 0x6C626170756F7267;
}

BOOL sub_1D5DA3AC8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D5DA3ADC()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DA3B20()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5DA3B48()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DA3B88()
{
  unsigned __int8 *v0;

  return sub_1D5DA3964(*v0);
}

uint64_t sub_1D5DA3B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DA4598(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DA3BB4()
{
  return 0;
}

void sub_1D5DA3BC0(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1D5DA3BCC()
{
  sub_1D5DA3F54();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DA3BF4()
{
  sub_1D5DA3F54();
  return sub_1D5E37A10();
}

uint64_t ClassicTagMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  _DWORD v14[5];
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB54D0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v24 = *(_QWORD *)(v1 + 16);
  v23 = *(unsigned __int8 *)(v1 + 24);
  v22 = *(_QWORD *)(v1 + 32);
  v21 = *(unsigned __int8 *)(v1 + 40);
  v20 = *(_QWORD *)(v1 + 48);
  v19 = *(unsigned __int8 *)(v1 + 56);
  v18 = *(unsigned int *)(v1 + 60);
  v17 = *(unsigned __int8 *)(v1 + 64);
  v16 = *(unsigned int *)(v1 + 68);
  v7 = *(unsigned __int8 *)(v1 + 72);
  v14[4] = *(unsigned __int8 *)(v1 + 73);
  v15 = v7;
  v8 = *(unsigned __int8 *)(v1 + 74);
  v14[2] = *(unsigned __int8 *)(v1 + 75);
  v14[3] = v8;
  v14[1] = *(unsigned __int8 *)(v1 + 76);
  v9 = a1[3];
  v10 = a1;
  v11 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v10, v9);
  sub_1D5DA3F54();
  sub_1D5E379F8();
  v38 = 0;
  v12 = v25;
  sub_1D5E37824();
  if (!v12)
  {
    v37 = 1;
    sub_1D5E37824();
    v36 = 2;
    sub_1D5E37824();
    v35 = 3;
    sub_1D5E3783C();
    v34 = 4;
    v31 = v17;
    sub_1D5E37854();
    v33 = 5;
    v30 = v15;
    sub_1D5E37854();
    v32 = 6;
    sub_1D5E37878();
    v29 = 7;
    sub_1D5E37878();
    v28 = 8;
    sub_1D5E37878();
    v27 = 9;
    sub_1D5E37878();
    v26 = 10;
    sub_1D5E37878();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

unint64_t sub_1D5DA3F54()
{
  unint64_t result;

  result = qword_1EFFB54D8;
  if (!qword_1EFFB54D8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39788, &type metadata for ClassicTagMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB54D8);
  }
  return result;
}

uint64_t ClassicTagMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB54E0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DA3F54();
  sub_1D5E379E0();
  if (!v2)
  {
    v46 = 0;
    v10 = sub_1D5E37758();
    v12 = v11;
    v45 = 1;
    v13 = sub_1D5E37758();
    v34 = v14;
    v35 = v13;
    v44 = 2;
    v15 = sub_1D5E37758();
    v32 = v16;
    v33 = v15;
    v43 = 3;
    v17 = sub_1D5E37770();
    v30 = v18;
    v31 = v17;
    v42 = 4;
    v29 = sub_1D5E37788();
    v41 = 5;
    v28 = sub_1D5E37788();
    v40 = 6;
    v27 = sub_1D5E377AC();
    v39 = 7;
    v26 = sub_1D5E377AC();
    v38 = 8;
    v25 = sub_1D5E377AC();
    v37 = 9;
    v24 = sub_1D5E377AC();
    v36 = 10;
    v20 = sub_1D5E377AC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *(_QWORD *)a2 = v10;
    *(_BYTE *)(a2 + 8) = v12 & 1;
    *(_QWORD *)(a2 + 16) = v35;
    *(_BYTE *)(a2 + 24) = v34 & 1;
    *(_QWORD *)(a2 + 32) = v33;
    *(_BYTE *)(a2 + 40) = v32 & 1;
    *(_QWORD *)(a2 + 48) = v31;
    *(_BYTE *)(a2 + 56) = v30 & 1;
    v21 = BYTE4(v29);
    *(_DWORD *)(a2 + 60) = v29;
    *(_BYTE *)(a2 + 64) = v21 & 1;
    v22 = BYTE4(v28);
    *(_DWORD *)(a2 + 68) = v28;
    *(_BYTE *)(a2 + 72) = v22 & 1;
    *(_BYTE *)(a2 + 73) = v27 & 1;
    *(_BYTE *)(a2 + 74) = v26 & 1;
    *(_BYTE *)(a2 + 75) = v25 & 1;
    *(_BYTE *)(a2 + 76) = v24 & 1;
    *(_BYTE *)(a2 + 77) = v20 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DA42F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ClassicTagMetadata.init(from:)(a1, a2);
}

uint64_t sub_1D5DA430C(_QWORD *a1)
{
  return ClassicTagMetadata.encode(to:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for ClassicTagMetadata(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for ClassicTagMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ClassicTagMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1D5DA442C + 4 * byte_1D5E39620[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1D5DA4460 + 4 * byte_1D5E3961B[v4]))();
}

uint64_t sub_1D5DA4460(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA4468(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DA4470);
  return result;
}

uint64_t sub_1D5DA447C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DA4484);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1D5DA4488(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA4490(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA449C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D5DA44A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClassicTagMetadata.CodingKeys()
{
  return &type metadata for ClassicTagMetadata.CodingKeys;
}

unint64_t sub_1D5DA44C4()
{
  unint64_t result;

  result = qword_1EFFB54E8;
  if (!qword_1EFFB54E8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39760, &type metadata for ClassicTagMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB54E8);
  }
  return result;
}

unint64_t sub_1D5DA450C()
{
  unint64_t result;

  result = qword_1EFFB54F0;
  if (!qword_1EFFB54F0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E396D0, &type metadata for ClassicTagMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB54F0);
  }
  return result;
}

unint64_t sub_1D5DA4554()
{
  unint64_t result;

  result = qword_1EFFB54F8;
  if (!qword_1EFFB54F8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E396F8, &type metadata for ClassicTagMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB54F8);
  }
  return result;
}

uint64_t sub_1D5DA4598(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65746152776F6C66 && a2 == 0xE800000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001D5E476B0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7974696C617571 && a2 == 0xE700000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x79676F6C6F746E6FLL && a2 == 0xED00006C6576654CLL || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x52746E65746E6F63 && a2 == 0xED0000676E697461 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x636E6176656C6572 && a2 == 0xEF676E6974615265 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x646567616E616DLL && a2 == 0xE700000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x57646567616E616DLL && a2 == 0xED000072656E6E69 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6C626170756F7267 && a2 == 0xE900000000000065 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001D5E476D0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001D5E476F0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_1D5DA4A90()
{
  uint64_t v0;
  uint64_t v2;
  char v3;

  sub_1D5DA5304(v0, (uint64_t)&v2);
  if (v3 == 2)
    return v2;
  sub_1D5DA5338((uint64_t)&v2);
  return 0;
}

uint64_t sub_1D5DA4AD8()
{
  uint64_t v0;
  uint64_t v2;
  char v3;

  sub_1D5DA5304(v0, (uint64_t)&v2);
  if (v3 == 3)
    return v2;
  sub_1D5DA5338((uint64_t)&v2);
  return 0;
}

uint64_t sub_1D5DA4B20()
{
  uint64_t v0;
  uint64_t v2;
  char v3;

  sub_1D5DA5304(v0, (uint64_t)&v2);
  if (v3 == 4)
    return v2;
  sub_1D5DA5338((uint64_t)&v2);
  return 0;
}

uint64_t sub_1D5DA4B68()
{
  uint64_t v0;
  uint64_t v2;
  char v3;

  sub_1D5DA5304(v0, (uint64_t)&v2);
  if (v3 == 5)
    return v2;
  sub_1D5DA5338((uint64_t)&v2);
  return 0;
}

uint64_t sub_1D5DA4BB0()
{
  uint64_t v0;
  uint64_t v2;
  char v3;

  sub_1D5DA5304(v0, (uint64_t)&v2);
  if (v3 == 7)
    return v2;
  sub_1D5DA5338((uint64_t)&v2);
  return 0;
}

double sub_1D5DA4BF8@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4[3];
  char v5;

  sub_1D5DA5304(v1, (uint64_t)v4);
  if (v5 == 9)
  {
    sub_1D5DA5EE0(v4, a1);
  }
  else
  {
    sub_1D5DA5338((uint64_t)v4);
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

double sub_1D5DA4C54@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4[3];
  char v5;

  sub_1D5DA5304(v1, (uint64_t)v4);
  if (v5 == 10)
  {
    sub_1D5DA5EE0(v4, a1);
  }
  else
  {
    sub_1D5DA5338((uint64_t)v4);
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

double sub_1D5DA4CB0@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4[3];
  char v5;

  sub_1D5DA5304(v1, (uint64_t)v4);
  if (v5 == 11)
  {
    sub_1D5DA5EE0(v4, a1);
  }
  else
  {
    sub_1D5DA5338((uint64_t)v4);
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

double sub_1D5DA4D0C@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4[3];
  char v5;

  sub_1D5DA5304(v1, (uint64_t)v4);
  if (v5 == 16)
  {
    sub_1D5DA5EE0(v4, a1);
  }
  else
  {
    sub_1D5DA5338((uint64_t)v4);
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

double sub_1D5DA4D68@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4[3];
  char v5;

  sub_1D5DA5304(v1, (uint64_t)v4);
  if (v5 == 17)
  {
    sub_1D5DA5EE0(v4, a1);
  }
  else
  {
    sub_1D5DA5338((uint64_t)v4);
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

double sub_1D5DA4DC4@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4[3];
  char v5;

  sub_1D5DA5304(v1, (uint64_t)v4);
  if (v5 == 12)
  {
    sub_1D5DA5EE0(v4, a1);
  }
  else
  {
    sub_1D5DA5338((uint64_t)v4);
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

double sub_1D5DA4E20@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4[3];
  char v5;

  sub_1D5DA5304(v1, (uint64_t)v4);
  if (v5 == 14)
  {
    sub_1D5DA5EE0(v4, a1);
  }
  else
  {
    sub_1D5DA5338((uint64_t)v4);
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_1D5DA4E7C()
{
  uint64_t v0;
  uint64_t v2;
  char v3;

  sub_1D5DA5304(v0, (uint64_t)&v2);
  if (v3 == 8)
    return v2;
  sub_1D5DA5338((uint64_t)&v2);
  return 0;
}

double sub_1D5DA4EC4@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4[3];
  char v5;

  sub_1D5DA5304(v1, (uint64_t)v4);
  if (v5 == 19)
  {
    sub_1D5DA5EE0(v4, a1);
  }
  else
  {
    sub_1D5DA5338((uint64_t)v4);
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

double sub_1D5DA4F20@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4[3];
  char v5;

  sub_1D5DA5304(v1, (uint64_t)v4);
  if (v5 == 20)
  {
    sub_1D5DA5EE0(v4, a1);
  }
  else
  {
    sub_1D5DA5338((uint64_t)v4);
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

double sub_1D5DA4F7C@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4[3];
  char v5;

  sub_1D5DA5304(v1, (uint64_t)v4);
  if (v5 == 21)
  {
    sub_1D5DA5EE0(v4, a1);
  }
  else
  {
    sub_1D5DA5338((uint64_t)v4);
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

void sub_1D5DA4FD8()
{
  uint64_t v0;
  _BYTE v1[64];

  sub_1D5DA5304(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1D5DA500C()
{
  uint64_t v1;

  sub_1D5DA5338((uint64_t)&v1);
  return 0x536E6F6973736573;
}

uint64_t sub_1D5DA5304(uint64_t a1, uint64_t a2)
{
  _s6ActionOwcp(a2, a1);
  return a2;
}

uint64_t sub_1D5DA5338(uint64_t a1)
{
  _s6ActionOwxx(a1);
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_2(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t _s6ActionOwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s6ActionOwxx(uint64_t a1)
{
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(a1 + 56);
  while (2)
  {
    switch(v1)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
        result = swift_bridgeObjectRelease();
        break;
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
        result = __swift_destroy_boxed_opaque_existential_2(a1);
        break;
      default:
        v1 = *(_DWORD *)a1 + 22;
        continue;
    }
    break;
  }
  return result;
}

uint64_t _s6ActionOwcp(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;

  v4 = *(unsigned __int8 *)(a2 + 56);
  while (2)
  {
    switch(v4)
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v5;
        *(_BYTE *)(a1 + 56) = 0;
        swift_bridgeObjectRetain();
        return a1;
      case 1:
        v6 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v6;
        v7 = 1;
        goto LABEL_13;
      case 2:
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v8;
        v7 = 2;
        goto LABEL_13;
      case 3:
        v9 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v9;
        v7 = 3;
        goto LABEL_13;
      case 4:
        v10 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v10;
        v7 = 4;
        goto LABEL_13;
      case 5:
        v11 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v11;
        v7 = 5;
        goto LABEL_13;
      case 6:
        v12 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v12;
        v7 = 6;
        goto LABEL_13;
      case 7:
        v13 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v13;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v7 = 7;
        goto LABEL_13;
      case 8:
        v14 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v7 = 8;
LABEL_13:
        *(_BYTE *)(a1 + 56) = v7;
        swift_bridgeObjectRetain();
        return a1;
      case 9:
        v15 = *(_QWORD *)(a2 + 40);
        v16 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v16;
        *(_QWORD *)(a1 + 40) = v15;
        (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1, a2);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v17 = 9;
        goto LABEL_27;
      case 10:
        v18 = *(_QWORD *)(a2 + 40);
        v19 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v19;
        *(_QWORD *)(a1 + 40) = v18;
        (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1, a2);
        v17 = 10;
        goto LABEL_27;
      case 11:
        v20 = *(_QWORD *)(a2 + 40);
        v21 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v21;
        *(_QWORD *)(a1 + 40) = v20;
        (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1, a2);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v17 = 11;
        goto LABEL_27;
      case 12:
        v22 = *(_QWORD *)(a2 + 40);
        v23 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v23;
        *(_QWORD *)(a1 + 40) = v22;
        (**(void (***)(uint64_t, uint64_t))(v23 - 8))(a1, a2);
        v17 = 12;
        goto LABEL_27;
      case 13:
        v24 = *(_QWORD *)(a2 + 40);
        v25 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v25;
        *(_QWORD *)(a1 + 40) = v24;
        (**(void (***)(uint64_t, uint64_t))(v25 - 8))(a1, a2);
        v17 = 13;
        goto LABEL_27;
      case 14:
        v26 = *(_QWORD *)(a2 + 40);
        v27 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v27;
        *(_QWORD *)(a1 + 40) = v26;
        (**(void (***)(uint64_t, uint64_t))(v27 - 8))(a1, a2);
        v17 = 14;
        goto LABEL_27;
      case 15:
        v28 = *(_QWORD *)(a2 + 40);
        v29 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v29;
        *(_QWORD *)(a1 + 40) = v28;
        (**(void (***)(uint64_t, uint64_t))(v29 - 8))(a1, a2);
        v17 = 15;
        goto LABEL_27;
      case 16:
        v30 = *(_QWORD *)(a2 + 40);
        v31 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v31;
        *(_QWORD *)(a1 + 40) = v30;
        (**(void (***)(uint64_t, uint64_t))(v31 - 8))(a1, a2);
        v17 = 16;
        goto LABEL_27;
      case 17:
        v32 = *(_QWORD *)(a2 + 40);
        v33 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v33;
        *(_QWORD *)(a1 + 40) = v32;
        (**(void (***)(uint64_t, uint64_t))(v33 - 8))(a1, a2);
        v17 = 17;
        goto LABEL_27;
      case 18:
        v34 = *(_QWORD *)(a2 + 40);
        v35 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v35;
        *(_QWORD *)(a1 + 40) = v34;
        (**(void (***)(uint64_t, uint64_t))(v35 - 8))(a1, a2);
        v17 = 18;
        goto LABEL_27;
      case 19:
        v36 = *(_QWORD *)(a2 + 40);
        v37 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v37;
        *(_QWORD *)(a1 + 40) = v36;
        (**(void (***)(uint64_t, uint64_t))(v37 - 8))(a1, a2);
        v17 = 19;
        goto LABEL_27;
      case 20:
        v38 = *(_QWORD *)(a2 + 40);
        v39 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v39;
        *(_QWORD *)(a1 + 40) = v38;
        (**(void (***)(uint64_t, uint64_t))(v39 - 8))(a1, a2);
        v17 = 20;
        goto LABEL_27;
      case 21:
        v40 = *(_QWORD *)(a2 + 40);
        v41 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v41;
        *(_QWORD *)(a1 + 40) = v40;
        (**(void (***)(uint64_t, uint64_t))(v41 - 8))(a1, a2);
        v17 = 21;
LABEL_27:
        *(_BYTE *)(a1 + 56) = v17;
        return a1;
      default:
        v4 = *(_DWORD *)a2 + 22;
        continue;
    }
  }
}

uint64_t _s6ActionOwca(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 56);
    while (2)
    {
      switch(v4)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
          swift_bridgeObjectRelease();
          break;
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
          __swift_destroy_boxed_opaque_existential_2(a1);
          break;
        default:
          v4 = *(_DWORD *)a1 + 22;
          continue;
      }
      break;
    }
    v5 = *(unsigned __int8 *)(a2 + 56);
    while (2)
    {
      switch(v5)
      {
        case 0:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_BYTE *)(a1 + 56) = 0;
          swift_bridgeObjectRetain();
          return a1;
        case 1:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 1;
          goto LABEL_19;
        case 2:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 2;
          goto LABEL_19;
        case 3:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 3;
          goto LABEL_19;
        case 4:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 4;
          goto LABEL_19;
        case 5:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 5;
          goto LABEL_19;
        case 6:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 6;
          goto LABEL_19;
        case 7:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          v6 = 7;
          goto LABEL_19;
        case 8:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          v6 = 8;
LABEL_19:
          *(_BYTE *)(a1 + 56) = v6;
          swift_bridgeObjectRetain();
          return a1;
        case 9:
          v7 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v7;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          v8 = 9;
          goto LABEL_33;
        case 10:
          v9 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v9;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
          v8 = 10;
          goto LABEL_33;
        case 11:
          v10 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v10;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          v8 = 11;
          goto LABEL_33;
        case 12:
          v11 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v11;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
          v8 = 12;
          goto LABEL_33;
        case 13:
          v12 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v12;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1, a2);
          v8 = 13;
          goto LABEL_33;
        case 14:
          v13 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v13;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
          v8 = 14;
          goto LABEL_33;
        case 15:
          v14 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v14;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1, a2);
          v8 = 15;
          goto LABEL_33;
        case 16:
          v15 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v15;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1, a2);
          v8 = 16;
          goto LABEL_33;
        case 17:
          v16 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v16;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1, a2);
          v8 = 17;
          goto LABEL_33;
        case 18:
          v17 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v17;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1, a2);
          v8 = 18;
          goto LABEL_33;
        case 19:
          v18 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v18;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1, a2);
          v8 = 19;
          goto LABEL_33;
        case 20:
          v19 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v19;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1, a2);
          v8 = 20;
          goto LABEL_33;
        case 21:
          v20 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v20;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1, a2);
          v8 = 21;
LABEL_33:
          *(_BYTE *)(a1 + 56) = v8;
          break;
        default:
          v5 = *(_DWORD *)a2 + 22;
          continue;
      }
      break;
    }
  }
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s6ActionOwta(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 56);
    while (2)
    {
      switch(v4)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
          swift_bridgeObjectRelease();
          break;
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
          __swift_destroy_boxed_opaque_existential_2(a1);
          break;
        default:
          v4 = *(_DWORD *)a1 + 22;
          continue;
      }
      break;
    }
    v5 = *(unsigned __int8 *)(a2 + 56);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          break;
        case 1:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 1;
          break;
        case 2:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 2;
          break;
        case 3:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 3;
          break;
        case 4:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 4;
          break;
        case 5:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 5;
          break;
        case 6:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 6;
          break;
        case 7:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          v6 = 7;
          break;
        case 8:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          v6 = 8;
          break;
        case 9:
          v7 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v7;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          v6 = 9;
          break;
        case 10:
          v8 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v8;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v6 = 10;
          break;
        case 11:
          v9 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v9;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          v6 = 11;
          break;
        case 12:
          v10 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v10;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v6 = 12;
          break;
        case 13:
          v11 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v11;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v6 = 13;
          break;
        case 14:
          v12 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v12;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v6 = 14;
          break;
        case 15:
          v13 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v13;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v6 = 15;
          break;
        case 16:
          v14 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v14;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v6 = 16;
          break;
        case 17:
          v15 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v15;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v6 = 17;
          break;
        case 18:
          v16 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v16;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v6 = 18;
          break;
        case 19:
          v17 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v17;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v6 = 19;
          break;
        case 20:
          v18 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v18;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v6 = 20;
          break;
        case 21:
          v19 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v19;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v6 = 21;
          break;
        default:
          v5 = *(_DWORD *)a2 + 22;
          continue;
      }
      break;
    }
    *(_BYTE *)(a1 + 56) = v6;
  }
  return a1;
}

uint64_t _s6ActionOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xEB && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 235);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 >= 0x16)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t _s6ActionOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEA)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 235;
    if (a3 >= 0xEB)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xEB)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = -(char)a2;
  }
  return result;
}

uint64_t sub_1D5DA5E84(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 56);
  if (result >= 0x16)
    return (*(_DWORD *)a1 + 22);
  return result;
}

uint64_t sub_1D5DA5EA4(uint64_t result, unsigned int a2)
{
  if (a2 > 0x15)
  {
    *(_QWORD *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 22;
    LOBYTE(a2) = 22;
  }
  *(_BYTE *)(result + 56) = a2;
  return result;
}

ValueMetadata *_s6ActionOMa()
{
  return &_s6ActionON;
}

_OWORD *sub_1D5DA5EE0(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t ClassicArticleData.adCategories.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ClassicArticleData.articleLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

double ClassicArticleData.halfLife.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

uint64_t ClassicArticleData.halfLifeOverride.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t ClassicArticleData.hasVideo.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t ClassicArticleData.isANF.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 58);
}

uint64_t ClassicArticleData.isPaid.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 59);
}

uint64_t ClassicArticleData.isBundlePaid.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 60);
}

uint64_t ClassicArticleData.publishDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ClassicArticleData() + 52);
  return sub_1D5D849E0(v3, a1);
}

uint64_t ClassicArticleData.publisherID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ClassicArticleData() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ClassicArticleData.sourceFeedID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ClassicArticleData() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ClassicArticleData.topicIDs.getter()
{
  type metadata accessor for ClassicArticleData();
  return swift_bridgeObjectRetain();
}

uint64_t ClassicArticleData.cohorts.getter()
{
  type metadata accessor for ClassicArticleData();
  return swift_bridgeObjectRetain();
}

uint64_t ClassicArticleData.conversionData.getter()
{
  type metadata accessor for ClassicArticleData();
  return swift_bridgeObjectRetain();
}

uint64_t ClassicArticleData.isAudio.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClassicArticleData() + 76));
}

uint64_t ClassicArticleData.featured.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClassicArticleData() + 80));
}

uint64_t ClassicArticleData.isFeatureCandidate.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClassicArticleData() + 84));
}

uint64_t ClassicArticleData.isEvergreen.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClassicArticleData() + 88));
}

uint64_t ClassicArticleData.tagMetadata.getter()
{
  type metadata accessor for ClassicArticleData();
  return swift_bridgeObjectRetain();
}

uint64_t ClassicArticleData.reduceVisibility.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClassicArticleData() + 96));
}

uint64_t ClassicArticleData.webConverted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClassicArticleData() + 100));
}

double ClassicArticleData.conditionalScore.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for ClassicArticleData() + 104));
}

uint64_t ClassicArticleData.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

uint64_t static ClassicArticleData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
    return 1;
  else
    return sub_1D5E378FC();
}

uint64_t sub_1D5DA61BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DA61F8 + 4 * byte_1D5E39900[a1]))(0x6F67657461436461, 0xEC00000073656972);
}

uint64_t sub_1D5DA61F8()
{
  return 0x49656C6369747261;
}

uint64_t sub_1D5DA6214()
{
  return 0x4C656C6369747261;
}

uint64_t sub_1D5DA6238()
{
  return 0x6566694C666C6168;
}

unint64_t sub_1D5DA6250()
{
  return 0xD000000000000010;
}

uint64_t sub_1D5DA642C()
{
  return 0x646174654D676174;
}

BOOL sub_1D5DA644C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D5DA6464()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5DA6490()
{
  unsigned __int8 *v0;

  return sub_1D5DA61BC(*v0);
}

uint64_t sub_1D5DA6498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DA94CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DA64BC()
{
  return 0;
}

void sub_1D5DA64C8(_BYTE *a1@<X8>)
{
  *a1 = 23;
}

uint64_t sub_1D5DA64D4()
{
  sub_1D5DA6B30();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DA64FC()
{
  sub_1D5DA6B30();
  return sub_1D5E37A10();
}

uint64_t ClassicArticleData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v11;
  char v12;
  uint64_t v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5500);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DA6B30();
  sub_1D5E379F8();
  v13 = *v3;
  v12 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5510);
  sub_1D5DA7890(&qword_1EFFB5518, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
  sub_1D5E37848();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    sub_1D5E3786C();
    LOBYTE(v13) = 2;
    sub_1D5E37860();
    LOBYTE(v13) = 3;
    sub_1D5E37884();
    LOBYTE(v13) = 4;
    sub_1D5E37824();
    LOBYTE(v13) = 5;
    sub_1D5E37878();
    LOBYTE(v13) = 6;
    sub_1D5E37818();
    LOBYTE(v13) = 7;
    sub_1D5E37878();
    LOBYTE(v13) = 8;
    sub_1D5E37878();
    v11 = (int *)type metadata accessor for ClassicArticleData();
    LOBYTE(v13) = 9;
    sub_1D5E37368();
    sub_1D5D7B7B4(&qword_1ED9AE6B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    sub_1D5E37848();
    LOBYTE(v13) = 10;
    sub_1D5E3786C();
    LOBYTE(v13) = 11;
    sub_1D5E3780C();
    v13 = *(uint64_t *)((char *)v3 + v11[16]);
    v12 = 12;
    sub_1D5E3789C();
    v13 = *(uint64_t *)((char *)v3 + v11[17]);
    v12 = 13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5520);
    sub_1D5DA6B74();
    sub_1D5E3789C();
    v13 = *(uint64_t *)((char *)v3 + v11[18]);
    v12 = 14;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5540);
    sub_1D5DA6C80(&qword_1EFFB5538, &qword_1EFFB5540, (uint64_t (*)(void))sub_1D5DA6C3C);
    sub_1D5E3789C();
    LOBYTE(v13) = 15;
    sub_1D5E37878();
    LOBYTE(v13) = 16;
    sub_1D5E37878();
    LOBYTE(v13) = 17;
    sub_1D5E37878();
    LOBYTE(v13) = 18;
    sub_1D5E37878();
    v13 = *(uint64_t *)((char *)v3 + v11[23]);
    v12 = 19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5550);
    sub_1D5DA6C80(&qword_1EFFB5558, &qword_1EFFB5550, (uint64_t (*)(void))sub_1D5DA6CEC);
    sub_1D5E3789C();
    LOBYTE(v13) = 20;
    sub_1D5E37878();
    LOBYTE(v13) = 21;
    sub_1D5E37878();
    LOBYTE(v13) = 22;
    sub_1D5E37884();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_1D5DA6B30()
{
  unint64_t result;

  result = qword_1EFFB5508;
  if (!qword_1EFFB5508)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39F68, &type metadata for ClassicArticleData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5508);
  }
  return result;
}

unint64_t sub_1D5DA6B74()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EFFB5528;
  if (!qword_1EFFB5528)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFFB5520);
    v2[0] = sub_1D5DA6BF8();
    v2[1] = sub_1D5DA6C80(&qword_1EFFB5538, &qword_1EFFB5540, (uint64_t (*)(void))sub_1D5DA6C3C);
    result = MEMORY[0x1D827D8E0](MEMORY[0x1E0DEA0B8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EFFB5528);
  }
  return result;
}

unint64_t sub_1D5DA6BF8()
{
  unint64_t result;

  result = qword_1EFFB5530;
  if (!qword_1EFFB5530)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClassicHeadlineCohortType, &type metadata for ClassicHeadlineCohortType);
    atomic_store(result, (unint64_t *)&qword_1EFFB5530);
  }
  return result;
}

unint64_t sub_1D5DA6C3C()
{
  unint64_t result;

  result = qword_1EFFB5548;
  if (!qword_1EFFB5548)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClassicHeadlineCohortData, &type metadata for ClassicHeadlineCohortData);
    atomic_store(result, (unint64_t *)&qword_1EFFB5548);
  }
  return result;
}

uint64_t sub_1D5DA6C80(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    v8[0] = MEMORY[0x1E0DEA970];
    v8[1] = v7;
    result = MEMORY[0x1D827D8E0](MEMORY[0x1E0DEA0B8], v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D5DA6CEC()
{
  unint64_t result;

  result = qword_1EFFB5560;
  if (!qword_1EFFB5560)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClassicTagMetadata, &type metadata for ClassicTagMetadata);
    atomic_store(result, (unint64_t *)&qword_1EFFB5560);
  }
  return result;
}

uint64_t ClassicArticleData.hashValue.getter()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t ClassicArticleData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int *v35;
  char v36;
  uint64_t v37;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF698);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5568);
  v9 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = (int *)type metadata accessor for ClassicArticleData();
  MEMORY[0x1E0C80A78](v35, v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v34 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_1D5DA6B30();
  sub_1D5E379E0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  v31 = a2;
  v32 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5510);
  v36 = 0;
  sub_1D5DA7890(&qword_1EFFB5570, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
  sub_1D5E3777C();
  *(_QWORD *)v15 = v37;
  LOBYTE(v37) = 1;
  *((_QWORD *)v15 + 1) = sub_1D5E377A0();
  *((_QWORD *)v15 + 2) = v17;
  LOBYTE(v37) = 2;
  *((_QWORD *)v15 + 3) = sub_1D5E37794();
  v15[32] = v18 & 1;
  LOBYTE(v37) = 3;
  sub_1D5E377B8();
  *((_QWORD *)v15 + 5) = v19;
  LOBYTE(v37) = 4;
  *((_QWORD *)v15 + 6) = sub_1D5E37758();
  v15[56] = v20 & 1;
  LOBYTE(v37) = 5;
  v15[57] = sub_1D5E377AC() & 1;
  LOBYTE(v37) = 6;
  v15[58] = sub_1D5E3774C();
  LOBYTE(v37) = 7;
  v15[59] = sub_1D5E377AC() & 1;
  LOBYTE(v37) = 8;
  v15[60] = sub_1D5E377AC() & 1;
  sub_1D5E37368();
  LOBYTE(v37) = 9;
  sub_1D5D7B7B4(&qword_1EFFB5150, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
  sub_1D5E3777C();
  sub_1D5D7C21C((uint64_t)v8, (uint64_t)&v15[v35[13]]);
  LOBYTE(v37) = 10;
  v21 = sub_1D5E377A0();
  v22 = (uint64_t *)&v15[v35[14]];
  *v22 = v21;
  v22[1] = v23;
  LOBYTE(v37) = 11;
  v24 = sub_1D5E37740();
  v25 = (uint64_t *)&v15[v35[15]];
  *v25 = v24;
  v25[1] = v26;
  v36 = 12;
  sub_1D5E377D0();
  *(_QWORD *)&v15[v35[16]] = v37;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5520);
  v36 = 13;
  sub_1D5DA78F0();
  sub_1D5E377D0();
  *(_QWORD *)&v15[v35[17]] = v37;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5540);
  v36 = 14;
  sub_1D5DA79B8(&qword_1EFFB5588, &qword_1EFFB5540, (uint64_t (*)(void))sub_1D5DA7A24);
  sub_1D5E377D0();
  *(_QWORD *)&v15[v35[18]] = v37;
  LOBYTE(v37) = 15;
  v15[v35[19]] = sub_1D5E377AC() & 1;
  LOBYTE(v37) = 16;
  v15[v35[20]] = sub_1D5E377AC() & 1;
  LOBYTE(v37) = 17;
  v15[v35[21]] = sub_1D5E377AC() & 1;
  LOBYTE(v37) = 18;
  v15[v35[22]] = sub_1D5E377AC() & 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5550);
  v36 = 19;
  sub_1D5DA79B8(&qword_1EFFB5598, &qword_1EFFB5550, (uint64_t (*)(void))sub_1D5DA7A68);
  sub_1D5E377D0();
  *(_QWORD *)&v15[v35[23]] = v37;
  LOBYTE(v37) = 20;
  v15[v35[24]] = sub_1D5E377AC() & 1;
  LOBYTE(v37) = 21;
  v15[v35[25]] = sub_1D5E377AC() & 1;
  LOBYTE(v37) = 22;
  sub_1D5E377B8();
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v33);
  *(_QWORD *)&v15[v35[26]] = v28;
  sub_1D5D819C0((uint64_t)v15, v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  return sub_1D5D7D008((uint64_t)v15);
}

uint64_t sub_1D5DA76FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1D5DA7728()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 60);
}

uint64_t sub_1D5DA7730(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 76));
}

uint64_t sub_1D5DA773C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 88));
}

uint64_t sub_1D5DA7748(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 80));
}

uint64_t sub_1D5DA7754(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 84));
}

uint64_t sub_1D5DA7760()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DA77B8()
{
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5DA77FC()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DA7850(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF698);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D5DA7890(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFFB5510);
    v8 = a2;
    result = MEMORY[0x1D827D8E0](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D5DA78F0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EFFB5578;
  if (!qword_1EFFB5578)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFFB5520);
    v2[0] = sub_1D5DA7974();
    v2[1] = sub_1D5DA79B8(&qword_1EFFB5588, &qword_1EFFB5540, (uint64_t (*)(void))sub_1D5DA7A24);
    result = MEMORY[0x1D827D8E0](MEMORY[0x1E0DEA0D8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EFFB5578);
  }
  return result;
}

unint64_t sub_1D5DA7974()
{
  unint64_t result;

  result = qword_1EFFB5580;
  if (!qword_1EFFB5580)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClassicHeadlineCohortType, &type metadata for ClassicHeadlineCohortType);
    atomic_store(result, (unint64_t *)&qword_1EFFB5580);
  }
  return result;
}

uint64_t sub_1D5DA79B8(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    v8[0] = MEMORY[0x1E0DEA9A0];
    v8[1] = v7;
    result = MEMORY[0x1D827D8E0](MEMORY[0x1E0DEA0D8], v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D5DA7A24()
{
  unint64_t result;

  result = qword_1EFFB5590;
  if (!qword_1EFFB5590)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClassicHeadlineCohortData, &type metadata for ClassicHeadlineCohortData);
    atomic_store(result, (unint64_t *)&qword_1EFFB5590);
  }
  return result;
}

unint64_t sub_1D5DA7A68()
{
  unint64_t result;

  result = qword_1EFFB55A0;
  if (!qword_1EFFB55A0)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClassicTagMetadata, &type metadata for ClassicTagMetadata);
    atomic_store(result, (unint64_t *)&qword_1EFFB55A0);
  }
  return result;
}

uint64_t sub_1D5DA7AAC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ClassicArticleData.init(from:)(a1, a2);
}

uint64_t sub_1D5DA7AC0(_QWORD *a1)
{
  return ClassicArticleData.encode(to:)(a1);
}

uint64_t sub_1D5DA7AD4(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
    return 1;
  else
    return sub_1D5E378FC();
}

uint64_t ClassicArticleData.debugDescription.getter()
{
  uint64_t v0;

  sub_1D5E37650();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1D5E37458();
  swift_bridgeObjectRelease();
  sub_1D5E37458();
  type metadata accessor for ClassicArticleData();
  swift_bridgeObjectRetain();
  sub_1D5E37458();
  swift_bridgeObjectRelease();
  sub_1D5E37458();
  v0 = swift_bridgeObjectRetain();
  MEMORY[0x1D827D0A0](v0, MEMORY[0x1E0DEA968]);
  sub_1D5E37458();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0x20656C6369747241;
}

XavierNews::ClassicHeadlineCohortType_optional __swiftcall ClassicHeadlineCohortType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  XavierNews::ClassicHeadlineCohortType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1D5E3771C();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t ClassicHeadlineCohortType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 1684627824;
  else
    return 1701147238;
}

uint64_t sub_1D5DA7CD0()
{
  sub_1D5E379A4();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DA7D34()
{
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

XavierNews::ClassicHeadlineCohortType_optional sub_1D5DA7D6C(Swift::String *a1)
{
  return ClassicHeadlineCohortType.init(rawValue:)(*a1);
}

void sub_1D5DA7D78(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 1701147238;
  if (*v1)
    v2 = 1684627824;
  *a1 = v2;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1D5DA7DA0()
{
  sub_1D5DAA024();
  return sub_1D5E374DC();
}

uint64_t sub_1D5DA7DFC()
{
  sub_1D5DAA024();
  return sub_1D5E374A0();
}

uint64_t ClassicHeadlineCohortData.hash(into:)()
{
  sub_1D5E379BC();
  sub_1D5E379BC();
  return sub_1D5E379BC();
}

BOOL static ClassicHeadlineCohortData.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t sub_1D5DA7ED0()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DA7F18()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DA7F58()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x736B63696C63;
  if (*v0 != 1)
    v1 = 0x6973736572706D69;
  if (*v0)
    return v1;
  else
    return 0x6B63696C43776172;
}

uint64_t sub_1D5DA7FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DA9EB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DA7FE0()
{
  return 0;
}

void sub_1D5DA7FEC(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DA7FF8()
{
  sub_1D5DA8194();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DA8020()
{
  sub_1D5DA8194();
  return sub_1D5E37A10();
}

uint64_t ClassicHeadlineCohortData.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB55A8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DA8194();
  sub_1D5E379F8();
  v12 = 0;
  sub_1D5E37884();
  if (!v1)
  {
    v11 = 1;
    sub_1D5E37884();
    v10 = 2;
    sub_1D5E37884();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

unint64_t sub_1D5DA8194()
{
  unint64_t result;

  result = qword_1EFFB55B0;
  if (!qword_1EFFB55B0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39F18, &type metadata for ClassicHeadlineCohortData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB55B0);
  }
  return result;
}

uint64_t ClassicHeadlineCohortData.hashValue.getter()
{
  sub_1D5E379A4();
  ClassicHeadlineCohortData.hash(into:)();
  return sub_1D5E379C8();
}

uint64_t ClassicHeadlineCohortData.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB55B8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DA8194();
  sub_1D5E379E0();
  if (!v2)
  {
    v17[15] = 0;
    sub_1D5E377B8();
    v11 = v10;
    v17[14] = 1;
    sub_1D5E377B8();
    v14 = v13;
    v17[13] = 2;
    sub_1D5E377B8();
    v16 = v15;
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    *a2 = v11;
    a2[1] = v14;
    a2[2] = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DA83B0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ClassicHeadlineCohortData.init(from:)(a1, a2);
}

uint64_t sub_1D5DA83C4(_QWORD *a1)
{
  return ClassicHeadlineCohortData.encode(to:)(a1);
}

uint64_t sub_1D5DA83D8()
{
  sub_1D5E379A4();
  ClassicHeadlineCohortData.hash(into:)();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DA842C()
{
  sub_1D5E379A4();
  ClassicHeadlineCohortData.hash(into:)();
  return sub_1D5E379C8();
}

unint64_t sub_1D5DA847C()
{
  unint64_t result;

  result = qword_1EFFB55C0;
  if (!qword_1EFFB55C0)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClassicHeadlineCohortData, &type metadata for ClassicHeadlineCohortData);
    atomic_store(result, (unint64_t *)&qword_1EFFB55C0);
  }
  return result;
}

BOOL sub_1D5DA84C0(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t dispatch thunk of ClassicArticleDataType.adCategories.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ClassicArticleDataType.articleID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ClassicArticleDataType.articleLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ClassicArticleDataType.hasVideo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ClassicArticleDataType.isANF.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ClassicArticleDataType.isPaid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ClassicArticleDataType.isBundlePaid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ClassicArticleDataType.isAudio.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of ClassicArticleDataType.isEvergreen.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of ClassicArticleDataType.featured.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of ClassicArticleDataType.isFeatureCandidate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of ClassicArticleDataType.publisherID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of ClassicArticleDataType.topicIDs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t initializeBufferWithCopyOfBuffer for ClassicArticleData(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    *(_DWORD *)(a1 + 57) = *(_DWORD *)((char *)a2 + 57);
    v10 = a3[13];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    v13 = sub_1D5E37368();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF698);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v17 = a3[14];
    v18 = a3[15];
    v19 = (_QWORD *)(v7 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = (_QWORD *)(v7 + v18);
    v23 = (uint64_t *)((char *)a2 + v18);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = a3[17];
    *(_QWORD *)(v7 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
    *(_QWORD *)(v7 + v25) = *(uint64_t *)((char *)a2 + v25);
    v26 = a3[19];
    *(_QWORD *)(v7 + a3[18]) = *(uint64_t *)((char *)a2 + a3[18]);
    *(_BYTE *)(v7 + v26) = *((_BYTE *)a2 + v26);
    v27 = a3[21];
    *(_BYTE *)(v7 + a3[20]) = *((_BYTE *)a2 + a3[20]);
    *(_BYTE *)(v7 + v27) = *((_BYTE *)a2 + v27);
    v28 = a3[23];
    *(_BYTE *)(v7 + a3[22]) = *((_BYTE *)a2 + a3[22]);
    *(_QWORD *)(v7 + v28) = *(uint64_t *)((char *)a2 + v28);
    v29 = a3[25];
    *(_BYTE *)(v7 + a3[24]) = *((_BYTE *)a2 + a3[24]);
    *(_BYTE *)(v7 + v29) = *((_BYTE *)a2 + v29);
    *(_QWORD *)(v7 + a3[26]) = *(uint64_t *)((char *)a2 + a3[26]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t assignWithCopy for ClassicArticleData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  v8 = a3[13];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_1D5E37368();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF698);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[14];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[15];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  *(_BYTE *)(a1 + a3[22]) = *(_BYTE *)(a2 + a3[22]);
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  *(_BYTE *)(a1 + a3[25]) = *(_BYTE *)(a2 + a3[25]);
  *(_QWORD *)(a1 + a3[26]) = *(_QWORD *)(a2 + a3[26]);
  return a1;
}

uint64_t initializeWithTake for ClassicArticleData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 57) = *(_DWORD *)(a2 + 57);
  v7 = a3[13];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_1D5E37368();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF698);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v14 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[21];
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v17 = a3[23];
  *(_BYTE *)(a1 + a3[22]) = *(_BYTE *)(a2 + a3[22]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v18 = a3[25];
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  *(_QWORD *)(a1 + a3[26]) = *(_QWORD *)(a2 + a3[26]);
  return a1;
}

uint64_t assignWithTake for ClassicArticleData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  v8 = a3[13];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  *(_QWORD *)(a1 + 40) = v7;
  v11 = sub_1D5E37368();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF698);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[14];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[15];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  swift_bridgeObjectRelease();
  v27 = a3[20];
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v27) = *(_BYTE *)(a2 + v27);
  v28 = a3[22];
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  swift_bridgeObjectRelease();
  v29 = a3[25];
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  *(_QWORD *)(a1 + a3[26]) = *(_QWORD *)(a2 + a3[26]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClassicArticleData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D5DA8DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF698);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 52), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ClassicArticleData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D5DA8E7C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF698);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 52), a2, a2, v7);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ClassicHeadlineCohortType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ClassicHeadlineCohortType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D5DA8FD0 + 4 * byte_1D5E3991C[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D5DA9004 + 4 * byte_1D5E39917[v4]))();
}

uint64_t sub_1D5DA9004(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA900C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DA9014);
  return result;
}

uint64_t sub_1D5DA9020(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DA9028);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D5DA902C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA9034(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA9040(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t getEnumTagSinglePayload for ClassicHeadlineCohortData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ClassicHeadlineCohortData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D5DA9128 + 4 * byte_1D5E39926[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D5DA915C + 4 * byte_1D5E39921[v4]))();
}

uint64_t sub_1D5DA915C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA9164(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DA916CLL);
  return result;
}

uint64_t sub_1D5DA9178(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DA9180);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D5DA9184(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA918C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClassicHeadlineCohortData.CodingKeys()
{
  return &type metadata for ClassicHeadlineCohortData.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ClassicArticleData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEA)
    goto LABEL_17;
  if (a2 + 22 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 22) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 22;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 22;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 22;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x17;
  v8 = v6 - 23;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ClassicArticleData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 22 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 22) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE9)
    return ((uint64_t (*)(void))((char *)&loc_1D5DA9288 + 4 * byte_1D5E39930[v4]))();
  *a1 = a2 + 22;
  return ((uint64_t (*)(void))((char *)sub_1D5DA92BC + 4 * byte_1D5E3992B[v4]))();
}

uint64_t sub_1D5DA92BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA92C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DA92CCLL);
  return result;
}

uint64_t sub_1D5DA92D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DA92E0);
  *(_BYTE *)result = a2 + 22;
  return result;
}

uint64_t sub_1D5DA92E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA92EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DA92F8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D5DA9304(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClassicArticleData.CodingKeys()
{
  return &type metadata for ClassicArticleData.CodingKeys;
}

unint64_t sub_1D5DA9320()
{
  unint64_t result;

  result = qword_1EFFB55C8;
  if (!qword_1EFFB55C8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39E38, &type metadata for ClassicArticleData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB55C8);
  }
  return result;
}

unint64_t sub_1D5DA9368()
{
  unint64_t result;

  result = qword_1EFFB55D0;
  if (!qword_1EFFB55D0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39EF0, &type metadata for ClassicHeadlineCohortData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB55D0);
  }
  return result;
}

unint64_t sub_1D5DA93B0()
{
  unint64_t result;

  result = qword_1EFFB55D8;
  if (!qword_1EFFB55D8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39E60, &type metadata for ClassicHeadlineCohortData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB55D8);
  }
  return result;
}

unint64_t sub_1D5DA93F8()
{
  unint64_t result;

  result = qword_1EFFB55E0;
  if (!qword_1EFFB55E0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39E88, &type metadata for ClassicHeadlineCohortData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB55E0);
  }
  return result;
}

unint64_t sub_1D5DA9440()
{
  unint64_t result;

  result = qword_1EFFB55E8;
  if (!qword_1EFFB55E8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39DA8, &type metadata for ClassicArticleData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB55E8);
  }
  return result;
}

unint64_t sub_1D5DA9488()
{
  unint64_t result;

  result = qword_1EFFB55F0;
  if (!qword_1EFFB55F0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39DD0, &type metadata for ClassicArticleData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB55F0);
  }
  return result;
}

uint64_t sub_1D5DA94CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F67657461436461 && a2 == 0xEC00000073656972;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x49656C6369747261 && a2 == 0xE900000000000044 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4C656C6369747261 && a2 == 0xED00006874676E65 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6566694C666C6168 && a2 == 0xE800000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001D5E47710 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F65646956736168 && a2 == 0xE800000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x464E417369 && a2 == 0xE500000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x646961507369 && a2 == 0xE600000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656C646E75427369 && a2 == 0xEC00000064696150 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x446873696C627570 && a2 == 0xEB00000000657461 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656873696C627570 && a2 == 0xEB00000000444972 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6546656372756F73 && a2 == 0xEC00000044496465 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x7344496369706F74 && a2 == 0xE800000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x7374726F686F63 && a2 == 0xE700000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x69737265766E6F63 && a2 == 0xEE00617461446E6FLL || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x6F696475417369 && a2 == 0xE700000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x6465727574616566 && a2 == 0xE800000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001D5E47100 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x7267726576457369 && a2 == 0xEB000000006E6565 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x646174654D676174 && a2 == 0xEB00000000617461 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001D5E47730 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x65766E6F43626577 && a2 == 0xEC00000064657472 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001D5E47750)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 22;
    else
      return 23;
  }
}

uint64_t sub_1D5DA9EB4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6B63696C43776172 && a2 == 0xE900000000000073;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736B63696C63 && a2 == 0xE600000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6973736572706D69 && a2 == 0xEB00000000736E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_1D5DAA024()
{
  unint64_t result;

  result = qword_1EFFB55F8;
  if (!qword_1EFFB55F8)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClassicHeadlineCohortType, &type metadata for ClassicHeadlineCohortType);
    atomic_store(result, (unint64_t *)&qword_1EFFB55F8);
  }
  return result;
}

uint64_t sub_1D5DAA078(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1D5DB9AEC(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        sub_1D5DB9AEC((char *)(v7 > 1), v8 + 1, 1);
      v4 += 6;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

BOOL sub_1D5DAA14C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1D5DAA164()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5DAA18C()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

BOOL sub_1D5DAA1D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1D5DAA1E8()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DAA22C()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5DAA254()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DAA2A4(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)a1 == *(_QWORD *)a2) & ~(*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8));
}

uint64_t sub_1D5DAA2C8(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)a1 == *(_QWORD *)a2) & ~(*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8));
}

uint64_t sub_1D5DAA2EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  char *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  uint64_t v53;
  id v54;
  char v55;
  void *v56;
  void *v57;
  uint64_t v58;
  id v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char **v67;
  void *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t result;
  uint64_t v79;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char v91;
  void *v92;

  if (qword_1ED9AF208 != -1)
LABEL_70:
    swift_once();
  v7 = (void *)qword_1ED9AF200;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1D5E38FE0;
  v9 = a1[2];
  v10 = v7;
  v11 = sub_1D5E378CC();
  v13 = v12;
  v14 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
  v15 = sub_1D5D889BC();
  *(_QWORD *)(v8 + 64) = v15;
  *(_QWORD *)(v8 + 32) = v11;
  *(_QWORD *)(v8 + 40) = v13;
  v16 = MEMORY[0x1D827D0A0](a4, &_s17TagClusteringRuleON);
  *(_QWORD *)(v8 + 96) = v14;
  *(_QWORD *)(v8 + 104) = v15;
  v82 = v15;
  *(_QWORD *)(v8 + 72) = v16;
  *(_QWORD *)(v8 + 80) = v17;
  sub_1D5E375FC();
  sub_1D5E373A4();

  swift_bridgeObjectRelease();
  v83 = v9;
  if (v9)
  {
    v18 = a4;
    v84 = a1 + 4;
    a1 = (_QWORD *)(a4 + 32);
    swift_bridgeObjectRetain();
    v19 = 0;
    v20 = (char *)MEMORY[0x1E0DEE9D8];
    v21 = (char *)MEMORY[0x1E0DEE9D8];
    v22 = a3;
    v86 = (_QWORD *)(a4 + 32);
    v79 = a4;
    while (1)
    {
      v27 = &v84[6 * v19];
      v88 = *v27;
      v89 = v27[1];
      v28 = v27[2];
      v30 = v27[3];
      v29 = v27[4];
      v90 = *((unsigned __int8 *)v27 + 40);
      v87 = v19;
      if ((v22 & 1) == 0 && *((_QWORD *)v21 + 2) >= a2)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = sub_1D5DAAC54(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
        v48 = *((_QWORD *)v20 + 2);
        v47 = *((_QWORD *)v20 + 3);
        if (v48 >= v47 >> 1)
          v20 = sub_1D5DAAC54((char *)(v47 > 1), v48 + 1, 1, v20);
        *((_QWORD *)v20 + 2) = v48 + 1;
        v49 = &v20[48 * v48];
        *((_QWORD *)v49 + 4) = v88;
        *((_QWORD *)v49 + 5) = v89;
        *((_QWORD *)v49 + 6) = v28;
        *((_QWORD *)v49 + 7) = v30;
        *((_QWORD *)v49 + 8) = v29;
        v49[72] = v90;
        v49[73] = 1;
        goto LABEL_5;
      }
      a4 = *(_QWORD *)(v18 + 16);
      v85 = v20;
      if (!a4)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
LABEL_41:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v21 = sub_1D5DAAC54(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
        v46 = *((_QWORD *)v21 + 2);
        v45 = *((_QWORD *)v21 + 3);
        if (v46 >= v45 >> 1)
          v21 = sub_1D5DAAC54((char *)(v45 > 1), v46 + 1, 1, v21);
        *((_QWORD *)v21 + 2) = v46 + 1;
        v23 = &v21[48 * v46];
        *((_QWORD *)v23 + 4) = v88;
        *((_QWORD *)v23 + 5) = v89;
        *((_QWORD *)v23 + 6) = v28;
        *((_QWORD *)v23 + 7) = v30;
        *((_QWORD *)v23 + 8) = v29;
        *((_WORD *)v23 + 36) = v90;
        v24 = (void *)qword_1ED9AF200;
        v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1D5E38280;
        v26 = v24;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v25 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v25 + 64) = v82;
        *(_QWORD *)(v25 + 32) = v88;
        *(_QWORD *)(v25 + 40) = v89;
        sub_1D5E375FC();
        sub_1D5E373A4();

        swift_bridgeObjectRelease();
        v20 = v85;
        goto LABEL_5;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v31 = 0;
      while (1)
      {
        v32 = &a1[2 * v31];
        v33 = *v32;
        if ((v32[1] & 1) == 0)
        {
          if (v90 == 1)
          {
            v39 = *((_QWORD *)v21 + 2);
            if (v39)
            {
              v40 = 0;
              v41 = (unsigned __int8 *)(v21 + 72);
              do
              {
                v42 = *v41;
                v41 += 48;
                v43 = v42 == 1;
                v38 = __OFADD__(v40, v43);
                v40 += v43;
                if (v38)
                {
LABEL_69:
                  __break(1u);
                  goto LABEL_70;
                }
                --v39;
              }
              while (v39);
              if (v40 < v33)
                goto LABEL_11;
LABEL_38:
              v44 = 0;
              goto LABEL_51;
            }
            if (v33 <= 0)
              goto LABEL_38;
          }
          goto LABEL_11;
        }
        if (v29)
        {
          v34 = *((_QWORD *)v21 + 2);
          if (v34)
          {
            v35 = 0;
            a1 = v21 + 64;
            do
            {
              if (*a1)
              {
                if (*(a1 - 1) == v30 && *a1 == v29)
                {
                  v38 = __OFADD__(v35++, 1);
                  if (v38)
                  {
LABEL_68:
                    __break(1u);
                    goto LABEL_69;
                  }
                }
                else
                {
                  v37 = sub_1D5E378FC();
                  v38 = __OFADD__(v35, v37 & 1);
                  v35 += v37 & 1;
                  if (v38)
                    goto LABEL_68;
                }
              }
              a1 += 6;
              --v34;
            }
            while (v34);
            a1 = v86;
            if (v35 >= v33)
              break;
            goto LABEL_11;
          }
          if (v33 <= 0)
            break;
        }
LABEL_11:
        if (++v31 == a4)
        {
          v18 = v79;
          swift_bridgeObjectRelease();
          v22 = a3;
          goto LABEL_41;
        }
      }
      v44 = 1;
LABEL_51:
      sub_1D5DAAC10();
      v50 = (void *)swift_allocError();
      *v51 = v44;
      swift_willThrow();
      v18 = v79;
      swift_bridgeObjectRelease();
      v92 = v50;
      MEMORY[0x1D827D850](v50);
      __swift_instantiateConcreteTypeFromMangledName(qword_1ED9AD958);
      v20 = v85;
      if ((swift_dynamicCast() & 1) != 0)
      {

        v52 = (void *)qword_1ED9AF200;
        v53 = swift_allocObject();
        *(_OWORD *)(v53 + 16) = xmmword_1D5E38280;
        v54 = v52;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v53 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v53 + 64) = v82;
        *(_QWORD *)(v53 + 32) = v88;
        *(_QWORD *)(v53 + 40) = v89;
        sub_1D5E375FC();
        if ((v91 & 1) != 0)
        {
          sub_1D5E373A4();
          v55 = 3;
        }
        else
        {
          v55 = 2;
          sub_1D5E373A4();
        }

        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = sub_1D5DAAC54(0, *((_QWORD *)v85 + 2) + 1, 1, v85);
        a1 = v86;
        v64 = *((_QWORD *)v20 + 2);
        v63 = *((_QWORD *)v20 + 3);
        if (v64 >= v63 >> 1)
          v20 = sub_1D5DAAC54((char *)(v63 > 1), v64 + 1, 1, v20);
        *((_QWORD *)v20 + 2) = v64 + 1;
        v65 = &v20[48 * v64];
        *((_QWORD *)v65 + 4) = v88;
        *((_QWORD *)v65 + 5) = v89;
        *((_QWORD *)v65 + 6) = v28;
        *((_QWORD *)v65 + 7) = v30;
        *((_QWORD *)v65 + 8) = v29;
        v65[72] = v90;
        v65[73] = v55;

        v22 = a3;
      }
      else
      {
        v56 = v50;

        v57 = (void *)qword_1ED9AF200;
        v58 = swift_allocObject();
        *(_OWORD *)(v58 + 16) = xmmword_1D5E38280;
        v59 = v57;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v58 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v58 + 64) = v82;
        *(_QWORD *)(v58 + 32) = v88;
        *(_QWORD *)(v58 + 40) = v89;
        sub_1D5E375FC();
        sub_1D5E373A4();

        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = sub_1D5DAAC54(0, *((_QWORD *)v85 + 2) + 1, 1, v85);
        v22 = a3;
        v61 = *((_QWORD *)v20 + 2);
        v60 = *((_QWORD *)v20 + 3);
        a1 = v86;
        if (v61 >= v60 >> 1)
          v20 = sub_1D5DAAC54((char *)(v60 > 1), v61 + 1, 1, v20);
        *((_QWORD *)v20 + 2) = v61 + 1;
        v62 = &v20[48 * v61];
        *((_QWORD *)v62 + 4) = v88;
        *((_QWORD *)v62 + 5) = v89;
        *((_QWORD *)v62 + 6) = v28;
        *((_QWORD *)v62 + 7) = v30;
        *((_QWORD *)v62 + 8) = v29;
        v62[72] = v90;
        v62[73] = 4;

      }
LABEL_5:
      v19 = v87 + 1;
      if (v87 + 1 == v83)
      {
        swift_bridgeObjectRelease();
        v67 = a5;
        v66 = v20;
        goto LABEL_67;
      }
    }
  }
  v66 = (char *)MEMORY[0x1E0DEE9D8];
  v21 = (char *)MEMORY[0x1E0DEE9D8];
  v67 = a5;
LABEL_67:
  v68 = (void *)qword_1ED9AF200;
  v69 = swift_allocObject();
  *(_OWORD *)(v69 + 16) = xmmword_1D5E38280;
  v70 = v68;
  v71 = swift_bridgeObjectRetain();
  v72 = sub_1D5DAA078(v71);
  swift_bridgeObjectRelease();
  v73 = MEMORY[0x1E0DEA968];
  v74 = MEMORY[0x1D827D0A0](v72, MEMORY[0x1E0DEA968]);
  v76 = v75;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v69 + 56) = v73;
  *(_QWORD *)(v69 + 64) = v82;
  *(_QWORD *)(v69 + 32) = v74;
  *(_QWORD *)(v69 + 40) = v76;
  sub_1D5E375FC();
  sub_1D5E373A4();

  result = swift_bridgeObjectRelease();
  *v67 = v21;
  v67[1] = v66;
  return result;
}

unint64_t sub_1D5DAAC10()
{
  unint64_t result;

  result = qword_1EFFB5600;
  if (!qword_1EFFB5600)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3A034, &_s18TagClusteringErrorON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5600);
  }
  return result;
}

char *sub_1D5DAAC54(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF340);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1D5DAAD6C()
{
  unint64_t result;

  result = qword_1EFFB5608;
  if (!qword_1EFFB5608)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E39FCC, &_s18TagClusteringErrorON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5608);
  }
  return result;
}

uint64_t _s18TagClusteringErrorOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s18TagClusteringErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D5DAAE8C + 4 * byte_1D5E39FC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D5DAAEC0 + 4 * byte_1D5E39FC0[v4]))();
}

uint64_t sub_1D5DAAEC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DAAEC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DAAED0);
  return result;
}

uint64_t sub_1D5DAAEDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DAAEE4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D5DAAEE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DAAEF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DAAEFC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D5DAAF08(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *_s18TagClusteringErrorOMa()
{
  return &_s18TagClusteringErrorON;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t _s17TagClusteringRuleOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s17TagClusteringRuleOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1D5DAAFC4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1D5DAAFD0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *_s17TagClusteringRuleOMa()
{
  return &_s17TagClusteringRuleON;
}

ValueMetadata *_s18SportsTagClustererVMa()
{
  return &_s18SportsTagClustererVN;
}

char *sub_1D5DAAFFC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD7E8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[112 * v8])
      memmove(v12, v13, 112 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_1D5DAB114(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5618);
  v10 = *(_QWORD *)(type metadata accessor for Aggregate(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size_0(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for Aggregate(0) - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

char *sub_1D5DAB288(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF1D8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8])
      memmove(v12, v13, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1D5DAB3A0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5C0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF7A0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1D5DAB4D4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1D5DAB4FC(a1, a2, a3, a4, &qword_1ED9AD940);
}

char *sub_1D5DAB4E8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1D5DAB4FC(a1, a2, a3, a4, &qword_1ED9AF1D0);
}

char *sub_1D5DAB4FC(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1D5DAB600(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF1F0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1D5DAB714(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5D8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1D5DAB80C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5610);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

BOOL (*static Classic.NegativeOneToPositiveOneDoubleConditionProvider.condition.getter())(double a1)
{
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1D5E3A100;
  return sub_1D5DAB950;
}

uint64_t sub_1D5DAB940()
{
  return swift_deallocObject();
}

BOOL sub_1D5DAB950(double a1)
{
  uint64_t v1;

  return *(double *)(v1 + 24) >= a1 && *(double *)(v1 + 16) <= a1;
}

uint64_t (*sub_1D5DAB968())(double *)
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1D5E3A100;
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = sub_1D5DAC884;
  *(_QWORD *)(v1 + 24) = v0;
  return sub_1D5DAC874;
}

BOOL sub_1D5DAB9D0(double *a1)
{
  return *a1 >= 0.0;
}

BOOL (*sub_1D5DAB9E0())(double)
{
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1D5E3A110;
  return sub_1D5DAC87C;
}

uint64_t sub_1D5DABA1C()
{
  return swift_deallocObject();
}

uint64_t (*sub_1D5DABA2C())(double *a1)
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1D5E3A110;
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = sub_1D5DAC880;
  *(_QWORD *)(v1 + 24) = v0;
  return sub_1D5DAC838;
}

BOOL (*sub_1D5DABA94())(double a1)
{
  return sub_1D5DABAA4;
}

BOOL sub_1D5DABAA4(double a1)
{
  return a1 >= 0.0;
}

BOOL (*sub_1D5DABAB0())(double *a1)
{
  return sub_1D5DAB9D0;
}

uint64_t (*sub_1D5DABAC0(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  return sub_1D5DABBCC;
}

uint64_t sub_1D5DABB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  swift_getAssociatedTypeWitness();
  v3 = sub_1D5E3756C();
  MEMORY[0x1D827D8E0](MEMORY[0x1E0DEAF38], v3);
  v4 = sub_1D5E37464();
  swift_release();
  return v4 & 1;
}

uint64_t sub_1D5DABBBC()
{
  return swift_deallocObject();
}

uint64_t sub_1D5DABBCC(uint64_t a1)
{
  uint64_t v1;

  return sub_1D5DABB04(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t (*sub_1D5DABBD4(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  sub_1D5DABAC0(v1, v2);
  v4 = v3;
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v1;
  v5[3] = v2;
  v5[4] = sub_1D5DABBCC;
  v5[5] = v4;
  return sub_1D5DAC7DC;
}

BOOL (*sub_1D5DABC38())(uint64_t a1)
{
  return sub_1D5DABC48;
}

BOOL sub_1D5DABC48(uint64_t a1)
{
  return a1 >= 0;
}

BOOL (*sub_1D5DABC54())(_QWORD *a1)
{
  return sub_1D5DABC64;
}

BOOL sub_1D5DABC64(_QWORD *a1)
{
  return *a1 >= 0;
}

uint64_t (*sub_1D5DABC74())(uint64_t result)
{
  return sub_1D5DABC84;
}

uint64_t sub_1D5DABC84(uint64_t result)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t i;
  uint64_t v7;
  double v8;

  if (*(double *)result < -1.0 || *(double *)result > 1.0)
    return 0;
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 1;
  v4 = *(double *)(v2 + 32);
  if (v4 < -1.0 || v4 > 1.0)
    return 0;
  if (v3 == 1)
    return 1;
  for (i = 5; ; ++i)
  {
    v7 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v8 = *(double *)(v2 + 8 * i);
    result = v8 <= 1.0 && v8 >= -1.0;
    if ((_DWORD)result != 1 || v7 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_1D5DABD18())(uint64_t result)
{
  return sub_1D5DABC84;
}

BOOL (*sub_1D5DABD28())(uint64_t a1)
{
  return sub_1D5DABD38;
}

BOOL sub_1D5DABD38(uint64_t a1)
{
  _BOOL4 v1;

  v1 = *(double *)a1 >= 0.0;
  if (*(double *)a1 > 1.0)
    v1 = 0;
  return *(uint64_t *)(a1 + 8) >= 0 && v1;
}

BOOL (*sub_1D5DABD60())(uint64_t a1)
{
  return sub_1D5DABD38;
}

BOOL (*sub_1D5DABD70())(double *a1)
{
  return sub_1D5DABD80;
}

BOOL sub_1D5DABD80(double *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  _BOOL4 v5;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = v4 >= 0.0;
  if (v4 > 1.0)
    v5 = 0;
  if (v1 < 0.0)
    v5 = 0;
  if (v1 > 1.0)
    v5 = 0;
  if (v3 < 0.0)
    v5 = 0;
  if (v3 > 1.0)
    v5 = 0;
  if (v2 < 0.0)
    v5 = 0;
  return v2 <= 1.0 && v5;
}

BOOL (*sub_1D5DABDD0())(double *a1)
{
  return sub_1D5DABD80;
}

BOOL (*sub_1D5DABDE0())(double *a1)
{
  return sub_1D5DABDF0;
}

BOOL sub_1D5DABDF0(double *a1)
{
  return a1[1] >= 0.0 && *a1 >= 0.0;
}

BOOL (*sub_1D5DABE08())(double *a1)
{
  return sub_1D5DABDF0;
}

uint64_t (*sub_1D5DABE18())()
{
  return sub_1D5DABE28;
}

uint64_t sub_1D5DABE28()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_1D5D7B47C(v0);
  swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    v2 = swift_bridgeObjectRetain();
    v3 = sub_1D5D7B35C(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t (*sub_1D5DABE94())()
{
  return sub_1D5DABEA4;
}

uint64_t sub_1D5DABEA4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_1D5D7B47C(v0);
  swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    v2 = swift_bridgeObjectRetain();
    v3 = sub_1D5D7B35C(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

BOOL (*sub_1D5DABF14())(double *)
{
  return sub_1D5DAC870;
}

BOOL (*sub_1D5DABF24())(double *)
{
  return sub_1D5DAC870;
}

BOOL (*sub_1D5DABF34())(double *a1)
{
  return sub_1D5DABF44;
}

BOOL sub_1D5DABF44(double *a1)
{
  _BOOL8 result;

  result = 0;
  if (*a1 >= 0.0 && a1[1] >= 0.0 && a1[2] >= 0.0)
    return a1[3] >= 0.0;
  return result;
}

uint64_t sub_1D5DABF80()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DABF8C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DABF98()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DABFA4()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DABFB0()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DABFBC()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DABFC8()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DABFD4()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DABFE0()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DABFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D5DAC028(a1, a2, a3, (uint64_t)&associated conformance descriptor for ConditionProvider.ConditionProvider.Value: Decodable, MEMORY[0x1E0DEAF40]);
}

uint64_t sub_1D5DAC000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D5DAC028(a1, a2, a3, (uint64_t)&associated conformance descriptor for ConditionProvider.ConditionProvider.Value: Encodable, MEMORY[0x1E0DEAF10]);
}

uint64_t sub_1D5DAC014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D5DAC028(a1, a2, a3, (uint64_t)&associated conformance descriptor for ConditionProvider.ConditionProvider.Value: Equatable, MEMORY[0x1E0DEAF30]);
}

uint64_t sub_1D5DAC028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedConformanceWitness;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return MEMORY[0x1D827D8E0](a5, a1, &AssociatedConformanceWitness);
}

uint64_t sub_1D5DAC07C()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DAC088()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DAC094()
{
  return MEMORY[0x1E0DEB438];
}

unint64_t sub_1D5DAC0A4()
{
  unint64_t result;

  result = qword_1EFFB5680;
  if (!qword_1EFFB5680)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3E0D4, &_s13ConfigurationV23ClusteringConfigurationV6QuotasVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5680);
  }
  return result;
}

unint64_t sub_1D5DAC0EC()
{
  unint64_t result;

  result = qword_1ED9ADB88;
  if (!qword_1ED9ADB88)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3E0FC, &_s13ConfigurationV23ClusteringConfigurationV6QuotasVN);
    atomic_store(result, (unint64_t *)&qword_1ED9ADB88);
  }
  return result;
}

unint64_t sub_1D5DAC134()
{
  unint64_t result;

  result = qword_1EFFB5688;
  if (!qword_1EFFB5688)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3E124, &_s13ConfigurationV23ClusteringConfigurationV6QuotasVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5688);
  }
  return result;
}

unint64_t sub_1D5DAC17C()
{
  unint64_t result;

  result = qword_1EFFB56C0;
  if (!qword_1EFFB56C0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DF6C, &_s13ConfigurationV23ClusteringConfigurationV14TopicDiversityVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB56C0);
  }
  return result;
}

unint64_t sub_1D5DAC1C4()
{
  unint64_t result;

  result = qword_1ED9AECA8;
  if (!qword_1ED9AECA8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DF94, &_s13ConfigurationV23ClusteringConfigurationV14TopicDiversityVN);
    atomic_store(result, (unint64_t *)&qword_1ED9AECA8);
  }
  return result;
}

unint64_t sub_1D5DAC20C()
{
  unint64_t result;

  result = qword_1EFFB56C8;
  if (!qword_1EFFB56C8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DFBC, &_s13ConfigurationV23ClusteringConfigurationV14TopicDiversityVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB56C8);
  }
  return result;
}

unint64_t sub_1D5DAC254()
{
  unint64_t result;

  result = qword_1EFFB5700;
  if (!qword_1EFFB5700)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3EAD0, &_s13ConfigurationV33SubscribedCountScoreConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5700);
  }
  return result;
}

unint64_t sub_1D5DAC29C()
{
  unint64_t result;

  result = qword_1EFFB5708;
  if (!qword_1EFFB5708)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3EAF8, &_s13ConfigurationV33SubscribedCountScoreConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5708);
  }
  return result;
}

unint64_t sub_1D5DAC2E4()
{
  unint64_t result;

  result = qword_1EFFB5710;
  if (!qword_1EFFB5710)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3EB20, &_s13ConfigurationV33SubscribedCountScoreConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5710);
  }
  return result;
}

unint64_t sub_1D5DAC32C()
{
  unint64_t result;

  result = qword_1EFFB5748;
  if (!qword_1EFFB5748)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F2C0, &_s13ConfigurationV12FeaturePriorVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5748);
  }
  return result;
}

unint64_t sub_1D5DAC374()
{
  unint64_t result;

  result = qword_1EFFB5750;
  if (!qword_1EFFB5750)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F2E8, &_s13ConfigurationV12FeaturePriorVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5750);
  }
  return result;
}

unint64_t sub_1D5DAC3BC()
{
  unint64_t result;

  result = qword_1EFFB5758;
  if (!qword_1EFFB5758)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F310, &_s13ConfigurationV12FeaturePriorVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5758);
  }
  return result;
}

uint64_t sub_1D5DAC400()
{
  return sub_1D5DAC468(&qword_1EFFB5790, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEB0A8], MEMORY[0x1E0DEA0D8]);
}

uint64_t sub_1D5DAC434()
{
  return sub_1D5DAC468(&qword_1EFFB57A0, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEB080], MEMORY[0x1E0DEA0B8]);
}

uint64_t sub_1D5DAC468(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFFB5798);
    v10[0] = a2;
    v10[1] = a3;
    result = MEMORY[0x1D827D8E0](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D5DAC4D0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EFFB57A8;
  if (!qword_1EFFB57A8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFFB5798);
    v2 = MEMORY[0x1E0DEB0A0];
    result = MEMORY[0x1D827D8E0](MEMORY[0x1E0DEA0C8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EFFB57A8);
  }
  return result;
}

unint64_t sub_1D5DAC530()
{
  unint64_t result;

  result = qword_1EFFB57E0;
  if (!qword_1EFFB57E0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F8B0, &_s13ConfigurationV25AggregateModificationDataVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB57E0);
  }
  return result;
}

unint64_t sub_1D5DAC578()
{
  unint64_t result;

  result = qword_1EFFB57E8;
  if (!qword_1EFFB57E8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F8D8, &_s13ConfigurationV25AggregateModificationDataVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB57E8);
  }
  return result;
}

unint64_t sub_1D5DAC5C0()
{
  unint64_t result;

  result = qword_1EFFB57F0;
  if (!qword_1EFFB57F0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F900, &_s13ConfigurationV25AggregateModificationDataVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB57F0);
  }
  return result;
}

unint64_t sub_1D5DAC608()
{
  unint64_t result;

  result = qword_1EFFB5828;
  if (!qword_1EFFB5828)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F838, &_s13ConfigurationV34AggregateModificationConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5828);
  }
  return result;
}

unint64_t sub_1D5DAC650()
{
  unint64_t result;

  result = qword_1EFFB5830;
  if (!qword_1EFFB5830)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F860, &_s13ConfigurationV34AggregateModificationConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5830);
  }
  return result;
}

unint64_t sub_1D5DAC698()
{
  unint64_t result;

  result = qword_1EFFB5838;
  if (!qword_1EFFB5838)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F888, &_s13ConfigurationV34AggregateModificationConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5838);
  }
  return result;
}

BOOL (*sub_1D5DAC6DC())(double *a1)
{
  return sub_1D5DABF44;
}

uint64_t dispatch thunk of static ConditionProvider.condition.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

ValueMetadata *type metadata accessor for Classic.NegativeOneToPositiveOneDoubleConditionProvider()
{
  return &type metadata for Classic.NegativeOneToPositiveOneDoubleConditionProvider;
}

ValueMetadata *_s33NormalizedDoubleConditionProviderVMa()
{
  return &_s33NormalizedDoubleConditionProviderVN;
}

ValueMetadata *_s31PositiveDoubleConditionProviderVMa()
{
  return &_s31PositiveDoubleConditionProviderVN;
}

uint64_t sub_1D5DAC724()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t _s22ArrayConditionProviderVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s22ArrayConditionProviderVMn);
}

ValueMetadata *_s28PositiveIntConditionProviderVMa()
{
  return &_s28PositiveIntConditionProviderVN;
}

ValueMetadata *_s22QuotaConditionProviderVMa()
{
  return &_s22QuotaConditionProviderVN;
}

ValueMetadata *_s31TopicDiversityConditionProviderVMa()
{
  return &_s31TopicDiversityConditionProviderVN;
}

ValueMetadata *_s50SubscribedCountScoreConfigurationConditionProviderVMa()
{
  return &_s50SubscribedCountScoreConfigurationConditionProviderVN;
}

ValueMetadata *_s29FeaturePriorConditionProviderVMa()
{
  return &_s29FeaturePriorConditionProviderVN;
}

ValueMetadata *_s33TagWeightMappingConditionProviderVMa()
{
  return &_s33TagWeightMappingConditionProviderVN;
}

ValueMetadata *_s42AggregateModificationDataConditionProviderVMa()
{
  return &_s42AggregateModificationDataConditionProviderVN;
}

ValueMetadata *_s51AggregateModificationConfigurationConditionProviderVMa()
{
  return &_s51AggregateModificationConfigurationConditionProviderVN;
}

uint64_t sub_1D5DAC7B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D5DAC7DC(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 32))(*a1) & 1;
}

uint64_t sub_1D5DAC804()
{
  return swift_deallocObject();
}

uint64_t sub_1D5DAC814()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D5DAC838(double *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(double))(v1 + 16))(*a1) & 1;
}

uint64_t sub_1D5DAC860()
{
  return swift_deallocObject();
}

uint64_t GroupableHeadline.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupableHeadline.publisherID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupableHeadline.topicIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GroupableHeadline.managedTopicIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GroupableHeadline.managedWinnerTopicIDs.getter()
{
  return swift_bridgeObjectRetain();
}

double GroupableHeadline.score.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

uint64_t GroupableHeadline.accessible.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t GroupableHeadline.evergreen.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t GroupableHeadline.bundlePaid.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 66);
}

uint64_t GroupableHeadline.aigc.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 67);
}

uint64_t GroupableHeadline.thumbnailPerceptualHash.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  sub_1D5DA2208(v1, *(_QWORD *)(v0 + 80));
  return v1;
}

void GroupableHeadline.groupingReason.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 88);
}

_BYTE *GroupableHeadline.groupingReason.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 88) = *result;
  return result;
}

uint64_t (*GroupableHeadline.groupingReason.modify())()
{
  return nullsub_31;
}

uint64_t GroupableHeadline.embeddingScore.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t GroupableHeadline.init(identifier:publisherID:topicIDs:managedTopicIDs:managedWinnerTopicIDs:score:accessible:bundlePaid:aigc:evergreen:embeddingScore:thumbnailPerceptualHash:groupingReason:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, char a11, char a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char v18;

  v18 = *a18;
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(double *)(a9 + 56) = a10;
  *(_BYTE *)(a9 + 64) = a8;
  *(_BYTE *)(a9 + 65) = a13;
  *(_BYTE *)(a9 + 66) = a11;
  *(_BYTE *)(a9 + 67) = a12;
  *(_QWORD *)(a9 + 72) = a16;
  *(_QWORD *)(a9 + 80) = a17;
  *(_BYTE *)(a9 + 88) = v18;
  *(_QWORD *)(a9 + 96) = a14;
  *(_BYTE *)(a9 + 104) = a15 & 1;
  return result;
}

double GroupableHeadline.computedScore(tagID:config:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double v6;
  double v7;
  uint64_t v8;
  double v9;

  v6 = *(double *)(a3 + 912);
  v7 = *(double *)(a3 + 920);
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(double *)(v3 + 56);
  if ((sub_1D5D7E22C(a1, a2, *(_QWORD *)(v3 + 48)) & 1) == 0)
  {
    if ((sub_1D5D7E22C(a1, a2, v8) & 1) != 0)
      v7 = v6;
    else
      v7 = 1.0;
  }
  return v9 * v7;
}

uint64_t static GroupableHeadline.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1D5E378FC();
}

uint64_t sub_1D5DACA84(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1D5E378FC();
}

uint64_t GroupableHeadline.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

uint64_t GroupableHeadline.hashValue.getter()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DACB50()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DACBA8()
{
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5DACBEC()
{
  sub_1D5E379A4();
  swift_bridgeObjectRetain();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t GroupableHeadline.debugDescription.getter()
{
  sub_1D5E37650();
  sub_1D5E37458();
  swift_bridgeObjectRetain();
  sub_1D5E37458();
  swift_bridgeObjectRelease();
  sub_1D5E37458();
  swift_bridgeObjectRetain();
  sub_1D5E37590();
  sub_1D5E37458();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D5E37458();
  sub_1D5E37584();
  return 0;
}

unint64_t sub_1D5DACD64()
{
  unint64_t result;

  result = qword_1ED9AD8F8;
  if (!qword_1ED9AD8F8)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for GroupableHeadline, &type metadata for GroupableHeadline);
    atomic_store(result, (unint64_t *)&qword_1ED9AD8F8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GroupableHeadline(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for GroupableHeadline(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 >> 60 != 15)
    return sub_1D5DA2274(*(_QWORD *)(a1 + 72), v3);
  return result;
}

uint64_t initializeWithCopy for GroupableHeadline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v8 = (uint64_t *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_1D5DA221C(*v8, v9);
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = v9;
  }
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t assignWithCopy for GroupableHeadline(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  v4 = (uint64_t *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_1D5DA221C(*v4, *(_QWORD *)(a2 + 80));
      v8 = *(_QWORD *)(a1 + 72);
      v9 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 72) = v7;
      *(_QWORD *)(a1 + 80) = v5;
      sub_1D5DA2274(v8, v9);
      goto LABEL_8;
    }
    sub_1D5DAD090(a1 + 72);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v6 = *v4;
  sub_1D5DA221C(*v4, *(_QWORD *)(a2 + 80));
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = v5;
LABEL_8:
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  return a1;
}

uint64_t sub_1D5DAD090(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CB0338] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for GroupableHeadline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  v6 = (_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 80);
    if (v8 >> 60 != 15)
    {
      v9 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = *v6;
      *(_QWORD *)(a1 + 80) = v8;
      sub_1D5DA2274(v9, v7);
      goto LABEL_6;
    }
    sub_1D5DAD090(a1 + 72);
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v6;
LABEL_6:
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupableHeadline(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupableHeadline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupableHeadline()
{
  return &type metadata for GroupableHeadline;
}

uint64_t sub_1D5DAD2AC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1D5DB9AEC(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        sub_1D5DB9AEC((char *)(v7 > 1), v8 + 1, 1);
      v4 += 4;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1D5DAD380(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v27 = MEMORY[0x1E0DEE9D8];
  sub_1D5DB9B08(0, v1, 0);
  v2 = v27;
  result = sub_1D5E25F74(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v22 = v1;
  v23 = v5;
  v24 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v13 = v12[1];
    v25 = *v12;
    v26 = *(_OWORD *)(*(_QWORD *)(a1 + 56) + 16 * v6);
    v15 = *(_QWORD *)(v27 + 16);
    v14 = *(_QWORD *)(v27 + 24);
    result = swift_bridgeObjectRetain();
    if (v15 >= v14 >> 1)
      result = (uint64_t)sub_1D5DB9B08((char *)(v14 > 1), v15 + 1, 1);
    *(_QWORD *)(v27 + 16) = v15 + 1;
    v16 = v27 + 32 * v15;
    *(_QWORD *)(v16 + 32) = v25;
    *(_QWORD *)(v16 + 40) = v13;
    *(_OWORD *)(v16 + 48) = v26;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v17 = *(_QWORD *)(v24 + 8 * v11);
    if ((v17 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v23;
    if (*(_DWORD *)(a1 + 36) != v23)
      goto LABEL_27;
    v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      v9 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v22;
    }
    else
    {
      v19 = v11 + 1;
      v20 = (unint64_t)(v9 + 63) >> 6;
      v10 = v22;
      if (v11 + 1 < v20)
      {
        v21 = *(_QWORD *)(v24 + 8 * v19);
        if (v21)
        {
LABEL_20:
          v9 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v11)
          {
            v21 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v21)
            {
              v19 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v9;
    if (v7 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

BOOL sub_1D5DAD59C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1D5DAD5B8()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5DAD5E4()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C616E7265746E69;
  else
    return 0x6C616E7265747865;
}

uint64_t sub_1D5DAD60C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBBF0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DAD630()
{
  return 0;
}

void sub_1D5DAD63C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DAD648()
{
  sub_1D5DADA30();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DAD670()
{
  sub_1D5DADA30();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DAD698()
{
  return 0;
}

uint64_t sub_1D5DAD6A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1D5DAD6D0()
{
  return 0;
}

void sub_1D5DAD6DC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DAD6E8()
{
  sub_1D5DADAB8();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DAD710()
{
  sub_1D5DADAB8();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DAD738()
{
  return 1;
}

uint64_t sub_1D5DAD744()
{
  return sub_1D5E379B0();
}

unint64_t sub_1D5DAD76C()
{
  return 0xD000000000000010;
}

uint64_t sub_1D5DAD788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBBFE8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1D5DAD7B0()
{
  return 0;
}

void sub_1D5DAD7BC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DAD7C8()
{
  sub_1D5DADA74();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DAD7F0()
{
  sub_1D5DADA74();
  return sub_1D5E37A10();
}

uint64_t ClusteringJournal.Mode.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF058);
  v20 = *(_QWORD *)(v3 - 8);
  v21 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF050);
  v18 = *(_QWORD *)(v7 - 8);
  v19 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF048);
  v22 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DADA30();
  sub_1D5E379F8();
  if (v15 == 2)
  {
    v23 = 0;
    sub_1D5DADAB8();
    sub_1D5E37800();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v19);
  }
  else
  {
    v24 = 1;
    sub_1D5DADA74();
    sub_1D5E37800();
    v17 = v21;
    sub_1D5E37878();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v14, v11);
}

unint64_t sub_1D5DADA30()
{
  unint64_t result;

  result = qword_1ED9AE6D8;
  if (!qword_1ED9AE6D8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D7C4, &type metadata for ClusteringJournal.Mode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE6D8);
  }
  return result;
}

unint64_t sub_1D5DADA74()
{
  unint64_t result;

  result = qword_1ED9AE700;
  if (!qword_1ED9AE700)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D774, &type metadata for ClusteringJournal.Mode.InternalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE700);
  }
  return result;
}

unint64_t sub_1D5DADAB8()
{
  unint64_t result;

  result = qword_1EFFB58F0;
  if (!qword_1EFFB58F0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D724, &type metadata for ClusteringJournal.Mode.ExternalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB58F0);
  }
  return result;
}

uint64_t ClusteringJournal.Mode.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  char v39;
  char v40;

  v34 = a2;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB58F8);
  v33 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v3);
  v35 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5900);
  v5 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5908);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DADA30();
  v37 = v13;
  v14 = v38;
  sub_1D5E379E0();
  if (v14)
    goto LABEL_6;
  v15 = v5;
  v17 = v35;
  v16 = v36;
  v31 = v10;
  v38 = a1;
  v18 = sub_1D5E377E8();
  v19 = v9;
  if (*(_QWORD *)(v18 + 16) != 1)
  {
    v23 = sub_1D5E37674();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB52B8);
    *v25 = &type metadata for ClusteringJournal.Mode;
    v26 = v37;
    sub_1D5E37734();
    sub_1D5E3765C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x1E0DEC450], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v9);
    a1 = v38;
LABEL_6:
    v27 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v27);
  }
  v21 = v37;
  v20 = (uint64_t)v38;
  if ((*(_BYTE *)(v18 + 32) & 1) != 0)
  {
    v40 = 1;
    sub_1D5DADA74();
    v22 = v19;
    sub_1D5E37728();
    v29 = sub_1D5E377AC();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
    v30 = v29 & 1;
    v20 = (uint64_t)v38;
  }
  else
  {
    v39 = 0;
    sub_1D5DADAB8();
    sub_1D5E37728();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v19);
    v30 = 2;
  }
  *v34 = v30;
  v27 = v20;
  return __swift_destroy_boxed_opaque_existential_1(v27);
}

uint64_t sub_1D5DADEB4@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return ClusteringJournal.Mode.init(from:)(a1, a2);
}

uint64_t sub_1D5DADEC8(_QWORD *a1)
{
  return ClusteringJournal.Mode.encode(to:)(a1);
}

uint64_t ClusteringJournal.Inventory.Item.tagID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ClusteringJournal.Inventory.Item.headlines.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t ClusteringJournal.Inventory.Item.hardpaywallHeadlines.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_1D5DADF20()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x656E696C64616568;
  if (*v0 != 1)
    v1 = 0xD000000000000014;
  if (*v0)
    return v1;
  else
    return 0x4449676174;
}

uint64_t sub_1D5DADF80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBC06C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DADFA4()
{
  return 0;
}

void sub_1D5DADFB0(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DADFBC()
{
  sub_1D5DAE160();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DADFE4()
{
  sub_1D5DAE160();
  return sub_1D5E37A10();
}

uint64_t ClusteringJournal.Inventory.Item.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  char v12;
  char v13;
  char v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF170);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 16);
  v11[1] = *(_QWORD *)(v1 + 24);
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DAE160();
  sub_1D5E379F8();
  v14 = 0;
  v9 = v11[3];
  sub_1D5E3786C();
  if (!v9)
  {
    v13 = 1;
    sub_1D5E37890();
    v12 = 2;
    sub_1D5E37890();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

unint64_t sub_1D5DAE160()
{
  unint64_t result;

  result = qword_1ED9AEAF0;
  if (!qword_1ED9AEAF0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D6D4, &type metadata for ClusteringJournal.Inventory.Item.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AEAF0);
  }
  return result;
}

uint64_t ClusteringJournal.Inventory.Item.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5910);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DAE160();
  sub_1D5E379E0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v19 = 0;
  v10 = sub_1D5E377A0();
  v12 = v11;
  v18 = 1;
  swift_bridgeObjectRetain();
  v16 = sub_1D5E377C4();
  v17 = 2;
  v14 = sub_1D5E377C4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  *a2 = v10;
  a2[1] = v12;
  a2[2] = v16;
  a2[3] = v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5DAE358@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ClusteringJournal.Inventory.Item.init(from:)(a1, a2);
}

uint64_t sub_1D5DAE36C(_QWORD *a1)
{
  return ClusteringJournal.Inventory.Item.encode(to:)(a1);
}

uint64_t ClusteringJournal.Inventory.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DAE388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  BOOL v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  char *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  _QWORD *v79;

  v4 = sub_1D5DAD2AC(a2);
  swift_bridgeObjectRelease();
  v5 = sub_1D5D81DA4(v4);
  swift_bridgeObjectRelease();
  v66 = *(_QWORD *)(a1 + 16);
  if (v66)
  {
    v6 = 0;
    v65 = a1 + 32;
    v67 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v7 = v5 + 56;
    v64 = a1;
    v71 = v5 + 56;
    while (v6 < *(_QWORD *)(a1 + 16))
    {
      v70 = v6;
      v8 = v65 + 112 * v6;
      v9 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v8 + 24);
      v10 = *(_QWORD *)(v8 + 32);
      v74 = *(unsigned __int8 *)(v8 + 64);
      v72 = *(unsigned __int8 *)(v8 + 66);
      v12 = *(_QWORD *)(v8 + 72);
      v13 = *(_QWORD *)(v8 + 80);
      v14 = *(_QWORD *)(v10 + 16) + 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v68 = v13;
      v69 = v12;
      sub_1D5DA2208(v12, v13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v78 = sub_1D5D7DABC(0, v14, 0, MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRetain();
      sub_1D5D8C008(v10);
      v15 = v78;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = sub_1D5D7DABC(0, *((_QWORD *)v78 + 2) + 1, 1, v78);
      v17 = *((_QWORD *)v15 + 2);
      v16 = *((_QWORD *)v15 + 3);
      if (v17 >= v16 >> 1)
        v15 = sub_1D5D7DABC((char *)(v16 > 1), v17 + 1, 1, v15);
      *((_QWORD *)v15 + 2) = v17 + 1;
      v77 = v15 + 32;
      v18 = &v15[16 * v17 + 32];
      *(_QWORD *)v18 = v9;
      *((_QWORD *)v18 + 1) = v11;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v76 = *((_QWORD *)v15 + 2);
      if (v76)
      {
        v19 = 0;
        v20 = v72 & ~v74;
        v73 = v15;
        v75 = v20;
        v21 = v67;
        v22 = *((_QWORD *)v15 + 2);
        while (v19 < *((_QWORD *)v15 + 2))
        {
          if (*(_QWORD *)(v5 + 16))
          {
            v23 = (uint64_t *)&v77[16 * v19];
            v25 = *v23;
            v24 = v23[1];
            sub_1D5E379A4();
            swift_bridgeObjectRetain();
            sub_1D5E3744C();
            v26 = sub_1D5E379C8();
            v27 = -1 << *(_BYTE *)(v5 + 32);
            v28 = v26 & ~v27;
            if (((*(_QWORD *)(v7 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) != 0)
            {
              v29 = *(_QWORD *)(v5 + 48);
              v30 = (_QWORD *)(v29 + 16 * v28);
              v31 = *v30 == v25 && v30[1] == v24;
              if (v31 || (sub_1D5E378FC() & 1) != 0)
              {
LABEL_22:
                if (v21[2])
                {
                  swift_bridgeObjectRetain();
                  v32 = sub_1D5D7FFCC(v25, v24);
                  if ((v33 & 1) != 0)
                  {
                    v34 = (uint64_t *)(v21[7] + 16 * v32);
                    v36 = *v34;
                    v35 = v34[1];
                  }
                  else
                  {
                    v35 = 0;
                    v36 = 0;
                  }
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v35 = 0;
                  v36 = 0;
                }
                v37 = v36 + 1;
                if (__OFADD__(v36, 1))
                  goto LABEL_53;
                v38 = v5;
                v39 = v35 + v75;
                if (__OFADD__(v35, v75))
                  goto LABEL_54;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v79 = v21;
                v41 = sub_1D5D7FFCC(v25, v24);
                v43 = v21;
                v44 = v41;
                v45 = v43[2];
                v46 = (v42 & 1) == 0;
                v47 = v45 + v46;
                if (__OFADD__(v45, v46))
                  goto LABEL_55;
                v48 = v42;
                if (v43[3] >= v47)
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    sub_1D5D97F48();
                }
                else
                {
                  sub_1D5D9A878(v47, isUniquelyReferenced_nonNull_native);
                  v49 = sub_1D5D7FFCC(v25, v24);
                  if ((v48 & 1) != (v50 & 1))
                    goto LABEL_58;
                  v44 = v49;
                }
                v22 = v76;
                if ((v48 & 1) != 0)
                {
                  v51 = (_QWORD *)(v79[7] + 16 * v44);
                  *v51 = v37;
                  v51[1] = v39;
                  v21 = v79;
                }
                else
                {
                  v79[(v44 >> 6) + 8] |= 1 << v44;
                  v52 = (uint64_t *)(v79[6] + 16 * v44);
                  *v52 = v25;
                  v52[1] = v24;
                  v53 = (_QWORD *)(v79[7] + 16 * v44);
                  *v53 = v37;
                  v53[1] = v39;
                  v54 = v79[2];
                  v55 = __OFADD__(v54, 1);
                  v56 = v54 + 1;
                  if (v55)
                    goto LABEL_56;
                  v21 = v79;
                  v79[2] = v56;
                  swift_bridgeObjectRetain();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v5 = v38;
                v7 = v71;
                v15 = v73;
              }
              else
              {
                v57 = ~v27;
                while (1)
                {
                  v28 = (v28 + 1) & v57;
                  if (((*(_QWORD *)(v7 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
                    break;
                  v58 = (_QWORD *)(v29 + 16 * v28);
                  v59 = *v58 == v25 && v58[1] == v24;
                  if (v59 || (sub_1D5E378FC() & 1) != 0)
                    goto LABEL_22;
                }
                swift_bridgeObjectRelease();
                v22 = v76;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          if (++v19 == v22)
          {
            v67 = v21;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_4;
          }
        }
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = v70 + 1;
      sub_1D5DA2260(v69, v68);
      a1 = v64;
      if (v70 + 1 == v66)
        goto LABEL_51;
    }
    __break(1u);
LABEL_58:
    result = sub_1D5E3795C();
    __break(1u);
  }
  else
  {
LABEL_51:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v60 = swift_bridgeObjectRetain();
    v61 = sub_1D5DAD380(v60);
    result = swift_bridgeObjectRelease_n();
    *a3 = v61;
  }
  return result;
}

uint64_t ClusteringJournal.Inventory.data.getter()
{
  uint64_t *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1D5DB9B24(0, v2, 0);
    v3 = v14;
    v4 = (_OWORD *)(v1 + 48);
    do
    {
      v6 = *((_QWORD *)v4 - 2);
      v5 = *((_QWORD *)v4 - 1);
      v13 = *v4;
      v14 = v3;
      v8 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v3 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
      {
        sub_1D5DB9B24((_QWORD *)(v7 > 1), v8 + 1, 1);
        v3 = v14;
      }
      *(_QWORD *)(v3 + 16) = v8 + 1;
      v9 = v3 + 32 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      *(_OWORD *)(v9 + 48) = v13;
      v4 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v3 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF038);
    v10 = sub_1D5E37710();
  }
  else
  {
    v10 = MEMORY[0x1E0DEE9E0];
  }
  v14 = v10;
  v11 = (_QWORD *)swift_bridgeObjectRetain();
  sub_1D5DB9734(v11, 1, &v14);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1D5DAEABC()
{
  return 1;
}

uint64_t sub_1D5DAEACC()
{
  return 0x736D657469;
}

uint64_t sub_1D5DAEAE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1D5E378FC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D5DAEB6C()
{
  return 0;
}

void sub_1D5DAEB78(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DAEB84()
{
  sub_1D5DB9B40();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DAEBAC()
{
  sub_1D5DB9B40();
  return sub_1D5E37A10();
}

uint64_t ClusteringJournal.Inventory.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF168);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DB9B40();
  sub_1D5E379F8();
  v10[1] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFE0);
  sub_1D5DB9BC8(&qword_1ED9AEFE8, &qword_1ED9AEFE0, (uint64_t (*)(void))sub_1D5DB9B84, MEMORY[0x1E0DEAF10]);
  sub_1D5E3789C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t ClusteringJournal.Inventory.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5918);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DB9B40();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFE0);
    sub_1D5DB9BC8(&qword_1EFFB5920, &qword_1ED9AEFE0, (uint64_t (*)(void))sub_1D5DB9C2C, MEMORY[0x1E0DEAF40]);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *a2 = v11[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DAEE44@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ClusteringJournal.Inventory.init(from:)(a1, a2);
}

uint64_t sub_1D5DAEE58(_QWORD *a1)
{
  return ClusteringJournal.Inventory.encode(to:)(a1);
}

uint64_t ClusteringJournal.Result.Article.articleID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double ClusteringJournal.Result.Article.score.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t sub_1D5DAEEA8()
{
  _BYTE *v0;

  if (*v0)
    return 0x65726F6373;
  else
    return 0x49656C6369747261;
}

uint64_t sub_1D5DAEEE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBC1C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DAEF08()
{
  return 0;
}

void sub_1D5DAEF14(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DAEF20()
{
  sub_1D5DB9C70();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DAEF48()
{
  sub_1D5DB9C70();
  return sub_1D5E37A10();
}

uint64_t ClusteringJournal.Result.Article.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF140);
  v8 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DB9C70();
  sub_1D5E379F8();
  v10 = 0;
  sub_1D5E3786C();
  if (!v1)
  {
    v9 = 1;
    sub_1D5E37884();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v3);
}

uint64_t ClusteringJournal.Result.Article.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5930);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DB9C70();
  sub_1D5E379E0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16[15] = 0;
  v10 = sub_1D5E377A0();
  v12 = v11;
  v16[14] = 1;
  swift_bridgeObjectRetain();
  sub_1D5E377B8();
  v14 = v13;
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  *a2 = v10;
  a2[1] = v12;
  a2[2] = v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5DAF234@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ClusteringJournal.Result.Article.init(from:)(a1, a2);
}

uint64_t sub_1D5DAF248(_QWORD *a1)
{
  return ClusteringJournal.Result.Article.encode(to:)(a1);
}

uint64_t ClusteringJournal.Result.Requirements.bundlePaidQuotas.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  v5 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ClusteringJournal.Result.Requirements.minClusterSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t ClusteringJournal.Result.Requirements.maxClusterSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t ClusteringJournal.Result.Requirements.rules.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DAF2C4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D5DAF2F8 + 4 * byte_1D5E3A560[*v0]))(0xD000000000000010, 0x80000001D5E47D10);
}

uint64_t sub_1D5DAF2F8()
{
  return 0x7473756C436E696DLL;
}

uint64_t sub_1D5DAF328()
{
  return 0x73656C7572;
}

uint64_t sub_1D5DAF33C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBC2B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DAF360()
{
  return 0;
}

void sub_1D5DAF36C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1D5DAF378()
{
  sub_1D5DB9CB4();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DAF3A0()
{
  sub_1D5DB9CB4();
  return sub_1D5E37A10();
}

uint64_t ClusteringJournal.Result.Requirements.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF118);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v10 = *((_OWORD *)v1 + 1);
  v21 = *((_OWORD *)v1 + 2);
  v22 = v10;
  v11 = v1[6];
  v13 = v1[7];
  v12 = v1[8];
  v19 = v1[9];
  v20 = v12;
  v18 = v1[10];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DB9CB4();
  sub_1D5E379F8();
  v24 = v8;
  v25 = v9;
  v26 = v22;
  v27 = v21;
  v28 = v11;
  v29 = v13;
  v30 = 0;
  sub_1D5DAC0EC();
  v14 = v23;
  sub_1D5E3789C();
  if (!v14)
  {
    v15 = v18;
    LOBYTE(v24) = 1;
    sub_1D5E37890();
    LOBYTE(v24) = 2;
    sub_1D5E37890();
    v24 = v15;
    v30 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9ADB90);
    sub_1D5DB9BC8(&qword_1ED9AEFF0, &qword_1ED9ADB90, (uint64_t (*)(void))sub_1D5DB9CF8, MEMORY[0x1E0DEAF10]);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t ClusteringJournal.Result.Requirements.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5938);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DB9CB4();
  sub_1D5E379E0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v31 = 0;
  sub_1D5DAC0A4();
  sub_1D5E377D0();
  v10 = v23;
  v11 = v24;
  v12 = v25;
  v13 = v26;
  v14 = v27;
  v15 = v28;
  v16 = v29;
  v17 = v30;
  LOBYTE(v23) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = sub_1D5E377C4();
  LOBYTE(v23) = 2;
  v21 = sub_1D5E377C4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9ADB90);
  v31 = 3;
  sub_1D5DB9BC8(&qword_1EFFB5940, &qword_1ED9ADB90, (uint64_t (*)(void))sub_1D5DB9D3C, MEMORY[0x1E0DEAF40]);
  sub_1D5E377D0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v19 = v22;
  v20 = v23;
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v12;
  a2[3] = v13;
  a2[4] = v14;
  a2[5] = v15;
  a2[6] = v16;
  a2[7] = v17;
  a2[8] = v19;
  a2[9] = v21;
  a2[10] = v20;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5DAF878@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ClusteringJournal.Result.Requirements.init(from:)(a1, a2);
}

uint64_t sub_1D5DAF88C(_QWORD *a1)
{
  return ClusteringJournal.Result.Requirements.encode(to:)(a1);
}

uint64_t ClusteringJournal.Result.Group.hash(into:)()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16) && *(_BYTE *)(v0 + 16) != 1)
    return sub_1D5E379B0();
  sub_1D5E379B0();
  return sub_1D5E3744C();
}

uint64_t sub_1D5DAF918()
{
  return 1;
}

uint64_t sub_1D5DAF928()
{
  return 0x496C656E6E616863;
}

uint64_t sub_1D5DAF944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x496C656E6E616863 && a2 == 0xE900000000000044)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1D5E378FC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D5DAF9E4()
{
  return 0;
}

void sub_1D5DAF9F0(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DAF9FC()
{
  sub_1D5DBB000();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DAFA24()
{
  sub_1D5DBB000();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DAFA54()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6369706F74;
  if (*v0 != 1)
    v1 = 0x6C656E6E616863;
  if (*v0)
    return v1;
  else
    return 0x59726F4665726F6DLL;
}

uint64_t sub_1D5DAFAB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBC4A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DAFAD4()
{
  return 0;
}

void sub_1D5DAFAE0(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DAFAEC()
{
  sub_1D5DBAFBC();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DAFB14()
{
  sub_1D5DBAFBC();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DAFB3C()
{
  return 0;
}

uint64_t sub_1D5DAFB48()
{
  return 0;
}

void sub_1D5DAFB54(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DAFB60()
{
  sub_1D5DBB088();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DAFB88()
{
  sub_1D5DBB088();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DAFBB0()
{
  return 1;
}

uint64_t sub_1D5DAFBC0()
{
  return 0x44496369706F74;
}

uint64_t sub_1D5DAFBD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x44496369706F74 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1D5E378FC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D5DAFC6C()
{
  return 0;
}

void sub_1D5DAFC78(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DAFC84()
{
  sub_1D5DBB044();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DAFCAC()
{
  sub_1D5DBB044();
  return sub_1D5E37A10();
}

uint64_t ClusteringJournal.Result.Group.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF130);
  v30 = *(_QWORD *)(v3 - 8);
  v31 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v29 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF128);
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF138);
  v25 = *(_QWORD *)(v10 - 8);
  v26 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF120);
  v34 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v1;
  v32 = v1[1];
  v33 = v18;
  v19 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DBAFBC();
  sub_1D5E379F8();
  if (!v19)
  {
    v36 = 1;
    sub_1D5DBB044();
    sub_1D5E37800();
    v22 = v28;
    sub_1D5E3786C();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v17, v14);
  }
  if (v19 == 1)
  {
    v37 = 2;
    sub_1D5DBB000();
    v20 = v29;
    sub_1D5E37800();
    v21 = v31;
    sub_1D5E3786C();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v17, v14);
  }
  v35 = 0;
  sub_1D5DBB088();
  sub_1D5E37800();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v17, v14);
}

uint64_t ClusteringJournal.Result.Group.hashValue.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_1D5E379A4();
  sub_1D5E379B0();
  if (v1 <= 1)
    sub_1D5E3744C();
  return sub_1D5E379C8();
}

uint64_t ClusteringJournal.Result.Group.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;

  v45 = a2;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5950);
  v43 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v3);
  v47 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5958);
  v44 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42, v5);
  v46 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5960);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5968);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v48 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  sub_1D5DBAFBC();
  v18 = v49;
  sub_1D5E379E0();
  if (!v18)
  {
    v40 = v7;
    v19 = v46;
    v20 = v47;
    v49 = v13;
    v21 = sub_1D5E377E8();
    if (*(_QWORD *)(v21 + 16) == 1)
    {
      if (*(_BYTE *)(v21 + 32))
      {
        if (*(_BYTE *)(v21 + 32) == 1)
        {
          v51 = 1;
          sub_1D5DBB044();
          sub_1D5E37728();
          v22 = v12;
          v23 = v42;
          v24 = sub_1D5E377A0();
          v25 = v19;
          v26 = v49;
          v36 = v35;
          (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v23);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v22);
          v37 = 0;
        }
        else
        {
          v52 = 2;
          sub_1D5DBB000();
          v30 = v12;
          sub_1D5E37728();
          v31 = v41;
          v32 = sub_1D5E377A0();
          v33 = v49;
          v24 = v32;
          v36 = v38;
          (*(void (**)(char *, uint64_t))(v43 + 8))(v20, v31);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v30);
          v37 = 1;
        }
      }
      else
      {
        v50 = 0;
        sub_1D5DBB088();
        sub_1D5E37728();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v40);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v12);
        v24 = 0;
        v36 = 0;
        v37 = 2;
      }
      v39 = v45;
      *v45 = v24;
      v39[1] = v36;
      *((_BYTE *)v39 + 16) = v37;
    }
    else
    {
      v27 = sub_1D5E37674();
      swift_allocError();
      v29 = v28;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB52B8);
      *v29 = &type metadata for ClusteringJournal.Result.Group;
      sub_1D5E37734();
      sub_1D5E3765C();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x1E0DEC450], v27);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v12);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
}

uint64_t sub_1D5DB04F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ClusteringJournal.Result.Group.init(from:)(a1, a2);
}

uint64_t sub_1D5DB050C(_QWORD *a1)
{
  return ClusteringJournal.Result.Group.encode(to:)(a1);
}

uint64_t sub_1D5DB0520()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_1D5E379A4();
  sub_1D5E379B0();
  if (v1 <= 1)
    sub_1D5E3744C();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DB05A8()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16) && *(_BYTE *)(v0 + 16) != 1)
    return sub_1D5E379B0();
  sub_1D5E379B0();
  return sub_1D5E3744C();
}

uint64_t sub_1D5DB061C()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_1D5E379A4();
  sub_1D5E379B0();
  if (v1 <= 1)
    sub_1D5E3744C();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DB06AC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DB06DC + 4 * byte_1D5E3A564[*v0]))(0x63696E6167726FLL, 0xE700000000000000);
}

uint64_t sub_1D5DB06DC()
{
  return 0x6465746F6D6F7270;
}

unint64_t sub_1D5DB06F4()
{
  return 0xD000000000000012;
}

unint64_t sub_1D5DB0710()
{
  return 0xD000000000000015;
}

uint64_t sub_1D5DB0730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBC5F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB0754()
{
  return 0;
}

void sub_1D5DB0760(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1D5DB076C()
{
  sub_1D5DBB0CC();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB0794()
{
  sub_1D5DBB0CC();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB07C4()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E49656372756F73;
  else
    return 1953459315;
}

uint64_t sub_1D5DB0800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBC7A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB0824()
{
  return 0;
}

void sub_1D5DB0830(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DB083C()
{
  sub_1D5DBB1DC();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB0864()
{
  sub_1D5DBB1DC();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB0894()
{
  return 0;
}

void sub_1D5DB08A0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DB08AC()
{
  sub_1D5DBB154();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB08D4()
{
  sub_1D5DBB154();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB0904()
{
  return 0;
}

void sub_1D5DB0910(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DB091C()
{
  sub_1D5DBB198();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB0944()
{
  sub_1D5DBB198();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB0974()
{
  return 0;
}

void sub_1D5DB0980(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DB098C()
{
  sub_1D5DBB110();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB09B4()
{
  sub_1D5DBB110();
  return sub_1D5E37A10();
}

void ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF0E0);
  v18[8] = *(_QWORD *)(v3 - 8);
  v18[9] = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v18[7] = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF0D8);
  v18[5] = *(_QWORD *)(v6 - 8);
  v18[6] = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v18[4] = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF0D0);
  v18[2] = *(_QWORD *)(v9 - 8);
  v18[3] = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF0C8);
  v18[1] = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF0C0);
  v14 = *(_QWORD *)(v13 - 8);
  v18[13] = v13;
  v18[14] = v14;
  MEMORY[0x1E0C80A78](v13, v15);
  v16 = *v1;
  v18[10] = v1[1];
  v18[11] = v16;
  v17 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DBB0CC();
  sub_1D5E379F8();
  __asm { BR              X9 }
}

uint64_t sub_1D5DB0BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 82) = 0;
  sub_1D5DBB1DC();
  v4 = *(_QWORD *)(v3 - 104);
  sub_1D5E37800();
  *(_BYTE *)(v3 - 83) = 0;
  v5 = *(_QWORD *)(v3 - 112);
  sub_1D5E37890();
  if (!v5)
  {
    *(_BYTE *)(v3 - 84) = 1;
    sub_1D5E37890();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 200) + 8))(v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 96) + 8))(v0, v4);
}

uint64_t ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD v26[6];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;

  v26[5] = a2;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5978);
  v31 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v3);
  v35 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5980);
  v32 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v5);
  v34 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5988);
  v29 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v33 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5990);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5998);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_1D5DBB0CC();
  v19 = v37;
  sub_1D5E379E0();
  if (!v19)
  {
    v26[2] = v11;
    v26[3] = v10;
    v26[4] = 0;
    v37 = v14;
    v20 = v17;
    v21 = sub_1D5E377E8();
    if (*(_QWORD *)(v21 + 16) == 1)
    {
      v26[1] = v17;
      __asm { BR              X9 }
    }
    v22 = sub_1D5E37674();
    swift_allocError();
    v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB52B8);
    *v24 = &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason;
    sub_1D5E37734();
    sub_1D5E3765C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x1E0DEC450], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v13);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
}

void sub_1D5DB1174()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v3 - 71) = 1;
  sub_1D5DBB198();
  v4 = *(_QWORD *)(v3 - 192);
  sub_1D5E37728();
  if (!v4)
  {
    *(_BYTE *)(v3 - 72) = 0;
    v5 = *(_QWORD *)(v3 - 152);
    v6 = sub_1D5E377C4();
    *(_BYTE *)(v3 - 81) = 1;
    v7 = sub_1D5E377C4();
    v8 = *(_QWORD *)(v3 - 96);
    v9 = v7;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 160) + 8))(v1, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v8 + 8))(*(_QWORD *)(v3 - 216), v2);
    v10 = *(_QWORD *)(v3 - 184);
    *(_QWORD *)v10 = v6;
    *(_QWORD *)(v10 + 8) = v9;
    *(_BYTE *)(v10 + 16) = v0;
    JUMPOUT(0x1D5DB114CLL);
  }
  JUMPOUT(0x1D5DB1130);
}

void sub_1D5DB11C0()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v3 - 68) = 2;
  sub_1D5DBB154();
  v4 = v1;
  v5 = *(_QWORD *)(v3 - 192);
  sub_1D5E37728();
  if (!v5)
  {
    *(_BYTE *)(v3 - 69) = 0;
    v6 = *(_QWORD *)(v3 - 168);
    v7 = sub_1D5E377C4();
    *(_BYTE *)(v3 - 70) = 1;
    v8 = sub_1D5E377C4();
    v9 = *(_QWORD *)(v3 - 96);
    v10 = v8;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 136) + 8))(v4, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v9 + 8))(*(_QWORD *)(v3 - 216), v2);
    v11 = *(_QWORD *)(v3 - 184);
    *(_QWORD *)v11 = v7;
    *(_QWORD *)(v11 + 8) = v10;
    *(_BYTE *)(v11 + 16) = v0;
    JUMPOUT(0x1D5DB114CLL);
  }
  JUMPOUT(0x1D5DB1130);
}

void sub_1D5DB120C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v2 - 65) = 3;
  sub_1D5DBB110();
  v3 = *(_QWORD *)(v2 - 216);
  v4 = *(_QWORD *)(v2 - 192);
  sub_1D5E37728();
  if (v4)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v3, v0);
    JUMPOUT(0x1D5DB114CLL);
  }
  *(_BYTE *)(v2 - 66) = 0;
  v5 = *(_QWORD *)(v2 - 176);
  sub_1D5E377C4();
  *(_BYTE *)(v2 - 67) = 1;
  sub_1D5E377C4();
  v6 = *(_QWORD *)(v2 - 96);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v1, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v2 - 216), v0);
  JUMPOUT(0x1D5DB15CCLL);
}

uint64_t sub_1D5DB15DC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DB1614 + 4 * byte_1D5E3A570[a1]))(0x6565726772657665, 0xE90000000000006ELL);
}

unint64_t sub_1D5DB1614()
{
  return 0xD000000000000011;
}

uint64_t sub_1D5DB1704()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1D5DB171C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.init(from:)(a1, a2);
}

void sub_1D5DB1730(_QWORD *a1)
{
  ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.encode(to:)(a1);
}

uint64_t sub_1D5DB174C()
{
  return 0;
}

void sub_1D5DB1758(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DB1764()
{
  sub_1D5DBB3FC();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB178C()
{
  sub_1D5DBB3FC();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB17BC()
{
  unsigned __int8 *v0;

  return sub_1D5DB15DC(*v0);
}

uint64_t sub_1D5DB17C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBC89C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB17E8()
{
  return 0;
}

void sub_1D5DB17F4(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1D5DB1800()
{
  sub_1D5DBB220();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB1828()
{
  sub_1D5DBB220();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB1850()
{
  return 1;
}

uint64_t sub_1D5DB1860()
{
  return 0x656C6369747261;
}

uint64_t sub_1D5DB1878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656C6369747261 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1D5E378FC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D5DB190C()
{
  return 0;
}

void sub_1D5DB1918(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DB1924()
{
  sub_1D5DBB2EC();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB194C()
{
  sub_1D5DBB2EC();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB197C()
{
  return 0;
}

void sub_1D5DB1988(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DB1994()
{
  sub_1D5DBB50C();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB19BC()
{
  sub_1D5DBB50C();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB19E4()
{
  return 1;
}

unint64_t sub_1D5DB19F4()
{
  return 0xD000000000000011;
}

uint64_t sub_1D5DB1A10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBCD14(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1D5DB1A38()
{
  return 0;
}

void sub_1D5DB1A44(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DB1A50()
{
  sub_1D5DBB4C8();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB1A78()
{
  sub_1D5DBB4C8();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB1AA8()
{
  _BYTE *v0;

  if (*v0)
    return 0x74696D696CLL;
  else
    return 0x656C6369747261;
}

uint64_t sub_1D5DB1AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBCD98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB1B04()
{
  return 0;
}

void sub_1D5DB1B10(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DB1B1C()
{
  sub_1D5DBB330();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB1B44()
{
  sub_1D5DBB330();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB1B74()
{
  return 0;
}

void sub_1D5DB1B80(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DB1B8C()
{
  sub_1D5DBB484();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB1BB4()
{
  sub_1D5DBB484();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB1BE4()
{
  return 0;
}

void sub_1D5DB1BF0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DB1BFC()
{
  sub_1D5DBB440();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB1C24()
{
  sub_1D5DBB440();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB1C54()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x54646574696D696CLL;
  if (*v0 != 1)
    v1 = 0x74696D696CLL;
  if (*v0)
    return v1;
  else
    return 0x656C6369747261;
}

uint64_t sub_1D5DB1CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBCE80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB1CD8()
{
  return 0;
}

void sub_1D5DB1CE4(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DB1CF0()
{
  sub_1D5DBB374();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB1D18()
{
  sub_1D5DBB374();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB1D48()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DB1D78 + 4 * byte_1D5E3A57A[*v0]))(0x656C6369747261, 0xE700000000000000);
}

uint64_t sub_1D5DB1D78()
{
  return 0x6953776F646E6977;
}

uint64_t sub_1D5DB1D94()
{
  return 0x6369706F546C6C61;
}

unint64_t sub_1D5DB1DB8()
{
  return 0xD000000000000012;
}

uint64_t sub_1D5DB1DD4()
{
  return 0x6D69536369706F74;
}

uint64_t sub_1D5DB1DF8()
{
  return 0x6C6F687365726874;
}

uint64_t sub_1D5DB1E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBCFE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB1E38()
{
  return 0;
}

void sub_1D5DB1E44(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1D5DB1E50()
{
  sub_1D5DBB3B8();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB1E78()
{
  sub_1D5DBB3B8();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB1EA8()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F727265;
  else
    return 0x656C6369747261;
}

uint64_t sub_1D5DB1EE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBD2BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB1F04()
{
  return 0;
}

void sub_1D5DB1F10(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DB1F1C()
{
  sub_1D5DBB264();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB1F44()
{
  sub_1D5DBB264();
  return sub_1D5E37A10();
}

void ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[12];
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF080);
  v25[10] = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v3);
  v39 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF0B0);
  v25[5] = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v5);
  v33 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF070);
  v25[9] = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v7);
  v34 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF098);
  v25[4] = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v9);
  v35 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF0A0);
  v25[3] = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42, v11);
  v40 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF528);
  v25[8] = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v13);
  v31 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF0B8);
  v25[7] = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v15);
  v29 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF090);
  v25[6] = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v17);
  v27 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF0A8);
  v25[11] = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v19);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF088);
  MEMORY[0x1E0C80A78](v20, v21);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF078);
  v46 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v22);
  v47 = *v1;
  v23 = v1[2];
  v44 = v1[1];
  v45 = v23;
  v43 = v1[3];
  v25[2] = v1[4];
  v25[1] = v1[5];
  v24 = *((unsigned __int8 *)v1 + 64);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DBB220();
  sub_1D5E379F8();
  __asm { BR              X9 }
}

uint64_t sub_1D5DB2348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v4 - 128) = 0;
  sub_1D5DBB50C();
  v5 = *(_QWORD *)(v4 - 136);
  sub_1D5E37800();
  v6 = *(_QWORD *)(v4 - 176);
  *(_QWORD *)(v4 - 128) = *(_QWORD *)(v4 - 152);
  *(_QWORD *)(v4 - 120) = v6;
  *(_QWORD *)(v4 - 112) = *(_QWORD *)(v4 - 168);
  *(_BYTE *)(v4 - 65) = 0;
  sub_1D5DBB2A8();
  v7 = *(_QWORD *)(v4 - 144);
  sub_1D5E3789C();
  if (!v7)
  {
    *(_BYTE *)(v4 - 128) = 1;
    sub_1D5E37890();
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 160) + 8))(v2, v5);
}

uint64_t ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v40[7];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;

  v64 = a2;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB59C8);
  v49 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56, v3);
  v61 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB59D0);
  v47 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53, v5);
  v60 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB59D8);
  v48 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54, v7);
  v69 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB59E0);
  v63 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v9);
  v68 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB59E8);
  v42 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57, v11);
  v62 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB59F0);
  v46 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67, v13);
  v66 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB59F8);
  v45 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v15);
  v65 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5A00);
  v44 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51, v17);
  v59 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5A08);
  v43 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v19);
  v58 = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5A10);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5A18);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)v40 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = a1[3];
  v70 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v31);
  sub_1D5DBB220();
  v32 = v71;
  sub_1D5E379E0();
  if (!v32)
  {
    v40[5] = v25;
    v40[3] = v22;
    v40[4] = v21;
    v40[6] = 0;
    v41 = v27;
    v71 = v26;
    v33 = sub_1D5E377E8();
    if (*(_QWORD *)(v33 + 16) == 1)
    {
      v34 = *(unsigned __int8 *)(v33 + 32);
      v40[2] = v33;
      v40[1] = v34;
      __asm { BR              X9 }
    }
    v35 = sub_1D5E37674();
    swift_allocError();
    v37 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB52B8);
    *v37 = &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason;
    v38 = v71;
    sub_1D5E37734();
    sub_1D5E3765C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v37, *MEMORY[0x1E0DEC450], v35);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v38);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
}

void sub_1D5DB30EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v1 - 112) = 1;
  sub_1D5DBB4C8();
  v2 = *(_QWORD *)(v1 - 224);
  v3 = *(_QWORD *)(v1 - 120);
  v4 = *(_QWORD *)(v1 - 368);
  sub_1D5E37728();
  if (!v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFC0);
    sub_1D5DB9BC8(&qword_1EFFB5A28, &qword_1ED9AEFC0, (uint64_t (*)(void))sub_1D5DBB550, MEMORY[0x1E0DEAF40]);
    v5 = *(_QWORD *)(v1 - 288);
    sub_1D5E377D0();
    *(_QWORD *)(v1 - 368) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 344) + 8))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 360) + 8))(v0, v3);
    v6 = *(_QWORD *)(v1 - 128);
    v7 = *(_QWORD *)(v1 - 176);
    *(_QWORD *)v7 = *(_QWORD *)(v1 - 112);
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = 0;
    *(_BYTE *)(v7 + 64) = *(_QWORD *)(v1 - 408);
    __swift_destroy_boxed_opaque_existential_1(v6);
    JUMPOUT(0x1D5DB30C8);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x1D5DB30BCLL);
}

void sub_1D5DB3358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_BYTE *)(v1 - 112) = 5;
  sub_1D5DBB3B8();
  v2 = *(_QWORD *)(v1 - 192);
  v3 = *(_QWORD *)(v1 - 120);
  v4 = *(_QWORD *)(v1 - 368);
  sub_1D5E37728();
  if (!v4)
  {
    *(_BYTE *)(v1 - 65) = 0;
    sub_1D5DBB550();
    v5 = *(_QWORD *)(v1 - 232);
    sub_1D5E377D0();
    v6 = v2;
    v7 = *(_QWORD *)(v1 - 112);
    v8 = *(_QWORD *)(v1 - 104);
    v9 = *(_QWORD *)(v1 - 96);
    *(_BYTE *)(v1 - 65) = 1;
    v10 = sub_1D5E377C4();
    *(_QWORD *)(v1 - 160) = v8;
    *(_QWORD *)(v1 - 152) = v10;
    *(_QWORD *)(v1 - 136) = v9;
    *(_BYTE *)(v1 - 65) = 2;
    v11 = sub_1D5E377C4();
    *(_BYTE *)(v1 - 65) = 3;
    v12 = sub_1D5E377C4();
    *(_QWORD *)(v1 - 368) = 0;
    v13 = v12;
    *(_QWORD *)(v1 - 168) = v7;
    *(_BYTE *)(v1 - 65) = 4;
    v14 = *(_QWORD *)(v1 - 368);
    sub_1D5E377B8();
    *(_QWORD *)(v1 - 144) = v15;
    *(_QWORD *)(v1 - 368) = v14;
    if (v14)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 352) + 8))(v6, v5);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 360) + 8))(v0, v3);
    }
    else
    {
      *(_BYTE *)(v1 - 65) = 5;
      v21 = *(_QWORD *)(v1 - 368);
      sub_1D5E377B8();
      *(_QWORD *)(v1 - 184) = v22;
      *(_QWORD *)(v1 - 368) = v21;
      if (!v21)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 - 352) + 8))(*(_QWORD *)(v1 - 192), *(_QWORD *)(v1 - 232));
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 360) + 8))(v0, *(_QWORD *)(v1 - 120));
        v23 = *(_QWORD *)(v1 - 144);
        v24 = *(_QWORD *)(v1 - 184);
        v17 = *(_QWORD *)(v1 - 136);
        v16 = *(_QWORD *)(v1 - 128);
        v18 = *(_QWORD *)(v1 - 176);
        v20 = *(_QWORD *)(v1 - 160);
        v19 = *(_QWORD *)(v1 - 152);
        *(_QWORD *)v18 = *(_QWORD *)(v1 - 168);
        *(_QWORD *)(v18 + 8) = v20;
        *(_QWORD *)(v18 + 16) = v17;
        *(_QWORD *)(v18 + 24) = v19;
        *(_QWORD *)(v18 + 32) = v11;
        *(_QWORD *)(v18 + 40) = v13;
        *(_QWORD *)(v18 + 48) = v23;
        *(_QWORD *)(v18 + 56) = v24;
        *(_BYTE *)(v18 + 64) = *(_QWORD *)(v1 - 408);
        __swift_destroy_boxed_opaque_existential_1(v16);
        JUMPOUT(0x1D5DB30C8);
      }
      swift_bridgeObjectRelease();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 - 352) + 8))(*(_QWORD *)(v1 - 192), *(_QWORD *)(v1 - 232));
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 360) + 8))(v0, *(_QWORD *)(v1 - 120));
    }
    JUMPOUT(0x1D5DB30C4);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x1D5DB30BCLL);
}

void sub_1D5DB33F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v2 - 112) = 6;
  sub_1D5DBB374();
  v3 = *(_QWORD *)(v2 - 120);
  v4 = *(_QWORD *)(v2 - 368);
  sub_1D5E37728();
  if (v4)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x1D5DB30BCLL);
  }
  *(_BYTE *)(v2 - 65) = 0;
  sub_1D5DBB550();
  v5 = *(_QWORD *)(v2 - 248);
  sub_1D5E377D0();
  v6 = *(_QWORD *)(v2 - 360);
  v7 = *(_QWORD *)(v2 - 112);
  v8 = *(_QWORD *)(v2 - 104);
  *(_QWORD *)(v2 - 136) = *(_QWORD *)(v2 - 96);
  *(_BYTE *)(v2 - 65) = 1;
  v9 = sub_1D5E377A0();
  *(_QWORD *)(v2 - 160) = v8;
  *(_QWORD *)(v2 - 152) = v9;
  *(_QWORD *)(v2 - 168) = v7;
  *(_BYTE *)(v2 - 65) = 2;
  sub_1D5E377C4();
  *(_QWORD *)(v2 - 368) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 184) + 8))(v0, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v3);
  JUMPOUT(0x1D5DB3E88);
}

void sub_1D5DB3454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v2 - 112) = 7;
  sub_1D5DBB330();
  v3 = v0;
  v4 = *(_QWORD *)(v2 - 120);
  v5 = *(_QWORD *)(v2 - 368);
  sub_1D5E37728();
  if (!v5)
  {
    *(_BYTE *)(v2 - 65) = 0;
    sub_1D5DBB550();
    v6 = *(_QWORD *)(v2 - 256);
    sub_1D5E377D0();
    v7 = *(_QWORD *)(v2 - 360);
    *(_BYTE *)(v2 - 65) = 1;
    sub_1D5E377C4();
    *(_QWORD *)(v2 - 368) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 304) + 8))(v3, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v4);
    JUMPOUT(0x1D5DB3D60);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x1D5DB3858);
}

void sub_1D5DB34E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v1 - 112) = 8;
  sub_1D5DBB2EC();
  v2 = *(_QWORD *)(v1 - 208);
  v3 = *(_QWORD *)(v1 - 120);
  v4 = *(_QWORD *)(v1 - 368);
  sub_1D5E37728();
  if (!v4)
  {
    sub_1D5DBB550();
    v5 = *(_QWORD *)(v1 - 264);
    sub_1D5E377D0();
    v6 = *(_QWORD *)(v1 - 360);
    *(_QWORD *)(v1 - 368) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 312) + 8))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v3);
    JUMPOUT(0x1D5DB3D68);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x1D5DB3858);
}

void sub_1D5DB3578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  *(_BYTE *)(v1 - 112) = 9;
  sub_1D5DBB264();
  v2 = *(_QWORD *)(v1 - 200);
  v3 = *(_QWORD *)(v1 - 120);
  v4 = *(_QWORD *)(v1 - 368);
  sub_1D5E37728();
  if (v4)
    JUMPOUT(0x1D5DB35C0);
  *(_BYTE *)(v1 - 65) = 0;
  sub_1D5DBB550();
  v5 = *(_QWORD *)(v1 - 240);
  sub_1D5E377D0();
  v6 = *(_QWORD *)(v1 - 360);
  *(_BYTE *)(v1 - 65) = 1;
  v7 = sub_1D5E377A0();
  *(_QWORD *)(v1 - 368) = 0;
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 296) + 8);
  *(_QWORD *)(v1 - 152) = v7;
  v8(v2, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v3);
  JUMPOUT(0x1D5DB3D54);
}

uint64_t sub_1D5DB3F50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.init(from:)(a1, a2);
}

void sub_1D5DB3F64(_QWORD *a1)
{
  ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.encode(to:)(a1);
}

uint64_t sub_1D5DB3F80()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6F73616572;
  else
    return 0x656C6369747261;
}

uint64_t sub_1D5DB3FB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBD3A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB3FDC()
{
  return 0;
}

void sub_1D5DB3FE8(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DB3FF4()
{
  sub_1D5DBB660();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB401C()
{
  sub_1D5DBB660();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB4048()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DB4090()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DB40D0()
{
  _BYTE *v0;

  if (*v0)
    return 0x64657463656A6572;
  else
    return 0x6465747065636361;
}

uint64_t sub_1D5DB4104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBD48C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB4128()
{
  return 0;
}

void sub_1D5DB4134(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DB4140()
{
  sub_1D5DBB594();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB4168()
{
  sub_1D5DBB594();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB4190()
{
  return 1;
}

uint64_t sub_1D5DB41A0()
{
  return 0x6E6F73616572;
}

uint64_t sub_1D5DB41B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1D5E378FC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D5DB4240()
{
  return 0;
}

void sub_1D5DB424C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DB4258()
{
  sub_1D5DBB5D8();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB4280()
{
  sub_1D5DBB5D8();
  return sub_1D5E37A10();
}

uint64_t ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF0F0);
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v30 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF0E8);
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF068);
  v38 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v10);
  v12 = v1[1];
  v35 = *v1;
  v36 = v12;
  v13 = v1[3];
  v37 = v1[2];
  v14 = v1[4];
  v15 = v1[5];
  v29 = v1[6];
  v28 = v1[7];
  v16 = *((char *)v1 + 64);
  v17 = a1[3];
  v18 = a1;
  v19 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v18, v17);
  sub_1D5DBB594();
  sub_1D5E379F8();
  if (v16 < 0)
  {
    LOBYTE(v41) = 1;
    sub_1D5DBB5D8();
    v24 = v30;
    v25 = v40;
    sub_1D5E37800();
    v41 = v35;
    v42 = v36;
    v43 = v37;
    v44 = v13;
    v45 = v14;
    v46 = v15;
    v47 = v29;
    v48 = v28;
    v49 = v16 & 0x7F;
    sub_1D5DBB61C();
    v26 = v32;
    sub_1D5E3789C();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v24, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v19, v25);
  }
  else
  {
    LOBYTE(v41) = 0;
    sub_1D5DBB660();
    v20 = v40;
    sub_1D5E37800();
    v41 = v35;
    v42 = v36;
    v43 = v37;
    v50 = 0;
    sub_1D5DBB2A8();
    v21 = v34;
    v22 = v39;
    sub_1D5E3789C();
    if (!v22)
    {
      v41 = v13;
      v42 = v14;
      LOBYTE(v43) = v15;
      v50 = 1;
      sub_1D5DBB6A4();
      sub_1D5E3789C();
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v19, v20);
  }
}

uint64_t ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  __int128 v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  char v53;

  v38 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5A30);
  v39 = *(_QWORD *)(v3 - 8);
  v40 = (char *)v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v41 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5A38);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5A40);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v42 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_1D5DBB594();
  v17 = v43;
  sub_1D5E379E0();
  if (v17)
    goto LABEL_7;
  v18 = v41;
  v37 = v7;
  v43 = v12;
  v19 = sub_1D5E377E8();
  if (*(_QWORD *)(v19 + 16) != 1)
  {
    v21 = sub_1D5E37674();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB52B8);
    *v23 = &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome;
    sub_1D5E37734();
    sub_1D5E3765C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x1E0DEC450], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v11);
LABEL_7:
    v25 = (uint64_t)v42;
    return __swift_destroy_boxed_opaque_existential_1(v25);
  }
  v20 = v43;
  if ((*(_BYTE *)(v19 + 32) & 1) != 0)
  {
    LOBYTE(v46) = 1;
    sub_1D5DBB5D8();
    sub_1D5E37728();
    sub_1D5DBB6E8();
    v27 = v40;
    sub_1D5E377D0();
    (*(void (**)(char *, char *))(v39 + 8))(v18, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v11);
    v29 = v46;
    v28 = v47;
    v30 = v48;
    v31 = v49;
    v32 = v50;
    v33 = v51;
    v34 = v52 | 0x80;
  }
  else
  {
    v24 = v43;
    LOBYTE(v46) = 0;
    sub_1D5DBB660();
    sub_1D5E37728();
    LOBYTE(v44) = 0;
    sub_1D5DBB550();
    sub_1D5E377D0();
    v40 = v15;
    v41 = (char *)v11;
    v29 = v46;
    v28 = v47;
    v30 = v48;
    v53 = 1;
    sub_1D5DBB72C();
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *))(v24 + 8))(v40, v41);
    v33 = 0;
    v34 = 0;
    v31 = v44;
    v32 = v45;
  }
  v25 = (uint64_t)v42;
  v35 = v38;
  *v38 = v29;
  v35[1] = v28;
  v35[2] = v30;
  *(_OWORD *)(v35 + 3) = v31;
  *(_OWORD *)(v35 + 5) = v32;
  v35[7] = v33;
  *((_BYTE *)v35 + 64) = v34;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

uint64_t sub_1D5DB4A70@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.init(from:)(a1, a2);
}

uint64_t sub_1D5DB4A84(_QWORD *a1)
{
  return ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.encode(to:)(a1);
}

uint64_t sub_1D5DB4AA0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD00000000000001BLL;
  if (*v0 != 1)
    v1 = 0xD00000000000001DLL;
  if (*v0)
    return v1;
  else
    return 0x656E696C64616568;
}

uint64_t sub_1D5DB4B00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBD57C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB4B24()
{
  return 0;
}

void sub_1D5DB4B30(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DB4B3C()
{
  sub_1D5DBB770();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB4B64()
{
  sub_1D5DBB770();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB4B8C()
{
  return 0;
}

uint64_t sub_1D5DB4B98()
{
  return 0;
}

void sub_1D5DB4BA4(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DB4BB0()
{
  sub_1D5DBB7F8();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB4BD8()
{
  sub_1D5DBB7F8();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB4C00()
{
  return 0;
}

uint64_t sub_1D5DB4C0C()
{
  return 0;
}

void sub_1D5DB4C18(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DB4C24()
{
  sub_1D5DBB7B4();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB4C4C()
{
  sub_1D5DBB7B4();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB4C74()
{
  return 1;
}

uint64_t sub_1D5DB4C84()
{
  return 12383;
}

uint64_t sub_1D5DB4C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1D5E378FC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D5DB4D0C()
{
  return 0;
}

void sub_1D5DB4D18(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DB4D24()
{
  sub_1D5DBB83C();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB4D4C()
{
  sub_1D5DBB83C();
  return sub_1D5E37A10();
}

uint64_t ClusteringJournal.Result.ClusteringEvent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF108);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v35 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF100);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF0F8);
  v36 = *(_QWORD *)(v10 - 8);
  v37 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v34 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF060);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v1;
  v32 = v1[1];
  v33 = v18;
  v19 = v1[2];
  v30 = v1[3];
  v31 = v19;
  v29 = v1[4];
  v28 = v1[5];
  v27 = v1[6];
  v26 = v1[7];
  v20 = *((unsigned __int8 *)v1 + 64);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DBB770();
  sub_1D5E379F8();
  if (v20 > 0xEF)
  {
    LOBYTE(v42) = 1;
    sub_1D5DBB7F8();
    sub_1D5E37800();
    v22 = v40;
    v21 = v41;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  if ((v20 & 0xF0) == 0x70)
  {
    LOBYTE(v42) = 2;
    sub_1D5DBB7B4();
    v9 = v35;
    sub_1D5E37800();
    v22 = v38;
    v21 = v39;
    goto LABEL_5;
  }
  LOBYTE(v42) = 0;
  sub_1D5DBB83C();
  v24 = v34;
  sub_1D5E37800();
  v42 = v33;
  v43 = v32;
  v44 = v31;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v27;
  v49 = v26;
  v50 = v20;
  sub_1D5DBB880();
  v25 = v37;
  sub_1D5E3789C();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t ClusteringJournal.Result.ClusteringEvent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  uint64_t v52;

  v42 = a2;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5A60);
  v45 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v3);
  v44 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5A68);
  v39 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v5);
  v43 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5A70);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5A78);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v46 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  sub_1D5DBB770();
  v18 = v52;
  sub_1D5E379E0();
  if (v18)
    goto LABEL_7;
  v37 = v8;
  v38 = v7;
  v20 = v43;
  v19 = v44;
  v21 = v45;
  v52 = v13;
  v22 = sub_1D5E377E8();
  v23 = v12;
  if (*(_QWORD *)(v22 + 16) != 1)
  {
    v25 = sub_1D5E37674();
    swift_allocError();
    v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB52B8);
    *v27 = &type metadata for ClusteringJournal.Result.ClusteringEvent;
    sub_1D5E37734();
    sub_1D5E3765C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC450], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v23);
LABEL_7:
    v28 = (uint64_t)v46;
    return __swift_destroy_boxed_opaque_existential_1(v28);
  }
  v24 = v52;
  if (*(_BYTE *)(v22 + 32))
  {
    if (*(_BYTE *)(v22 + 32) == 1)
    {
      LOBYTE(v47) = 1;
      sub_1D5DBB7F8();
      sub_1D5E37728();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v20, v41);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v23);
      v31 = 0uLL;
      v32 = -16;
    }
    else
    {
      LOBYTE(v47) = 2;
      sub_1D5DBB7B4();
      sub_1D5E37728();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v23);
      v31 = 0uLL;
      v32 = 112;
    }
    v34 = 0uLL;
    v35 = 0uLL;
    v36 = 0uLL;
    v28 = (uint64_t)v46;
    v30 = v42;
  }
  else
  {
    LOBYTE(v47) = 0;
    sub_1D5DBB83C();
    sub_1D5E37728();
    v30 = v42;
    sub_1D5DBB8C4();
    v33 = v38;
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v23);
    v31 = v47;
    v34 = v48;
    v35 = v49;
    v36 = v50;
    v32 = v51;
    v28 = (uint64_t)v46;
  }
  *(_OWORD *)v30 = v31;
  *(_OWORD *)(v30 + 16) = v34;
  *(_OWORD *)(v30 + 32) = v35;
  *(_OWORD *)(v30 + 48) = v36;
  *(_BYTE *)(v30 + 64) = v32;
  return __swift_destroy_boxed_opaque_existential_1(v28);
}

uint64_t sub_1D5DB5558@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ClusteringJournal.Result.ClusteringEvent.init(from:)(a1, a2);
}

uint64_t sub_1D5DB556C(_QWORD *a1)
{
  return ClusteringJournal.Result.ClusteringEvent.encode(to:)(a1);
}

uint64_t sub_1D5DB5588()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000012;
  if (*v0 != 1)
    v1 = 0xD000000000000017;
  if (*v0)
    return v1;
  else
    return 0x73736563637573;
}

uint64_t sub_1D5DB55EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBD6C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB5610()
{
  return 0;
}

void sub_1D5DB561C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DB5628()
{
  sub_1D5DBB908();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB5650()
{
  sub_1D5DBB908();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB5680()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000017;
  if (*v0 != 1)
    v1 = 0x73746E657665;
  if (*v0)
    return v1;
  else
    return 0x536D756D696E696DLL;
}

uint64_t sub_1D5DB56E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBD80C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB5708()
{
  return 0;
}

void sub_1D5DB5714(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DB5720()
{
  sub_1D5DBB9D4();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB5748()
{
  sub_1D5DBB9D4();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB5778()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DB57B0 + 4 * byte_1D5E3A5A8[*v0]))(0x536D756D696E696DLL, 0xEB00000000657A69);
}

unint64_t sub_1D5DB57B0()
{
  return 0xD000000000000017;
}

unint64_t sub_1D5DB57D0()
{
  return 0xD000000000000015;
}

uint64_t sub_1D5DB57EC()
{
  return 0x73746E657665;
}

uint64_t sub_1D5DB5800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBD968(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB5824()
{
  return 0;
}

void sub_1D5DB5830(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1D5DB583C()
{
  sub_1D5DBB94C();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB5864()
{
  sub_1D5DBB94C();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DB588C()
{
  return 1;
}

uint64_t sub_1D5DB5898()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DB58DC()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DB5918()
{
  return 0x73746E657665;
}

uint64_t sub_1D5DB592C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x73746E657665 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1D5E378FC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D5DB59B8()
{
  return 0;
}

void sub_1D5DB59C4(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DB59D0()
{
  sub_1D5DBBA18();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB59F8()
{
  sub_1D5DBBA18();
  return sub_1D5E37A10();
}

uint64_t ClusteringJournal.Result.Outcome.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF160);
  v31 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v3);
  v34 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF158);
  v30 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v5);
  v32 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF150);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF148);
  v36 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v37 = *v1;
  v15 = v1[1];
  v28 = v1[2];
  v29 = v15;
  v27 = v1[3];
  v16 = *((unsigned __int8 *)v1 + 32);
  v17 = a1[3];
  v18 = a1;
  v19 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v18, v17);
  sub_1D5DBB908();
  sub_1D5E379F8();
  if (v16)
  {
    if (v16 == 1)
    {
      LOBYTE(v40) = 1;
      sub_1D5DBB9D4();
      v20 = v32;
      sub_1D5E37800();
      LOBYTE(v40) = 0;
      v21 = v38;
      v22 = v33;
      sub_1D5E37890();
      if (!v21)
      {
        LOBYTE(v40) = 1;
        sub_1D5E37890();
        v40 = v28;
        v39 = 2;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFB0);
        sub_1D5DB9BC8(&qword_1ED9AEFB8, &qword_1ED9AEFB0, (uint64_t (*)(void))sub_1D5DBB990, MEMORY[0x1E0DEAF10]);
        sub_1D5E3789C();
      }
      v25 = v30;
    }
    else
    {
      LOBYTE(v40) = 2;
      sub_1D5DBB94C();
      v20 = v34;
      sub_1D5E37800();
      LOBYTE(v40) = 0;
      v23 = v38;
      v22 = v35;
      sub_1D5E37890();
      if (!v23)
      {
        LOBYTE(v40) = 1;
        sub_1D5E37890();
        LOBYTE(v40) = 2;
        sub_1D5E37890();
        v40 = v27;
        v39 = 3;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFB0);
        sub_1D5DB9BC8(&qword_1ED9AEFB8, &qword_1ED9AEFB0, (uint64_t (*)(void))sub_1D5DBB990, MEMORY[0x1E0DEAF10]);
        sub_1D5E3789C();
      }
      v25 = v31;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v22);
  }
  else
  {
    LOBYTE(v40) = 0;
    sub_1D5DBBA18();
    sub_1D5E37800();
    v40 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFB0);
    sub_1D5DB9BC8(&qword_1ED9AEFB8, &qword_1ED9AEFB0, (uint64_t (*)(void))sub_1D5DBB990, MEMORY[0x1E0DEAF10]);
    sub_1D5E3789C();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v19, v12);
}

uint64_t ClusteringJournal.Result.Outcome.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v48 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5A90);
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v50 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5A98);
  v46 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v6);
  v47 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5AA0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5AA8);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_1D5DBB908();
  v19 = v52;
  sub_1D5E379E0();
  if (v19)
    goto LABEL_7;
  v42 = v9;
  v43 = v8;
  v20 = v49;
  v21 = v50;
  v52 = v14;
  v22 = sub_1D5E377E8();
  if (*(_QWORD *)(v22 + 16) != 1)
  {
    v27 = sub_1D5E37674();
    swift_allocError();
    v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB52B8);
    *v29 = &type metadata for ClusteringJournal.Result.Outcome;
    sub_1D5E37734();
    sub_1D5E3765C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x1E0DEC450], v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v17, v13);
LABEL_7:
    v30 = (uint64_t)v51;
    return __swift_destroy_boxed_opaque_existential_1(v30);
  }
  v41[1] = v22;
  v23 = *(unsigned __int8 *)(v22 + 32);
  if (*(_BYTE *)(v22 + 32))
  {
    if (v23 == 1)
    {
      LOBYTE(v54) = 1;
      sub_1D5DBB9D4();
      sub_1D5E37728();
      v24 = v48;
      LOBYTE(v54) = 0;
      v25 = sub_1D5E377C4();
      v26 = v52;
      v43 = v25;
      LOBYTE(v54) = 1;
      v42 = sub_1D5E377C4();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFB0);
      v53 = 2;
      v38 = v47;
      sub_1D5DB9BC8(&qword_1EFFB5AB0, &qword_1ED9AEFB0, (uint64_t (*)(void))sub_1D5DBBA5C, MEMORY[0x1E0DEAF40]);
      sub_1D5E377D0();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v38, v20);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v13);
      v39 = 0;
      v40 = v54;
    }
    else
    {
      LOBYTE(v54) = 2;
      sub_1D5DBB94C();
      v32 = v21;
      sub_1D5E37728();
      v24 = v48;
      LOBYTE(v54) = 0;
      v36 = sub_1D5E377C4();
      v37 = v52;
      v43 = v36;
      LOBYTE(v54) = 1;
      v42 = sub_1D5E377C4();
      LOBYTE(v54) = 2;
      v40 = sub_1D5E377C4();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFB0);
      v53 = 3;
      sub_1D5DB9BC8(&qword_1EFFB5AB0, &qword_1ED9AEFB0, (uint64_t (*)(void))sub_1D5DBBA5C, MEMORY[0x1E0DEAF40]);
      sub_1D5E377D0();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v45);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v17, v13);
      v39 = v54;
    }
    v30 = (uint64_t)v51;
    v34 = v42;
    v35 = v43;
  }
  else
  {
    LOBYTE(v54) = 0;
    sub_1D5DBBA18();
    sub_1D5E37728();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFB0);
    sub_1D5DB9BC8(&qword_1EFFB5AB0, &qword_1ED9AEFB0, (uint64_t (*)(void))sub_1D5DBBA5C, MEMORY[0x1E0DEAF40]);
    v33 = v43;
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v17, v13);
    v34 = 0;
    v40 = 0;
    v39 = 0;
    v35 = v54;
    v30 = (uint64_t)v51;
    v24 = v48;
  }
  *(_QWORD *)v24 = v35;
  *(_QWORD *)(v24 + 8) = v34;
  *(_QWORD *)(v24 + 16) = v40;
  *(_QWORD *)(v24 + 24) = v39;
  *(_BYTE *)(v24 + 32) = v23;
  return __swift_destroy_boxed_opaque_existential_1(v30);
}

uint64_t sub_1D5DB6584@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ClusteringJournal.Result.Outcome.init(from:)(a1, a2);
}

uint64_t sub_1D5DB6598(_QWORD *a1)
{
  return ClusteringJournal.Result.Outcome.encode(to:)(a1);
}

uint64_t ClusteringJournal.Result.group.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(a1 + 16) = v4;
  return sub_1D5DBBAA0(v2, v3, v4);
}

uint64_t ClusteringJournal.Result.outcome.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_BYTE *)(v1 + 72);
  *(_BYTE *)(a1 + 32) = v6;
  return sub_1D5DBBAB8(v2, v3, v4, v5, v6);
}

uint64_t ClusteringJournal.Result.requirements.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(v1 + 88);
  v3 = *(_QWORD *)(v1 + 128);
  v4 = *(_QWORD *)(v1 + 136);
  v5 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(a1 + 8) = v2;
  v6 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 144);
  *(_QWORD *)(a1 + 80) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ClusteringJournal.Result.candidates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DB6654()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DB6680 + 4 * byte_1D5E3A5AC[*v0]))(0x70756F7267, 0xE500000000000000);
}

uint64_t sub_1D5DB6680()
{
  return 0x656D6F6374756FLL;
}

uint64_t sub_1D5DB6698()
{
  return 0x6D65726975716572;
}

uint64_t sub_1D5DB66B8()
{
  return 0x74616469646E6163;
}

uint64_t sub_1D5DB66D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DBDB20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB66F8()
{
  return 0;
}

void sub_1D5DB6704(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1D5DB6710()
{
  sub_1D5DBBB20();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB6738()
{
  sub_1D5DBBB20();
  return sub_1D5E37A10();
}

uint64_t ClusteringJournal.Result.deinit()
{
  uint64_t v0;

  sub_1D5DBBAE0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  sub_1D5DBBAF8(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ClusteringJournal.Result.__deallocating_deinit()
{
  uint64_t v0;

  sub_1D5DBBAE0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  sub_1D5DBBAF8(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ClusteringJournal.Result.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF110);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DBBB20();
  sub_1D5E379F8();
  v10 = *(_BYTE *)(v3 + 32);
  v19 = *(_OWORD *)(v3 + 16);
  LOBYTE(v20) = v10;
  v26 = 0;
  sub_1D5DBBB64();
  sub_1D5E3789C();
  if (!v2)
  {
    v11 = *(_BYTE *)(v3 + 72);
    v12 = *(_OWORD *)(v3 + 56);
    v19 = *(_OWORD *)(v3 + 40);
    v20 = v12;
    LOBYTE(v21) = v11;
    v26 = 1;
    sub_1D5DBBBA8();
    sub_1D5E3789C();
    v13 = *(_QWORD *)(v3 + 88);
    v14 = *(_QWORD *)(v3 + 128);
    v15 = *(_QWORD *)(v3 + 136);
    v16 = *(_QWORD *)(v3 + 160);
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + 80);
    *((_QWORD *)&v19 + 1) = v13;
    v17 = *(_OWORD *)(v3 + 112);
    v20 = *(_OWORD *)(v3 + 96);
    v21 = v17;
    v22 = v14;
    v23 = v15;
    v24 = *(_OWORD *)(v3 + 144);
    v25 = v16;
    v26 = 2;
    sub_1D5DBBBEC();
    sub_1D5E3789C();
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + 168);
    v26 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEF88);
    sub_1D5DBBC30();
    sub_1D5E37848();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t ClusteringJournal.Result.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  ClusteringJournal.Result.init(from:)(a1);
  return v2;
}

uint64_t ClusteringJournal.Result.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;

  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5AC0);
  v4 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DBBB20();
  sub_1D5E379E0();
  if (v2)
  {
    swift_deallocPartialClassInstance();
  }
  else
  {
    v8 = v4;
    v28 = 0;
    sub_1D5DBBCD4();
    v9 = v20;
    sub_1D5E377D0();
    v10 = v22;
    *(_OWORD *)(v1 + 16) = v21;
    *(_BYTE *)(v1 + 32) = v10;
    v28 = 1;
    sub_1D5DBBD18();
    sub_1D5E377D0();
    v11 = v23;
    v12 = v22;
    *(_OWORD *)(v1 + 40) = v21;
    *(_OWORD *)(v1 + 56) = v12;
    *(_BYTE *)(v1 + 72) = v11;
    v28 = 2;
    sub_1D5DBBD5C();
    sub_1D5E377D0();
    v13 = *((_QWORD *)&v21 + 1);
    v14 = v24;
    v15 = v25;
    v16 = v27;
    *(_QWORD *)(v1 + 80) = v21;
    *(_QWORD *)(v1 + 88) = v13;
    v17 = v23;
    *(_OWORD *)(v1 + 96) = v22;
    *(_OWORD *)(v1 + 112) = v17;
    *(_QWORD *)(v1 + 128) = v14;
    *(_QWORD *)(v1 + 136) = v15;
    *(_OWORD *)(v1 + 144) = v26;
    *(_QWORD *)(v1 + 160) = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEF88);
    v28 = 3;
    sub_1D5DBBDA0();
    sub_1D5E3777C();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v9);
    *(_QWORD *)(v1 + 168) = v21;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

uint64_t sub_1D5DB6DA4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = swift_allocObject();
  result = ClusteringJournal.Result.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1D5DB6DF8(_QWORD *a1)
{
  return ClusteringJournal.Result.encode(to:)(a1);
}

uint64_t ClusteringJournal.inventory.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  *a1 = *(_QWORD *)(v1 + 144);
  return swift_bridgeObjectRetain();
}

uint64_t ClusteringJournal.inventory.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  swift_beginAccess();
  *(_QWORD *)(v1 + 144) = v2;
  return swift_bridgeObjectRelease();
}

uint64_t (*ClusteringJournal.inventory.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess_0;
}

uint64_t ClusteringJournal.results.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ClusteringJournal.results.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 152) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ClusteringJournal.results.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess_0;
}

uint64_t ClusteringJournal.configuration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE __dst[1896];

  v3 = (const void *)(v1 + 160);
  memcpy(__dst, v3, sizeof(__dst));
  memcpy(a1, v3, 0x768uLL);
  return sub_1D5DBBE24((uint64_t)__dst);
}

uint64_t ClusteringJournal.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_date;
  v4 = sub_1D5E37368();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

Swift::Void __swiftcall ClusteringJournal.startedBuildingCandidateGroups()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_mode) != 2)
  {
    swift_beginAccess();
    if (*(_QWORD *)(v0 + 16))
    {
      v1 = qword_1ED9ADAB8[0];
      swift_bridgeObjectRetain();
      if (v1 != -1)
        swift_once();
      v2 = (id)qword_1ED9AEC38;
      sub_1D5E375E4();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
      v3 = swift_allocObject();
      *(_OWORD *)(v3 + 16) = xmmword_1D5E38280;
      type metadata accessor for ClusteringJournal.Result();
      v4 = MEMORY[0x1E0DEA968];
      v5 = sub_1D5E373C8();
      v7 = v6;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v3 + 56) = v4;
      *(_QWORD *)(v3 + 64) = sub_1D5D889BC();
      *(_QWORD *)(v3 + 32) = v5;
      *(_QWORD *)(v3 + 40) = v7;
      sub_1D5E373A4();

    }
    else
    {
      *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9E0];
    }
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall ClusteringJournal.finishedBuildingCandidateGroups(selectedTag:)(Swift::String selectedTag)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_mode);
  if (v2 != 2)
  {
    v3 = v1;
    object = selectedTag._object;
    countAndFlagsBits = selectedTag._countAndFlagsBits;
    v6 = (_QWORD *)(v1 + 16);
    swift_beginAccess();
    v7 = *(_QWORD *)(v1 + 16);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 16);
      swift_bridgeObjectRetain();
      if (v8)
      {
        swift_bridgeObjectRetain();
        v9 = sub_1D5D7FFCC(countAndFlagsBits, (uint64_t)object);
        if ((v10 & 1) != 0)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v9);
          swift_retain();
          swift_bridgeObjectRelease();
          v38 = v6;
          if ((v2 & 1) != 0)
          {
            swift_bridgeObjectRetain();
            v39 = sub_1D5DBDEA0(v7, countAndFlagsBits, (uint64_t)object);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            v39 = 0;
          }
          v20 = *(_QWORD *)(v11 + 16);
          v31 = *(_QWORD *)(v11 + 24);
          v21 = *(_QWORD *)(v11 + 40);
          v22 = *(_QWORD *)(v11 + 56);
          v32 = *(_QWORD *)(v11 + 64);
          v33 = *(_QWORD *)(v11 + 48);
          v23 = *(_QWORD *)(v11 + 80);
          v40 = *(_QWORD *)(v11 + 88);
          v36 = *(_OWORD *)(v11 + 112);
          v37 = *(_OWORD *)(v11 + 96);
          v24 = *(_QWORD *)(v11 + 128);
          v25 = *(_QWORD *)(v11 + 136);
          v26 = *(_QWORD *)(v11 + 160);
          v34 = *(_QWORD *)(v11 + 152);
          v35 = *(_QWORD *)(v11 + 144);
          v27 = *(_BYTE *)(v11 + 32);
          v28 = *(_BYTE *)(v11 + 72);
          type metadata accessor for ClusteringJournal.Result();
          v29 = swift_allocObject();
          *(_QWORD *)(v29 + 16) = v20;
          *(_QWORD *)(v29 + 24) = v31;
          *(_BYTE *)(v29 + 32) = v27;
          *(_QWORD *)(v29 + 40) = v21;
          *(_QWORD *)(v29 + 48) = v33;
          *(_QWORD *)(v29 + 56) = v22;
          *(_QWORD *)(v29 + 64) = v32;
          *(_BYTE *)(v29 + 72) = v28;
          *(_QWORD *)(v29 + 80) = v23;
          *(_QWORD *)(v29 + 88) = v40;
          *(_OWORD *)(v29 + 96) = v37;
          *(_OWORD *)(v29 + 112) = v36;
          *(_QWORD *)(v29 + 128) = v24;
          *(_QWORD *)(v29 + 136) = v25;
          *(_QWORD *)(v29 + 144) = v35;
          *(_QWORD *)(v29 + 152) = v34;
          *(_QWORD *)(v29 + 160) = v26;
          *(_QWORD *)(v29 + 168) = v39;
          swift_beginAccess();
          sub_1D5DBBAA0(v20, v31, v27);
          sub_1D5DBBAB8(v21, v33, v22, v32, v28);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v30 = swift_bridgeObjectRetain();
          MEMORY[0x1D827D094](v30);
          if (*(_QWORD *)((*(_QWORD *)(v3 + 152) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v3 + 152) & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
            sub_1D5E37524();
          sub_1D5E37548();
          sub_1D5E3750C();
          swift_endAccess();
          swift_release();
          *v38 = 0;
          goto LABEL_15;
        }
        swift_bridgeObjectRelease();
      }
      if (qword_1ED9ADAB8[0] != -1)
        swift_once();
      v12 = (id)qword_1ED9AEC38;
      sub_1D5E375E4();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1D5E38FE0;
      v15 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEA968];
      v16 = sub_1D5D889BC();
      *(_QWORD *)(v14 + 64) = v16;
      *(_QWORD *)(v14 + 32) = countAndFlagsBits;
      *(_QWORD *)(v14 + 40) = object;
      type metadata accessor for ClusteringJournal.Result();
      swift_bridgeObjectRetain();
      v17 = sub_1D5E373C8();
      v19 = v18;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v14 + 96) = v15;
      *(_QWORD *)(v14 + 104) = v16;
      *(_QWORD *)(v14 + 72) = v17;
      *(_QWORD *)(v14 + 80) = v19;
    }
    else
    {
      if (qword_1ED9ADAB8[0] != -1)
        swift_once();
      v12 = (id)qword_1ED9AEC38;
      sub_1D5E375E4();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
      v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_1D5E38280;
      *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v13 + 64) = sub_1D5D889BC();
      *(_QWORD *)(v13 + 32) = countAndFlagsBits;
      *(_QWORD *)(v13 + 40) = object;
      swift_bridgeObjectRetain();
    }
    sub_1D5E373A4();

LABEL_15:
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall ClusteringJournal.failedToFindCandidateGroup()()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_mode) != 2)
  {
    swift_beginAccess();
    *(_QWORD *)(v0 + 16) = 0;
    swift_bridgeObjectRelease();
  }
}

uint64_t ClusteringJournal.startedClustering(group:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_mode) != 2)
  {
    v3 = *(_QWORD *)result;
    v2 = *(_QWORD *)(result + 8);
    v4 = *(_BYTE *)(result + 16);
    v6 = *(_QWORD *)(v1 + 24);
    v5 = *(_QWORD *)(v1 + 32);
    v7 = *(unsigned __int8 *)(v1 + 40);
    if (v7 == 255)
    {
      *(_QWORD *)(v1 + 24) = v3;
      *(_QWORD *)(v1 + 32) = v2;
      *(_BYTE *)(v1 + 40) = v4;
      sub_1D5DBBAA0(v3, v2, v4);
      sub_1D5DBE060(v6, v5, 0xFFu);
      *(_QWORD *)(v1 + 48) = MEMORY[0x1E0DEE9D8];
      return swift_bridgeObjectRelease();
    }
    else
    {
      sub_1D5DBBAA0(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
      if (qword_1ED9ADAB8[0] != -1)
        swift_once();
      v11 = (id)qword_1ED9AEC38;
      sub_1D5E375E4();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
      v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_1D5E38FE0;
      sub_1D5E376B0();
      v9 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
      v10 = sub_1D5D889BC();
      *(_QWORD *)(v8 + 64) = v10;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0xE000000000000000;
      sub_1D5E376B0();
      sub_1D5DBE060(v6, v5, v7);
      *(_QWORD *)(v8 + 96) = v9;
      *(_QWORD *)(v8 + 104) = v10;
      *(_QWORD *)(v8 + 72) = 0;
      *(_QWORD *)(v8 + 80) = 0xE000000000000000;
      sub_1D5E373A4();

      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

_QWORD *ClusteringJournal.set(clusteringRequirements:)(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;

  if (*((_BYTE *)v1 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_mode) != 2)
  {
    v2 = result[1];
    v4 = result[2];
    v3 = result[3];
    v6 = result[4];
    v5 = result[5];
    v7 = result[6];
    v8 = result[7];
    v9 = result[8];
    v11 = result[9];
    v10 = result[10];
    v13 = v1[7];
    v12 = v1[8];
    if (v12)
    {
      v14 = qword_1ED9ADAB8[0];
      v15 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v14 != -1)
        swift_once();
      v18 = (id)qword_1ED9AEC38;
      sub_1D5E375E4();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1D5E38FE0;
      sub_1D5E376B0();
      *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEA968];
      v17 = sub_1D5D889BC();
      *(_QWORD *)(v16 + 64) = v17;
      *(_QWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 40) = 0xE000000000000000;
      sub_1D5E376B0();
      sub_1D5DBE074(v13, v15);
      *(_QWORD *)(v16 + 96) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v16 + 104) = v17;
      *(_QWORD *)(v16 + 72) = 0;
      *(_QWORD *)(v16 + 80) = 0xE000000000000000;
      sub_1D5E373A4();

      return (_QWORD *)swift_bridgeObjectRelease();
    }
    else
    {
      v1[7] = *result;
      v1[8] = v2;
      v1[9] = v4;
      v1[10] = v3;
      v1[11] = v6;
      v1[12] = v5;
      v1[13] = v7;
      v1[14] = v8;
      v1[15] = v9;
      v1[16] = v11;
      v1[17] = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return (_QWORD *)sub_1D5DBE074(v13, 0);
    }
  }
  return result;
}

uint64_t ClusteringJournal.record(event:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_mode) != 2)
  {
    v3 = *(_QWORD *)result;
    v2 = *(_QWORD *)(result + 8);
    v5 = *(_QWORD *)(result + 16);
    v4 = *(_QWORD *)(result + 24);
    v7 = *(_QWORD *)(result + 32);
    v6 = *(_QWORD *)(result + 40);
    v8 = *(_BYTE *)(result + 64);
    v9 = *(_QWORD *)(v1 + 48);
    v16 = *(_QWORD *)(result + 48);
    if (v9)
    {
      v15 = *(_QWORD *)(result + 56);
      sub_1D5DBE0B0(v3, v2, v5, v4, v7, v6, *(_QWORD *)(result + 48), v15, v8);
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v1 + 48) = v9;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1D5DAB288(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
        v9 = result;
        *(_QWORD *)(v1 + 48) = result;
      }
      v11 = *(_QWORD *)(v9 + 16);
      v10 = *(_QWORD *)(v9 + 24);
      if (v11 >= v10 >> 1)
      {
        result = (uint64_t)sub_1D5DAB288((char *)(v10 > 1), v11 + 1, 1, (char *)v9);
        v9 = result;
        *(_QWORD *)(v1 + 48) = result;
      }
      *(_QWORD *)(v9 + 16) = v11 + 1;
      v12 = v9 + 72 * v11;
      *(_QWORD *)(v12 + 32) = v3;
      *(_QWORD *)(v12 + 40) = v2;
      *(_QWORD *)(v12 + 48) = v5;
      *(_QWORD *)(v12 + 56) = v4;
      *(_QWORD *)(v12 + 64) = v7;
      *(_QWORD *)(v12 + 72) = v6;
      *(_QWORD *)(v12 + 80) = v16;
      *(_QWORD *)(v12 + 88) = v15;
      *(_BYTE *)(v12 + 96) = v8;
    }
    else
    {
      if (qword_1ED9ADAB8[0] != -1)
        swift_once();
      v13 = (id)qword_1ED9AEC38;
      sub_1D5E375E4();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1D5E38280;
      sub_1D5E376B0();
      *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v14 + 64) = sub_1D5D889BC();
      *(_QWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 40) = 0xE000000000000000;
      sub_1D5E373A4();

      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_1D5DB7D58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_mode) != 2)
  {
    v2 = v1;
    v4 = (_QWORD *)(v1 + 24);
    v3 = *(_QWORD *)(v1 + 24);
    v5 = *(unsigned __int8 *)(v1 + 40);
    if (v5 == 255 || (v7 = *(_QWORD *)(v1 + 64), v6 = (_OWORD *)(v1 + 56), !v7))
    {
      if (qword_1ED9ADAB8 != -1)
        swift_once();
      v61 = (id)qword_1ED9AEC38;
      sub_1D5E375E4();
      sub_1D5E373A4();

    }
    else
    {
      v50 = *(_QWORD *)(a1 + 8);
      v51 = *(_QWORD *)(a1 + 16);
      v52 = *(_QWORD *)(a1 + 24);
      v53 = *(_BYTE *)(a1 + 32);
      v8 = *(_QWORD *)(v1 + 32);
      v47 = *(_QWORD *)a1;
      v48 = *(_QWORD *)(v1 + 80);
      v56 = *(_QWORD *)(v1 + 56);
      v57 = *(_QWORD *)(v1 + 88);
      v58 = *(_QWORD *)(v1 + 96);
      v59 = *(_QWORD *)(v1 + 72);
      v60 = *(id *)(v1 + 104);
      v49 = *(_QWORD *)(v1 + 112);
      v9 = *(_QWORD *)(v1 + 136);
      v54 = *(_QWORD *)(v1 + 128);
      v55 = *(_QWORD *)(v1 + 120);
      v10 = (uint64_t *)(v1 + 16);
      swift_beginAccess();
      v11 = *(_QWORD *)(v1 + 16);
      if (v11)
      {
        if (v5 == 1)
        {
          v20 = *(_QWORD *)(v11 + 16);
          sub_1D5DC2B94(v3, v8, 1u);
          sub_1D5DC2B94(v3, v8, 1u);
          v46 = v9;
          if (v20)
          {
            sub_1D5DC2B94(v3, v8, 1u);
            v22 = v48;
            v21 = v49;
            sub_1D5DC2BA8(v56, v7);
            sub_1D5D7FFCC(v3, v8);
            v24 = v23;
            sub_1D5DBE060(v3, v8, 1u);
            if ((v24 & 1) != 0)
            {
              sub_1D5DBE060(v3, v8, 1u);
              sub_1D5DBE074(v56, v7);
              v17 = v3;
              if (qword_1ED9ADAB8 == -1)
              {
LABEL_22:
                v25 = (id)qword_1ED9AEC38;
                sub_1D5E375E4();
                __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
                v26 = swift_allocObject();
                *(_OWORD *)(v26 + 16) = xmmword_1D5E38280;
                *(_QWORD *)(v26 + 56) = MEMORY[0x1E0DEA968];
                *(_QWORD *)(v26 + 64) = sub_1D5D889BC();
                *(_QWORD *)(v26 + 32) = v17;
                *(_QWORD *)(v26 + 40) = v8;
                sub_1D5E373A4();

                swift_bridgeObjectRelease();
LABEL_38:
                v40 = *(_QWORD *)(v2 + 24);
                v41 = *(_QWORD *)(v2 + 32);
                *v4 = 0;
                v4[1] = 0;
                v42 = *(_BYTE *)(v2 + 40);
                *(_BYTE *)(v2 + 40) = -1;
                sub_1D5DBE060(v40, v41, v42);
                *(_QWORD *)(v2 + 48) = 0;
                swift_bridgeObjectRelease();
                v43 = *(_QWORD *)(v2 + 56);
                v44 = *(_QWORD *)(v2 + 64);
                *v6 = 0u;
                *(_OWORD *)(v2 + 72) = 0u;
                *(_OWORD *)(v2 + 88) = 0u;
                *(_OWORD *)(v2 + 104) = 0u;
                *(_OWORD *)(v2 + 120) = 0u;
                *(_QWORD *)(v2 + 136) = 0;
                sub_1D5DBE074(v43, v44);
                return;
              }
LABEL_40:
              swift_once();
              goto LABEL_22;
            }
          }
          else
          {
            v22 = v48;
            v21 = v49;
            sub_1D5DC2BA8(v56, v7);
          }
          type metadata accessor for ClusteringJournal.Result();
          v33 = swift_allocObject();
          v34 = v21;
          v35 = v33;
          *(_QWORD *)(v33 + 16) = v3;
          *(_QWORD *)(v33 + 24) = v8;
          *(_BYTE *)(v33 + 32) = 1;
          *(_QWORD *)(v33 + 40) = v47;
          *(_QWORD *)(v33 + 48) = v50;
          *(_QWORD *)(v33 + 56) = v51;
          *(_QWORD *)(v33 + 64) = v52;
          *(_BYTE *)(v33 + 72) = v53;
          *(_QWORD *)(v33 + 80) = v56;
          *(_QWORD *)(v33 + 88) = v7;
          *(_QWORD *)(v33 + 96) = v59;
          *(_QWORD *)(v33 + 104) = v22;
          *(_QWORD *)(v33 + 112) = v57;
          *(_QWORD *)(v33 + 120) = v58;
          *(_QWORD *)(v33 + 128) = v60;
          *(_QWORD *)(v33 + 136) = v34;
          *(_QWORD *)(v33 + 144) = v55;
          *(_QWORD *)(v33 + 152) = v54;
          *(_QWORD *)(v33 + 160) = v46;
          *(_QWORD *)(v33 + 168) = 0;
          swift_beginAccess();
          if (*v10)
          {
            sub_1D5DC2B94(v3, v8, 1u);
            sub_1D5DBBAB8(v47, v50, v51, v52, v53);
            swift_retain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v63 = *v10;
            *v10 = 0x8000000000000000;
            sub_1D5D9D6A8(v35, v3, v8, isUniquelyReferenced_nonNull_native);
            *v10 = v63;
            swift_bridgeObjectRelease();
            sub_1D5DBE060(v3, v8, 1u);
            swift_endAccess();
          }
          else
          {
            swift_endAccess();
            sub_1D5DBBAB8(v47, v50, v51, v52, v53);
          }
          swift_release();
          v37 = v3;
          v38 = v8;
          v39 = 1;
LABEL_37:
          sub_1D5DBE060(v37, v38, v39);
          goto LABEL_38;
        }
        if (!v5)
        {
          v12 = *(_QWORD *)(v11 + 16);
          sub_1D5DC2B94(v3, v8, 0);
          sub_1D5DC2B94(v3, v8, 0);
          v45 = v9;
          if (v12)
          {
            sub_1D5DC2B94(v3, v8, 0);
            v14 = v48;
            v13 = v49;
            sub_1D5DC2BA8(v56, v7);
            sub_1D5D7FFCC(v3, v8);
            v16 = v15;
            sub_1D5DBE060(v3, v8, 0);
            if ((v16 & 1) != 0)
            {
              sub_1D5DBE060(v3, v8, 0);
              sub_1D5DBE074(v56, v7);
              v17 = v3;
              if (qword_1ED9ADAB8 == -1)
                goto LABEL_22;
              goto LABEL_40;
            }
          }
          else
          {
            v14 = v48;
            v13 = v49;
            sub_1D5DC2BA8(v56, v7);
          }
          type metadata accessor for ClusteringJournal.Result();
          v29 = swift_allocObject();
          v30 = v13;
          v31 = v29;
          *(_QWORD *)(v29 + 16) = v3;
          *(_QWORD *)(v29 + 24) = v8;
          *(_BYTE *)(v29 + 32) = 0;
          *(_QWORD *)(v29 + 40) = v47;
          *(_QWORD *)(v29 + 48) = v50;
          *(_QWORD *)(v29 + 56) = v51;
          *(_QWORD *)(v29 + 64) = v52;
          *(_BYTE *)(v29 + 72) = v53;
          *(_QWORD *)(v29 + 80) = v56;
          *(_QWORD *)(v29 + 88) = v7;
          *(_QWORD *)(v29 + 96) = v59;
          *(_QWORD *)(v29 + 104) = v14;
          *(_QWORD *)(v29 + 112) = v57;
          *(_QWORD *)(v29 + 120) = v58;
          *(_QWORD *)(v29 + 128) = v60;
          *(_QWORD *)(v29 + 136) = v30;
          *(_QWORD *)(v29 + 144) = v55;
          *(_QWORD *)(v29 + 152) = v54;
          *(_QWORD *)(v29 + 160) = v45;
          *(_QWORD *)(v29 + 168) = 0;
          swift_beginAccess();
          if (*v10)
          {
            sub_1D5DC2B94(v3, v8, 0);
            sub_1D5DBBAB8(v47, v50, v51, v52, v53);
            swift_retain();
            v32 = swift_isUniquelyReferenced_nonNull_native();
            v62 = *v10;
            *v10 = 0x8000000000000000;
            sub_1D5D9D6A8(v31, v3, v8, v32);
            *v10 = v62;
            swift_bridgeObjectRelease();
            sub_1D5DBE060(v3, v8, 0);
            swift_endAccess();
          }
          else
          {
            swift_endAccess();
            sub_1D5DBBAB8(v47, v50, v51, v52, v53);
          }
          swift_release();
          v37 = v3;
          v38 = v8;
          v39 = 0;
          goto LABEL_37;
        }
        sub_1D5DBBAA0(v3, v8, v5);
        if (qword_1ED9ADAB8 == -1)
        {
LABEL_26:
          v27 = (id)qword_1ED9AEC38;
          sub_1D5E375E4();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
          v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = xmmword_1D5E38280;
          sub_1D5E376B0();
          sub_1D5DBE060(v3, v8, v5);
          *(_QWORD *)(v28 + 56) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v28 + 64) = sub_1D5D889BC();
          *(_QWORD *)(v28 + 32) = 0;
          *(_QWORD *)(v28 + 40) = 0xE000000000000000;
          sub_1D5E373A4();

          swift_bridgeObjectRelease();
          return;
        }
LABEL_39:
        swift_once();
        goto LABEL_26;
      }
      if (v5 != 2 || v8 | v3)
      {
        sub_1D5DBBAA0(v3, v8, v5);
        if (qword_1ED9ADAB8 == -1)
          goto LABEL_26;
        goto LABEL_39;
      }
      type metadata accessor for ClusteringJournal.Result();
      v18 = swift_allocObject();
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)(v18 + 24) = 0;
      *(_BYTE *)(v18 + 32) = 2;
      *(_QWORD *)(v18 + 40) = v47;
      *(_QWORD *)(v18 + 48) = v50;
      *(_QWORD *)(v18 + 56) = v51;
      *(_QWORD *)(v18 + 64) = v52;
      *(_BYTE *)(v18 + 72) = v53;
      *(_QWORD *)(v18 + 80) = v56;
      *(_QWORD *)(v18 + 88) = v7;
      *(_QWORD *)(v18 + 96) = v59;
      *(_QWORD *)(v18 + 104) = v48;
      *(_QWORD *)(v18 + 112) = v57;
      *(_QWORD *)(v18 + 120) = v58;
      *(_QWORD *)(v18 + 128) = v60;
      *(_QWORD *)(v18 + 136) = v49;
      *(_QWORD *)(v18 + 144) = v55;
      *(_QWORD *)(v18 + 152) = v54;
      *(_QWORD *)(v18 + 160) = v9;
      *(_QWORD *)(v18 + 168) = 0;
      swift_beginAccess();
      sub_1D5DC2B94(0, 0, 2u);
      sub_1D5DC2B94(0, 0, 2u);
      sub_1D5DC2BA8(v56, v7);
      v19 = sub_1D5DBBAB8(v47, v50, v51, v52, v53);
      MEMORY[0x1D827D094](v19);
      if (*(_QWORD *)((*(_QWORD *)(v2 + 152) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v2 + 152) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        sub_1D5E37524();
      sub_1D5E37548();
      sub_1D5E3750C();
      swift_endAccess();
    }
  }
}

Swift::Void __swiftcall ClusteringJournal.failedClustering(availableHeadlineCount:requiredHeadlineCount:)(Swift::Int availableHeadlineCount, Swift::Int requiredHeadlineCount)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  _QWORD v5[4];
  char v6;

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_mode) != 2)
  {
    v3 = *(_QWORD *)(v2 + 48);
    if (v3)
    {
      v5[0] = requiredHeadlineCount;
      v5[1] = availableHeadlineCount;
      v5[2] = v3;
      v5[3] = 0;
      v6 = 1;
      swift_bridgeObjectRetain();
      sub_1D5DB7D58((uint64_t)v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_1ED9ADAB8 != -1)
        swift_once();
      v4 = (id)qword_1ED9AEC38;
      sub_1D5E375E4();
      sub_1D5E373A4();

    }
  }
}

Swift::Void __swiftcall ClusteringJournal.failedClustering(availableHeadlineCount:rejectedHeadlineCount:requiredHeadlineCount:)(Swift::Int availableHeadlineCount, Swift::Int rejectedHeadlineCount, Swift::Int requiredHeadlineCount)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  char v7;

  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_mode) != 2)
  {
    v4 = *(_QWORD *)(v3 + 48);
    if (v4)
    {
      v6[0] = requiredHeadlineCount;
      v6[1] = availableHeadlineCount;
      v6[2] = rejectedHeadlineCount;
      v6[3] = v4;
      v7 = 2;
      swift_bridgeObjectRetain();
      sub_1D5DB7D58((uint64_t)v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_1ED9ADAB8 != -1)
        swift_once();
      v5 = (id)qword_1ED9AEC38;
      sub_1D5E375E4();
      sub_1D5E373A4();

    }
  }
}

Swift::Void __swiftcall ClusteringJournal.finishedClustering()()
{
  uint64_t v0;
  id v1;
  _QWORD v2[4];
  char v3;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_mode) != 2)
  {
    if (*(_QWORD *)(v0 + 48))
    {
      v2[0] = *(_QWORD *)(v0 + 48);
      memset(&v2[1], 0, 24);
      v3 = 0;
      swift_bridgeObjectRetain();
      sub_1D5DB7D58((uint64_t)v2);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_1ED9ADAB8 != -1)
        swift_once();
      v1 = (id)qword_1ED9AEC38;
      sub_1D5E375E4();
      sub_1D5E373A4();

    }
  }
}

BOOL sub_1D5DB8B18(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D5DB8B30()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DB8B74()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5DB8BA0()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DB8BE0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DB8C10 + 4 * byte_1D5E3A5B0[*v0]))(0x73746C75736572, 0xE700000000000000);
}

uint64_t sub_1D5DB8C10()
{
  return 1702125924;
}

uint64_t sub_1D5DB8C20()
{
  return 0x726F746E65766E69;
}

uint64_t sub_1D5DB8C3C()
{
  return 1701080941;
}

uint64_t sub_1D5DB8C4C()
{
  return 0x72756769666E6F63;
}

uint64_t sub_1D5DB8C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DC2968(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DB8C94()
{
  return 0;
}

void sub_1D5DB8CA0(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1D5DB8CAC()
{
  sub_1D5DBE154();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DB8CD4()
{
  sub_1D5DBE154();
  return sub_1D5E37A10();
}

uint64_t ClusteringJournal.__allocating_init(headlines:tags:mode:configuration:)(uint64_t a1, uint64_t a2, _BYTE *a3, const void *a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  ClusteringJournal.init(headlines:tags:mode:configuration:)(a1, a2, a3, a4);
  return v8;
}

uint64_t ClusteringJournal.init(headlines:tags:mode:configuration:)(uint64_t a1, uint64_t a2, _BYTE *a3, const void *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v15;
  _BYTE v16[1896];

  v9 = sub_1D5E37368();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = &v16[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  LOBYTE(a3) = *a3;
  memcpy(v16, a4, sizeof(v16));
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 40) = -1;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_QWORD *)(v4 + 152) = MEMORY[0x1E0DEE9D8];
  sub_1D5E3735C();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v10 + 32))(v4 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_date, v13, v9);
  sub_1D5DAE388(a1, a2, &v15);
  *(_QWORD *)(v4 + 144) = v15;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_mode) = (_BYTE)a3;
  memcpy((void *)(v4 + 160), v16, 0x768uLL);
  return v4;
}

uint64_t ClusteringJournal.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  ClusteringJournal.init(from:)(a1);
  return v2;
}

uint64_t *ClusteringJournal.init(from:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31[237];
  char v32;
  char v33;
  uint64_t v34;

  v2 = v1;
  v28 = *v2;
  v4 = sub_1D5E37368();
  v26 = *(_QWORD *)(v4 - 8);
  v27 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5AF0);
  v8 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[19] = MEMORY[0x1E0DEE9D8];
  v2[2] = 0;
  v2[3] = 0;
  v2[4] = 0;
  *((_BYTE *)v2 + 40) = -1;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  v12 = a1[3];
  v29 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_1D5DBE154();
  v13 = v30;
  sub_1D5E379E0();
  if (v13)
  {
    v19 = (uint64_t)v29;
    swift_bridgeObjectRelease();
    sub_1D5DBE060(v2[3], v2[4], *((_BYTE *)v2 + 40));
    swift_bridgeObjectRelease();
    sub_1D5DBE074(v2[7], v2[8]);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    v20 = v19;
  }
  else
  {
    v14 = v7;
    v30 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFD0);
    v33 = 0;
    sub_1D5DBE198(&qword_1EFFB5AF8, &qword_1EFFB5AE8, (uint64_t)&protocol conformance descriptor for ClusteringJournal.Result, MEMORY[0x1E0DEAF40]);
    v15 = v25;
    sub_1D5E377D0();
    v16 = v31[0];
    swift_beginAccess();
    v2[19] = v16;
    swift_bridgeObjectRelease();
    LOBYTE(v31[0]) = 1;
    sub_1D5DBE2E8(&qword_1EFFB5150, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
    v17 = v14;
    v18 = v27;
    sub_1D5E377D0();
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))((uint64_t)v2 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_date, v17, v18);
    v32 = 2;
    sub_1D5DBE21C();
    sub_1D5E3777C();
    v22 = v34;
    if (!v34)
    {
      sub_1D5DAE388(MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], v31);
      v22 = v31[0];
    }
    v2[18] = v22;
    LOBYTE(v34) = 3;
    sub_1D5DBE260();
    sub_1D5E3777C();
    v23 = v30;
    v24 = v31[0];
    if (LOBYTE(v31[0]) == 3)
      v24 = 2;
    *((_BYTE *)v2 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_mode) = v24;
    LOBYTE(v34) = 4;
    sub_1D5DBE2A4();
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v15);
    memcpy(v2 + 20, v31, 0x768uLL);
    v20 = (uint64_t)v29;
  }
  __swift_destroy_boxed_opaque_existential_1(v20);
  return v2;
}

uint64_t ClusteringJournal.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[237];
  char v12;
  char v13;
  char v14;
  char v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF040);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DBE154();
  sub_1D5E379F8();
  swift_beginAccess();
  v11[0] = v3[19];
  v12 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFD0);
  sub_1D5DBE198(&qword_1ED9AEFD8, &qword_1ED9AEA10, (uint64_t)&protocol conformance descriptor for ClusteringJournal.Result, MEMORY[0x1E0DEAF10]);
  sub_1D5E3789C();
  if (!v2)
  {
    LOBYTE(v11[0]) = 1;
    sub_1D5E37368();
    sub_1D5DBE2E8(&qword_1ED9AE6B0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    sub_1D5E3789C();
    swift_beginAccess();
    v11[0] = v3[18];
    v15 = 2;
    sub_1D5DBE328();
    sub_1D5E3789C();
    v15 = *((_BYTE *)v3 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_mode);
    v14 = 3;
    sub_1D5DBE36C();
    sub_1D5E3789C();
    memcpy(v11, v3 + 20, sizeof(v11));
    v13 = 4;
    sub_1D5DBE3B0();
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t ClusteringJournal.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE __dst[1904];

  swift_bridgeObjectRelease();
  sub_1D5DBE060(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_1D5DBE074(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(__dst, (const void *)(v0 + 160), 0x768uLL);
  sub_1D5DBE3F4((uint64_t)__dst);
  v1 = v0 + OBJC_IVAR____TtC10XavierNews17ClusteringJournal_date;
  v2 = sub_1D5E37368();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ClusteringJournal.__deallocating_deinit()
{
  ClusteringJournal.deinit();
  return swift_deallocClassInstance();
}

uint64_t *sub_1D5DB96C0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *result;

  v5 = swift_allocObject();
  result = ClusteringJournal.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1D5DB9714(_QWORD *a1)
{
  return ClusteringJournal.encode(to:)(a1);
}

void sub_1D5DB9734(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v8 = a1[4];
  v7 = a1[5];
  v42 = a1[6];
  v41 = a1[7];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  v11 = sub_1D5D7FFCC(v8, v7);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1D5D97F48();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v19 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v20 = (uint64_t *)(v19[6] + 16 * v11);
    *v20 = v8;
    v20[1] = v7;
    v21 = (_QWORD *)(v19[7] + 16 * v11);
    *v21 = v42;
    v21[1] = v41;
    v22 = v19[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v19[2] = v24;
    v25 = v4 - 1;
    if (!v25)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v26 = a1 + 10;
    while (1)
    {
      v28 = *((_QWORD *)v26 - 2);
      v27 = *((_QWORD *)v26 - 1);
      v43 = *v26;
      v29 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      v30 = sub_1D5D7FFCC(v28, v27);
      v32 = v29[2];
      v33 = (v31 & 1) == 0;
      v23 = __OFADD__(v32, v33);
      v34 = v32 + v33;
      if (v23)
        break;
      v35 = v31;
      if (v29[3] < v34)
      {
        sub_1D5D9A878(v34, 1);
        v30 = sub_1D5D7FFCC(v28, v27);
        if ((v35 & 1) != (v36 & 1))
          goto LABEL_25;
      }
      if ((v35 & 1) != 0)
        goto LABEL_10;
      v37 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      v38 = (uint64_t *)(v37[6] + 16 * v30);
      *v38 = v28;
      v38[1] = v27;
      *(_OWORD *)(v37[7] + 16 * v30) = v43;
      v39 = v37[2];
      v23 = __OFADD__(v39, 1);
      v40 = v39 + 1;
      if (v23)
        goto LABEL_24;
      v37[2] = v40;
      v26 += 2;
      if (!--v25)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1D5D9A878(v14, a2 & 1);
  v16 = sub_1D5D7FFCC(v8, v7);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    MEMORY[0x1D827D850](v18);
    __swift_instantiateConcreteTypeFromMangledName(qword_1ED9AD958);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1D5E3795C();
  __break(1u);
LABEL_26:
  sub_1D5E37650();
  sub_1D5E37458();
  sub_1D5E376B0();
  sub_1D5E37458();
  sub_1D5E376E0();
  __break(1u);
}

_QWORD *sub_1D5DB9AD0(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1D5DB9E60(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D5DB9AEC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D5DBA108(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D5DB9B08(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D5DBA208(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1D5DB9B24(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1D5DBA308(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

unint64_t sub_1D5DB9B40()
{
  unint64_t result;

  result = qword_1ED9AEAD8;
  if (!qword_1ED9AEAD8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D684, &type metadata for ClusteringJournal.Inventory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AEAD8);
  }
  return result;
}

unint64_t sub_1D5DB9B84()
{
  unint64_t result;

  result = qword_1ED9AEB08;
  if (!qword_1ED9AEB08)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Inventory.Item, &type metadata for ClusteringJournal.Inventory.Item);
    atomic_store(result, (unint64_t *)&qword_1ED9AEB08);
  }
  return result;
}

uint64_t sub_1D5DB9BC8(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x1D827D8E0](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D5DB9C2C()
{
  unint64_t result;

  result = qword_1EFFB5928;
  if (!qword_1EFFB5928)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Inventory.Item, &type metadata for ClusteringJournal.Inventory.Item);
    atomic_store(result, (unint64_t *)&qword_1EFFB5928);
  }
  return result;
}

unint64_t sub_1D5DB9C70()
{
  unint64_t result;

  result = qword_1ED9AE998;
  if (!qword_1ED9AE998)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D634, &type metadata for ClusteringJournal.Result.Article.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE998);
  }
  return result;
}

unint64_t sub_1D5DB9CB4()
{
  unint64_t result;

  result = qword_1ED9AE918;
  if (!qword_1ED9AE918)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D5E4, &type metadata for ClusteringJournal.Result.Requirements.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE918);
  }
  return result;
}

unint64_t sub_1D5DB9CF8()
{
  unint64_t result;

  result = qword_1ED9AEF20;
  if (!qword_1ED9AEF20)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E44328, &_s22HeadlineClusteringRuleON);
    atomic_store(result, (unint64_t *)&qword_1ED9AEF20);
  }
  return result;
}

unint64_t sub_1D5DB9D3C()
{
  unint64_t result;

  result = qword_1EFFB5948;
  if (!qword_1EFFB5948)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E44300, &_s22HeadlineClusteringRuleON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5948);
  }
  return result;
}

char *sub_1D5DB9D80(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D5DBA428(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D5DB9D9C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D5DBA53C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D5DB9DB8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D5DBA634(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D5DB9DD4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D5DBA74C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D5DB9DF0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D5DBA864(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D5DB9E0C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D5DBA94C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1D5DB9E28(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1D5DBAA60(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1D5DB9E44(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1D5DBAB98(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1D5DB9E60(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5E0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5E8);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

size_t sub_1D5DB9F94(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5490);
  v10 = *(_QWORD *)(type metadata accessor for ReadonlyAggregate(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size_1(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for ReadonlyAggregate(0) - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

char *sub_1D5DBA108(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF868);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1D5DBA208(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF1E8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_1D5DBA308(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF1F8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFA8);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1D5DBA428(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF348);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1D5DBA53C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5D8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1D5DBA634(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF1E0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1D5DBA74C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD7E8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[112 * v8])
      memmove(v12, v13, 112 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1D5DBA864(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF470);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

char *sub_1D5DBA94C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF1F0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_1D5DBAA60(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD950);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD918);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_1D5DBAB98(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1ED9AF538);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF508);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_1D5DBACD0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD948);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD910);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t _s10XavierNews17ClusteringJournalC6ResultC5GroupO2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v9;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v6 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v4 == 1)
    {
      if (v7 == 1)
      {
        if (v3 == v6 && v2 == v5)
          v9 = 1;
        else
          v9 = sub_1D5E378FC();
        sub_1D5DBBAA0(v6, v5, 1u);
        sub_1D5DBBAA0(v3, v2, 1u);
        sub_1D5DBBAE0(v3, v2, 1u);
        v12 = v6;
        v13 = v5;
        v14 = 1;
LABEL_25:
        sub_1D5DBBAE0(v12, v13, v14);
        return v9 & 1;
      }
    }
    else if (v7 == 2 && (v5 | v6) == 0)
    {
      sub_1D5DBBAE0(*(_QWORD *)a1, v2, 2u);
      sub_1D5DBBAE0(0, 0, 2u);
      v9 = 1;
      return v9 & 1;
    }
  }
  else if (!*(_BYTE *)(a2 + 16))
  {
    if (v3 == v6 && v2 == v5)
      v9 = 1;
    else
      v9 = sub_1D5E378FC();
    sub_1D5DBBAA0(v6, v5, 0);
    sub_1D5DBBAA0(v3, v2, 0);
    sub_1D5DBBAE0(v3, v2, 0);
    v12 = v6;
    v13 = v5;
    v14 = 0;
    goto LABEL_25;
  }
  sub_1D5DBBAA0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v7);
  sub_1D5DBBAA0(v3, v2, v4);
  sub_1D5DBBAE0(v3, v2, v4);
  sub_1D5DBBAE0(v6, v5, v7);
  v9 = 0;
  return v9 & 1;
}

unint64_t sub_1D5DBAFBC()
{
  unint64_t result;

  result = qword_1ED9AE938;
  if (!qword_1ED9AE938)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D594, &type metadata for ClusteringJournal.Result.Group.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE938);
  }
  return result;
}

unint64_t sub_1D5DBB000()
{
  unint64_t result;

  result = qword_1ED9AF410;
  if (!qword_1ED9AF410)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D544, &type metadata for ClusteringJournal.Result.Group.ChannelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AF410);
  }
  return result;
}

unint64_t sub_1D5DBB044()
{
  unint64_t result;

  result = qword_1ED9AE950;
  if (!qword_1ED9AE950)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D4F4, &type metadata for ClusteringJournal.Result.Group.TopicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE950);
  }
  return result;
}

unint64_t sub_1D5DBB088()
{
  unint64_t result;

  result = qword_1ED9AE978;
  if (!qword_1ED9AE978)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D4A4, &type metadata for ClusteringJournal.Result.Group.MoreForYouCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE978);
  }
  return result;
}

unint64_t sub_1D5DBB0CC()
{
  unint64_t result;

  result = qword_1ED9AE820;
  if (!qword_1ED9AE820)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D454, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE820);
  }
  return result;
}

unint64_t sub_1D5DBB110()
{
  unint64_t result;

  result = qword_1ED9AD998[0];
  if (!qword_1ED9AD998[0])
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D404, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedNonBundlePaidCodingKeys);
    atomic_store(result, qword_1ED9AD998);
  }
  return result;
}

unint64_t sub_1D5DBB154()
{
  unint64_t result;

  result = qword_1ED9AD990;
  if (!qword_1ED9AD990)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D3B4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedBundlePaidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AD990);
  }
  return result;
}

unint64_t sub_1D5DBB198()
{
  unint64_t result;

  result = qword_1EFFB5970;
  if (!qword_1EFFB5970)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D364, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5970);
  }
  return result;
}

unint64_t sub_1D5DBB1DC()
{
  unint64_t result;

  result = qword_1ED9AE838;
  if (!qword_1ED9AE838)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D314, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.OrganicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE838);
  }
  return result;
}

unint64_t sub_1D5DBB220()
{
  unint64_t result;

  result = qword_1ED9AE760;
  if (!qword_1ED9AE760)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D2C4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE760);
  }
  return result;
}

unint64_t sub_1D5DBB264()
{
  unint64_t result;

  result = qword_1EFFB59A0;
  if (!qword_1EFFB59A0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D274, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB59A0);
  }
  return result;
}

unint64_t sub_1D5DBB2A8()
{
  unint64_t result;

  result = qword_1ED9AE9B0;
  if (!qword_1ED9AE9B0)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.Article, &type metadata for ClusteringJournal.Result.Article);
    atomic_store(result, (unint64_t *)&qword_1ED9AE9B0);
  }
  return result;
}

unint64_t sub_1D5DBB2EC()
{
  unint64_t result;

  result = qword_1ED9AE440;
  if (!qword_1ED9AE440)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D224, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.DuplicateThumbnailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE440);
  }
  return result;
}

unint64_t sub_1D5DBB330()
{
  unint64_t result;

  result = qword_1EFFB59A8;
  if (!qword_1EFFB59A8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D1D4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.HardPaywallNewsPlusArticleLimitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB59A8);
  }
  return result;
}

unint64_t sub_1D5DBB374()
{
  unint64_t result;

  result = qword_1EFFB59B0;
  if (!qword_1EFFB59B0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D184, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.QualitativeTagCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB59B0);
  }
  return result;
}

unint64_t sub_1D5DBB3B8()
{
  unint64_t result;

  result = qword_1EFFB59B8;
  if (!qword_1EFFB59B8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D134, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.TopicDiversityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB59B8);
  }
  return result;
}

unint64_t sub_1D5DBB3FC()
{
  unint64_t result;

  result = qword_1EFFB59C0;
  if (!qword_1EFFB59C0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D0E4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.AigcMaxExceededCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB59C0);
  }
  return result;
}

unint64_t sub_1D5DBB440()
{
  unint64_t result;

  result = qword_1ED9AE800;
  if (!qword_1ED9AE800)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D094, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.PublisherDiversityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE800);
  }
  return result;
}

unint64_t sub_1D5DBB484()
{
  unint64_t result;

  result = qword_1ED9AE7A0;
  if (!qword_1ED9AE7A0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3D044, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.InaccessibleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE7A0);
  }
  return result;
}

unint64_t sub_1D5DBB4C8()
{
  unint64_t result;

  result = qword_1ED9AE7D8;
  if (!qword_1ED9AE7D8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CFF4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.GroupSizeExceededCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE7D8);
  }
  return result;
}

unint64_t sub_1D5DBB50C()
{
  unint64_t result;

  result = qword_1ED9AE788;
  if (!qword_1ED9AE788)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CFA4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.EvergreenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE788);
  }
  return result;
}

unint64_t sub_1D5DBB550()
{
  unint64_t result;

  result = qword_1EFFB5A20;
  if (!qword_1EFFB5A20)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.Article, &type metadata for ClusteringJournal.Result.Article);
    atomic_store(result, (unint64_t *)&qword_1EFFB5A20);
  }
  return result;
}

unint64_t sub_1D5DBB594()
{
  unint64_t result;

  result = qword_1ED9AE738;
  if (!qword_1ED9AE738)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CF54, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE738);
  }
  return result;
}

unint64_t sub_1D5DBB5D8()
{
  unint64_t result;

  result = qword_1ED9AE8A0;
  if (!qword_1ED9AE8A0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CF04, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE8A0);
  }
  return result;
}

unint64_t sub_1D5DBB61C()
{
  unint64_t result;

  result = qword_1ED9AE818;
  if (!qword_1ED9AE818)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason);
    atomic_store(result, (unint64_t *)&qword_1ED9AE818);
  }
  return result;
}

unint64_t sub_1D5DBB660()
{
  unint64_t result;

  result = qword_1ED9AE888;
  if (!qword_1ED9AE888)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CEB4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE888);
  }
  return result;
}

unint64_t sub_1D5DBB6A4()
{
  unint64_t result;

  result = qword_1ED9AE880;
  if (!qword_1ED9AE880)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason);
    atomic_store(result, (unint64_t *)&qword_1ED9AE880);
  }
  return result;
}

unint64_t sub_1D5DBB6E8()
{
  unint64_t result;

  result = qword_1EFFB5A48;
  if (!qword_1EFFB5A48)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason);
    atomic_store(result, (unint64_t *)&qword_1EFFB5A48);
  }
  return result;
}

unint64_t sub_1D5DBB72C()
{
  unint64_t result;

  result = qword_1EFFB5A50;
  if (!qword_1EFFB5A50)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason);
    atomic_store(result, (unint64_t *)&qword_1EFFB5A50);
  }
  return result;
}

unint64_t sub_1D5DBB770()
{
  unint64_t result;

  result = qword_1ED9AE720;
  if (!qword_1ED9AE720)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CE64, &type metadata for ClusteringJournal.Result.ClusteringEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE720);
  }
  return result;
}

unint64_t sub_1D5DBB7B4()
{
  unint64_t result;

  result = qword_1EFFB5A58;
  if (!qword_1EFFB5A58)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CE14, &type metadata for ClusteringJournal.Result.ClusteringEvent.ExhaustedUnpaidBundleHeadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5A58);
  }
  return result;
}

unint64_t sub_1D5DBB7F8()
{
  unint64_t result;

  result = qword_1ED9AE448;
  if (!qword_1ED9AE448)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CDC4, &type metadata for ClusteringJournal.Result.ClusteringEvent.ExhaustedPaidBundleHeadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE448);
  }
  return result;
}

unint64_t sub_1D5DBB83C()
{
  unint64_t result;

  result = qword_1ED9AE8C0;
  if (!qword_1ED9AE8C0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CD74, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE8C0);
  }
  return result;
}

unint64_t sub_1D5DBB880()
{
  unint64_t result;

  result = qword_1ED9AE8B8;
  if (!qword_1ED9AE8B8)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome);
    atomic_store(result, (unint64_t *)&qword_1ED9AE8B8);
  }
  return result;
}

unint64_t sub_1D5DBB8C4()
{
  unint64_t result;

  result = qword_1EFFB5A80;
  if (!qword_1EFFB5A80)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome);
    atomic_store(result, (unint64_t *)&qword_1EFFB5A80);
  }
  return result;
}

unint64_t sub_1D5DBB908()
{
  unint64_t result;

  result = qword_1ED9AE9B8;
  if (!qword_1ED9AE9B8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CD24, &type metadata for ClusteringJournal.Result.Outcome.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE9B8);
  }
  return result;
}

unint64_t sub_1D5DBB94C()
{
  unint64_t result;

  result = qword_1ED9AF418;
  if (!qword_1ED9AF418)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CCD4, &type metadata for ClusteringJournal.Result.Outcome.NotEnoughValidHeadlinesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AF418);
  }
  return result;
}

unint64_t sub_1D5DBB990()
{
  unint64_t result;

  result = qword_1ED9AE8F8;
  if (!qword_1ED9AE8F8)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.ClusteringEvent, &type metadata for ClusteringJournal.Result.ClusteringEvent);
    atomic_store(result, (unint64_t *)&qword_1ED9AE8F8);
  }
  return result;
}

unint64_t sub_1D5DBB9D4()
{
  unint64_t result;

  result = qword_1EFFB5A88;
  if (!qword_1EFFB5A88)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CC84, &type metadata for ClusteringJournal.Result.Outcome.NotEnoughHeadlinesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5A88);
  }
  return result;
}

unint64_t sub_1D5DBBA18()
{
  unint64_t result;

  result = qword_1ED9AE9D0;
  if (!qword_1ED9AE9D0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CC34, &type metadata for ClusteringJournal.Result.Outcome.SuccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE9D0);
  }
  return result;
}

unint64_t sub_1D5DBBA5C()
{
  unint64_t result;

  result = qword_1EFFB5AB8;
  if (!qword_1EFFB5AB8)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.ClusteringEvent, &type metadata for ClusteringJournal.Result.ClusteringEvent);
    atomic_store(result, (unint64_t *)&qword_1EFFB5AB8);
  }
  return result;
}

uint64_t sub_1D5DBBAA0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1D5DBBAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (!a5)
    return swift_bridgeObjectRetain();
  if (a5 == 2)
    return swift_bridgeObjectRetain();
  result = a3;
  if (a5 == 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1D5DBBAE0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1D5DBBAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (!a5)
    return swift_bridgeObjectRelease();
  if (a5 == 2)
    return swift_bridgeObjectRelease();
  result = a3;
  if (a5 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_1D5DBBB20()
{
  unint64_t result;

  result = qword_1ED9AE900;
  if (!qword_1ED9AE900)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CBE4, &type metadata for ClusteringJournal.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE900);
  }
  return result;
}

unint64_t sub_1D5DBBB64()
{
  unint64_t result;

  result = qword_1ED9AE990;
  if (!qword_1ED9AE990)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.Group, &type metadata for ClusteringJournal.Result.Group);
    atomic_store(result, (unint64_t *)&qword_1ED9AE990);
  }
  return result;
}

unint64_t sub_1D5DBBBA8()
{
  unint64_t result;

  result = qword_1ED9AEA08;
  if (!qword_1ED9AEA08)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.Outcome, &type metadata for ClusteringJournal.Result.Outcome);
    atomic_store(result, (unint64_t *)&qword_1ED9AEA08);
  }
  return result;
}

unint64_t sub_1D5DBBBEC()
{
  unint64_t result;

  result = qword_1ED9AE930;
  if (!qword_1ED9AE930)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.Requirements, &type metadata for ClusteringJournal.Result.Requirements);
    atomic_store(result, (unint64_t *)&qword_1ED9AE930);
  }
  return result;
}

unint64_t sub_1D5DBBC30()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1ED9AEF90;
  if (!qword_1ED9AEF90)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED9AEF88);
    v3 = sub_1D5DBE2E8(&qword_1ED9AEA10, v2, (uint64_t (*)(uint64_t))type metadata accessor for ClusteringJournal.Result, (uint64_t)&protocol conformance descriptor for ClusteringJournal.Result);
    v4[0] = MEMORY[0x1E0DEA970];
    v4[1] = v3;
    result = MEMORY[0x1D827D8E0](MEMORY[0x1E0DEA0B8], v1, v4);
    atomic_store(result, (unint64_t *)&qword_1ED9AEF90);
  }
  return result;
}

uint64_t type metadata accessor for ClusteringJournal.Result()
{
  return objc_opt_self();
}

unint64_t sub_1D5DBBCD4()
{
  unint64_t result;

  result = qword_1EFFB5AC8;
  if (!qword_1EFFB5AC8)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.Group, &type metadata for ClusteringJournal.Result.Group);
    atomic_store(result, (unint64_t *)&qword_1EFFB5AC8);
  }
  return result;
}

unint64_t sub_1D5DBBD18()
{
  unint64_t result;

  result = qword_1EFFB5AD0;
  if (!qword_1EFFB5AD0)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.Outcome, &type metadata for ClusteringJournal.Result.Outcome);
    atomic_store(result, (unint64_t *)&qword_1EFFB5AD0);
  }
  return result;
}

unint64_t sub_1D5DBBD5C()
{
  unint64_t result;

  result = qword_1EFFB5AD8;
  if (!qword_1EFFB5AD8)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.Requirements, &type metadata for ClusteringJournal.Result.Requirements);
    atomic_store(result, (unint64_t *)&qword_1EFFB5AD8);
  }
  return result;
}

unint64_t sub_1D5DBBDA0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1EFFB5AE0;
  if (!qword_1EFFB5AE0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED9AEF88);
    v3 = sub_1D5DBE2E8(&qword_1EFFB5AE8, v2, (uint64_t (*)(uint64_t))type metadata accessor for ClusteringJournal.Result, (uint64_t)&protocol conformance descriptor for ClusteringJournal.Result);
    v4[0] = MEMORY[0x1E0DEA9A0];
    v4[1] = v3;
    result = MEMORY[0x1D827D8E0](MEMORY[0x1E0DEA0D8], v1, v4);
    atomic_store(result, (unint64_t *)&qword_1EFFB5AE0);
  }
  return result;
}

uint64_t sub_1D5DBBE24(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D5DBBF0C(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6C616E7265747865 && a2 == 0xE800000000000000;
  if (v3 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C616E7265746E69 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D5DBBFE8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001D5E47CD0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1D5DBC06C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4449676174 && a2 == 0xE500000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E696C64616568 && a2 == 0xE900000000000073 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001D5E47CF0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1D5DBC1C0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49656C6369747261 && a2 == 0xE900000000000044;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D5DBC2B4(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001D5E47D10 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7473756C436E696DLL && a2 == 0xEE00657A69537265 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7473756C4378616DLL && a2 == 0xEE00657A69537265 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73656C7572 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1D5DBC4A0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x59726F4665726F6DLL && a2 == 0xEA0000000000756FLL;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6369706F74 && a2 == 0xE500000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C656E6E616863 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1D5DBC5F8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x63696E6167726FLL && a2 == 0xE700000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465746F6D6F7270 && a2 == 0xE800000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001D5E47D30 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001D5E47D50)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1D5DBC7A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1953459315 && a2 == 0xE400000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E49656372756F73 && a2 == 0xEB00000000786564)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D5DBC89C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6565726772657665 && a2 == 0xE90000000000006ELL;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001D5E47D70 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7373656363616E69 && a2 == 0xEC000000656C6269 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001D5E47D90 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4578614D63676961 && a2 == 0xEF64656465656378 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7669446369706F74 && a2 == 0xEE00797469737265 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x746174696C617571 && a2 == 0xEE00676154657669 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x80000001D5E47DB0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001D5E47DD0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_1D5DBCD14(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001D5E47E10)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1D5DBCD98(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C6369747261 && a2 == 0xE700000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74696D696CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D5DBCE80(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C6369747261 && a2 == 0xE700000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x54646574696D696CLL && a2 == 0xEC00000044496761 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74696D696CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1D5DBCFE4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C6369747261 && a2 == 0xE700000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6953776F646E6977 && a2 == 0xEA0000000000657ALL || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6369706F546C6C61 && a2 == 0xEE00746E756F4373 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001D5E47DF0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D69536369706F74 && a2 == 0xEF79746972616C69 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1D5DBD2BC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C6369747261 && a2 == 0xE700000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D5DBD3A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C6369747261 && a2 == 0xE700000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D5DBD48C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6465747065636361 && a2 == 0xE800000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64657463656A6572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D5DBD57C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656E696C64616568 && a2 == 0xE800000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001D5E47E30 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001D5E47E50)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1D5DBD6C4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73736563637573 && a2 == 0xE700000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001D5E47E70 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001D5E47E90)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1D5DBD80C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x536D756D696E696DLL && a2 == 0xEB00000000657A69;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001D5E47EB0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73746E657665 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1D5DBD968(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x536D756D696E696DLL && a2 == 0xEB00000000657A69;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001D5E47EB0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001D5E47ED0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73746E657665 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1D5DBDB20(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x70756F7267 && a2 == 0xE500000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D6F6374756FLL && a2 == 0xE700000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D65726975716572 && a2 == 0xEC00000073746E65 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74616469646E6163 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1D5DBDCF4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  unint64_t *v24;

  v24 = (unint64_t *)result;
  v8 = 0;
  v9 = 0;
  v10 = a3 + 64;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(a3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (v13)
  {
    v15 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v16 = v15 | (v9 << 6);
LABEL_20:
    v20 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v16);
    result = *v20;
    if (*v20 != a4 || v20[1] != a5)
    {
      result = sub_1D5E378FC();
      if ((result & 1) == 0)
      {
        *(unint64_t *)((char *)v24 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        if (__OFADD__(v8++, 1))
        {
          __break(1u);
          return sub_1D5E259DC(v24, a2, v8, a3);
        }
      }
    }
  }
  v17 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v17 >= v14)
    return sub_1D5E259DC(v24, a2, v8, a3);
  v18 = *(_QWORD *)(v10 + 8 * v17);
  ++v9;
  if (v18)
    goto LABEL_19;
  v9 = v17 + 1;
  if (v17 + 1 >= v14)
    return sub_1D5E259DC(v24, a2, v8, a3);
  v18 = *(_QWORD *)(v10 + 8 * v9);
  if (v18)
    goto LABEL_19;
  v9 = v17 + 2;
  if (v17 + 2 >= v14)
    return sub_1D5E259DC(v24, a2, v8, a3);
  v18 = *(_QWORD *)(v10 + 8 * v9);
  if (v18)
  {
LABEL_19:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v9 << 6);
    goto LABEL_20;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    return sub_1D5E259DC(v24, a2, v8, a3);
  v18 = *(_QWORD *)(v10 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      return sub_1D5E259DC(v24, a2, v8, a3);
    v18 = *(_QWORD *)(v10 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_19;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1D5DBDEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, v12);
    bzero((char *)v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    v13 = sub_1D5DBDCF4((uint64_t)v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a1, a2, a3);
    swift_bridgeObjectRelease();
    if (v3)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v14 = (void *)swift_slowAlloc();
    bzero(v14, v10);
    swift_bridgeObjectRetain();
    v13 = sub_1D5DBDCF4((uint64_t)v14, v9, a1, a2, a3);
    swift_bridgeObjectRelease();
    MEMORY[0x1D827D988](v14, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v13;
}

uint64_t sub_1D5DBE060(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_1D5DBBAE0(a1, a2, a3);
  return a1;
}

uint64_t sub_1D5DBE074(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D5DBE0B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 <= 0xEFu && (a9 & 0xF0) != 0x70)
    return sub_1D5DBE0D4(result, a2, a3, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t sub_1D5DBE0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 < 0)
    return sub_1D5DBE0F0(a1, a2, a3, a4, a5, a6, a7, a8, a9 & 0x7F);
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DBE0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  switch(a9)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
      goto LABEL_3;
    case 6:
    case 9:
      swift_bridgeObjectRetain();
LABEL_3:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1D5DBE154()
{
  unint64_t result;

  result = qword_1ED9AE6C0;
  if (!qword_1ED9AE6C0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CB94, &type metadata for ClusteringJournal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE6C0);
  }
  return result;
}

uint64_t sub_1D5DBE198(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED9AEFD0);
    v11 = sub_1D5DBE2E8(a2, v10, (uint64_t (*)(uint64_t))type metadata accessor for ClusteringJournal.Result, a3);
    result = MEMORY[0x1D827D8E0](a4, v9, &v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D5DBE21C()
{
  unint64_t result;

  result = qword_1EFFB5B00;
  if (!qword_1EFFB5B00)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Inventory, &type metadata for ClusteringJournal.Inventory);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B00);
  }
  return result;
}

unint64_t sub_1D5DBE260()
{
  unint64_t result;

  result = qword_1EFFB5B08;
  if (!qword_1EFFB5B08)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Mode, &type metadata for ClusteringJournal.Mode);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B08);
  }
  return result;
}

unint64_t sub_1D5DBE2A4()
{
  unint64_t result;

  result = qword_1EFFB5B10;
  if (!qword_1EFFB5B10)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3E718, &_s13ConfigurationV23ClusteringConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B10);
  }
  return result;
}

uint64_t sub_1D5DBE2E8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1D827D8E0](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D5DBE328()
{
  unint64_t result;

  result = qword_1ED9AEB10;
  if (!qword_1ED9AEB10)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Inventory, &type metadata for ClusteringJournal.Inventory);
    atomic_store(result, (unint64_t *)&qword_1ED9AEB10);
  }
  return result;
}

unint64_t sub_1D5DBE36C()
{
  unint64_t result;

  result = qword_1ED9AE718;
  if (!qword_1ED9AE718)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Mode, &type metadata for ClusteringJournal.Mode);
    atomic_store(result, (unint64_t *)&qword_1ED9AE718);
  }
  return result;
}

unint64_t sub_1D5DBE3B0()
{
  unint64_t result;

  result = qword_1ED9AE680;
  if (!qword_1ED9AE680)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3E740, &_s13ConfigurationV23ClusteringConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1ED9AE680);
  }
  return result;
}

uint64_t sub_1D5DBE3F4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1D5DBE4E0()
{
  unint64_t result;

  result = qword_1EFFB5B18;
  if (!qword_1EFFB5B18)
  {
    result = MEMORY[0x1D827D8E0](&protocol conformance descriptor for ClusteringJournal.Result.Group, &type metadata for ClusteringJournal.Result.Group);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B18);
  }
  return result;
}

uint64_t sub_1D5DBE524()
{
  return type metadata accessor for ClusteringJournal();
}

uint64_t type metadata accessor for ClusteringJournal()
{
  uint64_t result;

  result = qword_1ED9ADA28;
  if (!qword_1ED9ADA28)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D5DBE568()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D5E37368();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ClusteringJournal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ClusteringJournal.__allocating_init(headlines:tags:mode:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of ClusteringJournal.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t getEnumTagSinglePayload for ClusteringJournal.Mode(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1D5DBE694 + 4 * byte_1D5E3A5BF[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for ClusteringJournal.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D5DBE74C + 4 * byte_1D5E3A5C9[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D5DBE780 + 4 * byte_1D5E3A5C4[v5]))();
}

uint64_t sub_1D5DBE780(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DBE788(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DBE790);
  return result;
}

uint64_t sub_1D5DBE79C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DBE7A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D5DBE7A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DBE7B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DBE7BC(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *sub_1D5DBE7DC(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Mode()
{
  return &type metadata for ClusteringJournal.Mode;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Inventory()
{
  return &type metadata for ClusteringJournal.Inventory;
}

uint64_t initializeWithCopy for ClusteringJournal.Inventory.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ClusteringJournal.Inventory.Item(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for ClusteringJournal.Inventory.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClusteringJournal.Inventory.Item(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusteringJournal.Inventory.Item(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Inventory.Item()
{
  return &type metadata for ClusteringJournal.Inventory.Item;
}

uint64_t method lookup function for ClusteringJournal.Result()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ClusteringJournal.Result.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t destroy for ClusteringJournal.Result.Article()
{
  return swift_bridgeObjectRelease();
}

_QWORD *_s10XavierNews17ClusteringJournalC6ResultC7ArticleVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ClusteringJournal.Result.Article(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for ClusteringJournal.Result.Article(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for ClusteringJournal.Result.Article(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusteringJournal.Result.Article(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Article()
{
  return &type metadata for ClusteringJournal.Result.Article;
}

uint64_t destroy for ClusteringJournal.Result.Requirements()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClusteringJournal.Result.Requirements(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ClusteringJournal.Result.Requirements(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ClusteringJournal.Result.Requirements(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClusteringJournal.Result.Requirements(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusteringJournal.Result.Requirements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Requirements()
{
  return &type metadata for ClusteringJournal.Result.Requirements;
}

uint64_t destroy for ClusteringJournal.Result.Group(uint64_t a1)
{
  return sub_1D5DBBAE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s10XavierNews17ClusteringJournalC6ResultC5GroupOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1D5DBBAA0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ClusteringJournal.Result.Group(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1D5DBBAA0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1D5DBBAE0(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ClusteringJournal.Result.Group(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1D5DBBAE0(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClusteringJournal.Result.Group(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusteringJournal.Result.Group(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1D5DBEF38(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1D5DBEF54(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Group()
{
  return &type metadata for ClusteringJournal.Result.Group;
}

uint64_t destroy for ClusteringJournal.Result.ClusteringEvent(uint64_t result)
{
  if ((*(_BYTE *)(result + 64) & 0x70) == 0)
    return sub_1D5DBEFBC(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), *(_QWORD *)(result + 24), *(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), *(_BYTE *)(result + 64));
  return result;
}

uint64_t sub_1D5DBEFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 < 0)
    return sub_1D5DBEFD8(a1, a2, a3, a4, a5, a6, a7, a8, a9 & 0x7F);
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_1D5DBEFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  switch(a9)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
      goto LABEL_3;
    case 6:
    case 9:
      swift_bridgeObjectRelease();
LABEL_3:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for ClusteringJournal.Result.ClusteringEvent(uint64_t a1, uint64_t *a2)
{
  char v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_BYTE *)a2 + 64);
  if ((v3 & 0x70) != 0)
  {
    v4 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v4;
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[4];
    v11 = a2[5];
    v12 = a2[6];
    v13 = a2[7];
    sub_1D5DBE0D4(*a2, v7, v8, v9, v10, v11, v12, v13, v3);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v13;
    *(_BYTE *)(a1 + 64) = v3;
  }
  return a1;
}

uint64_t assignWithCopy for ClusteringJournal.Result.ClusteringEvent(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v4 = *(_BYTE *)(a2 + 64);
  if ((*(_BYTE *)(a1 + 64) & 0x70) == 0)
  {
    if ((v4 & 0x70) == 0)
    {
      v17 = *(_QWORD *)a2;
      v18 = *(_QWORD *)(a2 + 8);
      v19 = *(_QWORD *)(a2 + 16);
      v20 = *(_QWORD *)(a2 + 24);
      v21 = *(_QWORD *)(a2 + 32);
      v22 = *(_QWORD *)(a2 + 40);
      v24 = *(_QWORD *)(a2 + 48);
      v23 = *(_QWORD *)(a2 + 56);
      sub_1D5DBE0D4(*(_QWORD *)a2, v18, v19, v20, v21, v22, v24, v23, v4);
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD *)(a1 + 8);
      v27 = *(_QWORD *)(a1 + 16);
      v28 = *(_QWORD *)(a1 + 24);
      v29 = *(_QWORD *)(a1 + 32);
      v30 = *(_QWORD *)(a1 + 40);
      v31 = *(_QWORD *)(a1 + 48);
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_BYTE *)(a1 + 64);
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v18;
      *(_QWORD *)(a1 + 16) = v19;
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v21;
      *(_QWORD *)(a1 + 40) = v22;
      *(_QWORD *)(a1 + 48) = v24;
      *(_QWORD *)(a1 + 56) = v23;
      *(_BYTE *)(a1 + 64) = v4;
      sub_1D5DBEFBC(v25, v26, v27, v28, v29, v30, v31, v32, v33);
      return a1;
    }
    sub_1D5DBEFBC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
    goto LABEL_6;
  }
  if ((v4 & 0x70) != 0)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v13 = *(_OWORD *)(a2 + 16);
    v14 = *(_OWORD *)(a2 + 32);
    v15 = *(_OWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 16) = v13;
    return a1;
  }
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  sub_1D5DBE0D4(*(_QWORD *)a2, v6, v7, v8, v9, v10, v12, v11, v4);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v4;
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ClusteringJournal.Result.ClusteringEvent(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_BYTE *)(a1 + 64);
  if ((v4 & 0x70) == 0)
  {
    v5 = *(_BYTE *)(a2 + 64);
    if ((v5 & 0x70) == 0)
    {
      v9 = *(_QWORD *)a1;
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 16);
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_QWORD *)(a1 + 40);
      v15 = *(_QWORD *)(a1 + 48);
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
      v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v18;
      *(_BYTE *)(a1 + 64) = v5;
      sub_1D5DBEFBC(v9, v10, v11, v12, v13, v14, v15, v16, v4);
      return a1;
    }
    sub_1D5DBEFBC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v4);
  }
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for ClusteringJournal.Result.ClusteringEvent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 13);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (((v3 >> 3) & 0xE) != 0)
    v4 = 16 - ((v3 >> 3) & 0xE | (v3 >> 7));
  else
    v4 = 0;
  if (v4 >= 3)
    return v4 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ClusteringJournal.Result.ClusteringEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_BYTE *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 64) = (8 * (14 - a2)) & 0xF0 | ((14 - (_BYTE)a2) << 7);
    }
  }
  return result;
}

uint64_t sub_1D5DBF3E0(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 64);
  if (((v1 >> 3) & 0xE) != 0)
    return 16 - ((v1 >> 3) & 0xE | (v1 >> 7));
  else
    return 0;
}

double sub_1D5DBF408(uint64_t a1, unsigned int a2)
{
  double result;

  if (a2 > 0xE)
  {
    *(_QWORD *)(a1 + 56) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 64) = 0;
    *(_QWORD *)a1 = a2 - 15;
  }
  else if (a2)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 64) = 16 * (((-a2 >> 1) & 7) - 8 * a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent;
}

uint64_t destroy for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome(uint64_t a1, uint64_t a2)
{
  return sub_1D5DBF694(a1, a2, sub_1D5DBEFBC);
}

uint64_t initializeWithCopy for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1D5DBF6DC(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_1D5DBE0D4);
}

uint64_t *assignWithCopy for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1D5DBF78C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_1D5DBE0D4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))sub_1D5DBEFBC);
}

uint64_t *assignWithTake for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1D5DBF858(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_1D5DBEFBC);
}

uint64_t getEnumTagSinglePayload for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 15);
  v3 = ((*(unsigned __int8 *)(a1 + 64) >> 3) & 0xE | (*(unsigned __int8 *)(a1 + 64) >> 7)) ^ 0xF;
  if (v3 >= 0xE)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 15;
    if (a3 >= 0xF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 64) = 16 * (((-a2 >> 1) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t sub_1D5DBF568(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64) >> 7;
}

uint64_t sub_1D5DBF574(uint64_t result)
{
  *(_BYTE *)(result + 64) &= ~0x80u;
  return result;
}

uint64_t sub_1D5DBF584(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = *(_BYTE *)(result + 64) & 0xF | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome;
}

uint64_t getEnumTagSinglePayload for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1D5DBF634(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1D5DBF640(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason;
}

uint64_t initializeBufferWithCopyOfBuffer for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason(uint64_t a1, uint64_t a2)
{
  return sub_1D5DBF694(a1, a2, sub_1D5DBEFD8);
}

uint64_t sub_1D5DBF694(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 64);
  return a3(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v4);
}

uint64_t initializeWithCopy for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1D5DBF6DC(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_1D5DBE0F0);
}

uint64_t sub_1D5DBF6DC(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  v12 = a2[7];
  v13 = *((_BYTE *)a2 + 64);
  a4(*a2, v6, v7, v8, v9, v10, v11, v12, v13);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  *(_BYTE *)(a1 + 64) = v13;
  return a1;
}

uint64_t *assignWithCopy for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1D5DBF78C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_1D5DBE0F0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))sub_1D5DBEFD8);
}

uint64_t *sub_1D5DBF78C(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v25;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  v13 = a2[7];
  v14 = *((_BYTE *)a2 + 64);
  a4(*a2, v7, v8, v9, v10, v11, v12, v13, v14);
  v15 = *a1;
  v16 = a1[1];
  v17 = a1[2];
  v18 = a1[3];
  v19 = a1[4];
  v20 = a1[5];
  v21 = a1[6];
  v22 = a1[7];
  v23 = *((_BYTE *)a1 + 64);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  a1[7] = v13;
  *((_BYTE *)a1 + 64) = v14;
  LOBYTE(v25) = v23;
  a5(v15, v16, v17, v18, v19, v20, v21, v22, v25);
  return a1;
}

uint64_t *assignWithTake for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1D5DBF858(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_1D5DBEFD8);
}

uint64_t *sub_1D5DBF858(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  char v19;

  v6 = *(_BYTE *)(a2 + 64);
  v7 = *a1;
  v9 = a1[1];
  v8 = a1[2];
  v10 = a1[3];
  v11 = a1[4];
  v12 = a1[5];
  v13 = a1[6];
  v14 = a1[7];
  v15 = *((_BYTE *)a1 + 64);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v17;
  *((_BYTE *)a1 + 64) = v6;
  v19 = v15;
  a4(v7, v9, v8, v10, v11, v12, v13, v14, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF7 && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 247);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 9)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 247;
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t sub_1D5DBF960(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t sub_1D5DBF96C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason;
}

uint64_t destroy for ClusteringJournal.Result.Outcome(uint64_t a1)
{
  return sub_1D5DBBAF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for ClusteringJournal.Result.Outcome(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1D5DBBAB8(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for ClusteringJournal.Result.Outcome(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1D5DBBAB8(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1D5DBBAF8(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ClusteringJournal.Result.Outcome(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_1D5DBBAF8(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClusteringJournal.Result.Outcome(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusteringJournal.Result.Outcome(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1D5DBFB54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1D5DBFB60(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Outcome()
{
  return &type metadata for ClusteringJournal.Result.Outcome;
}

uint64_t getEnumTagSinglePayload for ClusteringJournal.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusteringJournal.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1D5DBFC54 + 4 * byte_1D5E3A5DD[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1D5DBFC88 + 4 * byte_1D5E3A5D8[v4]))();
}

uint64_t sub_1D5DBFC88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DBFC90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DBFC98);
  return result;
}

uint64_t sub_1D5DBFCA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DBFCACLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1D5DBFCB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DBFCB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DBFCC4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D5DBFCD0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.CodingKeys()
{
  return &type metadata for ClusteringJournal.CodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.CodingKeys()
{
  return &type metadata for ClusteringJournal.Result.CodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Outcome.CodingKeys()
{
  return &type metadata for ClusteringJournal.Result.Outcome.CodingKeys;
}

uint64_t sub_1D5DBFD2C()
{
  return 0;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Outcome.SuccessCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.Outcome.SuccessCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Outcome.NotEnoughHeadlinesCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.Outcome.NotEnoughHeadlinesCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Outcome.NotEnoughValidHeadlinesCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.Outcome.NotEnoughValidHeadlinesCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.CodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.CodingKeys;
}

uint64_t sub_1D5DBFDA8()
{
  return 0;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.ExhaustedPaidBundleHeadlineCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.ExhaustedPaidBundleHeadlineCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.ExhaustedUnpaidBundleHeadlineCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.ExhaustedUnpaidBundleHeadlineCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.CodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.CodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptedCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptedCodingKeys;
}

uint64_t sub_1D5DBFE28()
{
  return 0;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectedCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectedCodingKeys;
}

uint64_t getEnumTagSinglePayload for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1D5DBFF24 + 4 * byte_1D5E3A5E7[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1D5DBFF58 + 4 * byte_1D5E3A5E2[v4]))();
}

uint64_t sub_1D5DBFF58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DBFF60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DBFF68);
  return result;
}

uint64_t sub_1D5DBFF74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DBFF7CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1D5DBFF80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DBFF88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.CodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.CodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.EvergreenCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.EvergreenCodingKeys;
}

uint64_t sub_1D5DBFFCC()
{
  return 0;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.GroupSizeExceededCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.GroupSizeExceededCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.InaccessibleCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.InaccessibleCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.PublisherDiversityCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.PublisherDiversityCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.AigcMaxExceededCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.AigcMaxExceededCodingKeys;
}

uint64_t getEnumTagSinglePayload for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.TopicDiversityCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.TopicDiversityCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1D5DC011C + 4 * byte_1D5E3A5F1[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1D5DC0150 + 4 * byte_1D5E3A5EC[v4]))();
}

uint64_t sub_1D5DC0150(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DC0158(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DC0160);
  return result;
}

uint64_t sub_1D5DC016C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DC0174);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1D5DC0178(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DC0180(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.TopicDiversityCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.TopicDiversityCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.QualitativeTagCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.QualitativeTagCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.HardPaywallNewsPlusArticleLimitCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.HardPaywallNewsPlusArticleLimitCodingKeys;
}

uint64_t sub_1D5DC01E0()
{
  return 0;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.DuplicateThumbnailCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.DuplicateThumbnailCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.UnknownCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.UnknownCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.CodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.CodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.OrganicCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.OrganicCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedBundlePaidCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedBundlePaidCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedNonBundlePaidCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedNonBundlePaidCodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Group.CodingKeys()
{
  return &type metadata for ClusteringJournal.Result.Group.CodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Group.MoreForYouCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.Group.MoreForYouCodingKeys;
}

uint64_t sub_1D5DC02DC()
{
  return 0;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Group.TopicCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.Group.TopicCodingKeys;
}

uint64_t sub_1D5DC0304()
{
  return 0;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Group.ChannelCodingKeys()
{
  return &type metadata for ClusteringJournal.Result.Group.ChannelCodingKeys;
}

uint64_t _s10XavierNews17ClusteringJournalC6ResultC10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10XavierNews17ClusteringJournalC6ResultC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1D5DC0408 + 4 * byte_1D5E3A5FB[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1D5DC043C + 4 * byte_1D5E3A5F6[v4]))();
}

uint64_t sub_1D5DC043C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DC0444(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DC044CLL);
  return result;
}

uint64_t sub_1D5DC0458(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DC0460);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1D5DC0464(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DC046C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Requirements.CodingKeys()
{
  return &type metadata for ClusteringJournal.Result.Requirements.CodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Result.Article.CodingKeys()
{
  return &type metadata for ClusteringJournal.Result.Article.CodingKeys;
}

uint64_t sub_1D5DC04B0()
{
  return 0;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Inventory.CodingKeys()
{
  return &type metadata for ClusteringJournal.Inventory.CodingKeys;
}

uint64_t _s10XavierNews17ClusteringJournalC6ResultC7OutcomeO10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10XavierNews17ClusteringJournalC6ResultC7OutcomeO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D5DC05B4 + 4 * byte_1D5E3A605[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D5DC05E8 + 4 * byte_1D5E3A600[v4]))();
}

uint64_t sub_1D5DC05E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DC05F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DC05F8);
  return result;
}

uint64_t sub_1D5DC0604(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DC060CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D5DC0610(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DC0618(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Inventory.Item.CodingKeys()
{
  return &type metadata for ClusteringJournal.Inventory.Item.CodingKeys;
}

uint64_t _s10XavierNews17ClusteringJournalC6ResultC15ClusteringEventO15HeadlineOutcomeO10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10XavierNews17ClusteringJournalC6ResultC15ClusteringEventO15HeadlineOutcomeO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D5DC071C + 4 * byte_1D5E3A60F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D5DC0750 + 4 * byte_1D5E3A60A[v4]))();
}

uint64_t sub_1D5DC0750(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DC0758(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5DC0760);
  return result;
}

uint64_t sub_1D5DC076C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5DC0774);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D5DC0778(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DC0780(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5DC078C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D5DC0798(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Mode.CodingKeys()
{
  return &type metadata for ClusteringJournal.Mode.CodingKeys;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Mode.ExternalCodingKeys()
{
  return &type metadata for ClusteringJournal.Mode.ExternalCodingKeys;
}

uint64_t _s10XavierNews17ClusteringJournalC6ResultC7OutcomeO17SuccessCodingKeysOwet_0(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s10XavierNews17ClusteringJournalC6ResultC7OutcomeO17SuccessCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D5DC085C + 4 * byte_1D5E3A614[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D5DC087C + 4 * byte_1D5E3A619[v4]))();
}

_BYTE *sub_1D5DC085C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D5DC087C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D5DC0884(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D5DC088C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D5DC0894(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D5DC089C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1D5DC08A8()
{
  return 0;
}

ValueMetadata *type metadata accessor for ClusteringJournal.Mode.InternalCodingKeys()
{
  return &type metadata for ClusteringJournal.Mode.InternalCodingKeys;
}

unint64_t sub_1D5DC08CC()
{
  unint64_t result;

  result = qword_1EFFB5B20;
  if (!qword_1EFFB5B20)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B104, &type metadata for ClusteringJournal.Mode.InternalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B20);
  }
  return result;
}

unint64_t sub_1D5DC0914()
{
  unint64_t result;

  result = qword_1EFFB5B28;
  if (!qword_1EFFB5B28)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B20C, &type metadata for ClusteringJournal.Mode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B28);
  }
  return result;
}

unint64_t sub_1D5DC095C()
{
  unint64_t result;

  result = qword_1EFFB5B30;
  if (!qword_1EFFB5B30)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B2C4, &type metadata for ClusteringJournal.Inventory.Item.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B30);
  }
  return result;
}

unint64_t sub_1D5DC09A4()
{
  unint64_t result;

  result = qword_1EFFB5B38;
  if (!qword_1EFFB5B38)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B37C, &type metadata for ClusteringJournal.Inventory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B38);
  }
  return result;
}

unint64_t sub_1D5DC09EC()
{
  unint64_t result;

  result = qword_1EFFB5B40;
  if (!qword_1EFFB5B40)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B434, &type metadata for ClusteringJournal.Result.Article.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B40);
  }
  return result;
}

unint64_t sub_1D5DC0A34()
{
  unint64_t result;

  result = qword_1EFFB5B48;
  if (!qword_1EFFB5B48)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B4EC, &type metadata for ClusteringJournal.Result.Requirements.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B48);
  }
  return result;
}

unint64_t sub_1D5DC0A7C()
{
  unint64_t result;

  result = qword_1EFFB5B50;
  if (!qword_1EFFB5B50)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B5A4, &type metadata for ClusteringJournal.Result.Group.ChannelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B50);
  }
  return result;
}

unint64_t sub_1D5DC0AC4()
{
  unint64_t result;

  result = qword_1EFFB5B58;
  if (!qword_1EFFB5B58)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B65C, &type metadata for ClusteringJournal.Result.Group.TopicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B58);
  }
  return result;
}

unint64_t sub_1D5DC0B0C()
{
  unint64_t result;

  result = qword_1EFFB5B60;
  if (!qword_1EFFB5B60)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B764, &type metadata for ClusteringJournal.Result.Group.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B60);
  }
  return result;
}

unint64_t sub_1D5DC0B54()
{
  unint64_t result;

  result = qword_1EFFB5B68;
  if (!qword_1EFFB5B68)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B81C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedNonBundlePaidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B68);
  }
  return result;
}

unint64_t sub_1D5DC0B9C()
{
  unint64_t result;

  result = qword_1EFFB5B70;
  if (!qword_1EFFB5B70)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B8D4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedBundlePaidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B70);
  }
  return result;
}

unint64_t sub_1D5DC0BE4()
{
  unint64_t result;

  result = qword_1EFFB5B78;
  if (!qword_1EFFB5B78)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B98C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B78);
  }
  return result;
}

unint64_t sub_1D5DC0C2C()
{
  unint64_t result;

  result = qword_1EFFB5B80;
  if (!qword_1EFFB5B80)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BA44, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.OrganicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B80);
  }
  return result;
}

unint64_t sub_1D5DC0C74()
{
  unint64_t result;

  result = qword_1EFFB5B88;
  if (!qword_1EFFB5B88)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BAFC, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B88);
  }
  return result;
}

unint64_t sub_1D5DC0CBC()
{
  unint64_t result;

  result = qword_1EFFB5B90;
  if (!qword_1EFFB5B90)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BBB4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B90);
  }
  return result;
}

unint64_t sub_1D5DC0D04()
{
  unint64_t result;

  result = qword_1EFFB5B98;
  if (!qword_1EFFB5B98)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BC6C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.DuplicateThumbnailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5B98);
  }
  return result;
}

unint64_t sub_1D5DC0D4C()
{
  unint64_t result;

  result = qword_1EFFB5BA0;
  if (!qword_1EFFB5BA0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BD24, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.HardPaywallNewsPlusArticleLimitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5BA0);
  }
  return result;
}

unint64_t sub_1D5DC0D94()
{
  unint64_t result;

  result = qword_1EFFB5BA8;
  if (!qword_1EFFB5BA8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BDDC, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.QualitativeTagCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5BA8);
  }
  return result;
}

unint64_t sub_1D5DC0DDC()
{
  unint64_t result;

  result = qword_1EFFB5BB0;
  if (!qword_1EFFB5BB0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BE94, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.TopicDiversityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5BB0);
  }
  return result;
}

unint64_t sub_1D5DC0E24()
{
  unint64_t result;

  result = qword_1EFFB5BB8;
  if (!qword_1EFFB5BB8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BF4C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.AigcMaxExceededCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5BB8);
  }
  return result;
}

unint64_t sub_1D5DC0E6C()
{
  unint64_t result;

  result = qword_1EFFB5BC0;
  if (!qword_1EFFB5BC0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C004, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.PublisherDiversityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5BC0);
  }
  return result;
}

unint64_t sub_1D5DC0EB4()
{
  unint64_t result;

  result = qword_1EFFB5BC8;
  if (!qword_1EFFB5BC8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C0BC, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.InaccessibleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5BC8);
  }
  return result;
}

unint64_t sub_1D5DC0EFC()
{
  unint64_t result;

  result = qword_1EFFB5BD0;
  if (!qword_1EFFB5BD0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C174, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.GroupSizeExceededCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5BD0);
  }
  return result;
}

unint64_t sub_1D5DC0F44()
{
  unint64_t result;

  result = qword_1EFFB5BD8;
  if (!qword_1EFFB5BD8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C22C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.EvergreenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5BD8);
  }
  return result;
}

unint64_t sub_1D5DC0F8C()
{
  unint64_t result;

  result = qword_1EFFB5BE0;
  if (!qword_1EFFB5BE0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C2E4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5BE0);
  }
  return result;
}

unint64_t sub_1D5DC0FD4()
{
  unint64_t result;

  result = qword_1EFFB5BE8;
  if (!qword_1EFFB5BE8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C39C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5BE8);
  }
  return result;
}

unint64_t sub_1D5DC101C()
{
  unint64_t result;

  result = qword_1EFFB5BF0;
  if (!qword_1EFFB5BF0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C454, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5BF0);
  }
  return result;
}

unint64_t sub_1D5DC1064()
{
  unint64_t result;

  result = qword_1EFFB5BF8;
  if (!qword_1EFFB5BF8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C50C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5BF8);
  }
  return result;
}

unint64_t sub_1D5DC10AC()
{
  unint64_t result;

  result = qword_1EFFB5C00;
  if (!qword_1EFFB5C00)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C664, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5C00);
  }
  return result;
}

unint64_t sub_1D5DC10F4()
{
  unint64_t result;

  result = qword_1EFFB5C08;
  if (!qword_1EFFB5C08)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C71C, &type metadata for ClusteringJournal.Result.ClusteringEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5C08);
  }
  return result;
}

unint64_t sub_1D5DC113C()
{
  unint64_t result;

  result = qword_1EFFB5C10;
  if (!qword_1EFFB5C10)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C7D4, &type metadata for ClusteringJournal.Result.Outcome.NotEnoughValidHeadlinesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5C10);
  }
  return result;
}

unint64_t sub_1D5DC1184()
{
  unint64_t result;

  result = qword_1EFFB5C18;
  if (!qword_1EFFB5C18)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C88C, &type metadata for ClusteringJournal.Result.Outcome.NotEnoughHeadlinesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5C18);
  }
  return result;
}

unint64_t sub_1D5DC11CC()
{
  unint64_t result;

  result = qword_1EFFB5C20;
  if (!qword_1EFFB5C20)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C944, &type metadata for ClusteringJournal.Result.Outcome.SuccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5C20);
  }
  return result;
}

unint64_t sub_1D5DC1214()
{
  unint64_t result;

  result = qword_1EFFB5C28;
  if (!qword_1EFFB5C28)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C9FC, &type metadata for ClusteringJournal.Result.Outcome.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5C28);
  }
  return result;
}

unint64_t sub_1D5DC125C()
{
  unint64_t result;

  result = qword_1EFFB5C30;
  if (!qword_1EFFB5C30)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CAB4, &type metadata for ClusteringJournal.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5C30);
  }
  return result;
}

unint64_t sub_1D5DC12A4()
{
  unint64_t result;

  result = qword_1EFFB5C38;
  if (!qword_1EFFB5C38)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CB6C, &type metadata for ClusteringJournal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFFB5C38);
  }
  return result;
}

unint64_t sub_1D5DC12EC()
{
  unint64_t result;

  result = qword_1ED9AE6D0;
  if (!qword_1ED9AE6D0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CADC, &type metadata for ClusteringJournal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE6D0);
  }
  return result;
}

unint64_t sub_1D5DC1334()
{
  unint64_t result;

  result = qword_1ED9AE6C8;
  if (!qword_1ED9AE6C8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CB04, &type metadata for ClusteringJournal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE6C8);
  }
  return result;
}

unint64_t sub_1D5DC137C()
{
  unint64_t result;

  result = qword_1ED9AE910;
  if (!qword_1ED9AE910)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CA24, &type metadata for ClusteringJournal.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE910);
  }
  return result;
}

unint64_t sub_1D5DC13C4()
{
  unint64_t result;

  result = qword_1ED9AE908;
  if (!qword_1ED9AE908)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3CA4C, &type metadata for ClusteringJournal.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE908);
  }
  return result;
}

unint64_t sub_1D5DC140C()
{
  unint64_t result;

  result = qword_1ED9AE9E0;
  if (!qword_1ED9AE9E0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C8B4, &type metadata for ClusteringJournal.Result.Outcome.SuccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE9E0);
  }
  return result;
}

unint64_t sub_1D5DC1454()
{
  unint64_t result;

  result = qword_1ED9AE9D8;
  if (!qword_1ED9AE9D8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C8DC, &type metadata for ClusteringJournal.Result.Outcome.SuccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE9D8);
  }
  return result;
}

unint64_t sub_1D5DC149C()
{
  unint64_t result;

  result = qword_1ED9AE9F0;
  if (!qword_1ED9AE9F0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C7FC, &type metadata for ClusteringJournal.Result.Outcome.NotEnoughHeadlinesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE9F0);
  }
  return result;
}

unint64_t sub_1D5DC14E4()
{
  unint64_t result;

  result = qword_1ED9AE9E8;
  if (!qword_1ED9AE9E8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C824, &type metadata for ClusteringJournal.Result.Outcome.NotEnoughHeadlinesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE9E8);
  }
  return result;
}

unint64_t sub_1D5DC152C()
{
  unint64_t result;

  result = qword_1ED9AEA00;
  if (!qword_1ED9AEA00)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C744, &type metadata for ClusteringJournal.Result.Outcome.NotEnoughValidHeadlinesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AEA00);
  }
  return result;
}

unint64_t sub_1D5DC1574()
{
  unint64_t result;

  result = qword_1ED9AE9F8;
  if (!qword_1ED9AE9F8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C76C, &type metadata for ClusteringJournal.Result.Outcome.NotEnoughValidHeadlinesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE9F8);
  }
  return result;
}

unint64_t sub_1D5DC15BC()
{
  unint64_t result;

  result = qword_1ED9AE9C8;
  if (!qword_1ED9AE9C8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C96C, &type metadata for ClusteringJournal.Result.Outcome.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE9C8);
  }
  return result;
}

unint64_t sub_1D5DC1604()
{
  unint64_t result;

  result = qword_1ED9AE9C0;
  if (!qword_1ED9AE9C0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C994, &type metadata for ClusteringJournal.Result.Outcome.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE9C0);
  }
  return result;
}

unint64_t sub_1D5DC164C()
{
  unint64_t result;

  result = qword_1ED9AE8D0;
  if (!qword_1ED9AE8D0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C5D4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE8D0);
  }
  return result;
}

unint64_t sub_1D5DC1694()
{
  unint64_t result;

  result = qword_1ED9AE8C8;
  if (!qword_1ED9AE8C8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C5FC, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE8C8);
  }
  return result;
}

unint64_t sub_1D5DC16DC()
{
  unint64_t result;

  result = qword_1ED9AE8E0;
  if (!qword_1ED9AE8E0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C584, &type metadata for ClusteringJournal.Result.ClusteringEvent.ExhaustedPaidBundleHeadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE8E0);
  }
  return result;
}

unint64_t sub_1D5DC1724()
{
  unint64_t result;

  result = qword_1ED9AE8D8;
  if (!qword_1ED9AE8D8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C5AC, &type metadata for ClusteringJournal.Result.ClusteringEvent.ExhaustedPaidBundleHeadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE8D8);
  }
  return result;
}

unint64_t sub_1D5DC176C()
{
  unint64_t result;

  result = qword_1ED9AE8F0;
  if (!qword_1ED9AE8F0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C534, &type metadata for ClusteringJournal.Result.ClusteringEvent.ExhaustedUnpaidBundleHeadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE8F0);
  }
  return result;
}

unint64_t sub_1D5DC17B4()
{
  unint64_t result;

  result = qword_1ED9AE8E8;
  if (!qword_1ED9AE8E8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C55C, &type metadata for ClusteringJournal.Result.ClusteringEvent.ExhaustedUnpaidBundleHeadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE8E8);
  }
  return result;
}

unint64_t sub_1D5DC17FC()
{
  unint64_t result;

  result = qword_1ED9AE730;
  if (!qword_1ED9AE730)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C68C, &type metadata for ClusteringJournal.Result.ClusteringEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE730);
  }
  return result;
}

unint64_t sub_1D5DC1844()
{
  unint64_t result;

  result = qword_1ED9AE728;
  if (!qword_1ED9AE728)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C6B4, &type metadata for ClusteringJournal.Result.ClusteringEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE728);
  }
  return result;
}

unint64_t sub_1D5DC188C()
{
  unint64_t result;

  result = qword_1ED9AE898;
  if (!qword_1ED9AE898)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C3C4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE898);
  }
  return result;
}

unint64_t sub_1D5DC18D4()
{
  unint64_t result;

  result = qword_1ED9AE890;
  if (!qword_1ED9AE890)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C3EC, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE890);
  }
  return result;
}

unint64_t sub_1D5DC191C()
{
  unint64_t result;

  result = qword_1ED9AE8B0;
  if (!qword_1ED9AE8B0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C30C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE8B0);
  }
  return result;
}

unint64_t sub_1D5DC1964()
{
  unint64_t result;

  result = qword_1ED9AE8A8;
  if (!qword_1ED9AE8A8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C334, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE8A8);
  }
  return result;
}

unint64_t sub_1D5DC19AC()
{
  unint64_t result;

  result = qword_1ED9AE748;
  if (!qword_1ED9AE748)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C47C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE748);
  }
  return result;
}

unint64_t sub_1D5DC19F4()
{
  unint64_t result;

  result = qword_1ED9AE740;
  if (!qword_1ED9AE740)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C4A4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE740);
  }
  return result;
}

unint64_t sub_1D5DC1A3C()
{
  unint64_t result;

  result = qword_1ED9AE798;
  if (!qword_1ED9AE798)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C19C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.EvergreenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE798);
  }
  return result;
}

unint64_t sub_1D5DC1A84()
{
  unint64_t result;

  result = qword_1ED9AE790;
  if (!qword_1ED9AE790)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C1C4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.EvergreenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE790);
  }
  return result;
}

unint64_t sub_1D5DC1ACC()
{
  unint64_t result;

  result = qword_1ED9AE7E8;
  if (!qword_1ED9AE7E8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C0E4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.GroupSizeExceededCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE7E8);
  }
  return result;
}

unint64_t sub_1D5DC1B14()
{
  unint64_t result;

  result = qword_1ED9AE7E0;
  if (!qword_1ED9AE7E0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C10C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.GroupSizeExceededCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE7E0);
  }
  return result;
}

unint64_t sub_1D5DC1B5C()
{
  unint64_t result;

  result = qword_1ED9AE7B0;
  if (!qword_1ED9AE7B0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C02C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.InaccessibleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE7B0);
  }
  return result;
}

unint64_t sub_1D5DC1BA4()
{
  unint64_t result;

  result = qword_1ED9AE7A8;
  if (!qword_1ED9AE7A8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C054, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.InaccessibleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE7A8);
  }
  return result;
}

unint64_t sub_1D5DC1BEC()
{
  unint64_t result;

  result = qword_1ED9AE810;
  if (!qword_1ED9AE810)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BF74, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.PublisherDiversityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE810);
  }
  return result;
}

unint64_t sub_1D5DC1C34()
{
  unint64_t result;

  result = qword_1ED9AE808;
  if (!qword_1ED9AE808)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BF9C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.PublisherDiversityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE808);
  }
  return result;
}

unint64_t sub_1D5DC1C7C()
{
  unint64_t result;

  result = qword_1ED9AF480;
  if (!qword_1ED9AF480)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BEBC, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.AigcMaxExceededCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AF480);
  }
  return result;
}

unint64_t sub_1D5DC1CC4()
{
  unint64_t result;

  result = qword_1ED9AF478;
  if (!qword_1ED9AF478)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BEE4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.AigcMaxExceededCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AF478);
  }
  return result;
}

unint64_t sub_1D5DC1D0C()
{
  unint64_t result;

  result = qword_1ED9AE7D0;
  if (!qword_1ED9AE7D0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BE04, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.TopicDiversityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE7D0);
  }
  return result;
}

unint64_t sub_1D5DC1D54()
{
  unint64_t result;

  result = qword_1ED9AE7C8;
  if (!qword_1ED9AE7C8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BE2C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.TopicDiversityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE7C8);
  }
  return result;
}

unint64_t sub_1D5DC1D9C()
{
  unint64_t result;

  result = qword_1ED9AE7C0;
  if (!qword_1ED9AE7C0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BD4C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.QualitativeTagCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE7C0);
  }
  return result;
}

unint64_t sub_1D5DC1DE4()
{
  unint64_t result;

  result = qword_1ED9AE7B8;
  if (!qword_1ED9AE7B8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BD74, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.QualitativeTagCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE7B8);
  }
  return result;
}

unint64_t sub_1D5DC1E2C()
{
  unint64_t result;

  result = qword_1ED9AE758;
  if (!qword_1ED9AE758)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BC94, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.HardPaywallNewsPlusArticleLimitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE758);
  }
  return result;
}

unint64_t sub_1D5DC1E74()
{
  unint64_t result;

  result = qword_1ED9AE750;
  if (!qword_1ED9AE750)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BCBC, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.HardPaywallNewsPlusArticleLimitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE750);
  }
  return result;
}

unint64_t sub_1D5DC1EBC()
{
  unint64_t result;

  result = qword_1ED9AE7F8;
  if (!qword_1ED9AE7F8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BBDC, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.DuplicateThumbnailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE7F8);
  }
  return result;
}

unint64_t sub_1D5DC1F04()
{
  unint64_t result;

  result = qword_1ED9AE7F0;
  if (!qword_1ED9AE7F0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BC04, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.DuplicateThumbnailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE7F0);
  }
  return result;
}

unint64_t sub_1D5DC1F4C()
{
  unint64_t result;

  result = qword_1ED9AE780;
  if (!qword_1ED9AE780)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BB24, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE780);
  }
  return result;
}

unint64_t sub_1D5DC1F94()
{
  unint64_t result;

  result = qword_1ED9AE778;
  if (!qword_1ED9AE778)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BB4C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE778);
  }
  return result;
}

unint64_t sub_1D5DC1FDC()
{
  unint64_t result;

  result = qword_1ED9AE770;
  if (!qword_1ED9AE770)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C254, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE770);
  }
  return result;
}

unint64_t sub_1D5DC2024()
{
  unint64_t result;

  result = qword_1ED9AE768;
  if (!qword_1ED9AE768)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3C27C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.RejectionReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE768);
  }
  return result;
}

unint64_t sub_1D5DC206C()
{
  unint64_t result;

  result = qword_1ED9AE848;
  if (!qword_1ED9AE848)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B9B4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.OrganicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE848);
  }
  return result;
}

unint64_t sub_1D5DC20B4()
{
  unint64_t result;

  result = qword_1ED9AE840;
  if (!qword_1ED9AE840)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B9DC, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.OrganicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE840);
  }
  return result;
}

unint64_t sub_1D5DC20FC()
{
  unint64_t result;

  result = qword_1ED9AE858;
  if (!qword_1ED9AE858)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B8FC, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE858);
  }
  return result;
}

unint64_t sub_1D5DC2144()
{
  unint64_t result;

  result = qword_1ED9AE850;
  if (!qword_1ED9AE850)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B924, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE850);
  }
  return result;
}

unint64_t sub_1D5DC218C()
{
  unint64_t result;

  result = qword_1ED9AE868;
  if (!qword_1ED9AE868)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B844, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedBundlePaidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE868);
  }
  return result;
}

unint64_t sub_1D5DC21D4()
{
  unint64_t result;

  result = qword_1ED9AE860;
  if (!qword_1ED9AE860)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B86C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedBundlePaidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE860);
  }
  return result;
}

unint64_t sub_1D5DC221C()
{
  unint64_t result;

  result = qword_1ED9AE878;
  if (!qword_1ED9AE878)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B78C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedNonBundlePaidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE878);
  }
  return result;
}

unint64_t sub_1D5DC2264()
{
  unint64_t result;

  result = qword_1ED9AE870;
  if (!qword_1ED9AE870)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B7B4, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.PromotedNonBundlePaidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE870);
  }
  return result;
}

unint64_t sub_1D5DC22AC()
{
  unint64_t result;

  result = qword_1ED9AE830;
  if (!qword_1ED9AE830)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BA6C, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE830);
  }
  return result;
}

unint64_t sub_1D5DC22F4()
{
  unint64_t result;

  result = qword_1ED9AE828;
  if (!qword_1ED9AE828)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3BA94, &type metadata for ClusteringJournal.Result.ClusteringEvent.HeadlineOutcome.AcceptanceReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE828);
  }
  return result;
}

unint64_t sub_1D5DC233C()
{
  unint64_t result;

  result = qword_1ED9AE988;
  if (!qword_1ED9AE988)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B684, &type metadata for ClusteringJournal.Result.Group.MoreForYouCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE988);
  }
  return result;
}

unint64_t sub_1D5DC2384()
{
  unint64_t result;

  result = qword_1ED9AE980;
  if (!qword_1ED9AE980)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B6AC, &type metadata for ClusteringJournal.Result.Group.MoreForYouCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE980);
  }
  return result;
}

unint64_t sub_1D5DC23CC()
{
  unint64_t result;

  result = qword_1ED9AE960;
  if (!qword_1ED9AE960)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B5CC, &type metadata for ClusteringJournal.Result.Group.TopicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE960);
  }
  return result;
}

unint64_t sub_1D5DC2414()
{
  unint64_t result;

  result = qword_1ED9AE958;
  if (!qword_1ED9AE958)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B5F4, &type metadata for ClusteringJournal.Result.Group.TopicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE958);
  }
  return result;
}

unint64_t sub_1D5DC245C()
{
  unint64_t result;

  result = qword_1ED9AE970;
  if (!qword_1ED9AE970)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B514, &type metadata for ClusteringJournal.Result.Group.ChannelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE970);
  }
  return result;
}

unint64_t sub_1D5DC24A4()
{
  unint64_t result;

  result = qword_1ED9AE968;
  if (!qword_1ED9AE968)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B53C, &type metadata for ClusteringJournal.Result.Group.ChannelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE968);
  }
  return result;
}

unint64_t sub_1D5DC24EC()
{
  unint64_t result;

  result = qword_1ED9AE948;
  if (!qword_1ED9AE948)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B6D4, &type metadata for ClusteringJournal.Result.Group.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE948);
  }
  return result;
}

unint64_t sub_1D5DC2534()
{
  unint64_t result;

  result = qword_1ED9AE940;
  if (!qword_1ED9AE940)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B6FC, &type metadata for ClusteringJournal.Result.Group.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE940);
  }
  return result;
}

unint64_t sub_1D5DC257C()
{
  unint64_t result;

  result = qword_1ED9AE928;
  if (!qword_1ED9AE928)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B45C, &type metadata for ClusteringJournal.Result.Requirements.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE928);
  }
  return result;
}

unint64_t sub_1D5DC25C4()
{
  unint64_t result;

  result = qword_1ED9AE920;
  if (!qword_1ED9AE920)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B484, &type metadata for ClusteringJournal.Result.Requirements.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE920);
  }
  return result;
}

unint64_t sub_1D5DC260C()
{
  unint64_t result;

  result = qword_1ED9AE9A8;
  if (!qword_1ED9AE9A8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B3A4, &type metadata for ClusteringJournal.Result.Article.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE9A8);
  }
  return result;
}

unint64_t sub_1D5DC2654()
{
  unint64_t result;

  result = qword_1ED9AE9A0;
  if (!qword_1ED9AE9A0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B3CC, &type metadata for ClusteringJournal.Result.Article.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE9A0);
  }
  return result;
}

unint64_t sub_1D5DC269C()
{
  unint64_t result;

  result = qword_1ED9AEAE8;
  if (!qword_1ED9AEAE8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B2EC, &type metadata for ClusteringJournal.Inventory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AEAE8);
  }
  return result;
}

unint64_t sub_1D5DC26E4()
{
  unint64_t result;

  result = qword_1ED9AEAE0;
  if (!qword_1ED9AEAE0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B314, &type metadata for ClusteringJournal.Inventory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AEAE0);
  }
  return result;
}

unint64_t sub_1D5DC272C()
{
  unint64_t result;

  result = qword_1ED9AEB00;
  if (!qword_1ED9AEB00)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B234, &type metadata for ClusteringJournal.Inventory.Item.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AEB00);
  }
  return result;
}

unint64_t sub_1D5DC2774()
{
  unint64_t result;

  result = qword_1ED9AEAF8;
  if (!qword_1ED9AEAF8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B25C, &type metadata for ClusteringJournal.Inventory.Item.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AEAF8);
  }
  return result;
}

unint64_t sub_1D5DC27BC()
{
  unint64_t result;

  result = qword_1ED9AE6F8;
  if (!qword_1ED9AE6F8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B12C, &type metadata for ClusteringJournal.Mode.ExternalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE6F8);
  }
  return result;
}

unint64_t sub_1D5DC2804()
{
  unint64_t result;

  result = qword_1ED9AE6F0;
  if (!qword_1ED9AE6F0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B154, &type metadata for ClusteringJournal.Mode.ExternalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE6F0);
  }
  return result;
}

unint64_t sub_1D5DC284C()
{
  unint64_t result;

  result = qword_1ED9AE710;
  if (!qword_1ED9AE710)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B074, &type metadata for ClusteringJournal.Mode.InternalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE710);
  }
  return result;
}

unint64_t sub_1D5DC2894()
{
  unint64_t result;

  result = qword_1ED9AE708;
  if (!qword_1ED9AE708)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B09C, &type metadata for ClusteringJournal.Mode.InternalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE708);
  }
  return result;
}

unint64_t sub_1D5DC28DC()
{
  unint64_t result;

  result = qword_1ED9AE6E8;
  if (!qword_1ED9AE6E8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B17C, &type metadata for ClusteringJournal.Mode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE6E8);
  }
  return result;
}

unint64_t sub_1D5DC2924()
{
  unint64_t result;

  result = qword_1ED9AE6E0;
  if (!qword_1ED9AE6E0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3B1A4, &type metadata for ClusteringJournal.Mode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9AE6E0);
  }
  return result;
}

uint64_t sub_1D5DC2968(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73746C75736572 && a2 == 0xE700000000000000;
  if (v2 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F746E65766E69 && a2 == 0xE900000000000079 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1D5DC2B94(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_1D5DBBAA0(a1, a2, a3);
  return a1;
}

uint64_t sub_1D5DC2BA8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

ValueMetadata *type metadata accessor for Classic()
{
  return &type metadata for Classic;
}

uint64_t sub_1D5DC2E04(double a1)
{
  return sub_1D5D87C9C(0xD000000000000020, 0x80000001D5E49E30, a1);
}

uint64_t sub_1D5DC2E20(double a1)
{
  return sub_1D5D87C9C(0xD000000000000022, 0x80000001D5E49E00, a1);
}

uint64_t sub_1D5DC2E3C(uint64_t a1)
{
  return sub_1D5DC3BA8(a1, 0xD000000000000022, 0x80000001D5E49DD0);
}

uint64_t sub_1D5DC2E58(uint64_t a1)
{
  return sub_1D5DC2EAC(a1, 0xD000000000000021, 0x80000001D5E49DA0);
}

uint64_t sub_1D5DC2E74(double a1)
{
  return sub_1D5D88080(0xD000000000000019, 0x80000001D5E48FF0, a1);
}

uint64_t sub_1D5DC2E90(uint64_t a1)
{
  return sub_1D5DC2EAC(a1, 0xD000000000000024, 0x80000001D5E48FC0);
}

uint64_t sub_1D5DC2EAC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;

  v4 = result;
  if (result < 0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v7 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1D5E38580;
    v9 = v7;
    sub_1D5E376B0();
    v10 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1D5D889BC();
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0xE000000000000000;
    *(_QWORD *)(v8 + 96) = v10;
    *(_QWORD *)(v8 + 104) = v11;
    *(_QWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 72) = 0xD00000000000001CLL;
    *(_QWORD *)(v8 + 80) = 0x80000001D5E480F0;
    *(_QWORD *)(v8 + 136) = v10;
    *(_QWORD *)(v8 + 144) = v11;
    *(_QWORD *)(v8 + 112) = a2;
    *(_QWORD *)(v8 + 120) = a3;
    v4 = 10;
    sub_1D5E376B0();
    *(_QWORD *)(v8 + 176) = v10;
    *(_QWORD *)(v8 + 184) = v11;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
  }
  *v3 = v4;
  return result;
}

uint64_t sub_1D5DC3050(double a1)
{
  return sub_1D5D86A68(0xD00000000000001DLL, 0x80000001D5E48FA0, a1);
}

uint64_t sub_1D5DC306C(double a1)
{
  return sub_1D5D86A68(0xD000000000000023, 0x80000001D5E48F70, a1);
}

uint64_t sub_1D5DC3088(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;

  v2 = result;
  if (result < 0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v3 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1D5E38580;
    v5 = v3;
    sub_1D5E376B0();
    v6 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
    v7 = sub_1D5D889BC();
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0xE000000000000000;
    *(_QWORD *)(v4 + 96) = v6;
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(v4 + 64) = v7;
    *(_QWORD *)(v4 + 72) = 0xD00000000000001CLL;
    *(_QWORD *)(v4 + 80) = 0x80000001D5E480F0;
    *(_QWORD *)(v4 + 136) = v6;
    *(_QWORD *)(v4 + 144) = v7;
    *(_QWORD *)(v4 + 112) = 0xD00000000000002CLL;
    *(_QWORD *)(v4 + 120) = 0x80000001D5E48F40;
    v2 = 1000;
    sub_1D5E376B0();
    *(_QWORD *)(v4 + 176) = v6;
    *(_QWORD *)(v4 + 184) = v7;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
  }
  *v1 = v2;
  return result;
}

uint64_t sub_1D5DC3238(double a1)
{
  return sub_1D5D86F60(0xD00000000000001BLL, 0x80000001D5E48F20, a1);
}

uint64_t sub_1D5DC3254(double a1)
{
  return sub_1D5D86F60(0xD000000000000019, 0x80000001D5E48F00, a1);
}

void sub_1D5DC3270(double a1)
{
  double *v1;
  double v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1;
  if (a1 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v3 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1D5E38580;
    v5 = v3;
    sub_1D5E376B0();
    v6 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
    v7 = sub_1D5D889BC();
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0xE000000000000000;
    *(_QWORD *)(v4 + 96) = v6;
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(v4 + 64) = v7;
    *(_QWORD *)(v4 + 72) = 0xD00000000000001FLL;
    *(_QWORD *)(v4 + 80) = 0x80000001D5E48070;
    *(_QWORD *)(v4 + 136) = v6;
    *(_QWORD *)(v4 + 144) = v7;
    *(_QWORD *)(v4 + 112) = 0xD00000000000001DLL;
    *(_QWORD *)(v4 + 120) = 0x80000001D5E48EE0;
    sub_1D5E376B0();
    *(_QWORD *)(v4 + 176) = v6;
    *(_QWORD *)(v4 + 184) = v7;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v2 = 0.9;
  }
  *v1 = v2;
}

uint64_t sub_1D5DC343C(double a1)
{
  return sub_1D5D87900(0xD00000000000001ELL, 0x80000001D5E48EC0, a1);
}

uint64_t sub_1D5DC3458(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;

  v2 = result;
  if (result < 0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v3 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1D5E38580;
    v5 = v3;
    sub_1D5E376B0();
    v6 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
    v7 = sub_1D5D889BC();
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0xE000000000000000;
    *(_QWORD *)(v4 + 96) = v6;
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(v4 + 64) = v7;
    *(_QWORD *)(v4 + 72) = 0xD00000000000001CLL;
    *(_QWORD *)(v4 + 80) = 0x80000001D5E480F0;
    *(_QWORD *)(v4 + 136) = v6;
    *(_QWORD *)(v4 + 144) = v7;
    *(_QWORD *)(v4 + 112) = 0xD000000000000022;
    *(_QWORD *)(v4 + 120) = 0x80000001D5E48E90;
    v2 = 37;
    sub_1D5E376B0();
    *(_QWORD *)(v4 + 176) = v6;
    *(_QWORD *)(v4 + 184) = v7;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
  }
  *v1 = v2;
  return result;
}

void sub_1D5DC3608(double a1)
{
  double *v1;
  double v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1;
  if (a1 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v3 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1D5E38580;
    v5 = v3;
    sub_1D5E376B0();
    v6 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
    v7 = sub_1D5D889BC();
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0xE000000000000000;
    *(_QWORD *)(v4 + 96) = v6;
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(v4 + 64) = v7;
    *(_QWORD *)(v4 + 72) = 0xD00000000000001FLL;
    *(_QWORD *)(v4 + 80) = 0x80000001D5E48070;
    *(_QWORD *)(v4 + 136) = v6;
    *(_QWORD *)(v4 + 144) = v7;
    *(_QWORD *)(v4 + 112) = 0xD000000000000023;
    *(_QWORD *)(v4 + 120) = 0x80000001D5E48E60;
    sub_1D5E376B0();
    *(_QWORD *)(v4 + 176) = v6;
    *(_QWORD *)(v4 + 184) = v7;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v2 = 1.2;
  }
  *v1 = v2;
}

void sub_1D5DC37CC(double a1)
{
  double *v1;
  double v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1;
  if (a1 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v3 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1D5E38580;
    v5 = v3;
    sub_1D5E376B0();
    v6 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
    v7 = sub_1D5D889BC();
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0xE000000000000000;
    *(_QWORD *)(v4 + 96) = v6;
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(v4 + 64) = v7;
    *(_QWORD *)(v4 + 72) = 0xD00000000000001FLL;
    *(_QWORD *)(v4 + 80) = 0x80000001D5E48070;
    *(_QWORD *)(v4 + 136) = v6;
    *(_QWORD *)(v4 + 144) = v7;
    *(_QWORD *)(v4 + 112) = 0xD00000000000001FLL;
    *(_QWORD *)(v4 + 120) = 0x80000001D5E48E40;
    sub_1D5E376B0();
    *(_QWORD *)(v4 + 176) = v6;
    *(_QWORD *)(v4 + 184) = v7;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v2 = 1.5;
  }
  *v1 = v2;
}

uint64_t sub_1D5DC3988(double a1)
{
  return sub_1D5D86A68(0xD00000000000001FLL, 0x80000001D5E48E20, a1);
}

uint64_t sub_1D5DC39A4(double a1)
{
  return sub_1D5D86A68(0xD00000000000001FLL, 0x80000001D5E48E00, a1);
}

uint64_t sub_1D5DC39C0(double a1)
{
  return sub_1D5D88080(0xD000000000000017, 0x80000001D5E48DE0, a1);
}

uint64_t sub_1D5DC39DC(double a1)
{
  return sub_1D5D86A68(0xD000000000000021, 0x80000001D5E48DB0, a1);
}

uint64_t sub_1D5DC39F8(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;

  v2 = result;
  if (result < 0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v3 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1D5E38580;
    v5 = v3;
    sub_1D5E376B0();
    v6 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
    v7 = sub_1D5D889BC();
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0xE000000000000000;
    *(_QWORD *)(v4 + 96) = v6;
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(v4 + 64) = v7;
    *(_QWORD *)(v4 + 72) = 0xD00000000000001CLL;
    *(_QWORD *)(v4 + 80) = 0x80000001D5E480F0;
    *(_QWORD *)(v4 + 136) = v6;
    *(_QWORD *)(v4 + 144) = v7;
    *(_QWORD *)(v4 + 112) = 0xD000000000000027;
    *(_QWORD *)(v4 + 120) = 0x80000001D5E496A0;
    v2 = 1;
    sub_1D5E376B0();
    *(_QWORD *)(v4 + 176) = v6;
    *(_QWORD *)(v4 + 184) = v7;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
  }
  *v1 = v2;
  return result;
}

uint64_t sub_1D5DC3BA8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;

  v4 = result;
  if (result < 0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v7 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1D5E38580;
    v9 = v7;
    sub_1D5E376B0();
    v10 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1D5D889BC();
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0xE000000000000000;
    *(_QWORD *)(v8 + 96) = v10;
    *(_QWORD *)(v8 + 104) = v11;
    *(_QWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 72) = 0xD00000000000001CLL;
    *(_QWORD *)(v8 + 80) = 0x80000001D5E480F0;
    *(_QWORD *)(v8 + 136) = v10;
    *(_QWORD *)(v8 + 144) = v11;
    *(_QWORD *)(v8 + 112) = a2;
    *(_QWORD *)(v8 + 120) = a3;
    v4 = 30;
    sub_1D5E376B0();
    *(_QWORD *)(v8 + 176) = v10;
    *(_QWORD *)(v8 + 184) = v11;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
  }
  *v3 = v4;
  return result;
}

uint64_t sub_1D5DC3D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  double *v5;
  BOOL v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;

  v11 = a5 < 0.0 || a5 > 1.0;
  if (v11 || a1 < 0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v13 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1D5E38580;
    v22 = a5;
    v23 = a1;
    v24 = a2;
    v15 = v13;
    sub_1D5E376B0();
    v16 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEA968];
    v17 = sub_1D5D889BC();
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0xE000000000000000;
    *(_QWORD *)(v14 + 96) = v16;
    *(_QWORD *)(v14 + 104) = v17;
    *(_QWORD *)(v14 + 64) = v17;
    *(_QWORD *)(v14 + 72) = 0xD00000000000001FLL;
    *(_QWORD *)(v14 + 80) = 0x80000001D5E49440;
    *(_QWORD *)(v14 + 136) = v16;
    *(_QWORD *)(v14 + 144) = v17;
    *(_QWORD *)(v14 + 112) = a3;
    *(_QWORD *)(v14 + 120) = a4;
    v18 = MEMORY[0x1E0DEE9E8];
    sub_1D5DD0D08(0x3FF0000000000000, 0, 1, 0, MEMORY[0x1E0DEE9E8], (uint64_t *)&v22);
    sub_1D5E376B0();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v14 + 176) = v16;
    *(_QWORD *)(v14 + 184) = v17;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    sub_1D5DD0D08(0x3FF0000000000000, 0, 1, 0, v18, (uint64_t *)&v22);
    v19 = v22;
    v20 = v23;
    v21 = v24;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v5 = v19;
    *((_QWORD *)v5 + 1) = v20;
    *((_QWORD *)v5 + 2) = v21;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *v5 = a5;
    *((_QWORD *)v5 + 1) = a1;
    *((_QWORD *)v5 + 2) = a2;
  }
  return result;
}

uint64_t sub_1D5DC3F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  double v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  double v28;
  __int128 v30;
  uint64_t v31;
  __int128 v32;

  v6 = *(double *)a1;
  if (*(double *)a1 >= -1.0 && v6 <= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 48);
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(v8 + 16);
    if (!v15)
      goto LABEL_23;
    v16 = *(double *)(v8 + 32);
    if (v16 >= -1.0 && v16 <= 1.0)
    {
      if (v15 != 1)
      {
        v26 = 5;
        while (1)
        {
          v27 = v26 - 3;
          if (__OFADD__(v26 - 4, 1))
            break;
          v28 = *(double *)(v8 + 8 * v26);
          if (v28 < -1.0 || v28 > 1.0)
            goto LABEL_11;
          ++v26;
          if (v27 == v15)
            goto LABEL_23;
        }
        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *(double *)v3 = v6;
      *(_QWORD *)(v3 + 8) = v8;
      *(_QWORD *)(v3 + 16) = v9;
      *(_QWORD *)(v3 + 24) = v10;
      *(_QWORD *)(v3 + 32) = v11;
      *(_QWORD *)(v3 + 40) = v12;
      *(_QWORD *)(v3 + 48) = v13;
      *(_QWORD *)(v3 + 56) = v14;
      return result;
    }
  }
LABEL_11:
  v4 = a2;
  v31 = a3;
  if (qword_1EFFB50D0 != -1)
LABEL_25:
    swift_once();
  v18 = (void *)qword_1EFFB52C8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1D5E38580;
  v20 = v18;
  sub_1D5E376B0();
  v21 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v19 + 56) = MEMORY[0x1E0DEA968];
  v22 = sub_1D5D889BC();
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0xE000000000000000;
  *(_QWORD *)(v19 + 96) = v21;
  *(_QWORD *)(v19 + 104) = v22;
  *(_QWORD *)(v19 + 64) = v22;
  *(_QWORD *)(v19 + 72) = 0xD000000000000016;
  *(_QWORD *)(v19 + 80) = 0x80000001D5E49490;
  *(_QWORD *)(v19 + 136) = v21;
  *(_QWORD *)(v19 + 144) = v22;
  *(_QWORD *)(v19 + 112) = v4;
  *(_QWORD *)(v19 + 120) = v31;
  if (qword_1ED9ADB80 != -1)
    swift_once();
  sub_1D5E376B0();
  *(_QWORD *)(v19 + 176) = v21;
  *(_QWORD *)(v19 + 184) = v22;
  *(_QWORD *)(v19 + 152) = 0;
  *(_QWORD *)(v19 + 160) = 0xE000000000000000;
  sub_1D5E375FC();
  sub_1D5E373A4();

  swift_bridgeObjectRelease();
  v23 = xmmword_1ED9ADB40;
  v30 = xmmword_1ED9ADB60;
  v32 = xmmword_1ED9ADB50;
  v24 = xmmword_1ED9ADB70;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_1D5DC8504(a1);
  *(_OWORD *)v3 = v23;
  *(_OWORD *)(v3 + 16) = v32;
  *(_OWORD *)(v3 + 32) = v30;
  *(_OWORD *)(v3 + 48) = v24;
  return result;
}

uint64_t sub_1D5DC42C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;

  v4 = result;
  if (result < 0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v7 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1D5E38580;
    v9 = v7;
    sub_1D5E376B0();
    v10 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1D5D889BC();
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0xE000000000000000;
    *(_QWORD *)(v8 + 96) = v10;
    *(_QWORD *)(v8 + 104) = v11;
    *(_QWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 72) = 0xD00000000000001CLL;
    *(_QWORD *)(v8 + 80) = 0x80000001D5E480F0;
    *(_QWORD *)(v8 + 136) = v10;
    *(_QWORD *)(v8 + 144) = v11;
    *(_QWORD *)(v8 + 112) = a2;
    *(_QWORD *)(v8 + 120) = a3;
    v4 = 3;
    sub_1D5E376B0();
    *(_QWORD *)(v8 + 176) = v10;
    *(_QWORD *)(v8 + 184) = v11;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
  }
  *v3 = v4;
  return result;
}

uint64_t sub_1D5DC446C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;

  v4 = result;
  if (result < 0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v7 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1D5E38580;
    v9 = v7;
    sub_1D5E376B0();
    v10 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1D5D889BC();
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0xE000000000000000;
    *(_QWORD *)(v8 + 96) = v10;
    *(_QWORD *)(v8 + 104) = v11;
    *(_QWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 72) = 0xD00000000000001CLL;
    *(_QWORD *)(v8 + 80) = 0x80000001D5E480F0;
    *(_QWORD *)(v8 + 136) = v10;
    *(_QWORD *)(v8 + 144) = v11;
    *(_QWORD *)(v8 + 112) = a2;
    *(_QWORD *)(v8 + 120) = a3;
    v4 = 2;
    sub_1D5E376B0();
    *(_QWORD *)(v8 + 176) = v10;
    *(_QWORD *)(v8 + 184) = v11;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
  }
  *v3 = v4;
  return result;
}

void sub_1D5DC4610(double a1)
{
  double *v1;
  double v2;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;

  v2 = a1;
  if (a1 < 0.0 || a1 > 1.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v4 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1D5E38580;
    v6 = v4;
    sub_1D5E376B0();
    v7 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v5 + 56) = MEMORY[0x1E0DEA968];
    v8 = sub_1D5D889BC();
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0xE000000000000000;
    *(_QWORD *)(v5 + 96) = v7;
    *(_QWORD *)(v5 + 104) = v8;
    *(_QWORD *)(v5 + 64) = v8;
    *(_QWORD *)(v5 + 72) = 0xD000000000000021;
    *(_QWORD *)(v5 + 80) = 0x80000001D5E48160;
    *(_QWORD *)(v5 + 136) = v7;
    *(_QWORD *)(v5 + 144) = v8;
    *(_QWORD *)(v5 + 112) = 0xD000000000000010;
    *(_QWORD *)(v5 + 120) = 0x80000001D5E49BF0;
    sub_1D5E376B0();
    *(_QWORD *)(v5 + 176) = v7;
    *(_QWORD *)(v5 + 184) = v8;
    *(_QWORD *)(v5 + 152) = 0;
    *(_QWORD *)(v5 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v2 = 0.99;
  }
  *v1 = v2;
}

uint64_t sub_1D5DC47E8(double a1)
{
  return sub_1D5D86A68(0xD000000000000023, 0x80000001D5E49BC0, a1);
}

uint64_t sub_1D5DC4804(double a1)
{
  return sub_1D5D86A68(0xD000000000000021, 0x80000001D5E49B90, a1);
}

uint64_t sub_1D5DC4820(double a1, double a2, double a3, double a4)
{
  return sub_1D5DC5734(0xD000000000000034, 0x80000001D5E493E0, a1, a2, a3, a4);
}

uint64_t sub_1D5DC483C(double a1, double a2, double a3, double a4)
{
  return sub_1D5DC5120(0xD000000000000034, 0x80000001D5E493A0, a1, a2, a3, a4);
}

void sub_1D5DC4858(double a1, double a2, double a3, double a4)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;

  v5 = a4;
  v6 = a3;
  v7 = a2;
  v8 = a1;
  if (a1 < 0.0 || a2 < 0.0 || a3 < 0.0 || a4 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v9 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1D5E38580;
    v11 = v9;
    sub_1D5E376B0();
    v12 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
    v13 = sub_1D5D889BC();
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0xE000000000000000;
    *(_QWORD *)(v10 + 96) = v12;
    *(_QWORD *)(v10 + 104) = v13;
    *(_QWORD *)(v10 + 64) = v13;
    *(_QWORD *)(v10 + 72) = 0xD000000000000033;
    *(_QWORD *)(v10 + 80) = 0x80000001D5E49010;
    *(_QWORD *)(v10 + 136) = v12;
    *(_QWORD *)(v10 + 144) = v13;
    *(_QWORD *)(v10 + 112) = 0xD000000000000037;
    *(_QWORD *)(v10 + 120) = 0x80000001D5E49360;
    sub_1D5E376B0();
    *(_QWORD *)(v10 + 176) = v12;
    *(_QWORD *)(v10 + 184) = v13;
    *(_QWORD *)(v10 + 152) = 0;
    *(_QWORD *)(v10 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v7 = 0.0;
    v8 = 1.0;
    v6 = 1.0;
    v5 = 0.0;
  }
  *v4 = v8;
  v4[1] = v7;
  v4[2] = v6;
  v4[3] = v5;
}

uint64_t sub_1D5DC4A5C(double a1, double a2, double a3, double a4)
{
  return sub_1D5DC5944(0xD000000000000030, 0x80000001D5E49320, a1, a2, a3, a4);
}

void sub_1D5DC4A78(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v15;

  if (a1 < 0.0 || a2 < 0.0 || a3 < 0.0 || a4 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v5 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1D5E38580;
    v7 = v5;
    sub_1D5E376B0();
    v8 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEA968];
    v9 = sub_1D5D889BC();
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0xE000000000000000;
    *(_QWORD *)(v6 + 64) = v9;
    *(_QWORD *)(v6 + 72) = 0xD000000000000033;
    *(_QWORD *)(v6 + 96) = v8;
    *(_QWORD *)(v6 + 104) = v9;
    *(_QWORD *)(v6 + 80) = 0x80000001D5E49010;
    *(_QWORD *)(v6 + 136) = v8;
    *(_QWORD *)(v6 + 144) = v9;
    *(_QWORD *)(v6 + 112) = 0xD000000000000031;
    *(_QWORD *)(v6 + 120) = 0x80000001D5E492E0;
    __asm { FMOV            V0.2D, #3.0 }
    v15 = _Q0;
    sub_1D5E376B0();
    *(_QWORD *)(v6 + 176) = v8;
    *(_QWORD *)(v6 + 184) = v9;
    *(_QWORD *)(v6 + 152) = 0;
    *(_QWORD *)(v6 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    *(_OWORD *)v4 = v15;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
  }
  else
  {
    *(double *)v4 = a1;
    *(double *)(v4 + 8) = a2;
    *(double *)(v4 + 16) = a3;
    *(double *)(v4 + 24) = a4;
  }
}

void sub_1D5DC4C7C(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v15;

  if (a1 < 0.0 || a2 < 0.0 || a3 < 0.0 || a4 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v5 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1D5E38580;
    v7 = v5;
    sub_1D5E376B0();
    v8 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEA968];
    v9 = sub_1D5D889BC();
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0xE000000000000000;
    *(_QWORD *)(v6 + 64) = v9;
    *(_QWORD *)(v6 + 72) = 0xD000000000000033;
    *(_QWORD *)(v6 + 96) = v8;
    *(_QWORD *)(v6 + 104) = v9;
    *(_QWORD *)(v6 + 80) = 0x80000001D5E49010;
    *(_QWORD *)(v6 + 136) = v8;
    *(_QWORD *)(v6 + 144) = v9;
    *(_QWORD *)(v6 + 112) = 0xD00000000000002FLL;
    *(_QWORD *)(v6 + 120) = 0x80000001D5E492B0;
    __asm { FMOV            V0.2D, #10.0 }
    v15 = _Q0;
    sub_1D5E376B0();
    *(_QWORD *)(v6 + 176) = v8;
    *(_QWORD *)(v6 + 184) = v9;
    *(_QWORD *)(v6 + 152) = 0;
    *(_QWORD *)(v6 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    *(_OWORD *)v4 = v15;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
  }
  else
  {
    *(double *)v4 = a1;
    *(double *)(v4 + 8) = a2;
    *(double *)(v4 + 16) = a3;
    *(double *)(v4 + 24) = a4;
  }
}

uint64_t sub_1D5DC4E80(double a1, double a2, double a3, double a4)
{
  return sub_1D5DC5944(0xD00000000000002FLL, 0x80000001D5E49280, a1, a2, a3, a4);
}

uint64_t sub_1D5DC4E9C(double a1, double a2, double a3, double a4)
{
  return sub_1D5DC4F0C(0xD00000000000002DLL, 0x80000001D5E49250, a1, a2, a3, a4);
}

uint64_t sub_1D5DC4EB8(double a1, double a2, double a3, double a4)
{
  return sub_1D5DC5944(0xD00000000000002DLL, 0x80000001D5E49220, a1, a2, a3, a4);
}

uint64_t sub_1D5DC4ED4(double a1, double a2, double a3, double a4)
{
  return sub_1D5DC4F0C(0xD00000000000002ELL, 0x80000001D5E491F0, a1, a2, a3, a4);
}

uint64_t sub_1D5DC4EF0(double a1, double a2, double a3, double a4)
{
  return sub_1D5DC4F0C(0xD00000000000002ELL, 0x80000001D5E491C0, a1, a2, a3, a4);
}

uint64_t sub_1D5DC4F0C(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v19;

  v8 = result;
  if (a3 < 0.0 || a4 < 0.0 || a5 < 0.0 || a6 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v9 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1D5E38580;
    v11 = v9;
    sub_1D5E376B0();
    v12 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
    v13 = sub_1D5D889BC();
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0xE000000000000000;
    *(_QWORD *)(v10 + 96) = v12;
    *(_QWORD *)(v10 + 104) = v13;
    *(_QWORD *)(v10 + 64) = v13;
    *(_QWORD *)(v10 + 72) = 0xD000000000000033;
    *(_QWORD *)(v10 + 80) = 0x80000001D5E49010;
    *(_QWORD *)(v10 + 136) = v12;
    *(_QWORD *)(v10 + 144) = v13;
    *(_QWORD *)(v10 + 112) = v8;
    *(_QWORD *)(v10 + 120) = a2;
    __asm { FMOV            V0.2D, #2.0 }
    v19 = _Q0;
    sub_1D5E376B0();
    *(_QWORD *)(v10 + 176) = v12;
    *(_QWORD *)(v10 + 184) = v13;
    *(_QWORD *)(v10 + 152) = 0;
    *(_QWORD *)(v10 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    *(_OWORD *)v6 = v19;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
  }
  else
  {
    *(double *)v6 = a3;
    *(double *)(v6 + 8) = a4;
    *(double *)(v6 + 16) = a5;
    *(double *)(v6 + 24) = a6;
  }
  return result;
}

uint64_t sub_1D5DC5104(double a1, double a2, double a3, double a4)
{
  return sub_1D5DC5120(0xD000000000000036, 0x80000001D5E49180, a1, a2, a3, a4);
}

uint64_t sub_1D5DC5120(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6)
{
  double *v6;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;

  v8 = result;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  if (a3 < 0.0 || a4 < 0.0 || a5 < 0.0 || a6 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v13 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1D5E38580;
    v15 = v13;
    sub_1D5E376B0();
    v16 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEA968];
    v17 = sub_1D5D889BC();
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0xE000000000000000;
    *(_QWORD *)(v14 + 96) = v16;
    *(_QWORD *)(v14 + 104) = v17;
    *(_QWORD *)(v14 + 64) = v17;
    *(_QWORD *)(v14 + 72) = 0xD000000000000033;
    *(_QWORD *)(v14 + 80) = 0x80000001D5E49010;
    *(_QWORD *)(v14 + 136) = v16;
    *(_QWORD *)(v14 + 144) = v17;
    *(_QWORD *)(v14 + 112) = v8;
    *(_QWORD *)(v14 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v14 + 176) = v16;
    *(_QWORD *)(v14 + 184) = v17;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v11 = 1.0;
    v12 = 0.0;
    v10 = 0.0;
    v9 = 1.0;
  }
  *v6 = v12;
  v6[1] = v11;
  v6[2] = v10;
  v6[3] = v9;
  return result;
}

void sub_1D5DC5318(double a1, double a2, double a3, double a4)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;

  v5 = a4;
  v6 = a3;
  v7 = a2;
  v8 = a1;
  if (a1 < 0.0 || a2 < 0.0 || a3 < 0.0 || a4 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v9 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1D5E38580;
    v11 = v9;
    sub_1D5E376B0();
    v12 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
    v13 = sub_1D5D889BC();
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0xE000000000000000;
    *(_QWORD *)(v10 + 96) = v12;
    *(_QWORD *)(v10 + 104) = v13;
    *(_QWORD *)(v10 + 64) = v13;
    *(_QWORD *)(v10 + 72) = 0xD000000000000033;
    *(_QWORD *)(v10 + 80) = 0x80000001D5E49010;
    *(_QWORD *)(v10 + 136) = v12;
    *(_QWORD *)(v10 + 144) = v13;
    *(_QWORD *)(v10 + 112) = 0xD000000000000036;
    *(_QWORD *)(v10 + 120) = 0x80000001D5E49140;
    __asm { FMOV            V0.2D, #10.0 }
    sub_1D5E376B0();
    *(_QWORD *)(v10 + 176) = v12;
    *(_QWORD *)(v10 + 184) = v13;
    *(_QWORD *)(v10 + 152) = 0;
    *(_QWORD *)(v10 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v8 = 10.0;
    v7 = 10.0;
    v6 = 10.0;
    v5 = 10.0;
  }
  *v4 = v8;
  v4[1] = v7;
  v4[2] = v6;
  v4[3] = v5;
}

void sub_1D5DC5518(double a1, double a2, double a3, double a4)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;

  v5 = a4;
  v6 = a3;
  v7 = a2;
  v8 = a1;
  if (a1 < 0.0 || a2 < 0.0 || a3 < 0.0 || a4 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v9 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1D5E38580;
    v11 = v9;
    sub_1D5E376B0();
    v12 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
    v13 = sub_1D5D889BC();
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0xE000000000000000;
    *(_QWORD *)(v10 + 96) = v12;
    *(_QWORD *)(v10 + 104) = v13;
    *(_QWORD *)(v10 + 64) = v13;
    *(_QWORD *)(v10 + 72) = 0xD000000000000033;
    *(_QWORD *)(v10 + 80) = 0x80000001D5E49010;
    *(_QWORD *)(v10 + 136) = v12;
    *(_QWORD *)(v10 + 144) = v13;
    *(_QWORD *)(v10 + 112) = 0xD000000000000036;
    *(_QWORD *)(v10 + 120) = 0x80000001D5E49100;
    __asm { FMOV            V0.2D, #3.0 }
    sub_1D5E376B0();
    *(_QWORD *)(v10 + 176) = v12;
    *(_QWORD *)(v10 + 184) = v13;
    *(_QWORD *)(v10 + 152) = 0;
    *(_QWORD *)(v10 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    v8 = 3.0;
    v7 = 3.0;
    v6 = 3.0;
    v5 = 3.0;
  }
  *v4 = v8;
  v4[1] = v7;
  v4[2] = v6;
  v4[3] = v5;
}

uint64_t sub_1D5DC5718(double a1, double a2, double a3, double a4)
{
  return sub_1D5DC5734(0xD000000000000035, 0x80000001D5E490C0, a1, a2, a3, a4);
}

uint64_t sub_1D5DC5734(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6)
{
  double *v6;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;

  v8 = result;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  if (a3 < 0.0 || a4 < 0.0 || a5 < 0.0 || a6 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v13 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1D5E38580;
    v15 = v13;
    sub_1D5E376B0();
    v16 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEA968];
    v17 = sub_1D5D889BC();
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0xE000000000000000;
    *(_QWORD *)(v14 + 96) = v16;
    *(_QWORD *)(v14 + 104) = v17;
    *(_QWORD *)(v14 + 64) = v17;
    *(_QWORD *)(v14 + 72) = 0xD000000000000033;
    *(_QWORD *)(v14 + 80) = 0x80000001D5E49010;
    *(_QWORD *)(v14 + 136) = v16;
    *(_QWORD *)(v14 + 144) = v17;
    *(_QWORD *)(v14 + 112) = v8;
    *(_QWORD *)(v14 + 120) = a2;
    __asm { FMOV            V0.2D, #1.0 }
    sub_1D5E376B0();
    *(_QWORD *)(v14 + 176) = v16;
    *(_QWORD *)(v14 + 184) = v17;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    v12 = 1.0;
    v11 = 1.0;
    v10 = 1.0;
    v9 = 1.0;
  }
  *v6 = v12;
  v6[1] = v11;
  v6[2] = v10;
  v6[3] = v9;
  return result;
}

uint64_t sub_1D5DC5928(double a1, double a2, double a3, double a4)
{
  return sub_1D5DC5944(0xD000000000000031, 0x80000001D5E49080, a1, a2, a3, a4);
}

uint64_t sub_1D5DC5944(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;

  v8 = result;
  if (a3 < 0.0 || a4 < 0.0 || a5 < 0.0 || a6 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v9 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1D5E38580;
    v11 = v9;
    sub_1D5E376B0();
    v12 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
    v13 = sub_1D5D889BC();
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0xE000000000000000;
    *(_QWORD *)(v10 + 96) = v12;
    *(_QWORD *)(v10 + 104) = v13;
    *(_QWORD *)(v10 + 64) = v13;
    *(_QWORD *)(v10 + 72) = 0xD000000000000033;
    *(_QWORD *)(v10 + 80) = 0x80000001D5E49010;
    *(_QWORD *)(v10 + 136) = v12;
    *(_QWORD *)(v10 + 144) = v13;
    *(_QWORD *)(v10 + 112) = v8;
    *(_QWORD *)(v10 + 120) = a2;
    sub_1D5E376B0();
    *(_QWORD *)(v10 + 176) = v12;
    *(_QWORD *)(v10 + 184) = v13;
    *(_QWORD *)(v10 + 152) = 0;
    *(_QWORD *)(v10 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
    *(_OWORD *)v6 = xmmword_1D5E3D880;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
  }
  else
  {
    *(double *)v6 = a3;
    *(double *)(v6 + 8) = a4;
    *(double *)(v6 + 16) = a5;
    *(double *)(v6 + 24) = a6;
  }
  return result;
}

void sub_1D5DC5B40(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;

  if (a1 < 0.0 || a2 < 0.0 || a3 < 0.0 || a4 < 0.0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v5 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1D5E38580;
    v7 = v5;
    sub_1D5E376B0();
    v8 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEA968];
    v9 = sub_1D5D889BC();
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0xE000000000000000;
    *(_QWORD *)(v6 + 96) = v8;
    *(_QWORD *)(v6 + 104) = v9;
    *(_QWORD *)(v6 + 64) = v9;
    *(_QWORD *)(v6 + 72) = 0xD000000000000033;
    *(_QWORD *)(v6 + 80) = 0x80000001D5E49010;
    *(_QWORD *)(v6 + 136) = v8;
    *(_QWORD *)(v6 + 144) = v9;
    *(_QWORD *)(v6 + 112) = 0xD00000000000002FLL;
    *(_QWORD *)(v6 + 120) = 0x80000001D5E49050;
    sub_1D5E376B0();
    *(_QWORD *)(v6 + 176) = v8;
    *(_QWORD *)(v6 + 184) = v9;
    *(_QWORD *)(v6 + 152) = 0;
    *(_QWORD *)(v6 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    swift_bridgeObjectRelease();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
  }
  else
  {
    *(double *)v4 = a1;
    *(double *)(v4 + 8) = a2;
    *(double *)(v4 + 16) = a3;
    *(double *)(v4 + 24) = a4;
  }
}

uint64_t sub_1D5DC5D3C(double a1)
{
  return sub_1D5D86A68(0xD000000000000022, 0x80000001D5E48130, a1);
}

uint64_t sub_1D5DC5D58(uint64_t a1)
{
  return sub_1D5DC5D74(a1, 0xD000000000000013, 0x80000001D5E48110);
}

uint64_t sub_1D5DC5D74(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;

  v4 = result;
  if (result < 0)
  {
    if (qword_1EFFB50D0 != -1)
      swift_once();
    v7 = (void *)qword_1EFFB52C8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1D5E38580;
    v9 = v7;
    sub_1D5E376B0();
    v10 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1D5D889BC();
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0xE000000000000000;
    *(_QWORD *)(v8 + 96) = v10;
    *(_QWORD *)(v8 + 104) = v11;
    *(_QWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 72) = 0xD00000000000001CLL;
    *(_QWORD *)(v8 + 80) = 0x80000001D5E480F0;
    *(_QWORD *)(v8 + 136) = v10;
    *(_QWORD *)(v8 + 144) = v11;
    *(_QWORD *)(v8 + 112) = a2;
    *(_QWORD *)(v8 + 120) = a3;
    v4 = 100;
    sub_1D5E376B0();
    *(_QWORD *)(v8 + 176) = v10;
    *(_QWORD *)(v8 + 184) = v11;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 160) = 0xE000000000000000;
    sub_1D5E375FC();
    sub_1D5E373A4();

    result = swift_bridgeObjectRelease();
  }
  *v3 = v4;
  return result;
}

uint64_t sub_1D5DC5F18(double a1)
{
  return sub_1D5D86A68(0xD00000000000001BLL, 0x80000001D5E480D0, a1);
}

uint64_t sub_1D5DC5F34(double a1)
{
  return sub_1D5D86A68(0xD000000000000016, 0x80000001D5E480B0, a1);
}

uint64_t sub_1D5DC5F50(double a1)
{
  return sub_1D5D86A68(0xD000000000000010, 0x80000001D5E48090, a1);
}

_QWORD *sub_1D5DC5F6C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  _QWORD __dst[57];

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5C58);
  v2 = (_QWORD *)sub_1D5E37710();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return v2;
  }
  swift_retain();
  memcpy(__dst, (const void *)(a1 + 32), 0x1BAuLL);
  v4 = __dst[0];
  v5 = __dst[1];
  sub_1D5DC8538((uint64_t)__dst);
  v6 = sub_1D5D7FFCC(v4, v5);
  if ((v7 & 1) != 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release();
    goto LABEL_11;
  }
  v8 = 480;
  while (1)
  {
    *(_QWORD *)((char *)v2 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
    v9 = (uint64_t *)(v2[6] + 16 * v6);
    *v9 = v4;
    v9[1] = v5;
    result = memcpy((void *)(v2[7] + 432 * v6), &__dst[2], 0x1AAuLL);
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v2[2] = v13;
    if (!--v3)
      goto LABEL_9;
    memcpy(__dst, (const void *)(a1 + v8), 0x1BAuLL);
    v4 = __dst[0];
    v5 = __dst[1];
    sub_1D5DC8538((uint64_t)__dst);
    v6 = sub_1D5D7FFCC(v4, v5);
    v8 += 448;
    if ((v14 & 1) != 0)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

unint64_t sub_1D5DC60DC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  unint64_t result;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5D0);
  v2 = (_QWORD *)sub_1D5E37710();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *((_BYTE *)v4 - 8);
    v8 = *v4;
    v9 = v4[1];
    v10 = v4[2];
    v11 = v4[3];
    v12 = *((_BYTE *)v4 + 32);
    v13 = v4[5];
    v14 = *((_BYTE *)v4 + 48);
    swift_bridgeObjectRetain();
    result = sub_1D5D7FFCC(v5, v6);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v17 = (uint64_t *)(v2[6] + 16 * result);
    *v17 = v5;
    v17[1] = v6;
    v18 = v2[7] + (result << 6);
    *(_BYTE *)v18 = v7;
    *(_QWORD *)(v18 + 8) = v8;
    *(_QWORD *)(v18 + 16) = v9;
    *(_QWORD *)(v18 + 24) = v10;
    *(_QWORD *)(v18 + 32) = v11;
    *(_BYTE *)(v18 + 40) = v12;
    *(_QWORD *)(v18 + 48) = v13;
    *(_BYTE *)(v18 + 56) = v14;
    v19 = v2[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v2[2] = v21;
    v4 += 10;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D5DC6240(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5C48);
  v2 = (_QWORD *)sub_1D5E37710();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_DWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1D5D7FFCC(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_DWORD *)(v2[7] + 4 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 6;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D5DC6350(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5C40);
  v2 = (_QWORD *)sub_1D5E37710();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = sub_1D5D7FFCC(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D5DC6468(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5F0);
  v2 = (_QWORD *)sub_1D5E37710();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 64);
  while (1)
  {
    v5 = *(v4 - 4);
    v6 = *(v4 - 3);
    v7 = *(v4 - 2);
    v8 = *(v4 - 1);
    v9 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1D5D7FFCC(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = (_QWORD *)(v2[7] + 24 * result);
    *v13 = v7;
    v13[1] = v8;
    v13[2] = v9;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v2[2] = v16;
    v4 += 5;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D5DC6598(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF848);
  v2 = (_QWORD *)sub_1D5E37710();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 64);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 4);
    v6 = *((_QWORD *)v4 - 3);
    v7 = *((_QWORD *)v4 - 2);
    v8 = *((_QWORD *)v4 - 1);
    v9 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1D5D7FFCC(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = v2[7] + 24 * result;
    *(_QWORD *)v13 = v7;
    *(_QWORD *)(v13 + 8) = v8;
    *(_BYTE *)(v13 + 16) = v9;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v2[2] = v16;
    v4 += 40;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D5DC66D8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD7E0);
  v2 = (_QWORD *)sub_1D5E37710();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 64);
  while (1)
  {
    v5 = *(v4 - 4);
    v6 = *(v4 - 3);
    v7 = *(v4 - 2);
    v8 = *(v4 - 1);
    v9 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1D5D7FFCC(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = (_QWORD *)(v2[7] + 24 * result);
    *v13 = v7;
    v13[1] = v8;
    v13[2] = v9;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v2[2] = v16;
    v4 += 5;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_1D5DC6818@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _OWORD v12[34];
  _BYTE v13[1008];
  _BYTE __src[1896];

  sub_1D5DC69F4((uint64_t)__src);
  sub_1D5DC6D60((uint64_t)v13);
  sub_1D5D88570(0xD00000000000001BLL, 0x80000001D5E49D80, 1.0, 60.0);
  v12[0] = 0uLL;
  sub_1D5D88570(0xD00000000000001ALL, 0x80000001D5E49D60, 0.0, 0.0);
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v12[0] = sub_1D5DC8324(MEMORY[0x1E0DEE9D8]);
  v3 = swift_bridgeObjectRetain();
  sub_1D5D7BA38(v3);
  v4 = *(_QWORD *)&v12[0];
  v5 = sub_1D5DC60DC(v2);
  sub_1D5DC734C((uint64_t)v12);
  *(_OWORD *)a1 = xmmword_1D5E3D8A0;
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 1;
  *(_OWORD *)(a1 + 24) = xmmword_1D5E3D8B0;
  memcpy((void *)(a1 + 40), __src, 0x768uLL);
  memcpy((void *)(a1 + 1936), v13, 0x3EBuLL);
  *(_OWORD *)(a1 + 2944) = xmmword_1D5E3D8C0;
  *(_QWORD *)(a1 + 2960) = 0x409F400000000000;
  *(_OWORD *)(a1 + 2968) = xmmword_1D5E3D890;
  *(_QWORD *)(a1 + 2984) = 0;
  *(_QWORD *)(a1 + 2992) = 0;
  *(_QWORD *)(a1 + 3000) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 3008) = 5;
  *(_QWORD *)(a1 + 3016) = v4;
  *(_QWORD *)(a1 + 3024) = v5;
  *(_QWORD *)(a1 + 3032) = 0x3FEFAE147AE147AELL;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 3040) = _Q0;
  return memcpy((void *)(a1 + 3056), v12, 0x220uLL);
}

double sub_1D5DC69C8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_1D5E3D8A0;
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 1;
  *(_QWORD *)&result = 30;
  *(_OWORD *)(a1 + 24) = xmmword_1D5E3D8B0;
  return result;
}

void sub_1D5DC69F4(uint64_t a1@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7[54];
  uint64_t v8[3];
  uint64_t v9[53];
  char v10;
  uint64_t v11[54];
  _BYTE __src[432];
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[4];
  _BYTE v16[48];
  __int16 v17;
  _OWORD v18[5];

  if (qword_1ED9ADB80 != -1)
    swift_once();
  v18[0] = xmmword_1ED9ADB40;
  v18[1] = xmmword_1ED9ADB50;
  v18[2] = xmmword_1ED9ADB60;
  v18[3] = xmmword_1ED9ADB70;
  sub_1D5DC83FC((uint64_t)v18);
  sub_1D5DD0D08(0x3FF0000000000000, 0, 1, 0, MEMORY[0x1E0DEE9E8], v11);
  v2 = *(double *)v11;
  v3 = v11[1];
  v4 = v11[2];
  memset(v16, 0, sizeof(v16));
  v17 = 256;
  if (qword_1ED9ADA20 != -1)
    swift_once();
  v13[0] = xmmword_1ED9AE640;
  v13[1] = xmmword_1ED9AE650;
  v14 = qword_1ED9AE660;
  sub_1D5DC745C(2, (uint64_t)v13, 2, (uint64_t)v13, 2, (uint64_t)v13, 2, (uint64_t)v13, (uint64_t)__src, v2, 5, (uint64_t)v13, 3, (uint64_t)v13, (uint64_t)v18, v3, v4, (uint64_t)v16);
  v15[0] = xmmword_1ED9ADB40;
  v15[1] = xmmword_1ED9ADB50;
  v15[2] = xmmword_1ED9ADB60;
  v15[3] = xmmword_1ED9ADB70;
  sub_1D5DC83FC((uint64_t)v15);
  v5 = MEMORY[0x1E0DEE9E8];
  sub_1D5DD0D08(0x3FF0000000000000, 0, 1, 0, MEMORY[0x1E0DEE9E8], v9);
  sub_1D5DC77A8(100, (uint64_t)v13, 100, (uint64_t)v13, 2, (uint64_t)v13, 2, (uint64_t)v13, (uint64_t)v11, *(double *)v9, 5, (uint64_t)v13, 3, (uint64_t)v13, (uint64_t)v15, v9[1], v9[2], (uint64_t)v16);
  v10 = 0;
  v6 = sub_1D5DC5F6C(MEMORY[0x1E0DEE9D8]);
  sub_1D5DC83FC((uint64_t)v15);
  sub_1D5DD0D08(0x3FF0000000000000, 0, 1, 0, v5, v7);
  sub_1D5DC7AF4(2, (uint64_t)v13, 2, (uint64_t)v13, 2, (uint64_t)v13, 2, (uint64_t)v13, (uint64_t)v9, *(double *)v7, 30, (uint64_t)v13, 3, (uint64_t)v13, (uint64_t)v15, v7[1], v7[2], (uint64_t)v16);
  sub_1D5DC83FC((uint64_t)v15);
  sub_1D5DD0D08(0x3FF0000000000000, 0, 1, 0, v5, v8);
  sub_1D5DC7E28(2, (uint64_t)v13, 2, (uint64_t)v13, 2, (uint64_t)v13, 2, (uint64_t)v13, (uint64_t)v7, *(double *)v8, 30, (uint64_t)v13, 3, (uint64_t)v13, (uint64_t)v15, v8[1], v8[2], (uint64_t)v16);
  sub_1D5DCE008(__src, v11, &v10, 0, (uint64_t)v6, 0x7FFFFFFFFFFFFFFFLL, 0, 0, a1, 0.5, 1.0, 1.0, 0.0, 0.0, 0.9, 0.3, 1.2, 1000, v9,
    0,
    37,
    v7,
    0x3FF8000000000000,
    0x3FF0000000000000,
    0x3FF0000000000000,
    0x3FE0000000000000,
    1.1);
}

void sub_1D5DC6D60(uint64_t a1@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  __int128 v29[3];
  _OWORD v30[3];
  _OWORD v31[2];
  __int128 v32[2];
  __int128 v33[3];
  _OWORD v34[3];
  __int128 v35[11];
  __int128 v36[3];
  _OWORD v37[3];
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  char v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  _OWORD v68[2];

  v68[0] = xmmword_1D5E3D820;
  v68[1] = xmmword_1D5E3D830;
  sub_1D5D7B194(50, (uint64_t)&v64, 0.0, 1.0, 1.0, 1.0, 0.0);
  v60 = v64;
  v61 = v65;
  v62 = v66;
  v63 = v67;
  sub_1D5D86DD4(0, 0, 1, 0, 0, (uint64_t)&v49, 0.05, 1.0, 1.0, 0.2, 5.0, 0.0, 0.0, 2.0, 2.0, 0.3);
  v38 = v49;
  v39 = v50;
  v40 = v51;
  v41 = v52;
  v42 = v53;
  v43 = v54;
  v44 = v55;
  v45 = v56;
  v46 = v57;
  v47 = v58;
  v48 = v59;
  sub_1D5D7AE5C((double *)v37, 1.1, 1.1, 1.1, 0.0, 1.0, 1.1);
  v36[0] = v37[0];
  v36[1] = v37[1];
  v36[2] = v37[2];
  sub_1D5DC8218((uint64_t)v35);
  sub_1D5D7AE5C((double *)v34, 1.1, 1.1, 1.1, 0.0, 1.0, 1.1);
  v33[0] = v34[0];
  v33[1] = v34[1];
  v33[2] = v34[2];
  __asm { FMOV            V1.2D, #2.0 }
  v32[0] = xmmword_1D5E3D8D0;
  v32[1] = _Q1;
  v31[0] = xmmword_1D5E3D840;
  v31[1] = xmmword_1D5E3D850;
  sub_1D5D7AE5C((double *)v30, 1.1, 1.1, 1.1, 0.0, 1.0, 1.1);
  v29[0] = v30[0];
  v29[1] = v30[1];
  v29[2] = v30[2];
  sub_1D5D86DD4(0, 0, 1, 0, 0, (uint64_t)&v18, 0.05, 1.0, 1.0, 0.2, 5.0, 0.0, 0.0, 2.0, 2.0, 0.3);
  v7 = v18;
  v8 = v19;
  v9 = v20;
  v10 = v21;
  v11 = v22;
  v12 = v23;
  v13 = v24;
  v14 = v25;
  v15 = v26;
  v16 = v27;
  v17 = v28;
  sub_1D5D85E38((double *)v68, 0, (uint64_t *)&v60, &v38, 1, v36, 1, v35, a1, 1.0, 0.0, 0.0, 0.25, 0.14, 0.8, 0.8, 1.0, 1.0, 1.0,
    0.75,
    0.5,
    1.0,
    1.0,
    0.02,
    0.0,
    0.02,
    0.0,
    0.1,
    0.1,
    v33,
    v32,
    0.0,
    0.1,
    43200.0,
    1.0,
    0,
    0.1,
    0.64,
    50.0,
    2.0,
    0.64,
    0.8,
    0.0,
    0.0,
    0.0,
    (double *)v31,
    0.0,
    v29,
    &v7,
    0.0,
    0.0,
    0.0);
}

void sub_1D5DC70F4(uint64_t a1@<X8>)
{
  __n128 v2[2];

  sub_1D5D88570(0xD00000000000001BLL, 0x80000001D5E49D80, 1.0, 60.0);
  sub_1D5D88570(0xD00000000000001ALL, 0x80000001D5E49D60, 0.0, 0.0);
  v2[0] = (__n128)xmmword_1D5E3D890;
  v2[1] = 0uLL;
  sub_1D5D89694(v2, 5, a1, 1.0, 5000.0, 2000.0, 1.0);
}

uint64_t sub_1D5DC71C8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;

  v4 = sub_1D5DC8324(MEMORY[0x1E0DEE9D8]);
  v2 = swift_bridgeObjectRetain();
  result = sub_1D5D7BA38(v2);
  *a1 = v4;
  return result;
}

void *sub_1D5DC7210@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[544];

  sub_1D5DC734C((uint64_t)v3);
  *(_OWORD *)a1 = xmmword_1D5E3D8E0;
  *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
  return memcpy((void *)(a1 + 24), v3, 0x220uLL);
}

void sub_1D5DC7260(_QWORD *a1@<X8>)
{
  *a1 = 0x4024000000000000;
}

void sub_1D5DC726C(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x4008000000000000;
  *(_WORD *)(a1 + 8) = 256;
  *(_BYTE *)(a1 + 10) = 1;
}

void sub_1D5DC7288(_QWORD *a1@<X8>)
{
  *a1 = 10;
}

void sub_1D5DC7294(_QWORD *a1@<X8>)
{
  *a1 = 30;
}

double sub_1D5DC72A0@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.99;
  *(_OWORD *)a1 = xmmword_1D5E3D8E0;
  *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
  return result;
}

__n128 sub_1D5DC72B8@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #1.0 }
  *a1 = result;
  a1[1] = result;
  return result;
}

double sub_1D5DC72C4@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1D5E3A110;
  a1[1] = xmmword_1D5E3A110;
  return result;
}

double sub_1D5DC72D4@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 1.0;
  *a1 = xmmword_1D5E3D870;
  a1[1] = xmmword_1D5E3D870;
  return result;
}

__n128 sub_1D5DC72E4@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #2.0 }
  *a1 = result;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  return result;
}

double sub_1D5DC72F4@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_1D5E3D880;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

double sub_1D5DC7308@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

__n128 sub_1D5DC7314@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #10.0 }
  *a1 = result;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  return result;
}

__n128 sub_1D5DC7324@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #3.0 }
  *a1 = result;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  return result;
}

__n128 sub_1D5DC7334@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #3.0 }
  *a1 = result;
  a1[1] = result;
  return result;
}

__n128 sub_1D5DC7340@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #10.0 }
  *a1 = result;
  a1[1] = result;
  return result;
}

double sub_1D5DC734C@<D0>(uint64_t a1@<X8>)
{
  double result;
  __n128 v10[2];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14[2];
  __int128 v15[2];
  __int128 v16[2];
  __int128 v17[2];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  _OWORD v43[2];
  _OWORD v44[2];

  __asm { FMOV            V0.2D, #1.0 }
  v44[0] = _Q0;
  v44[1] = _Q0;
  v43[0] = xmmword_1D5E3A110;
  v43[1] = xmmword_1D5E3A110;
  v42[0] = xmmword_1D5E3D870;
  v42[1] = xmmword_1D5E3D870;
  v39 = xmmword_1D5E3D880;
  v40 = 0;
  v41 = 0;
  __asm { FMOV            V3.2D, #3.0 }
  v36 = _Q3;
  v37 = 0;
  v38 = 0;
  __asm { FMOV            V4.2D, #10.0 }
  v33 = _Q4;
  v34 = 0;
  v35 = 0;
  v30 = xmmword_1D5E3D880;
  v31 = 0;
  v32 = 0;
  __asm { FMOV            V5.2D, #2.0 }
  v27 = _Q5;
  v28 = 0;
  v29 = 0;
  v24 = xmmword_1D5E3D880;
  v25 = 0;
  v26 = 0;
  v21 = _Q5;
  v22 = 0;
  v23 = 0;
  v17[1] = xmmword_1D5E3A110;
  v18 = _Q5;
  v19 = 0;
  v20 = 0;
  v16[1] = _Q4;
  v17[0] = xmmword_1D5E3A110;
  v15[1] = _Q3;
  v16[0] = _Q4;
  v14[1] = _Q0;
  v15[0] = _Q3;
  v14[0] = _Q0;
  v12 = 0;
  v13 = 0;
  v11 = xmmword_1D5E3D880;
  memset(v10, 0, sizeof(v10));
  *(_QWORD *)&result = sub_1D5DCD5F8((double *)v44, (double *)v43, (double *)v42, (double *)&v39, (double *)&v36, (double *)&v33, (double *)&v30, (double *)&v27, a1, (double *)&v24, &v21, &v18, v17, v16, v15, v14, &v11, v10).n128_u64[0];
  return result;
}

uint64_t sub_1D5DC745C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v26 = *(_QWORD *)a15;
  v39 = *(_QWORD *)(a15 + 8);
  v37 = *(_OWORD *)(a15 + 32);
  v38 = *(_OWORD *)(a15 + 16);
  v27 = *(_QWORD *)(a15 + 48);
  v36 = *(_QWORD *)(a15 + 56);
  sub_1D5DC446C(a1, 0xD000000000000036, 0x80000001D5E49B50);
  *(_QWORD *)a9 = a1;
  v28 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a9 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a9 + 24) = v28;
  *(_QWORD *)(a9 + 40) = *(_QWORD *)(a2 + 32);
  sub_1D5DC446C(a3, 0xD000000000000039, 0x80000001D5E49B10);
  *(_QWORD *)(a9 + 48) = a3;
  v29 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a9 + 56) = *(_OWORD *)a4;
  *(_OWORD *)(a9 + 72) = v29;
  *(_QWORD *)(a9 + 88) = *(_QWORD *)(a4 + 32);
  sub_1D5DC446C(a5, 0xD000000000000039, 0x80000001D5E49AD0);
  *(_QWORD *)(a9 + 96) = a5;
  v30 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a9 + 104) = *(_OWORD *)a6;
  *(_OWORD *)(a9 + 120) = v30;
  *(_QWORD *)(a9 + 136) = *(_QWORD *)(a6 + 32);
  sub_1D5DC446C(a7, 0xD000000000000031, 0x80000001D5E49A90);
  *(_QWORD *)(a9 + 144) = a7;
  v31 = *(_OWORD *)(a8 + 16);
  *(_OWORD *)(a9 + 152) = *(_OWORD *)a8;
  *(_OWORD *)(a9 + 168) = v31;
  *(_QWORD *)(a9 + 184) = *(_QWORD *)(a8 + 32);
  sub_1D5D8AAD8(a11, 0xD000000000000029, 0x80000001D5E49A60);
  *(_QWORD *)(a9 + 192) = a11;
  v32 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)(a9 + 200) = *(_OWORD *)a12;
  *(_OWORD *)(a9 + 216) = v32;
  *(_QWORD *)(a9 + 232) = *(_QWORD *)(a12 + 32);
  sub_1D5DC42C8(a13, 0xD000000000000029, 0x80000001D5E49A30);
  v33 = *(_OWORD *)(a14 + 16);
  *(_OWORD *)(a9 + 248) = *(_OWORD *)a14;
  *(_QWORD *)(a9 + 240) = a13;
  *(_OWORD *)(a9 + 264) = v33;
  *(_QWORD *)(a9 + 280) = *(_QWORD *)(a14 + 32);
  sub_1D5DC83FC(a15);
  sub_1D5DC3F98(a15, 0xD000000000000039, 0x80000001D5E499F0);
  *(_QWORD *)(a9 + 288) = v26;
  *(_QWORD *)(a9 + 296) = v39;
  *(_OWORD *)(a9 + 304) = v38;
  *(_OWORD *)(a9 + 320) = v37;
  *(_QWORD *)(a9 + 336) = v27;
  *(_QWORD *)(a9 + 344) = v36;
  swift_bridgeObjectRetain();
  sub_1D5DC3D4C(a16, a17, 0xD000000000000030, 0x80000001D5E499B0, a10);
  *(double *)(a9 + 352) = a10;
  *(_QWORD *)(a9 + 360) = a16;
  *(_QWORD *)(a9 + 368) = a17;
  return sub_1D5DC84BC(a18, a9 + 376);
}

uint64_t sub_1D5DC77A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v26 = *(_QWORD *)a15;
  v39 = *(_QWORD *)(a15 + 8);
  v37 = *(_OWORD *)(a15 + 32);
  v38 = *(_OWORD *)(a15 + 16);
  v27 = *(_QWORD *)(a15 + 48);
  v36 = *(_QWORD *)(a15 + 56);
  sub_1D5DC5D74(a1, 0xD000000000000031, 0x80000001D5E49970);
  *(_QWORD *)a9 = a1;
  v28 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a9 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a9 + 24) = v28;
  *(_QWORD *)(a9 + 40) = *(_QWORD *)(a2 + 32);
  sub_1D5DC5D74(a3, 0xD000000000000034, 0x80000001D5E49930);
  *(_QWORD *)(a9 + 48) = a3;
  v29 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a9 + 56) = *(_OWORD *)a4;
  *(_OWORD *)(a9 + 72) = v29;
  *(_QWORD *)(a9 + 88) = *(_QWORD *)(a4 + 32);
  sub_1D5DC446C(a5, 0xD000000000000034, 0x80000001D5E498F0);
  *(_QWORD *)(a9 + 96) = a5;
  v30 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a9 + 104) = *(_OWORD *)a6;
  *(_OWORD *)(a9 + 120) = v30;
  *(_QWORD *)(a9 + 136) = *(_QWORD *)(a6 + 32);
  sub_1D5DC446C(a7, 0xD00000000000002CLL, 0x80000001D5E498C0);
  *(_QWORD *)(a9 + 144) = a7;
  v31 = *(_OWORD *)(a8 + 16);
  *(_OWORD *)(a9 + 152) = *(_OWORD *)a8;
  *(_OWORD *)(a9 + 168) = v31;
  *(_QWORD *)(a9 + 184) = *(_QWORD *)(a8 + 32);
  sub_1D5D8AAD8(a11, 0xD000000000000024, 0x80000001D5E49890);
  *(_QWORD *)(a9 + 192) = a11;
  v32 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)(a9 + 200) = *(_OWORD *)a12;
  *(_OWORD *)(a9 + 216) = v32;
  *(_QWORD *)(a9 + 232) = *(_QWORD *)(a12 + 32);
  sub_1D5DC42C8(a13, 0xD000000000000024, 0x80000001D5E49860);
  v33 = *(_OWORD *)(a14 + 16);
  *(_OWORD *)(a9 + 248) = *(_OWORD *)a14;
  *(_QWORD *)(a9 + 240) = a13;
  *(_OWORD *)(a9 + 264) = v33;
  *(_QWORD *)(a9 + 280) = *(_QWORD *)(a14 + 32);
  sub_1D5DC83FC(a15);
  sub_1D5DC3F98(a15, 0xD000000000000034, 0x80000001D5E49820);
  *(_QWORD *)(a9 + 288) = v26;
  *(_QWORD *)(a9 + 296) = v39;
  *(_OWORD *)(a9 + 304) = v38;
  *(_OWORD *)(a9 + 320) = v37;
  *(_QWORD *)(a9 + 336) = v27;
  *(_QWORD *)(a9 + 344) = v36;
  swift_bridgeObjectRetain();
  sub_1D5DC3D4C(a16, a17, 0xD00000000000002BLL, 0x80000001D5E497F0, a10);
  *(double *)(a9 + 352) = a10;
  *(_QWORD *)(a9 + 360) = a16;
  *(_QWORD *)(a9 + 368) = a17;
  return sub_1D5DC84BC(a18, a9 + 376);
}

uint64_t sub_1D5DC7AF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v26 = *(_QWORD *)a15;
  v39 = *(_QWORD *)(a15 + 8);
  v37 = *(_OWORD *)(a15 + 32);
  v38 = *(_OWORD *)(a15 + 16);
  v27 = *(_QWORD *)(a15 + 48);
  v36 = *(_QWORD *)(a15 + 56);
  sub_1D5DC446C(a1, 0xD000000000000034, 0x80000001D5E497B0);
  *(_QWORD *)a9 = a1;
  v28 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a9 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a9 + 24) = v28;
  *(_QWORD *)(a9 + 40) = *(_QWORD *)(a2 + 32);
  sub_1D5DC446C(a3, 0xD000000000000037, 0x80000001D5E49770);
  *(_QWORD *)(a9 + 48) = a3;
  v29 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a9 + 56) = *(_OWORD *)a4;
  *(_OWORD *)(a9 + 72) = v29;
  *(_QWORD *)(a9 + 88) = *(_QWORD *)(a4 + 32);
  sub_1D5DC446C(a5, 0xD000000000000037, 0x80000001D5E49730);
  *(_QWORD *)(a9 + 96) = a5;
  v30 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a9 + 104) = *(_OWORD *)a6;
  *(_OWORD *)(a9 + 120) = v30;
  *(_QWORD *)(a9 + 136) = *(_QWORD *)(a6 + 32);
  sub_1D5DC446C(a7, 0xD00000000000002FLL, 0x80000001D5E49700);
  *(_QWORD *)(a9 + 144) = a7;
  v31 = *(_OWORD *)(a8 + 16);
  *(_OWORD *)(a9 + 152) = *(_OWORD *)a8;
  *(_OWORD *)(a9 + 168) = v31;
  *(_QWORD *)(a9 + 184) = *(_QWORD *)(a8 + 32);
  sub_1D5DC3BA8(a11, 0xD000000000000027, 0x80000001D5E496D0);
  *(_QWORD *)(a9 + 192) = a11;
  v32 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)(a9 + 200) = *(_OWORD *)a12;
  *(_OWORD *)(a9 + 216) = v32;
  *(_QWORD *)(a9 + 232) = *(_QWORD *)(a12 + 32);
  sub_1D5DC39F8(a13);
  v33 = *(_OWORD *)(a14 + 16);
  *(_OWORD *)(a9 + 248) = *(_OWORD *)a14;
  *(_QWORD *)(a9 + 240) = a13;
  *(_OWORD *)(a9 + 264) = v33;
  *(_QWORD *)(a9 + 280) = *(_QWORD *)(a14 + 32);
  sub_1D5DC83FC(a15);
  sub_1D5DC3F98(a15, 0xD000000000000037, 0x80000001D5E49660);
  *(_QWORD *)(a9 + 288) = v26;
  *(_QWORD *)(a9 + 296) = v39;
  *(_OWORD *)(a9 + 304) = v38;
  *(_OWORD *)(a9 + 320) = v37;
  *(_QWORD *)(a9 + 336) = v27;
  *(_QWORD *)(a9 + 344) = v36;
  swift_bridgeObjectRetain();
  sub_1D5DC3D4C(a16, a17, 0xD00000000000002ELL, 0x80000001D5E49630, a10);
  *(double *)(a9 + 352) = a10;
  *(_QWORD *)(a9 + 360) = a16;
  *(_QWORD *)(a9 + 368) = a17;
  return sub_1D5DC84BC(a18, a9 + 376);
}

uint64_t sub_1D5DC7E28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v26 = *(_QWORD *)a15;
  v39 = *(_QWORD *)(a15 + 8);
  v37 = *(_OWORD *)(a15 + 32);
  v38 = *(_OWORD *)(a15 + 16);
  v27 = *(_QWORD *)(a15 + 48);
  v36 = *(_QWORD *)(a15 + 56);
  sub_1D5DC446C(a1, 0xD00000000000002FLL, 0x80000001D5E49600);
  *(_QWORD *)a9 = a1;
  v28 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a9 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a9 + 24) = v28;
  *(_QWORD *)(a9 + 40) = *(_QWORD *)(a2 + 32);
  sub_1D5DC446C(a3, 0xD000000000000032, 0x80000001D5E495C0);
  *(_QWORD *)(a9 + 48) = a3;
  v29 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a9 + 56) = *(_OWORD *)a4;
  *(_OWORD *)(a9 + 72) = v29;
  *(_QWORD *)(a9 + 88) = *(_QWORD *)(a4 + 32);
  sub_1D5DC446C(a5, 0xD000000000000032, 0x80000001D5E49580);
  *(_QWORD *)(a9 + 96) = a5;
  v30 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a9 + 104) = *(_OWORD *)a6;
  *(_OWORD *)(a9 + 120) = v30;
  *(_QWORD *)(a9 + 136) = *(_QWORD *)(a6 + 32);
  sub_1D5DC446C(a7, 0xD00000000000002ALL, 0x80000001D5E49550);
  *(_QWORD *)(a9 + 144) = a7;
  v31 = *(_OWORD *)(a8 + 16);
  *(_OWORD *)(a9 + 152) = *(_OWORD *)a8;
  *(_OWORD *)(a9 + 168) = v31;
  *(_QWORD *)(a9 + 184) = *(_QWORD *)(a8 + 32);
  sub_1D5DC3BA8(a11, 0xD000000000000022, 0x80000001D5E49520);
  *(_QWORD *)(a9 + 192) = a11;
  v32 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)(a9 + 200) = *(_OWORD *)a12;
  *(_OWORD *)(a9 + 216) = v32;
  *(_QWORD *)(a9 + 232) = *(_QWORD *)(a12 + 32);
  sub_1D5DC42C8(a13, 0xD000000000000022, 0x80000001D5E494F0);
  v33 = *(_OWORD *)(a14 + 16);
  *(_OWORD *)(a9 + 248) = *(_OWORD *)a14;
  *(_QWORD *)(a9 + 240) = a13;
  *(_OWORD *)(a9 + 264) = v33;
  *(_QWORD *)(a9 + 280) = *(_QWORD *)(a14 + 32);
  sub_1D5DC83FC(a15);
  sub_1D5DC3F98(a15, 0xD000000000000032, 0x80000001D5E494B0);
  *(_QWORD *)(a9 + 288) = v26;
  *(_QWORD *)(a9 + 296) = v39;
  *(_OWORD *)(a9 + 304) = v38;
  *(_OWORD *)(a9 + 320) = v37;
  *(_QWORD *)(a9 + 336) = v27;
  *(_QWORD *)(a9 + 344) = v36;
  swift_bridgeObjectRetain();
  sub_1D5DC3D4C(a16, a17, 0xD000000000000029, 0x80000001D5E49460, a10);
  *(double *)(a9 + 352) = a10;
  *(_QWORD *)(a9 + 360) = a16;
  *(_QWORD *)(a9 + 368) = a17;
  return sub_1D5DC84BC(a18, a9 + 376);
}

double sub_1D5DC8174@<D0>(double *a1@<X8>)
{
  return sub_1D5D7AE5C(a1, 1.1, 1.1, 1.1, 0.0, 1.0, 1.1);
}

double sub_1D5DC8194@<D0>(uint64_t a1@<X8>)
{
  return sub_1D5D7B194(50, a1, 0.0, 1.0, 1.0, 1.0, 0.0);
}

double sub_1D5DC81B0@<D0>(uint64_t a1@<X8>)
{
  return sub_1D5D86DD4(0, 0, 1, 0, 0, a1, 0.05, 1.0, 1.0, 0.2, 5.0, 0.0, 0.0, 2.0, 2.0, 0.3);
}

double sub_1D5DC8218@<D0>(uint64_t a1@<X8>)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v4 = xmmword_1D5E3D8F0;
  v5 = 0x3FB999999999999ALL;
  v2 = xmmword_1D5E3D8F0;
  v3 = 0x3FB999999999999ALL;
  return sub_1D5D85C00(0, &v4, 1, &v2, 1, 1, a1, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.1, 2.0, 1.0, 0.06, 0.0, 2.0, 1.0);
}

double sub_1D5DC82B8@<D0>(double *a1@<X8>)
{
  return sub_1D5D7ADC8(a1, 0.2, 0.0, 2.0, 2.0);
}

double sub_1D5DC82D0@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.5;
  *(_OWORD *)a1 = xmmword_1D5E3D8F0;
  *(_QWORD *)(a1 + 16) = 0x3FB999999999999ALL;
  return result;
}

unint64_t sub_1D5DC82F0@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = sub_1D5D85858(MEMORY[0x1E0DEE9D8]);
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1D5DC8324(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EFFB5C60);
    v3 = (_QWORD *)sub_1D5E37710();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_1D5D979D0(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

uint64_t sub_1D5DC83FC(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D5DC8430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF890);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D5DC8478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClassicArticleData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D5DC84BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D5DC8504(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D5DC8538(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D5DC85A8(uint64_t a1, void (*a2)(uint64_t *, _QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t i;
  BOOL v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD v31[8];
  char v32;
  uint64_t v33;

  v33 = a1;
  v24 = a4 + 64;
  v4 = 1 << *(_BYTE *)(a4 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a4 + 64);
  v25 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v28 = (v6 - 1) & v6;
  v29 = v8;
  for (i = __clz(__rbit64(v6)) | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v11 << 6))
  {
    v14 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * i);
    v15 = v14[1];
    v16 = *(_QWORD *)(a4 + 56) + 56 * i;
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    v21 = *(_QWORD *)(v16 + 32);
    v22 = *(_QWORD *)(v16 + 40);
    v23 = *(_BYTE *)(v16 + 48);
    v31[0] = *v14;
    v31[1] = v15;
    v31[2] = v17;
    v31[3] = v18;
    v31[4] = v19;
    v31[5] = v20;
    v31[6] = v21;
    v31[7] = v22;
    v32 = v23;
    swift_bridgeObjectRetain();
    sub_1D5D801B0(v17, v18, v19, v20, v21, v22, v23);
    a2(&v33, v31);
    if (v30)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D5D8014C(v17, v18, v19, v20, v21, v22, v23);
      return swift_release();
    }
    swift_bridgeObjectRelease();
    result = sub_1D5D8014C(v17, v18, v19, v20, v21, v22, v23);
    v6 = v28;
    v8 = v29;
    if (v28)
      goto LABEL_4;
LABEL_5:
    v10 = __OFADD__(v8, 1);
    v11 = v8 + 1;
    if (v10)
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v25)
      goto LABEL_26;
    v12 = *(_QWORD *)(v24 + 8 * v11);
    if (!v12)
      break;
LABEL_17:
    v28 = (v12 - 1) & v12;
    v29 = v11;
  }
  v13 = v11 + 1;
  if (v11 + 1 >= v25)
    goto LABEL_26;
  v12 = *(_QWORD *)(v24 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v11 + 2;
  if (v11 + 2 >= v25)
    goto LABEL_26;
  v12 = *(_QWORD *)(v24 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v11 + 3;
  if (v11 + 3 >= v25)
    goto LABEL_26;
  v12 = *(_QWORD *)(v24 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v11 + 4;
  if (v11 + 4 >= v25)
  {
LABEL_26:
    swift_release();
    return v33;
  }
  v12 = *(_QWORD *)(v24 + 8 * v13);
  if (v12)
  {
LABEL_16:
    v11 = v13;
    goto LABEL_17;
  }
  while (1)
  {
    v11 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v11 >= v25)
      goto LABEL_26;
    v12 = *(_QWORD *)(v24 + 8 * v11);
    ++v13;
    if (v12)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1D5DC8844(uint64_t a1, void (*a2)(uint64_t *, _QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  v22 = a1;
  v7 = a4 + 56;
  v8 = 1 << *(_BYTE *)(a4 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a4 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * i);
    v20 = v19[1];
    v21[0] = *v19;
    v21[1] = v20;
    swift_bridgeObjectRetain();
    a2(&v22, v21);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    if (v10)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v11)
      goto LABEL_26;
    v17 = *(_QWORD *)(v7 + 8 * v13);
    if (!v17)
      break;
LABEL_17:
    v10 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v11)
    goto LABEL_26;
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v13 + 2;
  if (v13 + 2 >= v11)
    goto LABEL_26;
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v13 + 3;
  if (v13 + 3 >= v11)
    goto LABEL_26;
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v13 + 4;
  if (v13 + 4 >= v11)
  {
LABEL_26:
    swift_release();
    return v22;
  }
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
  {
LABEL_16:
    v13 = v18;
    goto LABEL_17;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v11)
      goto LABEL_26;
    v17 = *(_QWORD *)(v7 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1D5DC8A04(uint64_t a1, void (*a2)(uint64_t *, _OWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  _OWORD v22[3];
  uint64_t v23;
  __int128 v24;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v27 = a1;
  v20 = a4 + 64;
  v7 = 1 << *(_BYTE *)(a4 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a4 + 64);
  v21 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * i);
    v19 = *v17;
    v18 = v17[1];
    sub_1D5D8F494(*(_QWORD *)(a4 + 56) + 40 * i, (uint64_t)v25);
    *(_QWORD *)&v24 = v19;
    *((_QWORD *)&v24 + 1) = v18;
    v22[0] = v24;
    v22[1] = v25[0];
    v22[2] = v25[1];
    v23 = v26;
    swift_bridgeObjectRetain();
    a2(&v27, v22);
    if (v4)
    {
      swift_bridgeObjectRelease();
      sub_1D5DCD054((uint64_t)v22);
      return swift_release();
    }
    result = sub_1D5DCD054((uint64_t)v22);
    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v21)
      goto LABEL_26;
    v15 = *(_QWORD *)(v20 + 8 * v11);
    if (!v15)
      break;
LABEL_17:
    v9 = (v15 - 1) & v15;
  }
  v16 = v11 + 1;
  if (v11 + 1 >= v21)
    goto LABEL_26;
  v15 = *(_QWORD *)(v20 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 2;
  if (v11 + 2 >= v21)
    goto LABEL_26;
  v15 = *(_QWORD *)(v20 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 3;
  if (v11 + 3 >= v21)
    goto LABEL_26;
  v15 = *(_QWORD *)(v20 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 4;
  if (v11 + 4 >= v21)
  {
LABEL_26:
    swift_release();
    return v27;
  }
  v15 = *(_QWORD *)(v20 + 8 * v16);
  if (v15)
  {
LABEL_16:
    v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v21)
      goto LABEL_26;
    v15 = *(_QWORD *)(v20 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

double sub_1D5DC8C30(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v8;
  char v9;
  uint64_t v10;
  double v11;
  int v12;

  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = sub_1D5D7FFCC(a1, a2);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 56) + 16 * v8;
      v11 = *(double *)v10;
      v12 = *(unsigned __int8 *)(v10 + 8);
      swift_bridgeObjectRelease();
      if (!v12)
        return v11;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return a4;
}

uint64_t sub_1D5DC8CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double *v34;
  char *v35;
  double v36;
  double v37;
  double v38;
  char isUniquelyReferenced_nonNull_native;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  double v48;
  double *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t result;
  __int128 v54;
  __int128 v55;
  char *v56;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(double *)(a2 + 16);
  v4 = *(double *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v6 = sub_1D5D9DF3C(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v7 = v6[2];
  v8 = (char *)MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v9 = v6 + 6;
    v10 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      v14 = *(double *)v9;
      if (*(double *)v9 <= v4)
      {
        v54 = *((_OWORD *)v9 - 1);
        v56 = v10;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1D5DB9D80(0, *((_QWORD *)v10 + 2) + 1, 1);
          v10 = v56;
        }
        v12 = *((_QWORD *)v10 + 2);
        v11 = *((_QWORD *)v10 + 3);
        if (v12 >= v11 >> 1)
        {
          sub_1D5DB9D80((char *)(v11 > 1), v12 + 1, 1);
          v10 = v56;
        }
        *((_QWORD *)v10 + 2) = v12 + 1;
        v13 = &v10[24 * v12];
        *((_OWORD *)v13 + 2) = v54;
        *((double *)v13 + 6) = v14;
      }
      v9 += 3;
      --v7;
    }
    while (v7);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  swift_release();
  v56 = v10;
  swift_retain();
  sub_1D5DCC178(&v56);
  swift_release();
  sub_1D5D96768(v5, (uint64_t)v56);
  v18 = v17 >> 1;
  v19 = (v17 >> 1) - v16;
  if (__OFSUB__(v17 >> 1, v16))
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    sub_1D5E3795C();
    __break(1u);
    result = swift_release();
    __break(1u);
    return result;
  }
  if (v19)
  {
    v20 = v15;
    v21 = v16;
    v56 = v8;
    sub_1D5DB9D80(0, v19 & ~(v19 >> 63), 0);
    if (v19 < 0)
      goto LABEL_43;
    v22 = v56;
    if (v21 <= v18)
      v23 = v18;
    else
      v23 = v21;
    v24 = v23 - v21;
    v25 = (_QWORD *)(v20 + 24 * v21 + 16);
    do
    {
      if (!v24)
      {
        __break(1u);
        goto LABEL_40;
      }
      v26 = *((_OWORD *)v25 - 1);
      v27 = *v25;
      v56 = v22;
      v29 = *((_QWORD *)v22 + 2);
      v28 = *((_QWORD *)v22 + 3);
      if (v29 >= v28 >> 1)
      {
        v55 = v26;
        sub_1D5DB9D80((char *)(v28 > 1), v29 + 1, 1);
        v26 = v55;
        v22 = v56;
      }
      *((_QWORD *)v22 + 2) = v29 + 1;
      v30 = &v22[24 * v29];
      *((_OWORD *)v30 + 2) = v26;
      *((_QWORD *)v30 + 6) = v27;
      --v24;
      v25 += 3;
      --v19;
    }
    while (v19);
    swift_unknownObjectRelease();
    v31 = *((_QWORD *)v22 + 2);
    if (!v31)
      goto LABEL_37;
    goto LABEL_23;
  }
  swift_unknownObjectRelease();
  v22 = (char *)MEMORY[0x1E0DEE9D8];
  v31 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (v31)
  {
LABEL_23:
    v32 = 1.0 - v3;
    swift_bridgeObjectRetain();
    v33 = 0;
    v34 = (double *)(v22 + 48);
    v35 = (char *)MEMORY[0x1E0DEE9E0];
    while (1)
    {
      v36 = *(v34 - 2);
      v37 = *(v34 - 1);
      v38 = *v34;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v56 = v35;
      v41 = sub_1D5D97A00(v36, v37, v38);
      v42 = *((_QWORD *)v35 + 2);
      v43 = (v40 & 1) == 0;
      v44 = v42 + v43;
      if (__OFADD__(v42, v43))
        break;
      v45 = v40;
      if (*((_QWORD *)v35 + 3) >= v44)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1D5D982A4();
      }
      else
      {
        sub_1D5D9AE98(v44, isUniquelyReferenced_nonNull_native);
        v46 = sub_1D5D97A00(v36, v37, v38);
        if ((v45 & 1) != (v47 & 1))
          goto LABEL_44;
        v41 = v46;
      }
      v48 = pow(v32, (double)v33);
      v35 = v56;
      if ((v45 & 1) != 0)
      {
        *(double *)(*((_QWORD *)v56 + 7) + 8 * v41) = v48;
      }
      else
      {
        *(_QWORD *)&v56[8 * (v41 >> 6) + 64] |= 1 << v41;
        v49 = (double *)(*((_QWORD *)v35 + 6) + 24 * v41);
        *v49 = v36;
        v49[1] = v37;
        v49[2] = v38;
        *(double *)(*((_QWORD *)v35 + 7) + 8 * v41) = v48;
        v50 = *((_QWORD *)v35 + 2);
        v51 = __OFADD__(v50, 1);
        v52 = v50 + 1;
        if (v51)
          goto LABEL_41;
        *((_QWORD *)v35 + 2) = v52;
      }
      ++v33;
      swift_bridgeObjectRelease();
      v34 += 3;
      if (v31 == v33)
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
    }
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_37:
  v35 = (char *)MEMORY[0x1E0DEE9E0];
LABEL_38:
  swift_bridgeObjectRelease();
  return (uint64_t)v35;
}

void sub_1D5DC90C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long double v4;
  int64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  unint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;

  v4 = *(double *)(a3 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v22 = MEMORY[0x1E0DEE9D8];
    sub_1D5DB9D80(0, v5, 0);
    v7 = v22;
    v8 = *(_QWORD *)(v22 + 16);
    v9 = 24 * v8;
    v10 = (_QWORD *)(a1 + 48);
    do
    {
      v11 = *((_OWORD *)v10 - 1);
      v12 = *v10;
      v13 = *(_QWORD *)(v22 + 24);
      if (v8++ >= v13 >> 1)
      {
        v21 = *((_OWORD *)v10 - 1);
        sub_1D5DB9D80((char *)(v13 > 1), v8, 1);
        v11 = v21;
      }
      *(_QWORD *)(v22 + 16) = v8;
      v15 = v22 + v9;
      *(_OWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 48) = v12;
      v9 += 24;
      v10 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9D8];
    v8 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v8)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  v16 = (double *)(v7 + 48);
  v17 = 0.0;
  v18 = 0.0;
  do
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v19 = sub_1D5D97A00(*(v16 - 2), *(v16 - 1), *v16);
      if ((v20 & 1) != 0)
      {
        v18 = v18 + *(double *)(*(_QWORD *)(a2 + 56) + 8 * v19);
        v17 = v17 + 1.0;
      }
    }
    v16 += 3;
    --v8;
  }
  while (v8);
  swift_bridgeObjectRelease();
  if (v17 > 0.0)
    pow(v17, v4);
}

void sub_1D5DC9258(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  long double v7;
  double *v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v7 = *(double *)(a3 + 8);
    v8 = (double *)(swift_bridgeObjectRetain() + 64);
    v9 = 0.0;
    v10 = 0.0;
    do
    {
      v11 = *((_QWORD *)v8 - 4);
      v12 = *((_QWORD *)v8 - 3);
      v13 = *v8;
      v8 += 5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = sub_1D5DC8C30(v11, v12, a2, a4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v9 + v13 * v14;
      v10 = v10 + 1.0;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    if (v10 > 0.0)
      pow(v10, v7);
  }
}

uint64_t static Classic.TagEvaluator.memberships(tags:userContext:aggregateContext:baselinePrior:decayRate:userFeedbackConfig:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, Swift::Double a8)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[5];
  _OWORD v51[2];

  v8 = a7;
  v45 = a2;
  v15 = *(_QWORD *)(a7 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v17);
  v47 = (uint64_t)&v38 - v18;
  v19 = *a4;
  v20 = a4[1];
  v21 = *(_OWORD *)(a5 + 80);
  v50[4] = *(_OWORD *)(a5 + 64);
  v51[0] = v21;
  *(_DWORD *)((char *)v51 + 15) = *(_DWORD *)(a5 + 95);
  v22 = *(_OWORD *)(a5 + 16);
  v50[0] = *(_OWORD *)a5;
  v50[1] = v22;
  v23 = *(_OWORD *)(a5 + 48);
  v50[2] = *(_OWORD *)(a5 + 32);
  v50[3] = v23;
  v24 = *(_QWORD *)(a1 + 16);
  v25 = MEMORY[0x1E0DEE9D8];
  if (v24)
  {
    v39 = v15;
    v40 = a3;
    v41 = AssociatedTypeWitness;
    v43 = a6;
    v44 = v8;
    v49 = MEMORY[0x1E0DEE9D8];
    sub_1D5DB9AEC(0, v24, 0);
    v25 = v49;
    v42 = a1;
    v26 = a1 + 40;
    v27 = v24;
    do
    {
      *(_QWORD *)&v48 = 2831206;
      *((_QWORD *)&v48 + 1) = 0xE300000000000000;
      swift_bridgeObjectRetain();
      sub_1D5E37458();
      swift_bridgeObjectRelease();
      v28 = v48;
      v49 = v25;
      v30 = *(_QWORD *)(v25 + 16);
      v29 = *(_QWORD *)(v25 + 24);
      if (v30 >= v29 >> 1)
      {
        sub_1D5DB9AEC((char *)(v29 > 1), v30 + 1, 1);
        v25 = v49;
      }
      v26 += 16;
      *(_QWORD *)(v25 + 16) = v30 + 1;
      *(_OWORD *)(v25 + 16 * v30 + 32) = v28;
      --v27;
    }
    while (v27);
    v8 = v44;
    a6 = v43;
    a1 = v42;
    AssociatedTypeWitness = v41;
    v15 = v39;
  }
  v31 = sub_1D5D81DA4(v25);
  swift_bridgeObjectRelease();
  v48 = 0uLL;
  (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v15 + 48))(v31, &v48, a6, v15);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF7A0);
  v32 = sub_1D5E376EC();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v48 = v19;
  *((_QWORD *)&v48 + 1) = v20;
  ClassicAggregateContextType.lookupBaseline(with:)(&v48, a6, v8, v47);
  v33 = MEMORY[0x1E0DEE9E0];
  v49 = MEMORY[0x1E0DEE9E0];
  if (v24)
  {
    swift_bridgeObjectRetain();
    v34 = (uint64_t *)(a1 + 40);
    v35 = v45;
    do
    {
      v36 = *v34;
      *(_QWORD *)&v48 = *(v34 - 1);
      *((_QWORD *)&v48 + 1) = v36;
      swift_bridgeObjectRetain();
      sub_1D5DC96EC(&v49, (uint64_t *)&v48, v32, v35, v47, (uint64_t)v50, a8);
      v34 += 2;
      swift_bridgeObjectRelease();
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    v33 = v49;
  }
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  return v33;
}

uint64_t sub_1D5DC96EC(_QWORD *a1, uint64_t *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, Swift::Double a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v23[5];
  _BYTE v24[19];

  v13 = *a2;
  v12 = a2[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF868);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D5E38280;
  *(_QWORD *)&v23[0] = 2831206;
  *((_QWORD *)&v23[0] + 1) = 0xE300000000000000;
  swift_bridgeObjectRetain();
  sub_1D5E37458();
  *(_QWORD *)(inited + 32) = 2831206;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  v15 = *(_OWORD *)(a6 + 80);
  v23[4] = *(_OWORD *)(a6 + 64);
  *(_OWORD *)v24 = v15;
  *(_DWORD *)&v24[15] = *(_DWORD *)(a6 + 95);
  v16 = *(_OWORD *)(a6 + 16);
  v23[0] = *(_OWORD *)a6;
  v23[1] = v16;
  v17 = *(_OWORD *)(a6 + 48);
  v23[2] = *(_OWORD *)(a6 + 32);
  v23[3] = v17;
  v18 = sub_1D5D7DF0C(v13, v12, inited, a3, a4, a5, (uint64_t)v23, a7);
  LOBYTE(a6) = v19 & 1;
  swift_setDeallocating();
  swift_arrayDestroy();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v23[0] = *a1;
  *a1 = 0x8000000000000000;
  sub_1D5D9D804(v18, a6, v13, v12, isUniquelyReferenced_nonNull_native);
  *a1 = *(_QWORD *)&v23[0];
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t static Classic.TagEvaluator.evaluate(tags:translations:userContext:aggregateContext:baselinePrior:decayRate:channelTopicMappings:topicTopicMappings:locationTopicMappings:userFeedbackConfig:tagScoringConfig:tagMetadataByTagID:)(uint64_t a1, Swift::Double a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t a10, _OWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[5];
  uint64_t v65[3];
  _OWORD v66[5];
  _OWORD v67[2];
  _OWORD v68[6];

  v16 = *(_OWORD *)(a10 + 64);
  v17 = *(_OWORD *)(a10 + 80);
  v18 = *(_OWORD *)(a10 + 32);
  v66[3] = *(_OWORD *)(a10 + 48);
  v66[4] = v16;
  v67[0] = v17;
  v19 = *(_OWORD *)(a10 + 16);
  v66[0] = *(_OWORD *)a10;
  v21 = *a6;
  v20 = a6[1];
  v22 = *a7;
  v23 = *a8;
  v24 = a8[1];
  v63 = a8[2];
  v25 = *a9;
  v61 = a7[1];
  v62 = a9[1];
  v55 = a9[2];
  v56 = a7[2];
  *(_DWORD *)((char *)v67 + 15) = *(_DWORD *)(a10 + 95);
  v66[1] = v19;
  v66[2] = v18;
  v26 = a11[4];
  v27 = a11[2];
  v68[3] = a11[3];
  v68[4] = v26;
  v28 = a11[1];
  v68[0] = *a11;
  v68[1] = v28;
  v68[2] = v27;
  if (qword_1ED9AF218 != -1)
    swift_once();
  v29 = (void *)qword_1ED9AF210;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1D5E38580;
  v31 = MEMORY[0x1E0DEB418];
  v32 = *(_QWORD *)(a1 + 16);
  v33 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v30 + 56) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v30 + 64) = v33;
  *(_QWORD *)(v30 + 32) = v32;
  v34 = *(_QWORD *)(v22 + 16);
  *(_QWORD *)(v30 + 96) = v31;
  *(_QWORD *)(v30 + 104) = v33;
  *(_QWORD *)(v30 + 72) = v34;
  v35 = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(v30 + 136) = v31;
  *(_QWORD *)(v30 + 144) = v33;
  *(_QWORD *)(v30 + 112) = v35;
  v36 = *(_QWORD *)(v25 + 16);
  *(_QWORD *)(v30 + 176) = v31;
  *(_QWORD *)(v30 + 184) = v33;
  *(_QWORD *)(v30 + 152) = v36;
  v37 = v29;
  v38 = v23;
  v39 = v37;
  sub_1D5E375FC();
  sub_1D5E373A4();

  swift_bridgeObjectRelease();
  v40 = swift_bridgeObjectRetain();
  v41 = sub_1D5D81DA4(v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v42 = sub_1D5D9E114(v24);
  swift_bridgeObjectRelease();
  v58 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v43 = sub_1D5D8217C((uint64_t)v42, v41);
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v44 = sub_1D5D9E114(v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v45 = sub_1D5D8217C((uint64_t)v44, v43);
  swift_release();
  v46 = sub_1D5D9E030(v45);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v64[0] = v21;
  *((_QWORD *)&v64[0] + 1) = v20;
  v60 = static Classic.TagEvaluator.memberships(tags:userContext:aggregateContext:baselinePrior:decayRate:userFeedbackConfig:)((uint64_t)v46, a4, a5, (uint64_t *)v64, a10, a13, a14, a2);
  swift_release();
  v47 = v25;
  v65[0] = v25;
  v65[1] = v62;
  v65[2] = v55;
  v48 = a11[3];
  v64[2] = a11[2];
  v64[3] = v48;
  v64[4] = a11[4];
  v49 = a11[1];
  v64[0] = *a11;
  v64[1] = v49;
  v50 = sub_1D5DC8CB8((uint64_t)v65, (uint64_t)v64);
  v65[0] = MEMORY[0x1E0DEE9E0];
  if (v32)
  {
    v51 = v50;
    v52 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      v53 = *v52;
      *(_QWORD *)&v64[0] = *(v52 - 1);
      *((_QWORD *)&v64[0] + 1) = v53;
      swift_bridgeObjectRetain();
      sub_1D5DC9E18(v65, (uint64_t *)v64, v60, (double *)v66, v58, v24, v63, (uint64_t)v68, v22, v61, v56, a4, v47, v62, v55, v51, a12);
      v52 += 2;
      swift_bridgeObjectRelease();
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v65[0];
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9E0];
  }
}

uint64_t sub_1D5DC9C9C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_1D5D81E38(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1D5DC9E18(uint64_t *a1, uint64_t *a2, uint64_t a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  double v29;
  double v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  double v36;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  double v43;
  int v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v21 = *a2;
  v20 = a2[1];
  v22 = *a4;
  v23 = sub_1D5DC8C30(*a2, v20, a3, *a4);
  if (*(_QWORD *)(a7 + 16) && (v24 = sub_1D5D7FFCC(v21, v20), (v25 & 1) != 0))
  {
    v26 = *(_QWORD *)(*(_QWORD *)(a7 + 56) + 8 * v24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v26 = MEMORY[0x1E0DEE9D8];
  }
  v27 = *(_OWORD *)(a8 + 48);
  v67 = *(_OWORD *)(a8 + 32);
  v68 = v27;
  v69 = *(_OWORD *)(a8 + 64);
  v28 = *(_OWORD *)(a8 + 16);
  v65 = *(_OWORD *)a8;
  v66 = v28;
  sub_1D5DC9258(v26, a3, (uint64_t)&v65, v22);
  v30 = v29;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a11 + 16) && (v31 = sub_1D5D7FFCC(v21, v20), (v32 & 1) != 0))
  {
    v33 = *(_QWORD *)(*(_QWORD *)(a11 + 56) + 8 * v31);
    swift_bridgeObjectRetain();
  }
  else
  {
    v33 = MEMORY[0x1E0DEE9D8];
  }
  v34 = *(_OWORD *)(a8 + 48);
  v67 = *(_OWORD *)(a8 + 32);
  v68 = v34;
  v69 = *(_OWORD *)(a8 + 64);
  v35 = *(_OWORD *)(a8 + 16);
  v65 = *(_OWORD *)a8;
  v66 = v35;
  sub_1D5DC9258(v33, a3, (uint64_t)&v65, v22);
  v37 = v36;
  swift_bridgeObjectRelease();
  v38 = sub_1D5DCA21C(a12, a13, a14, a15, v21, v20, a16, (__int128 *)a8);
  v39 = 0.0;
  if (*(_QWORD *)(a17 + 16))
  {
    swift_bridgeObjectRetain();
    v40 = sub_1D5D7FFCC(v21, v20);
    if ((v41 & 1) != 0)
    {
      v42 = *(_QWORD *)(a17 + 56) + 80 * v40;
      v43 = *(double *)(v42 + 16);
      v44 = *(unsigned __int8 *)(v42 + 24);
      swift_bridgeObjectRelease();
      v39 = 0.0;
      if (!v44)
        v39 = v43;
    }
    else
    {
      swift_bridgeObjectRelease();
      v39 = 0.0;
    }
  }
  v45 = *(double *)(a8 + 48);
  v46 = v45 * pow(v39, *(long double *)(a8 + 56)) + 1.0;
  v47 = a12[3];
  v48 = a12[4];
  __swift_project_boxed_opaque_existential_1(a12, v47);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v48 + 96))(&v65, v47, v48);
  if (BYTE8(v66))
    v49 = 0.0;
  else
    v49 = *(double *)(a8 + 24);
  v51 = *(double *)(a8 + 64);
  v50 = *(double *)(a8 + 72);
  v52 = v49 + v50 + v51 + *(double *)a8;
  v53 = (v23 * v50 + v30 * v51 + v37 * *(double *)a8 + v38 * *(double *)(a8 + 24)) / v52;
  if (v52 <= 0.0)
    v53 = 0.0;
  *(double *)&v65 = v37;
  *((double *)&v65 + 1) = v23;
  *(double *)&v66 = v38;
  *((double *)&v66 + 1) = v46 * v53;
  *(double *)&v67 = v46;
  *((double *)&v67 + 1) = v30;
  if (qword_1ED9AF218 != -1)
    swift_once();
  v54 = (void *)qword_1ED9AF210;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
  v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_1D5E38FE0;
  v56 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v55 + 56) = MEMORY[0x1E0DEA968];
  v57 = sub_1D5D889BC();
  *(_QWORD *)(v55 + 64) = v57;
  *(_QWORD *)(v55 + 32) = v21;
  *(_QWORD *)(v55 + 40) = v20;
  swift_bridgeObjectRetain();
  v58 = v54;
  v59 = sub_1D5DA2364();
  *(_QWORD *)(v55 + 96) = v56;
  *(_QWORD *)(v55 + 104) = v57;
  *(_QWORD *)(v55 + 72) = v59;
  *(_QWORD *)(v55 + 80) = v60;
  sub_1D5E375FC();
  sub_1D5E373A4();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v64 = *a1;
  *a1 = 0x8000000000000000;
  sub_1D5D9D944(&v65, v21, v20, isUniquelyReferenced_nonNull_native);
  *a1 = v64;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

double sub_1D5DCA21C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int128 *a8)
{
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  double v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v13 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v14 + 96))(&v23, v13, v14);
  v15 = 0.0;
  if ((BYTE8(v24) & 1) == 0)
  {
    if (*(_QWORD *)(a4 + 16) && (v16 = sub_1D5D7FFCC(a5, a6), (v17 & 1) != 0))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
      swift_bridgeObjectRetain();
    }
    else
    {
      v18 = MEMORY[0x1E0DEE9D8];
    }
    v19 = a8[3];
    v25 = a8[2];
    v26 = v19;
    v27 = a8[4];
    v20 = a8[1];
    v23 = *a8;
    v24 = v20;
    sub_1D5DC90C8(v18, a7, (uint64_t)&v23);
    v15 = v21;
    swift_bridgeObjectRelease();
  }
  return v15;
}

uint64_t static Classic.TagEvaluator.evaluate(tags:translations:context:baselinePrior:decayRate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  __int128 v49;
  _QWORD *v50;
  char v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t result;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t AssociatedTypeWitness;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;

  v89 = a3;
  v93 = a6;
  v88 = *(_QWORD *)(a6 + 8);
  v92 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v91 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v90 = (uint64_t)&v87 - v12;
  v13 = *a4;
  v14 = a4[1];
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v95 = a2;
    swift_bridgeObjectRetain();
    v97 = v15;
    v98 = MEMORY[0x1E0DEE9E0];
    v87 = a1;
    v16 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v19 = *(v16 - 1);
      v18 = *v16;
      *(_QWORD *)&v99 = 2831206;
      *((_QWORD *)&v99 + 1) = 0xE300000000000000;
      swift_bridgeObjectRetain_n();
      sub_1D5E37458();
      v20 = v99;
      swift_bridgeObjectRetain();
      v21 = v98;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v99 = v21;
      v24 = sub_1D5D7FFCC(v19, v18);
      v25 = *(_QWORD *)(v21 + 16);
      v26 = (v23 & 1) == 0;
      v27 = v25 + v26;
      if (__OFADD__(v25, v26))
        break;
      v28 = v23;
      if (*(_QWORD *)(v21 + 24) >= v27)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1D5D987C0();
      }
      else
      {
        sub_1D5D9B7E8(v27, isUniquelyReferenced_nonNull_native);
        v29 = sub_1D5D7FFCC(v19, v18);
        if ((v28 & 1) != (v30 & 1))
          goto LABEL_43;
        v24 = v29;
      }
      v31 = (_QWORD *)v99;
      v98 = v99;
      if ((v28 & 1) != 0)
      {
        v17 = *(_QWORD *)(v99 + 56) + 56 * v24;
        sub_1D5D8014C(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_QWORD *)(v17 + 16), *(_QWORD *)(v17 + 24), *(_QWORD *)(v17 + 32), *(_QWORD *)(v17 + 40), *(_BYTE *)(v17 + 48));
        *(_OWORD *)v17 = v20;
        *(_QWORD *)(v17 + 16) = v19;
        *(_QWORD *)(v17 + 24) = v18;
        *(_QWORD *)(v17 + 32) = 0;
        *(_QWORD *)(v17 + 40) = 0;
        *(_BYTE *)(v17 + 48) = 4;
      }
      else
      {
        *(_QWORD *)(v99 + 8 * (v24 >> 6) + 64) |= 1 << v24;
        v32 = (uint64_t *)(v31[6] + 16 * v24);
        *v32 = v19;
        v32[1] = v18;
        v33 = v31[7] + 56 * v24;
        *(_OWORD *)v33 = v20;
        *(_QWORD *)(v33 + 16) = v19;
        *(_QWORD *)(v33 + 24) = v18;
        *(_QWORD *)(v33 + 32) = 0;
        *(_QWORD *)(v33 + 40) = 0;
        *(_BYTE *)(v33 + 48) = 4;
        v34 = v31[2];
        v35 = __OFADD__(v34, 1);
        v36 = v34 + 1;
        if (v35)
          goto LABEL_40;
        v31[2] = v36;
        swift_bridgeObjectRetain();
      }
      v16 += 2;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if (!--v15)
      {
        v37 = v87;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v38 = (uint64_t *)(v37 + 40);
        v39 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        v40 = v95;
        v41 = v97;
        while (1)
        {
          if (*(_QWORD *)(v40 + 16))
          {
            v42 = *(v38 - 1);
            v43 = *v38;
            swift_bridgeObjectRetain_n();
            v44 = sub_1D5D7FFCC(v42, v43);
            if ((v45 & 1) != 0)
            {
              v97 = v41;
              v46 = (_QWORD *)(*(_QWORD *)(v40 + 56) + 16 * v44);
              v48 = (_QWORD *)*v46;
              v47 = v46[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *(_QWORD *)&v99 = 2831206;
              *((_QWORD *)&v99 + 1) = 0xE300000000000000;
              swift_bridgeObjectRetain();
              v96 = v48;
              sub_1D5E37458();
              v49 = v99;
              v50 = v39;
              v51 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)&v99 = v50;
              v53 = sub_1D5D7FFCC(v42, v43);
              v54 = v50[2];
              v55 = (v52 & 1) == 0;
              v56 = v54 + v55;
              if (__OFADD__(v54, v55))
                goto LABEL_41;
              v57 = v52;
              if (v50[3] >= v56)
              {
                if ((v51 & 1) != 0)
                {
                  v39 = (_QWORD *)v99;
                  if ((v52 & 1) == 0)
                    goto LABEL_28;
                }
                else
                {
                  sub_1D5D987C0();
                  v39 = (_QWORD *)v99;
                  if ((v57 & 1) == 0)
                    goto LABEL_28;
                }
              }
              else
              {
                sub_1D5D9B7E8(v56, v51);
                v58 = sub_1D5D7FFCC(v42, v43);
                if ((v57 & 1) != (v59 & 1))
                  goto LABEL_43;
                v53 = v58;
                v39 = (_QWORD *)v99;
                if ((v57 & 1) == 0)
                {
LABEL_28:
                  v39[(v53 >> 6) + 8] |= 1 << v53;
                  v61 = (uint64_t *)(v39[6] + 16 * v53);
                  *v61 = v42;
                  v61[1] = v43;
                  v62 = v39[7] + 56 * v53;
                  *(_OWORD *)v62 = v49;
                  *(_QWORD *)(v62 + 16) = v96;
                  *(_QWORD *)(v62 + 24) = v47;
                  *(_QWORD *)(v62 + 32) = 0;
                  *(_QWORD *)(v62 + 40) = 0;
                  *(_BYTE *)(v62 + 48) = 4;
                  v63 = v39[2];
                  v35 = __OFADD__(v63, 1);
                  v64 = v63 + 1;
                  if (v35)
                    goto LABEL_42;
                  v39[2] = v64;
                  swift_bridgeObjectRetain();
                  goto LABEL_30;
                }
              }
              v60 = v39[7] + 56 * v53;
              sub_1D5D8014C(*(_QWORD *)v60, *(_QWORD *)(v60 + 8), *(_QWORD *)(v60 + 16), *(_QWORD *)(v60 + 24), *(_QWORD *)(v60 + 32), *(_QWORD *)(v60 + 40), *(_BYTE *)(v60 + 48));
              *(_OWORD *)v60 = v49;
              *(_QWORD *)(v60 + 16) = v96;
              *(_QWORD *)(v60 + 24) = v47;
              *(_QWORD *)(v60 + 32) = 0;
              *(_QWORD *)(v60 + 40) = 0;
              *(_BYTE *)(v60 + 48) = 4;
LABEL_30:
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              v40 = v95;
              v41 = v97;
              goto LABEL_16;
            }
            swift_bridgeObjectRelease_n();
          }
LABEL_16:
          v38 += 2;
          if (!--v41)
          {
            swift_bridgeObjectRelease();
            v65 = v98;
            goto LABEL_33;
          }
        }
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    result = sub_1D5E3795C();
    __break(1u);
  }
  else
  {
    v65 = MEMORY[0x1E0DEE9E0];
    v39 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_33:
    *(_QWORD *)&v99 = sub_1D5D9E1F8((uint64_t)v39);
    v66 = swift_bridgeObjectRetain();
    v98 = v65;
    sub_1D5D8C3D0(v66);
    v67 = v99;
    v68 = *(_QWORD *)(v99 + 16);
    if (v68)
    {
      v96 = v39;
      swift_bridgeObjectRetain();
      v95 = v67;
      v69 = (unsigned __int8 *)(v67 + 80);
      v70 = MEMORY[0x1E0DEE9E8];
      do
      {
        v71 = *((_QWORD *)v69 - 6);
        v72 = *((_QWORD *)v69 - 5);
        v73 = *((_QWORD *)v69 - 4);
        v74 = *((_QWORD *)v69 - 3);
        v76 = *((_QWORD *)v69 - 2);
        v75 = *((_QWORD *)v69 - 1);
        v77 = *v69;
        v69 += 56;
        LODWORD(v97) = v77;
        sub_1D5D801B0(v71, v72, v73, v74, v76, v75, v77);
        swift_bridgeObjectRetain();
        v78 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v99 = v70;
        sub_1D5DCCB04(v71, v72, v78);
        v70 = v99;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1D5D8014C(v71, v72, v73, v74, v76, v75, v97);
        --v68;
      }
      while (v68);
      swift_bridgeObjectRelease();
      v39 = v96;
    }
    else
    {
      v70 = MEMORY[0x1E0DEE9E8];
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&v99 = v13;
    *((_QWORD *)&v99 + 1) = v14;
    v79 = v90;
    v81 = v92;
    v80 = v93;
    ClassicAggregateContextType.lookupBaseline(with:)(&v99, v92, v93, v90);
    v99 = 0uLL;
    v82 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(v88 + 48))(v70, &v99, v81);
    v83 = swift_bridgeObjectRelease();
    MEMORY[0x1E0C80A78](v83, v84);
    *(&v87 - 6) = v81;
    *(&v87 - 5) = v80;
    *(&v87 - 4) = v82;
    *(&v87 - 3) = (uint64_t)v39;
    *(&v87 - 2) = v79;
    *((double *)&v87 - 1) = a7;
    v85 = sub_1D5DC85A8(MEMORY[0x1E0DEE9E0], (void (*)(uint64_t *, _QWORD *))sub_1D5DCD01C, (uint64_t)(&v87 - 8), v98);
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v79, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v85;
  }
  return result;
}

uint64_t sub_1D5DCA9D4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, Swift::Double a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  uint64_t AssociatedConformanceWitness;
  double v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[2];
  _QWORD v50[6];
  char v51;

  v41 = a5;
  v37 = a4;
  v48 = a3;
  v47 = a1;
  v38 = a7;
  v39 = *(_QWORD *)(a7 + 8);
  v40 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = sub_1D5E37614();
  v35 = *(_QWORD *)(v36 - 8);
  v12 = MEMORY[0x1E0C80A78](v36, v11);
  v14 = (char *)&v34 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v12, v16);
  v44 = (char *)&v34 - v17;
  v18 = *(_QWORD *)(a2 + 8);
  v45 = *(_QWORD *)a2;
  v46 = v18;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = *(_QWORD *)(a2 + 24);
  v22 = *(_QWORD *)(a2 + 32);
  v21 = *(_QWORD *)(a2 + 40);
  v23 = *(_QWORD *)(a2 + 48);
  v24 = *(_QWORD *)(a2 + 56);
  LODWORD(a2) = *(unsigned __int8 *)(a2 + 64);
  v50[0] = v19;
  v50[1] = v20;
  v50[2] = v22;
  v50[3] = v21;
  v50[4] = v23;
  v50[5] = v24;
  v51 = a2;
  v49[0] = v19;
  v49[1] = v20;
  swift_bridgeObjectRetain();
  v43 = v23;
  v42 = a2;
  sub_1D5D801B0(v19, v20, v22, v21, v23, v24, a2);
  swift_bridgeObjectRetain();
  MEMORY[0x1D827CFA4](v49, v48, MEMORY[0x1E0DEA968], AssociatedTypeWitness, MEMORY[0x1E0DEA978]);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    sub_1D5D8014C(v19, v20, v22, v21, v43, v24, v42);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
    v25 = v47;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v49[0] = *v25;
    *v25 = 0x8000000000000000;
    sub_1D5D84094(v45, v46, isUniquelyReferenced_nonNull_native, 0.0);
    *v25 = v49[0];
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v34 = v15;
    v28 = v44;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v44, v14, AssociatedTypeWitness);
    v29 = sub_1D5DCAD2C((uint64_t)v50, v37, v48, v28);
    sub_1D5D8014C(v19, v20, v22, v21, v43, v24, v42);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v31 = sub_1D5D8E6D4(v41, v29, AssociatedTypeWitness, AssociatedConformanceWitness, a8);
    swift_bridgeObjectRelease();
    v32 = v47;
    v33 = swift_isUniquelyReferenced_nonNull_native();
    v49[0] = *v32;
    *v32 = 0x8000000000000000;
    sub_1D5D84094(v45, v46, v33, v31);
    *v32 = v49[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v44, AssociatedTypeWitness);
  }
}

uint64_t sub_1D5DCAD2C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  _BYTE *v32;
  uint64_t AssociatedConformanceWitness;
  uint64_t *boxed_opaque_existential_1;
  void (*v35)(uint64_t *, _BYTE *, uint64_t);
  uint64_t *v36;
  _BYTE v37[12];
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  char v47[16];
  uint64_t v48;
  uint64_t v49;
  char v50;

  v45 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v44 = sub_1D5E37614();
  v8 = *(_QWORD *)(v44 - 8);
  v10 = MEMORY[0x1E0C80A78](v44, v9);
  v12 = &v37[-v11];
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v10, v14);
  v16 = &v37[-v15];
  sub_1D5D7FF90(a1, (uint64_t)v47);
  if (v50 == 4)
  {
    v43 = a4;
    if (*(_QWORD *)(a2 + 16))
    {
      v42 = v16;
      v17 = v48;
      v18 = v49;
      swift_bridgeObjectRetain();
      v19 = sub_1D5D7FFCC(v17, v18);
      if ((v20 & 1) != 0)
      {
        v21 = *(_QWORD *)(a2 + 56) + 56 * v19;
        v22 = *(_QWORD *)v21;
        v23 = *(_QWORD *)(v21 + 8);
        v24 = *(_QWORD *)(v21 + 16);
        v25 = *(_QWORD *)(v21 + 24);
        v26 = *(_QWORD *)(v21 + 40);
        v39 = *(_QWORD *)(v21 + 32);
        v40 = v24;
        v38 = *(unsigned __int8 *)(v21 + 48);
        v41 = v13;
        v27 = v25;
        sub_1D5D801B0(v22, v23, v24, v25, v39, v26, v38);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v13 = v41;
        sub_1D5D8014C(v22, v23, v40, v27, v39, v26, v38);
        v46[0] = v22;
        v46[1] = v23;
        MEMORY[0x1D827CFA4](v46, v45, MEMORY[0x1E0DEA968], AssociatedTypeWitness, MEMORY[0x1E0DEA978]);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) != 1)
        {
          v32 = v42;
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v42, v12, AssociatedTypeWitness);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5C0);
          v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = xmmword_1D5E38FE0;
          *(_QWORD *)(v28 + 56) = AssociatedTypeWitness;
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          *(_QWORD *)(v28 + 64) = AssociatedConformanceWitness;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v28 + 32));
          v35 = *(void (**)(uint64_t *, _BYTE *, uint64_t))(v13 + 16);
          v35(boxed_opaque_existential_1, v32, AssociatedTypeWitness);
          *(_QWORD *)(v28 + 96) = AssociatedTypeWitness;
          *(_QWORD *)(v28 + 104) = AssociatedConformanceWitness;
          v36 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v28 + 72));
          v35(v36, v43, AssociatedTypeWitness);
          (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v32, AssociatedTypeWitness);
          return v28;
        }
        (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v12, v44);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5C0);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1D5E38280;
    *(_QWORD *)(v28 + 56) = AssociatedTypeWitness;
    *(_QWORD *)(v28 + 64) = swift_getAssociatedConformanceWitness();
    v30 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v28 + 32));
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v13 + 16))(v30, v43, AssociatedTypeWitness);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5C0);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1D5E38280;
    *(_QWORD *)(v28 + 56) = AssociatedTypeWitness;
    *(_QWORD *)(v28 + 64) = swift_getAssociatedConformanceWitness();
    v29 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v28 + 32));
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v13 + 16))(v29, a4, AssociatedTypeWitness);
  }
  return v28;
}

uint64_t sub_1D5DCB0BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  int64_t v47;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD920);
  v3 = sub_1D5E37638();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v37 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v35 = v1;
    v36 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    v38 = v2;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v47 = v10;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v36)
          goto LABEL_33;
        v16 = v37[v15];
        v17 = v10 + 1;
        if (!v16)
        {
          v17 = v10 + 2;
          if (v10 + 2 >= v36)
            goto LABEL_33;
          v16 = v37[v17];
          if (!v16)
          {
            v17 = v10 + 3;
            if (v10 + 3 >= v36)
              goto LABEL_33;
            v16 = v37[v17];
            if (!v16)
            {
              v18 = v10 + 4;
              if (v10 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                v1 = v35;
                v34 = 1 << *(_BYTE *)(v2 + 32);
                if (v34 > 63)
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v34;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v37[v18];
              if (!v16)
              {
                while (1)
                {
                  v17 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v17 >= v36)
                    goto LABEL_33;
                  v16 = v37[v17];
                  ++v18;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v17 = v10 + 4;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v47 = v17;
        v14 = __clz(__rbit64(v16)) + (v17 << 6);
      }
      v19 = *(_QWORD *)(v2 + 48) + 112 * v14;
      v20 = *(_QWORD *)v19;
      v21 = *(_QWORD *)(v19 + 8);
      v45 = *(_OWORD *)(v19 + 40);
      v46 = *(_OWORD *)(v19 + 24);
      v22 = *(_QWORD *)(v19 + 56);
      v23 = *(_BYTE *)(v19 + 64);
      v24 = *(_BYTE *)(v19 + 65);
      v25 = *(_BYTE *)(v19 + 66);
      v26 = *(_BYTE *)(v19 + 67);
      v43 = *(_QWORD *)(v19 + 72);
      v44 = *(_QWORD *)(v19 + 16);
      v42 = *(_QWORD *)(v19 + 80);
      v41 = *(_BYTE *)(v19 + 88);
      v40 = *(_QWORD *)(v19 + 96);
      v39 = *(_BYTE *)(v19 + 104);
      sub_1D5E379A4();
      swift_bridgeObjectRetain();
      sub_1D5E3744C();
      swift_bridgeObjectRelease();
      result = sub_1D5E379C8();
      v27 = -1 << *(_BYTE *)(v4 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v8 + 8 * (v28 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v8 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v8 + 8 * v29);
        }
        while (v33 == -1);
        v11 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 112 * v11;
      *(_QWORD *)v12 = v20;
      *(_QWORD *)(v12 + 8) = v21;
      *(_QWORD *)(v12 + 16) = v44;
      *(_OWORD *)(v12 + 24) = v46;
      *(_OWORD *)(v12 + 40) = v45;
      *(_QWORD *)(v12 + 56) = v22;
      *(_BYTE *)(v12 + 64) = v23;
      *(_BYTE *)(v12 + 65) = v24;
      *(_BYTE *)(v12 + 66) = v25;
      *(_BYTE *)(v12 + 67) = v26;
      *(_QWORD *)(v12 + 72) = v43;
      *(_QWORD *)(v12 + 80) = v42;
      *(_BYTE *)(v12 + 88) = v41;
      *(_QWORD *)(v12 + 96) = v40;
      *(_BYTE *)(v12 + 104) = v39;
      ++*(_QWORD *)(v4 + 16);
      v2 = v38;
      v10 = v47;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1D5DCB48C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5CE8);
  result = sub_1D5E37638();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v27 = v1;
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = sub_1D5E37998();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

void *sub_1D5DCB720()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t *v35;
  void *__src;
  int64_t v37;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD920);
  v35 = v0;
  v1 = *v0;
  v2 = sub_1D5E3762C();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v35 = v3;
    return result;
  }
  result = (void *)(v2 + 56);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  __src = (void *)(v1 + 56);
  if (v3 != v1 || (unint64_t)result >= v1 + 56 + 8 * v5)
    result = memmove(result, __src, 8 * v5);
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 56);
  v37 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v7 << 6);
      goto LABEL_12;
    }
    v32 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v32 >= v37)
      goto LABEL_28;
    v33 = *((_QWORD *)__src + v32);
    ++v7;
    if (!v33)
    {
      v7 = v32 + 1;
      if (v32 + 1 >= v37)
        goto LABEL_28;
      v33 = *((_QWORD *)__src + v7);
      if (!v33)
      {
        v7 = v32 + 2;
        if (v32 + 2 >= v37)
          goto LABEL_28;
        v33 = *((_QWORD *)__src + v7);
        if (!v33)
          break;
      }
    }
LABEL_27:
    v10 = (v33 - 1) & v33;
    v12 = __clz(__rbit64(v33)) + (v7 << 6);
LABEL_12:
    v13 = 112 * v12;
    v14 = *(_QWORD *)(v1 + 48) + v13;
    v16 = *(_QWORD *)v14;
    v15 = *(_QWORD *)(v14 + 8);
    v17 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    v19 = *(_QWORD *)(v14 + 32);
    v20 = *(_QWORD *)(v14 + 40);
    v21 = *(_QWORD *)(v14 + 48);
    v22 = *(_QWORD *)(v14 + 56);
    v23 = *(_BYTE *)(v14 + 64);
    v24 = *(_BYTE *)(v14 + 65);
    v25 = *(_BYTE *)(v14 + 66);
    v26 = *(_BYTE *)(v14 + 67);
    v27 = *(_QWORD *)(v14 + 72);
    v28 = *(_QWORD *)(v14 + 80);
    v29 = *(_BYTE *)(v14 + 88);
    v30 = *(_QWORD *)(v14 + 96);
    LOBYTE(v14) = *(_BYTE *)(v14 + 104);
    v31 = *(_QWORD *)(v3 + 48) + v13;
    *(_QWORD *)v31 = v16;
    *(_QWORD *)(v31 + 8) = v15;
    *(_QWORD *)(v31 + 16) = v17;
    *(_QWORD *)(v31 + 24) = v18;
    *(_QWORD *)(v31 + 32) = v19;
    *(_QWORD *)(v31 + 40) = v20;
    *(_QWORD *)(v31 + 48) = v21;
    *(_QWORD *)(v31 + 56) = v22;
    *(_BYTE *)(v31 + 64) = v23;
    *(_BYTE *)(v31 + 65) = v24;
    *(_BYTE *)(v31 + 66) = v25;
    *(_BYTE *)(v31 + 67) = v26;
    *(_QWORD *)(v31 + 72) = v27;
    *(_QWORD *)(v31 + 80) = v28;
    *(_BYTE *)(v31 + 88) = v29;
    *(_QWORD *)(v31 + 96) = v30;
    *(_BYTE *)(v31 + 104) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)sub_1D5DA2208(v27, v28);
  }
  v34 = v32 + 3;
  if (v34 >= v37)
    goto LABEL_28;
  v33 = *((_QWORD *)__src + v34);
  if (v33)
  {
    v7 = v34;
    goto LABEL_27;
  }
  while (1)
  {
    v7 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v7 >= v37)
      goto LABEL_28;
    v33 = *((_QWORD *)__src + v7);
    ++v34;
    if (v33)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1D5DCB9A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5CE8);
  v2 = *v0;
  v3 = sub_1D5E3762C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1D5DCBB3C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD920);
  v3 = sub_1D5E37638();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v35 = v1;
  v36 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v37 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  v38 = v2;
  while (1)
  {
    if (v7)
    {
      v48 = (v7 - 1) & v7;
      v49 = v10;
      v13 = __clz(__rbit64(v7)) | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v37)
      goto LABEL_33;
    v15 = *(_QWORD *)(v36 + 8 * v14);
    v16 = v10 + 1;
    if (!v15)
    {
      v16 = v10 + 2;
      if (v10 + 2 >= v37)
        goto LABEL_33;
      v15 = *(_QWORD *)(v36 + 8 * v16);
      if (!v15)
      {
        v16 = v10 + 3;
        if (v10 + 3 >= v37)
          goto LABEL_33;
        v15 = *(_QWORD *)(v36 + 8 * v16);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v48 = (v15 - 1) & v15;
    v49 = v16;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 112 * v13;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 24);
    v46 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 32);
    v23 = *(_QWORD *)(v18 + 40);
    v24 = *(_QWORD *)(v18 + 48);
    v25 = *(_QWORD *)(v18 + 56);
    v44 = *(_BYTE *)(v18 + 65);
    v45 = *(_BYTE *)(v18 + 64);
    v42 = *(_BYTE *)(v18 + 67);
    v43 = *(_BYTE *)(v18 + 66);
    v26 = *(_QWORD *)(v18 + 72);
    v27 = *(_QWORD *)(v18 + 80);
    v41 = *(_BYTE *)(v18 + 88);
    v40 = *(_QWORD *)(v18 + 96);
    v39 = *(_BYTE *)(v18 + 104);
    sub_1D5E379A4();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v47 = v26;
    sub_1D5DA2208(v26, v27);
    swift_bridgeObjectRetain();
    sub_1D5E3744C();
    swift_bridgeObjectRelease();
    result = sub_1D5E379C8();
    v28 = -1 << *(_BYTE *)(v4 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v8 + 8 * (v29 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v8 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v8 + 8 * v30);
      }
      while (v34 == -1);
      v11 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 112 * v11;
    *(_QWORD *)v12 = v19;
    *(_QWORD *)(v12 + 8) = v20;
    *(_QWORD *)(v12 + 16) = v46;
    *(_QWORD *)(v12 + 24) = v21;
    *(_QWORD *)(v12 + 32) = v22;
    *(_QWORD *)(v12 + 40) = v23;
    *(_QWORD *)(v12 + 48) = v24;
    *(_QWORD *)(v12 + 56) = v25;
    *(_BYTE *)(v12 + 64) = v45;
    *(_BYTE *)(v12 + 65) = v44;
    *(_BYTE *)(v12 + 66) = v43;
    *(_BYTE *)(v12 + 67) = v42;
    v7 = v48;
    *(_QWORD *)(v12 + 72) = v47;
    *(_QWORD *)(v12 + 80) = v27;
    *(_BYTE *)(v12 + 88) = v41;
    *(_QWORD *)(v12 + 96) = v40;
    *(_BYTE *)(v12 + 104) = v39;
    ++*(_QWORD *)(v4 + 16);
    v2 = v38;
    v10 = v49;
  }
  v17 = v10 + 4;
  if (v10 + 4 >= v37)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v35;
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(v36 + 8 * v17);
  if (v15)
  {
    v16 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v37)
      goto LABEL_33;
    v15 = *(_QWORD *)(v36 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1D5DCBF08()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5CE8);
  result = sub_1D5E37638();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = sub_1D5E37998();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1D5DCC178(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1D5E26014((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = sub_1D5DCC1E0(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1D5DCC1E0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  double v30;
  uint64_t v31;
  double *v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  double v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double *v106;

  v3 = a1[1];
  result = sub_1D5E378C0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = *a1 + 16;
      v86 = -1;
      for (i = 1; i != v3; ++i)
      {
        v88 = *(double *)(v84 + 24 * i + 16);
        v89 = v86;
        v90 = v85;
        do
        {
          if (v88 >= *(double *)v90)
            break;
          if (!v84)
            goto LABEL_142;
          v91 = *(_OWORD *)(v90 + 8);
          *(_OWORD *)(v90 + 8) = *(_OWORD *)(v90 - 16);
          *(_QWORD *)(v90 + 24) = *(_QWORD *)v90;
          *(_OWORD *)(v90 - 16) = v91;
          *(double *)v90 = v88;
          v90 -= 24;
        }
        while (!__CFADD__(v89++, 1));
        v85 += 24;
        --v86;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v6 = result;
    v100 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      result = sub_1D5E3753C();
      *(_QWORD *)(result + 16) = v7;
      v102 = result;
      v106 = (double *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v101 = *a1 + 64;
      v11 = MEMORY[0x1E0DEE9D8];
      v103 = v6;
      v104 = v3;
      v105 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(double *)(v10 + 24 * v9 + 16);
          v15 = *(double *)(v10 + 24 * v13 + 16);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v16 = (double *)(v101 + 24 * v13);
            v17 = v14;
            while (1)
            {
              v18 = v17;
              v17 = *v16;
              if (v14 < v15 == *v16 >= v18)
                break;
              ++v9;
              v16 += 3;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v15)
          {
            if (v9 < v13)
              goto LABEL_139;
            if (v13 < v9)
            {
              v19 = 24 * v9;
              v20 = 24 * v13;
              v21 = v9;
              v22 = v13;
              do
              {
                if (v22 != --v21)
                {
                  if (!v10)
                    goto LABEL_145;
                  v23 = v10 + v20;
                  v24 = v10 + v19;
                  v25 = *(_QWORD *)(v10 + v20 + 16);
                  v26 = *(_OWORD *)(v10 + v20);
                  v27 = *(_QWORD *)(v10 + v19 - 8);
                  *(_OWORD *)v23 = *(_OWORD *)(v10 + v19 - 24);
                  *(_QWORD *)(v23 + 16) = v27;
                  *(_OWORD *)(v24 - 24) = v26;
                  *(_QWORD *)(v24 - 8) = v25;
                }
                ++v22;
                v19 -= 24;
                v20 += 24;
              }
              while (v22 < v21);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_136;
          if (v9 - v13 < v6)
          {
            v28 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_140;
            if (v28 >= v3)
              v28 = v3;
            if (v28 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v9 != v28)
            {
              v29 = (__int128 *)(v10 + 24 * v9);
              do
              {
                v30 = *(double *)(v10 + 24 * v9 + 16);
                v31 = v13;
                v32 = (double *)v29;
                do
                {
                  if (v30 >= *(v32 - 1))
                    break;
                  if (!v10)
                    goto LABEL_143;
                  v33 = *(_OWORD *)v32;
                  *(_OWORD *)v32 = *(_OWORD *)(v32 - 3);
                  v32[2] = *(v32 - 1);
                  *(v32 - 1) = v30;
                  *(_OWORD *)(v32 - 3) = v33;
                  v32 -= 3;
                  ++v31;
                }
                while (v9 != v31);
                ++v9;
                v29 = (__int128 *)((char *)v29 + 24);
              }
              while (v9 != v28);
              v9 = v28;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1D5E258D0(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v35 = *(_QWORD *)(v11 + 16);
        v34 = *(_QWORD *)(v11 + 24);
        v12 = v35 + 1;
        v10 = v105;
        if (v35 >= v34 >> 1)
        {
          result = (uint64_t)sub_1D5E258D0((char *)(v34 > 1), v35 + 1, 1, (char *)v11);
          v10 = v105;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v36 = v11 + 32;
        v37 = (uint64_t *)(v11 + 32 + 16 * v35);
        *v37 = v13;
        v37[1] = v9;
        if (v35)
        {
          while (1)
          {
            v38 = v12 - 1;
            if (v12 >= 4)
            {
              v43 = v36 + 16 * v12;
              v44 = *(_QWORD *)(v43 - 64);
              v45 = *(_QWORD *)(v43 - 56);
              v49 = __OFSUB__(v45, v44);
              v46 = v45 - v44;
              if (v49)
                goto LABEL_120;
              v48 = *(_QWORD *)(v43 - 48);
              v47 = *(_QWORD *)(v43 - 40);
              v49 = __OFSUB__(v47, v48);
              v41 = v47 - v48;
              v42 = v49;
              if (v49)
                goto LABEL_121;
              v50 = v12 - 2;
              v51 = (uint64_t *)(v36 + 16 * (v12 - 2));
              v53 = *v51;
              v52 = v51[1];
              v49 = __OFSUB__(v52, v53);
              v54 = v52 - v53;
              if (v49)
                goto LABEL_122;
              v49 = __OFADD__(v41, v54);
              v55 = v41 + v54;
              if (v49)
                goto LABEL_124;
              if (v55 >= v46)
              {
                v73 = (uint64_t *)(v36 + 16 * v38);
                v75 = *v73;
                v74 = v73[1];
                v49 = __OFSUB__(v74, v75);
                v76 = v74 - v75;
                if (v49)
                  goto LABEL_130;
                v66 = v41 < v76;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v67 = *(_QWORD *)(v11 + 32);
                v68 = *(_QWORD *)(v11 + 40);
                v49 = __OFSUB__(v68, v67);
                v60 = v68 - v67;
                v61 = v49;
                goto LABEL_77;
              }
              v40 = *(_QWORD *)(v11 + 32);
              v39 = *(_QWORD *)(v11 + 40);
              v49 = __OFSUB__(v39, v40);
              v41 = v39 - v40;
              v42 = v49;
            }
            if ((v42 & 1) != 0)
              goto LABEL_123;
            v50 = v12 - 2;
            v56 = (uint64_t *)(v36 + 16 * (v12 - 2));
            v58 = *v56;
            v57 = v56[1];
            v59 = __OFSUB__(v57, v58);
            v60 = v57 - v58;
            v61 = v59;
            if (v59)
              goto LABEL_125;
            v62 = (uint64_t *)(v36 + 16 * v38);
            v64 = *v62;
            v63 = v62[1];
            v49 = __OFSUB__(v63, v64);
            v65 = v63 - v64;
            if (v49)
              goto LABEL_127;
            if (__OFADD__(v60, v65))
              goto LABEL_129;
            if (v60 + v65 >= v41)
            {
              v66 = v41 < v65;
LABEL_83:
              if (v66)
                v38 = v50;
              goto LABEL_85;
            }
LABEL_77:
            if ((v61 & 1) != 0)
              goto LABEL_126;
            v69 = (uint64_t *)(v36 + 16 * v38);
            v71 = *v69;
            v70 = v69[1];
            v49 = __OFSUB__(v70, v71);
            v72 = v70 - v71;
            if (v49)
              goto LABEL_128;
            if (v72 < v60)
              goto LABEL_15;
LABEL_85:
            v77 = v38 - 1;
            if (v38 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10)
              goto LABEL_144;
            v78 = v11;
            v79 = (uint64_t *)(v36 + 16 * v77);
            v80 = *v79;
            v81 = (_QWORD *)(v36 + 16 * v38);
            v82 = v81[1];
            result = sub_1D5DCC8A8((double *)(v10 + 24 * *v79), (double *)(v10 + 24 * *v81), v10 + 24 * v82, v106);
            if (v1)
              goto LABEL_93;
            if (v82 < v80)
              goto LABEL_117;
            if (v38 > *(_QWORD *)(v78 + 16))
              goto LABEL_118;
            *v79 = v80;
            *(_QWORD *)(v36 + 16 * v77 + 8) = v82;
            v83 = *(_QWORD *)(v78 + 16);
            if (v38 >= v83)
              goto LABEL_119;
            v11 = v78;
            v12 = v83 - 1;
            result = (uint64_t)memmove((void *)(v36 + 16 * v38), v81 + 2, 16 * (v83 - 1 - v38));
            *(_QWORD *)(v78 + 16) = v83 - 1;
            v10 = v105;
            if (v83 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v103;
        v3 = v104;
        if (v9 >= v104)
        {
          v8 = v102;
          goto LABEL_103;
        }
      }
    }
    v8 = MEMORY[0x1E0DEE9D8];
    v106 = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 == 1)
    {
      v102 = MEMORY[0x1E0DEE9D8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v11 = MEMORY[0x1E0DEE9D8];
LABEL_103:
    result = v11;
    v102 = v8;
    if (v12 >= 2)
    {
      v93 = *v100;
      do
      {
        v94 = v12 - 2;
        if (v12 < 2)
          goto LABEL_132;
        if (!v93)
          goto LABEL_146;
        v95 = result;
        v96 = *(_QWORD *)(result + 32 + 16 * v94);
        v97 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_1D5DCC8A8((double *)(v93 + 24 * v96), (double *)(v93 + 24 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v93 + 24 * v97, v106);
        if (v1)
          break;
        if (v97 < v96)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1D5E259C8(v95);
          v95 = result;
        }
        if (v94 >= *(_QWORD *)(v95 + 16))
          goto LABEL_134;
        v98 = (_QWORD *)(v95 + 32 + 16 * v94);
        *v98 = v96;
        v98[1] = v97;
        v99 = *(_QWORD *)(v95 + 16);
        if (v12 > v99)
          goto LABEL_135;
        memmove((void *)(v95 + 32 + 16 * (v12 - 1)), (const void *)(v95 + 32 + 16 * v12), 16 * (v99 - v12));
        result = v95;
        *(_QWORD *)(v95 + 16) = v99 - 1;
        v12 = v99 - 1;
      }
      while (v99 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v102 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D5DCC8A8(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  __int128 v16;
  unint64_t v17;
  double *v18;
  double *v19;
  BOOL v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 24;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 24;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[3 * v11] <= a4)
      memmove(a4, __src, 24 * v11);
    v12 = &v4[3 * v11];
    if (v7 >= v6 || v10 < 24)
      goto LABEL_39;
    v17 = a3 - 24;
    while (1)
    {
      v18 = (double *)(v17 + 24);
      if (*(v12 - 1) >= *(v6 - 1))
      {
        v19 = v12 - 3;
        if (v18 != v12)
        {
          v12 -= 3;
          goto LABEL_36;
        }
        v20 = v17 >= (unint64_t)v12;
        v12 -= 3;
        if (v20)
          goto LABEL_36;
      }
      else
      {
        v19 = v6 - 3;
        if (v18 != v6)
        {
          v6 -= 3;
LABEL_36:
          v21 = *(_OWORD *)v19;
          *(double *)(v17 + 16) = v19[2];
          *(_OWORD *)v17 = v21;
          goto LABEL_37;
        }
        v20 = v17 >= (unint64_t)v6;
        v6 -= 3;
        if (v20)
          goto LABEL_36;
      }
LABEL_37:
      if (v6 > v7)
      {
        v17 -= 24;
        if (v12 > v4)
          continue;
      }
      goto LABEL_39;
    }
  }
  if (a4 != __dst || &__dst[3 * v9] <= a4)
    memmove(a4, __dst, 24 * v9);
  v12 = &v4[3 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (1)
    {
      if (v6[2] >= v4[2])
      {
        v15 = v4 + 3;
        v14 = v4;
        v13 = v6;
        if (v7 == v4)
        {
          v4 += 3;
          if (v7 < v15)
            goto LABEL_16;
        }
        else
        {
          v4 += 3;
        }
      }
      else
      {
        v13 = v6 + 3;
        v14 = v6;
        if (v7 == v6 && v7 < v13)
          goto LABEL_16;
      }
      v16 = *(_OWORD *)v14;
      v7[2] = v14[2];
      *(_OWORD *)v7 = v16;
LABEL_16:
      v7 += 3;
      if (v4 < v12)
      {
        v6 = v13;
        if ((unint64_t)v13 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_39:
  v22 = (unsigned __int128)(((char *)v12 - (char *)v4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v23 = (v22 >> 2) + ((unint64_t)v22 >> 63);
  if (v6 != v4 || v6 >= &v4[3 * v23])
    memmove(v6, v4, 24 * v23);
  return 1;
}

uint64_t sub_1D5DCCB04(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t result;
  uint64_t v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;

  v4 = v3;
  v8 = *v3;
  sub_1D5E379A4();
  sub_1D5E3744C();
  v9 = sub_1D5E379C8();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  v12 = v8 + 56;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v13 = *(_QWORD *)(v8 + 48);
    v14 = (_QWORD *)(v13 + 16 * v11);
    v15 = *v14 == a1 && v14[1] == a2;
    if (v15 || (sub_1D5E378FC() & 1) != 0)
    {
LABEL_7:
      v16 = 0;
      v17 = 1;
      goto LABEL_18;
    }
    v18 = ~v10;
    v11 = (v11 + 1) & ~v10;
    if (((*(_QWORD *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
    {
      v16 = 1;
      while (1)
      {
        v19 = (_QWORD *)(v13 + 16 * v11);
        v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (sub_1D5E378FC() & 1) != 0)
          goto LABEL_7;
        v11 = (v11 + 1) & v18;
        if (((*(_QWORD *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        {
          v17 = 0;
          goto LABEL_18;
        }
      }
    }
  }
  v17 = 0;
  v16 = 1;
LABEL_18:
  v21 = *(_QWORD *)(v8 + 16);
  v22 = v21 + v16;
  if (__OFADD__(v21, v16))
  {
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v23 = *(_QWORD *)(v8 + 24);
  if (v23 >= v22 && (a3 & 1) != 0)
  {
    if (!v17)
      goto LABEL_46;
    goto LABEL_36;
  }
  if ((a3 & 1) != 0)
  {
    sub_1D5D852D0();
  }
  else
  {
    if (v23 >= v22)
    {
      sub_1D5D84A28();
      if (!v17)
      {
LABEL_46:
        v36 = *v4;
        *(_QWORD *)(*v4 + 8 * (v11 >> 6) + 56) |= 1 << v11;
        v37 = (uint64_t *)(*(_QWORD *)(v36 + 48) + 16 * v11);
        *v37 = a1;
        v37[1] = a2;
        v38 = *(_QWORD *)(v36 + 16);
        v39 = __OFADD__(v38, 1);
        v40 = v38 + 1;
        if (!v39)
        {
          result = 0;
          *(_QWORD *)(v36 + 16) = v40;
          return result;
        }
        goto LABEL_49;
      }
LABEL_36:
      v31 = (uint64_t *)(*(_QWORD *)(*v4 + 48) + 16 * v11);
      result = *v31;
      *v31 = a1;
      v31[1] = a2;
      return result;
    }
    sub_1D5D855AC();
  }
  v24 = *v4;
  sub_1D5E379A4();
  sub_1D5E3744C();
  v25 = sub_1D5E379C8();
  v26 = -1 << *(_BYTE *)(v24 + 32);
  v11 = v25 & ~v26;
  v27 = v24 + 56;
  if (((*(_QWORD *)(v24 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    goto LABEL_45;
  v28 = *(_QWORD *)(v24 + 48);
  v29 = (_QWORD *)(v28 + 16 * v11);
  v30 = *v29 == a1 && v29[1] == a2;
  if (!v30 && (sub_1D5E378FC() & 1) == 0)
  {
    v33 = ~v26;
    while (1)
    {
      v11 = (v11 + 1) & v33;
      if (((*(_QWORD *)(v27 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        break;
      v34 = (_QWORD *)(v28 + 16 * v11);
      v35 = *v34 == a1 && v34[1] == a2;
      if (v35 || (sub_1D5E378FC() & 1) != 0)
        goto LABEL_35;
    }
LABEL_45:
    if ((v17 & 1) == 0)
      goto LABEL_46;
    goto LABEL_50;
  }
LABEL_35:
  if ((v17 & 1) != 0)
    goto LABEL_36;
LABEL_50:
  result = sub_1D5E37950();
  __break(1u);
  return result;
}

uint64_t sub_1D5DCCDE4(char a1, double a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v5 = *v2;
  v6 = sub_1D5E37998();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  v9 = v5 + 56;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    goto LABEL_9;
  v10 = *(_QWORD *)(v5 + 48);
  if (*(double *)(v10 + 8 * v8) == a2)
  {
    v11 = 0;
    v12 = 1;
    goto LABEL_10;
  }
  v13 = ~v7;
  v8 = (v8 + 1) & ~v7;
  if (((*(_QWORD *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v11 = 1;
    while (1)
    {
      v14 = *(double *)(v10 + 8 * v8);
      v12 = v14 == a2;
      if (v14 == a2)
        break;
      v8 = (v8 + 1) & v13;
      if (((*(_QWORD *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_10;
    }
    v11 = 0;
  }
  else
  {
LABEL_9:
    v12 = 0;
    v11 = 1;
  }
LABEL_10:
  v15 = *(_QWORD *)(v5 + 16);
  v16 = v15 + v11;
  if (__OFADD__(v15, v11))
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v5 + 24);
  if (v17 >= v16 && (a1 & 1) != 0)
  {
    if (!v12)
      goto LABEL_30;
    goto LABEL_24;
  }
  if ((a1 & 1) != 0)
  {
    sub_1D5DCB48C();
  }
  else
  {
    if (v17 >= v16)
    {
      sub_1D5DCB9A8();
      if (!v12)
      {
LABEL_30:
        v25 = *v2;
        *(_QWORD *)(*v2 + 8 * (v8 >> 6) + 56) |= 1 << v8;
        *(double *)(*(_QWORD *)(v25 + 48) + 8 * v8) = a2;
        v26 = *(_QWORD *)(v25 + 16);
        v27 = __OFADD__(v26, 1);
        v28 = v26 + 1;
        if (!v27)
        {
          result = 0;
          *(_QWORD *)(v25 + 16) = v28;
          return result;
        }
        goto LABEL_34;
      }
LABEL_24:
      v22 = *(_QWORD *)(*v2 + 48);
      result = *(_QWORD *)(v22 + 8 * v8);
      *(double *)(v22 + 8 * v8) = a2;
      return result;
    }
    sub_1D5DCBF08();
  }
  v18 = *v2;
  v19 = sub_1D5E37998();
  v20 = -1 << *(_BYTE *)(v18 + 32);
  v8 = v19 & ~v20;
  if (((*(_QWORD *)(v18 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    goto LABEL_29;
  v21 = *(_QWORD *)(v18 + 48);
  if (*(double *)(v21 + 8 * v8) != a2)
  {
    v24 = ~v20;
    while (1)
    {
      v8 = (v8 + 1) & v24;
      if (((*(_QWORD *)(v18 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        break;
      if (*(double *)(v21 + 8 * v8) == a2)
        goto LABEL_23;
    }
LABEL_29:
    if (!v12)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_23:
  if (v12)
    goto LABEL_24;
LABEL_35:
  result = sub_1D5E37950();
  __break(1u);
  return result;
}

uint64_t sub_1D5DCD01C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1D5DCA9D4(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(Swift::Double *)(v2 + 56));
}

uint64_t sub_1D5DCD040()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for Classic.TagEvaluator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Classic.TagEvaluator);
}

uint64_t sub_1D5DCD054(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF5C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D5DCD094(uint64_t a1, uint64_t a2)
{
  return sub_1D5DCD0B8(a1, a2, sub_1D5D922F4);
}

uint64_t sub_1D5DCD0A0(uint64_t a1, uint64_t a2)
{
  return sub_1D5DCD0B8(a1, a2, sub_1D5D92CF8);
}

uint64_t sub_1D5DCD0AC(uint64_t a1, uint64_t a2)
{
  return sub_1D5DCD0B8(a1, a2, sub_1D5D930A0);
}

uint64_t sub_1D5DCD0B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = a3();
  v6 = v5;
  if (v4 == a3() && v6 == v7)
    v9 = 1;
  else
    v9 = sub_1D5E378FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1D5DCD150(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6C616E6F73726570;
    else
      v3 = 0x6669737265766964;
    if (v2 == 1)
      v4 = 0xEC00000064657A69;
    else
      v4 = 0xEB00000000646569;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6C616E6F73726570;
      else
        v6 = 0x6669737265766964;
      if (v5 == 1)
        v7 = 0xEC00000064657A69;
      else
        v7 = 0xEB00000000646569;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x6C616369706F74;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x6C616369706F74)
  {
LABEL_21:
    v8 = sub_1D5E378FC();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1D5DCD288(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5DCD2D0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1D5DCD324 + 4 * byte_1D5E3D9A5[a2]))(109);
}

uint64_t sub_1D5DCD324(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 109 && v1 == 0xE100000000000000)
    v2 = 1;
  else
    v2 = sub_1D5E378FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1D5DCD3C0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 96);
}

double sub_1D5DCD3C8()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

double sub_1D5DCD3D0()
{
  uint64_t v0;

  return *(double *)(v0 + 104);
}

double sub_1D5DCD3D8()
{
  uint64_t v0;

  return *(double *)(v0 + 112);
}

double sub_1D5DCD3E0()
{
  uint64_t v0;

  return *(double *)(v0 + 136);
}

double sub_1D5DCD3E8()
{
  uint64_t v0;

  return *(double *)(v0 + 144);
}

double sub_1D5DCD3F0()
{
  uint64_t v0;

  return *(double *)(v0 + 120);
}

double sub_1D5DCD3F8()
{
  uint64_t v0;

  return *(double *)(v0 + 128);
}

double sub_1D5DCD400()
{
  uint64_t v0;

  return *(double *)(v0 + 920);
}

double sub_1D5DCD408()
{
  uint64_t v0;

  return *(double *)(v0 + 912);
}

__n128 sub_1D5DCD410@<Q0>(uint64_t a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, const void *a7@<X6>, uint64_t a8@<X8>)
{
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __n128 result;
  __int128 v22;

  v15 = *(_BYTE *)(a1 + 16);
  v16 = *(_BYTE *)(a1 + 17);
  v17 = *(_BYTE *)(a1 + 18);
  memcpy((void *)(a8 + 40), a2, 0x768uLL);
  memcpy((void *)(a8 + 1936), a3, 0x3EBuLL);
  v18 = *(_QWORD *)(a4 + 64);
  v19 = *a5;
  memcpy((void *)(a8 + 3032), a7, 0x238uLL);
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(_OWORD *)(a8 + 24) = *(_OWORD *)(a1 + 24);
  v20 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a8 + 2944) = *(_OWORD *)a4;
  *(_OWORD *)(a8 + 2960) = v20;
  result = *(__n128 *)(a4 + 32);
  v22 = *(_OWORD *)(a4 + 48);
  *(__n128 *)(a8 + 2976) = result;
  *(_BYTE *)(a8 + 16) = v15;
  *(_BYTE *)(a8 + 17) = v16;
  *(_BYTE *)(a8 + 18) = v17;
  *(_OWORD *)(a8 + 2992) = v22;
  *(_QWORD *)(a8 + 3008) = v18;
  *(_QWORD *)(a8 + 3016) = v19;
  *(_QWORD *)(a8 + 3024) = a6;
  return result;
}

double sub_1D5DCD4E4@<D0>(double *a1@<X8>, double a2@<D0>)
{
  double result;

  sub_1D5DC2E04(a2);
  result = a2;
  *a1 = a2;
  return result;
}

double sub_1D5DCD51C@<D0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double result;

  sub_1D5DC2E20(a5);
  result = a5;
  *(double *)a4 = a5;
  *(_BYTE *)(a4 + 8) = a1;
  *(_BYTE *)(a4 + 9) = a2;
  *(_BYTE *)(a4 + 10) = a3;
  return result;
}

uint64_t sub_1D5DCD57C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DCD594(a1, (uint64_t (*)(void))sub_1D5DC2E58, a2);
}

uint64_t sub_1D5DCD588@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DCD594(a1, (uint64_t (*)(void))sub_1D5DC2E3C, a2);
}

uint64_t sub_1D5DCD594@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  result = a2();
  *a3 = a1;
  return result;
}

double sub_1D5DCD5CC@<D0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  return sub_1D5D87C10((uint64_t (*)(void))sub_1D5DC4610, (uint64_t (*)(uint64_t, double))sub_1D5DC47E8, (void (*)(uint64_t, double))sub_1D5DC4804, a1, a2, a3, a4);
}

__n128 sub_1D5DCD5E8@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result;
  __n128 v4;

  result = *a1;
  v4 = *a2;
  *a3 = *a1;
  a3[1] = v4;
  return result;
}

__n128 sub_1D5DCD5F8@<Q0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, double *a6@<X5>, double *a7@<X6>, double *a8@<X7>, uint64_t a9@<X8>, double *a10, __int128 *a11, __int128 *a12, __int128 *a13, __int128 *a14, __int128 *a15, __int128 *a16, __int128 *a17, __n128 *a18)
{
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __n128 result;
  double v28;
  double v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  double v37;
  double v38;
  double v39;
  __int128 v40;
  double v41;
  double v42;
  double v43;
  __int128 v44;
  double v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  double v51;
  __int128 v52;
  double v53;
  double v54;
  __int128 v55;
  __int128 v56;
  double v57;
  double v58;
  double v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  double v63;
  double v64;
  double v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __n128 v71;
  __n128 v72;
  double v73;
  __int128 v74;
  __int128 v75;
  double v76;
  double v77;
  double v78;

  v19 = *a2;
  v20 = a2[1];
  v21 = a2[2];
  v22 = a2[3];
  v23 = *a3;
  v24 = a3[1];
  v25 = a3[2];
  v26 = a3[3];
  v64 = a4[1];
  v65 = *a4;
  v63 = a4[2];
  v58 = a5[1];
  v59 = *a5;
  v57 = a5[2];
  v28 = a4[3];
  v29 = a5[3];
  v53 = a6[1];
  v54 = *a6;
  v51 = a6[2];
  v46 = a7[1];
  v47 = *a7;
  v45 = a7[2];
  v37 = a6[3];
  v38 = a7[3];
  v42 = a8[1];
  v43 = *a8;
  v41 = a8[2];
  v39 = a8[3];
  v75 = *(_OWORD *)a1;
  v76 = a1[2];
  v78 = a1[3];
  v30 = *(_OWORD *)a10;
  v31 = a10[2];
  v32 = a10[3];
  v33 = *a11;
  v34 = a11[1];
  v35 = *a12;
  v36 = a12[1];
  v40 = *a13;
  v44 = a13[1];
  v49 = *a14;
  v50 = a14[1];
  v55 = *a15;
  v56 = a15[1];
  v61 = *a16;
  v62 = a16[1];
  v67 = *a17;
  v68 = a17[1];
  v71 = *a18;
  v72 = a18[1];
  sub_1D5DC4820(*a1, a1[1], v76, v78);
  v74 = v75;
  v73 = v76;
  *(double *)&v75 = v19;
  *((double *)&v75 + 1) = v20;
  sub_1D5DC483C(v19, v20, v21, v22);
  v70 = v75;
  *(double *)&v75 = v23;
  *((double *)&v75 + 1) = v24;
  sub_1D5DC4858(v23, v24, v25, v26);
  v69 = v75;
  *(double *)&v75 = v65;
  *((double *)&v75 + 1) = v64;
  sub_1D5DC4A5C(v65, v64, v63, v28);
  v66 = v75;
  *(double *)&v75 = v59;
  *((double *)&v75 + 1) = v58;
  sub_1D5DC4A78(v59, v58, v57, v29);
  v60 = v75;
  *(double *)&v75 = v54;
  *((double *)&v75 + 1) = v53;
  v77 = v51;
  sub_1D5DC4C7C(v54, v53, v51, v37);
  v52 = v75;
  *(double *)&v75 = v47;
  *((double *)&v75 + 1) = v46;
  sub_1D5DC4E80(v47, v46, v45, v38);
  v48 = v75;
  *(double *)&v75 = v43;
  *((double *)&v75 + 1) = v42;
  sub_1D5DC4E9C(v43, v42, v41, v39);
  sub_1D5DC4EB8(*(double *)&v30, *((double *)&v30 + 1), v31, v32);
  sub_1D5DC4ED4(*(double *)&v33, *((double *)&v33 + 1), *(double *)&v34, *((double *)&v34 + 1));
  sub_1D5DC4EF0(*(double *)&v35, *((double *)&v35 + 1), *(double *)&v36, *((double *)&v36 + 1));
  sub_1D5DC5104(*(double *)&v40, *((double *)&v40 + 1), *(double *)&v44, *((double *)&v44 + 1));
  sub_1D5DC5318(*(double *)&v49, *((double *)&v49 + 1), *(double *)&v50, *((double *)&v50 + 1));
  sub_1D5DC5518(*(double *)&v55, *((double *)&v55 + 1), *(double *)&v56, *((double *)&v56 + 1));
  sub_1D5DC5718(*(double *)&v61, *((double *)&v61 + 1), *(double *)&v62, *((double *)&v62 + 1));
  sub_1D5DC5928(*(double *)&v67, *((double *)&v67 + 1), *(double *)&v68, *((double *)&v68 + 1));
  sub_1D5DC5B40(v71.n128_f64[0], v71.n128_f64[1], v72.n128_f64[0], v72.n128_f64[1]);
  *(_OWORD *)a9 = v74;
  *(double *)(a9 + 16) = v73;
  *(double *)(a9 + 24) = v78;
  *(_OWORD *)(a9 + 32) = v70;
  *(double *)(a9 + 48) = v21;
  *(double *)(a9 + 56) = v22;
  *(_OWORD *)(a9 + 64) = v69;
  *(double *)(a9 + 80) = v25;
  *(double *)(a9 + 88) = v26;
  *(_OWORD *)(a9 + 96) = v66;
  *(double *)(a9 + 112) = v63;
  *(double *)(a9 + 120) = v28;
  *(_OWORD *)(a9 + 128) = v60;
  *(double *)(a9 + 144) = v57;
  *(double *)(a9 + 152) = v29;
  *(_OWORD *)(a9 + 160) = v52;
  *(double *)(a9 + 176) = v77;
  *(double *)(a9 + 184) = v37;
  result = v71;
  *(_OWORD *)(a9 + 192) = v48;
  *(double *)(a9 + 208) = v45;
  *(double *)(a9 + 216) = v38;
  *(_OWORD *)(a9 + 224) = v75;
  *(double *)(a9 + 240) = v41;
  *(double *)(a9 + 248) = v39;
  *(_OWORD *)(a9 + 256) = v30;
  *(double *)(a9 + 272) = v31;
  *(double *)(a9 + 280) = v32;
  *(_OWORD *)(a9 + 288) = v33;
  *(_OWORD *)(a9 + 304) = v34;
  *(_OWORD *)(a9 + 320) = v35;
  *(_OWORD *)(a9 + 336) = v36;
  *(_OWORD *)(a9 + 352) = v40;
  *(_OWORD *)(a9 + 368) = v44;
  *(_OWORD *)(a9 + 384) = v49;
  *(_OWORD *)(a9 + 400) = v50;
  *(_OWORD *)(a9 + 416) = v55;
  *(_OWORD *)(a9 + 432) = v56;
  *(_OWORD *)(a9 + 448) = v61;
  *(_OWORD *)(a9 + 464) = v62;
  *(_OWORD *)(a9 + 480) = v67;
  *(_OWORD *)(a9 + 496) = v68;
  *(__n128 *)(a9 + 512) = v71;
  *(__n128 *)(a9 + 528) = v72;
  return result;
}

__n128 sub_1D5DCDB9C@<Q0>(__n128 *a1@<X0>, const void *a2@<X1>, __n128 *a3@<X8>)
{
  unint64_t v5;
  __n128 result;

  v5 = a1[1].n128_u64[0];
  memcpy(&a3[1].n128_i8[8], a2, 0x220uLL);
  result = *a1;
  *a3 = *a1;
  a3[1].n128_u64[0] = v5;
  return result;
}

uint64_t sub_1D5DCDBE0()
{
  return 2;
}

uint64_t sub_1D5DCDBE8()
{
  return 2;
}

uint64_t sub_1D5DCDBF0()
{
  return 2;
}

uint64_t sub_1D5DCDBF8()
{
  return 2;
}

uint64_t sub_1D5DCDC00()
{
  return 5;
}

uint64_t sub_1D5DCDC08()
{
  return 3;
}

void sub_1D5DCDC18(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD v18[9];

  v18[0] = a1;
  ConditionalConfigurableValue.init(wrappedValue:)((uint64_t)v18, a10, (uint64_t)&_s28PositiveIntConditionProviderVN, a18, (uint64_t)&off_1ED9AEF28, a2);
}

void sub_1D5DCDDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_OWORD *)(v10 + 8) = a10;
  *(_OWORD *)(v10 + 24) = a9;
  *(_QWORD *)(v10 + 40) = v17;
  *(_QWORD *)(v16 - 216) = v14;
  ConditionalConfigurableValue.init(wrappedValue:)(v16 - 216, v11, v13, v15, v12, v10 + 48);
}

void sub_1D5DCDDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_OWORD *)(v14 + 56) = a14;
  *(_OWORD *)(v14 + 72) = a13;
  *(_QWORD *)(v14 + 88) = v21;
  *(_QWORD *)(v20 - 216) = v15;
  ConditionalConfigurableValue.init(wrappedValue:)(v20 - 216, v17, v18, v19, v16, v14 + 96);
}

void sub_1D5DCDE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  *(_OWORD *)(v41 + 104) = a18;
  *(_OWORD *)(v41 + 120) = a17;
  *(_QWORD *)(v41 + 136) = v45;
  *(_QWORD *)(v44 - 216) = a41;
  ConditionalConfigurableValue.init(wrappedValue:)(v44 - 216, a27, v43, a28, v42, v41 + 144);
}

void sub_1D5DCDE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21,__int128 a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(_OWORD *)(v44 + 152) = a22;
  *(_OWORD *)(v44 + 168) = a21;
  *(_QWORD *)(v44 + 184) = v49;
  *(_QWORD *)(v48 - 216) = v45;
  ConditionalConfigurableValue.init(wrappedValue:)(v48 - 216, a44, v47, a43, v46, v44 + 192);
}

void sub_1D5DCDE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,__int128 a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  *(_OWORD *)(v49 + 200) = a26;
  *(_OWORD *)(v49 + 216) = a25;
  *(_QWORD *)(v49 + 232) = v53;
  *(_QWORD *)(v52 - 216) = a42;
  ConditionalConfigurableValue.init(wrappedValue:)(v52 - 216, a48, v51, a49, v50, v49 + 240);
}

void sub_1D5DCDEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,__int128 a31,__int128 a32,uint64_t a33,uint64_t a34,__int128 a35,__int128 a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  *(_OWORD *)(v38 + 248) = a32;
  v43 = v38 + 248;
  *(_OWORD *)(v43 + 16) = a31;
  *(_QWORD *)(v43 + 32) = v42;
  *(_QWORD *)(v39 - 216) = v40;
  *(_QWORD *)(v39 - 208) = a38;
  *(_OWORD *)(v39 - 200) = a36;
  *(_OWORD *)(v39 - 184) = a35;
  *(_QWORD *)(v39 - 168) = v41;
  *(_QWORD *)(v39 - 160) = a34;
  v44 = sub_1D5DEDD6C();
  ConditionalConfigurableValue.init(wrappedValue:)(v39 - 216, *(_QWORD *)(v39 - 240), (uint64_t)&_s22QuotaConditionProviderVN, *(_QWORD *)(v39 - 248), v44, v43 + 40);
}

void sub_1D5DCDF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  *(_QWORD *)(v50 - 216) = a49;
  *(_QWORD *)(v50 - 208) = a48;
  *(_QWORD *)(v50 - 200) = a47;
  v51 = sub_1D5DEDDB0();
  ConditionalConfigurableValue.init(wrappedValue:)(v50 - 216, *(_QWORD *)(v50 - 232), (uint64_t)&_s31TopicDiversityConditionProviderVN, *(_QWORD *)(v50 - 224), v51, v49 + 104);
}

__n128 sub_1D5DCDF50()
{
  uint64_t v0;
  __n128 result;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  __int128 v8;

  result = v7;
  *(_OWORD *)(v0 + 128) = v8;
  *(__n128 *)(v0 + 144) = v7;
  v2 = v0 + 128;
  *(_QWORD *)(v2 + 32) = v6;
  *(_QWORD *)(v2 + 40) = v5;
  *(_BYTE *)(v2 + 48) = v3;
  *(_BYTE *)(v2 + 49) = v4;
  return result;
}

uint64_t sub_1D5DCDFA8()
{
  return 100;
}

uint64_t sub_1D5DCDFB0()
{
  return 100;
}

uint64_t sub_1D5DCDFB8()
{
  return 2;
}

uint64_t sub_1D5DCDFC0()
{
  return 5;
}

uint64_t sub_1D5DCDFC8()
{
  return 3;
}

uint64_t static Classic.Configuration.ClusteringConfiguration.DefaultTopicClusteringKnobsMaxEvergreenArticles.defaultValue.getter()
{
  return 2;
}

uint64_t static Classic.Configuration.ClusteringConfiguration.DefaultTopicClusteringKnobsMaxInaccessibleArticles.defaultValue.getter()
{
  return 2;
}

uint64_t static Classic.Configuration.ClusteringConfiguration.DefaultTopicClusteringKnobsMaxPublisherOccurrences.defaultValue.getter()
{
  return 2;
}

uint64_t static Classic.Configuration.ClusteringConfiguration.DefaultTopicClusteringKnobsMaxSize.defaultValue.getter()
{
  return 30;
}

uint64_t static Classic.Configuration.ClusteringConfiguration.DefaultTopicClusteringKnobsMinSize.defaultValue.getter()
{
  return 3;
}

double sub_1D5DCE008@<D0>(void *__src@<X0>, const void *a2@<X1>, _BYTE *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, double a14@<D4>, double a15@<D5>, double a16@<D6>, double a17@<D7>, uint64_t a18, const void *a19, char a20,uint64_t a21,const void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,double a27)
{
  double result;

  memcpy((void *)a9, __src, 0x1AAuLL);
  memcpy((void *)(a9 + 432), a2, 0x1AAuLL);
  LOBYTE(a2) = *a3;
  sub_1D5DC2E74(a10);
  *(double *)(a9 + 864) = a10;
  *(_BYTE *)(a9 + 872) = (_BYTE)a2;
  *(_BYTE *)(a9 + 888) = a4;
  *(_QWORD *)(a9 + 880) = a5;
  sub_1D5DC2E90(a6);
  *(_QWORD *)(a9 + 896) = a6;
  *(_BYTE *)(a9 + 904) = a7;
  *(_BYTE *)(a9 + 905) = a8;
  sub_1D5DC3050(a11);
  *(double *)(a9 + 912) = a11;
  sub_1D5DC306C(a12);
  *(double *)(a9 + 920) = a12;
  sub_1D5DC3088(a18);
  *(_QWORD *)(a9 + 928) = a18;
  sub_1D5DC3238(a13);
  *(double *)(a9 + 936) = a13;
  sub_1D5DC3254(a14);
  *(double *)(a9 + 944) = a14;
  memcpy((void *)(a9 + 952), a19, 0x1AAuLL);
  sub_1D5DC3270(a15);
  *(double *)(a9 + 1384) = a15;
  sub_1D5DC343C(a16);
  *(double *)(a9 + 1392) = a16;
  *(_BYTE *)(a9 + 1400) = a20;
  sub_1D5DC3458(a21);
  *(_QWORD *)(a9 + 1408) = a21;
  sub_1D5DC3608(a17);
  *(double *)(a9 + 1416) = a17;
  memcpy((void *)(a9 + 1424), a22, 0x1AAuLL);
  sub_1D5DC37CC(*(double *)&a23);
  *(_QWORD *)(a9 + 1856) = a23;
  sub_1D5DC3988(*(double *)&a24);
  *(_QWORD *)(a9 + 1864) = a24;
  sub_1D5DC39A4(*(double *)&a25);
  *(_QWORD *)(a9 + 1872) = a25;
  sub_1D5DC39C0(*(double *)&a26);
  *(_QWORD *)(a9 + 1880) = a26;
  sub_1D5DC39DC(a27);
  result = a27;
  *(double *)(a9 + 1888) = a27;
  return result;
}

double sub_1D5DCE2CC@<D0>(double *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  double result;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *((_BYTE *)a2 + 9);
  v9 = *((_BYTE *)a2 + 10);
  v10 = *a3;
  v11 = *a4;
  *(double *)a5 = *a1;
  *(_QWORD *)(a5 + 8) = v6;
  *(_BYTE *)(a5 + 16) = v7;
  *(_BYTE *)(a5 + 17) = v8;
  *(_BYTE *)(a5 + 18) = v9;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v11;
  return result;
}

uint64_t sub_1D5DCE300()
{
  unsigned __int8 *v0;

  return *v0;
}

double sub_1D5DCE308()
{
  uint64_t v0;

  return *(double *)v0;
}

__n128 sub_1D5DCE310@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 17);
  v4 = *(_BYTE *)(v1 + 18);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_BYTE *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 17) = v3;
  *(_BYTE *)(a1 + 18) = v4;
  result = *(__n128 *)(v1 + 24);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1D5DCE33C@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE __dst[1896];

  v3 = (const void *)(v1 + 40);
  memcpy(__dst, v3, sizeof(__dst));
  memcpy(a1, v3, 0x768uLL);
  return sub_1D5DBBE24((uint64_t)__dst);
}

void *sub_1D5DCE394@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return memcpy(a1, (const void *)(v1 + 1936), 0x3EBuLL);
}

__n128 sub_1D5DCE3A4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_QWORD *)(v1 + 3008);
  v3 = *(_OWORD *)(v1 + 2960);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 2944);
  *(_OWORD *)(a1 + 16) = v3;
  result = *(__n128 *)(v1 + 2976);
  v5 = *(_OWORD *)(v1 + 2992);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = v2;
  return result;
}

uint64_t sub_1D5DCE3C8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 3016);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DCE3D4()
{
  return swift_bridgeObjectRetain();
}

void *sub_1D5DCE3DC@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return memcpy(a1, (const void *)(v1 + 3032), 0x238uLL);
}

unint64_t sub_1D5DCE3EC@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 5;
  if (result < 5)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t sub_1D5DCE400()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DCE444()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5DCE46C()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

unint64_t sub_1D5DCE4AC@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_1D5DCE3EC(*a1, a2);
}

void sub_1D5DCE4B4(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_1D5DCE4C0()
{
  sub_1D5E008F4();
  return sub_1D5E374E8();
}

uint64_t sub_1D5DCE51C()
{
  sub_1D5E008F4();
  return sub_1D5E374AC();
}

BOOL sub_1D5DCE568(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_1D5DCE57C(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_1D5DCE588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v9;
  uint64_t v10;

  if (((a1 | a2) & 0x100000000) != 0)
    return 0;
  v4 = *(_QWORD *)(v2 + 16);
  v9 = sub_1D5E378CC();
  v10 = v5;
  sub_1D5E378CC();
  sub_1D5E37458();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + 16) && (v6 = sub_1D5D7FFCC(v9, v10), (v7 & 1) != 0))
    v3 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v6);
  else
    v3 = 0;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1D5DCE66C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && *((double *)a1 + 1) == *((double *)a2 + 1))
    return sub_1D5DCEA60(*((_QWORD *)a1 + 2), *((_QWORD *)a2 + 2));
  else
    return 0;
}

uint64_t sub_1D5DCE69C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  int v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  int v24;
  double v25;
  int v26;
  unint64_t v27;
  char v28;
  char v29;
  double *v30;
  uint64_t v35;
  int64_t v36;
  int64_t v37;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v35 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v36 = (unint64_t)(v5 + 63) >> 6;
  while (v7)
  {
    v8 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v37 = v4;
    v9 = v8 | (v4 << 6);
LABEL_22:
    v14 = v3;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v9);
    v16 = *v15;
    v17 = v15[1];
    v18 = (double *)(*(_QWORD *)(v3 + 56) + (v9 << 6));
    v19 = *(unsigned __int8 *)v18;
    v20 = v18[1];
    v21 = *((_QWORD *)v18 + 2);
    v22 = v18[3];
    v23 = v18[4];
    v24 = *((unsigned __int8 *)v18 + 40);
    v25 = v18[6];
    v26 = *((unsigned __int8 *)v18 + 56);
    swift_bridgeObjectRetain();
    v27 = sub_1D5D7FFCC(v16, v17);
    v29 = v28;
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
      return 0;
    result = 0;
    v30 = (double *)(*(_QWORD *)(a2 + 56) + (v27 << 6));
    if (v19 == *(unsigned __int8 *)v30
      && v30[1] == v20
      && *((_QWORD *)v30 + 2) == v21
      && v30[3] == v22
      && v30[4] == v23
      && ((v24 ^ *((unsigned __int8 *)v30 + 40)) & 1) == 0
      && v30[6] == v25)
    {
      v3 = v14;
      v4 = v37;
      if (((v26 ^ *((unsigned __int8 *)v30 + 56)) & 1) == 0)
        continue;
    }
    return result;
  }
  v10 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_45;
  }
  if (v10 >= v36)
    return 1;
  v11 = *(_QWORD *)(v35 + 8 * v10);
  v12 = v4 + 1;
  if (v11)
    goto LABEL_21;
  v12 = v4 + 2;
  if (v4 + 2 >= v36)
    return 1;
  v11 = *(_QWORD *)(v35 + 8 * v12);
  if (v11)
    goto LABEL_21;
  v12 = v4 + 3;
  if (v4 + 3 >= v36)
    return 1;
  v11 = *(_QWORD *)(v35 + 8 * v12);
  if (v11)
  {
LABEL_21:
    v7 = (v11 - 1) & v11;
    v37 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
    goto LABEL_22;
  }
  v13 = v4 + 4;
  if (v4 + 4 >= v36)
    return 1;
  v11 = *(_QWORD *)(v35 + 8 * v13);
  if (v11)
  {
    v12 = v4 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v36)
      return 1;
    v11 = *(_QWORD *)(v35 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_21;
  }
LABEL_45:
  __break(1u);
  return result;
}

unint64_t sub_1D5DCE8F4(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  double v16;
  char v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = 8 * v11;
    v16 = *(double *)(*(_QWORD *)(v3 + 56) + v15);
    result = sub_1D5D979D0(*(_QWORD *)(*(_QWORD *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(double *)(*(_QWORD *)(a2 + 56) + 8 * result) != v16)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1D5DCEA60(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  char v20;
  char v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(double *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    v19 = sub_1D5D7FFCC(v16, v17);
    v21 = v20;
    result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(double *)(*(_QWORD *)(a2 + 56) + 8 * v19) != v18)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1D5DCEBFC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  int64_t v23;
  _BYTE __dst[432];
  _BYTE __src[426];
  _QWORD v26[2];
  _BYTE v27[426];
  _QWORD v28[2];
  _BYTE v29[426];
  _BYTE v30[432];
  _BYTE v31[440];

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v22 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v23 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v9 = v8 | (v4 << 6);
      goto LABEL_24;
    }
    v10 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v10 >= v23)
      return 1;
    v11 = *(_QWORD *)(v22 + 8 * v10);
    ++v4;
    if (!v11)
    {
      v4 = v10 + 1;
      if (v10 + 1 >= v23)
        return 1;
      v11 = *(_QWORD *)(v22 + 8 * v4);
      if (!v11)
      {
        v4 = v10 + 2;
        if (v10 + 2 >= v23)
          return 1;
        v11 = *(_QWORD *)(v22 + 8 * v4);
        if (!v11)
        {
          v4 = v10 + 3;
          if (v10 + 3 >= v23)
            return 1;
          v11 = *(_QWORD *)(v22 + 8 * v4);
          if (!v11)
            break;
        }
      }
    }
LABEL_23:
    v7 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v4 << 6);
LABEL_24:
    v13 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v9);
    v15 = *v13;
    v14 = v13[1];
    v16 = (const void *)(*(_QWORD *)(v3 + 56) + 432 * v9);
    memcpy(__dst, v16, 0x1AAuLL);
    memcpy(__src, v16, sizeof(__src));
    v26[0] = v15;
    v26[1] = v14;
    memcpy(v27, __src, sizeof(v27));
    nullsub_133(v26);
    sub_1D5E009CC((uint64_t)v26, (uint64_t)v28, &qword_1EFFB8B00);
    v17 = v28[0];
    v18 = v28[1];
    memcpy(v31, v29, 0x1AAuLL);
    swift_bridgeObjectRetain();
    sub_1D5E00A10((uint64_t)__dst);
    v19 = sub_1D5D7FFCC(v17, v18);
    LOBYTE(v17) = v20;
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      sub_1D5E00A58((uint64_t)v31);
      return 0;
    }
    memcpy(v30, (const void *)(*(_QWORD *)(a2 + 56) + 432 * v19), 0x1AAuLL);
    sub_1D5E00A10((uint64_t)v30);
    v21 = sub_1D5DD46D8((uint64_t)v30, (uint64_t)v31, (void (*)(__int128 *, double))sub_1D5E00C28, (void (*)(__int128 *))sub_1D5E00C2C);
    sub_1D5E00A58((uint64_t)v30);
    result = sub_1D5E00A58((uint64_t)v31);
    if ((v21 & 1) == 0)
      return 0;
  }
  v12 = v10 + 4;
  if (v12 >= v23)
    return 1;
  v11 = *(_QWORD *)(v22 + 8 * v12);
  if (v11)
  {
    v4 = v12;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v4 >= v23)
      return 1;
    v11 = *(_QWORD *)(v22 + 8 * v4);
    ++v12;
    if (v11)
      goto LABEL_23;
  }
LABEL_32:
  __break(1u);
  return result;
}

unint64_t sub_1D5DCEEC0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000016;
  if (*v0 != 1)
    v1 = 0x676E697070616DLL;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

uint64_t sub_1D5DCEF20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFB484(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DCEF44()
{
  return 0;
}

void sub_1D5DCEF50(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DCEF5C()
{
  sub_1D5DEC2D4();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DCEF84()
{
  sub_1D5DEC2D4();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DCEFAC(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5CF0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v12 = *((_QWORD *)v1 + 2);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEC2D4();
  sub_1D5E379F8();
  v17 = v9;
  v16 = 0;
  sub_1D5DEC318();
  sub_1D5E3789C();
  if (!v2)
  {
    v10 = v12;
    v15 = 1;
    sub_1D5E37884();
    v14 = v10;
    v13 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD908);
    sub_1D5DEC3A0(&qword_1EFFB5D08, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEB080], MEMORY[0x1E0DEA0B8]);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DCF15C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5D10);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEC2D4();
  sub_1D5E379E0();
  if (!v2)
  {
    v18 = 0;
    sub_1D5DEC35C();
    sub_1D5E377D0();
    v10 = v19;
    v17 = 1;
    sub_1D5E377B8();
    v13 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AD908);
    v15[15] = 2;
    sub_1D5DEC3A0(&qword_1EFFB5D20, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEB0A8], MEMORY[0x1E0DEA0D8]);
    sub_1D5E377D0();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    v14 = v16;
    *(_BYTE *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DCF33C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D5DCF15C(a1, a2);
}

uint64_t sub_1D5DCF350(_QWORD *a1)
{
  return sub_1D5DCEFAC(a1);
}

uint64_t sub_1D5DCF364(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && *((double *)a1 + 1) == *((double *)a2 + 1))
    return sub_1D5DCEA60(*((_QWORD *)a1 + 2), *((_QWORD *)a2 + 2));
  else
    return 0;
}

double sub_1D5DCF394@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

double sub_1D5DCF3A0(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *v1 = *(_QWORD *)a1;
  return result;
}

uint64_t (*sub_1D5DCF3AC())()
{
  return nullsub_83;
}

double sub_1D5DCF3C0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  char v3;
  char v4;
  char v5;

  result = *(double *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 17);
  v5 = *(_BYTE *)(v1 + 18);
  *(double *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4;
  *(_BYTE *)(a1 + 10) = v5;
  return result;
}

double sub_1D5DCF3E4(uint64_t a1)
{
  uint64_t v1;
  double result;
  char v3;
  char v4;
  char v5;

  result = *(double *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 9);
  v5 = *(_BYTE *)(a1 + 10);
  *(_QWORD *)(v1 + 8) = *(_QWORD *)a1;
  *(_BYTE *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 17) = v4;
  *(_BYTE *)(v1 + 18) = v5;
  return result;
}

uint64_t (*sub_1D5DCF408())()
{
  return nullsub_84;
}

void sub_1D5DCF41C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
}

_QWORD *sub_1D5DCF428(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = *result;
  return result;
}

uint64_t (*sub_1D5DCF434())()
{
  return nullsub_85;
}

void sub_1D5DCF448(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 32);
}

_QWORD *sub_1D5DCF454(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = *result;
  return result;
}

uint64_t (*sub_1D5DCF460())()
{
  return nullsub_86;
}

BOOL sub_1D5DCF478(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_1D5DCF490(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D5DCF4AC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DCF4E4 + 4 * byte_1D5E3D9AA[*v0]))(0x52656C6369747261, 0xEB00000000646165);
}

uint64_t sub_1D5DCF4E4()
{
  return 0x61547374726F7073;
}

uint64_t sub_1D5DCF508()
{
  return 0x73694C6B63617274;
}

uint64_t sub_1D5DCF52C()
{
  return 0x7369566B63617274;
}

uint64_t sub_1D5DCF54C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFB5D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DCF570()
{
  return 0;
}

void sub_1D5DCF57C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1D5DCF588()
{
  sub_1D5DED7A0();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DCF5B0()
{
  sub_1D5DED7A0();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DCF5D8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  int v22;
  char v23;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5D28);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v9 = v1[1];
  v22 = *((unsigned __int8 *)v1 + 16);
  v11 = *((unsigned __int8 *)v1 + 17);
  v16 = *((unsigned __int8 *)v1 + 18);
  v17 = v11;
  v12 = v1[4];
  v15 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DED7A0();
  sub_1D5E379F8();
  v18 = v10;
  v23 = 0;
  sub_1D5DED7E4();
  sub_1D5E3789C();
  if (!v2)
  {
    v13 = v15;
    v18 = v9;
    v19 = v22;
    v20 = v17;
    v21 = v16;
    v23 = 1;
    sub_1D5DED828();
    sub_1D5E3789C();
    v18 = v13;
    v23 = 2;
    sub_1D5DED86C();
    sub_1D5E3789C();
    v18 = v12;
    v23 = 3;
    sub_1D5DED8B0();
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DCF7D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  int v24;
  char v25;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5D58);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DED7A0();
  sub_1D5E379E0();
  if (!v2)
  {
    v25 = 0;
    sub_1D5DED8F4();
    sub_1D5E377D0();
    v10 = v20;
    v25 = 1;
    sub_1D5DED938();
    sub_1D5E377D0();
    v11 = v20;
    v24 = v21;
    v12 = v22;
    v13 = v23;
    v25 = 2;
    sub_1D5DED97C();
    sub_1D5E377D0();
    v18 = v12;
    v19 = v13;
    v15 = v20;
    v25 = 3;
    sub_1D5DED9C0();
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v16 = v20;
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v11;
    *(_BYTE *)(a2 + 16) = v24;
    *(_BYTE *)(a2 + 17) = v18;
    *(_BYTE *)(a2 + 18) = v19;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DCFA08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D5DCF7D4(a1, a2);
}

uint64_t sub_1D5DCFA1C(_QWORD *a1)
{
  return sub_1D5DCF5D8(a1);
}

double sub_1D5DCFA34()
{
  return 10.0;
}

void sub_1D5DCFA3C(_QWORD *a1@<X8>)
{
  *a1 = 0x4024000000000000;
}

double sub_1D5DCFA48()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*sub_1D5DCFA54(_QWORD *a1))(double *a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_1D5DCFA70;
}

uint64_t sub_1D5DCFA70(double *a1)
{
  return sub_1D5DC2E04(*a1);
}

uint64_t sub_1D5DCFA94()
{
  return 1;
}

uint64_t sub_1D5DCFAA4()
{
  return 0x6E6F697461727564;
}

uint64_t sub_1D5DCFAC0()
{
  return 0;
}

void sub_1D5DCFACC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DCFAD8()
{
  sub_1D5DEDA04();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DCFB00()
{
  sub_1D5DEDA04();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DCFB28(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5D80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDA04();
  sub_1D5E379F8();
  v10[1] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5D90);
  sub_1D5DEEF40(&qword_1EFFB5D98, &qword_1EFFB5D90, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1D5DCFC48@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5DA0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDA04();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5D90);
    sub_1D5DEEF40(&qword_1EFFB5DA8, &qword_1EFFB5D90, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *a2 = v11[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DCFD88@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DCFC48(a1, a2);
}

uint64_t sub_1D5DCFD9C(_QWORD *a1)
{
  return sub_1D5DCFB28(a1);
}

BOOL sub_1D5DCFDB0(double *a1, double *a2)
{
  return *a1 == *a2;
}

double sub_1D5DCFDC4()
{
  return 10.0;
}

void sub_1D5DCFDCC(_QWORD *a1@<X8>)
{
  *a1 = 0x4024000000000000;
}

double sub_1D5DCFDD8()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*sub_1D5DCFDE4(_QWORD *a1))(double *a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_1D5DCFE00;
}

uint64_t sub_1D5DCFE00(double *a1)
{
  return sub_1D5DC2E20(*a1);
}

uint64_t sub_1D5DCFE24()
{
  return 0;
}

void sub_1D5DCFE2C(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DCFE34()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t sub_1D5DCFE3C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*sub_1D5DCFE44(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 8);
  return sub_1D5E00AFC;
}

uint64_t sub_1D5DCFE60()
{
  return 1;
}

void sub_1D5DCFE68(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DCFE74()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t sub_1D5DCFE7C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  return result;
}

_BYTE *(*sub_1D5DCFE84(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 9);
  return sub_1D5DCFEA0;
}

_BYTE *sub_1D5DCFEA0(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 9) = result[8];
  return result;
}

uint64_t sub_1D5DCFEB0()
{
  return 1;
}

void sub_1D5DCFEB8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DCFEC4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t sub_1D5DCFECC(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 10) = result;
  return result;
}

_BYTE *(*sub_1D5DCFED4(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 10);
  return sub_1D5DCFEF0;
}

_BYTE *sub_1D5DCFEF0(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 10) = result[8];
  return result;
}

uint64_t sub_1D5DCFF00(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DCFF34 + 4 * byte_1D5E3D9AE[a1]))(0x6E6F697461727564, 0xE800000000000000);
}

unint64_t sub_1D5DCFF34()
{
  return 0xD000000000000010;
}

unint64_t sub_1D5DCFF50()
{
  return 0xD000000000000022;
}

uint64_t sub_1D5DCFF90()
{
  unsigned __int8 *v0;

  return sub_1D5DCFF00(*v0);
}

uint64_t sub_1D5DCFF98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFB800(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DCFFBC()
{
  return 0;
}

void sub_1D5DCFFC8(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1D5DCFFD4()
{
  sub_1D5DEDA48();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DCFFFC()
{
  sub_1D5DEDA48();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DD0024(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5DB0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = *((unsigned __int8 *)v1 + 8);
  v15 = *((unsigned __int8 *)v1 + 9);
  v16 = v10;
  v11 = *((_BYTE *)v1 + 10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDA48();
  sub_1D5E379F8();
  v24 = v9;
  v23 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5DC0);
  sub_1D5DEEF40(&qword_1EFFB5DC8, &qword_1EFFB5DC0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  if (!v2)
  {
    v12 = v15;
    v22 = v16;
    v21 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5DD0);
    sub_1D5DEEF40(&qword_1EFFB5DD8, &qword_1EFFB5DD0, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E3789C();
    v20 = v12;
    v19 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5DE0);
    sub_1D5DEEF40(&qword_1EFFB5DE8, &qword_1EFFB5DE0, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E3789C();
    v18 = v11;
    v17 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5DF0);
    sub_1D5DEEF40(&qword_1EFFB5DF8, &qword_1EFFB5DF0, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DD028C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  char v18;
  unsigned __int8 v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5E00);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDA48();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5DC0);
    v22 = 0;
    sub_1D5DEEF40(&qword_1EFFB5E08, &qword_1EFFB5DC0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v10 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5DD0);
    v20 = 1;
    sub_1D5DEEF40(&qword_1EFFB5E10, &qword_1EFFB5DD0, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v11 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5DE0);
    v18 = 2;
    sub_1D5DEEF40(&qword_1EFFB5E18, &qword_1EFFB5DE0, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v15 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5DF0);
    v16 = 3;
    sub_1D5DEEF40(&qword_1EFFB5E20, &qword_1EFFB5DF0, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v13 = v17;
    *(_QWORD *)a2 = v10;
    *(_BYTE *)(a2 + 8) = v11;
    *(_BYTE *)(a2 + 9) = v15;
    *(_BYTE *)(a2 + 10) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DD0534@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D5DD028C(a1, a2);
}

uint64_t sub_1D5DD0548(_QWORD *a1)
{
  return sub_1D5DD0024(a1);
}

uint64_t sub_1D5DD0560()
{
  return 30;
}

void sub_1D5DD0568(_QWORD *a1@<X8>)
{
  *a1 = 30;
}

uint64_t sub_1D5DD0574()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t (*sub_1D5DD0580(_QWORD *a1))(uint64_t *a1)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  return sub_1D5DD0598;
}

uint64_t sub_1D5DD0598(uint64_t *a1)
{
  return sub_1D5DC2E3C(*a1);
}

uint64_t sub_1D5DD05B8()
{
  return 1;
}

uint64_t sub_1D5DD05C8()
{
  return 0x6E6F697461727564;
}

uint64_t sub_1D5DD05E4()
{
  return 0;
}

void sub_1D5DD05F0(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DD05FC()
{
  sub_1D5DEDA8C();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DD0624()
{
  sub_1D5DEDA8C();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DD064C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5E28);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDA8C();
  sub_1D5E379F8();
  v10[1] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5E38);
  sub_1D5DEEF40(&qword_1EFFB5E40, &qword_1EFFB5E38, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1D5DD076C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5E48);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDA8C();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5E38);
    sub_1D5DEEF40(&qword_1EFFB5E50, &qword_1EFFB5E38, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *a2 = v11[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DD08AC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DD076C(a1, a2);
}

uint64_t sub_1D5DD08C0(_QWORD *a1)
{
  return sub_1D5DD064C(a1);
}

uint64_t sub_1D5DD08D4()
{
  return 10;
}

void sub_1D5DD08DC(_QWORD *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1D5DD08E8()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t (*sub_1D5DD08F4(_QWORD *a1))(uint64_t *a1)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  return sub_1D5DD090C;
}

uint64_t sub_1D5DD090C(uint64_t *a1)
{
  return sub_1D5DC2E58(*a1);
}

uint64_t sub_1D5DD092C()
{
  return 1;
}

uint64_t sub_1D5DD093C()
{
  return 0x6E6F697461727564;
}

uint64_t sub_1D5DD0958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1D5E378FC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D5DD09EC()
{
  return 0;
}

void sub_1D5DD09F8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DD0A04()
{
  sub_1D5DEDAD0();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DD0A2C()
{
  sub_1D5DEDAD0();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DD0A54(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5E58);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDAD0();
  sub_1D5E379F8();
  v10[1] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5E68);
  sub_1D5DEEF40(&qword_1EFFB5E70, &qword_1EFFB5E68, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1D5DD0B74@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5E78);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDAD0();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5E68);
    sub_1D5DEEF40(&qword_1EFFB5E80, &qword_1EFFB5E68, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *a2 = v11[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DD0CB4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DD0B74(a1, a2);
}

uint64_t sub_1D5DD0CC8(_QWORD *a1)
{
  return sub_1D5DD0A54(a1);
}

BOOL sub_1D5DD0CDC(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

double sub_1D5DD0CF0()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t sub_1D5DD0CF8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1D5DD0D00()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DD0D08@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7;

  if ((a2 & 1) != 0 || (a4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    result = 0x3FF0000000000000;
    v7 = MEMORY[0x1E0DEE9E8];
    a3 = 1;
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9E8];
    if (a5)
      v7 = a5;
  }
  *a6 = result;
  a6[1] = a3;
  a6[2] = v7;
  return result;
}

void sub_1D5DD0D60(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 1;
  a1[2] = MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1D5DD0D7C(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return sub_1D5DD0DAC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  else
    return 0;
}

uint64_t sub_1D5DD0DAC(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v31 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_23:
    v6 = (v11 - 1) & v11;
    v31 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    sub_1D5E379A4();
    swift_bridgeObjectRetain();
    sub_1D5E3744C();
    v18 = sub_1D5E379C8();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_39;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_1D5E378FC() & 1) == 0)
    {
      v24 = ~v19;
      for (i = v20 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 16 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_1D5E378FC() & 1) != 0)
          goto LABEL_7;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
  }
  v13 = v3 + 4;
  if (v3 + 4 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_23;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1D5DD1038()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6953776F646E6977;
  if (*v0 != 1)
    v1 = 0x546465776F6C6C61;
  if (*v0)
    return v1;
  else
    return 0x6C6F687365726874;
}

uint64_t sub_1D5DD10A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFB9A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DD10CC()
{
  return 0;
}

void sub_1D5DD10D8(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DD10E4()
{
  sub_1D5DEDB14();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DD110C()
{
  sub_1D5DEDB14();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DD1134(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF178);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDB14();
  sub_1D5E379F8();
  v15 = 0;
  sub_1D5E37884();
  if (!v2)
  {
    v14 = 1;
    sub_1D5E37890();
    v13 = v9;
    v12 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF008);
    sub_1D5DF0E90(&qword_1ED9AF010, &qword_1ED9AF008, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEB3B8]);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DD12C8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  char v17;
  char v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5E88);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDB14();
  sub_1D5E379E0();
  if (!v2)
  {
    v18 = 0;
    sub_1D5E377B8();
    v11 = v10;
    v17 = 1;
    v13 = sub_1D5E377C4();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF008);
    v15[15] = 2;
    sub_1D5DF0E90(&qword_1EFFB5E90, &qword_1ED9AF008, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEB3D8]);
    sub_1D5E377D0();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    v14 = v16;
    *a2 = v11;
    a2[1] = v13;
    a2[2] = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DD148C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DD12C8(a1, a2);
}

uint64_t sub_1D5DD14A0(_QWORD *a1)
{
  return sub_1D5DD1134(a1);
}

uint64_t sub_1D5DD14B4(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return sub_1D5DD0DAC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  else
    return 0;
}

uint64_t sub_1D5DD14E4@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1D5E3771C();
  result = swift_bridgeObjectRelease();
  v4 = 3;
  if (v2 < 3)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t sub_1D5DD153C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6C616E6F73726570;
  if (*v0 != 1)
    v1 = 0x6669737265766964;
  if (*v0)
    return v1;
  else
    return 0x6C616369706F74;
}

uint64_t sub_1D5DD15A8()
{
  sub_1D5E379A4();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DD1658()
{
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5DD16E4()
{
  sub_1D5E379A4();
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DD1790@<X0>(char *a1@<X8>)
{
  return sub_1D5DD14E4(a1);
}

void sub_1D5DD179C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xEC00000064657A69;
  v5 = 0x6C616E6F73726570;
  if (v2 != 1)
  {
    v5 = 0x6669737265766964;
    v4 = 0xEB00000000646569;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6C616369706F74;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1D5DD180C()
{
  sub_1D5E008B0();
  return sub_1D5E374DC();
}

uint64_t sub_1D5DD1868()
{
  sub_1D5E008B0();
  return sub_1D5E374A0();
}

uint64_t sub_1D5DD18B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D5DCD150(*a1, *a2);
}

__n128 sub_1D5DD18C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  if (qword_1ED9ADA20 != -1)
    swift_once();
  v4 = xmmword_1ED9AE650;
  v5 = xmmword_1ED9AE640;
  v0 = qword_1ED9AE660;
  v1 = MEMORY[0x1E0DEE9D8];
  v2 = sub_1D5DD1AD8(MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&xmmword_1ED9ADB40 = 0;
  *((_QWORD *)&xmmword_1ED9ADB40 + 1) = v1;
  result = (__n128)v4;
  xmmword_1ED9ADB50 = v5;
  xmmword_1ED9ADB60 = v4;
  qword_1ED9ADB70 = v0;
  qword_1ED9ADB78 = v2;
  return result;
}

__n128 sub_1D5DD195C@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __n128 v12;
  __int128 v13;

  v12 = (__n128)a2[1];
  v13 = *a2;
  v9 = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  v10 = sub_1D5DD1AD8(a3, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(double *)a4 = a5;
  *(_QWORD *)(a4 + 8) = a1;
  result = v12;
  *(_OWORD *)(a4 + 16) = v13;
  *(__n128 *)(a4 + 32) = v12;
  *(_QWORD *)(a4 + 48) = v9;
  *(_QWORD *)(a4 + 56) = v10;
  return result;
}

double sub_1D5DD19F0()
{
  uint64_t v0;

  return *(double *)v0;
}

void sub_1D5DD19F8(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*sub_1D5DD1A00())()
{
  return nullsub_87;
}

uint64_t sub_1D5DD1A14()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DD1A1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_1D5DD1A44())()
{
  return nullsub_88;
}

double sub_1D5DD1A58@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v3;

  result = *(double *)(v1 + 48);
  v3 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = v3;
  *(double *)(a1 + 32) = result;
  return result;
}

double sub_1D5DD1A6C(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;

  result = *(double *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v3;
  *(double *)(v1 + 48) = result;
  return result;
}

uint64_t (*sub_1D5DD1A80())()
{
  return nullsub_89;
}

uint64_t sub_1D5DD1A94()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DD1A9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*sub_1D5DD1AC4())()
{
  return nullsub_90;
}

uint64_t sub_1D5DD1AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!a1)
  {
    if (qword_1ED9ADA20 == -1)
    {
      v5 = *(_QWORD *)(a2 + 16);
      if (!v5)
        return MEMORY[0x1E0DEE9D8];
    }
    else
    {
      swift_once();
      v5 = *(_QWORD *)(a2 + 16);
      if (!v5)
        return MEMORY[0x1E0DEE9D8];
    }
    v6 = xmmword_1ED9AE640;
    v7 = xmmword_1ED9AE650;
    v8 = qword_1ED9AE660;
    v9 = sub_1D5E3753C();
    v3 = v9;
    *(_QWORD *)(v9 + 16) = v5;
    v10 = v9 + 32;
    if (v5 == 1)
    {
      v11 = 0;
    }
    else
    {
      v11 = v5 & 0x7FFFFFFFFFFFFFFELL;
      v10 += 40 * (v5 & 0x7FFFFFFFFFFFFFFELL);
      v28 = v9 + 56;
      v29 = v5 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        *(_OWORD *)(v28 - 24) = v6;
        *(_OWORD *)(v28 + 16) = v6;
        *(_OWORD *)(v28 - 8) = v7;
        *(_OWORD *)(v28 + 32) = v7;
        *(_QWORD *)(v28 + 8) = v8;
        *(_QWORD *)(v28 + 48) = v8;
        v28 += 80;
        v29 -= 2;
      }
      while (v29);
      if (v5 == v11)
        return v3;
    }
    v30 = v5 - v11;
    do
    {
      *(_OWORD *)v10 = v6;
      *(_OWORD *)(v10 + 16) = v7;
      *(_QWORD *)(v10 + 32) = v8;
      v10 += 40;
      --v30;
    }
    while (v30);
    return v3;
  }
  v3 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) == v4)
  {
    swift_bridgeObjectRetain();
    return v3;
  }
  v12 = qword_1EFFB50D0;
  swift_bridgeObjectRetain();
  if (v12 != -1)
    swift_once();
  v13 = (id)qword_1EFFB52C8;
  sub_1D5E375E4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1D5E38FE0;
  swift_bridgeObjectRelease();
  v15 = sub_1D5E378CC();
  v17 = v16;
  v18 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEA968];
  v19 = sub_1D5D889BC();
  *(_QWORD *)(v14 + 64) = v19;
  *(_QWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = v17;
  v20 = sub_1D5E378CC();
  *(_QWORD *)(v14 + 96) = v18;
  *(_QWORD *)(v14 + 104) = v19;
  *(_QWORD *)(v14 + 72) = v20;
  *(_QWORD *)(v14 + 80) = v21;
  sub_1D5E373A4();

  swift_bridgeObjectRelease();
  if (qword_1ED9ADA20 != -1)
  {
    swift_once();
    if (v4)
      goto LABEL_12;
    return MEMORY[0x1E0DEE9D8];
  }
  if (!v4)
    return MEMORY[0x1E0DEE9D8];
LABEL_12:
  v22 = xmmword_1ED9AE640;
  v23 = xmmword_1ED9AE650;
  v24 = qword_1ED9AE660;
  v25 = sub_1D5E3753C();
  v3 = v25;
  *(_QWORD *)(v25 + 16) = v4;
  v26 = v25 + 32;
  if (v4 == 1)
  {
    v27 = 0;
LABEL_23:
    v33 = v4 - v27;
    do
    {
      *(_OWORD *)v26 = v22;
      *(_OWORD *)(v26 + 16) = v23;
      *(_QWORD *)(v26 + 32) = v24;
      v26 += 40;
      --v33;
    }
    while (v33);
    return v3;
  }
  v27 = v4 & 0x7FFFFFFFFFFFFFFELL;
  v26 += 40 * (v4 & 0x7FFFFFFFFFFFFFFELL);
  v31 = v25 + 56;
  v32 = v4 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    *(_OWORD *)(v31 - 24) = v22;
    *(_OWORD *)(v31 + 16) = v22;
    *(_OWORD *)(v31 - 8) = v23;
    *(_OWORD *)(v31 + 32) = v23;
    *(_QWORD *)(v31 + 8) = v24;
    *(_QWORD *)(v31 + 48) = v24;
    v31 += 80;
    v32 -= 2;
  }
  while (v32);
  if (v4 != v27)
    goto LABEL_23;
  return v3;
}

uint64_t sub_1D5DD1E18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 56);
  sub_1D5DD1FC4(a1);
  v7 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D5DFBB30(v4, v5, (double (*)(__int128 *))sub_1D5E00938);
  v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_1ED9ADA20 != -1)
    swift_once();
  v10 = xmmword_1ED9AE640;
  v11 = xmmword_1ED9AE650;
  v12 = qword_1ED9AE660;
  v13 = *(_QWORD *)(v9 + 16);
  if (!v13)
  {
    result = MEMORY[0x1E0DEE9D8];
    goto LABEL_12;
  }
  result = sub_1D5E3753C();
  *(_QWORD *)(result + 16) = v13;
  v15 = result + 32;
  if (v13 == 1)
  {
    v16 = 0;
LABEL_10:
    v19 = v13 - v16;
    do
    {
      *(_OWORD *)v15 = v10;
      *(_OWORD *)(v15 + 16) = v11;
      *(_QWORD *)(v15 + 32) = v12;
      v15 += 40;
      --v19;
    }
    while (v19);
    goto LABEL_12;
  }
  v16 = v13 & 0x7FFFFFFFFFFFFFFELL;
  v15 += 40 * (v13 & 0x7FFFFFFFFFFFFFFELL);
  v17 = result + 56;
  v18 = v13 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    *(_OWORD *)(v17 - 24) = v10;
    *(_OWORD *)(v17 + 16) = v10;
    *(_OWORD *)(v17 - 8) = v11;
    *(_OWORD *)(v17 + 32) = v11;
    *(_QWORD *)(v17 + 8) = v12;
    *(_QWORD *)(v17 + 48) = v12;
    v17 += 80;
    v18 -= 2;
  }
  while (v18);
  if (v13 != v16)
    goto LABEL_10;
LABEL_12:
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v9;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 48) = v12;
  *(_QWORD *)(a2 + 56) = result;
  return result;
}

void sub_1D5DD1FC4(uint64_t a1)
{
  float64x2_t *v1;
  float64x2_t v3;
  float64x2_t v4;
  double v5;
  float64x2_t v6;
  float64x2_t v7;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2].f64[0];
  if (qword_1ED9ADA20 != -1)
  {
    v6 = *v1;
    v7 = v1[1];
    swift_once();
    v4 = v6;
    v3 = v7;
  }
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v4, (float64x2_t)xmmword_1ED9AE640), (int32x4_t)vceqq_f64(v3, (float64x2_t)xmmword_1ED9AE650))), 0xFuLL))) & 1) == 0|| v5 != *(double *)&qword_1ED9AE660)
  {
    if (v3.f64[1] > v5)
      __break(1u);
    else
      pow(2.71828183, (double)a1 * v3.f64[0]);
  }
}

BOOL sub_1D5DD20D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  _BOOL8 result;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a2 + 40);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_1D5DD213C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  double *v5;
  uint64_t result;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 - 1;
  v4 = (double *)(a2 + 64);
  v5 = (double *)(a1 + 64);
  do
  {
    result = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(v5 - 4), *(float64x2_t *)(v4 - 4)), (int32x4_t)vceqq_f64(*(float64x2_t *)(v5 - 2), *(float64x2_t *)(v4 - 2)))), 0xFuLL))) & (*v5 == *v4);
    v8 = v3-- != 0;
    if ((_DWORD)result != 1)
      break;
    v4 += 5;
    v5 += 5;
  }
  while (v8);
  return result;
}

uint64_t sub_1D5DD21DC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DD2214 + 4 * byte_1D5E3D9B2[*v0]))(0x52746C7561666564, 0xEC0000006F697461);
}

uint64_t sub_1D5DD2214()
{
  return 0x52646574746F6C73;
}

unint64_t sub_1D5DD2238()
{
  return 0xD00000000000001ALL;
}

unint64_t sub_1D5DD2254()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1D5DD2274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFBE1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DD2298()
{
  return 0;
}

void sub_1D5DD22A4(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1D5DD22B0()
{
  sub_1D5DEDB58();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DD22D8()
{
  sub_1D5DEDB58();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DD2300(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF180);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v1[1];
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = v1[5];
  v13 = v1[6];
  v14 = v1[7];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDB58();
  sub_1D5E379F8();
  LOBYTE(v17) = 0;
  sub_1D5E37884();
  if (!v2)
  {
    v17 = v16;
    v22 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFF8);
    sub_1D5DF0E90(&qword_1ED9AF000, &qword_1ED9AEFF8, MEMORY[0x1E0DEB080], MEMORY[0x1E0DEAF10]);
    sub_1D5E3789C();
    v17 = v9;
    v18 = v10;
    v19 = v11;
    v20 = v12;
    v21 = v13;
    v22 = 2;
    sub_1D5DEDB9C();
    sub_1D5E3789C();
    v17 = v14;
    v22 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE698);
    sub_1D5DEDC24(&qword_1ED9AE6A0, (uint64_t (*)(void))sub_1D5DEDB9C, MEMORY[0x1E0DEAF10]);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DD2534@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5E98);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDB58();
  sub_1D5E379E0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v21) = 0;
  sub_1D5E377B8();
  v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEFF8);
  v26 = 1;
  sub_1D5DF0E90(&qword_1EFFB5EA0, &qword_1ED9AEFF8, MEMORY[0x1E0DEB0A8], MEMORY[0x1E0DEAF40]);
  sub_1D5E377D0();
  v12 = v21;
  v26 = 2;
  sub_1D5DEDBE0();
  swift_bridgeObjectRetain();
  sub_1D5E377D0();
  v13 = v21;
  v14 = v22;
  v15 = v23;
  v16 = v24;
  v17 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE698);
  v26 = 3;
  sub_1D5DEDC24(&qword_1EFFB5EB0, (uint64_t (*)(void))sub_1D5DEDBE0, MEMORY[0x1E0DEAF40]);
  sub_1D5E377D0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v19 = v21;
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v13;
  a2[3] = v14;
  a2[4] = v15;
  a2[5] = v16;
  a2[6] = v17;
  a2[7] = v19;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D5DD27F0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DD2534(a1, a2);
}

uint64_t sub_1D5DD2804(_QWORD *a1)
{
  return sub_1D5DD2300(a1);
}

double sub_1D5DD281C()
{
  return 1.0;
}

void sub_1D5DD2824(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DD2830()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*sub_1D5DD283C(_QWORD *a1))(double *a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_1D5DD2858;
}

uint64_t sub_1D5DD2858(double *a1)
{
  return sub_1D5D7C738(*a1);
}

double sub_1D5DD287C()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double sub_1D5DD2884()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double sub_1D5DD288C()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double sub_1D5DD2894()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

uint64_t sub_1D5DD289C@<X0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  uint64_t result;

  result = sub_1D5D7C738(a2);
  if (a5 > a6)
  {
    if (qword_1ED9ADA20 != -1)
      result = swift_once();
    a5 = *((double *)&xmmword_1ED9AE650 + 1);
    a6 = *(double *)&qword_1ED9AE660;
  }
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  return result;
}

uint64_t sub_1D5DD2940@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, double *a9@<X8>, double a10, char a11)
{
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t result;
  double v27;
  double v28;
  char v29;
  double v30;

  if (qword_1ED9ADA20 != -1)
  {
    v29 = a8;
    swift_once();
    a8 = v29;
  }
  v19 = *(double *)&xmmword_1ED9AE640;
  v20 = *((double *)&xmmword_1ED9AE650 + 1);
  v21 = qword_1ED9AE660;
  if ((a2 & 1) == 0)
    v19 = a1;
  if ((a4 & 1) != 0)
    v22 = *((double *)&xmmword_1ED9AE640 + 1);
  else
    v22 = a3;
  if ((a6 & 1) != 0)
    v23 = *(double *)&xmmword_1ED9AE650;
  else
    v23 = a5;
  if ((a8 & 1) != 0)
    v24 = *((double *)&xmmword_1ED9AE650 + 1);
  else
    v24 = a7;
  if ((a11 & 1) != 0)
    a10 = *(double *)&qword_1ED9AE660;
  v30 = v19;
  result = sub_1D5D7C738(v19);
  if (v24 > a10)
    v27 = *(double *)&v21;
  else
    v27 = a10;
  if (v24 > a10)
    v28 = v20;
  else
    v28 = v24;
  *a9 = v30;
  a9[1] = v22;
  a9[2] = v23;
  a9[3] = v28;
  a9[4] = v27;
  return result;
}

uint64_t sub_1D5DD2A68(uint64_t a1, uint64_t a2)
{
  float64x2_t *v2;
  float64x2_t v5;
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  id v11;
  uint64_t v12;
  float64x2_t v14;
  float64x2_t v15;
  __int128 v16;

  v6 = *v2;
  v5 = v2[1];
  v7 = v2[2].f64[0];
  if (qword_1ED9ADA20 != -1)
  {
    v14 = *v2;
    v15 = v2[1];
    swift_once();
    v6 = v14;
    v5 = v15;
  }
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v6, (float64x2_t)xmmword_1ED9AE640), (int32x4_t)vceqq_f64(v5, (float64x2_t)xmmword_1ED9AE650))), 0xFuLL))) & 1) == 0|| v7 != *(double *)&qword_1ED9AE660)
  {
    sub_1D5DD1FC4(a2);
    v9 = round(v8);
    if (v9 > -9.22337204e18 && v9 < 9.22337204e18)
    {
      return (uint64_t)v9;
    }
    else
    {
      if (qword_1EFFB50D0 != -1)
        swift_once();
      v11 = (id)qword_1EFFB52C8;
      sub_1D5E375E4();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF878);
      v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_1D5E38280;
      *(_QWORD *)&v16 = 0;
      *((_QWORD *)&v16 + 1) = 0xE000000000000000;
      sub_1D5E37584();
      *(_QWORD *)(v12 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v12 + 64) = sub_1D5D889BC();
      *(_OWORD *)(v12 + 32) = v16;
      sub_1D5E373A4();

      swift_bridgeObjectRelease();
    }
  }
  return a1;
}

void sub_1D5DD2C48(char *a1)
{
  sub_1D5DCD288(*a1);
}

void sub_1D5DD2C54()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1D5E379A4();
  __asm { BR              X9 }
}

uint64_t sub_1D5DD2C9C()
{
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

void sub_1D5DD2CFC()
{
  __asm { BR              X10 }
}

uint64_t sub_1D5DD2D34()
{
  sub_1D5E3744C();
  return swift_bridgeObjectRelease();
}

void sub_1D5DD2D80()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1D5E379A4();
  __asm { BR              X9 }
}

uint64_t sub_1D5DD2DC4()
{
  sub_1D5E3744C();
  swift_bridgeObjectRelease();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DD2E24@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1D5DFC004();
  *a1 = result;
  return result;
}

uint64_t sub_1D5DD2E50()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1D5DD2E7C + 4 * byte_1D5E3D9C5[*v0]))();
}

void sub_1D5DD2E7C(_QWORD *a1@<X8>)
{
  *a1 = 109;
  a1[1] = 0xE100000000000000;
}

void sub_1D5DD2E8C(_QWORD *a1@<X8>)
{
  *a1 = 100;
  a1[1] = 0xE100000000000000;
}

void sub_1D5DD2E9C(_QWORD *a1@<X8>)
{
  *a1 = 7235949;
  a1[1] = 0xE300000000000000;
}

void sub_1D5DD2EB0(_QWORD *a1@<X8>)
{
  *a1 = 7889261;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_1D5DD2EC4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DD2EF0 + 4 * byte_1D5E3D9CA[*v0]))(0x6168706C61, 0xE500000000000000);
}

uint64_t sub_1D5DD2EF0()
{
  return 109;
}

uint64_t sub_1D5DD2EFC()
{
  return 100;
}

uint64_t sub_1D5DD2F08()
{
  return 7235949;
}

uint64_t sub_1D5DD2F18()
{
  return 7889261;
}

uint64_t sub_1D5DD2F28@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1D5DFC004();
  *a1 = result;
  return result;
}

uint64_t sub_1D5DD2F4C()
{
  return 0;
}

void sub_1D5DD2F58(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1D5DD2F64()
{
  sub_1D5DEDC8C();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DD2F8C()
{
  sub_1D5DEDC8C();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DD2FB4(_QWORD *a1)
{
  float64x2_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  float64x2_t v13;
  float64x2_t v14;
  _BYTE v15[24];
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF468);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v9 = v1[1];
  v11 = v1[2].f64[0];
  if (qword_1ED9ADA20 != -1)
  {
    v13 = v1[1];
    v14 = v10;
    swift_once();
    v9 = v13;
    v10 = v14;
  }
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v10, (float64x2_t)xmmword_1ED9AE640), (int32x4_t)vceqq_f64(v9, (float64x2_t)xmmword_1ED9AE650))), 0xFuLL))) & 1) != 0&& v11 == *(double *)&qword_1ED9AE660)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1D5E379EC();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
    sub_1D5E37920();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    v13 = v9;
    v14 = v10;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1D5DEDC8C();
    sub_1D5E379F8();
    v15[0] = 0;
    sub_1D5E37884();
    if (!v2)
    {
      v15[0] = 1;
      sub_1D5E37884();
      v15[0] = 2;
      sub_1D5E37884();
      v15[0] = 3;
      sub_1D5E37884();
      v15[0] = 4;
      sub_1D5E37884();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t sub_1D5DD3230(_QWORD *a1)
{
  return sub_1D5DD2FB4(a1);
}

uint64_t sub_1D5DD3248()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

__n128 sub_1D5DD3250@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;
  __int128 v5;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_BYTE *)(v1 + 48);
  result = *(__n128 *)(v1 + 8);
  v5 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 40) = v3;
  return result;
}

uint64_t sub_1D5DD3270(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;

  result = *(_QWORD *)v2;
  if ((*(_BYTE *)(v2 + 48) & 1) == 0 && (a2 & 1) == 0)
    return sub_1D5DD2A68(result, a1);
  return result;
}

BOOL sub_1D5DD32C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1D5DD32E4()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5DD3310()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0x657A69536E696DLL;
}

uint64_t sub_1D5DD3350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFC04C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DD3374()
{
  return 0;
}

void sub_1D5DD3380(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DD338C()
{
  sub_1D5DEDD28();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DD33B4()
{
  sub_1D5DEDD28();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DD33DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5EC8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v1 + 8);
  v16 = *(_QWORD *)(v1 + 16);
  v17 = v9;
  v10 = *(_QWORD *)(v1 + 24);
  v14 = *(_QWORD *)(v1 + 32);
  v15 = v10;
  v13 = *(_QWORD *)(v1 + 40);
  v24 = *(unsigned __int8 *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDD28();
  sub_1D5E379F8();
  LOBYTE(v18) = 0;
  sub_1D5E37890();
  if (!v2)
  {
    v18 = v17;
    v19 = v16;
    v20 = v15;
    v21 = v14;
    v22 = v13;
    v23 = v24;
    v25 = 1;
    sub_1D5DEDB9C();
    sub_1D5E37848();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DD3554@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[2];
  uint64_t v17;
  char v18;
  char v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5ED8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDD28();
  sub_1D5E379E0();
  if (!v2)
  {
    LOBYTE(v16[0]) = 0;
    v10 = sub_1D5E377C4();
    v19 = 1;
    sub_1D5DEDBE0();
    sub_1D5E3777C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v11 = v17;
    v12 = v18;
    v13 = v16[0];
    v14 = v16[1];
    *(_QWORD *)a2 = v10;
    *(_OWORD *)(a2 + 8) = v13;
    *(_OWORD *)(a2 + 24) = v14;
    *(_QWORD *)(a2 + 40) = v11;
    *(_BYTE *)(a2 + 48) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_1D5DD36D0()
{
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5DD3714()
{
  uint64_t v1;

  ((void (*)(uint64_t *__return_ptr))ConditionalConfigurableValue.wrappedValue.getter)(&v1);
  return v1;
}

void sub_1D5DD3734()
{
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5DD3778()
{
  uint64_t v1;

  ((void (*)(uint64_t *__return_ptr))ConditionalConfigurableValue.wrappedValue.getter)(&v1);
  return v1;
}

void sub_1D5DD3798()
{
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5DD37DC()
{
  uint64_t v1;

  ((void (*)(uint64_t *__return_ptr))ConditionalConfigurableValue.wrappedValue.getter)(&v1);
  return v1;
}

void sub_1D5DD37FC()
{
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5DD3840()
{
  uint64_t v1;

  ((void (*)(uint64_t *__return_ptr))ConditionalConfigurableValue.wrappedValue.getter)(&v1);
  return v1;
}

void sub_1D5DD3860()
{
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5DD38A4()
{
  uint64_t v1;

  ((void (*)(uint64_t *__return_ptr))ConditionalConfigurableValue.wrappedValue.getter)(&v1);
  return v1;
}

void sub_1D5DD38C4()
{
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5DD3908()
{
  uint64_t v1;

  ((void (*)(uint64_t *__return_ptr))ConditionalConfigurableValue.wrappedValue.getter)(&v1);
  return v1;
}

uint64_t sub_1D5DD3928@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D5DD3554(a1, a2);
}

uint64_t sub_1D5DD393C(_QWORD *a1)
{
  return sub_1D5DD33DC(a1);
}

void sub_1D5DD3954()
{
  sub_1D5DEDD6C();
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5DD39BC()
{
  return ConditionalConfigurableValue.wrappedValue.getter();
}

void sub_1D5DD39DC()
{
  _s13ConfigurationV23ClusteringConfigurationV15ClusteringKnobsVMa();
}

void sub_1D5DD3A24()
{
  sub_1D5DD3954();
}

__n128 sub_1D5DD3A2C()
{
  uint64_t v0;
  __n128 result;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  result = v4;
  *(__n128 *)(v0 + 16) = v4;
  *(_OWORD *)(v0 + 32) = v5;
  *(_QWORD *)(v0 + 48) = v6;
  *(_QWORD *)(v0 + 56) = v7;
  return result;
}

void sub_1D5DD3A64()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s13ConfigurationV23ClusteringConfigurationV15ClusteringKnobsVMa();
}

void sub_1D5DD3AE4()
{
  sub_1D5DD3B04();
}

void sub_1D5DD3B04()
{
  sub_1D5DEDD6C();
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5DD3B6C(_QWORD *a1)
{
  uint64_t v2;

  return ConditionalConfigurableValue.wrappedValue.setter((uint64_t)&v2, a1);
}

void sub_1D5DD3B8C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5 = malloc(0xB0uLL);
  *a1 = v5;
  v5[20] = v2;
  v6 = *(_QWORD *)(v2 + 296);
  v7 = *(_QWORD *)(v2 + 336);
  v8 = *(_QWORD *)(v2 + 344);
  v5[8] = *(_QWORD *)(v2 + 288);
  v5[9] = v6;
  v9 = *(_OWORD *)(v2 + 320);
  *((_OWORD *)v5 + 5) = *(_OWORD *)(v2 + 304);
  *((_OWORD *)v5 + 6) = v9;
  v5[14] = v7;
  v5[15] = v8;
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 128);
  v12 = sub_1D5DEDD6C();
  v5[16] = v10;
  v5[17] = &_s22QuotaConditionProviderVN;
  v5[18] = v11;
  v5[19] = v12;
  type metadata accessor for ConditionalConfigurableValue();
}

void (*sub_1D5DD3C10(uint64_t a1))(_QWORD **a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 168) = a1;
  ConditionalConfigurableValue.wrappedValue.getter();
  return sub_1D5DD3C3C;
}

void sub_1D5DD3C3C(_QWORD **a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;

  v2 = *a1;
  v3 = *a1;
  v3[8] = **a1;
  v4 = (uint64_t)(v3 + 8);
  v5 = v2[6];
  v6 = v2[7];
  v7 = (_QWORD *)v2[21];
  v2[9] = v2[1];
  v8 = *((_OWORD *)v2 + 2);
  *((_OWORD *)v2 + 5) = *((_OWORD *)v2 + 1);
  *((_OWORD *)v2 + 6) = v8;
  v2[14] = v5;
  v2[15] = v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ConditionalConfigurableValue.wrappedValue.setter(v4, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    ConditionalConfigurableValue.wrappedValue.setter(v4, v7);
  }
  free(v2);
}

void sub_1D5DD3CE0()
{
  sub_1D5DEDDB0();
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5DD3D30()
{
  return ConditionalConfigurableValue.wrappedValue.getter();
}

void sub_1D5DD3D50()
{
  _s13ConfigurationV23ClusteringConfigurationV15ClusteringKnobsVMa();
}

void sub_1D5DD3D98()
{
  sub_1D5DD3CE0();
}

double sub_1D5DD3DA0()
{
  double *v0;
  double result;
  double v2;
  uint64_t v3;
  uint64_t v4;

  result = v2;
  *v0 = v2;
  *((_QWORD *)v0 + 1) = v3;
  *((_QWORD *)v0 + 2) = v4;
  return result;
}

void sub_1D5DD3DC0()
{
  swift_bridgeObjectRetain();
  _s13ConfigurationV23ClusteringConfigurationV15ClusteringKnobsVMa();
}

void sub_1D5DD3E18()
{
  sub_1D5DD3E34();
}

void sub_1D5DD3E34()
{
  sub_1D5DEDDB0();
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5DD3E84(_QWORD *a1)
{
  uint64_t v2;

  return ConditionalConfigurableValue.wrappedValue.setter((uint64_t)&v2, a1);
}

void sub_1D5DD3EA4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5 = malloc(0x60uLL);
  *a1 = v5;
  v5[10] = v2;
  v6 = v2[45];
  v7 = v2[46];
  v5[7] = v2[44];
  v5[8] = v6;
  v5[9] = v7;
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 136);
  v10 = sub_1D5DEDDB0();
  *v5 = v8;
  v5[1] = &_s31TopicDiversityConditionProviderVN;
  v5[2] = v9;
  v5[3] = v10;
  type metadata accessor for ConditionalConfigurableValue();
}

void (*sub_1D5DD3F14(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = a1;
  ConditionalConfigurableValue.wrappedValue.getter();
  return sub_1D5DD3F40;
}

void sub_1D5DD3F40(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v6 = (_QWORD *)v2[11];
  *v2 = v3;
  v2[1] = v5;
  v2[2] = v4;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    ConditionalConfigurableValue.wrappedValue.setter((uint64_t)v2, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    ConditionalConfigurableValue.wrappedValue.setter((uint64_t)v2, v6);
  }
  free(v2);
}

__n128 sub_1D5DD3FB0@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  __int128 v4;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 424);
  v3 = *(_BYTE *)(v1 + 425);
  v4 = *(_OWORD *)(v1 + 392);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 376);
  *(_OWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v1 + 408);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v2;
  *(_BYTE *)(a1 + 49) = v3;
  return result;
}

void sub_1D5DD3FD8(uint64_t a1, char a2)
{
  uint64_t v2;
  const void *v4;
  _BYTE v5[378];

  v4 = (const void *)(v2 + 48);
  if ((a2 & 1) == 0)
  {
    memcpy(v5, v4, sizeof(v5));
    sub_1D5DD36D0();
  }
  memcpy(v5, v4, sizeof(v5));
  sub_1D5DD36D0();
}

void sub_1D5DD4098(uint64_t a1, char a2)
{
  uint64_t v2;
  const void *v4;
  _BYTE v5[330];

  v4 = (const void *)(v2 + 96);
  if ((a2 & 1) == 0)
  {
    memcpy(v5, v4, sizeof(v5));
    sub_1D5DD3734();
  }
  memcpy(v5, v4, sizeof(v5));
  sub_1D5DD3734();
}

void sub_1D5DD417C(uint64_t a1, char a2)
{
  uint64_t v2;
  const void *v4;
  _BYTE v5[282];

  v4 = (const void *)(v2 + 144);
  if ((a2 & 1) == 0)
  {
    memcpy(v5, v4, sizeof(v5));
    sub_1D5DD3798();
  }
  memcpy(v5, v4, sizeof(v5));
  sub_1D5DD3798();
}

void sub_1D5DD4270(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    sub_1D5DD37FC();
  sub_1D5DD37FC();
}

void sub_1D5DD43E8(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    sub_1D5DD3860();
  sub_1D5DD3860();
}

void sub_1D5DD4560(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    sub_1D5DD38C4();
  sub_1D5DD38C4();
}

uint64_t sub_1D5DD46D8(uint64_t a1, uint64_t a2, void (*a3)(__int128 *, double), void (*a4)(__int128 *))
{
  uint64_t result;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  double v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double v31;
  char v32;
  _BYTE v33[56];
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[56];

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 8), *(float64x2_t *)(a2 + 8)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(a2 + 24)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 40) == *(double *)(a2 + 40))
  {
    if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
    result = 0;
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 56), *(float64x2_t *)(a2 + 56)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 72), *(float64x2_t *)(a2 + 72)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 88) != *(double *)(a2 + 88))
    {
      return result;
    }
    if (*(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96))
      return 0;
    result = 0;
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 104), *(float64x2_t *)(a2 + 104)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 120), *(float64x2_t *)(a2 + 120)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 136) != *(double *)(a2 + 136))
    {
      return result;
    }
    if (*(_QWORD *)(a1 + 144) != *(_QWORD *)(a2 + 144))
      return 0;
    result = 0;
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 152), *(float64x2_t *)(a2 + 152)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 168), *(float64x2_t *)(a2 + 168)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 184) != *(double *)(a2 + 184))
    {
      return result;
    }
    if (*(_QWORD *)(a1 + 192) != *(_QWORD *)(a2 + 192))
      return 0;
    result = 0;
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 200), *(float64x2_t *)(a2 + 200)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 216), *(float64x2_t *)(a2 + 216)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 232) != *(double *)(a2 + 232))
    {
      return result;
    }
    if (*(_QWORD *)(a1 + 240) != *(_QWORD *)(a2 + 240))
      return 0;
    result = 0;
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 248), *(float64x2_t *)(a2 + 248)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 264), *(float64x2_t *)(a2 + 264)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 280) == *(double *)(a2 + 280))
    {
      if (*(double *)(a1 + 288) != *(double *)(a2 + 288))
        return 0;
      v8 = a2 + 304;
      v9 = *(double *)(a1 + 336);
      v10 = *(_QWORD *)(a1 + 344);
      v24 = *(float64x2_t *)(a1 + 304);
      v26 = *(float64x2_t *)(a1 + 320);
      v22 = *(float64x2_t *)(a2 + 304);
      v23 = *(float64x2_t *)(a2 + 320);
      v11 = *(double *)(a2 + 336);
      v12 = *(_QWORD *)(a2 + 344);
      v20 = a1;
      if (!sub_1D5DD20D0(*(_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296)))
        return 0;
      result = 0;
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v24, v22), (int32x4_t)vceqq_f64(v26, v23))), 0xFuLL))) & 1) != 0&& v9 == v11)
      {
        if ((sub_1D5DD213C(v10, v12) & 1) == 0)
          return 0;
        v36 = *(_OWORD *)(v20 + 352);
        v13 = *(_QWORD *)(v20 + 368);
        v37 = v13;
        v34 = *(_OWORD *)(a2 + 352);
        v14 = *(_QWORD *)(a2 + 368);
        v35 = v14;
        if (*(double *)&v36 != *(double *)&v34)
          return 0;
        if (*((_QWORD *)&v36 + 1) != *((_QWORD *)&v34 + 1))
          return 0;
        a3(&v36, *(double *)&v36);
        ((void (*)(__int128 *))a3)(&v34);
        v15 = sub_1D5DD0DAC(v13, v14);
        a4(&v34);
        a4(&v36);
        if ((v15 & 1) == 0)
          return 0;
        sub_1D5E009CC(v20 + 376, (uint64_t)v33, &qword_1EFFB5C50);
        v16 = *(_QWORD *)(a2 + 376);
        v25 = *(float64x2_t *)(a2 + 384);
        v27 = *(float64x2_t *)(a2 + 400);
        v17 = *(double *)(a2 + 416);
        v18 = *(_BYTE *)(a2 + 424);
        v19 = *(unsigned __int8 *)(v8 + 121);
        sub_1D5E009CC((uint64_t)v33, (uint64_t)v38, &qword_1EFFB5C50);
        if ((v38[49] & 1) != 0)
          return v19;
        sub_1D5E009CC((uint64_t)v33, (uint64_t)&v28, &qword_1EFFB5C50);
        if ((v19 & 1) != 0 || v28 != v16)
          return 0;
        if ((v32 & 1) != 0)
        {
          if ((v18 & 1) == 0)
            return 0;
        }
        else if ((v18 & 1) != 0
               || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v29, v25), (int32x4_t)vceqq_f64(v30, v27))), 0xFuLL))) & 1) == 0|| v31 != v17)
        {
          return 0;
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1D5DD4B2C(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t result;
  int v11;
  double v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;

  v2 = *(double *)(a1 + 40);
  v3 = *(double *)(a1 + 88);
  v4 = *(double *)(a1 + 136);
  v35 = *(double *)(a1 + 184);
  v30 = *(double *)(a1 + 232);
  v25 = *(double *)(a1 + 280);
  v21 = *(_QWORD *)(a1 + 376);
  v13 = *(double *)(a1 + 416);
  v19 = *(_BYTE *)(a1 + 424);
  v23 = *(_BYTE *)(a1 + 425);
  v50 = *(float64x2_t *)(a1 + 8);
  v51 = *(float64x2_t *)(a1 + 24);
  v48 = *(float64x2_t *)(a2 + 8);
  v49 = *(float64x2_t *)(a2 + 24);
  v5 = *(double *)(a2 + 40);
  v46 = *(float64x2_t *)(a1 + 56);
  v47 = *(float64x2_t *)(a1 + 72);
  v44 = *(float64x2_t *)(a2 + 56);
  v45 = *(float64x2_t *)(a2 + 72);
  v6 = *(double *)(a2 + 88);
  v42 = *(float64x2_t *)(a1 + 104);
  v43 = *(float64x2_t *)(a1 + 120);
  v38 = *(float64x2_t *)(a1 + 152);
  v39 = *(float64x2_t *)(a1 + 168);
  v33 = *(float64x2_t *)(a1 + 200);
  v34 = *(float64x2_t *)(a1 + 216);
  v16 = *(float64x2_t *)(a1 + 384);
  v17 = *(float64x2_t *)(a1 + 400);
  v22 = *(unsigned __int8 *)(a2 + 425);
  v20 = *(_QWORD *)(a2 + 376);
  v18 = *(_BYTE *)(a2 + 424);
  v40 = *(float64x2_t *)(a2 + 104);
  v41 = *(float64x2_t *)(a2 + 120);
  v7 = *(double *)(a2 + 136);
  v36 = *(float64x2_t *)(a2 + 152);
  v37 = *(float64x2_t *)(a2 + 168);
  v8 = *(double *)(a2 + 184);
  v31 = *(float64x2_t *)(a2 + 200);
  v32 = *(float64x2_t *)(a2 + 216);
  v9 = *(double *)(a2 + 232);
  v24 = *(double *)(a2 + 280);
  v14 = *(float64x2_t *)(a2 + 384);
  v15 = *(float64x2_t *)(a2 + 400);
  v12 = *(double *)(a2 + 416);
  v28 = *(float64x2_t *)(a1 + 248);
  v29 = *(float64x2_t *)(a1 + 264);
  v26 = *(float64x2_t *)(a2 + 248);
  v27 = *(float64x2_t *)(a2 + 264);
  if ((static ConditionalConfigurableValue.== infix(_:_:)() & 1) == 0)
    return 0;
  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v50, v48), (int32x4_t)vceqq_f64(v51, v49))), 0xFuLL))) & 1) == 0|| v2 != v5)
  {
    return result;
  }
  if ((static ConditionalConfigurableValue.== infix(_:_:)() & 1) == 0)
    return 0;
  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v46, v44), (int32x4_t)vceqq_f64(v47, v45))), 0xFuLL))) & 1) == 0|| v3 != v6)
  {
    return result;
  }
  if ((static ConditionalConfigurableValue.== infix(_:_:)() & 1) == 0)
    return 0;
  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v42, v40), (int32x4_t)vceqq_f64(v43, v41))), 0xFuLL))) & 1) == 0|| v4 != v7)
  {
    return result;
  }
  if ((static ConditionalConfigurableValue.== infix(_:_:)() & 1) == 0)
    return 0;
  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v38, v36), (int32x4_t)vceqq_f64(v39, v37))), 0xFuLL))) & 1) == 0|| v35 != v8)
  {
    return result;
  }
  if ((static ConditionalConfigurableValue.== infix(_:_:)() & 1) == 0)
    return 0;
  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v33, v31), (int32x4_t)vceqq_f64(v34, v32))), 0xFuLL))) & 1) == 0|| v30 != v9)
  {
    return result;
  }
  if ((static ConditionalConfigurableValue.== infix(_:_:)() & 1) == 0)
    return 0;
  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v28, v26), (int32x4_t)vceqq_f64(v29, v27))), 0xFuLL))) & 1) != 0&& v25 == v24)
  {
    sub_1D5DEDD6C();
    if ((static ConditionalConfigurableValue.== infix(_:_:)() & 1) != 0)
    {
      sub_1D5DEDDB0();
      v11 = static ConditionalConfigurableValue.== infix(_:_:)();
      if (v23 & 1 | ((v11 & 1) == 0))
        return v11 & v22;
      if ((v22 & 1) == 0 && v21 == v20)
      {
        if ((v19 & 1) != 0)
        {
          if ((v18 & 1) != 0)
            return 1;
        }
        else if ((v18 & 1) == 0
               && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v16, v14), (int32x4_t)vceqq_f64(v17, v15))), 0xFuLL))) & 1) != 0&& v13 == v12)
        {
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_1D5DD51B8(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_1D5DD51C8()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5DD51EC(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x80000001D5E4A010 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x80000001D5E4A030 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001D5E4A060 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x80000001D5E4A080 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001D5E4A0B0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000024 && a2 == 0x80000001D5E4A0D0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x414347494178616DLL && a2 == 0xEF73656C63697472 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001D5E4A100 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x657A695378616DLL && a2 == 0xE700000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001D5E4A120 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x657A69536E696DLL && a2 == 0xE700000000000000 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001D5E49FF0 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001D5E4A140 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x7669446369706F74 && a2 == 0xEE00797469737265 || (sub_1D5E378FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001D5E4A160)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    v5 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

uint64_t sub_1D5DD57B4()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DD57F8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D5DD5834 + 4 * byte_1D5E3D9CF[a1]))(0xD000000000000014, 0x80000001D5E4A010);
}

uint64_t sub_1D5DD5834()
{
  uint64_t v0;

  return v0 + 13;
}

BOOL sub_1D5DD5954(char *a1, char *a2)
{
  return sub_1D5DD51B8(*a1, *a2);
}

uint64_t sub_1D5DD59A4()
{
  return sub_1D5DD57B4();
}

uint64_t sub_1D5DD59F4()
{
  return sub_1D5DD51C8();
}

uint64_t sub_1D5DD5A38()
{
  sub_1D5E379A4();
  sub_1D5DD51C8();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DD5A9C()
{
  unsigned __int8 *v0;

  return sub_1D5DD57F8(*v0);
}

uint64_t sub_1D5DD5AEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DD51EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DD5B40()
{
  return 0;
}

uint64_t sub_1D5DD5B4C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1D5DFC138();
  *a1 = result;
  return result;
}

uint64_t sub_1D5DD5BA4(uint64_t a1)
{
  MEMORY[0x1D827D8E0](&unk_1D5E43E78, a1);
  return sub_1D5E37A04();
}

uint64_t sub_1D5DD5BD8(uint64_t a1)
{
  MEMORY[0x1D827D8E0](&unk_1D5E43E78, a1);
  return sub_1D5E37A10();
}

void sub_1D5DD5C0C()
{
  _s13ConfigurationV23ClusteringConfigurationV15ClusteringKnobsV10CodingKeysOMa();
}

void sub_1D5DD5D2C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x1D827D8E0](&unk_1D5E43E78, a1);
  v4 = sub_1D5E378B4();
  *(_QWORD *)(v3 - 320) = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v6 = *v1;
  *(_QWORD *)(v3 - 368) = v1[1];
  *(_QWORD *)(v3 - 384) = v1[2];
  *(_QWORD *)(v3 - 376) = v1[3];
  *(_QWORD *)(v3 - 392) = v1[4];
  *(_QWORD *)(v3 - 400) = v1[5];
  *(_QWORD *)(v3 - 408) = v1[6];
  *(_QWORD *)(v3 - 416) = v1[7];
  *(_QWORD *)(v3 - 424) = v1[8];
  *(_QWORD *)(v3 - 432) = v1[9];
  *(_QWORD *)(v3 - 440) = v1[10];
  *(_QWORD *)(v3 - 448) = v1[11];
  *(_QWORD *)(v3 - 472) = v1[12];
  *(_QWORD *)(v3 - 480) = v1[13];
  *(_QWORD *)(v3 - 488) = v1[14];
  *(_QWORD *)(v3 - 496) = v1[15];
  *(_QWORD *)(v3 - 504) = v1[16];
  *(_QWORD *)(v3 - 512) = v1[17];
  *(_QWORD *)(v3 - 536) = v1[18];
  *(_QWORD *)(v3 - 544) = v1[19];
  *(_QWORD *)(v3 - 552) = v1[20];
  *(_QWORD *)(v3 - 560) = v1[21];
  *(_QWORD *)(v3 - 568) = v1[22];
  *(_QWORD *)(v3 - 576) = v1[23];
  *(_QWORD *)(v3 - 600) = v1[24];
  *(_QWORD *)(v3 - 608) = v1[25];
  *(_QWORD *)(v3 - 616) = v1[26];
  *(_QWORD *)(v3 - 624) = v1[27];
  *(_QWORD *)(v3 - 632) = v1[28];
  *(_QWORD *)(v3 - 640) = v1[29];
  *(_QWORD *)(v3 - 664) = v1[30];
  *(_QWORD *)(v3 - 672) = v1[31];
  *(_QWORD *)(v3 - 680) = v1[32];
  *(_QWORD *)(v3 - 688) = v1[33];
  *(_QWORD *)(v3 - 696) = v1[34];
  *(_QWORD *)(v3 - 720) = v1[37];
  *(_QWORD *)(v3 - 728) = v1[43];
  *(_QWORD *)(v3 - 752) = v1[45];
  *(_QWORD *)(v3 - 760) = v1[46];
  *(_QWORD *)(v3 - 768) = v1[47];
  *(_QWORD *)(v3 - 776) = v1[48];
  *(_QWORD *)(v3 - 784) = v1[49];
  *(_QWORD *)(v3 - 792) = v1[50];
  *(_QWORD *)(v3 - 800) = v1[51];
  *(_QWORD *)(v3 - 808) = v1[52];
  *(_DWORD *)(v3 - 72) = *((unsigned __int8 *)v1 + 424);
  *(_DWORD *)(v3 - 812) = *((unsigned __int8 *)v1 + 425);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  sub_1D5E379F8();
  *(_QWORD *)(v3 - 312) = v6;
  *(_BYTE *)(v3 - 65) = 0;
  *(_QWORD *)(v3 - 280) = *(_QWORD *)(v3 - 336);
  *(_QWORD *)(v3 - 272) = &_s28PositiveIntConditionProviderVN;
  *(_QWORD *)(v3 - 264) = *(_QWORD *)(v3 - 344);
  *(_QWORD *)(v3 - 256) = &off_1ED9AEF28;
  type metadata accessor for ConditionalConfigurableValue();
}

uint64_t sub_1D5DD6050(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  MEMORY[0x1D827D8E0](&protocol conformance descriptor for ConditionalConfigurableValue<A, B>, a1);
  v13 = *(_QWORD *)(v4 - 328);
  sub_1D5E3789C();
  if (!v13)
  {
    v14 = *(_QWORD *)(v4 - 408);
    v15 = *(_QWORD *)(v4 - 360);
    v16 = *(_QWORD *)(v4 - 352);
    *(_QWORD *)(v4 - 328) = v11;
    *(_QWORD *)(v4 - 848) = v10;
    *(_QWORD *)(v4 - 840) = v9;
    *(_QWORD *)(v4 - 832) = v6;
    *(_QWORD *)(v4 - 824) = v5;
    *(_QWORD *)(v4 - 344) = v12;
    *(_QWORD *)(v4 - 336) = v8;
    *(_QWORD *)(v4 - 856) = v7;
    *(_QWORD *)(v4 - 280) = *(_QWORD *)(v4 - 368);
    *(_QWORD *)(v4 - 272) = *(_QWORD *)(v4 - 384);
    *(_QWORD *)(v4 - 264) = *(_QWORD *)(v4 - 376);
    v17 = *(_QWORD *)(v4 - 400);
    *(_QWORD *)(v4 - 256) = *(_QWORD *)(v4 - 392);
    *(_QWORD *)(v4 - 248) = v17;
    *(_BYTE *)(v4 - 312) = 1;
    v18 = sub_1D5DEDB9C();
    sub_1D5E3789C();
    *(_QWORD *)(v4 - 368) = v18;
    *(_QWORD *)(v4 - 312) = v14;
    *(_BYTE *)(v4 - 65) = 2;
    *(_QWORD *)(v4 - 280) = v16;
    *(_QWORD *)(v4 - 272) = v2;
    *(_QWORD *)(v4 - 264) = v15;
    *(_QWORD *)(v4 - 256) = &off_1ED9AEF28;
    type metadata accessor for ConditionalConfigurableValue();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 320) + 8))(v3, v1);
}

void sub_1D5DD6200(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1D827D8E0](&protocol conformance descriptor for ConditionalConfigurableValue<A, B>, a1);
  sub_1D5E3789C();
  if (!v1)
  {
    *(_QWORD *)(v3 - 280) = *(_QWORD *)(v3 - 416);
    *(_QWORD *)(v3 - 272) = *(_QWORD *)(v3 - 424);
    *(_QWORD *)(v3 - 264) = *(_QWORD *)(v3 - 432);
    v4 = *(_QWORD *)(v3 - 448);
    *(_QWORD *)(v3 - 256) = *(_QWORD *)(v3 - 440);
    *(_QWORD *)(v3 - 248) = v4;
    *(_BYTE *)(v3 - 312) = 3;
    sub_1D5E3789C();
    *(_QWORD *)(v3 - 312) = *(_QWORD *)(v3 - 472);
    *(_BYTE *)(v3 - 65) = 4;
    *(_QWORD *)(v3 - 280) = *(_QWORD *)(v3 - 464);
    *(_QWORD *)(v3 - 272) = v2;
    *(_QWORD *)(v3 - 264) = *(_QWORD *)(v3 - 456);
    *(_QWORD *)(v3 - 256) = &off_1ED9AEF28;
    type metadata accessor for ConditionalConfigurableValue();
  }
  JUMPOUT(0x1D5DD6174);
}

void sub_1D5DD6320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1D827D8E0](&protocol conformance descriptor for ConditionalConfigurableValue<A, B>, a1);
  sub_1D5E3789C();
  if (!v1)
  {
    *(_QWORD *)(v3 - 280) = *(_QWORD *)(v3 - 480);
    *(_QWORD *)(v3 - 272) = *(_QWORD *)(v3 - 488);
    *(_QWORD *)(v3 - 264) = *(_QWORD *)(v3 - 496);
    v4 = *(_QWORD *)(v3 - 512);
    *(_QWORD *)(v3 - 256) = *(_QWORD *)(v3 - 504);
    *(_QWORD *)(v3 - 248) = v4;
    *(_BYTE *)(v3 - 312) = 5;
    sub_1D5E3789C();
    *(_QWORD *)(v3 - 312) = *(_QWORD *)(v3 - 536);
    *(_BYTE *)(v3 - 65) = 6;
    *(_QWORD *)(v3 - 280) = *(_QWORD *)(v3 - 528);
    *(_QWORD *)(v3 - 272) = v2;
    *(_QWORD *)(v3 - 264) = *(_QWORD *)(v3 - 520);
    *(_QWORD *)(v3 - 256) = &off_1ED9AEF28;
    type metadata accessor for ConditionalConfigurableValue();
  }
  JUMPOUT(0x1D5DD616CLL);
}

void sub_1D5DD6430(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1D827D8E0](&protocol conformance descriptor for ConditionalConfigurableValue<A, B>, a1);
  sub_1D5E3789C();
  if (!v1)
  {
    *(_QWORD *)(v3 - 280) = *(_QWORD *)(v3 - 544);
    *(_QWORD *)(v3 - 272) = *(_QWORD *)(v3 - 552);
    *(_QWORD *)(v3 - 264) = *(_QWORD *)(v3 - 560);
    v4 = *(_QWORD *)(v3 - 576);
    *(_QWORD *)(v3 - 256) = *(_QWORD *)(v3 - 568);
    *(_QWORD *)(v3 - 248) = v4;
    *(_BYTE *)(v3 - 312) = 7;
    sub_1D5E3789C();
    *(_QWORD *)(v3 - 312) = *(_QWORD *)(v3 - 600);
    *(_BYTE *)(v3 - 65) = 8;
    *(_QWORD *)(v3 - 280) = *(_QWORD *)(v3 - 592);
    *(_QWORD *)(v3 - 272) = v2;
    *(_QWORD *)(v3 - 264) = *(_QWORD *)(v3 - 584);
    *(_QWORD *)(v3 - 256) = &off_1ED9AEF28;
    type metadata accessor for ConditionalConfigurableValue();
  }
  JUMPOUT(0x1D5DD616CLL);
}

void sub_1D5DD6540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1D827D8E0](&protocol conformance descriptor for ConditionalConfigurableValue<A, B>, a1);
  sub_1D5E3789C();
  if (!v1)
  {
    *(_QWORD *)(v3 - 280) = *(_QWORD *)(v3 - 608);
    *(_QWORD *)(v3 - 272) = *(_QWORD *)(v3 - 616);
    *(_QWORD *)(v3 - 264) = *(_QWORD *)(v3 - 624);
    v4 = *(_QWORD *)(v3 - 640);
    *(_QWORD *)(v3 - 256) = *(_QWORD *)(v3 - 632);
    *(_QWORD *)(v3 - 248) = v4;
    *(_BYTE *)(v3 - 312) = 9;
    sub_1D5E3789C();
    *(_QWORD *)(v3 - 312) = *(_QWORD *)(v3 - 664);
    *(_BYTE *)(v3 - 65) = 10;
    *(_QWORD *)(v3 - 280) = *(_QWORD *)(v3 - 656);
    *(_QWORD *)(v3 - 272) = v2;
    *(_QWORD *)(v3 - 264) = *(_QWORD *)(v3 - 648);
    *(_QWORD *)(v3 - 256) = &off_1ED9AEF28;
    type metadata accessor for ConditionalConfigurableValue();
  }
  JUMPOUT(0x1D5DD616CLL);
}

void sub_1D5DD6650(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  MEMORY[0x1D827D8E0](&protocol conformance descriptor for ConditionalConfigurableValue<A, B>, a1);
  sub_1D5E3789C();
  if (!v1)
  {
    *(_QWORD *)(v2 - 280) = *(_QWORD *)(v2 - 672);
    *(_QWORD *)(v2 - 272) = *(_QWORD *)(v2 - 680);
    *(_QWORD *)(v2 - 264) = *(_QWORD *)(v2 - 688);
    v3 = *(_QWORD *)(v2 - 328);
    *(_QWORD *)(v2 - 256) = *(_QWORD *)(v2 - 696);
    *(_QWORD *)(v2 - 248) = v3;
    *(_BYTE *)(v2 - 312) = 11;
    sub_1D5E3789C();
    *(_QWORD *)(v2 - 280) = *(_QWORD *)(v2 - 336);
    *(_QWORD *)(v2 - 272) = *(_QWORD *)(v2 - 720);
    *(_QWORD *)(v2 - 264) = *(_QWORD *)(v2 - 848);
    v4 = *(_QWORD *)(v2 - 832);
    *(_QWORD *)(v2 - 256) = *(_QWORD *)(v2 - 840);
    *(_QWORD *)(v2 - 248) = v4;
    v5 = *(_QWORD *)(v2 - 344);
    *(_QWORD *)(v2 - 240) = *(_QWORD *)(v2 - 824);
    *(_QWORD *)(v2 - 232) = v5;
    *(_QWORD *)(v2 - 224) = *(_QWORD *)(v2 - 728);
    *(_BYTE *)(v2 - 65) = 12;
    v6 = sub_1D5DEDD6C();
    *(_QWORD *)(v2 - 312) = *(_QWORD *)(v2 - 704);
    *(_QWORD *)(v2 - 304) = &_s22QuotaConditionProviderVN;
    *(_QWORD *)(v2 - 296) = *(_QWORD *)(v2 - 712);
    *(_QWORD *)(v2 - 288) = v6;
    type metadata accessor for ConditionalConfigurableValue();
  }
  JUMPOUT(0x1D5DD6180);
}

void sub_1D5DD6970()
{
  _s13ConfigurationV23ClusteringConfigurationV15ClusteringKnobsV10CodingKeysOMa();
}

uint64_t sub_1D5DD6A30(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x1D827D8E0](&unk_1D5E43E78, a1);
  v4 = sub_1D5E377F4();
  v1[40] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v12 - v7;
  v9 = v2[3];
  v1[42] = v2;
  __swift_project_boxed_opaque_existential_1(v2, v9);
  v1[41] = v8;
  v10 = v1[43];
  sub_1D5E379E0();
  if (!v10)
  {
    v1[23] = v3;
    v1[43] = v5;
    v1[98] = v1[39];
    v1[99] = &_s28PositiveIntConditionProviderVN;
    v1[100] = v1[36];
    v1[101] = &off_1ED9AEF28;
    type metadata accessor for ConditionalConfigurableValue();
  }
  return __swift_destroy_boxed_opaque_existential_1(v1[42]);
}

void sub_1D5DD6C34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v1 + 784) = 2;
  MEMORY[0x1D827D8E0](&protocol conformance descriptor for ConditionalConfigurableValue<A, B>, a1);
  sub_1D5E377D0();
  if (!v3)
  {
    *(_BYTE *)(v1 + 352) = 3;
    sub_1D5E377D0();
    *(_QWORD *)(v1 + 280) = v6;
    *(_QWORD *)(v1 + 296) = v5;
    *(_QWORD *)(v1 + 784) = v2;
    *(_QWORD *)(v1 + 792) = v4;
    *(_QWORD *)(v1 + 800) = *(_QWORD *)(v1 + 272);
    *(_QWORD *)(v1 + 808) = &off_1ED9AEF28;
    type metadata accessor for ConditionalConfigurableValue();
  }
  JUMPOUT(0x1D5DD6B54);
}

void sub_1D5DD6DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v1 + 784) = 6;
  MEMORY[0x1D827D8E0](&protocol conformance descriptor for ConditionalConfigurableValue<A, B>, a1);
  sub_1D5E377D0();
  if (!v2)
  {
    *(_QWORD *)(v1 + 264) = *(_QWORD *)(v1 + 352);
    *(_BYTE *)(v1 + 352) = 7;
    sub_1D5E377D0();
    *(_QWORD *)(v1 + 256) = *(_QWORD *)(v1 + 784);
    v4 = *(_QWORD *)(v1 + 792);
    *(_QWORD *)(v1 + 144) = *(_QWORD *)(v1 + 800);
    *(_QWORD *)(v1 + 152) = v4;
    v5 = *(_QWORD *)(v1 + 808);
    *(_QWORD *)(v1 + 128) = *(_QWORD *)(v1 + 816);
    *(_QWORD *)(v1 + 136) = v5;
    *(_QWORD *)(v1 + 784) = *(_QWORD *)(v1 + 240);
    *(_QWORD *)(v1 + 792) = v3;
    *(_QWORD *)(v1 + 800) = *(_QWORD *)(v1 + 248);
    *(_QWORD *)(v1 + 808) = &off_1ED9AEF28;
    type metadata accessor for ConditionalConfigurableValue();
  }
  JUMPOUT(0x1D5DD6BACLL);
}

void sub_1D5DD6EA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v1 + 784) = 8;
  MEMORY[0x1D827D8E0](&protocol conformance descriptor for ConditionalConfigurableValue<A, B>, a1);
  sub_1D5E377D0();
  if (!v2)
  {
    *(_BYTE *)(v1 + 352) = 9;
    sub_1D5E377D0();
    v3 = *(_QWORD *)(v1 + 784);
    *(_QWORD *)(v1 + 240) = *(_QWORD *)(v1 + 792);
    *(_QWORD *)(v1 + 248) = v3;
    v4 = *(_QWORD *)(v1 + 800);
    *(_QWORD *)(v1 + 112) = *(_QWORD *)(v1 + 808);
    *(_QWORD *)(v1 + 120) = v4;
    *(_QWORD *)(v1 + 104) = *(_QWORD *)(v1 + 816);
    *(_QWORD *)(v1 + 784) = *(_QWORD *)(v1 + 224);
    *(_QWORD *)(v1 + 792) = &_s28PositiveIntConditionProviderVN;
    *(_QWORD *)(v1 + 800) = *(_QWORD *)(v1 + 232);
    *(_QWORD *)(v1 + 808) = &off_1ED9AEF28;
    type metadata accessor for ConditionalConfigurableValue();
  }
  JUMPOUT(0x1D5DD6BACLL);
}

void sub_1D5DD6F74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)(v1 + 784) = 10;
  MEMORY[0x1D827D8E0](&protocol conformance descriptor for ConditionalConfigurableValue<A, B>, a1);
  sub_1D5E377D0();
  if (!v2)
  {
    *(_QWORD *)(v1 + 232) = *(_QWORD *)(v1 + 352);
    *(_BYTE *)(v1 + 352) = 11;
    sub_1D5E377D0();
    *(_QWORD *)(v1 + 312) = *(_QWORD *)(v1 + 784);
    *(_QWORD *)(v1 + 224) = *(_QWORD *)(v1 + 792);
    v3 = *(_QWORD *)(v1 + 800);
    *(_QWORD *)(v1 + 88) = *(_QWORD *)(v1 + 808);
    *(_QWORD *)(v1 + 96) = v3;
    *(_QWORD *)(v1 + 80) = *(_QWORD *)(v1 + 816);
    v4 = sub_1D5DEDD6C();
    *(_QWORD *)(v1 + 352) = *(_QWORD *)(v1 + 208);
    *(_QWORD *)(v1 + 360) = &_s22QuotaConditionProviderVN;
    *(_QWORD *)(v1 + 368) = *(_QWORD *)(v1 + 216);
    *(_QWORD *)(v1 + 376) = v4;
    type metadata accessor for ConditionalConfigurableValue();
  }
  JUMPOUT(0x1D5DD6BACLL);
}

void sub_1D5DD7040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)(v1 + 352) = 12;
  MEMORY[0x1D827D8E0](&protocol conformance descriptor for ConditionalConfigurableValue<A, B>, a1);
  sub_1D5E377D0();
  if (v2)
    JUMPOUT(0x1D5DD7084);
  v3 = *(_QWORD *)(v1 + 784);
  *(_QWORD *)(v1 + 64) = *(_QWORD *)(v1 + 800);
  *(_QWORD *)(v1 + 72) = v3;
  v4 = *(_QWORD *)(v1 + 808);
  *(_QWORD *)(v1 + 48) = *(_QWORD *)(v1 + 816);
  *(_QWORD *)(v1 + 56) = v4;
  v5 = *(_QWORD *)(v1 + 824);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(v1 + 832);
  *(_QWORD *)(v1 + 40) = v5;
  v6 = sub_1D5DEDDB0();
  *(_QWORD *)(v1 + 784) = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v1 + 792) = &_s31TopicDiversityConditionProviderVN;
  *(_QWORD *)(v1 + 800) = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v1 + 808) = v6;
  type metadata accessor for ConditionalConfigurableValue();
}

void sub_1D5DD70F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *(_BYTE *)(v1 + 784) = 13;
  *(_QWORD *)(v1 + 216) = v6;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v1 + 208) = v3;
  swift_bridgeObjectRetain();
  MEMORY[0x1D827D8E0](&protocol conformance descriptor for ConditionalConfigurableValue<A, B>, a1);
  sub_1D5E377D0();
  if (v2)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 344) + 8))(*(_QWORD *)(v1 + 328), *(_QWORD *)(v1 + 320));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v1 + 336));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(v1 + 200) = *(_QWORD *)(v1 + 352);
    v18 = *(_QWORD *)(v1 + 368);
    *(_QWORD *)(v1 + 184) = *(_QWORD *)(v1 + 360);
    *(_BYTE *)(v8 - 66) = 14;
    sub_1D5DEDE44();
    v19 = v18;
    swift_bridgeObjectRetain();
    sub_1D5E3777C();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 344) + 8))(*(_QWORD *)(v1 + 328), *(_QWORD *)(v1 + 320));
    v20 = *(_QWORD *)(v8 - 208);
    v21 = *(_QWORD *)(v8 - 200);
    *(_QWORD *)(v1 + 344) = v20;
    v22 = *(_QWORD *)(v8 - 192);
    v23 = *(_QWORD *)(v8 - 184);
    *(_QWORD *)(v1 + 320) = v22;
    *(_QWORD *)(v1 + 328) = v21;
    v24 = *(_QWORD *)(v8 - 176);
    v25 = *(_QWORD *)(v8 - 168);
    *(_QWORD *)(v1 + 16) = v24;
    *(_QWORD *)(v1 + 24) = v23;
    *(_QWORD *)(v1 + 8) = v25;
    v26 = *(unsigned __int8 *)(v8 - 160);
    *(_DWORD *)(v8 - 72) = v26;
    v27 = *(_BYTE *)(v8 - 159);
    *(_BYTE *)(v8 - 65) = v27;
    *(_QWORD *)(v1 + 352) = *(_QWORD *)(v1 + 288);
    v28 = *(_QWORD *)(v1 + 280);
    *(_QWORD *)(v1 + 360) = *(_QWORD *)(v1 + 296);
    *(_QWORD *)(v1 + 368) = v28;
    *(_QWORD *)(v1 + 376) = v11;
    *(_QWORD *)(v1 + 384) = v12;
    *(_QWORD *)(v1 + 392) = v13;
    *(_QWORD *)(v1 + 400) = v4;
    v29 = *(_QWORD *)(v1 + 176);
    *(_QWORD *)(v1 + 408) = *(_QWORD *)(v1 + 272);
    *(_QWORD *)(v1 + 416) = v29;
    v30 = *(_QWORD *)(v1 + 304);
    *(_QWORD *)(v1 + 424) = *(_QWORD *)(v1 + 168);
    *(_QWORD *)(v1 + 432) = v30;
    *(_QWORD *)(v1 + 440) = *(_QWORD *)(v1 + 160);
    *(_QWORD *)(v1 + 448) = v7;
    *(_QWORD *)(v1 + 456) = v14;
    *(_QWORD *)(v1 + 464) = v15;
    *(_QWORD *)(v1 + 472) = v16;
    *(_QWORD *)(v1 + 480) = v9;
    *(_QWORD *)(v1 + 488) = v10;
    v31 = *(_QWORD *)(v1 + 264);
    *(_QWORD *)(v1 + 496) = v31;
    v32 = *(_QWORD *)(v1 + 152);
    *(_QWORD *)(v1 + 504) = *(_QWORD *)(v1 + 256);
    *(_QWORD *)(v1 + 512) = v32;
    *(_QWORD *)(v1 + 520) = *(_QWORD *)(v1 + 144);
    *(_QWORD *)(v1 + 528) = *(_QWORD *)(v1 + 136);
    *(_QWORD *)(v1 + 536) = *(_QWORD *)(v1 + 128);
    *(_QWORD *)(v1 + 544) = v5;
    *(_QWORD *)(v1 + 552) = *(_QWORD *)(v1 + 248);
    *(_QWORD *)(v1 + 560) = *(_QWORD *)(v1 + 240);
    *(_QWORD *)(v1 + 568) = *(_QWORD *)(v1 + 120);
    *(_QWORD *)(v1 + 576) = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 584) = *(_QWORD *)(v1 + 104);
    *(_QWORD *)(v1 + 592) = *(_QWORD *)(v1 + 232);
    *(_QWORD *)(v1 + 600) = *(_QWORD *)(v1 + 312);
    *(_QWORD *)(v1 + 608) = *(_QWORD *)(v1 + 224);
    *(_QWORD *)(v1 + 616) = *(_QWORD *)(v1 + 96);
    *(_QWORD *)(v1 + 624) = *(_QWORD *)(v1 + 88);
    *(_QWORD *)(v1 + 632) = *(_QWORD *)(v1 + 80);
    *(_QWORD *)(v1 + 640) = *(_QWORD *)(v1 + 72);
    v33 = *(_QWORD *)(v1 + 208);
    v34 = *(_QWORD *)(v1 + 216);
    *(_QWORD *)(v1 + 648) = v34;
    *(_QWORD *)(v1 + 656) = *(_QWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 664) = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 672) = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 680) = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 688) = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 696) = v33;
    *(_QWORD *)(v1 + 704) = *(_QWORD *)(v1 + 200);
    *(_QWORD *)(v1 + 712) = *(_QWORD *)(v1 + 184);
    *(_QWORD *)(v1 + 720) = v19;
    *(_QWORD *)(v1 + 728) = v20;
    *(_QWORD *)(v1 + 736) = v21;
    *(_QWORD *)(v1 + 744) = v22;
    *(_QWORD *)(v1 + 752) = v23;
    *(_QWORD *)(v1 + 760) = v24;
    *(_QWORD *)(v1 + 768) = v25;
    *(_BYTE *)(v1 + 776) = v26;
    *(_BYTE *)(v1 + 777) = v27;
    sub_1D5E00A10(v1 + 352);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memcpy(*(void **)(v1 + 192), (const void *)(v1 + 352), 0x1AAuLL);
    __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v1 + 336));
    *(_QWORD *)(v1 + 792) = *(_QWORD *)(v1 + 296);
    *(_QWORD *)(v1 + 800) = *(_QWORD *)(v1 + 280);
    *(_QWORD *)(v1 + 808) = v11;
    *(_QWORD *)(v1 + 816) = v12;
    *(_QWORD *)(v1 + 824) = v13;
    *(_QWORD *)(v1 + 784) = *(_QWORD *)(v1 + 288);
    *(_QWORD *)(v1 + 832) = v4;
    *(_QWORD *)(v1 + 840) = *(_QWORD *)(v1 + 272);
    *(_QWORD *)(v1 + 848) = *(_QWORD *)(v1 + 176);
    *(_QWORD *)(v1 + 856) = *(_QWORD *)(v1 + 168);
    *(_QWORD *)(v1 + 864) = *(_QWORD *)(v1 + 304);
    *(_QWORD *)(v1 + 872) = *(_QWORD *)(v1 + 160);
    *(_QWORD *)(v1 + 880) = v7;
    *(_QWORD *)(v1 + 888) = v14;
    *(_QWORD *)(v1 + 896) = v15;
    *(_QWORD *)(v1 + 904) = v16;
    *(_QWORD *)(v1 + 912) = v9;
    *(_QWORD *)(v1 + 920) = v10;
    *(_QWORD *)(v1 + 928) = v31;
    *(_QWORD *)(v1 + 936) = *(_QWORD *)(v1 + 256);
    *(_QWORD *)(v1 + 944) = *(_QWORD *)(v1 + 152);
    *(_QWORD *)(v1 + 952) = *(_QWORD *)(v1 + 144);
    *(_QWORD *)(v1 + 960) = *(_QWORD *)(v1 + 136);
    *(_QWORD *)(v1 + 968) = *(_QWORD *)(v1 + 128);
    *(_QWORD *)(v1 + 976) = v5;
    *(_QWORD *)(v1 + 984) = *(_QWORD *)(v1 + 248);
    *(_QWORD *)(v1 + 992) = *(_QWORD *)(v1 + 240);
    *(_QWORD *)(v1 + 1000) = *(_QWORD *)(v1 + 120);
    *(_QWORD *)(v1 + 1008) = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 1016) = *(_QWORD *)(v1 + 104);
    *(_QWORD *)(v1 + 1024) = *(_QWORD *)(v1 + 232);
    *(_QWORD *)(v1 + 1032) = *(_QWORD *)(v1 + 312);
    *(_QWORD *)(v1 + 1040) = *(_QWORD *)(v1 + 224);
    *(_QWORD *)(v1 + 1048) = *(_QWORD *)(v1 + 96);
    *(_QWORD *)(v1 + 1056) = *(_QWORD *)(v1 + 88);
    *(_QWORD *)(v1 + 1064) = *(_QWORD *)(v1 + 80);
    *(_QWORD *)(v1 + 1072) = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 1080) = v34;
    *(_QWORD *)(v1 + 1088) = *(_QWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 1096) = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 1104) = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 1112) = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 1120) = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 1128) = v33;
    *(_QWORD *)(v1 + 1136) = *(_QWORD *)(v1 + 200);
    *(_QWORD *)(v1 + 1144) = *(_QWORD *)(v1 + 184);
    *(_QWORD *)(v1 + 1152) = v19;
    *(_QWORD *)(v1 + 1160) = *(_QWORD *)(v1 + 344);
    *(_QWORD *)(v1 + 1168) = *(_QWORD *)(v1 + 328);
    *(_QWORD *)(v1 + 1176) = *(_QWORD *)(v1 + 320);
    *(_QWORD *)(v1 + 1184) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 1192) = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 1200) = *(_QWORD *)(v1 + 8);
    *(_BYTE *)(v1 + 1208) = *(_DWORD *)(v8 - 72);
    *(_BYTE *)(v1 + 1209) = *(_BYTE *)(v8 - 65);
    sub_1D5E00A58(v1 + 784);
  }
  JUMPOUT(0x1D5DD6BB8);
}

void sub_1D5DD7560()
{
  sub_1D5DD6970();
}

void sub_1D5DD75B0()
{
  sub_1D5DD5C0C();
}

uint64_t sub_1D5DD75C4(uint64_t a1, uint64_t a2)
{
  return sub_1D5DD4B2C(a1, a2) & 1;
}

void sub_1D5DD760C(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_1D5DD7618(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_1D5DD7624(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_1D5DD7630(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_1D5DD763C(_QWORD *a1@<X8>)
{
  *a1 = 5;
}

void sub_1D5DD7648(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DD7658@<X0>(void *a1@<X8>)
{
  const void *v1;
  _BYTE __dst[440];

  memcpy(__dst, v1, 0x1AAuLL);
  memcpy(a1, v1, 0x1AAuLL);
  return sub_1D5E00A10((uint64_t)__dst);
}

void *sub_1D5DD76A4(const void *a1)
{
  void *v1;
  _BYTE __dst[440];

  memcpy(__dst, v1, 0x1AAuLL);
  sub_1D5E00A58((uint64_t)__dst);
  return memcpy(v1, a1, 0x1AAuLL);
}

uint64_t (*sub_1D5DD76F0())()
{
  return nullsub_91;
}

void sub_1D5DD7704(_QWORD *a1@<X8>)
{
  *a1 = 100;
}

void sub_1D5DD7710(_QWORD *a1@<X8>)
{
  *a1 = 100;
}

void sub_1D5DD771C(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DD7728()
{
  return 2;
}

void sub_1D5DD7730(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_1D5DD773C(_QWORD *a1@<X8>)
{
  *a1 = 5;
}

void sub_1D5DD7748(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DD7758@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE v5[432];

  v3 = (const void *)(v1 + 432);
  memcpy(v5, v3, 0x1AAuLL);
  memcpy(a1, v3, 0x1AAuLL);
  return sub_1D5E00A10((uint64_t)v5);
}

void *sub_1D5DD77B0(const void *a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v5[432];

  v3 = (void *)(v1 + 432);
  memcpy(v5, v3, 0x1AAuLL);
  sub_1D5E00A58((uint64_t)v5);
  return memcpy(v3, a1, 0x1AAuLL);
}

uint64_t (*sub_1D5DD7808())()
{
  return nullsub_92;
}

double sub_1D5DD781C()
{
  return 0.5;
}

void sub_1D5DD7824(_QWORD *a1@<X8>)
{
  *a1 = 0x3FE0000000000000;
}

double sub_1D5DD7830()
{
  uint64_t v0;

  return *(double *)(v0 + 864);
}

uint64_t sub_1D5DD7838(double a1)
{
  return sub_1D5DC2E74(a1);
}

uint64_t (*sub_1D5DD7858(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 864);
  return sub_1D5DD7874;
}

uint64_t sub_1D5DD7874(double *a1)
{
  return sub_1D5DC2E74(*a1);
}

void sub_1D5DD789C(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void sub_1D5DD78A4(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void sub_1D5DD78AC(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 872);
}

_BYTE *sub_1D5DD78B8(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 872) = *result;
  return result;
}

_BYTE *(*sub_1D5DD78C4(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 872);
  return sub_1D5DD78E0;
}

_BYTE *sub_1D5DD78E0(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 872) = result[8];
  return result;
}

uint64_t sub_1D5DD78F0()
{
  return 2;
}

void sub_1D5DD78F8(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DD7904()
{
  return 2;
}

void sub_1D5DD790C(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DD7918()
{
  return 2;
}

void sub_1D5DD7920(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DD792C()
{
  return 2;
}

void sub_1D5DD7934(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DD7940()
{
  return 5;
}

void sub_1D5DD7948(_QWORD *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1D5DD7954()
{
  return 3;
}

void sub_1D5DD795C(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DD7974()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DD797C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 880) = a1;
  return result;
}

uint64_t (*sub_1D5DD79A4())()
{
  return nullsub_93;
}

uint64_t sub_1D5DD79B8()
{
  return 0;
}

void sub_1D5DD79C0(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DD79C8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 888);
}

uint64_t sub_1D5DD79D0(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 888) = result;
  return result;
}

_BYTE *(*sub_1D5DD79D8(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 888);
  return sub_1D5DD79F4;
}

_BYTE *sub_1D5DD79F4(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 888) = result[8];
  return result;
}

uint64_t sub_1D5DD7A04()
{
  return 10;
}

void sub_1D5DD7A0C(_QWORD *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1D5DD7A18()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 896);
}

uint64_t sub_1D5DD7A20(uint64_t a1)
{
  return sub_1D5DC2E90(a1);
}

uint64_t (*sub_1D5DD7A40(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 896);
  a1[1] = v1;
  return sub_1D5DD7A58;
}

uint64_t sub_1D5DD7A58(uint64_t *a1)
{
  return sub_1D5DC2E90(*a1);
}

uint64_t sub_1D5DD7A7C()
{
  return 0;
}

void sub_1D5DD7A84(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DD7A8C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 904);
}

uint64_t sub_1D5DD7A94(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 904) = result;
  return result;
}

_BYTE *(*sub_1D5DD7A9C(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 904);
  return sub_1D5DD7AB8;
}

_BYTE *sub_1D5DD7AB8(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 904) = result[8];
  return result;
}

uint64_t sub_1D5DD7AC8()
{
  return 0;
}

void sub_1D5DD7AD0(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DD7AD8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 905);
}

uint64_t sub_1D5DD7AE0(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 905) = result;
  return result;
}

_BYTE *(*sub_1D5DD7AE8(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 905);
  return sub_1D5DD7B04;
}

_BYTE *sub_1D5DD7B04(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 905) = result[8];
  return result;
}

double sub_1D5DD7B14()
{
  return 1.0;
}

void sub_1D5DD7B1C(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DD7B28(double a1)
{
  return sub_1D5DC3050(a1);
}

uint64_t (*sub_1D5DD7B48(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 912);
  return sub_1D5DD7B64;
}

uint64_t sub_1D5DD7B64(double *a1)
{
  return sub_1D5DC3050(*a1);
}

double sub_1D5DD7B8C()
{
  return 1.0;
}

void sub_1D5DD7B94(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DD7BA0(double a1)
{
  return sub_1D5DC306C(a1);
}

uint64_t (*sub_1D5DD7BC0(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 920);
  return sub_1D5DD7BDC;
}

uint64_t sub_1D5DD7BDC(double *a1)
{
  return sub_1D5DC306C(*a1);
}

uint64_t sub_1D5DD7C04()
{
  return 1000;
}

void sub_1D5DD7C0C(_QWORD *a1@<X8>)
{
  *a1 = 1000;
}

uint64_t sub_1D5DD7C18()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 928);
}

uint64_t sub_1D5DD7C20(uint64_t a1)
{
  return sub_1D5DC3088(a1);
}

uint64_t (*sub_1D5DD7C40(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 928);
  a1[1] = v1;
  return sub_1D5DD7C58;
}

uint64_t sub_1D5DD7C58(uint64_t *a1)
{
  return sub_1D5DC3088(*a1);
}

double sub_1D5DD7C7C()
{
  return 0.0;
}

void sub_1D5DD7C84(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DD7C8C()
{
  uint64_t v0;

  return *(double *)(v0 + 936);
}

uint64_t sub_1D5DD7C94(double a1)
{
  return sub_1D5DC3238(a1);
}

uint64_t (*sub_1D5DD7CB4(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 936);
  return sub_1D5DD7CD0;
}

uint64_t sub_1D5DD7CD0(double *a1)
{
  return sub_1D5DC3238(*a1);
}

double sub_1D5DD7CF8()
{
  return 0.0;
}

void sub_1D5DD7D00(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DD7D08()
{
  uint64_t v0;

  return *(double *)(v0 + 944);
}

uint64_t sub_1D5DD7D10(double a1)
{
  return sub_1D5DC3254(a1);
}

uint64_t (*sub_1D5DD7D30(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 944);
  return sub_1D5DD7D4C;
}

uint64_t sub_1D5DD7D4C(double *a1)
{
  return sub_1D5DC3254(*a1);
}

uint64_t sub_1D5DD7D74()
{
  return 2;
}

void sub_1D5DD7D7C(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DD7D88()
{
  return 2;
}

void sub_1D5DD7D90(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DD7D9C()
{
  return 2;
}

void sub_1D5DD7DA4(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DD7DB0()
{
  return 2;
}

void sub_1D5DD7DB8(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DD7DC4()
{
  return 30;
}

void sub_1D5DD7DCC(_QWORD *a1@<X8>)
{
  *a1 = 30;
}

uint64_t sub_1D5DD7DD8()
{
  return 1;
}

void sub_1D5DD7DE0(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t _s10XavierNews7ClassicV13ConfigurationV010ClusteringD0V012DefaultTopicE28KnobsPaidBundleArticleQuotasV12defaultValueAG0L0VvgZ_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  if (qword_1ED9ADB80 != -1)
    swift_once();
  v2 = *((_QWORD *)&xmmword_1ED9ADB40 + 1);
  v3 = xmmword_1ED9ADB70;
  *(_QWORD *)a1 = xmmword_1ED9ADB40;
  *(_QWORD *)(a1 + 8) = v2;
  v4 = xmmword_1ED9ADB60;
  *(_OWORD *)(a1 + 16) = xmmword_1ED9ADB50;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void _s10XavierNews7ClassicV13ConfigurationV010ClusteringD0V012DefaultTopice5KnobsG9DiversityV12defaultValueAG0gI0VvgZ_0(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 1;
  a1[2] = MEMORY[0x1E0DEE9E8];
}

uint64_t Classic.Configuration.ClusteringConfiguration.moreForYouClusteringKnobs.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE v5[432];

  v3 = (const void *)(v1 + 952);
  memcpy(v5, v3, 0x1AAuLL);
  memcpy(a1, v3, 0x1AAuLL);
  return sub_1D5E00A10((uint64_t)v5);
}

void *Classic.Configuration.ClusteringConfiguration.moreForYouClusteringKnobs.setter(const void *a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v5[432];

  v3 = (void *)(v1 + 952);
  memcpy(v5, v3, 0x1AAuLL);
  sub_1D5E00A58((uint64_t)v5);
  return memcpy(v3, a1, 0x1AAuLL);
}

uint64_t (*Classic.Configuration.ClusteringConfiguration.moreForYouClusteringKnobs.modify())()
{
  return nullsub_94;
}

double sub_1D5DD7F54()
{
  return 0.9;
}

void sub_1D5DD7F60(_QWORD *a1@<X8>)
{
  *a1 = 0x3FECCCCCCCCCCCCDLL;
}

double sub_1D5DD7F74()
{
  uint64_t v0;

  return *(double *)(v0 + 1384);
}

void sub_1D5DD7F7C(double a1)
{
  sub_1D5DC3270(a1);
}

void (*sub_1D5DD7F9C(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 1384);
  return sub_1D5DD7FB8;
}

void sub_1D5DD7FB8(double *a1)
{
  sub_1D5DC3270(*a1);
}

double sub_1D5DD7FE0()
{
  return 0.3;
}

void sub_1D5DD7FF0(_QWORD *a1@<X8>)
{
  *a1 = 0x3FD3333333333333;
}

double sub_1D5DD8000()
{
  uint64_t v0;

  return *(double *)(v0 + 1392);
}

uint64_t sub_1D5DD8008(double a1)
{
  return sub_1D5DC343C(a1);
}

uint64_t (*sub_1D5DD8028(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 1392);
  return sub_1D5DD8044;
}

uint64_t sub_1D5DD8044(double *a1)
{
  return sub_1D5DC343C(*a1);
}

uint64_t sub_1D5DD806C()
{
  return 0;
}

void sub_1D5DD8074(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DD807C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1400);
}

uint64_t sub_1D5DD8084(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1400) = result;
  return result;
}

_BYTE *(*sub_1D5DD808C(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 1400);
  return sub_1D5DD80A8;
}

_BYTE *sub_1D5DD80A8(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 1400) = result[8];
  return result;
}

uint64_t sub_1D5DD80B8()
{
  return 37;
}

void sub_1D5DD80C0(_QWORD *a1@<X8>)
{
  *a1 = 37;
}

uint64_t sub_1D5DD80CC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 1408);
}

uint64_t sub_1D5DD80D4(uint64_t a1)
{
  return sub_1D5DC3458(a1);
}

uint64_t (*sub_1D5DD80F4(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 1408);
  a1[1] = v1;
  return sub_1D5DD810C;
}

uint64_t sub_1D5DD810C(uint64_t *a1)
{
  return sub_1D5DC3458(*a1);
}

double sub_1D5DD8130()
{
  return 1.2;
}

void sub_1D5DD8140(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF3333333333333;
}

double sub_1D5DD8150()
{
  uint64_t v0;

  return *(double *)(v0 + 1416);
}

void sub_1D5DD8158(double a1)
{
  sub_1D5DC3608(a1);
}

void (*sub_1D5DD8178(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 1416);
  return sub_1D5DD8194;
}

void sub_1D5DD8194(double *a1)
{
  sub_1D5DC3608(*a1);
}

void sub_1D5DD81BC(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_1D5DD81C8(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_1D5DD81D4(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static Classic.Configuration.ClusteringConfiguration.DefaultTopicClusteringKnobsMaxAIGCArticles.defaultValue.getter()
{
  return 2;
}

void sub_1D5DD81E8(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_1D5DD81F4(_QWORD *a1@<X8>)
{
  *a1 = 30;
}

void sub_1D5DD8200(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DD8210@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  if (qword_1ED9ADB80 != -1)
    swift_once();
  v2 = *((_QWORD *)&xmmword_1ED9ADB40 + 1);
  v3 = xmmword_1ED9ADB70;
  *(_QWORD *)a1 = xmmword_1ED9ADB40;
  *(_QWORD *)(a1 + 8) = v2;
  v4 = xmmword_1ED9ADB60;
  *(_OWORD *)(a1 + 16) = xmmword_1ED9ADB50;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D5DD828C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1D5DD0D08(0x3FF0000000000000, 0, 1, 0, MEMORY[0x1E0DEE9E8], a1);
}

uint64_t sub_1D5DD82A8@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE v5[432];

  v3 = (const void *)(v1 + 1424);
  memcpy(v5, v3, 0x1AAuLL);
  memcpy(a1, v3, 0x1AAuLL);
  return sub_1D5E00A10((uint64_t)v5);
}

void *sub_1D5DD8300(const void *a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v5[432];

  v3 = (void *)(v1 + 1424);
  memcpy(v5, v3, 0x1AAuLL);
  sub_1D5E00A58((uint64_t)v5);
  return memcpy(v3, a1, 0x1AAuLL);
}

uint64_t (*sub_1D5DD8358())()
{
  return nullsub_95;
}

double sub_1D5DD836C()
{
  return 1.5;
}

void sub_1D5DD8374(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF8000000000000;
}

double sub_1D5DD8380()
{
  uint64_t v0;

  return *(double *)(v0 + 1856);
}

void sub_1D5DD8388(double a1)
{
  sub_1D5DC37CC(a1);
}

void (*sub_1D5DD83A8(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 1856);
  return sub_1D5DD83C4;
}

void sub_1D5DD83C4(double *a1)
{
  sub_1D5DC37CC(*a1);
}

double sub_1D5DD83EC()
{
  return 1.0;
}

void sub_1D5DD83F4(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DD8400()
{
  uint64_t v0;

  return *(double *)(v0 + 1864);
}

uint64_t sub_1D5DD8408(double a1)
{
  return sub_1D5DC3988(a1);
}

uint64_t (*sub_1D5DD8428(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 1864);
  return sub_1D5DD8444;
}

uint64_t sub_1D5DD8444(double *a1)
{
  return sub_1D5DC3988(*a1);
}

double sub_1D5DD846C()
{
  return 1.0;
}

void sub_1D5DD8474(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DD8480()
{
  uint64_t v0;

  return *(double *)(v0 + 1872);
}

uint64_t sub_1D5DD8488(double a1)
{
  return sub_1D5DC39A4(a1);
}

uint64_t (*sub_1D5DD84A8(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 1872);
  return sub_1D5DD84C4;
}

uint64_t sub_1D5DD84C4(double *a1)
{
  return sub_1D5DC39A4(*a1);
}

double sub_1D5DD84EC()
{
  return 0.5;
}

void sub_1D5DD84F4(_QWORD *a1@<X8>)
{
  *a1 = 0x3FE0000000000000;
}

double sub_1D5DD8500()
{
  uint64_t v0;

  return *(double *)(v0 + 1880);
}

uint64_t sub_1D5DD8508(double a1)
{
  return sub_1D5DC39C0(a1);
}

uint64_t (*sub_1D5DD8528(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 1880);
  return sub_1D5DD8544;
}

uint64_t sub_1D5DD8544(double *a1)
{
  return sub_1D5DC39C0(*a1);
}

double sub_1D5DD856C()
{
  return 1.0;
}

void sub_1D5DD8574(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DD8580()
{
  uint64_t v0;

  return *(double *)(v0 + 1888);
}

uint64_t sub_1D5DD8588(double a1)
{
  return sub_1D5DC39DC(a1);
}

uint64_t (*sub_1D5DD85A8(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 1888);
  return sub_1D5DD85C4;
}

uint64_t sub_1D5DD85C4(double *a1)
{
  return sub_1D5DC39DC(*a1);
}

uint64_t sub_1D5DD85F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D5DD862C + 4 * byte_1D5E3D9DE[a1]))(0xD00000000000001BLL, 0x80000001D5E4A180);
}

unint64_t sub_1D5DD862C()
{
  return 0xD000000000000016;
}

uint64_t sub_1D5DD8720()
{
  uint64_t v0;

  return v0 + 1;
}

uint64_t sub_1D5DD8730()
{
  uint64_t v0;

  return v0 + 4;
}

uint64_t sub_1D5DD8740()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t sub_1D5DD8750()
{
  uint64_t v0;

  return v0 + 6;
}

uint64_t sub_1D5DD8760()
{
  uint64_t v0;

  return v0 - 2;
}

uint64_t sub_1D5DD8770()
{
  uint64_t v0;

  return v0 + 2;
}

uint64_t sub_1D5DD8780()
{
  uint64_t v0;

  return v0 + 2;
}

uint64_t sub_1D5DD8790()
{
  uint64_t v0;

  return v0 + 2;
}

uint64_t sub_1D5DD87A0()
{
  uint64_t v0;

  return v0 - 6;
}

void sub_1D5DD87B0()
{
  JUMPOUT(0x1D5DD87BCLL);
}

BOOL sub_1D5DD87C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D5DD87E0()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5DD880C()
{
  unsigned __int8 *v0;

  return sub_1D5DD85F0(*v0);
}

uint64_t sub_1D5DD8814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFC140(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DD8838()
{
  return 0;
}

void sub_1D5DD8844(_BYTE *a1@<X8>)
{
  *a1 = 26;
}

uint64_t sub_1D5DD8850()
{
  sub_1D5DEDE88();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DD8878()
{
  sub_1D5DEDE88();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DD88A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[54];
  _BYTE v48[426];
  _BYTE v49[426];
  int v50;
  char v51;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE6A8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = *(_QWORD *)(v3 + 864);
  LODWORD(v46) = *(unsigned __int8 *)(v3 + 872);
  v45 = *(_QWORD *)(v3 + 880);
  v50 = *(unsigned __int8 *)(v3 + 888);
  v43 = *(_QWORD *)(v3 + 896);
  v10 = *(unsigned __int8 *)(v3 + 904);
  v41 = *(unsigned __int8 *)(v3 + 905);
  v42 = v10;
  v11 = *(_QWORD *)(v3 + 912);
  v39 = *(_QWORD *)(v3 + 920);
  v40 = v11;
  v38 = *(_QWORD *)(v3 + 928);
  v12 = *(_QWORD *)(v3 + 936);
  v36 = *(_QWORD *)(v3 + 944);
  v37 = v12;
  memcpy(v48, (const void *)(v3 + 952), sizeof(v48));
  v13 = *(_QWORD *)(v3 + 1384);
  v14 = *(_QWORD *)(v3 + 1392);
  v34 = *(unsigned __int8 *)(v3 + 1400);
  v35 = *(_QWORD *)(v3 + 1408);
  v15 = *(_QWORD *)(v3 + 1416);
  memcpy(v49, (const void *)(v3 + 1424), sizeof(v49));
  v16 = *(_QWORD *)(v3 + 1856);
  v17 = *(_QWORD *)(v3 + 1864);
  v18 = *(_QWORD *)(v3 + 1872);
  v19 = *(_QWORD *)(v3 + 1880);
  v20 = *(_QWORD *)(v3 + 1888);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDE88();
  v21 = v5;
  sub_1D5E379F8();
  memcpy(v47, (const void *)v3, 0x1AAuLL);
  v51 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF460);
  sub_1D5DEEF40(&qword_1ED9AF4C8, &qword_1ED9AF460, (uint64_t)&unk_1D5E3E274);
  sub_1D5E3789C();
  if (!v2)
  {
    v22 = v46;
    v23 = v45;
    v32 = v14;
    v33 = v13;
    v26 = v15;
    v27 = v16;
    v28 = v17;
    v29 = v18;
    v30 = v19;
    v31 = v20;
    memcpy(v47, (const void *)(v3 + 432), 0x1AAuLL);
    v51 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF4B0);
    sub_1D5DEEF40(&qword_1ED9AF4A8, &qword_1ED9AF4B0, (uint64_t)&unk_1D5E3E274);
    sub_1D5E3789C();
    v47[0] = v44;
    v51 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE4B8);
    sub_1D5DEEF40(&qword_1ED9AE4B0, &qword_1ED9AE4B8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    LOBYTE(v47[0]) = v22;
    v51 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE458);
    sub_1D5DEEF40(&qword_1ED9AE450, &qword_1ED9AE458, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E3789C();
    v47[0] = v23;
    v51 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF4F8);
    sub_1D5DEDECC();
    sub_1D5E3789C();
    LOBYTE(v47[0]) = v50;
    v51 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE478);
    sub_1D5DEEF40(&qword_1ED9AE470, &qword_1ED9AE478, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E3789C();
    v47[0] = v43;
    v51 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE588);
    sub_1D5DEEF40(&qword_1ED9AE580, &qword_1ED9AE588, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    LOBYTE(v47[0]) = v42;
    v51 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE498);
    sub_1D5DEEF40(&qword_1ED9AE490, &qword_1ED9AE498, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E3789C();
    LOBYTE(v47[0]) = v41;
    v51 = 8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE488);
    sub_1D5DEEF40(&qword_1ED9AE480, &qword_1ED9AE488, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E3789C();
    v47[0] = v40;
    v51 = 9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE4E8);
    sub_1D5DEEF40(&qword_1ED9AE4E0, &qword_1ED9AE4E8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v47[0] = v39;
    v51 = 10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE568);
    sub_1D5DEEF40(&qword_1ED9AE560, &qword_1ED9AE568, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    v46 = v21;
    sub_1D5E3789C();
    v47[0] = v38;
    v51 = 11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE598);
    sub_1D5DEEF40(&qword_1ED9AE590, &qword_1ED9AE598, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v47[0] = v37;
    v51 = 12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE4D8);
    sub_1D5DEEF40(&qword_1ED9AE4D0, &qword_1ED9AE4D8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v47[0] = v36;
    v51 = 13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE4C8);
    sub_1D5DEEF40(&qword_1ED9AE4C0, &qword_1ED9AE4C8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    memcpy(v47, v48, 0x1AAuLL);
    v51 = 14;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF4C0);
    sub_1D5DEEF40(&qword_1ED9AF4B8, &qword_1ED9AF4C0, (uint64_t)&unk_1D5E3E274);
    sub_1D5E3789C();
    v47[0] = v33;
    v51 = 15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE4F8);
    sub_1D5DEEF40(&qword_1ED9AE4F0, &qword_1ED9AE4F8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v47[0] = v32;
    v51 = 16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE508);
    sub_1D5DEEF40(&qword_1ED9AE500, &qword_1ED9AE508, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    LOBYTE(v47[0]) = v34;
    v51 = 17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE468);
    sub_1D5DEEF40(&qword_1ED9AE460, &qword_1ED9AE468, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E3789C();
    v47[0] = v35;
    v51 = 18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE558);
    sub_1D5DEEF40(&qword_1ED9AE550, &qword_1ED9AE558, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v47[0] = v26;
    v51 = 19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE578);
    sub_1D5DEEF40(&qword_1ED9AE570, &qword_1ED9AE578, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    memcpy(v47, v49, 0x1AAuLL);
    v51 = 20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF490);
    sub_1D5DEEF40(&qword_1ED9AF488, &qword_1ED9AF490, (uint64_t)&unk_1D5E3E274);
    sub_1D5E3789C();
    v47[0] = v27;
    v51 = 21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE518);
    sub_1D5DEEF40(&qword_1ED9AE510, &qword_1ED9AE518, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v47[0] = v28;
    v51 = 22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE528);
    sub_1D5DEEF40(&qword_1ED9AE520, &qword_1ED9AE528, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v47[0] = v29;
    v51 = 23;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE538);
    sub_1D5DEEF40(&qword_1ED9AE530, &qword_1ED9AE538, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v47[0] = v30;
    v51 = 24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE4A8);
    sub_1D5DEEF40(&qword_1ED9AE4A0, &qword_1ED9AE4A8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v47[0] = v31;
    v51 = 25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE548);
    sub_1D5DEEF40(&qword_1ED9AE540, &qword_1ED9AE548, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    v5 = v46;
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1D5DD94B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  _BYTE *v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[237];
  _QWORD v40[109];
  char v41;
  _BYTE v42[7];
  uint64_t v43;
  char v44;
  _BYTE v45[7];
  uint64_t v46;
  char v47;
  char v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[426];
  int v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _BYTE v62[7];
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[426];
  int v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _BYTE v75[432];
  _BYTE v76[426];
  _BYTE v77[432];
  _BYTE v78[426];
  _BYTE v79[432];
  _BYTE v80[426];
  _BYTE v81[432];
  _BYTE v82[426];
  int v83;
  __int16 v84;
  _BYTE v85[426];
  _BYTE v86[7];
  int v87;
  __int16 v88;
  _BYTE v89[426];
  int v90;
  __int16 v91;
  _BYTE v92[7];
  _BYTE v93[7];
  _BYTE v94[872];
  uint64_t v95;

  v3 = (_QWORD *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5EE8);
  v6 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  sub_1D5DEDE88();
  sub_1D5E379E0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  v37 = v5;
  v38 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF460);
  v81[431] = 0;
  sub_1D5DEEF40(&qword_1EFFB5EF0, &qword_1ED9AF460, (uint64_t)&unk_1D5E3E24C);
  sub_1D5E377D0();
  memcpy(v81, v82, 0x1AAuLL);
  memcpy(v94, v82, 0x1AAuLL);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF4B0);
  v79[431] = 1;
  sub_1D5E00A10((uint64_t)v81);
  sub_1D5DEEF40(&qword_1EFFB5EF8, &qword_1ED9AF4B0, (uint64_t)&unk_1D5E3E24C);
  sub_1D5E377D0();
  memcpy(v79, v80, 0x1AAuLL);
  memcpy(&v94[432], v80, 0x1AAuLL);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE4B8);
  LOBYTE(v39[0]) = 2;
  sub_1D5E00A10((uint64_t)v79);
  sub_1D5DEEF40(&qword_1EFFB5F00, &qword_1ED9AE4B8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v10 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE458);
  LOBYTE(v39[0]) = 3;
  sub_1D5DEEF40(&qword_1EFFB5F08, &qword_1ED9AE458, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E377D0();
  v11 = LOBYTE(v40[0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF4F8);
  LOBYTE(v39[0]) = 4;
  sub_1D5DEDF50();
  sub_1D5E377D0();
  v35 = v11;
  v36 = &v94[432];
  v12 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE478);
  LOBYTE(v39[0]) = 5;
  sub_1D5DEEF40(&qword_1EFFB5F20, &qword_1ED9AE478, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  swift_bridgeObjectRetain();
  sub_1D5E377D0();
  v34 = LOBYTE(v40[0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE588);
  LOBYTE(v39[0]) = 6;
  sub_1D5DEEF40(&qword_1EFFB5F28, &qword_1ED9AE588, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v33 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE498);
  LOBYTE(v39[0]) = 7;
  sub_1D5DEEF40(&qword_1EFFB5F30, &qword_1ED9AE498, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E377D0();
  v32 = LOBYTE(v40[0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE488);
  LOBYTE(v39[0]) = 8;
  sub_1D5DEEF40(&qword_1EFFB5F38, &qword_1ED9AE488, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E377D0();
  v13 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE4E8);
  LOBYTE(v39[0]) = 9;
  sub_1D5DEEF40(&qword_1EFFB5F40, &qword_1ED9AE4E8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v14 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE568);
  LOBYTE(v39[0]) = 10;
  sub_1D5DEEF40(&qword_1EFFB5F48, &qword_1ED9AE568, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v15 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE598);
  LOBYTE(v39[0]) = 11;
  sub_1D5DEEF40(&qword_1EFFB5F50, &qword_1ED9AE598, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v16 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE4D8);
  LOBYTE(v39[0]) = 12;
  sub_1D5DEEF40(&qword_1EFFB5F58, &qword_1ED9AE4D8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v17 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE4C8);
  LOBYTE(v39[0]) = 13;
  sub_1D5DEEF40(&qword_1EFFB5F60, &qword_1ED9AE4C8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v18 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF4C0);
  v77[431] = 14;
  sub_1D5DEEF40(&qword_1EFFB5F68, &qword_1ED9AF4C0, (uint64_t)&unk_1D5E3E24C);
  sub_1D5E377D0();
  memcpy(v77, v78, 0x1AAuLL);
  memcpy(v89, v78, sizeof(v89));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE4F8);
  LOBYTE(v39[0]) = 15;
  sub_1D5E00A10((uint64_t)v77);
  sub_1D5DEEF40(&qword_1EFFB5F70, &qword_1ED9AE4F8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v19 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE508);
  LOBYTE(v39[0]) = 16;
  sub_1D5DEEF40(&qword_1EFFB5F78, &qword_1ED9AE508, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v20 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE468);
  LOBYTE(v39[0]) = 17;
  sub_1D5DEEF40(&qword_1EFFB5F80, &qword_1ED9AE468, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E377D0();
  v31 = LOBYTE(v40[0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE558);
  LOBYTE(v39[0]) = 18;
  sub_1D5DEEF40(&qword_1EFFB5F88, &qword_1ED9AE558, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v30 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE578);
  LOBYTE(v39[0]) = 19;
  sub_1D5DEEF40(&qword_1EFFB5F90, &qword_1ED9AE578, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v21 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF490);
  v75[431] = 20;
  sub_1D5DEEF40(&qword_1EFFB5F98, &qword_1ED9AF490, (uint64_t)&unk_1D5E3E24C);
  sub_1D5E377D0();
  memcpy(v75, v76, 0x1AAuLL);
  memcpy(v85, v76, sizeof(v85));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE518);
  LOBYTE(v39[0]) = 21;
  sub_1D5E00A10((uint64_t)v75);
  sub_1D5DEEF40(&qword_1EFFB5FA0, &qword_1ED9AE518, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v29 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE528);
  LOBYTE(v39[0]) = 22;
  sub_1D5DEEF40(&qword_1EFFB5FA8, &qword_1ED9AE528, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v28 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE538);
  LOBYTE(v39[0]) = 23;
  sub_1D5DEEF40(&qword_1EFFB5FB0, &qword_1ED9AE538, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v27 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE4A8);
  LOBYTE(v39[0]) = 24;
  sub_1D5DEEF40(&qword_1EFFB5FB8, &qword_1ED9AE4A8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  v26 = v40[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AE548);
  v73 = 25;
  sub_1D5DEEF40(&qword_1EFFB5FC0, &qword_1ED9AE548, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E377D0();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v95);
  v95 = v74;
  memcpy(v39, v81, 0x1AAuLL);
  memcpy(&v39[54], v79, 0x1AAuLL);
  v39[108] = v10;
  v22 = v34;
  v23 = v35;
  LOBYTE(v39[109]) = v35;
  v39[110] = v12;
  LOBYTE(v39[111]) = v34;
  v39[112] = v33;
  LOBYTE(v39[113]) = v32;
  BYTE1(v39[113]) = v13;
  v39[114] = v14;
  v39[115] = v15;
  v39[116] = v16;
  v39[117] = v17;
  v39[118] = v18;
  memcpy(&v39[119], v77, 0x1AAuLL);
  v39[173] = v19;
  v39[174] = v20;
  LOBYTE(v39[175]) = v31;
  v39[176] = v30;
  v39[177] = v21;
  memcpy(&v39[178], v75, 0x1AAuLL);
  v39[232] = v29;
  v39[233] = v28;
  v39[234] = v27;
  v39[235] = v26;
  v39[236] = v74;
  sub_1D5DBBE24((uint64_t)v39);
  sub_1D5E00A58((uint64_t)v75);
  sub_1D5E00A58((uint64_t)v77);
  swift_bridgeObjectRelease();
  sub_1D5E00A58((uint64_t)v79);
  sub_1D5E00A58((uint64_t)v81);
  memcpy(v37, v39, 0x768uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  memcpy(v40, v94, 0x360uLL);
  v40[108] = v10;
  v41 = v23;
  *(_DWORD *)v42 = *(_DWORD *)v93;
  *(_DWORD *)&v42[3] = *(_DWORD *)&v93[3];
  v43 = v12;
  v44 = v22;
  *(_DWORD *)v45 = *(_DWORD *)v92;
  *(_DWORD *)&v45[3] = *(_DWORD *)&v92[3];
  v46 = v33;
  v47 = v32;
  v48 = v13;
  v49 = v90;
  v50 = v91;
  v51 = v14;
  v52 = v15;
  v53 = v16;
  v54 = v17;
  v55 = v18;
  memcpy(v56, v89, sizeof(v56));
  v57 = v87;
  v58 = v88;
  v59 = v19;
  v60 = v20;
  v61 = v31;
  *(_DWORD *)v62 = *(_DWORD *)v86;
  *(_DWORD *)&v62[3] = *(_DWORD *)&v86[3];
  v63 = v30;
  v64 = v21;
  memcpy(v65, v85, sizeof(v65));
  v66 = v83;
  v67 = v84;
  v68 = v29;
  v69 = v28;
  v70 = v27;
  v71 = v26;
  v72 = v95;
  return sub_1D5DBE3F4((uint64_t)v40);
}

uint64_t sub_1D5DDA690(uint64_t a1, uint64_t a2)
{
  return sub_1D5DD94B4(a1, a2);
}

uint64_t sub_1D5DDA6A4(_QWORD *a1)
{
  return sub_1D5DD88A0(a1);
}

double sub_1D5DDA6BC()
{
  return 1.0;
}

void sub_1D5DDA6C4(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDA6D0()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*sub_1D5DDA6DC(_QWORD *a1))(double *a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_1D5DDA6F8;
}

uint64_t sub_1D5DDA6F8(double *a1)
{
  return sub_1D5D8A5F4(*a1);
}

double sub_1D5DDA71C()
{
  return 0.0;
}

void sub_1D5DDA724(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DDA72C()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t sub_1D5DDA734(double a1)
{
  return sub_1D5D8A3E0(a1);
}

uint64_t (*sub_1D5DDA754(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return sub_1D5DDA770;
}

uint64_t sub_1D5DDA770(double *a1)
{
  return sub_1D5D8A3E0(*a1);
}

double sub_1D5DDA798()
{
  return 0.0;
}

void sub_1D5DDA7A0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DDA7A8()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t sub_1D5DDA7B0(double a1)
{
  return sub_1D5D8A354(a1);
}

uint64_t (*sub_1D5DDA7D0(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 16);
  return sub_1D5DDA7EC;
}

uint64_t sub_1D5DDA7EC(double *a1)
{
  return sub_1D5D8A354(*a1);
}

double sub_1D5DDA814()
{
  return 1.0;
}

void sub_1D5DDA81C(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDA828()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t sub_1D5DDA830(double a1)
{
  return sub_1D5D8A46C(a1);
}

uint64_t (*sub_1D5DDA850(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 24);
  return sub_1D5DDA86C;
}

uint64_t sub_1D5DDA86C(double *a1)
{
  return sub_1D5D8A46C(*a1);
}

double sub_1D5DDA894@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.04;
  *a1 = xmmword_1D5E3D820;
  a1[1] = xmmword_1D5E3D830;
  return result;
}

double sub_1D5DDA8AC@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.04;
  *a1 = xmmword_1D5E3D820;
  a1[1] = xmmword_1D5E3D830;
  return result;
}

__n128 sub_1D5DDA8C4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 32);
  v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void sub_1D5DDA8D0(double *a1)
{
  sub_1D5D8A884(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DDA8F8(_QWORD *a1))(double **a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DDA938;
}

void sub_1D5DDA938(double **a1, uint64_t a2)
{
  sub_1D5DE834C(a1, a2, sub_1D5D8A884);
}

double sub_1D5DDA944()
{
  return 1.0;
}

void sub_1D5DDA94C(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDA958()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t sub_1D5DDA960(double a1)
{
  return sub_1D5D8A54C(a1);
}

uint64_t (*sub_1D5DDA980(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 64);
  return sub_1D5DDA99C;
}

uint64_t sub_1D5DDA99C(double *a1)
{
  return sub_1D5D8A54C(*a1);
}

double sub_1D5DDA9C4()
{
  return 1.0;
}

void sub_1D5DDA9CC(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDA9D8()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

uint64_t sub_1D5DDA9E0(double a1)
{
  return sub_1D5D8A3C4(a1);
}

uint64_t (*sub_1D5DDAA00(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 72);
  return sub_1D5DDAA1C;
}

uint64_t sub_1D5DDAA1C(double *a1)
{
  return sub_1D5D8A3C4(*a1);
}

double sub_1D5DDAA44()
{
  return 1.0;
}

void sub_1D5DDAA4C(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDAA58()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

uint64_t sub_1D5DDAA60(double a1)
{
  return sub_1D5D8A338(a1);
}

uint64_t (*sub_1D5DDAA80(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 80);
  return sub_1D5DDAA9C;
}

uint64_t sub_1D5DDAA9C(double *a1)
{
  return sub_1D5D8A338(*a1);
}

double sub_1D5DDAAC4()
{
  return 1.0;
}

void sub_1D5DDAACC(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DDAAD8(double a1)
{
  return sub_1D5D8A31C(a1);
}

uint64_t (*sub_1D5DDAAF8(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 88);
  return sub_1D5DDAB14;
}

uint64_t sub_1D5DDAB14(double *a1)
{
  return sub_1D5D8A31C(*a1);
}

uint64_t sub_1D5DDAB3C()
{
  return 0;
}

void sub_1D5DDAB44(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DDAB4C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 96) = result;
  return result;
}

_BYTE *(*sub_1D5DDAB54(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 96);
  return sub_1D5DDAB70;
}

_BYTE *sub_1D5DDAB70(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 96) = result[8];
  return result;
}

double sub_1D5DDAB80()
{
  return 1.0;
}

void sub_1D5DDAB88(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DDAB94(double a1)
{
  return sub_1D5D8A290(a1);
}

uint64_t (*sub_1D5DDABB4(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 104);
  return sub_1D5DDABD0;
}

uint64_t sub_1D5DDABD0(double *a1)
{
  return sub_1D5D8A290(*a1);
}

double sub_1D5DDABF8()
{
  return 1.0;
}

void sub_1D5DDAC00(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DDAC0C(double a1)
{
  return sub_1D5D8A258(a1);
}

uint64_t (*sub_1D5DDAC2C(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 112);
  return sub_1D5DDAC48;
}

uint64_t sub_1D5DDAC48(double *a1)
{
  return sub_1D5D8A258(*a1);
}

double sub_1D5DDAC70()
{
  return 1.0;
}

void sub_1D5DDAC78(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DDAC84(double a1)
{
  return sub_1D5D8A2E4(a1);
}

uint64_t (*sub_1D5DDACA4(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 120);
  return sub_1D5DDACC0;
}

uint64_t sub_1D5DDACC0(double *a1)
{
  return sub_1D5D8A2E4(*a1);
}

double sub_1D5DDACE8()
{
  return 1.0;
}

void sub_1D5DDACF0(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DDACFC(double a1)
{
  return sub_1D5D8A2C8(a1);
}

uint64_t (*sub_1D5DDAD1C(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 128);
  return sub_1D5DDAD38;
}

uint64_t sub_1D5DDAD38(double *a1)
{
  return sub_1D5D8A2C8(*a1);
}

double sub_1D5DDAD60()
{
  return 1.0;
}

void sub_1D5DDAD68(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DDAD74(double a1)
{
  return sub_1D5D8A274(a1);
}

uint64_t (*sub_1D5DDAD94(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 136);
  return sub_1D5DDADB0;
}

uint64_t sub_1D5DDADB0(double *a1)
{
  return sub_1D5D8A274(*a1);
}

double sub_1D5DDADD8()
{
  return 1.0;
}

void sub_1D5DDADE0(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DDADEC(double a1)
{
  return sub_1D5D8A2AC(a1);
}

uint64_t (*sub_1D5DDAE0C(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 144);
  return sub_1D5DDAE28;
}

uint64_t sub_1D5DDAE28(double *a1)
{
  return sub_1D5D8A2AC(*a1);
}

uint64_t sub_1D5DDAE50()
{
  return 1;
}

void sub_1D5DDAE58(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DDAE64()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 152);
}

uint64_t sub_1D5DDAE6C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 152) = result;
  return result;
}

_BYTE *(*sub_1D5DDAE74(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 152);
  return sub_1D5DDAE90;
}

_BYTE *sub_1D5DDAE90(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 152) = result[8];
  return result;
}

double sub_1D5DDAEA0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(v1 + 176);
  result = *(double *)(v1 + 200);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 160);
  *(_QWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 184);
  *(double *)(a1 + 40) = result;
  return result;
}

__n128 sub_1D5DDAEC4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  __int128 v8;
  __n128 result;
  __int128 v10;

  v2 = *(_BYTE *)(v1 + 216);
  v3 = *(_QWORD *)(v1 + 224);
  v4 = *(_BYTE *)(v1 + 232);
  v5 = *(_BYTE *)(v1 + 304);
  v6 = *(_BYTE *)(v1 + 305);
  v7 = *(_BYTE *)(v1 + 306);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 208);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  v8 = *(_OWORD *)(v1 + 256);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 240);
  *(_OWORD *)(a1 + 48) = v8;
  result = *(__n128 *)(v1 + 272);
  v10 = *(_OWORD *)(v1 + 288);
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 96) = v5;
  *(_BYTE *)(a1 + 97) = v6;
  *(_BYTE *)(a1 + 98) = v7;
  return result;
}

double sub_1D5DDAF14()
{
  return 1.0;
}

void sub_1D5DDAF1C(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDAF28()
{
  uint64_t v0;

  return *(double *)(v0 + 312);
}

uint64_t sub_1D5DDAF30(double a1)
{
  return sub_1D5D8A514(a1);
}

uint64_t (*sub_1D5DDAF50(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 312);
  return sub_1D5DDAF6C;
}

uint64_t sub_1D5DDAF6C(double *a1)
{
  return sub_1D5D8A514(*a1);
}

double sub_1D5DDAF94()
{
  return 1.0;
}

void sub_1D5DDAF9C(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDAFA8()
{
  uint64_t v0;

  return *(double *)(v0 + 320);
}

uint64_t sub_1D5DDAFB0(double a1)
{
  return sub_1D5D8A488(a1);
}

uint64_t (*sub_1D5DDAFD0(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 320);
  return sub_1D5DDAFEC;
}

uint64_t sub_1D5DDAFEC(double *a1)
{
  return sub_1D5D8A488(*a1);
}

__n128 sub_1D5DDB014@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 344);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 328);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 360);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

double sub_1D5DDB02C()
{
  return 1.0;
}

void sub_1D5DDB034(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB040()
{
  uint64_t v0;

  return *(double *)(v0 + 376);
}

uint64_t sub_1D5DDB048(double a1)
{
  return sub_1D5D8A584(a1);
}

uint64_t (*sub_1D5DDB068(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 376);
  return sub_1D5DDB084;
}

uint64_t sub_1D5DDB084(double *a1)
{
  return sub_1D5D8A584(*a1);
}

double sub_1D5DDB0AC()
{
  return 1.0;
}

void sub_1D5DDB0B4(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB0C0()
{
  uint64_t v0;

  return *(double *)(v0 + 384);
}

uint64_t sub_1D5DDB0C8(double a1)
{
  return sub_1D5D8A3FC(a1);
}

uint64_t (*sub_1D5DDB0E8(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 384);
  return sub_1D5DDB104;
}

uint64_t sub_1D5DDB104(double *a1)
{
  return sub_1D5D8A3FC(*a1);
}

double sub_1D5DDB12C()
{
  return 1.0;
}

void sub_1D5DDB134(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB140()
{
  uint64_t v0;

  return *(double *)(v0 + 392);
}

uint64_t sub_1D5DDB148(double a1)
{
  return sub_1D5D8A5D8(a1);
}

uint64_t (*sub_1D5DDB168(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 392);
  return sub_1D5DDB184;
}

uint64_t sub_1D5DDB184(double *a1)
{
  return sub_1D5D8A5D8(*a1);
}

uint64_t sub_1D5DDB1AC()
{
  return 1;
}

void sub_1D5DDB1B4(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DDB1C0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 400);
}

uint64_t sub_1D5DDB1C8(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 400) = result;
  return result;
}

_BYTE *(*sub_1D5DDB1D0(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 400);
  return sub_1D5DDB1EC;
}

_BYTE *sub_1D5DDB1EC(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 400) = result[8];
  return result;
}

double sub_1D5DDB1FC()
{
  return 1.0;
}

void sub_1D5DDB204(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB210()
{
  uint64_t v0;

  return *(double *)(v0 + 408);
}

uint64_t sub_1D5DDB218(double a1)
{
  return sub_1D5D8A5BC(a1);
}

uint64_t (*sub_1D5DDB238(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 408);
  return sub_1D5DDB254;
}

uint64_t sub_1D5DDB254(double *a1)
{
  return sub_1D5D8A5BC(*a1);
}

__n128 sub_1D5DDB27C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = *(_OWORD *)(v1 + 560);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 544);
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v1 + 576);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(v1 + 592);
  v3 = *(_OWORD *)(v1 + 496);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 480);
  *(_OWORD *)(a1 + 80) = v3;
  v4 = *(_OWORD *)(v1 + 528);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 512);
  *(_OWORD *)(a1 + 112) = v4;
  v5 = *(_OWORD *)(v1 + 432);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 416);
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v1 + 448);
  v7 = *(_OWORD *)(v1 + 464);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v7;
  return result;
}

__n128 sub_1D5DDB2B8@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 616);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 600);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 632);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 sub_1D5DDB2D0@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 648);
  v3 = *(_OWORD *)(v1 + 664);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

double sub_1D5DDB2E0()
{
  return 0.0;
}

void sub_1D5DDB2E8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DDB2F0()
{
  uint64_t v0;

  return *(double *)(v0 + 680);
}

uint64_t sub_1D5DDB2F8(double a1)
{
  return sub_1D5D8A530(a1);
}

uint64_t (*sub_1D5DDB318(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 680);
  return sub_1D5DDB334;
}

uint64_t sub_1D5DDB334(double *a1)
{
  return sub_1D5D8A530(*a1);
}

double sub_1D5DDB35C()
{
  return 1.0;
}

void sub_1D5DDB364(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB370()
{
  uint64_t v0;

  return *(double *)(v0 + 688);
}

uint64_t sub_1D5DDB378(double a1)
{
  return sub_1D5D8A62C(a1);
}

uint64_t (*sub_1D5DDB398(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 688);
  return sub_1D5DDB3B4;
}

uint64_t sub_1D5DDB3B4(double *a1)
{
  return sub_1D5D8A62C(*a1);
}

double sub_1D5DDB3DC()
{
  return 1.0;
}

void sub_1D5DDB3E4(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB3F0()
{
  uint64_t v0;

  return *(double *)(v0 + 696);
}

uint64_t sub_1D5DDB3F8(double a1)
{
  return sub_1D5D8A370(a1);
}

uint64_t (*sub_1D5DDB418(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 696);
  return sub_1D5DDB434;
}

uint64_t sub_1D5DDB434(double *a1)
{
  return sub_1D5D8A370(*a1);
}

double sub_1D5DDB45C()
{
  return 1.0;
}

void sub_1D5DDB464(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB470()
{
  uint64_t v0;

  return *(double *)(v0 + 704);
}

uint64_t sub_1D5DDB478(double a1)
{
  return sub_1D5D8A4F8(a1);
}

uint64_t (*sub_1D5DDB498(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 704);
  return sub_1D5DDB4B4;
}

uint64_t sub_1D5DDB4B4(double *a1)
{
  return sub_1D5D8A4F8(*a1);
}

uint64_t sub_1D5DDB4DC()
{
  return 0;
}

void sub_1D5DDB4E4(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DDB4EC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 712);
}

uint64_t sub_1D5DDB4F4(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 712) = result;
  return result;
}

_BYTE *(*sub_1D5DDB4FC(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 712);
  return sub_1D5DDB518;
}

_BYTE *sub_1D5DDB518(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 712) = result[8];
  return result;
}

double sub_1D5DDB528()
{
  return 1.0;
}

void sub_1D5DDB530(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB53C()
{
  uint64_t v0;

  return *(double *)(v0 + 720);
}

uint64_t sub_1D5DDB544(double a1)
{
  return sub_1D5D8A610(a1);
}

uint64_t (*sub_1D5DDB564(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 720);
  return sub_1D5DDB580;
}

uint64_t sub_1D5DDB580(double *a1)
{
  return sub_1D5D8A610(*a1);
}

double sub_1D5DDB5A8()
{
  return 1.0;
}

void sub_1D5DDB5B0(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB5BC()
{
  uint64_t v0;

  return *(double *)(v0 + 728);
}

uint64_t sub_1D5DDB5C4(double a1)
{
  return sub_1D5D8A4DC(a1);
}

uint64_t (*sub_1D5DDB5E4(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 728);
  return sub_1D5DDB600;
}

uint64_t sub_1D5DDB600(double *a1)
{
  return sub_1D5D8A4DC(*a1);
}

double sub_1D5DDB628()
{
  return 1.0;
}

void sub_1D5DDB630(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB63C()
{
  uint64_t v0;

  return *(double *)(v0 + 736);
}

uint64_t sub_1D5DDB644(double a1)
{
  return sub_1D5D8A434(a1);
}

uint64_t (*sub_1D5DDB664(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 736);
  return sub_1D5DDB680;
}

uint64_t sub_1D5DDB680(double *a1)
{
  return sub_1D5D8A434(*a1);
}

double sub_1D5DDB6A8()
{
  return 1.0;
}

void sub_1D5DDB6B0(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB6BC()
{
  uint64_t v0;

  return *(double *)(v0 + 744);
}

uint64_t sub_1D5DDB6C4(double a1)
{
  return sub_1D5D8A300(a1);
}

uint64_t (*sub_1D5DDB6E4(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 744);
  return sub_1D5DDB700;
}

uint64_t sub_1D5DDB700(double *a1)
{
  return sub_1D5D8A300(*a1);
}

double sub_1D5DDB728()
{
  return 1.0;
}

void sub_1D5DDB730(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB73C()
{
  uint64_t v0;

  return *(double *)(v0 + 752);
}

uint64_t sub_1D5DDB744(double a1)
{
  return sub_1D5D8A4C0(a1);
}

uint64_t (*sub_1D5DDB764(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 752);
  return sub_1D5DDB780;
}

uint64_t sub_1D5DDB780(double *a1)
{
  return sub_1D5D8A4C0(*a1);
}

double sub_1D5DDB7A8()
{
  return 1.0;
}

void sub_1D5DDB7B0(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB7BC()
{
  uint64_t v0;

  return *(double *)(v0 + 760);
}

uint64_t sub_1D5DDB7C4(double a1)
{
  return sub_1D5D8A3A8(a1);
}

uint64_t (*sub_1D5DDB7E4(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 760);
  return sub_1D5DDB800;
}

uint64_t sub_1D5DDB800(double *a1)
{
  return sub_1D5D8A3A8(*a1);
}

double sub_1D5DDB828()
{
  return 1.0;
}

void sub_1D5DDB830(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB83C()
{
  uint64_t v0;

  return *(double *)(v0 + 768);
}

uint64_t sub_1D5DDB844(double a1)
{
  return sub_1D5D8A5A0(a1);
}

uint64_t (*sub_1D5DDB864(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 768);
  return sub_1D5DDB880;
}

uint64_t sub_1D5DDB880(double *a1)
{
  return sub_1D5D8A5A0(*a1);
}

double sub_1D5DDB8A8()
{
  return 1.0;
}

void sub_1D5DDB8B0(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB8BC()
{
  uint64_t v0;

  return *(double *)(v0 + 776);
}

uint64_t sub_1D5DDB8C4(double a1)
{
  return sub_1D5D8A38C(a1);
}

uint64_t (*sub_1D5DDB8E4(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 776);
  return sub_1D5DDB900;
}

uint64_t sub_1D5DDB900(double *a1)
{
  return sub_1D5D8A38C(*a1);
}

double sub_1D5DDB928()
{
  return 1.0;
}

void sub_1D5DDB930(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DDB93C()
{
  uint64_t v0;

  return *(double *)(v0 + 784);
}

uint64_t sub_1D5DDB944(double a1)
{
  return sub_1D5D8A418(a1);
}

uint64_t (*sub_1D5DDB964(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 784);
  return sub_1D5DDB980;
}

uint64_t sub_1D5DDB980(double *a1)
{
  return sub_1D5D8A418(*a1);
}

double sub_1D5DDB9A8()
{
  return 0.0;
}

void sub_1D5DDB9B0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DDB9B8()
{
  uint64_t v0;

  return *(double *)(v0 + 792);
}

uint64_t sub_1D5DDB9C0(double a1)
{
  return sub_1D5D8A450(a1);
}

uint64_t (*sub_1D5DDB9E0(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 792);
  return sub_1D5DDB9FC;
}

uint64_t sub_1D5DDB9FC(double *a1)
{
  return sub_1D5D8A450(*a1);
}

double sub_1D5DDBA24()
{
  return 0.0;
}

void sub_1D5DDBA2C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DDBA34()
{
  uint64_t v0;

  return *(double *)(v0 + 800);
}

uint64_t sub_1D5DDBA3C(double a1)
{
  return sub_1D5D8AABC(a1);
}

uint64_t (*sub_1D5DDBA5C(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 800);
  return sub_1D5DDBA78;
}

uint64_t sub_1D5DDBA78(double *a1)
{
  return sub_1D5D8AABC(*a1);
}

double sub_1D5DDBAA0()
{
  return 0.0;
}

void sub_1D5DDBAA8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DDBAB0()
{
  uint64_t v0;

  return *(double *)(v0 + 808);
}

uint64_t sub_1D5DDBAB8(double a1)
{
  return sub_1D5D8A4A4(a1);
}

uint64_t (*sub_1D5DDBAD8(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 808);
  return sub_1D5DDBAF4;
}

uint64_t sub_1D5DDBAF4(double *a1)
{
  return sub_1D5D8A4A4(*a1);
}

double sub_1D5DDBB1C@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.1;
  *a1 = xmmword_1D5E3D840;
  a1[1] = xmmword_1D5E3D850;
  return result;
}

double sub_1D5DDBB34@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.1;
  *a1 = xmmword_1D5E3D840;
  a1[1] = xmmword_1D5E3D850;
  return result;
}

__n128 sub_1D5DDBB4C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 816);
  v3 = *(_OWORD *)(v1 + 832);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void sub_1D5DDBB58(double *a1)
{
  sub_1D5D8A648(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DDBB80(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 832);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 816);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DDBBC0;
}

void sub_1D5DDBBC0(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5D8A648(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

double sub_1D5DDBBF4()
{
  return 0.0;
}

void sub_1D5DDBBFC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DDBC04()
{
  uint64_t v0;

  return *(double *)(v0 + 848);
}

uint64_t sub_1D5DDBC0C(double a1)
{
  return sub_1D5D8A568(a1);
}

uint64_t (*sub_1D5DDBC2C(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 848);
  return sub_1D5DDBC48;
}

uint64_t sub_1D5DDBC48(double *a1)
{
  return sub_1D5D8A568(*a1);
}

__n128 sub_1D5DDBC70@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 872);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 856);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 888);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 sub_1D5DDBC88@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  __int128 v8;
  __n128 result;
  __int128 v10;

  v2 = *(_BYTE *)(v1 + 912);
  v3 = *(_QWORD *)(v1 + 920);
  v4 = *(_BYTE *)(v1 + 928);
  v5 = *(_BYTE *)(v1 + 1000);
  v6 = *(_BYTE *)(v1 + 1001);
  v7 = *(_BYTE *)(v1 + 1002);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 904);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  v8 = *(_OWORD *)(v1 + 952);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 936);
  *(_OWORD *)(a1 + 48) = v8;
  result = *(__n128 *)(v1 + 968);
  v10 = *(_OWORD *)(v1 + 984);
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 96) = v5;
  *(_BYTE *)(a1 + 97) = v6;
  *(_BYTE *)(a1 + 98) = v7;
  return result;
}

BOOL sub_1D5DDBCF4(double *a1, double *a2)
{
  return sub_1D5DED6F4(a1, a2);
}

uint64_t sub_1D5DDBD0C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DDBD4C + 4 * word_1D5E3D9F8[a1]))(0x69746C754D666E61, 0xED00007265696C70);
}

unint64_t sub_1D5DDBD4C()
{
  return 0xD000000000000020;
}

unint64_t sub_1D5DDC140()
{
  return 0xD00000000000001FLL;
}

unint64_t sub_1D5DDC158()
{
  return 0xD00000000000001ELL;
}

unint64_t sub_1D5DDC170()
{
  return 0xD000000000000029;
}

unint64_t sub_1D5DDC18C()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1D5DDC1A4()
{
  return 0xD000000000000021;
}

unint64_t sub_1D5DDC1BC()
{
  return 0xD000000000000014;
}

unint64_t sub_1D5DDC1D4()
{
  return 0xD000000000000025;
}

void sub_1D5DDC1F0()
{
  JUMPOUT(0x1D5DDC204);
}

uint64_t sub_1D5DDC218()
{
  unsigned __int8 *v0;

  return sub_1D5DDBD0C(*v0);
}

uint64_t sub_1D5DDC220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFCA18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DDC244()
{
  return 0;
}

void sub_1D5DDC250(_BYTE *a1@<X8>)
{
  *a1 = 51;
}

uint64_t sub_1D5DDC25C()
{
  sub_1D5DEDFD4();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DDC284()
{
  sub_1D5DEDFD4();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DDC2AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  int v166;
  char v167;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5FC8);
  v139 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = *(_QWORD *)v1;
  v138 = *(_QWORD *)(v1 + 8);
  v135 = *(_QWORD *)(v1 + 16);
  v134 = *(_QWORD *)(v1 + 24);
  v133 = *(_QWORD *)(v1 + 32);
  v132 = *(_QWORD *)(v1 + 40);
  v131 = *(_QWORD *)(v1 + 48);
  v130 = *(_QWORD *)(v1 + 56);
  v129 = *(_QWORD *)(v1 + 64);
  v128 = *(_QWORD *)(v1 + 72);
  v127 = *(_QWORD *)(v1 + 80);
  v126 = *(_QWORD *)(v1 + 88);
  LODWORD(v137) = *(unsigned __int8 *)(v1 + 96);
  v125 = *(_QWORD *)(v1 + 104);
  v124 = *(_QWORD *)(v1 + 112);
  v123 = *(_QWORD *)(v1 + 120);
  v122 = *(_QWORD *)(v1 + 128);
  v121 = *(_QWORD *)(v1 + 136);
  v120 = *(_QWORD *)(v1 + 144);
  v166 = *(unsigned __int8 *)(v1 + 152);
  v7 = *(_QWORD *)(v1 + 160);
  v72 = *(_QWORD *)(v1 + 168);
  v73 = v7;
  v59 = *(_QWORD *)(v1 + 176);
  v8 = *(_QWORD *)(v1 + 184);
  v70 = *(_QWORD *)(v1 + 192);
  v71 = v8;
  v69 = *(_QWORD *)(v1 + 200);
  v9 = *(_QWORD *)(v1 + 208);
  v62 = *(unsigned __int8 *)(v1 + 216);
  v80 = *(_QWORD *)(v1 + 224);
  v81 = v9;
  v68 = *(unsigned __int8 *)(v1 + 232);
  v10 = *(_QWORD *)(v1 + 240);
  v78 = *(_QWORD *)(v1 + 248);
  v79 = v10;
  v11 = *(_QWORD *)(v1 + 256);
  v76 = *(_QWORD *)(v1 + 264);
  v77 = v11;
  v12 = *(_OWORD *)(v1 + 560);
  v162 = *(_OWORD *)(v1 + 544);
  v163 = v12;
  v164 = *(_OWORD *)(v1 + 576);
  v13 = *(_OWORD *)(v1 + 496);
  v158 = *(_OWORD *)(v1 + 480);
  v159 = v13;
  v14 = *(_OWORD *)(v1 + 528);
  v160 = *(_OWORD *)(v1 + 512);
  v161 = v14;
  v15 = *(_OWORD *)(v1 + 432);
  v154 = *(_OWORD *)(v1 + 416);
  v155 = v15;
  v16 = *(_OWORD *)(v1 + 464);
  v156 = *(_OWORD *)(v1 + 448);
  v157 = v16;
  v17 = *(_QWORD *)(v1 + 280);
  *(_QWORD *)&v63 = *(_QWORD *)(v1 + 272);
  *((_QWORD *)&v63 + 1) = v17;
  LODWORD(v5) = *(unsigned __int8 *)(v1 + 305);
  v64 = *(unsigned __int8 *)(v1 + 304);
  v65 = v5;
  v66 = *(unsigned __int8 *)(v1 + 306);
  v18 = *(unsigned __int8 *)(v1 + 400);
  v165 = *(_QWORD *)(v1 + 592);
  LODWORD(v5) = *(unsigned __int8 *)(v1 + 712);
  v74 = v18;
  v75 = v5;
  v119 = *(unsigned __int8 *)(v1 + 912);
  v136 = *(unsigned __int8 *)(v1 + 928);
  v118 = *(unsigned __int8 *)(v1 + 1000);
  v19 = *(unsigned __int8 *)(v1 + 1001);
  v20 = *(unsigned __int8 *)(v1 + 1002);
  v21 = a1[3];
  v22 = *(_QWORD *)(v1 + 296);
  *(_QWORD *)&v60 = *(_QWORD *)(v1 + 288);
  *((_QWORD *)&v60 + 1) = v22;
  v61 = *(_QWORD *)(v1 + 312);
  v67 = *(_QWORD *)(v1 + 320);
  v23 = *(_QWORD *)(v1 + 336);
  *(_QWORD *)&v82 = *(_QWORD *)(v1 + 328);
  *((_QWORD *)&v82 + 1) = v23;
  v24 = *(_QWORD *)(v1 + 352);
  *(_QWORD *)&v83 = *(_QWORD *)(v1 + 344);
  *((_QWORD *)&v83 + 1) = v24;
  v25 = *(_QWORD *)(v1 + 368);
  *(_QWORD *)&v84 = *(_QWORD *)(v1 + 360);
  *((_QWORD *)&v84 + 1) = v25;
  v26 = *(_QWORD *)(v1 + 384);
  v85 = *(_QWORD *)(v1 + 376);
  v86 = v26;
  v27 = *(_QWORD *)(v1 + 408);
  v87 = *(_QWORD *)(v1 + 392);
  v88 = v27;
  v28 = *(_QWORD *)(v1 + 608);
  *(_QWORD *)&v89 = *(_QWORD *)(v1 + 600);
  *((_QWORD *)&v89 + 1) = v28;
  v29 = *(_QWORD *)(v1 + 624);
  *(_QWORD *)&v90 = *(_QWORD *)(v1 + 616);
  *((_QWORD *)&v90 + 1) = v29;
  v30 = *(_QWORD *)(v1 + 640);
  *(_QWORD *)&v91 = *(_QWORD *)(v1 + 632);
  *((_QWORD *)&v91 + 1) = v30;
  v31 = *(_QWORD *)(v1 + 656);
  *(_QWORD *)&v92 = *(_QWORD *)(v1 + 648);
  *((_QWORD *)&v92 + 1) = v31;
  v32 = *(_QWORD *)(v1 + 672);
  *(_QWORD *)&v93 = *(_QWORD *)(v1 + 664);
  *((_QWORD *)&v93 + 1) = v32;
  v33 = *(_QWORD *)(v1 + 688);
  v94 = *(_QWORD *)(v1 + 680);
  v95 = v33;
  v34 = *(_QWORD *)(v1 + 704);
  v96 = *(_QWORD *)(v1 + 696);
  v97 = v34;
  v35 = *(_QWORD *)(v1 + 728);
  v98 = *(_QWORD *)(v1 + 720);
  v99 = v35;
  v36 = *(_QWORD *)(v1 + 744);
  v100 = *(_QWORD *)(v1 + 736);
  v101 = v36;
  v37 = *(_QWORD *)(v1 + 760);
  v102 = *(_QWORD *)(v1 + 752);
  v103 = v37;
  v38 = *(_QWORD *)(v1 + 776);
  v104 = *(_QWORD *)(v1 + 768);
  v105 = v38;
  v39 = *(_QWORD *)(v1 + 792);
  v106 = *(_QWORD *)(v1 + 784);
  v107 = v39;
  v40 = *(_QWORD *)(v1 + 808);
  v108 = *(_QWORD *)(v1 + 800);
  v109 = v40;
  v41 = *(_QWORD *)(v1 + 824);
  *(_QWORD *)&v110 = *(_QWORD *)(v1 + 816);
  *((_QWORD *)&v110 + 1) = v41;
  v42 = *(_QWORD *)(v1 + 840);
  *(_QWORD *)&v111 = *(_QWORD *)(v1 + 832);
  *((_QWORD *)&v111 + 1) = v42;
  v112 = *(_QWORD *)(v1 + 848);
  v113 = *(_OWORD *)(v1 + 856);
  v114 = *(_OWORD *)(v1 + 872);
  v115 = *(_OWORD *)(v1 + 888);
  v116 = *(_QWORD *)(v1 + 904);
  v117 = *(_QWORD *)(v1 + 920);
  v43 = *(_QWORD *)(v1 + 936);
  v44 = *(_QWORD *)(v1 + 944);
  v45 = *(_QWORD *)(v1 + 952);
  v46 = *(_QWORD *)(v1 + 960);
  v47 = *(_QWORD *)(v1 + 968);
  v48 = *(_QWORD *)(v1 + 976);
  v49 = *(_QWORD *)(v1 + 984);
  v50 = *(_QWORD *)(v1 + 992);
  __swift_project_boxed_opaque_existential_1(a1, v21);
  sub_1D5DEDFD4();
  sub_1D5E379F8();
  *(_QWORD *)&v142 = v141;
  v167 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5FD8);
  sub_1D5DEEF40(&qword_1EFFB5FE0, &qword_1EFFB5FD8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  v141 = v3;
  v51 = v6;
  v52 = v140;
  sub_1D5E3789C();
  if (v52)
    return (*(uint64_t (**)(char *, uint64_t))(v139 + 8))(v6, v141);
  v54 = v137;
  v55 = v166;
  HIDWORD(v58) = v20;
  LODWORD(v140) = v19;
  v56 = v136;
  v57 = v139;
  *(_QWORD *)&v142 = v138;
  v167 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5FE8);
  sub_1D5DEEF40(&qword_1EFFB5FF0, &qword_1EFFB5FE8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v135;
  v167 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5FF8);
  sub_1D5DEEF40(&qword_1EFFB6000, &qword_1EFFB5FF8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v134;
  v167 = 3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6008);
  sub_1D5DEEF40(&qword_1EFFB6010, &qword_1EFFB6008, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v133;
  *((_QWORD *)&v142 + 1) = v132;
  *(_QWORD *)&v143 = v131;
  *((_QWORD *)&v143 + 1) = v130;
  v167 = 4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6018);
  sub_1D5DEEF40(&qword_1EFFB6020, &qword_1EFFB6018, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v129;
  v167 = 5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6028);
  sub_1D5DEEF40(&qword_1EFFB6030, &qword_1EFFB6028, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v128;
  v167 = 6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6038);
  sub_1D5DEEF40(&qword_1EFFB6040, &qword_1EFFB6038, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v127;
  v167 = 7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6048);
  sub_1D5DEEF40(&qword_1EFFB6050, &qword_1EFFB6048, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v126;
  v167 = 8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6058);
  sub_1D5DEEF40(&qword_1EFFB6060, &qword_1EFFB6058, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  LOBYTE(v142) = v54;
  v167 = 9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6068);
  sub_1D5DEEF40(&qword_1EFFB6070, &qword_1EFFB6068, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v125;
  v167 = 10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6078);
  sub_1D5DEEF40(&qword_1EFFB6080, &qword_1EFFB6078, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v124;
  v167 = 11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6088);
  sub_1D5DEEF40(&qword_1EFFB6090, &qword_1EFFB6088, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v123;
  v167 = 12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6098);
  sub_1D5DEEF40(&qword_1EFFB60A0, &qword_1EFFB6098, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v122;
  v167 = 13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB60A8);
  sub_1D5DEEF40(&qword_1EFFB60B0, &qword_1EFFB60A8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v121;
  v167 = 14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB60B8);
  sub_1D5DEEF40(&qword_1EFFB60C0, &qword_1EFFB60B8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v120;
  v167 = 15;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB60C8);
  sub_1D5DEEF40(&qword_1EFFB60D0, &qword_1EFFB60C8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  LOBYTE(v142) = v55;
  v167 = 16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB60D8);
  sub_1D5DEEF40(&qword_1EFFB60E0, &qword_1EFFB60D8, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v73;
  *((_QWORD *)&v142 + 1) = v72;
  *(_QWORD *)&v143 = v59;
  *((_QWORD *)&v143 + 1) = v71;
  *(_QWORD *)&v144 = v70;
  *((_QWORD *)&v144 + 1) = v69;
  v167 = 17;
  sub_1D5DEE018();
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v81;
  BYTE8(v142) = v62;
  *(_QWORD *)&v143 = v80;
  BYTE8(v143) = v68;
  *(_QWORD *)&v144 = v79;
  *((_QWORD *)&v144 + 1) = v78;
  *(_QWORD *)&v145 = v77;
  *((_QWORD *)&v145 + 1) = v76;
  v146 = v63;
  v147 = v60;
  LOBYTE(v148) = v64;
  BYTE1(v148) = v65;
  BYTE2(v148) = v66;
  v167 = 18;
  v138 = sub_1D5DEE05C();
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v61;
  v167 = 19;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB60F8);
  sub_1D5DEEF40(&qword_1EFFB6100, &qword_1EFFB60F8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v67;
  v167 = 20;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6108);
  sub_1D5DEEF40(&qword_1EFFB6110, &qword_1EFFB6108, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v142 = v82;
  v143 = v83;
  v144 = v84;
  v167 = 21;
  v137 = sub_1D5DEE0A0();
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v85;
  v167 = 22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6120);
  sub_1D5DEEF40(&qword_1EFFB6128, &qword_1EFFB6120, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v86;
  v167 = 23;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6130);
  sub_1D5DEEF40(&qword_1EFFB6138, &qword_1EFFB6130, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v87;
  v167 = 24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6140);
  sub_1D5DEEF40(&qword_1EFFB6148, &qword_1EFFB6140, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  LOBYTE(v142) = v74;
  v167 = 25;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6150);
  sub_1D5DEEF40(&qword_1EFFB6158, &qword_1EFFB6150, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v88;
  v167 = 26;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6160);
  sub_1D5DEEF40(&qword_1EFFB6168, &qword_1EFFB6160, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v150 = v162;
  v151 = v163;
  v152 = v164;
  v153 = v165;
  v146 = v158;
  v147 = v159;
  v148 = v160;
  v149 = v161;
  v142 = v154;
  v143 = v155;
  v144 = v156;
  v145 = v157;
  v167 = 27;
  sub_1D5DEE0E4();
  sub_1D5E3789C();
  v142 = v89;
  v143 = v90;
  v144 = v91;
  v167 = 28;
  sub_1D5E3789C();
  v142 = v92;
  v143 = v93;
  v167 = 29;
  sub_1D5DEE128();
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v94;
  v167 = 30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6180);
  sub_1D5DEEF40(&qword_1EFFB6188, &qword_1EFFB6180, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v95;
  v167 = 31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6190);
  sub_1D5DEEF40(&qword_1EFFB6198, &qword_1EFFB6190, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v96;
  v167 = 32;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB61A0);
  sub_1D5DEEF40(&qword_1EFFB61A8, &qword_1EFFB61A0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v97;
  v167 = 33;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB61B0);
  sub_1D5DEEF40(&qword_1EFFB61B8, &qword_1EFFB61B0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  LOBYTE(v142) = v75;
  v167 = 34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB61C0);
  sub_1D5DEEF40(&qword_1EFFB61C8, &qword_1EFFB61C0, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v98;
  v167 = 35;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB61D0);
  sub_1D5DEEF40(&qword_1EFFB61D8, &qword_1EFFB61D0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v99;
  v167 = 36;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB61E0);
  sub_1D5DEEF40(&qword_1EFFB61E8, &qword_1EFFB61E0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v100;
  v167 = 37;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB61F0);
  sub_1D5DEEF40(&qword_1EFFB61F8, &qword_1EFFB61F0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v101;
  v167 = 38;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6200);
  sub_1D5DEEF40(&qword_1EFFB6208, &qword_1EFFB6200, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v102;
  v167 = 39;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6210);
  sub_1D5DEEF40(&qword_1EFFB6218, &qword_1EFFB6210, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v103;
  v167 = 40;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6220);
  sub_1D5DEEF40(&qword_1EFFB6228, &qword_1EFFB6220, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v104;
  v167 = 41;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6230);
  sub_1D5DEEF40(&qword_1EFFB6238, &qword_1EFFB6230, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v105;
  v167 = 42;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6240);
  sub_1D5DEEF40(&qword_1EFFB6248, &qword_1EFFB6240, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v106;
  v167 = 43;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6250);
  sub_1D5DEEF40(&qword_1EFFB6258, &qword_1EFFB6250, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v107;
  v167 = 44;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6260);
  sub_1D5DEEF40(&qword_1EFFB6268, &qword_1EFFB6260, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v108;
  v167 = 45;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6270);
  sub_1D5DEEF40(&qword_1EFFB6278, &qword_1EFFB6270, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v109;
  v167 = 46;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6280);
  sub_1D5DEEF40(&qword_1EFFB6288, &qword_1EFFB6280, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v142 = v110;
  v143 = v111;
  v167 = 47;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6290);
  sub_1D5DEEF40(&qword_1EFFB6298, &qword_1EFFB6290, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v112;
  v167 = 48;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB62A0);
  sub_1D5DEEF40(&qword_1EFFB62A8, &qword_1EFFB62A0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v142 = v113;
  v143 = v114;
  v144 = v115;
  v167 = 49;
  sub_1D5E3789C();
  *(_QWORD *)&v142 = v116;
  BYTE8(v142) = v119;
  *(_QWORD *)&v143 = v117;
  BYTE8(v143) = v56;
  *(_QWORD *)&v144 = v43;
  *((_QWORD *)&v144 + 1) = v44;
  *(_QWORD *)&v145 = v45;
  *((_QWORD *)&v145 + 1) = v46;
  *(_QWORD *)&v146 = v47;
  *((_QWORD *)&v146 + 1) = v48;
  *(_QWORD *)&v147 = v49;
  *((_QWORD *)&v147 + 1) = v50;
  LOBYTE(v148) = v118;
  BYTE1(v148) = v140;
  BYTE2(v148) = BYTE4(v58);
  v167 = 50;
  sub_1D5E3789C();
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v51, v141);
}

uint64_t sub_1D5DDDB6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  char v142;
  char v143;
  char v144;
  char v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  char v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;

  v171 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB62B0);
  v5 = *(_QWORD *)(v171 - 8);
  MEMORY[0x1E0C80A78](v171, v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEDFD4();
  sub_1D5E379E0();
  if (!v2)
  {
    v133 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5FD8);
    LOBYTE(v146) = 0;
    sub_1D5DEEF40(&qword_1EFFB62B8, &qword_1EFFB5FD8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v9 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5FE8);
    LOBYTE(v146) = 1;
    sub_1D5DEEF40(&qword_1EFFB62C0, &qword_1EFFB5FE8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v10 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5FF8);
    LOBYTE(v146) = 2;
    sub_1D5DEEF40(&qword_1EFFB62C8, &qword_1EFFB5FF8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v11 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6008);
    LOBYTE(v146) = 3;
    sub_1D5DEEF40(&qword_1EFFB62D0, &qword_1EFFB6008, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v12 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6018);
    LOBYTE(v146) = 4;
    sub_1D5DEEF40(&qword_1EFFB62D8, &qword_1EFFB6018, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v13 = v159;
    v14 = v160;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6028);
    LOBYTE(v146) = 5;
    sub_1D5DEEF40(&qword_1EFFB62E0, &qword_1EFFB6028, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v132 = v13;
    v15 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6038);
    LOBYTE(v146) = 6;
    sub_1D5DEEF40(&qword_1EFFB62E8, &qword_1EFFB6038, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v131 = v15;
    v16 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6048);
    LOBYTE(v146) = 7;
    sub_1D5DEEF40(&qword_1EFFB62F0, &qword_1EFFB6048, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v130 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6058);
    LOBYTE(v146) = 8;
    sub_1D5DEEF40(&qword_1EFFB62F8, &qword_1EFFB6058, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v129 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6068);
    LOBYTE(v146) = 9;
    sub_1D5DEEF40(&qword_1EFFB6300, &qword_1EFFB6068, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v17 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6078);
    LOBYTE(v146) = 10;
    sub_1D5DEEF40(&qword_1EFFB6308, &qword_1EFFB6078, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v128 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6088);
    LOBYTE(v146) = 11;
    sub_1D5DEEF40(&qword_1EFFB6310, &qword_1EFFB6088, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v127 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6098);
    LOBYTE(v146) = 12;
    sub_1D5DEEF40(&qword_1EFFB6318, &qword_1EFFB6098, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v126 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB60A8);
    LOBYTE(v146) = 13;
    sub_1D5DEEF40(&qword_1EFFB6320, &qword_1EFFB60A8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v125 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB60B8);
    LOBYTE(v146) = 14;
    sub_1D5DEEF40(&qword_1EFFB6328, &qword_1EFFB60B8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v124 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB60C8);
    LOBYTE(v146) = 15;
    sub_1D5DEEF40(&qword_1EFFB6330, &qword_1EFFB60C8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v123 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB60D8);
    LOBYTE(v146) = 16;
    sub_1D5DEEF40(&qword_1EFFB6338, &qword_1EFFB60D8, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v18 = v159;
    LOBYTE(v146) = 17;
    sub_1D5DEE16C();
    sub_1D5E377D0();
    v120 = *((_QWORD *)&v159 + 1);
    v121 = v159;
    v119 = *((_QWORD *)&v160 + 1);
    v122 = v160;
    v117 = *((_QWORD *)&v161 + 1);
    v118 = v161;
    LOBYTE(v146) = 18;
    v116 = sub_1D5DEE1B0();
    sub_1D5E377D0();
    v115 = BYTE8(v159);
    v109 = v160;
    v110 = v159;
    v114 = BYTE8(v160);
    v107 = *((_QWORD *)&v161 + 1);
    v108 = v161;
    v105 = *((_QWORD *)&v162 + 1);
    v106 = v162;
    v103 = *((_QWORD *)&v163 + 1);
    v104 = v163;
    v101 = *((_QWORD *)&v164 + 1);
    v102 = v164;
    v113 = v165;
    v112 = BYTE1(v165);
    v111 = BYTE2(v165);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB60F8);
    LOBYTE(v146) = 19;
    sub_1D5DEEF40(&qword_1EFFB6350, &qword_1EFFB60F8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v100 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6108);
    LOBYTE(v146) = 20;
    sub_1D5DEEF40(&qword_1EFFB6358, &qword_1EFFB6108, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v98 = v159;
    LOBYTE(v146) = 21;
    v99 = sub_1D5DEE1F4();
    sub_1D5E377D0();
    v96 = *((_QWORD *)&v159 + 1);
    v97 = v159;
    v94 = *((_QWORD *)&v160 + 1);
    v95 = v160;
    v92 = *((_QWORD *)&v161 + 1);
    v93 = v161;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6120);
    LOBYTE(v146) = 22;
    sub_1D5DEEF40(&qword_1EFFB6368, &qword_1EFFB6120, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v91 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6130);
    LOBYTE(v146) = 23;
    sub_1D5DEEF40(&qword_1EFFB6370, &qword_1EFFB6130, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v90 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6140);
    LOBYTE(v146) = 24;
    sub_1D5DEEF40(&qword_1EFFB6378, &qword_1EFFB6140, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v89 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6150);
    LOBYTE(v146) = 25;
    sub_1D5DEEF40(&qword_1EFFB6380, &qword_1EFFB6150, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v88 = v159;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6160);
    LOBYTE(v146) = 26;
    sub_1D5DEEF40(&qword_1EFFB6388, &qword_1EFFB6160, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v87 = v159;
    v158 = 27;
    sub_1D5DEE238();
    sub_1D5E377D0();
    v154 = v167;
    v155 = v168;
    v156 = v169;
    v157 = v170;
    v150 = v163;
    v151 = v164;
    v152 = v165;
    v153 = v166;
    v146 = v159;
    v147 = v160;
    v148 = v161;
    v149 = v162;
    v145 = 28;
    sub_1D5E377D0();
    v84 = v135;
    v85 = v134;
    v82 = v137;
    v83 = v136;
    v86 = *((_QWORD *)&v138 + 1);
    v81 = v138;
    v145 = 29;
    sub_1D5DEE27C();
    sub_1D5E377D0();
    v79 = v136;
    v80 = v135;
    v77 = v134;
    v78 = v137;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6180);
    v145 = 30;
    sub_1D5DEEF40(&qword_1EFFB63A0, &qword_1EFFB6180, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v76 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6190);
    v145 = 31;
    sub_1D5DEEF40(&qword_1EFFB63A8, &qword_1EFFB6190, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v75 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB61A0);
    v145 = 32;
    sub_1D5DEEF40(&qword_1EFFB63B0, &qword_1EFFB61A0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v74 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB61B0);
    v145 = 33;
    sub_1D5DEEF40(&qword_1EFFB63B8, &qword_1EFFB61B0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v73 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB61C0);
    v145 = 34;
    sub_1D5DEEF40(&qword_1EFFB63C0, &qword_1EFFB61C0, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v72 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB61D0);
    v145 = 35;
    sub_1D5DEEF40(&qword_1EFFB63C8, &qword_1EFFB61D0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v71 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB61E0);
    v145 = 36;
    sub_1D5DEEF40(&qword_1EFFB63D0, &qword_1EFFB61E0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v70 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB61F0);
    v145 = 37;
    sub_1D5DEEF40(&qword_1EFFB63D8, &qword_1EFFB61F0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v69 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6200);
    v145 = 38;
    sub_1D5DEEF40(&qword_1EFFB63E0, &qword_1EFFB6200, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v68 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6210);
    v145 = 39;
    sub_1D5DEEF40(&qword_1EFFB63E8, &qword_1EFFB6210, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v67 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6220);
    v145 = 40;
    sub_1D5DEEF40(&qword_1EFFB63F0, &qword_1EFFB6220, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v66 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6230);
    v145 = 41;
    sub_1D5DEEF40(&qword_1EFFB63F8, &qword_1EFFB6230, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v65 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6240);
    v145 = 42;
    sub_1D5DEEF40(&qword_1EFFB6400, &qword_1EFFB6240, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v64 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6250);
    v145 = 43;
    sub_1D5DEEF40(&qword_1EFFB6408, &qword_1EFFB6250, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v63 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6260);
    v145 = 44;
    sub_1D5DEEF40(&qword_1EFFB6410, &qword_1EFFB6260, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v62 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6270);
    v145 = 45;
    sub_1D5DEEF40(&qword_1EFFB6418, &qword_1EFFB6270, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v61 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6280);
    v145 = 46;
    sub_1D5DEEF40(&qword_1EFFB6420, &qword_1EFFB6280, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v60 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6290);
    v145 = 47;
    sub_1D5DEEF40(&qword_1EFFB6428, &qword_1EFFB6290, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v58 = v135;
    v59 = v134;
    v56 = v137;
    v57 = v136;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB62A0);
    v145 = 48;
    sub_1D5DEEF40(&qword_1EFFB6430, &qword_1EFFB62A0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v55 = v134;
    v145 = 49;
    sub_1D5E377D0();
    v99 = v134;
    v53 = v136;
    v54 = v135;
    v51 = v138;
    v52 = v137;
    v50 = *((_QWORD *)&v138 + 1);
    v145 = 50;
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v133 + 8))(v8, v171);
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 32) = v132;
    *(_QWORD *)(a2 + 40) = *((_QWORD *)&v13 + 1);
    *(_OWORD *)(a2 + 48) = v14;
    *(_QWORD *)(a2 + 64) = v131;
    *(_QWORD *)(a2 + 72) = v16;
    v20 = v129;
    *(_QWORD *)(a2 + 80) = v130;
    *(_QWORD *)(a2 + 88) = v20;
    v21 = v127;
    *(_QWORD *)(a2 + 104) = v128;
    *(_QWORD *)(a2 + 112) = v21;
    v22 = v125;
    *(_QWORD *)(a2 + 120) = v126;
    *(_QWORD *)(a2 + 128) = v22;
    v23 = v123;
    *(_QWORD *)(a2 + 136) = v124;
    *(_QWORD *)(a2 + 144) = v23;
    v24 = v120;
    *(_QWORD *)(a2 + 160) = v121;
    *(_QWORD *)(a2 + 168) = v24;
    v25 = v118;
    *(_QWORD *)(a2 + 184) = v119;
    *(_QWORD *)(a2 + 192) = v25;
    v26 = v110;
    *(_QWORD *)(a2 + 200) = v117;
    *(_QWORD *)(a2 + 208) = v26;
    *(_QWORD *)(a2 + 224) = v109;
    v27 = v107;
    *(_QWORD *)(a2 + 240) = v108;
    *(_QWORD *)(a2 + 248) = v27;
    v28 = v105;
    *(_QWORD *)(a2 + 256) = v106;
    *(_QWORD *)(a2 + 264) = v28;
    v29 = v103;
    *(_QWORD *)(a2 + 272) = v104;
    *(_QWORD *)(a2 + 280) = v29;
    v30 = v101;
    *(_QWORD *)(a2 + 288) = v102;
    *(_QWORD *)(a2 + 296) = v30;
    v31 = v98;
    *(_QWORD *)(a2 + 312) = v100;
    *(_QWORD *)(a2 + 320) = v31;
    v32 = v96;
    *(_QWORD *)(a2 + 328) = v97;
    *(_QWORD *)(a2 + 336) = v32;
    v33 = v94;
    *(_QWORD *)(a2 + 344) = v95;
    *(_QWORD *)(a2 + 352) = v33;
    v34 = v92;
    *(_QWORD *)(a2 + 360) = v93;
    *(_QWORD *)(a2 + 368) = v34;
    v35 = v90;
    *(_QWORD *)(a2 + 376) = v91;
    *(_QWORD *)(a2 + 384) = v35;
    *(_QWORD *)(a2 + 392) = v89;
    *(_QWORD *)(a2 + 408) = v87;
    *(_QWORD *)(a2 + 600) = v85;
    *(_QWORD *)(a2 + 608) = v84;
    *(_QWORD *)(a2 + 616) = v83;
    *(_QWORD *)(a2 + 624) = v82;
    *(_QWORD *)(a2 + 632) = v81;
    v36 = v155;
    *(_OWORD *)(a2 + 544) = v154;
    *(_OWORD *)(a2 + 560) = v36;
    *(_OWORD *)(a2 + 576) = v156;
    v37 = v151;
    *(_OWORD *)(a2 + 480) = v150;
    *(_OWORD *)(a2 + 496) = v37;
    v38 = v153;
    *(_OWORD *)(a2 + 512) = v152;
    *(_OWORD *)(a2 + 528) = v38;
    v39 = v147;
    *(_OWORD *)(a2 + 416) = v146;
    *(_OWORD *)(a2 + 432) = v39;
    v40 = v149;
    *(_OWORD *)(a2 + 448) = v148;
    *(_OWORD *)(a2 + 464) = v40;
    *(_QWORD *)(a2 + 640) = v86;
    v41 = v134;
    v42 = v135;
    *(_QWORD *)(a2 + 648) = v77;
    *(_QWORD *)&v40 = v136;
    v43 = v137;
    v44 = v142;
    v45 = v143;
    v46 = v144;
    *(_QWORD *)(a2 + 592) = v157;
    *(_BYTE *)(a2 + 96) = v17;
    *(_BYTE *)(a2 + 152) = v18;
    *(_QWORD *)(a2 + 176) = v122;
    *(_BYTE *)(a2 + 216) = v115;
    *(_BYTE *)(a2 + 232) = v114;
    *(_BYTE *)(a2 + 304) = v113;
    *(_BYTE *)(a2 + 305) = v112;
    *(_BYTE *)(a2 + 306) = v111;
    *(_BYTE *)(a2 + 400) = v88;
    *(_QWORD *)(a2 + 656) = v80;
    *(_QWORD *)(a2 + 664) = v79;
    *(_QWORD *)(a2 + 672) = v78;
    *(_QWORD *)(a2 + 680) = v76;
    *(_QWORD *)(a2 + 688) = v75;
    *(_QWORD *)(a2 + 696) = v74;
    *(_QWORD *)(a2 + 704) = v73;
    *(_BYTE *)(a2 + 712) = v72;
    *(_QWORD *)(a2 + 720) = v71;
    *(_QWORD *)(a2 + 728) = v70;
    *(_QWORD *)(a2 + 736) = v69;
    *(_QWORD *)(a2 + 744) = v68;
    *(_QWORD *)(a2 + 752) = v67;
    *(_QWORD *)(a2 + 760) = v66;
    *(_QWORD *)(a2 + 768) = v65;
    *(_QWORD *)(a2 + 776) = v64;
    *(_QWORD *)(a2 + 784) = v63;
    *(_QWORD *)(a2 + 792) = v62;
    *(_QWORD *)(a2 + 800) = v61;
    *(_QWORD *)(a2 + 808) = v60;
    *(_QWORD *)(a2 + 816) = v59;
    *(_QWORD *)(a2 + 824) = v58;
    *(_QWORD *)(a2 + 832) = v57;
    *(_QWORD *)(a2 + 840) = v56;
    *(_QWORD *)(a2 + 848) = v55;
    *(_QWORD *)(a2 + 856) = v99;
    *(_QWORD *)(a2 + 864) = v54;
    *(_QWORD *)(a2 + 872) = v53;
    *(_QWORD *)(a2 + 880) = v52;
    *(_QWORD *)(a2 + 888) = v51;
    *(_QWORD *)(a2 + 896) = v50;
    *(_QWORD *)(a2 + 904) = v41;
    *(_BYTE *)(a2 + 912) = v42;
    *(_QWORD *)(a2 + 920) = v40;
    *(_BYTE *)(a2 + 928) = v43;
    v47 = v139;
    *(_OWORD *)(a2 + 936) = v138;
    *(_OWORD *)(a2 + 952) = v47;
    v48 = v141;
    *(_OWORD *)(a2 + 968) = v140;
    *(_OWORD *)(a2 + 984) = v48;
    *(_BYTE *)(a2 + 1000) = v44;
    *(_BYTE *)(a2 + 1001) = v45;
    *(_BYTE *)(a2 + 1002) = v46;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DDF488@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D5DDDB6C(a1, a2);
}

uint64_t sub_1D5DDF49C(_QWORD *a1)
{
  return sub_1D5DDC2AC(a1);
}

double sub_1D5DDF4B4()
{
  uint64_t v0;

  return *(double *)v0;
}

double sub_1D5DDF4BC()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double sub_1D5DDF4C4()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double sub_1D5DDF4CC()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

BOOL sub_1D5DDF4D4(double *a1, double *a2)
{
  return sub_1D5DED6F4(a1, a2);
}

uint64_t sub_1D5DDF4EC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D5DDF524 + 4 * byte_1D5E3DA5E[a1]))(0xD000000000000014, 0x80000001D5E4AC60);
}

uint64_t sub_1D5DDF524(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_1D5DDF560()
{
  unsigned __int8 *v0;

  return sub_1D5DDF4EC(*v0);
}

uint64_t sub_1D5DDF568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFDC0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DDF58C()
{
  return 0;
}

void sub_1D5DDF598(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1D5DDF5A4()
{
  sub_1D5DEE2C0();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DDF5CC()
{
  sub_1D5DEE2C0();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DDF5F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6438);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE2C0();
  sub_1D5E379F8();
  v9[15] = 0;
  sub_1D5E37884();
  if (!v1)
  {
    v9[14] = 1;
    sub_1D5E37884();
    v9[13] = 2;
    sub_1D5E37884();
    v9[12] = 3;
    sub_1D5E37884();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1D5DDF76C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6448);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE2C0();
  sub_1D5E379E0();
  if (!v2)
  {
    v23 = 0;
    sub_1D5E377B8();
    v11 = v10;
    v22 = 1;
    sub_1D5E377B8();
    v13 = v12;
    v21 = 2;
    sub_1D5E377B8();
    v16 = v15;
    v20 = 3;
    sub_1D5E377B8();
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *a2 = v11;
    a2[1] = v13;
    a2[2] = v16;
    a2[3] = v18;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DDF918@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DDF76C(a1, a2);
}

uint64_t sub_1D5DDF92C(_QWORD *a1)
{
  return sub_1D5DDF5F4(a1);
}

BOOL sub_1D5DDF940(double *a1, double *a2)
{
  return sub_1D5DED6F4(a1, a2);
}

double sub_1D5DDF958()
{
  return 0.0;
}

void sub_1D5DDF960(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DDF968()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*sub_1D5DDF974(_QWORD *a1))(double *a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_1D5DDF990;
}

uint64_t sub_1D5DDF990(double *a1)
{
  return sub_1D5D89EF8(*a1);
}

double sub_1D5DDF9B4()
{
  return 1.0;
}

void sub_1D5DDF9BC(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DDF9C8(double a1)
{
  return sub_1D5D89F14(a1);
}

uint64_t (*sub_1D5DDF9E8(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return sub_1D5DDFA04;
}

uint64_t sub_1D5DDFA04(double *a1)
{
  return sub_1D5D89F14(*a1);
}

uint64_t sub_1D5DDFA2C()
{
  return 50;
}

void sub_1D5DDFA34(_QWORD *a1@<X8>)
{
  *a1 = 50;
}

uint64_t sub_1D5DDFA40()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1D5DDFA48(uint64_t a1)
{
  return sub_1D5D89D48(a1);
}

uint64_t (*sub_1D5DDFA68(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v1;
  return sub_1D5DDFA80;
}

uint64_t sub_1D5DDFA80(uint64_t *a1)
{
  return sub_1D5D89D48(*a1);
}

double sub_1D5DDFAA4()
{
  return 1.0;
}

void sub_1D5DDFAAC(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DDFAB8(double a1)
{
  return sub_1D5D89D10(a1);
}

uint64_t (*sub_1D5DDFAD8(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 24);
  return sub_1D5DDFAF4;
}

uint64_t sub_1D5DDFAF4(double *a1)
{
  return sub_1D5D89D10(*a1);
}

double sub_1D5DDFB1C()
{
  return 1.0;
}

void sub_1D5DDFB24(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DDFB30(double a1)
{
  return sub_1D5D89D2C(a1);
}

uint64_t (*sub_1D5DDFB50(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 32);
  return sub_1D5DDFB6C;
}

uint64_t sub_1D5DDFB6C(double *a1)
{
  return sub_1D5D89D2C(*a1);
}

double sub_1D5DDFB94()
{
  return 0.0;
}

void sub_1D5DDFB9C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DDFBA4(double a1)
{
  return sub_1D5D89CF4(a1);
}

uint64_t (*sub_1D5DDFBC4(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 40);
  return sub_1D5DDFBE0;
}

uint64_t sub_1D5DDFBE0(double *a1)
{
  return sub_1D5D89CF4(*a1);
}

uint64_t sub_1D5DDFC08(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D5DDFC44 + 4 * byte_1D5E3DA62[a1]))(0xD000000000000013, 0x80000001D5E4ACE0);
}

uint64_t sub_1D5DDFC44()
{
  return 0x65706D614478616DLL;
}

uint64_t sub_1D5DDFC64()
{
  return 0x746E65764578616DLL;
}

uint64_t sub_1D5DDFC88()
{
  return 0x65726F63536E696DLL;
}

uint64_t sub_1D5DDFCAC()
{
  return 0x70784565726F6373;
}

unint64_t sub_1D5DDFCD0()
{
  return 0xD000000000000011;
}

uint64_t sub_1D5DDFCF4()
{
  unsigned __int8 *v0;

  return sub_1D5DDFC08(*v0);
}

uint64_t sub_1D5DDFCFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFDDA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DDFD20()
{
  return 0;
}

void sub_1D5DDFD2C(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1D5DDFD38()
{
  sub_1D5DEE304();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DDFD60()
{
  sub_1D5DEE304();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DDFD88(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6450);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v9 = v1[1];
  v11 = v1[2];
  v13 = v1[3];
  v12 = v1[4];
  v14 = v1[5];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE304();
  sub_1D5E379F8();
  v17 = v10;
  HIBYTE(v16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6460);
  sub_1D5DEEF40(&qword_1EFFB6468, &qword_1EFFB6460, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  if (!v2)
  {
    v17 = v9;
    HIBYTE(v16) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6470);
    sub_1D5DEEF40(&qword_1EFFB6478, &qword_1EFFB6470, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v17 = v11;
    HIBYTE(v16) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6480);
    sub_1D5DEEF40(&qword_1EFFB6488, &qword_1EFFB6480, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v17 = v13;
    HIBYTE(v16) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6490);
    sub_1D5DEEF40(&qword_1EFFB6498, &qword_1EFFB6490, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v17 = v12;
    HIBYTE(v16) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB64A0);
    sub_1D5DEEF40(&qword_1EFFB64A8, &qword_1EFFB64A0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v17 = v14;
    HIBYTE(v16) = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB64B0);
    sub_1D5DEEF40(&qword_1EFFB64B8, &qword_1EFFB64B0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DE00B8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB64C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE304();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6460);
    v18 = 0;
    sub_1D5DEEF40(&qword_1EFFB64C8, &qword_1EFFB6460, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v10 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6470);
    v18 = 1;
    sub_1D5DEEF40(&qword_1EFFB64D0, &qword_1EFFB6470, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v11 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6480);
    v18 = 2;
    sub_1D5DEEF40(&qword_1EFFB64D8, &qword_1EFFB6480, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v12 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6490);
    v18 = 3;
    sub_1D5DEEF40(&qword_1EFFB64E0, &qword_1EFFB6490, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v13 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB64A0);
    v18 = 4;
    sub_1D5DEEF40(&qword_1EFFB64E8, &qword_1EFFB64A0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v15 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB64B0);
    v18 = 5;
    sub_1D5DEEF40(&qword_1EFFB64F0, &qword_1EFFB64B0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v16 = v19;
    *a2 = v10;
    a2[1] = v11;
    a2[2] = v12;
    a2[3] = v13;
    a2[4] = v15;
    a2[5] = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DE0428@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DE00B8(a1, a2);
}

uint64_t sub_1D5DE043C(_QWORD *a1)
{
  return sub_1D5DDFD88(a1);
}

double sub_1D5DE0454()
{
  return 0.05;
}

void sub_1D5DE0460(_QWORD *a1@<X8>)
{
  *a1 = 0x3FA999999999999ALL;
}

void (*sub_1D5DE0478(_QWORD *a1))(double *a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_1D5DE0494;
}

void sub_1D5DE0494(double *a1)
{
  sub_1D5D874F4(*a1);
}

uint64_t sub_1D5DE04B8()
{
  return 0;
}

void sub_1D5DE04C0(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DE04C8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t sub_1D5DE04D0(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

_BYTE *(*sub_1D5DE04D8(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 8);
  return sub_1D5DE04F4;
}

_BYTE *sub_1D5DE04F4(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 8) = result[8];
  return result;
}

double sub_1D5DE0504()
{
  return 1.0;
}

void sub_1D5DE050C(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DE0518()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t sub_1D5DE0520(double a1)
{
  return sub_1D5D876E4(a1);
}

uint64_t (*sub_1D5DE0540(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 16);
  return sub_1D5DE055C;
}

uint64_t sub_1D5DE055C(double *a1)
{
  return sub_1D5D876E4(*a1);
}

uint64_t sub_1D5DE0584()
{
  return 0;
}

void sub_1D5DE058C(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DE0594()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_1D5DE059C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

_BYTE *(*sub_1D5DE05A4(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 24);
  return sub_1D5DE05C0;
}

_BYTE *sub_1D5DE05C0(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 24) = result[8];
  return result;
}

double sub_1D5DE05D0()
{
  return 1.0;
}

void sub_1D5DE05D8(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DE05E4()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

uint64_t sub_1D5DE05EC(double a1)
{
  return sub_1D5D872E0(a1);
}

uint64_t (*sub_1D5DE060C(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 32);
  return sub_1D5DE0628;
}

uint64_t sub_1D5DE0628(double *a1)
{
  return sub_1D5D872E0(*a1);
}

double sub_1D5DE0650()
{
  return 0.2;
}

void sub_1D5DE065C(_QWORD *a1@<X8>)
{
  *a1 = 0x3FC999999999999ALL;
}

double sub_1D5DE0670()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

uint64_t sub_1D5DE0678(double a1)
{
  return sub_1D5D878E4(a1);
}

uint64_t (*sub_1D5DE0698(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 40);
  return sub_1D5DE06B4;
}

uint64_t sub_1D5DE06B4(double *a1)
{
  return sub_1D5D878E4(*a1);
}

double sub_1D5DE06DC()
{
  return 5.0;
}

void sub_1D5DE06E4(_QWORD *a1@<X8>)
{
  *a1 = 0x4014000000000000;
}

double sub_1D5DE06F0()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void sub_1D5DE06F8(double a1)
{
  sub_1D5D87334(a1);
}

void (*sub_1D5DE0718(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 48);
  return sub_1D5DE0734;
}

void sub_1D5DE0734(double *a1)
{
  sub_1D5D87334(*a1);
}

double sub_1D5DE075C()
{
  return 0.0;
}

void sub_1D5DE0764(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DE076C()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

uint64_t sub_1D5DE0774(double a1)
{
  return sub_1D5D872C4(a1);
}

uint64_t (*sub_1D5DE0794(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 56);
  return sub_1D5DE07B0;
}

uint64_t sub_1D5DE07B0(double *a1)
{
  return sub_1D5D872C4(*a1);
}

double sub_1D5DE07D8()
{
  return 0.0;
}

void sub_1D5DE07E0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DE07E8()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t sub_1D5DE07F0(double a1)
{
  return sub_1D5D87700(a1);
}

uint64_t (*sub_1D5DE0810(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 64);
  return sub_1D5DE082C;
}

uint64_t sub_1D5DE082C(double *a1)
{
  return sub_1D5D87700(*a1);
}

double sub_1D5DE0854()
{
  return 2.0;
}

void sub_1D5DE085C(_QWORD *a1@<X8>)
{
  *a1 = 0x4000000000000000;
}

double sub_1D5DE0868()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

uint64_t sub_1D5DE0870(double a1)
{
  return sub_1D5D872FC(a1);
}

uint64_t (*sub_1D5DE0890(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 72);
  return sub_1D5DE08AC;
}

uint64_t sub_1D5DE08AC(double *a1)
{
  return sub_1D5D872FC(*a1);
}

double sub_1D5DE08D4()
{
  return 2.0;
}

void sub_1D5DE08DC(_QWORD *a1@<X8>)
{
  *a1 = 0x4000000000000000;
}

double sub_1D5DE08E8()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

uint64_t sub_1D5DE08F0(double a1)
{
  return sub_1D5D87318(a1);
}

uint64_t (*sub_1D5DE0910(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 80);
  return sub_1D5DE092C;
}

uint64_t sub_1D5DE092C(double *a1)
{
  return sub_1D5D87318(*a1);
}

double sub_1D5DE0954()
{
  return 0.3;
}

void sub_1D5DE0964(_QWORD *a1@<X8>)
{
  *a1 = 0x3FD3333333333333;
}

double sub_1D5DE0974()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

uint64_t sub_1D5DE097C(double a1)
{
  return sub_1D5D876C8(a1);
}

uint64_t (*sub_1D5DE099C(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 88);
  return sub_1D5DE09B8;
}

uint64_t sub_1D5DE09B8(double *a1)
{
  return sub_1D5D876C8(*a1);
}

uint64_t sub_1D5DE09E0()
{
  return 1;
}

void sub_1D5DE09E8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DE09F4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t sub_1D5DE09FC(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 96) = result;
  return result;
}

_BYTE *(*sub_1D5DE0A04(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 96);
  return sub_1D5E00B00;
}

uint64_t sub_1D5DE0A20()
{
  return 0;
}

void sub_1D5DE0A28(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DE0A30()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 97);
}

uint64_t sub_1D5DE0A38(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 97) = result;
  return result;
}

_BYTE *(*sub_1D5DE0A40(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 97);
  return sub_1D5DE0A5C;
}

_BYTE *sub_1D5DE0A5C(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 97) = result[8];
  return result;
}

uint64_t sub_1D5DE0A6C()
{
  return 0;
}

void sub_1D5DE0A74(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DE0A7C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 98);
}

uint64_t sub_1D5DE0A84(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 98) = result;
  return result;
}

_BYTE *(*sub_1D5DE0A8C(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 98);
  return sub_1D5DE0AA8;
}

_BYTE *sub_1D5DE0AA8(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 98) = result[8];
  return result;
}

uint64_t sub_1D5DE0AB8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D5DE0AF4 + 4 * byte_1D5E3DA68[a1]))(0xD000000000000012, 0x80000001D5E4AD20);
}

uint64_t sub_1D5DE0AF4()
{
  uint64_t v0;

  return v0 + 12;
}

uint64_t sub_1D5DE0C38()
{
  unsigned __int8 *v0;

  return sub_1D5DE0AB8(*v0);
}

uint64_t sub_1D5DE0C40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFE09C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DE0C64()
{
  return 0;
}

void sub_1D5DE0C70(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_1D5DE0C7C()
{
  sub_1D5DEE348();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DE0CA4()
{
  sub_1D5DEE348();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DE0CCC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB64F8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v29 = *((unsigned __int8 *)v1 + 8);
  v28 = v1[2];
  v27 = *((unsigned __int8 *)v1 + 24);
  v10 = v1[5];
  v26 = v1[4];
  v12 = v1[6];
  v11 = v1[7];
  v14 = v1[8];
  v13 = v1[9];
  v16 = v1[10];
  v15 = v1[11];
  v17 = *((unsigned __int8 *)v1 + 96);
  v24 = *((unsigned __int8 *)v1 + 97);
  v25 = v17;
  v18 = *((unsigned __int8 *)v1 + 98);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE348();
  v19 = v4;
  sub_1D5E379F8();
  v31 = v9;
  v30 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6508);
  sub_1D5DEEF40(&qword_1EFFB6510, &qword_1EFFB6508, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v20 = v28;
  v21 = v27;
  HIDWORD(v23) = v18;
  LOBYTE(v31) = v29;
  v30 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6518);
  sub_1D5DEEF40(&qword_1EFFB6520, &qword_1EFFB6518, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  v31 = v20;
  v30 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6528);
  sub_1D5DEEF40(&qword_1EFFB6530, &qword_1EFFB6528, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  LOBYTE(v31) = v21;
  v30 = 3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6538);
  sub_1D5DEEF40(&qword_1EFFB6540, &qword_1EFFB6538, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  v31 = v26;
  v30 = 4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6548);
  sub_1D5DEEF40(&qword_1EFFB6550, &qword_1EFFB6548, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v31 = v10;
  v30 = 5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6558);
  sub_1D5DEEF40(&qword_1EFFB6560, &qword_1EFFB6558, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v31 = v12;
  v30 = 6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6568);
  sub_1D5DEEF40(&qword_1EFFB6570, &qword_1EFFB6568, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v31 = v11;
  v30 = 7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6578);
  sub_1D5DEEF40(&qword_1EFFB6580, &qword_1EFFB6578, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v31 = v14;
  v30 = 8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6588);
  sub_1D5DEEF40(&qword_1EFFB6590, &qword_1EFFB6588, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v31 = v13;
  v30 = 9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6598);
  sub_1D5DEEF40(&qword_1EFFB65A0, &qword_1EFFB6598, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v31 = v16;
  v30 = 10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB65A8);
  sub_1D5DEEF40(&qword_1EFFB65B0, &qword_1EFFB65A8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v31 = v15;
  v30 = 11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB65B8);
  sub_1D5DEEF40(&qword_1EFFB65C0, &qword_1EFFB65B8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  LOBYTE(v31) = v25;
  v30 = 12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB65C8);
  sub_1D5DEEF40(&qword_1EFFB65D0, &qword_1EFFB65C8, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  LOBYTE(v31) = v24;
  v30 = 13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB65D8);
  sub_1D5DEEF40(&qword_1EFFB65E0, &qword_1EFFB65D8, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  LOBYTE(v31) = BYTE4(v23);
  v30 = 14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB65E8);
  sub_1D5DEEF40(&qword_1EFFB65F0, &qword_1EFFB65E8, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v19);
}

uint64_t sub_1D5DE13E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char v29;
  uint64_t v30;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB65F8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE348();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6508);
    v29 = 0;
    sub_1D5DEEF40(&qword_1EFFB6600, &qword_1EFFB6508, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v10 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6518);
    v29 = 1;
    sub_1D5DEEF40(&qword_1EFFB6608, &qword_1EFFB6518, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v11 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6528);
    v29 = 2;
    sub_1D5DEEF40(&qword_1EFFB6610, &qword_1EFFB6528, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v12 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6538);
    v29 = 3;
    sub_1D5DEEF40(&qword_1EFFB6618, &qword_1EFFB6538, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v28 = v11;
    v13 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6548);
    v29 = 4;
    sub_1D5DEEF40(&qword_1EFFB6620, &qword_1EFFB6548, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v27 = v13;
    v14 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6558);
    v29 = 5;
    sub_1D5DEEF40(&qword_1EFFB6628, &qword_1EFFB6558, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v15 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6568);
    v29 = 6;
    sub_1D5DEEF40(&qword_1EFFB6630, &qword_1EFFB6568, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v16 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6578);
    v29 = 7;
    sub_1D5DEEF40(&qword_1EFFB6638, &qword_1EFFB6578, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v17 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6588);
    v29 = 8;
    sub_1D5DEEF40(&qword_1EFFB6640, &qword_1EFFB6588, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v18 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6598);
    v29 = 9;
    sub_1D5DEEF40(&qword_1EFFB6648, &qword_1EFFB6598, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v19 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB65A8);
    v29 = 10;
    sub_1D5DEEF40(&qword_1EFFB6650, &qword_1EFFB65A8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v26 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB65B8);
    v29 = 11;
    sub_1D5DEEF40(&qword_1EFFB6658, &qword_1EFFB65B8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v25 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB65C8);
    v29 = 12;
    sub_1D5DEEF40(&qword_1EFFB6660, &qword_1EFFB65C8, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    LOBYTE(v13) = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB65D8);
    v29 = 13;
    sub_1D5DEEF40(&qword_1EFFB6668, &qword_1EFFB65D8, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v24 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB65E8);
    v29 = 14;
    sub_1D5DEEF40(&qword_1EFFB6670, &qword_1EFFB65E8, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v21 = v30;
    *(_QWORD *)a2 = v10;
    *(_BYTE *)(a2 + 8) = v28;
    *(_QWORD *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 24) = v27;
    *(_QWORD *)(a2 + 32) = v14;
    *(_QWORD *)(a2 + 40) = v15;
    *(_QWORD *)(a2 + 48) = v16;
    *(_QWORD *)(a2 + 56) = v17;
    *(_QWORD *)(a2 + 64) = v18;
    *(_QWORD *)(a2 + 72) = v19;
    v22 = v25;
    *(_QWORD *)(a2 + 80) = v26;
    *(_QWORD *)(a2 + 88) = v22;
    *(_BYTE *)(a2 + 96) = v13;
    *(_BYTE *)(a2 + 97) = v24;
    *(_BYTE *)(a2 + 98) = v21;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DE1B28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D5DE13E0(a1, a2);
}

uint64_t sub_1D5DE1B3C(_QWORD *a1)
{
  return sub_1D5DE0CCC(a1);
}

double sub_1D5DE1B54()
{
  return 1.1;
}

void sub_1D5DE1B60(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF199999999999ALL;
}

double sub_1D5DE1B74()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*sub_1D5DE1B80(_QWORD *a1))(double *a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_1D5DE1B9C;
}

uint64_t sub_1D5DE1B9C(double *a1)
{
  return sub_1D5D7B178(*a1);
}

double sub_1D5DE1BC0()
{
  return 1.1;
}

void sub_1D5DE1BCC(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF199999999999ALL;
}

double sub_1D5DE1BE0()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t sub_1D5DE1BE8(double a1)
{
  return sub_1D5D7B124(a1);
}

uint64_t (*sub_1D5DE1C08(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return sub_1D5DE1C24;
}

uint64_t sub_1D5DE1C24(double *a1)
{
  return sub_1D5D7B124(*a1);
}

double sub_1D5DE1C4C()
{
  return 1.1;
}

void sub_1D5DE1C58(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF199999999999ALL;
}

double sub_1D5DE1C6C()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t sub_1D5DE1C74(double a1)
{
  return sub_1D5D7B108(a1);
}

uint64_t (*sub_1D5DE1C94(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 16);
  return sub_1D5DE1CB0;
}

uint64_t sub_1D5DE1CB0(double *a1)
{
  return sub_1D5D7B108(*a1);
}

double sub_1D5DE1CD8()
{
  return 0.0;
}

void sub_1D5DE1CE0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DE1CE8()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t sub_1D5DE1CF0(double a1)
{
  return sub_1D5D7B0EC(a1);
}

uint64_t (*sub_1D5DE1D10(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 24);
  return sub_1D5DE1D2C;
}

uint64_t sub_1D5DE1D2C(double *a1)
{
  return sub_1D5D7B0EC(*a1);
}

double sub_1D5DE1D54()
{
  return 1.0;
}

void sub_1D5DE1D5C(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DE1D68()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

uint64_t sub_1D5DE1D70(double a1)
{
  return sub_1D5D7B140(a1);
}

uint64_t (*sub_1D5DE1D90(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 32);
  return sub_1D5DE1DAC;
}

uint64_t sub_1D5DE1DAC(double *a1)
{
  return sub_1D5D7B140(*a1);
}

double sub_1D5DE1DD4()
{
  return 1.1;
}

void sub_1D5DE1DE0(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF199999999999ALL;
}

double sub_1D5DE1DF4()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

uint64_t sub_1D5DE1DFC(double a1)
{
  return sub_1D5D7B15C(a1);
}

uint64_t (*sub_1D5DE1E1C(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 40);
  return sub_1D5DE1E38;
}

uint64_t sub_1D5DE1E38(double *a1)
{
  return sub_1D5D7B15C(*a1);
}

uint64_t sub_1D5DE1E60(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DE1EA0 + 4 * byte_1D5E3DA77[a1]))(0x6C754D6F69647561, 0xEF7265696C706974);
}

unint64_t sub_1D5DE1EA0()
{
  return 0xD000000000000014;
}

unint64_t sub_1D5DE1EC8()
{
  return 0xD000000000000015;
}

uint64_t sub_1D5DE1F20()
{
  unsigned __int8 *v0;

  return sub_1D5DE1E60(*v0);
}

uint64_t sub_1D5DE1F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFE6D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DE1F4C()
{
  return 0;
}

void sub_1D5DE1F58(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1D5DE1F64()
{
  sub_1D5DEE38C();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DE1F8C()
{
  sub_1D5DEE38C();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DE1FB4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6678);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v9 = v1[1];
  v12 = v1[2];
  v11 = v1[3];
  v14 = v1[4];
  v13 = v1[5];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE38C();
  sub_1D5E379F8();
  v17 = v10;
  HIBYTE(v16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6688);
  sub_1D5DEEF40(&qword_1EFFB6690, &qword_1EFFB6688, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  if (!v2)
  {
    v17 = v9;
    HIBYTE(v16) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6698);
    sub_1D5DEEF40(&qword_1EFFB66A0, &qword_1EFFB6698, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v17 = v12;
    HIBYTE(v16) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB66A8);
    sub_1D5DEEF40(&qword_1EFFB66B0, &qword_1EFFB66A8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v17 = v11;
    HIBYTE(v16) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB66B8);
    sub_1D5DEEF40(&qword_1EFFB66C0, &qword_1EFFB66B8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v17 = v14;
    HIBYTE(v16) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB66C8);
    sub_1D5DEEF40(&qword_1EFFB66D0, &qword_1EFFB66C8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v17 = v13;
    HIBYTE(v16) = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB66D8);
    sub_1D5DEEF40(&qword_1EFFB66E0, &qword_1EFFB66D8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DE22D8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB66E8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE38C();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6688);
    HIBYTE(v17) = 0;
    sub_1D5DEEF40(&qword_1EFFB66F0, &qword_1EFFB6688, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v10 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6698);
    HIBYTE(v17) = 1;
    sub_1D5DEEF40(&qword_1EFFB66F8, &qword_1EFFB6698, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v11 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB66A8);
    HIBYTE(v17) = 2;
    sub_1D5DEEF40(&qword_1EFFB6700, &qword_1EFFB66A8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v12 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB66B8);
    HIBYTE(v17) = 3;
    sub_1D5DEEF40(&qword_1EFFB6708, &qword_1EFFB66B8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v13 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB66C8);
    HIBYTE(v17) = 4;
    sub_1D5DEEF40(&qword_1EFFB6710, &qword_1EFFB66C8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v15 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB66D8);
    HIBYTE(v17) = 5;
    sub_1D5DEEF40(&qword_1EFFB6718, &qword_1EFFB66D8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v16 = v18;
    *a2 = v10;
    a2[1] = v11;
    a2[2] = v12;
    a2[3] = v13;
    a2[4] = v15;
    a2[5] = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DE264C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DE22D8(a1, a2);
}

uint64_t sub_1D5DE2660(_QWORD *a1)
{
  return sub_1D5DE1FB4(a1);
}

uint64_t sub_1D5DE2678()
{
  return 0;
}

void sub_1D5DE2680(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DE2688()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_1D5DE2690(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*sub_1D5DE2698(uint64_t a1))(uint64_t result)
{
  _BYTE *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1;
  return sub_1D5DE26B4;
}

uint64_t sub_1D5DE26B4(uint64_t result)
{
  **(_BYTE **)result = *(_BYTE *)(result + 8);
  return result;
}

double sub_1D5DE26C4()
{
  return 0.0;
}

void sub_1D5DE26CC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DE26D4()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t sub_1D5DE26DC(double a1)
{
  return sub_1D5D8A204(a1);
}

uint64_t (*sub_1D5DE26FC(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return sub_1D5DE2718;
}

uint64_t sub_1D5DE2718(double *a1)
{
  return sub_1D5D8A204(*a1);
}

double sub_1D5DE2740()
{
  return 0.0;
}

void sub_1D5DE2748(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DE2750()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t sub_1D5DE2758(double a1)
{
  return sub_1D5D8A220(a1);
}

uint64_t (*sub_1D5DE2778(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 16);
  return sub_1D5DE2794;
}

uint64_t sub_1D5DE2794(double *a1)
{
  return sub_1D5D8A220(*a1);
}

double sub_1D5DE27BC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1D5DE27D0()
{
  return 1;
}

void sub_1D5DE27D8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DE27E4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t sub_1D5DE27EC(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

_BYTE *(*sub_1D5DE27F4(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 48);
  return sub_1D5DE2810;
}

_BYTE *sub_1D5DE2810(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 48) = result[8];
  return result;
}

double sub_1D5DE2820@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 72);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 56);
  *(double *)(a1 + 16) = result;
  return result;
}

double sub_1D5DE2834()
{
  return 0.5;
}

void sub_1D5DE283C(_QWORD *a1@<X8>)
{
  *a1 = 0x3FE0000000000000;
}

double sub_1D5DE2848()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

uint64_t sub_1D5DE2850(double a1)
{
  return sub_1D5D8A1E8(a1);
}

uint64_t (*sub_1D5DE2870(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 80);
  return sub_1D5DE288C;
}

uint64_t sub_1D5DE288C(double *a1)
{
  return sub_1D5D8A1E8(*a1);
}

double sub_1D5DE28B4()
{
  return 0.0;
}

void sub_1D5DE28BC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DE28C4()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

uint64_t sub_1D5DE28CC(double a1)
{
  return sub_1D5D89FBC(a1);
}

uint64_t (*sub_1D5DE28EC(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 88);
  return sub_1D5DE2908;
}

uint64_t sub_1D5DE2908(double *a1)
{
  return sub_1D5D89FBC(*a1);
}

double sub_1D5DE2930()
{
  return 1.0;
}

void sub_1D5DE2938(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DE2944()
{
  uint64_t v0;

  return *(double *)(v0 + 96);
}

uint64_t sub_1D5DE294C(double a1)
{
  return sub_1D5D8A23C(a1);
}

uint64_t (*sub_1D5DE296C(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 96);
  return sub_1D5DE2988;
}

uint64_t sub_1D5DE2988(double *a1)
{
  return sub_1D5D8A23C(*a1);
}

double sub_1D5DE29B0()
{
  return 0.0;
}

void sub_1D5DE29B8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DE29C0()
{
  uint64_t v0;

  return *(double *)(v0 + 104);
}

uint64_t sub_1D5DE29C8(double a1)
{
  return sub_1D5D8A1CC(a1);
}

uint64_t (*sub_1D5DE29E8(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 104);
  return sub_1D5DE2A04;
}

uint64_t sub_1D5DE2A04(double *a1)
{
  return sub_1D5D8A1CC(*a1);
}

uint64_t sub_1D5DE2A2C()
{
  return 1;
}

void sub_1D5DE2A34(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DE2A40()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t sub_1D5DE2A48(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 112) = result;
  return result;
}

_BYTE *(*sub_1D5DE2A50(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 112);
  return sub_1D5DE2A6C;
}

_BYTE *sub_1D5DE2A6C(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 112) = result[8];
  return result;
}

double sub_1D5DE2A7C()
{
  return 0.1;
}

void sub_1D5DE2A88(_QWORD *a1@<X8>)
{
  *a1 = 0x3FB999999999999ALL;
}

double sub_1D5DE2A9C()
{
  uint64_t v0;

  return *(double *)(v0 + 120);
}

uint64_t sub_1D5DE2AA4(double a1)
{
  return sub_1D5D89F4C(a1);
}

uint64_t (*sub_1D5DE2AC4(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 120);
  return sub_1D5DE2AE0;
}

uint64_t sub_1D5DE2AE0(double *a1)
{
  return sub_1D5D89F4C(*a1);
}

double sub_1D5DE2B08()
{
  return 2.0;
}

void sub_1D5DE2B10(_QWORD *a1@<X8>)
{
  *a1 = 0x4000000000000000;
}

double sub_1D5DE2B1C()
{
  uint64_t v0;

  return *(double *)(v0 + 128);
}

uint64_t sub_1D5DE2B24(double a1)
{
  return sub_1D5D89F84(a1);
}

uint64_t (*sub_1D5DE2B44(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 128);
  return sub_1D5DE2B60;
}

uint64_t sub_1D5DE2B60(double *a1)
{
  return sub_1D5D89F84(*a1);
}

double sub_1D5DE2B88()
{
  return 1.0;
}

void sub_1D5DE2B90(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DE2B9C()
{
  uint64_t v0;

  return *(double *)(v0 + 136);
}

uint64_t sub_1D5DE2BA4(double a1)
{
  return sub_1D5D89F30(a1);
}

uint64_t (*sub_1D5DE2BC4(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 136);
  return sub_1D5DE2BE0;
}

uint64_t sub_1D5DE2BE0(double *a1)
{
  return sub_1D5D89F30(*a1);
}

double sub_1D5DE2C08()
{
  return 0.06;
}

void sub_1D5DE2C14(_QWORD *a1@<X8>)
{
  *a1 = 0x3FAEB851EB851EB8;
}

double sub_1D5DE2C2C()
{
  uint64_t v0;

  return *(double *)(v0 + 144);
}

void sub_1D5DE2C34(double a1)
{
  sub_1D5D89FF4(a1);
}

void (*sub_1D5DE2C54(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 144);
  return sub_1D5DE2C70;
}

void sub_1D5DE2C70(double *a1)
{
  sub_1D5D89FF4(*a1);
}

double sub_1D5DE2C98()
{
  return 0.0;
}

void sub_1D5DE2CA0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double sub_1D5DE2CA8()
{
  uint64_t v0;

  return *(double *)(v0 + 152);
}

uint64_t sub_1D5DE2CB0(double a1)
{
  return sub_1D5D89FD8(a1);
}

uint64_t (*sub_1D5DE2CD0(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 152);
  return sub_1D5DE2CEC;
}

uint64_t sub_1D5DE2CEC(double *a1)
{
  return sub_1D5D89FD8(*a1);
}

uint64_t sub_1D5DE2D14()
{
  return 1;
}

void sub_1D5DE2D1C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DE2D28()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t sub_1D5DE2D30(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 160) = result;
  return result;
}

_BYTE *(*sub_1D5DE2D38(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 160);
  return sub_1D5DE2D54;
}

_BYTE *sub_1D5DE2D54(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 160) = result[8];
  return result;
}

double sub_1D5DE2D64()
{
  return 2.0;
}

void sub_1D5DE2D6C(_QWORD *a1@<X8>)
{
  *a1 = 0x4000000000000000;
}

double sub_1D5DE2D78()
{
  uint64_t v0;

  return *(double *)(v0 + 168);
}

uint64_t sub_1D5DE2D80(double a1)
{
  return sub_1D5D89FA0(a1);
}

uint64_t (*sub_1D5DE2DA0(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 168);
  return sub_1D5DE2DBC;
}

uint64_t sub_1D5DE2DBC(double *a1)
{
  return sub_1D5D89FA0(*a1);
}

double sub_1D5DE2DE4()
{
  return 1.0;
}

void sub_1D5DE2DEC(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DE2DF8()
{
  uint64_t v0;

  return *(double *)(v0 + 176);
}

uint64_t sub_1D5DE2E00(double a1)
{
  return sub_1D5D89F68(a1);
}

uint64_t (*sub_1D5DE2E20(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 176);
  return sub_1D5DE2E3C;
}

uint64_t sub_1D5DE2E3C(double *a1)
{
  return sub_1D5D89F68(*a1);
}

uint64_t sub_1D5DE2E68(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D5DE2EA4 + 4 * byte_1D5E3DA7D[a1]))(0xD00000000000001CLL, 0x80000001D5E4AF40);
}

uint64_t sub_1D5DE2EA4()
{
  return 0x46746C7561666564;
}

uint64_t sub_1D5DE2EC8()
{
  uint64_t v0;

  return v0 + 7;
}

uint64_t sub_1D5DE3018()
{
  unsigned __int8 *v0;

  return sub_1D5DE2E68(*v0);
}

uint64_t sub_1D5DE3020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFE940(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DE3044()
{
  return 0;
}

void sub_1D5DE3050(_BYTE *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_1D5DE305C()
{
  sub_1D5DEE3D0();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DE3084()
{
  sub_1D5DEE3D0();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DE30AC(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v24;
  char v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6720);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v48 = (char *)*((_QWORD *)v1 + 1);
  v10 = (char *)*((_QWORD *)v1 + 2);
  v45 = (char *)*((_QWORD *)v1 + 3);
  v46 = v10;
  v11 = *((_QWORD *)v1 + 4);
  v43 = *((_QWORD *)v1 + 5);
  v44 = v11;
  v52 = v1[48];
  v12 = (char *)*((_QWORD *)v1 + 7);
  v41 = *((_QWORD *)v1 + 8);
  v42 = v12;
  v13 = *((_QWORD *)v1 + 9);
  v39 = (char *)*((_QWORD *)v1 + 10);
  v40 = v13;
  v38 = (char *)*((_QWORD *)v1 + 11);
  v14 = (char *)*((_QWORD *)v1 + 13);
  v37 = (char *)*((_QWORD *)v1 + 12);
  v47 = v1[112];
  v15 = (char *)*((_QWORD *)v1 + 15);
  v16 = (char *)*((_QWORD *)v1 + 16);
  v18 = (char *)*((_QWORD *)v1 + 17);
  v17 = (char *)*((_QWORD *)v1 + 18);
  v19 = (char *)*((_QWORD *)v1 + 19);
  v36 = v1[160];
  v21 = (char *)*((_QWORD *)v1 + 21);
  v20 = (char *)*((_QWORD *)v1 + 22);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE3D0();
  v22 = v4;
  sub_1D5E379F8();
  LOBYTE(v49) = v9;
  v53 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6730);
  sub_1D5DEEF40(&qword_1EFFB6738, &qword_1EFFB6730, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v24 = v52;
  v35 = v14;
  v25 = v47;
  v34 = v15;
  v33 = v16;
  v32 = v18;
  v31 = v17;
  v30 = v19;
  v29 = v21;
  v28 = v20;
  v49 = v48;
  v53 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6740);
  sub_1D5DEEF40(&qword_1EFFB6748, &qword_1EFFB6740, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v49 = v46;
  v53 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6750);
  sub_1D5DEEF40(&qword_1EFFB6758, &qword_1EFFB6750, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v49 = v45;
  v50 = v44;
  v51 = v43;
  v53 = 3;
  sub_1D5DEE414();
  sub_1D5E3789C();
  LOBYTE(v49) = v24;
  v53 = 4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6768);
  v48 = v8;
  sub_1D5DEEF40(&qword_1EFFB6770, &qword_1EFFB6768, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  v49 = v42;
  v50 = v41;
  v51 = v40;
  v53 = 5;
  sub_1D5E3789C();
  v49 = v39;
  v53 = 6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6778);
  sub_1D5DEEF40(&qword_1EFFB6780, &qword_1EFFB6778, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v49 = v38;
  v53 = 7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6788);
  sub_1D5DEEF40(&qword_1EFFB6790, &qword_1EFFB6788, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v49 = v37;
  v53 = 8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6798);
  sub_1D5DEEF40(&qword_1EFFB67A0, &qword_1EFFB6798, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v49 = v35;
  v53 = 9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB67A8);
  sub_1D5DEEF40(&qword_1EFFB67B0, &qword_1EFFB67A8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  LOBYTE(v49) = v25;
  v53 = 10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB67B8);
  sub_1D5DEEF40(&qword_1EFFB67C0, &qword_1EFFB67B8, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  v49 = v34;
  v53 = 11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB67C8);
  sub_1D5DEEF40(&qword_1EFFB67D0, &qword_1EFFB67C8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v49 = v33;
  v53 = 12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB67D8);
  sub_1D5DEEF40(&qword_1EFFB67E0, &qword_1EFFB67D8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v49 = v32;
  v53 = 13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB67E8);
  sub_1D5DEEF40(&qword_1EFFB67F0, &qword_1EFFB67E8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v49 = v31;
  v53 = 14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB67F8);
  sub_1D5DEEF40(&qword_1EFFB6800, &qword_1EFFB67F8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v49 = v30;
  v53 = 15;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6808);
  sub_1D5DEEF40(&qword_1EFFB6810, &qword_1EFFB6808, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  LOBYTE(v49) = v36;
  v53 = 16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6818);
  sub_1D5DEEF40(&qword_1EFFB6820, &qword_1EFFB6818, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  v49 = v29;
  v53 = 17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6828);
  sub_1D5DEEF40(&qword_1EFFB6830, &qword_1EFFB6828, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  v49 = v28;
  v53 = 18;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6838);
  sub_1D5DEEF40(&qword_1EFFB6840, &qword_1EFFB6838, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  v26 = v48;
  sub_1D5E3789C();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v26, v22);
}

uint64_t sub_1D5DE39E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6848);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE3D0();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6730);
    v41 = 0;
    sub_1D5DEEF40(&qword_1EFFB6850, &qword_1EFFB6730, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v10 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6740);
    v41 = 1;
    sub_1D5DEEF40(&qword_1EFFB6858, &qword_1EFFB6740, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v11 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6750);
    v41 = 2;
    sub_1D5DEEF40(&qword_1EFFB6860, &qword_1EFFB6750, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v12 = v37;
    v41 = 3;
    sub_1D5DEE458();
    sub_1D5E377D0();
    v40 = v10;
    v13 = v37;
    v14 = v38;
    v15 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6768);
    v41 = 4;
    sub_1D5DEEF40(&qword_1EFFB6870, &qword_1EFFB6768, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    LOBYTE(v10) = v37;
    v41 = 5;
    sub_1D5E377D0();
    v16 = v37;
    v17 = v38;
    v18 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6778);
    v41 = 6;
    sub_1D5DEEF40(&qword_1EFFB6878, &qword_1EFFB6778, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v36 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6788);
    v41 = 7;
    sub_1D5DEEF40(&qword_1EFFB6880, &qword_1EFFB6788, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v35 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6798);
    v41 = 8;
    sub_1D5DEEF40(&qword_1EFFB6888, &qword_1EFFB6798, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v34 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB67A8);
    v41 = 9;
    sub_1D5DEEF40(&qword_1EFFB6890, &qword_1EFFB67A8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v33 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB67B8);
    v41 = 10;
    sub_1D5DEEF40(&qword_1EFFB6898, &qword_1EFFB67B8, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v32 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB67C8);
    v41 = 11;
    sub_1D5DEEF40(&qword_1EFFB68A0, &qword_1EFFB67C8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v31 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB67D8);
    v41 = 12;
    sub_1D5DEEF40(&qword_1EFFB68A8, &qword_1EFFB67D8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v30 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB67E8);
    v41 = 13;
    sub_1D5DEEF40(&qword_1EFFB68B0, &qword_1EFFB67E8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v29 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB67F8);
    v41 = 14;
    sub_1D5DEEF40(&qword_1EFFB68B8, &qword_1EFFB67F8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v28 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6808);
    v41 = 15;
    sub_1D5DEEF40(&qword_1EFFB68C0, &qword_1EFFB6808, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v27 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6818);
    v41 = 16;
    sub_1D5DEEF40(&qword_1EFFB68C8, &qword_1EFFB6818, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v26 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6828);
    v41 = 17;
    sub_1D5DEEF40(&qword_1EFFB68D0, &qword_1EFFB6828, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v25 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6838);
    v41 = 18;
    sub_1D5DEEF40(&qword_1EFFB68D8, &qword_1EFFB6838, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v21 = v36;
    v20 = v37;
    *(_BYTE *)a2 = v40;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 24) = v13;
    *(_QWORD *)(a2 + 32) = v14;
    *(_QWORD *)(a2 + 40) = v15;
    *(_BYTE *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 56) = v16;
    *(_QWORD *)(a2 + 64) = v17;
    *(_QWORD *)(a2 + 72) = v18;
    *(_QWORD *)(a2 + 80) = v21;
    v22 = v34;
    *(_QWORD *)(a2 + 88) = v35;
    *(_QWORD *)(a2 + 96) = v22;
    *(_QWORD *)(a2 + 104) = v33;
    *(_BYTE *)(a2 + 112) = v32;
    v23 = v30;
    *(_QWORD *)(a2 + 120) = v31;
    *(_QWORD *)(a2 + 128) = v23;
    v24 = v28;
    *(_QWORD *)(a2 + 136) = v29;
    *(_QWORD *)(a2 + 144) = v24;
    *(_QWORD *)(a2 + 152) = v27;
    *(_BYTE *)(a2 + 160) = v26;
    *(_QWORD *)(a2 + 168) = v25;
    *(_QWORD *)(a2 + 176) = v20;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DE42DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D5DE39E8(a1, a2);
}

uint64_t sub_1D5DE42F0(_QWORD *a1)
{
  return sub_1D5DE30AC(a1);
}

double sub_1D5DE4308()
{
  return 0.5;
}

void sub_1D5DE4310(_QWORD *a1@<X8>)
{
  *a1 = 0x3FE0000000000000;
}

double sub_1D5DE431C()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*sub_1D5DE4328(_QWORD *a1))(double *a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_1D5DE4344;
}

uint64_t sub_1D5DE4344(double *a1)
{
  return sub_1D5D87E50(*a1);
}

double sub_1D5DE4368()
{
  return 10.0;
}

void sub_1D5DE4370(_QWORD *a1@<X8>)
{
  *a1 = 0x4024000000000000;
}

double sub_1D5DE437C()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t sub_1D5DE4384(double a1)
{
  return sub_1D5D87E74(a1);
}

uint64_t (*sub_1D5DE43A4(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return sub_1D5DE43C0;
}

uint64_t sub_1D5DE43C0(double *a1)
{
  return sub_1D5D87E74(*a1);
}

double sub_1D5DE43E8()
{
  return 0.1;
}

void sub_1D5DE43F4(_QWORD *a1@<X8>)
{
  *a1 = 0x3FB999999999999ALL;
}

double sub_1D5DE4408()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t sub_1D5DE4410(double a1)
{
  return sub_1D5D88060(a1);
}

uint64_t (*sub_1D5DE4430(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 16);
  return sub_1D5DE444C;
}

uint64_t sub_1D5DE444C(double *a1)
{
  return sub_1D5D88060(*a1);
}

uint64_t sub_1D5DE447C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x676E6964646170;
  if (*v0 != 1)
    v1 = 0x726F697270;
  if (*v0)
    return v1;
  else
    return 0x746E656E6F707865;
}

uint64_t sub_1D5DE44D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFF070(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DE44F8()
{
  return 0;
}

void sub_1D5DE4504(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DE4510()
{
  sub_1D5DEE49C();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DE4538()
{
  sub_1D5DEE49C();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DE4560(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB68E0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v9 = v1[1];
  v11 = v1[2];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE49C();
  sub_1D5E379F8();
  v15 = v10;
  v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB68F0);
  sub_1D5DEEF40(&qword_1EFFB68F8, &qword_1EFFB68F0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  if (!v2)
  {
    v15 = v9;
    v14 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6900);
    sub_1D5DEEF40(&qword_1EFFB6908, &qword_1EFFB6900, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v15 = v11;
    v14 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6910);
    sub_1D5DEEF40(&qword_1EFFB6918, &qword_1EFFB6910, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DE4758@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6920);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE49C();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB68F0);
    v15 = 0;
    sub_1D5DEEF40(&qword_1EFFB6928, &qword_1EFFB68F0, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v10 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6900);
    v15 = 1;
    sub_1D5DEEF40(&qword_1EFFB6930, &qword_1EFFB6900, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v12 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6910);
    v15 = 2;
    sub_1D5DEEF40(&qword_1EFFB6938, &qword_1EFFB6910, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v13 = v16;
    *a2 = v10;
    a2[1] = v12;
    a2[2] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DE498C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DE4758(a1, a2);
}

uint64_t sub_1D5DE49A0(_QWORD *a1)
{
  return sub_1D5DE4560(a1);
}

double sub_1D5DE49B8()
{
  return 0.2;
}

void sub_1D5DE49C4(_QWORD *a1@<X8>)
{
  *a1 = 0x3FC999999999999ALL;
}

double sub_1D5DE49D8()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*sub_1D5DE49E4(_QWORD *a1))(double *a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_1D5DE4A00;
}

uint64_t sub_1D5DE4A00(double *a1)
{
  return sub_1D5D89CD8(*a1);
}

double sub_1D5DE4A24()
{
  return 0.0;
}

void sub_1D5DE4A2C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DE4A34(double a1)
{
  return sub_1D5D89CBC(a1);
}

uint64_t (*sub_1D5DE4A54(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return sub_1D5DE4A70;
}

uint64_t sub_1D5DE4A70(double *a1)
{
  return sub_1D5D89CBC(*a1);
}

double sub_1D5DE4A98()
{
  return 2.0;
}

void sub_1D5DE4AA0(_QWORD *a1@<X8>)
{
  *a1 = 0x4000000000000000;
}

uint64_t sub_1D5DE4AAC(double a1)
{
  return sub_1D5D89C84(a1);
}

uint64_t (*sub_1D5DE4ACC(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 16);
  return sub_1D5DE4AE8;
}

uint64_t sub_1D5DE4AE8(double *a1)
{
  return sub_1D5D89C84(*a1);
}

double sub_1D5DE4B10()
{
  return 2.0;
}

void sub_1D5DE4B18(_QWORD *a1@<X8>)
{
  *a1 = 0x4000000000000000;
}

uint64_t sub_1D5DE4B24(double a1)
{
  return sub_1D5D89CA0(a1);
}

uint64_t (*sub_1D5DE4B44(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 24);
  return sub_1D5DE4B60;
}

uint64_t sub_1D5DE4B60(double *a1)
{
  return sub_1D5D89CA0(*a1);
}

uint64_t sub_1D5DE4B88(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D5DE4BC0 + 4 * byte_1D5E3DA90[a1]))(0xD000000000000012, 0x80000001D5E4AD20);
}

uint64_t sub_1D5DE4BFC()
{
  unsigned __int8 *v0;

  return sub_1D5DE4B88(*v0);
}

uint64_t sub_1D5DE4C04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFF1BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DE4C28()
{
  return 0;
}

void sub_1D5DE4C34(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1D5DE4C40()
{
  sub_1D5DEE4E0();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DE4C68()
{
  sub_1D5DEE4E0();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DE4C90(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6940);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v9 = v1[1];
  v12 = v1[2];
  v11 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE4E0();
  sub_1D5E379F8();
  v15 = v10;
  HIBYTE(v14) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6950);
  sub_1D5DEEF40(&qword_1EFFB6958, &qword_1EFFB6950, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  if (!v2)
  {
    v15 = v9;
    HIBYTE(v14) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6960);
    sub_1D5DEEF40(&qword_1EFFB6968, &qword_1EFFB6960, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v15 = v12;
    HIBYTE(v14) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6970);
    sub_1D5DEEF40(&qword_1EFFB6978, &qword_1EFFB6970, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v15 = v11;
    HIBYTE(v14) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6980);
    sub_1D5DEEF40(&qword_1EFFB6988, &qword_1EFFB6980, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DE4EE8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6990);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE4E0();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6950);
    HIBYTE(v15) = 0;
    sub_1D5DEEF40(&qword_1EFFB6998, &qword_1EFFB6950, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v10 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6960);
    HIBYTE(v15) = 1;
    sub_1D5DEEF40(&qword_1EFFB69A0, &qword_1EFFB6960, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v11 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6970);
    HIBYTE(v15) = 2;
    sub_1D5DEEF40(&qword_1EFFB69A8, &qword_1EFFB6970, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v13 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6980);
    HIBYTE(v15) = 3;
    sub_1D5DEEF40(&qword_1EFFB69B0, &qword_1EFFB6980, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v14 = v16;
    *a2 = v10;
    a2[1] = v11;
    a2[2] = v13;
    a2[3] = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DE5188@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DE4EE8(a1, a2);
}

uint64_t sub_1D5DE519C(_QWORD *a1)
{
  return sub_1D5DE4C90(a1);
}

BOOL sub_1D5DE51B0(double *a1, double *a2)
{
  return sub_1D5DED6F4(a1, a2);
}

double sub_1D5DE51C8()
{
  return 1.0;
}

void sub_1D5DE51D0(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DE51DC()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*sub_1D5DE51E8(_QWORD *a1))(double *a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_1D5DE5204;
}

uint64_t sub_1D5DE5204(double *a1)
{
  return sub_1D5D89A88(*a1);
}

double sub_1D5DE5228()
{
  return 5000.0;
}

void sub_1D5DE5238(_QWORD *a1@<X8>)
{
  *a1 = 0x40B3880000000000;
}

double sub_1D5DE5248()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void sub_1D5DE5250(double a1)
{
  sub_1D5D89AA4(a1);
}

void (*sub_1D5DE5270(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return sub_1D5DE528C;
}

void sub_1D5DE528C(double *a1)
{
  sub_1D5D89AA4(*a1);
}

double sub_1D5DE52B4()
{
  return 2000.0;
}

void sub_1D5DE52C4(_QWORD *a1@<X8>)
{
  *a1 = 0x409F400000000000;
}

double sub_1D5DE52D4()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void sub_1D5DE52DC(double a1)
{
  sub_1D5D898C4(a1);
}

void (*sub_1D5DE52FC(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 16);
  return sub_1D5DE5318;
}

void sub_1D5DE5318(double *a1)
{
  sub_1D5D898C4(*a1);
}

__n128 sub_1D5DE5340@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 24);
  v3 = *(_OWORD *)(v1 + 40);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

double sub_1D5DE5350()
{
  return 1.0;
}

void sub_1D5DE5358(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DE5364()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

uint64_t sub_1D5DE536C(double a1)
{
  return sub_1D5D89C68(a1);
}

uint64_t (*sub_1D5DE538C(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 56);
  return sub_1D5DE53A8;
}

uint64_t sub_1D5DE53A8(double *a1)
{
  return sub_1D5D89C68(*a1);
}

uint64_t sub_1D5DE53D0()
{
  return 5;
}

void sub_1D5DE53D8(_QWORD *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1D5DE53E4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t sub_1D5DE53EC(uint64_t a1)
{
  return sub_1D5D898A8(a1);
}

uint64_t (*sub_1D5DE540C(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 64);
  a1[1] = v1;
  return sub_1D5DE5424;
}

uint64_t sub_1D5DE5424(uint64_t *a1)
{
  return sub_1D5D898A8(*a1);
}

BOOL sub_1D5DE544C(double *a1, double *a2)
{
  return sub_1D5DEE8E4(a1, a2);
}

uint64_t sub_1D5DE5464(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D5DE549C + 4 * byte_1D5E3DA94[a1]))(0xD00000000000001CLL, 0x80000001D5E4B180);
}

uint64_t sub_1D5DE549C(uint64_t a1)
{
  return a1 - 2;
}

uint64_t sub_1D5DE54FC()
{
  unsigned __int8 *v0;

  return sub_1D5DE5464(*v0);
}

uint64_t sub_1D5DE5504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFF350(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DE5528()
{
  return 0;
}

void sub_1D5DE5534(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1D5DE5540()
{
  sub_1D5DEE91C();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DE5568()
{
  sub_1D5DEE91C();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DE5590(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];
  char v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB69B8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v9 = v1[1];
  v12 = v1[2];
  v11 = v1[3];
  v13 = v1[4];
  v14 = v1[5];
  v16 = v1[6];
  v15 = v1[7];
  v17 = v1[8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE91C();
  sub_1D5E379F8();
  v19[0] = v10;
  v20 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB69C8);
  sub_1D5DEEF40(&qword_1EFFB69D0, &qword_1EFFB69C8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  if (!v2)
  {
    v19[0] = v9;
    v20 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB69D8);
    sub_1D5DEEF40(&qword_1EFFB69E0, &qword_1EFFB69D8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v19[0] = v12;
    v20 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB69E8);
    sub_1D5DEEF40(&qword_1EFFB69F0, &qword_1EFFB69E8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v19[0] = v11;
    v19[1] = v13;
    v19[2] = v14;
    v19[3] = v16;
    v20 = 3;
    sub_1D5DEE960();
    sub_1D5E3789C();
    v19[0] = v15;
    v20 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6A00);
    sub_1D5DEEF40(&qword_1EFFB6A08, &qword_1EFFB6A00, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v19[0] = v17;
    v20 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6A10);
    sub_1D5DEEF40(&qword_1EFFB6A18, &qword_1EFFB6A10, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DE58AC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  char v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6A20);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE91C();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB69C8);
    v21 = 0;
    sub_1D5DEEF40(&qword_1EFFB6A28, &qword_1EFFB69C8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v10 = v20[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB69D8);
    v21 = 1;
    sub_1D5DEEF40(&qword_1EFFB6A30, &qword_1EFFB69D8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v11 = v20[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB69E8);
    v21 = 2;
    sub_1D5DEEF40(&qword_1EFFB6A38, &qword_1EFFB69E8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v12 = v20[0];
    v21 = 3;
    sub_1D5DEE9A4();
    sub_1D5E377D0();
    v13 = v20[0];
    v14 = v20[1];
    v15 = v20[2];
    v16 = v20[3];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6A00);
    v21 = 4;
    sub_1D5DEEF40(&qword_1EFFB6A48, &qword_1EFFB6A00, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v18 = v20[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6A10);
    v21 = 5;
    sub_1D5DEEF40(&qword_1EFFB6A50, &qword_1EFFB6A10, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v19 = v20[0];
    *a2 = v10;
    a2[1] = v11;
    a2[2] = v12;
    a2[3] = v13;
    a2[4] = v14;
    a2[5] = v15;
    a2[6] = v16;
    a2[7] = v18;
    a2[8] = v19;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DE5C10@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DE58AC(a1, a2);
}

uint64_t sub_1D5DE5C24(_QWORD *a1)
{
  return sub_1D5DE5590(a1);
}

uint64_t sub_1D5DE5C3C(double *a1)
{
  return sub_1D5D89870(*a1, a1[1]);
}

uint64_t (*sub_1D5DE5C44(uint64_t a1))(double *a1)
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return sub_1D5DE5C60;
}

uint64_t sub_1D5DE5C60(double *a1)
{
  return sub_1D5D89870(*a1, a1[1]);
}

double sub_1D5DE5C84@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1D5E3D860;
  return result;
}

double sub_1D5DE5C94@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1D5E3D860;
  return result;
}

uint64_t sub_1D5DE5CA4(double *a1)
{
  return sub_1D5D8988C(*a1, a1[1]);
}

uint64_t (*sub_1D5DE5CC8(uint64_t a1))(double *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  return sub_1D5DE5CE4;
}

uint64_t sub_1D5DE5CE4(double *a1)
{
  return sub_1D5D8988C(*a1, a1[1]);
}

uint64_t sub_1D5DE5D14()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C6172656E6567;
  else
    return 0x656E696C65736162;
}

uint64_t sub_1D5DE5D50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFF598(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DE5D74()
{
  return 0;
}

void sub_1D5DE5D80(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DE5D8C()
{
  sub_1D5DEE9E8();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DE5DB4()
{
  sub_1D5DEE9E8();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DE5DDC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6A58);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = v1[1];
  v11 = v1[2];
  v12 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE9E8();
  sub_1D5E379F8();
  v16 = v9;
  v17 = v10;
  v15 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6A68);
  sub_1D5DEEF40(&qword_1EFFB6A70, &qword_1EFFB6A68, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  if (!v2)
  {
    v16 = v11;
    v17 = v12;
    v15 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6A78);
    sub_1D5DEEF40(&qword_1EFFB6A80, &qword_1EFFB6A78, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DE5F74@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6A88);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEE9E8();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6A68);
    v14 = 0;
    sub_1D5DEEF40(&qword_1EFFB6A90, &qword_1EFFB6A68, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v10 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6A78);
    v14 = 1;
    sub_1D5DEEF40(&qword_1EFFB6A98, &qword_1EFFB6A78, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v11 = v13;
    *a2 = v10;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DE6144@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1D5DE5F74(a1, a2);
}

uint64_t sub_1D5DE6158(_QWORD *a1)
{
  return sub_1D5DE5DDC(a1);
}

BOOL sub_1D5DE616C(double *a1, double *a2)
{
  return sub_1D5DEE8E4(a1, a2);
}

double sub_1D5DE6184()
{
  uint64_t v0;

  return *(double *)v0;
}

double sub_1D5DE618C()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

BOOL sub_1D5DE6194(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_1D5DE61C8()
{
  _BYTE *v0;

  if (*v0)
    return 0x6973736572706D69;
  else
    return 0x736B63696C63;
}

uint64_t sub_1D5DE6208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5E00520(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DE622C()
{
  return 0;
}

void sub_1D5DE6238(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DE6244()
{
  sub_1D5DEEA2C();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DE626C()
{
  sub_1D5DEEA2C();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DE6294(_QWORD *a1)
{
  return sub_1D5DEB0E8(a1, &qword_1EFFB6AA0, (void (*)(void))sub_1D5DEEA2C);
}

uint64_t sub_1D5DE62C0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DEB238(a1, &qword_1EFFB6AB0, (void (*)(void))sub_1D5DEEA2C, a2);
}

uint64_t sub_1D5DE62EC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DE62C0(a1, a2);
}

uint64_t sub_1D5DE6300(_QWORD *a1)
{
  return sub_1D5DE6294(a1);
}

BOOL sub_1D5DE6314(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

unint64_t sub_1D5DE6340()
{
  return sub_1D5DC8324(MEMORY[0x1E0DEE9D8]);
}

unint64_t sub_1D5DE634C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = sub_1D5DC8324(MEMORY[0x1E0DEE9D8]);
  *a1 = result;
  return result;
}

uint64_t sub_1D5DE6378()
{
  return swift_bridgeObjectRetain();
}

uint64_t (*sub_1D5DE6384(_QWORD *a1))(unint64_t *a1, char a2)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return sub_1D5DE63BC;
}

uint64_t sub_1D5DE63BC(unint64_t *a1, char a2)
{
  unint64_t v2;

  if ((a2 & 1) == 0)
    return sub_1D5D7BA38(*a1);
  v2 = swift_bridgeObjectRetain();
  sub_1D5D7BA38(v2);
  return swift_bridgeObjectRelease();
}

unint64_t sub_1D5DE6400(unint64_t *a1, uint64_t *a2)
{
  return sub_1D5DCE8F4(*a1, *a2);
}

uint64_t sub_1D5DE640C()
{
  return 1;
}

uint64_t sub_1D5DE6418()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DE6458()
{
  return sub_1D5E379B0();
}

uint64_t sub_1D5DE6480()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

unint64_t sub_1D5DE64BC()
{
  return 0xD000000000000010;
}

uint64_t sub_1D5DE64D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFF688(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1D5DE6500()
{
  return 0;
}

void sub_1D5DE650C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D5DE6518()
{
  sub_1D5DEECDC();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DE6540()
{
  sub_1D5DEECDC();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DE6568(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6AB8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEECDC();
  sub_1D5E379F8();
  v10[1] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6AC8);
  sub_1D5DEEF40(&qword_1EFFB6AD0, &qword_1EFFB6AC8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1D5DE6688@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6AD8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEECDC();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6AC8);
    sub_1D5DEEF40(&qword_1EFFB6AE0, &qword_1EFFB6AC8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *a2 = v11[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DE67C8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DE6688(a1, a2);
}

uint64_t sub_1D5DE67DC(_QWORD *a1)
{
  return sub_1D5DE6568(a1);
}

unint64_t sub_1D5DE67F0(unint64_t *a1, uint64_t *a2)
{
  return sub_1D5DCE8F4(*a1, *a2);
}

uint64_t sub_1D5DE67FC()
{
  return 0;
}

void sub_1D5DE6804(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DE680C()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_1D5DE6814(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*sub_1D5DE681C(uint64_t a1))(uint64_t result)
{
  _BYTE *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1;
  return sub_1D5E00C58;
}

double sub_1D5DE6838()
{
  return 1.0;
}

void sub_1D5DE6840(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DE684C()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t sub_1D5DE6854(double a1)
{
  return sub_1D5DC5D3C(a1);
}

uint64_t (*sub_1D5DE6874(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return sub_1D5DE6890;
}

uint64_t sub_1D5DE6890(double *a1)
{
  return sub_1D5DC5D3C(*a1);
}

uint64_t sub_1D5DE68B8()
{
  return 100;
}

void sub_1D5DE68C0(_QWORD *a1@<X8>)
{
  *a1 = 100;
}

uint64_t sub_1D5DE68CC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1D5DE68D4(uint64_t a1)
{
  return sub_1D5DC5D58(a1);
}

uint64_t (*sub_1D5DE68F4(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v1;
  return sub_1D5DE690C;
}

uint64_t sub_1D5DE690C(uint64_t *a1)
{
  return sub_1D5DC5D58(*a1);
}

double sub_1D5DE6930()
{
  return 1.0;
}

void sub_1D5DE6938(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DE6944()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t sub_1D5DE694C(double a1)
{
  return sub_1D5DC5F18(a1);
}

uint64_t (*sub_1D5DE696C(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 24);
  return sub_1D5DE6988;
}

uint64_t sub_1D5DE6988(double *a1)
{
  return sub_1D5DC5F18(*a1);
}

double sub_1D5DE69B0()
{
  return 1.0;
}

void sub_1D5DE69B8(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DE69C4()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

uint64_t sub_1D5DE69CC(double a1)
{
  return sub_1D5DC5F34(a1);
}

uint64_t (*sub_1D5DE69EC(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 32);
  return sub_1D5DE6A08;
}

uint64_t sub_1D5DE6A08(double *a1)
{
  return sub_1D5DC5F34(*a1);
}

uint64_t sub_1D5DE6A30()
{
  return 0;
}

void sub_1D5DE6A38(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DE6A40()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t sub_1D5DE6A48(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

_BYTE *(*sub_1D5DE6A50(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 40);
  return sub_1D5DE6A6C;
}

_BYTE *sub_1D5DE6A6C(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 40) = result[8];
  return result;
}

double sub_1D5DE6A7C()
{
  return 1.0;
}

void sub_1D5DE6A84(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double sub_1D5DE6A90()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

uint64_t sub_1D5DE6A98(double a1)
{
  return sub_1D5DC5F50(a1);
}

uint64_t (*sub_1D5DE6AB8(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 48);
  return sub_1D5DE6AD4;
}

uint64_t sub_1D5DE6AD4(double *a1)
{
  return sub_1D5DC5F50(*a1);
}

uint64_t sub_1D5DE6AFC()
{
  return 0;
}

void sub_1D5DE6B04(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D5DE6B0C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t sub_1D5DE6B14(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = result;
  return result;
}

_BYTE *(*sub_1D5DE6B1C(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 56);
  return sub_1D5DE6B38;
}

_BYTE *sub_1D5DE6B38(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 56) = result[8];
  return result;
}

double sub_1D5DE6B48@<D0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  double result;

  sub_1D5DC5D3C(a6);
  sub_1D5DC5D58(a2);
  sub_1D5DC5F18(a7);
  sub_1D5DC5F34(a8);
  sub_1D5DC5F50(a9);
  result = a9;
  *(_BYTE *)a5 = a1;
  *(double *)(a5 + 8) = a6;
  *(_QWORD *)(a5 + 16) = a2;
  *(double *)(a5 + 24) = a7;
  *(double *)(a5 + 32) = a8;
  *(_BYTE *)(a5 + 40) = a3;
  *(double *)(a5 + 48) = a9;
  *(_BYTE *)(a5 + 56) = a4;
  return result;
}

uint64_t sub_1D5DE6C28(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DE6C68 + 4 * byte_1D5E3DA9A[a1]))(0x7361427441706163, 0xED0000656E696C65);
}

unint64_t sub_1D5DE6C68()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1D5DE6D40()
{
  unsigned __int8 *v0;

  return sub_1D5DE6C28(*v0);
}

uint64_t sub_1D5DE6D48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFF70C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DE6D6C()
{
  return 0;
}

void sub_1D5DE6D78(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1D5DE6D84()
{
  sub_1D5DEED20();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DE6DAC()
{
  sub_1D5DEED20();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DE6DD4(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AF188);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = *((_QWORD *)v1 + 1);
  v19 = *((_QWORD *)v1 + 2);
  v12 = *((_QWORD *)v1 + 3);
  v11 = *((_QWORD *)v1 + 4);
  v21 = v1[40];
  v13 = *((_QWORD *)v1 + 6);
  v18 = v1[56];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEED20();
  sub_1D5E379F8();
  LOBYTE(v20) = v9;
  v22 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC08);
  sub_1D5DEEF40(&qword_1ED9AEC00, &qword_1ED9AEC08, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
  sub_1D5E3789C();
  if (!v2)
  {
    v14 = v19;
    v15 = v21;
    v20 = v10;
    v22 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC88);
    sub_1D5DEEF40(&qword_1ED9AEC80, &qword_1ED9AEC88, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v20 = v14;
    v22 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC68);
    sub_1D5DEEF40(&qword_1ED9AEC60, &qword_1ED9AEC68, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v20 = v12;
    v22 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC48);
    sub_1D5DEEF40(&qword_1ED9AEC40, &qword_1ED9AEC48, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v20 = v11;
    v22 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC78);
    sub_1D5DEEF40(&qword_1ED9AEC70, &qword_1ED9AEC78, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    LOBYTE(v20) = v15;
    v22 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC18);
    sub_1D5DEEF40(&qword_1ED9AEC10, &qword_1ED9AEC18, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E3789C();
    v20 = v13;
    v22 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC58);
    sub_1D5DEEF40(&qword_1ED9AEC50, &qword_1ED9AEC58, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    LOBYTE(v20) = v18;
    v22 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC28);
    sub_1D5DEEF40(&qword_1ED9AEC20, &qword_1ED9AEC28, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DE71C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6AE8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEED20();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC08);
    v20 = 0;
    sub_1D5DEEF40(&qword_1EFFB6AF0, &qword_1ED9AEC08, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v10 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC88);
    v20 = 1;
    sub_1D5DEEF40(&qword_1EFFB6AF8, &qword_1ED9AEC88, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v11 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC68);
    v20 = 2;
    sub_1D5DEEF40(&qword_1EFFB6B00, &qword_1ED9AEC68, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v17 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC48);
    v20 = 3;
    sub_1D5DEEF40(&qword_1EFFB6B08, &qword_1ED9AEC48, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v12 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC78);
    v20 = 4;
    sub_1D5DEEF40(&qword_1EFFB6B10, &qword_1ED9AEC78, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v13 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC18);
    v20 = 5;
    sub_1D5DEEF40(&qword_1EFFB6B18, &qword_1ED9AEC18, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC58);
    v20 = 6;
    sub_1D5DEEF40(&qword_1EFFB6B20, &qword_1ED9AEC58, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v15 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEC28);
    v20 = 7;
    sub_1D5DEEF40(&qword_1EFFB6B28, &qword_1ED9AEC28, (uint64_t)&protocol conformance descriptor for ConfigurableValue<A>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v16 = v18;
    *(_BYTE *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v17;
    *(_QWORD *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 32) = v13;
    *(_BYTE *)(a2 + 40) = v19;
    *(_QWORD *)(a2 + 48) = v15;
    *(_BYTE *)(a2 + 56) = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DE7618@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D5DE71C4(a1, a2);
}

uint64_t sub_1D5DE762C(_QWORD *a1)
{
  return sub_1D5DE6DD4(a1);
}

double sub_1D5DE7644@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(double *)(a1 + 16) = result;
  return result;
}

void *sub_1D5DE7658@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return memcpy(a1, (const void *)(v1 + 24), 0x220uLL);
}

BOOL sub_1D5DE7670(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

unint64_t sub_1D5DE76AC()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0xD000000000000014;
}

uint64_t sub_1D5DE76EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFFA9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DE7710()
{
  return 0;
}

void sub_1D5DE771C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DE7728()
{
  sub_1D5DEED64();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DE7750()
{
  sub_1D5DEED64();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DE7778(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v12;
  _OWORD v13[34];
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6B30);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v13[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  v10 = *((_QWORD *)v3 + 2);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEED64();
  sub_1D5E379F8();
  v13[0] = v12;
  *(_QWORD *)&v13[1] = v10;
  v14 = 0;
  sub_1D5DEEDA8();
  sub_1D5E3789C();
  if (!v2)
  {
    memcpy(v13, (char *)v3 + 24, sizeof(v13));
    v14 = 1;
    sub_1D5DEEDEC();
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1D5DE78E8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v16[68];
  char v17;

  v15 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6B50);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEED64();
  sub_1D5E379E0();
  if (!v2)
  {
    v9 = v15;
    v17 = 0;
    sub_1D5DEEE30();
    sub_1D5E377D0();
    v10 = v16[0];
    v11 = v16[1];
    v12 = v16[2];
    v17 = 1;
    sub_1D5DEEE74();
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    memcpy(v9 + 3, v16, 0x220uLL);
    *v9 = v10;
    v9[1] = v11;
    v9[2] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DE7A90@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DE78E8(a1, a2);
}

uint64_t sub_1D5DE7AA4(_QWORD *a1)
{
  return sub_1D5DE7778(a1);
}

double sub_1D5DE7ABC()
{
  return 0.99;
}

void sub_1D5DE7AC8(_QWORD *a1@<X8>)
{
  *a1 = 0x3FEFAE147AE147AELL;
}

double sub_1D5DE7AE0()
{
  uint64_t v0;

  return *(double *)v0;
}

void (*sub_1D5DE7AEC(_QWORD *a1))(double *a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_1D5DE7B08;
}

void sub_1D5DE7B08(double *a1)
{
  sub_1D5DC4610(*a1);
}

double sub_1D5DE7B2C()
{
  return 1.0;
}

void sub_1D5DE7B34(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DE7B40(double a1)
{
  return sub_1D5DC47E8(a1);
}

uint64_t (*sub_1D5DE7B60(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return sub_1D5DE7B7C;
}

uint64_t sub_1D5DE7B7C(double *a1)
{
  return sub_1D5DC47E8(*a1);
}

double sub_1D5DE7BA4()
{
  return 1.0;
}

void sub_1D5DE7BAC(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1D5DE7BB8(double a1)
{
  return sub_1D5DC4804(a1);
}

uint64_t (*sub_1D5DE7BD8(_QWORD *a1))(double *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 16);
  return sub_1D5DE7BF4;
}

uint64_t sub_1D5DE7BF4(double *a1)
{
  return sub_1D5DC4804(*a1);
}

uint64_t sub_1D5DE7C24()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD00000000000001CLL;
  if (*v0 != 1)
    v1 = 0xD00000000000001ALL;
  if (*v0)
    return v1;
  else
    return 0x7461527961636564;
}

uint64_t sub_1D5DE7C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFFB84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DE7CB4()
{
  return 0;
}

void sub_1D5DE7CC0(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D5DE7CCC()
{
  sub_1D5DEEEB8();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DE7CF4()
{
  sub_1D5DEEEB8();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DE7D1C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6B68);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v9 = v1[1];
  v11 = v1[2];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEEEB8();
  sub_1D5E379F8();
  v15 = v10;
  v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6B78);
  sub_1D5DEEF40(&qword_1EFFB6B80, &qword_1EFFB6B78, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  if (!v2)
  {
    v15 = v9;
    v14 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6B88);
    sub_1D5DEEF40(&qword_1EFFB6B90, &qword_1EFFB6B88, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v15 = v11;
    v14 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6B98);
    sub_1D5DEEF40(&qword_1EFFB6BA0, &qword_1EFFB6B98, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DE7F14@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6BA8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEEEB8();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6B78);
    v15 = 0;
    sub_1D5DEEF40(&qword_1EFFB6BB0, &qword_1EFFB6B78, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v10 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6B88);
    v15 = 1;
    sub_1D5DEEF40(&qword_1EFFB6BB8, &qword_1EFFB6B88, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v12 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6B98);
    v15 = 2;
    sub_1D5DEEF40(&qword_1EFFB6BC0, &qword_1EFFB6B98, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v13 = v16;
    *a2 = v10;
    a2[1] = v12;
    a2[2] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DE8148@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DE7F14(a1, a2);
}

uint64_t sub_1D5DE815C(_QWORD *a1)
{
  return sub_1D5DE7D1C(a1);
}

BOOL sub_1D5DE8174(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

__n128 sub_1D5DE81A4@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #1.0 }
  *a1 = result;
  a1[1] = result;
  return result;
}

__n128 sub_1D5DE81B0@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #1.0 }
  *a1 = result;
  a1[1] = result;
  return result;
}

__n128 sub_1D5DE81BC@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 sub_1D5DE81C8@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1D5DE81D4(double *a1)
{
  return sub_1D5DC4820(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1D5DE81FC(double *a1)
{
  return sub_1D5DC4820(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE8208(_QWORD *a1))(double **a1)
{
  _OWORD *v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE8248;
}

void sub_1D5DE8248(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC4820(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

double sub_1D5DE8278@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1D5E3A110;
  a1[1] = xmmword_1D5E3A110;
  return result;
}

double sub_1D5DE8288@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1D5E3A110;
  a1[1] = xmmword_1D5E3A110;
  return result;
}

__n128 sub_1D5DE8298@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 32);
  v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE82A4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1D5DE82B0(double *a1)
{
  return sub_1D5DC483C(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1D5DE82D8(double *a1)
{
  return sub_1D5DC483C(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE8300(_QWORD *a1))(double **a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE8340;
}

void sub_1D5DE8340(double **a1, uint64_t a2)
{
  sub_1D5DE834C(a1, a2, (void (*)(double, double, double, double))sub_1D5DC483C);
}

void sub_1D5DE834C(double **a1, uint64_t a2, void (*a3)(double, double, double, double))
{
  double *v3;

  v3 = *a1;
  a3(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v3);
}

double sub_1D5DE8380@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 1.0;
  *a1 = xmmword_1D5E3D870;
  a1[1] = xmmword_1D5E3D870;
  return result;
}

double sub_1D5DE8390@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 1.0;
  *a1 = xmmword_1D5E3D870;
  a1[1] = xmmword_1D5E3D870;
  return result;
}

__n128 sub_1D5DE83A0@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 80);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE83AC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 80);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_1D5DE83B8(double *a1)
{
  sub_1D5DC4858(*a1, a1[1], a1[2], a1[3]);
}

void sub_1D5DE83E0(double *a1)
{
  sub_1D5DC4858(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE8408(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE8448;
}

void sub_1D5DE8448(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC4858(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

__n128 sub_1D5DE847C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 96);
  v3 = *(_OWORD *)(v1 + 112);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE8488@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 96);
  v3 = *(_OWORD *)(a1 + 112);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1D5DE8494(double *a1)
{
  return sub_1D5DC4A5C(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1D5DE84BC(double *a1)
{
  return sub_1D5DC4A5C(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE84E4(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE8524;
}

void sub_1D5DE8524(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC4A5C(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

__n128 sub_1D5DE8558@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #3.0 }
  *a1 = result;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  return result;
}

__n128 sub_1D5DE8568@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #3.0 }
  *a1 = result;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  return result;
}

__n128 sub_1D5DE8578@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 128);
  v3 = *(_OWORD *)(v1 + 144);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE8584@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 128);
  v3 = *(_OWORD *)(a1 + 144);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_1D5DE8590(double *a1)
{
  sub_1D5DC4A78(*a1, a1[1], a1[2], a1[3]);
}

void sub_1D5DE85B8(double *a1)
{
  sub_1D5DC4A78(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE85E0(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 128);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE8620;
}

void sub_1D5DE8620(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC4A78(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

__n128 sub_1D5DE8654@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #10.0 }
  *a1 = result;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  return result;
}

__n128 sub_1D5DE8664@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #10.0 }
  *a1 = result;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  return result;
}

__n128 sub_1D5DE8674@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 160);
  v3 = *(_OWORD *)(v1 + 176);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE8680@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 160);
  v3 = *(_OWORD *)(a1 + 176);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_1D5DE868C(double *a1)
{
  sub_1D5DC4C7C(*a1, a1[1], a1[2], a1[3]);
}

void sub_1D5DE86B4(double *a1)
{
  sub_1D5DC4C7C(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE86DC(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 160);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE871C;
}

void sub_1D5DE871C(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC4C7C(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

__n128 sub_1D5DE8750@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 192);
  v3 = *(_OWORD *)(v1 + 208);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1D5DE875C(double *a1)
{
  return sub_1D5DC4E80(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE8784(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 208);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 192);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE87C4;
}

void sub_1D5DE87C4(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC4E80(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

__n128 sub_1D5DE87F8@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #2.0 }
  *a1 = result;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  return result;
}

__n128 sub_1D5DE8808@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #2.0 }
  *a1 = result;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  return result;
}

__n128 sub_1D5DE8818@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 224);
  v3 = *(_OWORD *)(v1 + 240);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE8824@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 224);
  v3 = *(_OWORD *)(a1 + 240);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1D5DE8830(double *a1)
{
  return sub_1D5DC4E9C(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1D5DE8858(double *a1)
{
  return sub_1D5DC4E9C(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE8880(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 240);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 224);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE88C0;
}

void sub_1D5DE88C0(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC4E9C(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

double sub_1D5DE88F4@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_1D5E3D880;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

double sub_1D5DE8908@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_1D5E3D880;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

__n128 sub_1D5DE891C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 256);
  v3 = *(_OWORD *)(v1 + 272);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE8928@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 256);
  v3 = *(_OWORD *)(a1 + 272);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1D5DE8934(double *a1)
{
  return sub_1D5DC4EB8(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1D5DE895C(double *a1)
{
  return sub_1D5DC4EB8(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE8984(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 272);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 256);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE89C4;
}

void sub_1D5DE89C4(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC4EB8(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

__n128 sub_1D5DE89F8@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 288);
  v3 = *(_OWORD *)(v1 + 304);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE8A04@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 288);
  v3 = *(_OWORD *)(a1 + 304);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1D5DE8A10(double *a1)
{
  return sub_1D5DC4ED4(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1D5DE8A38(double *a1)
{
  return sub_1D5DC4ED4(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE8A60(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 304);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 288);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE8AA0;
}

void sub_1D5DE8AA0(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC4ED4(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

__n128 sub_1D5DE8AD4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 320);
  v3 = *(_OWORD *)(v1 + 336);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE8AE0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 320);
  v3 = *(_OWORD *)(a1 + 336);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1D5DE8AEC(double *a1)
{
  return sub_1D5DC4EF0(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1D5DE8B14(double *a1)
{
  return sub_1D5DC4EF0(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE8B3C(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 336);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 320);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE8B7C;
}

void sub_1D5DE8B7C(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC4EF0(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

__n128 sub_1D5DE8BB0@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 352);
  v3 = *(_OWORD *)(v1 + 368);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE8BBC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 352);
  v3 = *(_OWORD *)(a1 + 368);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1D5DE8BC8(double *a1)
{
  return sub_1D5DC5104(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1D5DE8BF0(double *a1)
{
  return sub_1D5DC5104(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE8C18(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 368);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 352);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE8C58;
}

void sub_1D5DE8C58(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC5104(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

__n128 sub_1D5DE8C8C@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #10.0 }
  *a1 = result;
  a1[1] = result;
  return result;
}

__n128 sub_1D5DE8C98@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #10.0 }
  *a1 = result;
  a1[1] = result;
  return result;
}

__n128 sub_1D5DE8CA4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 384);
  v3 = *(_OWORD *)(v1 + 400);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE8CB0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 384);
  v3 = *(_OWORD *)(a1 + 400);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_1D5DE8CBC(double *a1)
{
  sub_1D5DC5318(*a1, a1[1], a1[2], a1[3]);
}

void sub_1D5DE8CE4(double *a1)
{
  sub_1D5DC5318(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE8D0C(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 400);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 384);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE8D4C;
}

void sub_1D5DE8D4C(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC5318(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

__n128 sub_1D5DE8D80@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #3.0 }
  *a1 = result;
  a1[1] = result;
  return result;
}

__n128 sub_1D5DE8D8C@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  __asm { FMOV            V0.2D, #3.0 }
  *a1 = result;
  a1[1] = result;
  return result;
}

__n128 sub_1D5DE8D98@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 416);
  v3 = *(_OWORD *)(v1 + 432);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE8DA4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 416);
  v3 = *(_OWORD *)(a1 + 432);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_1D5DE8DB0(double *a1)
{
  sub_1D5DC5518(*a1, a1[1], a1[2], a1[3]);
}

void sub_1D5DE8DD8(double *a1)
{
  sub_1D5DC5518(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE8E00(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 432);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 416);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE8E40;
}

void sub_1D5DE8E40(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC5518(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

__n128 sub_1D5DE8E74@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 448);
  v3 = *(_OWORD *)(v1 + 464);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE8E80@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 448);
  v3 = *(_OWORD *)(a1 + 464);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1D5DE8E8C(double *a1)
{
  return sub_1D5DC5718(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1D5DE8EB4(double *a1)
{
  return sub_1D5DC5718(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE8EDC(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 464);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 448);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE8F1C;
}

void sub_1D5DE8F1C(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC5718(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

__n128 sub_1D5DE8F50@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 480);
  v3 = *(_OWORD *)(v1 + 496);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE8F5C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 480);
  v3 = *(_OWORD *)(a1 + 496);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1D5DE8F68(double *a1)
{
  return sub_1D5DC5928(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1D5DE8F90(double *a1)
{
  return sub_1D5DC5928(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE8FB8(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 496);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 480);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE8FF8;
}

void sub_1D5DE8FF8(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC5928(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

double sub_1D5DE902C@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1D5DE9038@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

__n128 sub_1D5DE9044@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 512);
  v3 = *(_OWORD *)(v1 + 528);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1D5DE9050@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 512);
  v3 = *(_OWORD *)(a1 + 528);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_1D5DE905C(double *a1)
{
  sub_1D5DC5B40(*a1, a1[1], a1[2], a1[3]);
}

void sub_1D5DE9084(double *a1)
{
  sub_1D5DC5B40(*a1, a1[1], a1[2], a1[3]);
}

void (*sub_1D5DE90AC(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_OWORD *)(v1 + 528);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 512);
  *((_OWORD *)v3 + 1) = v4;
  return sub_1D5DE90EC;
}

void sub_1D5DE90EC(double **a1)
{
  double *v1;

  v1 = *a1;
  sub_1D5DC5B40(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

uint64_t sub_1D5DE9120(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5DE915C + 4 * byte_1D5E3DAA2[a1]))(0x52656C6369747261, 0xEB00000000646165);
}

uint64_t sub_1D5DE915C()
{
  return 0x53656C6369747261;
}

uint64_t sub_1D5DE917C()
{
  return 0x56656C6369747261;
}

uint64_t sub_1D5DE91A0()
{
  return 0x656B696C736964;
}

uint64_t sub_1D5DE91B8()
{
  return 0x7765695664656566;
}

uint64_t sub_1D5DE91D0()
{
  return 0x776F6C6C6F66;
}

uint64_t sub_1D5DE91E4()
{
  return 0x65726F6E6769;
}

uint64_t sub_1D5DE91F8()
{
  return 1701538156;
}

uint64_t sub_1D5DE9208()
{
  return 1702131053;
}

uint64_t sub_1D5DE9218()
{
  return 0x6465766173;
}

uint64_t sub_1D5DE922C()
{
  return 0x6572616873;
}

uint64_t sub_1D5DE9240()
{
  return 0x61547374726F7073;
}

uint64_t sub_1D5DE9264()
{
  return 0x6E69466B63617274;
}

uint64_t sub_1D5DE9288()
{
  return 0x73694C6B63617274;
}

uint64_t sub_1D5DE92AC()
{
  return 0x7369566B63617274;
}

uint64_t sub_1D5DE92CC()
{
  return 0x776F6C6C6F666E75;
}

uint64_t sub_1D5DE92E4()
{
  return 0x6574756D6E75;
}

uint64_t sub_1D5DE9300()
{
  unsigned __int8 *v0;

  return sub_1D5DE9120(*v0);
}

uint64_t sub_1D5DE9308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5DFFCDC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DE932C()
{
  return 0;
}

void sub_1D5DE9338(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_1D5DE9344()
{
  sub_1D5DEEEFC();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DE936C()
{
  sub_1D5DEEEFC();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DE9394(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6BC8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = *v1;
  v9 = *((_QWORD *)v1 + 2);
  v72 = *((_QWORD *)v1 + 3);
  v73 = v9;
  v10 = *((_QWORD *)v1 + 4);
  v11 = *((_QWORD *)v1 + 5);
  v70 = *((_QWORD *)v1 + 6);
  v71 = v10;
  v68 = *((_QWORD *)v1 + 7);
  v69 = v11;
  v12 = *((_QWORD *)v1 + 8);
  v66 = *((_QWORD *)v1 + 9);
  v67 = v12;
  v65 = *((_QWORD *)v1 + 10);
  v64 = *((_QWORD *)v1 + 11);
  v63 = *((_QWORD *)v1 + 12);
  v62 = *((_QWORD *)v1 + 13);
  v61 = *((_QWORD *)v1 + 14);
  v60 = *((_QWORD *)v1 + 15);
  v59 = *((_QWORD *)v1 + 16);
  v58 = *((_QWORD *)v1 + 17);
  v57 = *((_QWORD *)v1 + 18);
  v56 = *((_QWORD *)v1 + 19);
  v55 = *((_QWORD *)v1 + 20);
  v54 = *((_QWORD *)v1 + 21);
  v53 = *((_QWORD *)v1 + 22);
  v52 = *((_QWORD *)v1 + 23);
  v51 = *((_QWORD *)v1 + 24);
  v50 = *((_QWORD *)v1 + 25);
  v49 = *((_QWORD *)v1 + 26);
  v48 = *((_QWORD *)v1 + 27);
  v47 = *((_QWORD *)v1 + 28);
  v46 = *((_QWORD *)v1 + 29);
  v45 = *((_QWORD *)v1 + 30);
  v44 = *((_QWORD *)v1 + 31);
  v13 = a1[3];
  v41 = v1[16];
  v42 = *((_QWORD *)v1 + 34);
  v43 = *((_QWORD *)v1 + 35);
  v38 = v1[18];
  v39 = *((_QWORD *)v1 + 38);
  v40 = *((_QWORD *)v1 + 39);
  v35 = v1[20];
  v36 = *((_QWORD *)v1 + 42);
  v37 = *((_QWORD *)v1 + 43);
  v32 = v1[22];
  v33 = *((_QWORD *)v1 + 46);
  v34 = *((_QWORD *)v1 + 47);
  v29 = v1[24];
  v30 = *((_QWORD *)v1 + 50);
  v31 = *((_QWORD *)v1 + 51);
  v26 = v1[26];
  v27 = *((_QWORD *)v1 + 54);
  v28 = *((_QWORD *)v1 + 55);
  v23 = v1[28];
  v24 = *((_QWORD *)v1 + 58);
  v14 = *((_QWORD *)v1 + 60);
  v25 = *((_QWORD *)v1 + 59);
  v16 = *((_QWORD *)v1 + 61);
  v15 = *((_QWORD *)v1 + 62);
  v18 = *((_QWORD *)v1 + 63);
  v17 = *((_QWORD *)v1 + 64);
  v19 = *((_QWORD *)v1 + 65);
  v20 = *((_QWORD *)v1 + 66);
  v21 = *((_QWORD *)v1 + 67);
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_1D5DEEEFC();
  sub_1D5E379F8();
  v75 = v74;
  v76 = v73;
  v77 = v72;
  v78 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6BD8);
  sub_1D5DEEF40(&qword_1EFFB6BE0, &qword_1EFFB6BD8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
  sub_1D5E3789C();
  if (!v2)
  {
    *(_QWORD *)&v75 = v71;
    *((_QWORD *)&v75 + 1) = v69;
    v76 = v70;
    v77 = v68;
    v78 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6BE8);
    sub_1D5DEEF40(&qword_1EFFB6BF0, &qword_1EFFB6BE8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    *(_QWORD *)&v75 = v67;
    *((_QWORD *)&v75 + 1) = v66;
    v76 = v65;
    v77 = v64;
    v78 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6BF8);
    sub_1D5DEEF40(&qword_1EFFB6C00, &qword_1EFFB6BF8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    *(_QWORD *)&v75 = v63;
    *((_QWORD *)&v75 + 1) = v62;
    v76 = v61;
    v77 = v60;
    v78 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C08);
    sub_1D5DEEF40(&qword_1EFFB6C10, &qword_1EFFB6C08, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    *(_QWORD *)&v75 = v59;
    *((_QWORD *)&v75 + 1) = v58;
    v76 = v57;
    v77 = v56;
    v78 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C18);
    sub_1D5DEEF40(&qword_1EFFB6C20, &qword_1EFFB6C18, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    *(_QWORD *)&v75 = v55;
    *((_QWORD *)&v75 + 1) = v54;
    v76 = v53;
    v77 = v52;
    v78 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C28);
    sub_1D5DEEF40(&qword_1EFFB6C30, &qword_1EFFB6C28, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    *(_QWORD *)&v75 = v51;
    *((_QWORD *)&v75 + 1) = v50;
    v76 = v49;
    v77 = v48;
    v78 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C38);
    sub_1D5DEEF40(&qword_1EFFB6C40, &qword_1EFFB6C38, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    *(_QWORD *)&v75 = v47;
    *((_QWORD *)&v75 + 1) = v46;
    v76 = v45;
    v77 = v44;
    v78 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C48);
    sub_1D5DEEF40(&qword_1EFFB6C50, &qword_1EFFB6C48, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v75 = v41;
    v76 = v42;
    v77 = v43;
    v78 = 8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C58);
    sub_1D5DEEF40(&qword_1EFFB6C60, &qword_1EFFB6C58, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v75 = v38;
    v76 = v39;
    v77 = v40;
    v78 = 9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C68);
    sub_1D5DEEF40(&qword_1EFFB6C70, &qword_1EFFB6C68, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v75 = v35;
    v76 = v36;
    v77 = v37;
    v78 = 10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C78);
    sub_1D5DEEF40(&qword_1EFFB6C80, &qword_1EFFB6C78, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v75 = v32;
    v76 = v33;
    v77 = v34;
    v78 = 11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C88);
    sub_1D5DEEF40(&qword_1EFFB6C90, &qword_1EFFB6C88, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v75 = v29;
    v76 = v30;
    v77 = v31;
    v78 = 12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C98);
    sub_1D5DEEF40(&qword_1EFFB6CA0, &qword_1EFFB6C98, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v75 = v26;
    v76 = v27;
    v77 = v28;
    v78 = 13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6CA8);
    sub_1D5DEEF40(&qword_1EFFB6CB0, &qword_1EFFB6CA8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    v75 = v23;
    v76 = v24;
    v77 = v25;
    v78 = 14;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6CB8);
    sub_1D5DEEF40(&qword_1EFFB6CC0, &qword_1EFFB6CB8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    *(_QWORD *)&v75 = v14;
    *((_QWORD *)&v75 + 1) = v16;
    v76 = v15;
    v77 = v18;
    v78 = 15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6CC8);
    sub_1D5DEEF40(&qword_1EFFB6CD0, &qword_1EFFB6CC8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
    *(_QWORD *)&v75 = v17;
    *((_QWORD *)&v75 + 1) = v19;
    v76 = v20;
    v77 = v21;
    v78 = 16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6CD8);
    sub_1D5DEEF40(&qword_1EFFB6CE0, &qword_1EFFB6CD8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DE9F78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  char v110;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6CE8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEEEFC();
  sub_1D5E379E0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6BD8);
    v110 = 0;
    sub_1D5DEEF40(&qword_1EFFB6CF0, &qword_1EFFB6BD8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v10 = v108;
    v11 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6BE8);
    v110 = 1;
    sub_1D5DEEF40(&qword_1EFFB6CF8, &qword_1EFFB6BE8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v12 = v108;
    v13 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6BF8);
    v110 = 2;
    sub_1D5DEEF40(&qword_1EFFB6D00, &qword_1EFFB6BF8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v104 = *((_QWORD *)&v13 + 1);
    v105 = v13;
    v106 = *((_QWORD *)&v12 + 1);
    v107 = v12;
    v14 = v108;
    v15 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C08);
    v110 = 3;
    sub_1D5DEEF40(&qword_1EFFB6D08, &qword_1EFFB6C08, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v100 = *((_QWORD *)&v15 + 1);
    v101 = v15;
    v102 = *((_QWORD *)&v14 + 1);
    v103 = v14;
    v16 = v108;
    v17 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C18);
    v110 = 4;
    sub_1D5DEEF40(&qword_1EFFB6D10, &qword_1EFFB6C18, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v96 = *((_QWORD *)&v17 + 1);
    v97 = v17;
    v98 = *((_QWORD *)&v16 + 1);
    v99 = v16;
    v18 = v108;
    v19 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C28);
    v110 = 5;
    sub_1D5DEEF40(&qword_1EFFB6D18, &qword_1EFFB6C28, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v92 = *((_QWORD *)&v19 + 1);
    v93 = v19;
    v94 = *((_QWORD *)&v18 + 1);
    v95 = v18;
    v20 = v108;
    v21 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C38);
    v110 = 6;
    sub_1D5DEEF40(&qword_1EFFB6D20, &qword_1EFFB6C38, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v90 = *((_QWORD *)&v108 + 1);
    v91 = v108;
    v88 = *((_QWORD *)&v109 + 1);
    v89 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C48);
    v110 = 7;
    sub_1D5DEEF40(&qword_1EFFB6D28, &qword_1EFFB6C48, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v86 = *((_QWORD *)&v108 + 1);
    v87 = v108;
    v84 = *((_QWORD *)&v109 + 1);
    v85 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C58);
    v110 = 8;
    sub_1D5DEEF40(&qword_1EFFB6D30, &qword_1EFFB6C58, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v82 = *((_QWORD *)&v108 + 1);
    v83 = v108;
    v80 = *((_QWORD *)&v109 + 1);
    v81 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C68);
    v110 = 9;
    sub_1D5DEEF40(&qword_1EFFB6D38, &qword_1EFFB6C68, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v78 = *((_QWORD *)&v108 + 1);
    v79 = v108;
    v76 = *((_QWORD *)&v109 + 1);
    v77 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C78);
    v110 = 10;
    sub_1D5DEEF40(&qword_1EFFB6D40, &qword_1EFFB6C78, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v74 = *((_QWORD *)&v108 + 1);
    v75 = v108;
    v72 = *((_QWORD *)&v109 + 1);
    v73 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C88);
    v110 = 11;
    sub_1D5DEEF40(&qword_1EFFB6D48, &qword_1EFFB6C88, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v70 = *((_QWORD *)&v108 + 1);
    v71 = v108;
    v68 = *((_QWORD *)&v109 + 1);
    v69 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6C98);
    v110 = 12;
    sub_1D5DEEF40(&qword_1EFFB6D50, &qword_1EFFB6C98, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v66 = *((_QWORD *)&v108 + 1);
    v67 = v108;
    v64 = *((_QWORD *)&v109 + 1);
    v65 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6CA8);
    v110 = 13;
    sub_1D5DEEF40(&qword_1EFFB6D58, &qword_1EFFB6CA8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v62 = *((_QWORD *)&v108 + 1);
    v63 = v108;
    v60 = *((_QWORD *)&v109 + 1);
    v61 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6CB8);
    v110 = 14;
    sub_1D5DEEF40(&qword_1EFFB6D60, &qword_1EFFB6CB8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v58 = *((_QWORD *)&v108 + 1);
    v59 = v108;
    v56 = *((_QWORD *)&v109 + 1);
    v57 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6CC8);
    v110 = 15;
    sub_1D5DEEF40(&qword_1EFFB6D68, &qword_1EFFB6CC8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    v54 = *((_QWORD *)&v108 + 1);
    v55 = v108;
    v52 = *((_QWORD *)&v109 + 1);
    v53 = v109;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6CD8);
    v110 = 16;
    sub_1D5DEEF40(&qword_1EFFB6D70, &qword_1EFFB6CD8, (uint64_t)&protocol conformance descriptor for ConditionalConfigurableValue<A, B>);
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *(_OWORD *)a2 = v10;
    *(_OWORD *)(a2 + 16) = v11;
    v23 = v106;
    *(_QWORD *)(a2 + 32) = v107;
    *(_QWORD *)(a2 + 40) = v23;
    v24 = v104;
    *(_QWORD *)(a2 + 48) = v105;
    *(_QWORD *)(a2 + 56) = v24;
    v25 = v102;
    *(_QWORD *)(a2 + 64) = v103;
    *(_QWORD *)(a2 + 72) = v25;
    v26 = v100;
    *(_QWORD *)(a2 + 80) = v101;
    *(_QWORD *)(a2 + 88) = v26;
    v27 = v98;
    *(_QWORD *)(a2 + 96) = v99;
    *(_QWORD *)(a2 + 104) = v27;
    v28 = v96;
    *(_QWORD *)(a2 + 112) = v97;
    *(_QWORD *)(a2 + 120) = v28;
    v29 = v94;
    *(_QWORD *)(a2 + 128) = v95;
    *(_QWORD *)(a2 + 136) = v29;
    v30 = v92;
    *(_QWORD *)(a2 + 144) = v93;
    *(_QWORD *)(a2 + 152) = v30;
    *(_OWORD *)(a2 + 160) = v20;
    *(_OWORD *)(a2 + 176) = v21;
    v31 = v90;
    *(_QWORD *)(a2 + 192) = v91;
    *(_QWORD *)(a2 + 200) = v31;
    v32 = v88;
    *(_QWORD *)(a2 + 208) = v89;
    *(_QWORD *)(a2 + 216) = v32;
    v33 = v86;
    *(_QWORD *)(a2 + 224) = v87;
    *(_QWORD *)(a2 + 232) = v33;
    v34 = v84;
    *(_QWORD *)(a2 + 240) = v85;
    *(_QWORD *)(a2 + 248) = v34;
    v35 = v82;
    *(_QWORD *)(a2 + 256) = v83;
    *(_QWORD *)(a2 + 264) = v35;
    v36 = v80;
    *(_QWORD *)(a2 + 272) = v81;
    *(_QWORD *)(a2 + 280) = v36;
    v37 = v78;
    *(_QWORD *)(a2 + 288) = v79;
    *(_QWORD *)(a2 + 296) = v37;
    v38 = v76;
    *(_QWORD *)(a2 + 304) = v77;
    *(_QWORD *)(a2 + 312) = v38;
    v39 = v74;
    *(_QWORD *)(a2 + 320) = v75;
    *(_QWORD *)(a2 + 328) = v39;
    v40 = v72;
    *(_QWORD *)(a2 + 336) = v73;
    *(_QWORD *)(a2 + 344) = v40;
    v41 = v70;
    *(_QWORD *)(a2 + 352) = v71;
    *(_QWORD *)(a2 + 360) = v41;
    v42 = v68;
    *(_QWORD *)(a2 + 368) = v69;
    *(_QWORD *)(a2 + 376) = v42;
    v43 = v66;
    *(_QWORD *)(a2 + 384) = v67;
    *(_QWORD *)(a2 + 392) = v43;
    v44 = v64;
    *(_QWORD *)(a2 + 400) = v65;
    *(_QWORD *)(a2 + 408) = v44;
    v45 = v62;
    *(_QWORD *)(a2 + 416) = v63;
    *(_QWORD *)(a2 + 424) = v45;
    v46 = v60;
    *(_QWORD *)(a2 + 432) = v61;
    *(_QWORD *)(a2 + 440) = v46;
    v47 = v58;
    *(_QWORD *)(a2 + 448) = v59;
    *(_QWORD *)(a2 + 456) = v47;
    v48 = v56;
    *(_QWORD *)(a2 + 464) = v57;
    *(_QWORD *)(a2 + 472) = v48;
    v49 = v54;
    *(_QWORD *)(a2 + 480) = v55;
    *(_QWORD *)(a2 + 488) = v49;
    v50 = v52;
    *(_QWORD *)(a2 + 496) = v53;
    *(_QWORD *)(a2 + 504) = v50;
    v51 = v109;
    *(_OWORD *)(a2 + 512) = v108;
    *(_OWORD *)(a2 + 528) = v51;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DEAB78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D5DE9F78(a1, a2);
}

uint64_t sub_1D5DEAB8C(_QWORD *a1)
{
  return sub_1D5DE9394(a1);
}

__n128 sub_1D5DEABA4@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 sub_1D5DEABB0@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[1];
  *a1 = result;
  return result;
}

BOOL sub_1D5DEABBC(double *a1, double *a2)
{
  return sub_1D5DEE8E4(a1, a2);
}

unint64_t sub_1D5DEABDC()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000018;
  else
    return 0xD000000000000019;
}

uint64_t sub_1D5DEAC1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5E00438(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DEAC40()
{
  return 0;
}

void sub_1D5DEAC4C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DEAC58()
{
  sub_1D5DEEF80();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DEAC80()
{
  sub_1D5DEEF80();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DEACA8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6D78);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = v1[1];
  v11 = v1[2];
  v12 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEEF80();
  sub_1D5E379F8();
  v16 = v9;
  v17 = v10;
  v15 = 0;
  sub_1D5DAC578();
  sub_1D5E3789C();
  if (!v2)
  {
    v16 = v11;
    v17 = v12;
    v15 = 1;
    sub_1D5E3789C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D5DEADF8@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6D88);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEEF80();
  sub_1D5E379E0();
  if (!v2)
  {
    v14 = 0;
    sub_1D5DAC530();
    sub_1D5E377D0();
    v10 = v13;
    v14 = 1;
    sub_1D5E377D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v11 = v13;
    *a2 = v10;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DEAF80@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1D5DEADF8(a1, a2);
}

uint64_t sub_1D5DEAF94(_QWORD *a1)
{
  return sub_1D5DEACA8(a1);
}

BOOL sub_1D5DEAFA8(double *a1, double *a2)
{
  return sub_1D5DEE8E4(a1, a2);
}

double sub_1D5DEAFC0()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t sub_1D5DEAFCC()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DEB014()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DEB054()
{
  return 0;
}

void sub_1D5DEB060(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D5DEB06C()
{
  sub_1D5DEEFC4();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DEB094()
{
  sub_1D5DEEFC4();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DEB0BC(_QWORD *a1)
{
  return sub_1D5DEB0E8(a1, &qword_1EFFB6D90, (void (*)(void))sub_1D5DEEFC4);
}

uint64_t sub_1D5DEB0E8(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_1D5E379F8();
  v14 = 0;
  v10 = v12[1];
  sub_1D5E37884();
  if (!v10)
  {
    v13 = 1;
    sub_1D5E37884();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1D5DEB20C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DEB238(a1, &qword_1EFFB6DA0, (void (*)(void))sub_1D5DEEFC4, a2);
}

uint64_t sub_1D5DEB238@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v19 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_1D5E379E0();
  if (!v4)
  {
    v11 = v18;
    v12 = v19;
    v21 = 0;
    sub_1D5E377B8();
    v14 = v13;
    v20 = 1;
    sub_1D5E377B8();
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v12);
    *v11 = v14;
    v11[1] = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D5DEB390@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5DEB20C(a1, a2);
}

uint64_t sub_1D5DEB3A4(_QWORD *a1)
{
  return sub_1D5DEB0BC(a1);
}

uint64_t sub_1D5DEB3BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D5DEB3F4 + 4 * byte_1D5E3DAB3[a1]))(0xD000000000000013, 0x80000001D5E4B380);
}

uint64_t sub_1D5DEB3F4(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_1D5DEB45C()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DEB4A4()
{
  sub_1D5E379A4();
  sub_1D5E379B0();
  return sub_1D5E379C8();
}

uint64_t sub_1D5DEB4E4()
{
  unsigned __int8 *v0;

  return sub_1D5DEB3BC(*v0);
}

uint64_t sub_1D5DEB4EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D5E00620(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D5DEB510()
{
  return 0;
}

void sub_1D5DEB51C(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1D5DEB528()
{
  sub_1D5DEF008();
  return sub_1D5E37A04();
}

uint64_t sub_1D5DEB550()
{
  sub_1D5DEF008();
  return sub_1D5E37A10();
}

uint64_t sub_1D5DEB578(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[237];
  char v42;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6DA8);
  v36 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  v9 = v2[1];
  v10 = *((_BYTE *)v2 + 16);
  LODWORD(v39) = *((unsigned __int8 *)v2 + 17);
  LODWORD(v38) = *((unsigned __int8 *)v2 + 18);
  v11 = v2[3];
  v37 = v2[4];
  v12 = v2[368];
  v34 = v2[369];
  v35 = v12;
  v13 = v2[370];
  v14 = v2[371];
  v15 = v2[372];
  v16 = v2[373];
  v17 = v2[374];
  v18 = v2[375];
  v19 = v2[376];
  v32 = v2[377];
  v33 = v19;
  v31 = v2[378];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D5DEF008();
  sub_1D5E379F8();
  v41[0] = v8;
  v41[1] = v9;
  LOBYTE(v41[2]) = v10;
  BYTE1(v41[2]) = v39;
  BYTE2(v41[2]) = v38;
  v20 = v7;
  v41[3] = v11;
  v41[4] = v37;
  v42 = 0;
  sub_1D5DEF04C();
  v21 = v40;
  sub_1D5E3789C();
  if (v21)
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v4);
  v23 = v32;
  v24 = v33;
  v29 = v18;
  v30 = v17;
  v37 = v16;
  v38 = v15;
  v39 = v14;
  v40 = v13;
  v26 = v34;
  v25 = v35;
  v27 = v31;
  v28 = v36;
  memcpy(v41, v2 + 5, sizeof(v41));
  v42 = 1;
  sub_1D5DBE3B0();
  sub_1D5E3789C();
  memcpy(v41, v2 + 242, 0x3EBuLL);
  v42 = 2;
  sub_1D5DEF090();
  sub_1D5E3789C();
  v41[0] = v25;
  v41[1] = v26;
  v41[2] = v40;
  v41[3] = v39;
  v41[4] = v38;
  v41[5] = v37;
  v41[6] = v30;
  v41[7] = v29;
  v41[8] = v24;
  v42 = 3;
  sub_1D5DEF0D4();
  sub_1D5E3789C();
  v41[0] = v23;
  v42 = 4;
  sub_1D5DEF118();
  sub_1D5E3789C();
  v41[0] = v27;
  v42 = 5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEF98);
  sub_1D5DEF15C(&qword_1ED9AEFA0, (uint64_t (*)(void))sub_1D5DEF1D0, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
  sub_1D5E3789C();
  memcpy(v41, v2 + 379, 0x238uLL);
  v42 = 6;
  sub_1D5DEF214();
  sub_1D5E3789C();
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v20, v4);
}

uint64_t sub_1D5DEB90C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  void *v51;
  _QWORD v52[450];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[237];
  _BYTE v59[1003];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[576];
  _BYTE v72[568];
  _BYTE v73[1008];
  _BYTE v74[1003];
  _BYTE v75[1904];
  _BYTE v76[1896];
  _BYTE v77[568];
  _BYTE v78[1003];
  _BYTE v79[1896];
  _QWORD *v80;

  v3 = (_QWORD *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB6DE0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v3[3];
  v80 = v3;
  __swift_project_boxed_opaque_existential_1(v3, v11);
  sub_1D5DEF008();
  sub_1D5E379E0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
  v12 = v7;
  v51 = v5;
  LOBYTE(v52[0]) = 0;
  sub_1D5DEF258();
  sub_1D5E377D0();
  v13 = v53;
  v14 = v54;
  v49 = BYTE1(v55);
  v50 = v55;
  v15 = BYTE2(v55);
  v16 = v56;
  v17 = v57;
  v75[1903] = 1;
  sub_1D5DBE2A4();
  sub_1D5E377D0();
  v47 = v15;
  v46 = v17;
  v48 = v16;
  memcpy(v75, v76, 0x768uLL);
  memcpy(v79, v76, sizeof(v79));
  v73[1007] = 2;
  sub_1D5DBBE24((uint64_t)v75);
  sub_1D5DEF29C();
  v18 = v6;
  sub_1D5E377D0();
  memcpy(v73, v74, 0x3EBuLL);
  memcpy(v78, v74, sizeof(v78));
  LOBYTE(v52[0]) = 3;
  sub_1D5DEF2E0();
  sub_1D5E377D0();
  v44 = v54;
  v45 = v53;
  v19 = v55;
  v20 = v56;
  v21 = v57;
  v22 = v58[0];
  v23 = v58[1];
  v24 = v58[2];
  v25 = v58[3];
  LOBYTE(v52[0]) = 4;
  sub_1D5DEF324();
  sub_1D5E377D0();
  v42 = v24;
  v43 = v22;
  v38 = v21;
  v39 = v20;
  v40 = v19;
  v41 = v23;
  v26 = v53;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9AEF98);
  LOBYTE(v52[0]) = 5;
  sub_1D5DEF15C(&qword_1EFFB6E08, (uint64_t (*)(void))sub_1D5DEF368, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
  swift_bridgeObjectRetain();
  sub_1D5E377D0();
  v27 = v53;
  v71[575] = 6;
  sub_1D5DEF3AC();
  swift_bridgeObjectRetain();
  sub_1D5E377D0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v18);
  memcpy(&v52[379], v72, 0x238uLL);
  memcpy(v77, v72, sizeof(v77));
  v52[0] = v13;
  v52[1] = v14;
  LOBYTE(v12) = v49;
  v28 = v50;
  LOBYTE(v52[2]) = v50;
  BYTE1(v52[2]) = v49;
  BYTE2(v52[2]) = v47;
  v29 = v46;
  v52[3] = v48;
  v52[4] = v46;
  memcpy(&v52[5], v75, 0x768uLL);
  memcpy(&v52[242], v73, 0x3EBuLL);
  v31 = v44;
  v30 = v45;
  v52[368] = v45;
  v52[369] = v44;
  v33 = v39;
  v32 = v40;
  v52[370] = v40;
  v52[371] = v39;
  v34 = v38;
  v52[372] = v38;
  v52[373] = v43;
  v35 = v41;
  v52[374] = v41;
  v52[375] = v42;
  v52[376] = v25;
  v52[377] = v26;
  v52[378] = v27;
  sub_1D5DEF3F0((uint64_t)v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D5DBE3F4((uint64_t)v75);
  memcpy(v51, v52, 0xE10uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
  v53 = v13;
  v54 = v14;
  LOBYTE(v55) = v28;
  BYTE1(v55) = v12;
  BYTE2(v55) = v47;
  v56 = v48;
  v57 = v29;
  memcpy(v58, v79, sizeof(v58));
  memcpy(v59, v78, sizeof(v59));
  v60 = v30;
  v61 = v31;
  v62 = v32;
  v63 = v33;
  v64 = v34;
  v65 = v43;
  v66 = v35;
  v67 = v42;
  v68 = v25;
  v69 = v26;
  v70 = v27;
  memcpy(v71, v77, 0x238uLL);
  return sub_1D5DEF4F4((uint64_t)&v53);
}

uint64_t sub_1D5DEBFC4(uint64_t a1, uint64_t a2)
{
  return sub_1D5DEB90C(a1, a2);
}

uint64_t sub_1D5DEBFD8(_QWORD *a1)
{
  return sub_1D5DEB578(a1);
}

void sub_1D5DEBFF0(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE v8[432];
  _BYTE v9[431];
  char v10;
  _BYTE v11[432];
  _BYTE __src[432];
  _OWORD v13[2];
  uint64_t v14;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[3];
  __int16 v21;
  _QWORD v22[2];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_1ED9ADA20 != -1)
    swift_once();
  v13[0] = xmmword_1ED9AE640;
  v13[1] = xmmword_1ED9AE650;
  v14 = qword_1ED9AE660;
  v2 = xmmword_1ED9AE640;
  v3 = xmmword_1ED9AE650;
  v4 = qword_1ED9AE660;
  v5 = MEMORY[0x1E0DEE9D8];
  v32[0] = 0;
  v32[1] = MEMORY[0x1E0DEE9D8];
  v33 = xmmword_1ED9AE640;
  v34 = xmmword_1ED9AE650;
  v35 = qword_1ED9AE660;
  v36 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  memset(v20, 0, sizeof(v20));
  v21 = 256;
  v6 = MEMORY[0x1E0DEE9E8];
  sub_1D5DC745C(0, (uint64_t)v13, 0, (uint64_t)v13, 0, (uint64_t)v13, 0, (uint64_t)v13, (uint64_t)__src, 1.0, 0, (uint64_t)v13, 0, (uint64_t)v13, (uint64_t)v32, 1, MEMORY[0x1E0DEE9E8], (uint64_t)v20);
  v27[0] = 0;
  v27[1] = v5;
  v28 = v2;
  v29 = v3;
  v30 = v4;
  v31 = v5;
  swift_bridgeObjectRelease();
  sub_1D5DC77A8(0, (uint64_t)v13, 0, (uint64_t)v13, 0, (uint64_t)v13, 0, (uint64_t)v13, (uint64_t)v11, 1.0, 0, (uint64_t)v13, 0, (uint64_t)v13, (uint64_t)v27, 1, v6, (uint64_t)v20);
  v10 = 1;
  v7 = sub_1D5DC5F6C(v5);
  v22[0] = 0;
  v22[1] = v5;
  v23 = v2;
  v24 = v3;
  v25 = v4;
  v26 = v5;
  swift_bridgeObjectRelease();
  sub_1D5DC7AF4(0, (uint64_t)v13, 0, (uint64_t)v13, 0, (uint64_t)v13, 0, (uint64_t)v13, (uint64_t)v9, 1.0, 0, (uint64_t)v13, 0, (uint64_t)v13, (uint64_t)v22, 1, v6, (uint64_t)v20);
  v15[0] = 0;
  v15[1] = v5;
  v16 = v2;
  v17 = v3;
  v18 = v4;
  v19 = v5;
  swift_bridgeObjectRelease();
  sub_1D5DC7E28(0, (uint64_t)v13, 0, (uint64_t)v13, 0, (uint64_t)v13, 0, (uint64_t)v13, (uint64_t)v8, 1.0, 0, (uint64_t)v13, 0, (uint64_t)v13, (uint64_t)v15, 1, v6, (uint64_t)v20);
  sub_1D5DCE008(__src, v11, &v10, 0, (uint64_t)v7, 0, 0, 0, a1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, v9,
    0,
    0,
    v8,
    0,
    0,
    0,
    0,
    0.0);
}

unint64_t sub_1D5DEC2D4()
{
  unint64_t result;

  result = qword_1EFFB5CF8;
  if (!qword_1EFFB5CF8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E44198, &_s13ConfigurationV31PublisherDampeningConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5CF8);
  }
  return result;
}

unint64_t sub_1D5DEC318()
{
  unint64_t result;

  result = qword_1EFFB5D00;
  if (!qword_1EFFB5D00)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DBDC, &_s13ConfigurationV31PublisherDampeningConfigurationV17DampeningStrategyON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5D00);
  }
  return result;
}

unint64_t sub_1D5DEC35C()
{
  unint64_t result;

  result = qword_1EFFB5D18;
  if (!qword_1EFFB5D18)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DBB4, &_s13ConfigurationV31PublisherDampeningConfigurationV17DampeningStrategyON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5D18);
  }
  return result;
}

uint64_t sub_1D5DEC3A0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED9AD908);
    v10[0] = a2;
    v10[1] = a3;
    result = MEMORY[0x1D827D8E0](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_1D5DEC404(float64x2_t *a1, float64x2_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].f64[0] == a2[2].f64[0];
}

uint64_t sub_1D5DEC44C(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 48) & 1) != 0)
        return 1;
    }
    else if ((*(_BYTE *)(a2 + 48) & 1) == 0
           && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 8), *(float64x2_t *)(a2 + 8)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(a2 + 24)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 40) == *(double *)(a2 + 40))
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1D5DEC4CC(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  v2 = *(double *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v9 = *(float64x2_t *)(a1 + 16);
  v10 = *(float64x2_t *)(a1 + 32);
  v7 = *(float64x2_t *)(a2 + 16);
  v8 = *(float64x2_t *)(a2 + 32);
  v4 = *(double *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  if (!sub_1D5DD20D0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)))
    return 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v9, v7), (int32x4_t)vceqq_f64(v10, v8))), 0xFuLL))) & 1) != 0&& v2 == v4)
  {
    return sub_1D5DD213C(v3, v5);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1D5DEC594(char *__src, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  double v16;
  double v17;
  int v18;
  uint64_t v19;
  double v20;
  double v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  char v35;
  int v36;
  uint16x4_t v37;
  int v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  int v43;
  float64_t v44;
  float64_t v45;
  float64_t v46;
  float64_t v47;
  uint64_t v48;
  float64_t v49;
  float64_t v50;
  float64_t v51;
  float64_t v52;
  int v53;
  int v54;
  double v55;
  int v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  _BYTE v63[432];
  _BYTE v64[432];
  _BYTE v65[432];
  _BYTE v66[432];
  _BYTE v67[432];
  _BYTE v68[432];
  _BYTE __dst[432];
  _BYTE v70[440];

  v2 = a2;
  v4 = a2 + 888;
  v5 = __src + 888;
  memcpy(__dst, __src, 0x1AAuLL);
  memcpy(v67, __src + 432, 0x1AAuLL);
  v55 = *((double *)__src + 108);
  v53 = __src[872];
  v48 = *((_QWORD *)__src + 110);
  v43 = __src[888];
  v59 = *((_QWORD *)__src + 112);
  v61 = v5[16];
  v60 = v5[17];
  v52 = *((double *)__src + 114);
  v50 = *((double *)__src + 115);
  v62 = *((_QWORD *)__src + 116);
  v51 = *((double *)__src + 117);
  v49 = *((double *)__src + 118);
  memcpy(v65, __src + 952, 0x1AAuLL);
  v58 = *((double *)__src + 173);
  v6 = *((double *)__src + 174);
  v56 = __src[1400];
  v57 = *((_QWORD *)__src + 176);
  v7 = *((double *)__src + 177);
  memcpy(v63, __src + 1424, 0x1AAuLL);
  v8 = *((double *)__src + 236);
  memcpy(v70, (const void *)v2, 0x1AAuLL);
  memcpy(v68, (const void *)(v2 + 432), 0x1AAuLL);
  v9 = *(double *)(v2 + 864);
  v54 = *(unsigned __int8 *)(v2 + 872);
  v10 = *(_QWORD *)(v2 + 880);
  v11 = *(unsigned __int8 *)(v2 + 888);
  v12 = *(_QWORD *)(v2 + 896);
  v13 = *(unsigned __int8 *)(v4 + 16);
  v14 = *(unsigned __int8 *)(v4 + 17);
  v47 = *(double *)(v2 + 912);
  v45 = *(double *)(v2 + 920);
  v15 = *(_QWORD *)(v2 + 928);
  v46 = *(double *)(v2 + 936);
  v44 = *(double *)(v2 + 944);
  memcpy(v66, (const void *)(v2 + 952), 0x1AAuLL);
  v16 = *(double *)(v2 + 1384);
  v17 = *(double *)(v2 + 1392);
  v18 = *(unsigned __int8 *)(v2 + 1400);
  v19 = *(_QWORD *)(v2 + 1408);
  v20 = *(double *)(v2 + 1416);
  memcpy(v64, (const void *)(v2 + 1424), 0x1AAuLL);
  v41 = *((float64x2_t *)__src + 116);
  v42 = *((float64x2_t *)__src + 117);
  v39 = *(float64x2_t *)(v2 + 1856);
  v40 = *(float64x2_t *)(v2 + 1872);
  v21 = *(double *)(v2 + 1888);
  sub_1D5E00A10((uint64_t)__dst);
  sub_1D5E00A10((uint64_t)v70);
  LOBYTE(v2) = sub_1D5DD46D8((uint64_t)__dst, (uint64_t)v70, (void (*)(__int128 *, double))sub_1D5E00C38, (void (*)(__int128 *))sub_1D5E00C3C);
  sub_1D5E00A58((uint64_t)v70);
  sub_1D5E00A58((uint64_t)__dst);
  if ((v2 & 1) == 0)
    return 0;
  v38 = v13;
  sub_1D5E00A10((uint64_t)v67);
  sub_1D5E00A10((uint64_t)v68);
  v22 = sub_1D5DD46D8((uint64_t)v67, (uint64_t)v68, (void (*)(__int128 *, double))sub_1D5E00C30, (void (*)(__int128 *))sub_1D5E00C34);
  sub_1D5E00A58((uint64_t)v68);
  sub_1D5E00A58((uint64_t)v67);
  result = 0;
  if ((v22 & 1) != 0 && v55 == v9)
  {
    if (v53)
    {
      if (v53 == 1)
      {
        v24 = 0x6C616E6F73726570;
        v25 = 0xEC00000064657A69;
        v26 = v54;
        if (!v54)
        {
LABEL_15:
          v27 = 0xE700000000000000;
          if (v24 != 0x6C616369706F74)
            goto LABEL_20;
          goto LABEL_18;
        }
      }
      else
      {
        v24 = 0x6669737265766964;
        v25 = 0xEB00000000646569;
        v26 = v54;
        if (!v54)
          goto LABEL_15;
      }
    }
    else
    {
      v25 = 0xE700000000000000;
      v24 = 0x6C616369706F74;
      v26 = v54;
      if (!v54)
        goto LABEL_15;
    }
    if (v26 == 1)
    {
      v27 = 0xEC00000064657A69;
      if (v24 != 0x6C616E6F73726570)
        goto LABEL_20;
    }
    else
    {
      v27 = 0xEB00000000646569;
      if (v24 != 0x6669737265766964)
        goto LABEL_20;
    }
LABEL_18:
    if (v25 == v27)
    {
      swift_bridgeObjectRelease_n();
      v28 = v57;
LABEL_21:
      v30 = sub_1D5DCEBFC(v48, v10);
      result = 0;
      v31.f64[0] = v52;
      v31.f64[1] = v50;
      v32.f64[0] = v51;
      v32.f64[1] = v49;
      v33.f64[0] = v47;
      v33.f64[1] = v45;
      v34.f64[0] = v46;
      v34.f64[1] = v44;
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v31, v33), (int32x4_t)vceqq_f64(v32, v34))), 0xFuLL))) & 1) != 0&& ((v43 ^ v11) & 1) == 0&& ((v61 ^ v38) & 1) == 0&& ((v60 ^ v14) & 1) == 0&& (v30 & 1) != 0&& v59 == v12&& v62 == v15)
      {
        sub_1D5E00A10((uint64_t)v65);
        sub_1D5E00A10((uint64_t)v66);
        v35 = sub_1D5DD46D8((uint64_t)v65, (uint64_t)v66, (void (*)(__int128 *, double))sub_1D5E00C20, (void (*)(__int128 *))sub_1D5E00C24);
        sub_1D5E00A58((uint64_t)v66);
        sub_1D5E00A58((uint64_t)v65);
        result = 0;
        if ((v35 & 1) != 0 && v58 == v16 && v6 == v17 && v56 == v18 && v28 == v19 && v7 == v20)
        {
          sub_1D5E00A10((uint64_t)v63);
          sub_1D5E00A10((uint64_t)v64);
          v36 = sub_1D5DD46D8((uint64_t)v63, (uint64_t)v64, (void (*)(__int128 *, double))sub_1D5E00978, (void (*)(__int128 *))sub_1D5E009A0);
          sub_1D5E00A58((uint64_t)v64);
          sub_1D5E00A58((uint64_t)v63);
          v37 = (uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v41, v39), (int32x4_t)vceqq_f64(v42, v40))), 0xFuLL));
          v37.i16[0] = vminv_u16(v37);
          return v36 & v37.i32[0] & (v8 == v21);
        }
      }
      return result;
    }
LABEL_20:
    v29 = sub_1D5E378FC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    v28 = v57;
    if ((v29 & 1) == 0)
      return result;
    goto LABEL_21;
  }
  return result;
}

BOOL sub_1D5DECB54(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL), (float64x2_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(a2 + 24)))), 0xFuLL))) & 1) != 0&& *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    return *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return result;
}

uint64_t sub_1D5DECBBC(uint64_t a1, uint64_t a2)
{
  char v2;
  float64x2_t v3;
  float64x2_t v4;

  v2 = 0;
  v3.f64[0] = *(float64_t *)a1;
  v4.f64[0] = *(float64_t *)a2;
  v3.f64[1] = *(float64_t *)(a1 + 16);
  v4.f64[1] = *(float64_t *)(a2 + 16);
  if ((vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v3, v4), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)))), (int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 64), *(float64x2_t *)(a2 + 64)))))), 7uLL))) & 1) == 0&& *(double *)(a1 + 80) == *(double *)(a2 + 80)&& *(double *)(a1 + 88) == *(double *)(a2 + 88)&& ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 24) ^ *(unsigned __int8 *)(a2 + 24)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 96) ^ *(unsigned __int8 *)(a2 + 96)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 97) ^ *(unsigned __int8 *)(a2 + 97)) & 1) == 0)
  {
    v2 = *(_BYTE *)(a2 + 98) ^ *(_BYTE *)(a1 + 98) ^ 1;
  }
  return v2 & 1;
}

BOOL sub_1D5DECC9C(float64x2_t *a1, float64x2_t *a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].f64[0] == a2[2].f64[0])
  {
    return a1[2].f64[1] == a2[2].f64[1];
  }
  return result;
}

BOOL sub_1D5DECCF4(uint64_t a1, uint64_t a2, double a3, double a4, int64x2_t a5)
{
  int64x2_t v5;
  _BOOL8 result;

  result = 0;
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48)
    && ((*(unsigned __int8 *)(a1 + 112) ^ *(unsigned __int8 *)(a2 + 112)) & 1) == 0)
  {
    a5.i64[0] = *(_QWORD *)(a1 + 40);
    v5.i64[0] = *(_QWORD *)(a2 + 40);
    if ((vminvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 8), *(float64x2_t *)(a2 + 8)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(a2 + 24))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vzip1q_s64(a5, *(int64x2_t *)(a1 + 56)), (float64x2_t)vzip1q_s64(v5, *(int64x2_t *)(a2 + 56))), (int32x4_t)vceqq_f64(
                                                                             (float64x2_t)vextq_s8(*(int8x16_t *)(a1 + 56), *(int8x16_t *)(a1 + 72), 8uLL), (float64x2_t)vextq_s8(*(int8x16_t *)(a2 + 56), *(int8x16_t *)(a2 + 72), 8uLL)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 80), *(float64x2_t *)(a2 + 80)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a2 + 96))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 120), *(float64x2_t *)(a2 + 120)),
                                                                (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 136), *(float64x2_t *)(a2 + 136))))), 7uLL))) & (*(double *)(a1 + 152) == *(double *)(a2 + 152)) & ~(*(_BYTE *)a1 ^ *(_BYTE *)a2) & (*(double *)(a1 + 168) == *(double *)(a2 + 168))) != 0&& ((*(unsigned __int8 *)(a1 + 160) ^ *(unsigned __int8 *)(a2 + 160)) & 1) == 0)
    {
      return *(double *)(a1 + 176) == *(double *)(a2 + 176);
    }
  }
  return result;
}

uint64_t sub_1D5DECE18(uint64_t a1, uint64_t a2)
{
  char v3;
  float64x2_t v4;
  float64x2_t v5;
  int8x16_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  int v10;
  float64x2_t v11;
  float64x2_t v12;
  double v13;
  double v14;
  int v15;
  int8x16_t v16;
  uint64_t v17;
  float64x2_t v18;
  uint64_t v19;
  double v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  char v29;
  char v30;
  double v31;
  double v32;
  int v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  double v48;
  int8x16_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  BOOL v54;
  int v55;
  int v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  unsigned __int8 v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  double v72;
  double v73;
  double v74;
  double v75;
  int v76;
  double v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;
  char v82;
  int32x4_t v83;
  uint8x16_t v84;
  __int32 v85;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  double v95;
  float64x2_t v96;
  float64x2_t v97;
  double v98;
  float64x2_t v99;
  float64x2_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  double v104;
  float64x2_t v105;
  double v106;
  double v107;
  float64x2_t v108;
  int8x16_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  char v133;
  double v134;
  double v135;
  int v136;
  float64x2_t v137;
  double v138;
  double v139;
  float64x2_t v140;
  int8x16_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  double v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;

  v3 = 0;
  v4 = *(float64x2_t *)(a1 + 32);
  v5 = *(float64x2_t *)(a1 + 48);
  v6 = *(int8x16_t *)a1;
  v7 = *(float64x2_t *)(a1 + 16);
  v8 = *(float64x2_t *)(a1 + 64);
  v9 = *(float64x2_t *)(a1 + 80);
  v10 = *(unsigned __int8 *)(a1 + 96);
  v11 = *(float64x2_t *)(a1 + 104);
  v12 = *(float64x2_t *)(a1 + 120);
  v14 = *(double *)(a1 + 136);
  v13 = *(double *)(a1 + 144);
  v15 = *(unsigned __int8 *)(a1 + 152);
  v16 = *(int8x16_t *)(a1 + 160);
  v17 = *(_QWORD *)(a1 + 176);
  v18 = *(float64x2_t *)(a1 + 184);
  v20 = *(double *)(a1 + 200);
  v19 = *(_QWORD *)(a1 + 208);
  v21 = *(_BYTE *)(a1 + 216);
  v22 = *(_QWORD *)(a1 + 224);
  v23 = *(_BYTE *)(a1 + 232);
  v24 = *(_OWORD *)(a1 + 240);
  v25 = *(_OWORD *)(a1 + 256);
  v26 = *(_OWORD *)(a1 + 272);
  v27 = *(_OWORD *)(a1 + 288);
  v28 = *(_BYTE *)(a1 + 304);
  v29 = *(_BYTE *)(a1 + 305);
  v30 = *(_BYTE *)(a1 + 306);
  v31 = *(double *)(a1 + 312);
  v32 = *(double *)(a1 + 320);
  v152 = *(double *)(a1 + 392);
  v33 = *(unsigned __int8 *)(a1 + 400);
  v34 = *(double *)(a1 + 408);
  v35 = *(_OWORD *)(a1 + 560);
  v185 = *(_OWORD *)(a1 + 544);
  v186 = v35;
  v187 = *(_OWORD *)(a1 + 576);
  v188 = *(_QWORD *)(a1 + 592);
  v36 = *(_OWORD *)(a1 + 496);
  v181 = *(_OWORD *)(a1 + 480);
  v182 = v36;
  v37 = *(_OWORD *)(a1 + 528);
  v183 = *(_OWORD *)(a1 + 512);
  v184 = v37;
  v38 = *(_OWORD *)(a1 + 432);
  v177 = *(_OWORD *)(a1 + 416);
  v178 = v38;
  v39 = *(_OWORD *)(a1 + 464);
  v179 = *(_OWORD *)(a1 + 448);
  v180 = v39;
  v41 = *(float64x2_t *)(a1 + 632);
  v40 = *(float64x2_t *)(a1 + 648);
  v42 = *(float64x2_t *)(a1 + 616);
  v143 = *(float64x2_t *)(a1 + 680);
  v141 = *(int8x16_t *)(a1 + 600);
  v142 = *(float64x2_t *)(a1 + 664);
  v140 = *(float64x2_t *)(a1 + 696);
  v136 = *(unsigned __int8 *)(a1 + 712);
  v43 = *(_OWORD *)(a2 + 560);
  v197 = *(_OWORD *)(a2 + 544);
  v198 = v43;
  v199 = *(_OWORD *)(a2 + 576);
  v44 = *(_OWORD *)(a2 + 496);
  v193 = *(_OWORD *)(a2 + 480);
  v194 = v44;
  v45 = *(_OWORD *)(a2 + 528);
  v195 = *(_OWORD *)(a2 + 512);
  v196 = v45;
  v46 = *(_OWORD *)(a2 + 432);
  v189 = *(_OWORD *)(a2 + 416);
  v190 = v46;
  v47 = *(_OWORD *)(a2 + 464);
  v191 = *(_OWORD *)(a2 + 448);
  v137 = *(float64x2_t *)(a1 + 720);
  v192 = v47;
  v48 = *(double *)(a1 + 832);
  v139 = *(double *)(a1 + 840);
  v49 = (int8x16_t)vuzp1q_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v8, *(float64x2_t *)(a2 + 64)), (int32x4_t)vceqq_f64(v9, *(float64x2_t *)(a2 + 80)))), (int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v11, *(float64x2_t *)(a2 + 104)), (int32x4_t)vceqq_f64(v12, *(float64x2_t *)(a2 + 120)))));
  v11.f64[0] = *(float64_t *)(a2 + 144);
  v138 = *(double *)(a1 + 848);
  v50 = *(_BYTE *)(a1 + 912);
  v51 = *(_BYTE *)(a1 + 928);
  v52 = *(_BYTE *)(a1 + 1000);
  v53 = *(_BYTE *)(a1 + 1001);
  v133 = *(_BYTE *)(a1 + 1002);
  v54 = v14 != *(double *)(a2 + 136);
  v55 = *(unsigned __int8 *)(a2 + 96);
  v56 = *(unsigned __int8 *)(a2 + 152);
  v57 = *(_QWORD *)(a2 + 176);
  v58 = *(_BYTE *)(a2 + 216);
  v59 = *(_BYTE *)(a2 + 232);
  v60 = *(_BYTE *)(a2 + 304);
  v61 = *(_BYTE *)(a2 + 305);
  v62 = *(_BYTE *)(a2 + 306);
  v150 = *(float64x2_t *)(a1 + 360);
  v151 = *(float64x2_t *)(a1 + 376);
  v148 = *(float64x2_t *)(a2 + 376);
  v149 = *(float64x2_t *)(a1 + 344);
  v146 = *(float64x2_t *)(a2 + 360);
  v147 = *(float64x2_t *)(a1 + 328);
  v63 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8(v6, v6, 8uLL), (float64x2_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL)), (int32x4_t)vceqq_f64(v7, *(float64x2_t *)(a2 + 16)))), (int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v4, *(float64x2_t *)(a2 + 32)), (int32x4_t)vceqq_f64(v5, *(float64x2_t *)(a2 + 48))))), v49), 7uLL)));
  v144 = *(float64x2_t *)(a2 + 328);
  v145 = *(float64x2_t *)(a2 + 344);
  v64 = *(unsigned __int8 *)(a2 + 400);
  v200 = *(_QWORD *)(a2 + 592);
  v65 = v13 != v11.f64[0];
  v135 = *(double *)(a1 + 888);
  v134 = *(double *)(a1 + 896);
  v130 = *(_QWORD *)(a1 + 904);
  v131 = *(_QWORD *)(a1 + 920);
  v132 = *(_OWORD *)(a1 + 936);
  v66 = *(_QWORD *)(a2 + 208);
  v67 = *(_QWORD *)(a2 + 224);
  v69 = *(_OWORD *)(a2 + 240);
  v68 = *(_OWORD *)(a2 + 256);
  v71 = *(_OWORD *)(a2 + 272);
  v70 = *(_OWORD *)(a2 + 288);
  v73 = *(double *)(a2 + 312);
  v72 = *(double *)(a2 + 320);
  v74 = *(double *)(a2 + 392);
  v75 = *(double *)(a2 + 408);
  if ((v63 & 1) == 0 && !v54 && !v65 && ((v10 ^ v55) & 1) == 0 && ((v15 ^ v56) & 1) == 0)
  {
    v3 = 0;
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8(v16, v16, 8uLL), (float64x2_t)vextq_s8(*(int8x16_t *)(a2 + 160), *(int8x16_t *)(a2 + 160), 8uLL)), (int32x4_t)vceqq_f64(v18, *(float64x2_t *)(a2 + 184)))), 0xFuLL))) & 1) != 0&& v20 == *(double *)(a2 + 200)&& v17 == v57)
    {
      v101 = *(_OWORD *)(a1 + 952);
      v102 = *(_OWORD *)(a1 + 968);
      v103 = *(_OWORD *)(a1 + 984);
      v127 = v42;
      v128 = v41;
      v129 = v40;
      v124 = *(float64x2_t *)(a2 + 632);
      v121 = *(float64x2_t *)(a2 + 616);
      v109 = *(int8x16_t *)(a2 + 600);
      v113 = *(float64x2_t *)(a2 + 680);
      v110 = *(float64x2_t *)(a2 + 664);
      v108 = *(float64x2_t *)(a2 + 696);
      v76 = *(unsigned __int8 *)(a2 + 712);
      v125 = *(float64x2_t *)(a1 + 784);
      v126 = *(float64x2_t *)(a2 + 648);
      v120 = *(float64x2_t *)(a1 + 752);
      v116 = *(float64x2_t *)(a1 + 736);
      v117 = *(float64x2_t *)(a2 + 768);
      v114 = *(float64x2_t *)(a2 + 752);
      v105 = *(float64x2_t *)(a2 + 720);
      v111 = *(float64x2_t *)(a2 + 736);
      v122 = *(float64x2_t *)(a1 + 816);
      v123 = *(float64x2_t *)(a1 + 768);
      v118 = *(float64x2_t *)(a2 + 816);
      v119 = *(float64x2_t *)(a1 + 800);
      v112 = *(float64x2_t *)(a2 + 784);
      v115 = *(float64x2_t *)(a2 + 800);
      *(_QWORD *)&v165 = v19;
      v104 = *(double *)(a2 + 832);
      *(_QWORD *)&v166 = v22;
      v77 = *(double *)(a2 + 840);
      v167 = v24;
      v106 = *(double *)(a2 + 848);
      v107 = v77;
      v168 = v25;
      v169 = v26;
      v99 = *(float64x2_t *)(a1 + 856);
      v100 = *(float64x2_t *)(a1 + 872);
      v170 = v27;
      *(_QWORD *)&v153 = v66;
      v96 = *(float64x2_t *)(a2 + 856);
      v97 = *(float64x2_t *)(a2 + 872);
      *(_QWORD *)&v154 = v67;
      v98 = *(double *)(a2 + 888);
      v155 = v69;
      v156 = v68;
      v95 = *(double *)(a2 + 896);
      v78 = *(_QWORD *)(a2 + 904);
      v79 = *(_BYTE *)(a2 + 912);
      v157 = v71;
      v158 = v70;
      v91 = v78;
      v92 = *(_QWORD *)(a2 + 920);
      v93 = *(_BYTE *)(a2 + 928);
      v94 = *(_BYTE *)(a2 + 1000);
      v80 = *(_BYTE *)(a2 + 1001);
      BYTE8(v165) = v21;
      v81 = *(_BYTE *)(a2 + 1002);
      BYTE8(v166) = v23;
      LOBYTE(v171) = v28;
      BYTE1(v171) = v29;
      BYTE2(v171) = v30;
      BYTE8(v153) = v58;
      BYTE8(v154) = v59;
      LOBYTE(v159) = v60;
      BYTE1(v159) = v61;
      BYTE2(v159) = v62;
      v87 = *(_OWORD *)(a2 + 936);
      v88 = *(_OWORD *)(a2 + 952);
      v89 = *(_OWORD *)(a2 + 968);
      v90 = *(_OWORD *)(a2 + 984);
      v82 = sub_1D5DECBBC((uint64_t)&v165, (uint64_t)&v153);
      v3 = 0;
      if ((v82 & 1) != 0 && v31 == v73 && v32 == v72)
      {
        v3 = 0;
        v83 = (int32x4_t)vceqq_f64(v151, v148);
        if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v147, v144), (int32x4_t)vceqq_f64(v149, v145)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v150, v146), v83))), 7uLL))) & 1) != 0&& v152 == v74&& v34 == v75&& ((v33 ^ v64) & 1) == 0)
        {
          v173 = v185;
          v174 = v186;
          v175 = v187;
          v176 = v188;
          v169 = v181;
          v170 = v182;
          v171 = v183;
          v172 = v184;
          v165 = v177;
          v166 = v178;
          v167 = v179;
          v168 = v180;
          v161 = v197;
          v162 = v198;
          v163 = v199;
          v164 = v200;
          v157 = v193;
          v158 = v194;
          v159 = v195;
          v160 = v196;
          v153 = v189;
          v154 = v190;
          v155 = v191;
          v156 = v192;
          if (sub_1D5DECCF4((uint64_t)&v165, (uint64_t)&v153, *(double *)&v191, *(double *)&v192, (int64x2_t)v83))
          {
            v3 = 0;
            v84 = (uint8x16_t)vcltzq_s8(vshlq_n_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8(v141, v141, 8uLL), (float64x2_t)vextq_s8(v109, v109, 8uLL)), (int32x4_t)vceqq_f64(v127, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v128, v124), (int32x4_t)vceqq_f64(v129, v126))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v142, v110), (int32x4_t)vceqq_f64(v143, v113)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v140, v108), (int32x4_t)vceqq_f64(v137, v105)))), 7uLL));
            v84.i8[0] = vminvq_u8(v84);
            v85 = v84.i32[0];
            *(int8x8_t *)v84.i8 = vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v116, v111), (int32x4_t)vceqq_f64(v120, v114)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v123, v117), (int32x4_t)vceqq_f64(v125, v112)))), 7uLL));
            v84.i8[0] = vminv_u8(*(uint8x8_t *)v84.i8);
            if ((v85 & v84.i32[0] & vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v119, v115), (int32x4_t)vceqq_f64(v122, v118))), 0xFuLL))) & (v48 == v104) & (v139 == v107) & (v138 == v106)) == 1&& ((v136 ^ v76) & 1) == 0)
            {
              v3 = 0;
              if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v99, v96), (int32x4_t)vceqq_f64(v100, v97))), 0xFuLL))) & 1) != 0&& v135 == v98&& v134 == v95)
              {
                *(_QWORD *)&v165 = v130;
                BYTE8(v165) = v50;
                *(_QWORD *)&v166 = v131;
                BYTE8(v166) = v51;
                v167 = v132;
                v168 = v101;
                v169 = v102;
                v170 = v103;
                LOBYTE(v171) = v52;
                BYTE1(v171) = v53;
                BYTE2(v171) = v133;
                *(_QWORD *)&v153 = v91;
                BYTE8(v153) = v79;
                *(_QWORD *)&v154 = v92;
                BYTE8(v154) = v93;
                v155 = v87;
                v156 = v88;
                v157 = v89;
                v158 = v90;
                LOBYTE(v159) = v94;
                BYTE1(v159) = v80;
                BYTE2(v159) = v81;
                v3 = sub_1D5DECBBC((uint64_t)&v165, (uint64_t)&v153);
              }
            }
          }
          else
          {
            v3 = 0;
          }
        }
      }
    }
  }
  return v3 & 1;
}

uint64_t sub_1D5DED6A8(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = 0;
  if (*(double *)a1 == *(double *)a2
    && ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 9) ^ *(unsigned __int8 *)(a2 + 9)) & 1) == 0)
  {
    v2 = *(_BYTE *)(a2 + 10) ^ *(_BYTE *)(a1 + 10) ^ 1;
  }
  return v2 & 1;
}

BOOL sub_1D5DED6F4(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL sub_1D5DED730(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  BOOL v4;

  result = 0;
  v4 = *(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  if (v4
    && ((*(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 17) ^ *(unsigned __int8 *)(a2 + 17)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 18) ^ *(unsigned __int8 *)(a2 + 18)) & 1) == 0
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
  }
  return result;
}

unint64_t sub_1D5DED7A0()
{
  unint64_t result;

  result = qword_1EFFB5D30;
  if (!qword_1EFFB5D30)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E44148, &_s13ConfigurationV19ActionConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5D30);
  }
  return result;
}

unint64_t sub_1D5DED7E4()
{
  unint64_t result;

  result = qword_1EFFB5D38;
  if (!qword_1EFFB5D38)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DD54, &_s13ConfigurationV30ArticleReadActionConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5D38);
  }
  return result;
}

unint64_t sub_1D5DED828()
{
  unint64_t result;

  result = qword_1EFFB5D40;
  if (!qword_1EFFB5D40)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DE0C, &_s13ConfigurationV32SportsTagSeenActionConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5D40);
  }
  return result;
}

unint64_t sub_1D5DED86C()
{
  unint64_t result;

  result = qword_1EFFB5D48;
  if (!qword_1EFFB5D48)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DE94, &_s13ConfigurationV32TrackListenedActionConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5D48);
  }
  return result;
}

unint64_t sub_1D5DED8B0()
{
  unint64_t result;

  result = qword_1EFFB5D50;
  if (!qword_1EFFB5D50)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DF1C, &_s13ConfigurationV31TrackVisitedActionConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5D50);
  }
  return result;
}

unint64_t sub_1D5DED8F4()
{
  unint64_t result;

  result = qword_1EFFB5D60;
  if (!qword_1EFFB5D60)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DD2C, &_s13ConfigurationV30ArticleReadActionConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5D60);
  }
  return result;
}

unint64_t sub_1D5DED938()
{
  unint64_t result;

  result = qword_1EFFB5D68;
  if (!qword_1EFFB5D68)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DDE4, &_s13ConfigurationV32SportsTagSeenActionConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5D68);
  }
  return result;
}

unint64_t sub_1D5DED97C()
{
  unint64_t result;

  result = qword_1EFFB5D70;
  if (!qword_1EFFB5D70)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DE6C, &_s13ConfigurationV32TrackListenedActionConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5D70);
  }
  return result;
}

unint64_t sub_1D5DED9C0()
{
  unint64_t result;

  result = qword_1EFFB5D78;
  if (!qword_1EFFB5D78)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DEF4, &_s13ConfigurationV31TrackVisitedActionConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5D78);
  }
  return result;
}

unint64_t sub_1D5DEDA04()
{
  unint64_t result;

  result = qword_1EFFB5D88;
  if (!qword_1EFFB5D88)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E440F8, &_s13ConfigurationV30ArticleReadActionConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5D88);
  }
  return result;
}

unint64_t sub_1D5DEDA48()
{
  unint64_t result;

  result = qword_1EFFB5DB8;
  if (!qword_1EFFB5DB8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E440A8, &_s13ConfigurationV32SportsTagSeenActionConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5DB8);
  }
  return result;
}

unint64_t sub_1D5DEDA8C()
{
  unint64_t result;

  result = qword_1EFFB5E30;
  if (!qword_1EFFB5E30)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E44058, &_s13ConfigurationV32TrackListenedActionConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5E30);
  }
  return result;
}

unint64_t sub_1D5DEDAD0()
{
  unint64_t result;

  result = qword_1EFFB5E60;
  if (!qword_1EFFB5E60)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E44008, &_s13ConfigurationV31TrackVisitedActionConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5E60);
  }
  return result;
}

unint64_t sub_1D5DEDB14()
{
  unint64_t result;

  result = qword_1ED9AEC90;
  if (!qword_1ED9AEC90)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43FB8, &_s13ConfigurationV23ClusteringConfigurationV14TopicDiversityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED9AEC90);
  }
  return result;
}

unint64_t sub_1D5DEDB58()
{
  unint64_t result;

  result = qword_1ED9AECB0;
  if (!qword_1ED9AECB0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43F68, &_s13ConfigurationV23ClusteringConfigurationV6QuotasV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED9AECB0);
  }
  return result;
}

unint64_t sub_1D5DEDB9C()
{
  unint64_t result;

  result = qword_1ED9AE668;
  if (!qword_1ED9AE668)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3E184, &_s13ConfigurationV23ClusteringConfigurationV14DepthTransformVN);
    atomic_store(result, (unint64_t *)&qword_1ED9AE668);
  }
  return result;
}

unint64_t sub_1D5DEDBE0()
{
  unint64_t result;

  result = qword_1EFFB5EA8;
  if (!qword_1EFFB5EA8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3E15C, &_s13ConfigurationV23ClusteringConfigurationV14DepthTransformVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5EA8);
  }
  return result;
}

uint64_t sub_1D5DEDC24(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED9AE698);
    v8 = a2();
    result = MEMORY[0x1D827D8E0](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D5DEDC8C()
{
  unint64_t result;

  result = qword_1EFFB5EB8;
  if (!qword_1EFFB5EB8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43F18, &_s13ConfigurationV23ClusteringConfigurationV14DepthTransformV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5EB8);
  }
  return result;
}

uint64_t sub_1D5DEDCD0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFFB5EC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D5DEDD10(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_1D5DEDD28()
{
  unint64_t result;

  result = qword_1EFFB5ED0;
  if (!qword_1EFFB5ED0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43EC8, &_s13ConfigurationV23ClusteringConfigurationV22SplittingConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5ED0);
  }
  return result;
}

unint64_t sub_1D5DEDD6C()
{
  unint64_t result;

  result = qword_1ED9AE688;
  if (!qword_1ED9AE688)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3A17C, &_s22QuotaConditionProviderVN);
    atomic_store(result, (unint64_t *)&qword_1ED9AE688);
  }
  return result;
}

unint64_t sub_1D5DEDDB0()
{
  unint64_t result;

  result = qword_1ED9AE690;
  if (!qword_1ED9AE690)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3A198, &_s31TopicDiversityConditionProviderVN);
    atomic_store(result, (unint64_t *)&qword_1ED9AE690);
  }
  return result;
}

void _s13ConfigurationV23ClusteringConfigurationV15ClusteringKnobsV10CodingKeysOMa()
{
  JUMPOUT(0x1D827D88CLL);
}

unint64_t sub_1D5DEDE00()
{
  unint64_t result;

  result = qword_1ED9AE5A0[0];
  if (!qword_1ED9AE5A0[0])
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3E1FC, &_s13ConfigurationV23ClusteringConfigurationV22SplittingConfigurationVN);
    atomic_store(result, qword_1ED9AE5A0);
  }
  return result;
}

unint64_t sub_1D5DEDE44()
{
  unint64_t result;

  result = qword_1EFFB5EE0;
  if (!qword_1EFFB5EE0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3E1D4, &_s13ConfigurationV23ClusteringConfigurationV22SplittingConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB5EE0);
  }
  return result;
}

unint64_t sub_1D5DEDE88()
{
  unint64_t result;

  result = qword_1ED9AE628;
  if (!qword_1ED9AE628)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43E28, &_s13ConfigurationV23ClusteringConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED9AE628);
  }
  return result;
}

unint64_t sub_1D5DEDECC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1ED9AF500;
  if (!qword_1ED9AF500)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED9AF4F8);
    v2 = sub_1D5DEEF40(&qword_1ED9AF498, &qword_1ED9AF4A0, (uint64_t)&unk_1D5E3E274);
    v3[0] = MEMORY[0x1E0DEA970];
    v3[1] = v2;
    result = MEMORY[0x1D827D8E0](MEMORY[0x1E0DEA0B8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1ED9AF500);
  }
  return result;
}

unint64_t sub_1D5DEDF50()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EFFB5F10;
  if (!qword_1EFFB5F10)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED9AF4F8);
    v2 = sub_1D5DEEF40(&qword_1EFFB5F18, &qword_1ED9AF4A0, (uint64_t)&unk_1D5E3E24C);
    v3[0] = MEMORY[0x1E0DEA9A0];
    v3[1] = v2;
    result = MEMORY[0x1D827D8E0](MEMORY[0x1E0DEA0D8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EFFB5F10);
  }
  return result;
}

unint64_t sub_1D5DEDFD4()
{
  unint64_t result;

  result = qword_1EFFB5FD0;
  if (!qword_1EFFB5FD0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43DD8, &_s13ConfigurationV23EvaluationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB5FD0);
  }
  return result;
}

unint64_t sub_1D5DEE018()
{
  unint64_t result;

  result = qword_1EFFB60E8;
  if (!qword_1EFFB60E8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3EBD0, &_s13ConfigurationV35ContentTriggerDampenerConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB60E8);
  }
  return result;
}

unint64_t sub_1D5DEE05C()
{
  unint64_t result;

  result = qword_1EFFB60F0;
  if (!qword_1EFFB60F0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3ED38, &_s13ConfigurationV30UserFeedbackScoreConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB60F0);
  }
  return result;
}

unint64_t sub_1D5DEE0A0()
{
  unint64_t result;

  result = qword_1EFFB6118;
  if (!qword_1EFFB6118)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3EE10, &_s13ConfigurationV32PremiumSubscriptionConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6118);
  }
  return result;
}

unint64_t sub_1D5DEE0E4()
{
  unint64_t result;

  result = qword_1EFFB6170;
  if (!qword_1EFFB6170)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3EF98, &_s13ConfigurationV30NicheContentScoreConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6170);
  }
  return result;
}

unint64_t sub_1D5DEE128()
{
  unint64_t result;

  result = qword_1EFFB6178;
  if (!qword_1EFFB6178)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F0F8, &_s13ConfigurationV35PersonalizedMultiplierConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6178);
  }
  return result;
}

unint64_t sub_1D5DEE16C()
{
  unint64_t result;

  result = qword_1EFFB6340;
  if (!qword_1EFFB6340)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3EBA8, &_s13ConfigurationV35ContentTriggerDampenerConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6340);
  }
  return result;
}

unint64_t sub_1D5DEE1B0()
{
  unint64_t result;

  result = qword_1EFFB6348;
  if (!qword_1EFFB6348)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3ED10, &_s13ConfigurationV30UserFeedbackScoreConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6348);
  }
  return result;
}

unint64_t sub_1D5DEE1F4()
{
  unint64_t result;

  result = qword_1EFFB6360;
  if (!qword_1EFFB6360)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3EDE8, &_s13ConfigurationV32PremiumSubscriptionConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6360);
  }
  return result;
}

unint64_t sub_1D5DEE238()
{
  unint64_t result;

  result = qword_1EFFB6390;
  if (!qword_1EFFB6390)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3EF70, &_s13ConfigurationV30NicheContentScoreConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6390);
  }
  return result;
}

unint64_t sub_1D5DEE27C()
{
  unint64_t result;

  result = qword_1EFFB6398;
  if (!qword_1EFFB6398)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F0D0, &_s13ConfigurationV35PersonalizedMultiplierConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6398);
  }
  return result;
}

unint64_t sub_1D5DEE2C0()
{
  unint64_t result;

  result = qword_1EFFB6440;
  if (!qword_1EFFB6440)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43D88, &_s13ConfigurationV33SubscribedCountScoreConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6440);
  }
  return result;
}

unint64_t sub_1D5DEE304()
{
  unint64_t result;

  result = qword_1EFFB6458;
  if (!qword_1EFFB6458)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43D38, &_s13ConfigurationV35ContentTriggerDampenerConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6458);
  }
  return result;
}

unint64_t sub_1D5DEE348()
{
  unint64_t result;

  result = qword_1EFFB6500;
  if (!qword_1EFFB6500)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43CE8, &_s13ConfigurationV30UserFeedbackScoreConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6500);
  }
  return result;
}

unint64_t sub_1D5DEE38C()
{
  unint64_t result;

  result = qword_1EFFB6680;
  if (!qword_1EFFB6680)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43C98, &_s13ConfigurationV32PremiumSubscriptionConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6680);
  }
  return result;
}

unint64_t sub_1D5DEE3D0()
{
  unint64_t result;

  result = qword_1EFFB6728;
  if (!qword_1EFFB6728)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43C48, &_s13ConfigurationV30NicheContentScoreConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6728);
  }
  return result;
}

unint64_t sub_1D5DEE414()
{
  unint64_t result;

  result = qword_1EFFB6760;
  if (!qword_1EFFB6760)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F040, &_s13ConfigurationV27FlowEstimationConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6760);
  }
  return result;
}

unint64_t sub_1D5DEE458()
{
  unint64_t result;

  result = qword_1EFFB6868;
  if (!qword_1EFFB6868)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F018, &_s13ConfigurationV27FlowEstimationConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6868);
  }
  return result;
}

unint64_t sub_1D5DEE49C()
{
  unint64_t result;

  result = qword_1EFFB68E8;
  if (!qword_1EFFB68E8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43BF8, &_s13ConfigurationV27FlowEstimationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB68E8);
  }
  return result;
}

unint64_t sub_1D5DEE4E0()
{
  unint64_t result;

  result = qword_1EFFB6948;
  if (!qword_1EFFB6948)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43BA8, &_s13ConfigurationV35PersonalizedMultiplierConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6948);
  }
  return result;
}

BOOL sub_1D5DEE524(uint64_t a1, uint64_t a2)
{
  return (vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a1, *(float64x2_t *)a2), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48))))), 7uLL))) & 1) != 0&& *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64);
}

uint64_t sub_1D5DEE584(float64x2_t *a1, float64x2_t *a2)
{
  int16x8_t v2;
  int8x16_t v3;
  __int16 v4;
  int8x16_t v5;
  __int32 v6;
  int8x16_t v7;
  __int16 v8;
  int8x16_t v9;
  char v10;

  v2 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[16], a2[16]), (int32x4_t)vceqq_f64(a1[17], a2[17]));
  v3 = vandq_s8(vcltzq_s8(vshlq_n_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16(v2, (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[18], a2[18]), (int32x4_t)vceqq_f64(a1[19], a2[19]))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[20], a2[20]), (int32x4_t)vceqq_f64(a1[21], a2[21])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[22], a2[22]), (int32x4_t)vceqq_f64(a1[23], a2[23])))), 7uLL)), (int8x16_t)xmmword_1D5E44200);
  v2.i8[0] = vaddv_s8(*(int8x8_t *)v3.i8);
  v3.i64[0] = vextq_s8(v3, v3, 8uLL).u64[0];
  v3.i8[0] = vaddv_s8(*(int8x8_t *)v3.i8);
  v4 = v3.i16[0];
  v5 = vandq_s8(vcltzq_s8(vshlq_n_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[24], a2[24]), (int32x4_t)vceqq_f64(a1[25], a2[25])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[26], a2[26]), (int32x4_t)vceqq_f64(a1[27], a2[27]))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[28], a2[28]), (int32x4_t)vceqq_f64(a1[29], a2[29])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[30], a2[30]), (int32x4_t)vceqq_f64(a1[31], a2[31])))), 7uLL)), (int8x16_t)xmmword_1D5E44200);
  v3.i8[0] = vaddv_s8(*(int8x8_t *)v5.i8);
  v5.i64[0] = vextq_s8(v5, v5, 8uLL).u64[0];
  v5.i8[0] = vaddv_s8(*(int8x8_t *)v5.i8);
  v6 = v5.i32[0];
  v7 = vandq_s8(vcltzq_s8(vshlq_n_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[2], a2[2]), (int32x4_t)vceqq_f64(a1[3], a2[3]))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[4], a2[4]), (int32x4_t)vceqq_f64(a1[5], a2[5])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[6], a2[6]), (int32x4_t)vceqq_f64(a1[7], a2[7])))), 7uLL)), (int8x16_t)xmmword_1D5E44200);
  v5.i8[0] = vaddv_s8(*(int8x8_t *)v7.i8);
  v7.i64[0] = vextq_s8(v7, v7, 8uLL).u64[0];
  v7.i8[0] = vaddv_s8(*(int8x8_t *)v7.i8);
  v8 = v7.i16[0];
  v9 = vandq_s8(vcltzq_s8(vshlq_n_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[8], a2[8]), (int32x4_t)vceqq_f64(a1[9], a2[9])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[10], a2[10]), (int32x4_t)vceqq_f64(a1[11], a2[11]))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[12], a2[12]), (int32x4_t)vceqq_f64(a1[13], a2[13])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a1[14], a2[14]), (int32x4_t)vceqq_f64(a1[15], a2[15])))), 7uLL)), (int8x16_t)xmmword_1D5E44200);
  v7.i8[0] = vaddv_s8(*(int8x8_t *)v9.i8);
  v9.i64[0] = vextq_s8(v9, v9, 8uLL).u64[0];
  v9.i8[0] = vaddv_s8(*(int8x8_t *)v9.i8);
  if ((((v6 << 24) | (v3.i32[0] << 16) | (unsigned __int16)(v2.i16[0] | (v4 << 8))) & ((v9.i32[0] << 24) | (v7.i32[0] << 16) | (unsigned __int16)(v5.i16[0] | (v8 << 8)))) == 0xFFFFFFFFLL)
    v10 = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(a1[32], a2[32]), (int32x4_t)vceqq_f64(a1[33], a2[33]))), 0xFuLL)));
  else
    v10 = 0;
  return v10 & 1;
}

uint64_t sub_1D5DEE7F0(double *a1, double *a2)
{
  char v4;
  const void *v5;
  float64x2_t v7[34];
  float64x2_t __dst[34];

  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2])
  {
    v5 = a2 + 3;
    memcpy(__dst, a1 + 3, sizeof(__dst));
    memcpy(v7, v5, sizeof(v7));
    v4 = sub_1D5DEE584(__dst, v7);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1D5DEE86C(double *a1, double *a2)
{
  char v2;
  BOOL v5;

  v2 = 0;
  if (((*(unsigned __int8 *)a1 ^ *(unsigned __int8 *)a2) & 1) == 0)
  {
    v5 = a1[1] == a2[1] && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2) && a1[3] == a2[3] && a1[4] == a2[4];
    if (v5 && ((*((unsigned __int8 *)a1 + 40) ^ *((unsigned __int8 *)a2 + 40)) & 1) == 0 && a1[6] == a2[6])
      v2 = *((_BYTE *)a2 + 56) ^ *((_BYTE *)a1 + 56) ^ 1;
  }
  return v2 & 1;
}

BOOL sub_1D5DEE8E4(double *a1, double *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1])
    return 0;
  if (a1[3] == a2[3])
    return a1[2] == a2[2];
  return 0;
}

unint64_t sub_1D5DEE91C()
{
  unint64_t result;

  result = qword_1EFFB69C0;
  if (!qword_1EFFB69C0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43B58, &_s13ConfigurationV20FeatureConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB69C0);
  }
  return result;
}

unint64_t sub_1D5DEE960()
{
  unint64_t result;

  result = qword_1EFFB69F8;
  if (!qword_1EFFB69F8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F270, &_s13ConfigurationV13FeaturePriorsVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB69F8);
  }
  return result;
}

unint64_t sub_1D5DEE9A4()
{
  unint64_t result;

  result = qword_1EFFB6A40;
  if (!qword_1EFFB6A40)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F248, &_s13ConfigurationV13FeaturePriorsVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6A40);
  }
  return result;
}

unint64_t sub_1D5DEE9E8()
{
  unint64_t result;

  result = qword_1EFFB6A60;
  if (!qword_1EFFB6A60)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43B08, &_s13ConfigurationV13FeaturePriorsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6A60);
  }
  return result;
}

unint64_t sub_1D5DEEA2C()
{
  unint64_t result;

  result = qword_1EFFB6AA8;
  if (!qword_1EFFB6AA8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43AB8, &_s13ConfigurationV12FeaturePriorV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6AA8);
  }
  return result;
}

uint64_t sub_1D5DEEA70(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  _BYTE v25[1896];
  _BYTE __dst[1896];

  result = 0;
  if (*(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && ((*(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 17) ^ *(unsigned __int8 *)(a2 + 17)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 18) ^ *(unsigned __int8 *)(a2 + 18)) & 1) == 0
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
    && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32))
  {
    v5 = *(_QWORD *)(a1 + 3008);
    v6 = *(_QWORD *)(a1 + 3016);
    v7 = *(_QWORD *)(a1 + 3024);
    v8 = *(double *)(a1 + 3032);
    v9 = *(double *)(a1 + 3040);
    v10 = *(double *)(a1 + 3048);
    v23 = *(float64x2_t *)(a1 + 2976);
    v24 = *(float64x2_t *)(a1 + 2992);
    v21 = *(float64x2_t *)(a1 + 2960);
    v22 = *(float64x2_t *)(a2 + 2992);
    v19 = *(float64x2_t *)(a1 + 2944);
    v20 = *(float64x2_t *)(a2 + 2976);
    v17 = *(float64x2_t *)(a2 + 2944);
    v18 = *(float64x2_t *)(a2 + 2960);
    v11 = *(_QWORD *)(a2 + 3008);
    v12 = *(_QWORD *)(a2 + 3016);
    v13 = *(_QWORD *)(a2 + 3024);
    v14 = *(double *)(a2 + 3032);
    v15 = *(double *)(a2 + 3040);
    v16 = *(double *)(a2 + 3048);
    memcpy(__dst, (const void *)(a1 + 40), sizeof(__dst));
    memcpy(v25, (const void *)(a2 + 40), sizeof(v25));
    if ((sub_1D5DEC594(__dst, (uint64_t)v25) & 1) == 0)
      return 0;
    memcpy(__dst, (const void *)(a1 + 1936), 0x3EBuLL);
    memcpy(v25, (const void *)(a2 + 1936), 0x3EBuLL);
    if ((sub_1D5DECE18((uint64_t)__dst, (uint64_t)v25) & 1) == 0)
      return 0;
    result = 0;
    if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v19, v17), (int32x4_t)vceqq_f64(v21, v18)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v23, v20), (int32x4_t)vceqq_f64(v24, v22)))), 7uLL))) & 1) != 0&& v5 == v11)
    {
      if ((sub_1D5DCE8F4(v6, v12) & 1) != 0
        && (sub_1D5DCE69C(v7, v13) & 1) != 0
        && v8 == v14
        && v9 == v15
        && v10 == v16)
      {
        memcpy(__dst, (const void *)(a1 + 3056), 0x220uLL);
        memcpy(v25, (const void *)(a2 + 3056), 0x220uLL);
        if ((sub_1D5DEE584((float64x2_t *)__dst, (float64x2_t *)v25) & 1) != 0)
          return 1;
      }
      return 0;
    }
  }
  return result;
}

unint64_t sub_1D5DEECDC()
{
  unint64_t result;

  result = qword_1EFFB6AC0;
  if (!qword_1EFFB6AC0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43A68, &_s13ConfigurationV26OntologyLevelConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6AC0);
  }
  return result;
}

unint64_t sub_1D5DEED20()
{
  unint64_t result;

  result = qword_1ED9AECF8;
  if (!qword_1ED9AECF8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43A18, &_s13ConfigurationV11TopicConfigV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED9AECF8);
  }
  return result;
}

unint64_t sub_1D5DEED64()
{
  unint64_t result;

  result = qword_1EFFB6B38;
  if (!qword_1EFFB6B38)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E439C8, &_s13ConfigurationV21TrainingConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6B38);
  }
  return result;
}

unint64_t sub_1D5DEEDA8()
{
  unint64_t result;

  result = qword_1EFFB6B40;
  if (!qword_1EFFB6B40)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F594, &_s13ConfigurationV20GeneralConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6B40);
  }
  return result;
}

unint64_t sub_1D5DEEDEC()
{
  unint64_t result;

  result = qword_1EFFB6B48;
  if (!qword_1EFFB6B48)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F7E8, &_s13ConfigurationV21TrainerConfigurationsVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6B48);
  }
  return result;
}

unint64_t sub_1D5DEEE30()
{
  unint64_t result;

  result = qword_1EFFB6B58;
  if (!qword_1EFFB6B58)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F56C, &_s13ConfigurationV20GeneralConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6B58);
  }
  return result;
}

unint64_t sub_1D5DEEE74()
{
  unint64_t result;

  result = qword_1EFFB6B60;
  if (!qword_1EFFB6B60)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F7C0, &_s13ConfigurationV21TrainerConfigurationsVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6B60);
  }
  return result;
}

unint64_t sub_1D5DEEEB8()
{
  unint64_t result;

  result = qword_1EFFB6B70;
  if (!qword_1EFFB6B70)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43978, &_s13ConfigurationV20GeneralConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6B70);
  }
  return result;
}

unint64_t sub_1D5DEEEFC()
{
  unint64_t result;

  result = qword_1EFFB6BD0;
  if (!qword_1EFFB6BD0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43928, &_s13ConfigurationV21TrainerConfigurationsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6BD0);
  }
  return result;
}

uint64_t sub_1D5DEEF40(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1D827D8E0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D5DEEF80()
{
  unint64_t result;

  result = qword_1EFFB6D80;
  if (!qword_1EFFB6D80)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E438D8, &_s13ConfigurationV34AggregateModificationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6D80);
  }
  return result;
}

unint64_t sub_1D5DEEFC4()
{
  unint64_t result;

  result = qword_1EFFB6D98;
  if (!qword_1EFFB6D98)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43888, &_s13ConfigurationV25AggregateModificationDataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6D98);
  }
  return result;
}

unint64_t sub_1D5DEF008()
{
  unint64_t result;

  result = qword_1EFFB6DB0;
  if (!qword_1EFFB6DB0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E43838, &_s13ConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6DB0);
  }
  return result;
}

unint64_t sub_1D5DEF04C()
{
  unint64_t result;

  result = qword_1EFFB6DB8;
  if (!qword_1EFFB6DB8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DCCC, &_s13ConfigurationV19ActionConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6DB8);
  }
  return result;
}

unint64_t sub_1D5DEF090()
{
  unint64_t result;

  result = qword_1EFFB6DC0;
  if (!qword_1EFFB6DC0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3EA80, &_s13ConfigurationV23EvaluationConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6DC0);
  }
  return result;
}

unint64_t sub_1D5DEF0D4()
{
  unint64_t result;

  result = qword_1EFFB6DC8;
  if (!qword_1EFFB6DC8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F1C0, &_s13ConfigurationV20FeatureConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6DC8);
  }
  return result;
}

unint64_t sub_1D5DEF118()
{
  unint64_t result;

  result = qword_1EFFB6DD0;
  if (!qword_1EFFB6DD0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F37C, &_s13ConfigurationV26OntologyLevelConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6DD0);
  }
  return result;
}

uint64_t sub_1D5DEF15C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED9AEF98);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x1D827D8E0](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D5DEF1D0()
{
  unint64_t result;

  result = qword_1ED9AEE60;
  if (!qword_1ED9AEE60)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F474, &_s13ConfigurationV11TopicConfigVN);
    atomic_store(result, (unint64_t *)&qword_1ED9AEE60);
  }
  return result;
}

unint64_t sub_1D5DEF214()
{
  unint64_t result;

  result = qword_1EFFB6DD8;
  if (!qword_1EFFB6DD8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F4EC, &_s13ConfigurationV21TrainingConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6DD8);
  }
  return result;
}

unint64_t sub_1D5DEF258()
{
  unint64_t result;

  result = qword_1EFFB6DE8;
  if (!qword_1EFFB6DE8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DCA4, &_s13ConfigurationV19ActionConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6DE8);
  }
  return result;
}

unint64_t sub_1D5DEF29C()
{
  unint64_t result;

  result = qword_1EFFB6DF0;
  if (!qword_1EFFB6DF0)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3EA58, &_s13ConfigurationV23EvaluationConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6DF0);
  }
  return result;
}

unint64_t sub_1D5DEF2E0()
{
  unint64_t result;

  result = qword_1EFFB6DF8;
  if (!qword_1EFFB6DF8)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F198, &_s13ConfigurationV20FeatureConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6DF8);
  }
  return result;
}

unint64_t sub_1D5DEF324()
{
  unint64_t result;

  result = qword_1EFFB6E00;
  if (!qword_1EFFB6E00)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F354, &_s13ConfigurationV26OntologyLevelConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6E00);
  }
  return result;
}

unint64_t sub_1D5DEF368()
{
  unint64_t result;

  result = qword_1EFFB6E10;
  if (!qword_1EFFB6E10)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F44C, &_s13ConfigurationV11TopicConfigVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6E10);
  }
  return result;
}

unint64_t sub_1D5DEF3AC()
{
  unint64_t result;

  result = qword_1EFFB6E18;
  if (!qword_1EFFB6E18)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3F4C4, &_s13ConfigurationV21TrainingConfigurationVN);
    atomic_store(result, (unint64_t *)&qword_1EFFB6E18);
  }
  return result;
}

uint64_t sub_1D5DEF3F0(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D5DEF4F4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1D5DEF5FC()
{
  unint64_t result;

  result = qword_1EFFB6E20;
  if (!qword_1EFFB6E20)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3DC04, &_s13ConfigurationV31PublisherDampeningConfigurationV17DampeningStrategyON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6E20);
  }
  return result;
}

uint64_t sub_1D5DEF640()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEF64C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEF658()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEF664()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEF670()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEF67C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEF688()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DEF694()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DEF6A0()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DEF6AC()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DEF6B8()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DEF6C4()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DEF6D0()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DEF6DC()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DEF6E8()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DEF6F4()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF700()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF70C()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEF718()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF724()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF730()
{
  return MEMORY[0x1E0DEB438];
}

unint64_t sub_1D5DEF740()
{
  unint64_t result;

  result = qword_1EFFB6F78;
  if (!qword_1EFFB6F78)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3E0AC, &_s13ConfigurationV23ClusteringConfigurationV19ClusterOrderingModeON);
    atomic_store(result, (unint64_t *)&qword_1EFFB6F78);
  }
  return result;
}

uint64_t sub_1D5DEF784()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEF790()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEF79C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEF7A8()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF7B4()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF7C0()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEF7CC()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF7D8()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF7E4()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEF7F0()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF7FC()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF808()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEF814()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF820()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF82C()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEF838()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF844()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF850()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEF85C()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF868()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF874()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEF898()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF8A4()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF8B0()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEF8BC()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF8C8()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF8D4()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEF8E0()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF8EC()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF8F8()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEF904()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF910()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF91C()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEF928()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF934()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF940()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEF94C()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEF958()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEF964()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEF988()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEF994()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEF9A0()
{
  return MEMORY[0x1E0DEB0A0];
}

unint64_t sub_1D5DEF9B0()
{
  unint64_t result;

  result = qword_1EFFB7040;
  if (!qword_1EFFB7040)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3E05C, &_s13ConfigurationV23ClusteringConfigurationV19ClusterOrderingModeON);
    atomic_store(result, (unint64_t *)&qword_1EFFB7040);
  }
  return result;
}

unint64_t sub_1D5DEF9F8()
{
  unint64_t result;

  result = qword_1ED9AE670;
  if (!qword_1ED9AE670)
  {
    result = MEMORY[0x1D827D8E0](&unk_1D5E3E084, &_s13ConfigurationV23ClusteringConfigurationV19ClusterOrderingModeON);
    atomic_store(result, (unint64_t *)&qword_1ED9AE670);
  }
  return result;
}

uint64_t sub_1D5DEFA40()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFA4C()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFA58()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFA64()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFA70()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFA7C()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFA88()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFA94()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFAA0()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFAAC()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFAB8()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFAC4()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFAD0()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFADC()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFAE8()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFAF4()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFB00()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFB0C()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFB30()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DEFB3C()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DEFB48()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DEFB54()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFB60()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFB6C()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFB78()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DEFB84()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DEFB90()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DEFB9C()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DEFBA8()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DEFBB4()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DEFBC0()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFBCC()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFBD8()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEFBE4()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFBF0()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFBFC()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEFC08()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFC14()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFC20()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFC2C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFC38()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFC44()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEFC50()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFC5C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFC68()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEFC74()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFC80()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFC8C()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFC98()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFCA4()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFCB0()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFCBC()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFCC8()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFCD4()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFCE0()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFCEC()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFCF8()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFD04()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFD10()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFD1C()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFD28()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFD34()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFD40()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFD64()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFD70()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFD7C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEFD88()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFD94()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFDA0()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEFDAC()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DEFDB8()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DEFDC4()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DEFDD0()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFDDC()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFDE8()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFDF4()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFE00()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFE0C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEFE18()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFE24()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFE30()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFE3C()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFE48()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFE54()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFE60()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFE6C()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFE78()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFE84()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFE90()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFE9C()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFEA8()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFEB4()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFEC0()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFECC()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DEFED8()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DEFEE4()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DEFF08()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFF14()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFF20()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEFF2C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFF38()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFF44()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEFF50()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFF5C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFF68()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEFF74()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFF80()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFF8C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEFF98()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFFA4()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFFB0()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEFFBC()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFFC8()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFFD4()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DEFFE0()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DEFFEC()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DEFFF8()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0004()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0010()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF001C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0028()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0034()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0040()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0058()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0064()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0070()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF007C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0088()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0094()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF00A0()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF00AC()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF00B8()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF00C4()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF00D0()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF00DC()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF00E8()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF00F4()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF0100()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF010C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0118()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0124()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0130()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF013C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0148()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0154()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0160()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF016C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0178()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0184()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0190()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF019C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF01A8()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF01B4()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF01C0()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF01CC()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF01D8()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF01E4()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF01F0()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF01FC()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF0208()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0214()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0220()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF022C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0238()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0244()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0250()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF025C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0268()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0274()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0280()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF028C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0298()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF02A4()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF02B0()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF02BC()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF02C8()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF02D4()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF02E0()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF02EC()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF02F8()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0304()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0310()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF031C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0328()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0334()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0340()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF034C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0358()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0364()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0370()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF037C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0388()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0394()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF03A0()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF03AC()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF03B8()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF03C4()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF03D0()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF03DC()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF03E8()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF03F4()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0400()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF040C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0418()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0424()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0430()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF043C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0448()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0454()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0460()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF046C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0478()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0484()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0490()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF049C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF04A8()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF04B4()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF04C0()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF04CC()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF04D8()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF04E4()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF04F0()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF04FC()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0508()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0514()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0520()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF052C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0538()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0544()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0550()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF055C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0574()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0580()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF058C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0598()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF05A4()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF05B0()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF05BC()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF05C8()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF05D4()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF05E0()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DF05EC()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DF05F8()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DF0604()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0610()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF061C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0628()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0634()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0640()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF064C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0658()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0664()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0670()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF067C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0688()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0694()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF06A0()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF06AC()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF06B8()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF06C4()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF06D0()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF06DC()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF06E8()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF06F4()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF0700()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF070C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0718()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0724()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0730()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF073C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0748()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0754()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0760()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF076C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0778()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0784()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0790()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF079C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF07A8()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF07B4()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF07C0()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF07CC()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF07D8()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF07E4()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF07F0()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF07FC()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0808()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0814()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0820()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF082C()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF0838()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF0844()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF0850()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF085C()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF0868()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF0874()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF0880()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF088C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0898()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF08A4()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF08B0()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF08BC()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF08C8()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF08D4()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF08E0()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF08EC()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF08F8()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0904()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0910()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF091C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0928()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0934()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0940()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF094C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0958()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0964()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF0970()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF097C()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF0988()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0994()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF09A0()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF09AC()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF09B8()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF09C4()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF09D0()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF09DC()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF09E8()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF09F4()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0A00()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0A0C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0A18()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0A24()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0A30()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0A3C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0A48()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0A54()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0A60()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0A6C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0A78()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0A84()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF0A90()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF0A9C()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF0AA8()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0AB4()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0AC0()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0ACC()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0AD8()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0AE4()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0AF0()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0AFC()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0B08()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0B14()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0B20()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0B2C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0B38()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0B44()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0B50()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0B5C()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF0B68()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF0B74()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF0B80()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0B8C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0B98()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0BA4()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0BB0()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0BBC()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0BC8()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0BD4()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0BE0()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0BEC()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0BF8()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0C04()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0C10()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0C1C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0C28()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0C34()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0C40()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0C4C()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0C58()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0C64()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0C70()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0C7C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0C88()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0C94()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0CA0()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0CAC()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0CB8()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0CC4()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0CD0()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0CDC()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0CE8()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0CF4()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0D00()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0D0C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0D18()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0D24()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0D30()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0D3C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0D48()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0D54()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DF0D60()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DF0D6C()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DF0D90()
{
  return sub_1D5DF0DF8(&qword_1EFFB5790, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEB0A8], MEMORY[0x1E0DEA0D8]);
}

uint64_t sub_1D5DF0DC4()
{
  return sub_1D5DF0DF8(&qword_1EFFB57A0, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEB080], MEMORY[0x1E0DEA0B8]);
}

uint64_t sub_1D5DF0DF8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFFB5798);
    v10[0] = a2;
    v10[1] = a3;
    result = MEMORY[0x1D827D8E0](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D5DF0E5C()
{
  return sub_1D5DF0E90((unint64_t *)&qword_1EFFB57A8, &qword_1EFFB5798, MEMORY[0x1E0DEB0A0], MEMORY[0x1E0DEA0C8]);
}

uint64_t sub_1D5DF0E90(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3;
    result = MEMORY[0x1D827D8E0](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D5DF0EEC()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF0EF8()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF0F04()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF0F10()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0F1C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0F28()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0F34()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1D5DF0F40()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1D5DF0F4C()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t sub_1D5DF0F58()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0F64()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0F70()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0F7C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0F88()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0F94()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0FA0()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF0FAC()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF0FB8()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF0FC4()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF0FD0()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF0FDC()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF0FE8()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t sub_1D5DF0FF4()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1D5DF1000()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t sub_1D5DF100C()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF1018()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF1024()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF1030()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF103C()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF1048()
{
  return MEMORY[0x1E0DEB0A0];
}

uint64_t sub_1D5DF1054()
{
  return MEMORY[0x1E0DEB0A8];
}

uint64_t sub_1D5DF1060()
{
  return MEMORY[0x1E0DEB080];
}

uint64_t sub_1D5DF106C()
{
  return MEMORY[0x1E0DEB0A0];
}

double sub_1D5DF1144@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t sub_1D5DF1150(double *a1)
{
  return sub_1D5DC2E04(*a1);
}

double sub_1D5DF1174@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t sub_1D5DF1180(double *a1)
{
  return sub_1D5DC2E20(*a1);
}

uint64_t sub_1D5DF11A4@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 8);
  return result;
}

_BYTE *sub_1D5DF11B0(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 8) = *result;
  return result;
}

uint64_t sub_1D5DF11BC@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 9);
  return result;
}

_BYTE *sub_1D5DF11C8(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 9) = *result;
  return result;
}

uint64_t sub_1D5DF11D4@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 10);
  return result;
}

_BYTE *sub_1D5DF11E0(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 10) = *result;
  return result;
}

uint64_t sub_1D5DF11EC(uint64_t *a1)
{
  return sub_1D5DC2E3C(*a1);
}

_QWORD *sub_1D5DF1210@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1D5DF121C(uint64_t *a1)
{
  return sub_1D5DC2E58(*a1);
}

double sub_1D5DF1240@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t sub_1D5DF124C(double *a1)
{
  return sub_1D5D7C738(*a1);
}

uint64_t sub_1D5DF1278()
{
  return 128;
}

__n128 sub_1D5DF1284(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  result = (__n128)a1[4];
  v6 = a1[5];
  v7 = a1[7];
  *(_OWORD *)(a2 + 96) = a1[6];
  *(_OWORD *)(a2 + 112) = v7;
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v6;
  return result;
}

uint64_t sub_1D5DF12B0()
{
  return 128;
}

__n128 sub_1D5DF12BC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  result = (__n128)a1[4];
  v6 = a1[5];
  v7 = a1[7];
  *(_OWORD *)(a2 + 96) = a1[6];
  *(_OWORD *)(a2 + 112) = v7;
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v6;
  return result;
}

double sub_1D5DF12E0@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 864);
  *a2 = result;
  return result;
}

uint64_t sub_1D5DF12EC(double *a1)
{
  return sub_1D5DC2E74(*a1);
}

uint64_t sub_1D5DF1310@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 872);
  return result;
}

_BYTE *sub_1D5DF131C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 872) = *result;
  return result;
}

uint64_t sub_1D5DF1328@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 888);
  return result;
}

_BYTE *sub_1D5DF1334(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 888) = *result;
  return result;
}

uint64_t sub_1D5DF1340@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 896);
  return result;
}

uint64_t sub_1D5DF134C(uint64_t *a1)
{
  return sub_1D5DC2E90(*a1);
}

uint64_t sub_1D5DF1370@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 904);
  return result;
}

_BYTE *sub_1D5DF137C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 904) = *result;
  return result;
}

uint64_t sub_1D5DF1388@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 905);
  return result;
}

_BYTE *sub_1D5DF1394(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 905) = *result;
  return result;
}

double sub_1D5DF13A0@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 912);
  *a2 = result;
  return result;
}

uint64_t sub_1D5DF13AC(double *a1)
{
  return sub_1D5DC3050(*a1);
}

double sub_1D5DF13D0@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 920);
  *a2 = result;
  return result;
}

uint64_t sub_1D5DF13DC(double *a1)
{
  return sub_1D5DC306C(*a1);
}

uint64_t sub_1D5DF1400@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 928);
  return result;
}

uint64_t sub_1D5DF140C(uint64_t *a1)
{
  return sub_1D5DC3088(*a1);
}

double sub_1D5DF1430@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 936);
  *a2 = result;
  return result;
}

uint64_t sub_1D5DF143C(double *a1)
{
  return sub_1D5DC3238(*a1);
}

double sub_1D5DF1460@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 944);
  *a2 = result;
  return result;
}

uint64_t sub_1D5DF146C(double *a1)
{
  return sub_1D5DC3254(*a1);
}

double sub_1D5DF1490@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 1384);
  *a2 = result;
  return result;
}

void sub_1D5DF149C(double *a1)
{
  sub_1D5DC3270(*a1);
}

double sub_1D5DF14C0@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 1392);
  *a2 = result;
  return result;
}

uint64_t sub_1D5DF14CC(double *a1)
{
  return sub_1D5DC343C(*a1);
}

uint64_t sub_1D5DF14F0@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 1400);
  return result;
}

_BYTE *sub_1D5DF14FC(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 1400) = *result;
  return result;
}

uint64_t sub_1D5DF1508@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 1408);
  return result;
}

uint64_t sub_1D5DF1514(uint64_t *a1)
{
  return sub_1D5DC3458(*a1);
}

double sub_1D5DF1538@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 1416);
  *a2 = result;
  return result;
}

void sub_1D5DF1544(double *a1)
{
  sub_1D5DC3608(*a1);
}

double sub_1D5DF1568@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 1856);
  *a2 = result;
  return result;
}

